{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415",
    "id": 1719386983,
    "node_id": "PR_kwDOABII585me8Nn",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29415",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/29415.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/29415.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29415",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29415/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
    "number": 29415,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "Broadcast own transactions only via short-lived Tor or I2P connections",
    "user": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "To improve privacy, broadcast locally submitted transactions (from the `sendrawtransaction` RPC) to the P2P network only via Tor or I2P short-lived connections.\r\n\r\n* Introduce a new connection type for private broadcast of transactions with the following properties:\r\n  * started whenever there are local transactions to be sent\r\n  * only opened to Tor or I2P peers\r\n  * opened regardless of max connections limits\r\n  * after handshake is completed one local transaction is pushed to the peer, `PING` is sent and after receiving `PONG` the connection is closed\r\n  * ignore all incoming messages after handshake is completed (except `PONG`)\r\n\r\n* Broadcast transactions submitted via `sendrawtransaction` using this new mechanism, to a few Tor or I2P peers. Keep doing this until we receive an `INV` about this transaction from one of our ordinary peers (this takes about 1 second on mainnet).\r\n\r\n* The transaction is stored in peerman and does not enter the mempool.\r\n\r\n* Once we get an `INV` from somebody, then the normal flow executes: we request the transaction with `GETDATA`, receive it with a `TX` message, put it in our mempool and broadcast it to all our existent connections (as if we see it for the first time).\r\n\r\n* After we receive the full transaction as a `TX` message, in reply to our `GETDATA` request, only then consider the transaction has propagated through the network and remove it from the storage in peerman, ending the private broadcast attempts.\r\n\r\nThe messages exchange should look like this:\r\n\r\n```\r\ntx-sender >--- connect -------> tx-recipient\r\ntx-sender >--- VERSION -------> tx-recipient (dummy VERSION with no revealing data)\r\ntx-sender <--- VERSION -------< tx-recipient\r\ntx-sender <--- WTXIDRELAY ----< tx-recipient (maybe)\r\ntx-sender <--- SENDADDRV2 ----< tx-recipient (maybe)\r\ntx-sender <--- SENDTXRCNCL ---< tx-recipient (maybe)\r\ntx-sender <--- VERACK --------< tx-recipient\r\ntx-sender >--- VERACK --------> tx-recipient\r\ntx-sender >--- TX ------------> tx-recipient\r\ntx-sender >--- PING ----------> tx-recipient\r\ntx-sender <--- PONG ----------< tx-recipient\r\ntx-sender disconnects\r\n```\r\n\r\nWhenever a new transaction is received from `sendrawtransaction` RPC, the node will send it to 5 (`NUM_PRIVATE_BROADCAST_PER_TX`) recipients right away. If after 10-15 mins we still have not heard anything about the transaction from the network, then it will be sent to 1 more peer (see `PeerManagerImpl::ReattemptPrivateBroadcast()`).\r\n\r\nA few considerations:\r\n* The short-lived private broadcast connections are very cheap and fast wrt network traffic. It is expected that some of those peers could blackhole the transaction. Just one honest/proper peer is enough for successful propagation.\r\n* The peers that receive the transaction could deduce that this is initial transaction broadcast from the transaction originator. This is ok, they can't identify the sender.\r\n\r\n---\r\n\r\nSome explanation of the commits:\r\n\r\n* New logging category and config option to enable private broadcast\r\n  * `log: introduce a new category for private broadcast`\r\n  * `init: introduce a new option to enable/disable private broadcast`\r\n\r\n* Implement the private broadcast connection handling on the `CConnman` side:\r\n  * `net: introduce a new connection type for private broadcast`\r\n  * `net: move peers counting before grant acquisition in ThreadOpenConnections()`\r\n  * `net: implement opening PRIVATE_BROADCAST connections`\r\n\r\n* Prepare `BroadcastTransaction()` for private broadcast requests:\r\n  * `net_processing: rename RelayTransaction to better describe what it does`\r\n  * `node: change a tx-relay on/off flag to a tri-state`\r\n  * `net_processing: store transactions for private broadcast in PeerManager`\r\n\r\n* Implement the private broadcast connection handling on the `PeerManager` side:\r\n  * `net_processing: reorder the code that handles the VERSION message`\r\n  * `net_processing: handle ConnectionType::PRIVATE_BROADCAST connections`\r\n  * `net_processing: stop private broadcast of a transaction after round-trip`\r\n  * `net_processing: retry private broadcast`\r\n\r\n* Engage the new functionality from `sendrawtransaction`:\r\n  * `rpc: use private broadcast from sendrawtransaction RPC if -privatebroadcast is ON`\r\n\r\n* Independent test framework improvements (also opened as a standalone PR at https://github.com/bitcoin/bitcoin/pull/29420):\r\n  * `test: improve debug log message from P2PConnection::connection_made()`\r\n  * `test: extend the SOCKS5 Python proxy to actually connect to a destination`\r\n  * `test: support WTX INVs from P2PDataStore and fix a comment`\r\n  * `test: set P2PConnection::p2p_connected_to_node in peer_connect_helper()`\r\n\r\n* New functional test that exercies some of the new code:\r\n  * `test: add functional test for local tx relay`\r\n\r\n---\r\n\r\nThis addresses:\r\nhttps://github.com/bitcoin/bitcoin/issues/3828 Clients leak IPs if they are recipients of a transaction\r\nhttps://github.com/bitcoin/bitcoin/issues/14692 Can't configure bitocoind to only send tx via Tor but receive clearnet transactions\r\nhttps://github.com/bitcoin/bitcoin/issues/19042 Tor-only transaction broadcast onlynet=onion alternative\r\nhttps://github.com/bitcoin/bitcoin/issues/24557 Option for receive events with all networks, but send transactions and/or blocks only with anonymous network[s]?\r\nhttps://github.com/bitcoin/bitcoin/issues/25450 Ability to broadcast wallet transactions only via dedicated oneshot Tor connections\r\n\r\nRelated, but different:\r\nhttps://github.com/bitcoin/bitcoin/issues/21876 Broadcast a transaction to specific nodes\r\nhttps://github.com/bitcoin/bitcoin/issues/28636 new RPC: sendrawtransactiontopeer\r\n\r\n---\r\n\r\nNext step after this PR is done will be to have the wallet do the private broadcast as well, https://github.com/bitcoin/bitcoin/issues/11887 would have to be resolved.\r\n\r\n---\r\n\r\n_A previous incarnation of this can be found at https://github.com/bitcoin/bitcoin/pull/27509. It puts the transaction in the mempool and (tries to) hide it from the outside observers. This turned out to be too error prone or maybe even impossible._\r\n",
    "labels": [],
    "created_at": "2024-02-09T13:39:10Z",
    "updated_at": "2024-07-31T14:57:28Z",
    "mergeable": true,
    "mergeable_state": "blocked",
    "merge_commit_sha": "79b072af2272d48116c6310db7e7ef6d4515aeff",
    "assignees": [],
    "requested_reviewers": [
      {
        "login": "nothingmuch",
        "id": 14242,
        "node_id": "MDQ6VXNlcjE0MjQy",
        "avatar_url": "https://avatars.githubusercontent.com/u/14242?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nothingmuch",
        "html_url": "https://github.com/nothingmuch",
        "followers_url": "https://api.github.com/users/nothingmuch/followers",
        "following_url": "https://api.github.com/users/nothingmuch/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/nothingmuch/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/nothingmuch/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/nothingmuch/subscriptions",
        "organizations_url": "https://api.github.com/users/nothingmuch/orgs",
        "repos_url": "https://api.github.com/users/nothingmuch/repos",
        "events_url": "https://api.github.com/users/nothingmuch/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/nothingmuch/received_events",
        "type": "User",
        "site_admin": false
      },
      {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "vasild:private_broadcast",
      "ref": "private_broadcast",
      "sha": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 120608826,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMjA2MDg4MjY=",
        "name": "bitcoin",
        "full_name": "vasild/bitcoin",
        "owner": {
          "login": "vasild",
          "id": 266751,
          "node_id": "MDQ6VXNlcjI2Njc1MQ==",
          "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/vasild",
          "html_url": "https://github.com/vasild",
          "followers_url": "https://api.github.com/users/vasild/followers",
          "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
          "organizations_url": "https://api.github.com/users/vasild/orgs",
          "repos_url": "https://api.github.com/users/vasild/repos",
          "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/vasild/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/vasild/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/vasild/bitcoin",
        "archive_url": "https://api.github.com/repos/vasild/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/vasild/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/vasild/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/vasild/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/vasild/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/vasild/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/vasild/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/vasild/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/vasild/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/vasild/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/vasild/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/vasild/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/vasild/bitcoin/events",
        "forks_url": "https://api.github.com/repos/vasild/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/vasild/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/vasild/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/vasild/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/vasild/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/vasild/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/vasild/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/vasild/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/vasild/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/vasild/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/vasild/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/vasild/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/vasild/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/vasild/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/vasild/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/vasild/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:vasild/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/vasild/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/vasild/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/vasild/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/vasild/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/vasild/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/vasild/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/vasild/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/vasild/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/vasild/bitcoin/hooks",
        "svn_url": "https://github.com/vasild/bitcoin",
        "homepage": "https://bitcoin.org/en/download",
        "language": "C++",
        "forks_count": 1,
        "stargazers_count": 5,
        "watchers_count": 5,
        "size": 239568,
        "default_branch": "master",
        "open_issues_count": 2,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2024-07-31T13:25:22Z",
        "created_at": "2018-02-07T11:52:47Z",
        "updated_at": "2024-07-31T11:59:54Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "174bedd8d98b50b57fc46db4c18c10cd862edb01",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 35686,
        "stargazers_count": 77421,
        "watchers_count": 77421,
        "size": 264000,
        "default_branch": "master",
        "open_issues_count": 671,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2024-07-31T14:25:37Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2024-07-31T14:41:28Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 1619,
    "deletions": 227,
    "changed_files": 36,
    "commits": 19,
    "review_comments": 190,
    "comments": 36
  },
  "events": [
    {
      "event": "commented",
      "id": 1935952116,
      "node_id": "IC_kwDOABII585zZEj0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1935952116",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-09T13:39:13Z",
      "updated_at": "2024-07-31T13:25:30Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage\nFor detailed information about the code coverage, see the [test coverage report](https://corecheck.dev/bitcoin/bitcoin/pulls/29415).\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| Concept ACK | [andrewtoth](https://github.com/bitcoin/bitcoin/pull/29415#issuecomment-2008043439), [zzzi2p](https://github.com/bitcoin/bitcoin/pull/29415#issuecomment-2025920443), [nothingmuch](https://github.com/bitcoin/bitcoin/pull/29415#pullrequestreview-1984991157) |\n| Stale ACK | [pinheadmz](https://github.com/bitcoin/bitcoin/pull/29415#issuecomment-2203472829) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#30385](https://github.com/bitcoin/bitcoin/pull/30385) ([WIP] p2p: send not_found msgs for unknown, pruned or unwilling to share blocks by furszy)\n* [#30381](https://github.com/bitcoin/bitcoin/pull/30381) ([WIP] net: return result from addnode RPC by willcl-ark)\n* [#30343](https://github.com/bitcoin/bitcoin/pull/30343) (wallet, logging: Replace WalletLogPrintf() with LogInfo() by ryanofsky)\n* [#30332](https://github.com/bitcoin/bitcoin/pull/30332) (Stratum v2 connman by Sjors)\n* [#30315](https://github.com/bitcoin/bitcoin/pull/30315) (Stratum v2 Transport by Sjors)\n* [#30277](https://github.com/bitcoin/bitcoin/pull/30277) ([DO NOT MERGE] Erlay: bandwidth-efficient transaction relay protocol (Full implementation) by sr-gi)\n* [#30212](https://github.com/bitcoin/bitcoin/pull/30212) (rename TransactionErrors: MISSING_INPUTS and ALREADY_IN_CHAIN by willcl-ark)\n* [#30116](https://github.com/bitcoin/bitcoin/pull/30116) (p2p: Fill reconciliation sets (Erlay) attempt 2 by sr-gi)\n* [#30111](https://github.com/bitcoin/bitcoin/pull/30111) (locks: introduce mutex for tx download, flush rejection filters on UpdatedBlockTip by glozow)\n* [#30065](https://github.com/bitcoin/bitcoin/pull/30065) (init: fixes file descriptor accounting by sr-gi)\n* [#29798](https://github.com/bitcoin/bitcoin/pull/29798) (Logging cleanup by vasild)\n* [#29680](https://github.com/bitcoin/bitcoin/pull/29680) (wallet: fix unrelated parent conflict doesn't cause child tx to be marked as conflict by Eunovo)\n* [#29641](https://github.com/bitcoin/bitcoin/pull/29641) (scripted-diff: Use LogInfo/LogDebug over LogPrintf/LogPrint by maflcko)\n* [#29625](https://github.com/bitcoin/bitcoin/pull/29625) (Several randomness improvements by sipa)\n* [#29605](https://github.com/bitcoin/bitcoin/pull/29605) (net: Favor peers from addrman over fetching seednodes by sr-gi)\n* [#29431](https://github.com/bitcoin/bitcoin/pull/29431) (test/BIP324: disconnection scenarios during v2 handshake by stratospher)\n* [#29346](https://github.com/bitcoin/bitcoin/pull/29346) (Stratum v2 Noise Protocol by Sjors)\n* [#29278](https://github.com/bitcoin/bitcoin/pull/29278) (Wallet:  Add `maxfeerate` wallet startup option by ismaelsadeeq)\n* [#28488](https://github.com/bitcoin/bitcoin/pull/28488) (p2p: Evict outbound peers with high minFeeRate by naumenkogs)\n* [#28463](https://github.com/bitcoin/bitcoin/pull/28463) (p2p: Increase inbound capacity for block-relay only connections by mzumsande)\n* [#27865](https://github.com/bitcoin/bitcoin/pull/27865) (wallet: Track no-longer-spendable TXOs separately by achow101)\n* [#27826](https://github.com/bitcoin/bitcoin/pull/27826) (validation: log which peer sent us a header by Sjors)\n* [#26697](https://github.com/bitcoin/bitcoin/pull/26697) (logging: use bitset for categories by LarryRuane)\n* [#25832](https://github.com/bitcoin/bitcoin/pull/25832) (tracing: network connection tracepoints by 0xB10C)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#issuecomment-1935952116",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29415"
    },
    {
      "event": "commented",
      "id": 1936003083,
      "node_id": "IC_kwDOABII585zZRAL",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1936003083",
      "actor": {
        "login": "1440000bytes",
        "id": 147166694,
        "node_id": "U_kgDOCMWV5g",
        "avatar_url": "https://avatars.githubusercontent.com/u/147166694?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/1440000bytes",
        "html_url": "https://github.com/1440000bytes",
        "followers_url": "https://api.github.com/users/1440000bytes/followers",
        "following_url": "https://api.github.com/users/1440000bytes/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/1440000bytes/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/1440000bytes/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/1440000bytes/subscriptions",
        "organizations_url": "https://api.github.com/users/1440000bytes/orgs",
        "repos_url": "https://api.github.com/users/1440000bytes/repos",
        "events_url": "https://api.github.com/users/1440000bytes/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/1440000bytes/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-09T14:12:36Z",
      "updated_at": "2024-02-09T14:12:36Z",
      "author_association": "NONE",
      "body": "I am not sure about this approach to improve privacy. Is it necessary to open new short lived tor/i2p connections for broadcasting the transaction? What are the trade-offs in this implementation vs a simple implementation to relay tx to one or more peers that our node is already connected to?\r\n\r\nRelated issues:\r\n\r\nhttps://github.com/bitcoin/bitcoin/issues/21876\r\nhttps://github.com/bitcoin/bitcoin/issues/28636",
      "user": {
        "login": "1440000bytes",
        "id": 147166694,
        "node_id": "U_kgDOCMWV5g",
        "avatar_url": "https://avatars.githubusercontent.com/u/147166694?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/1440000bytes",
        "html_url": "https://github.com/1440000bytes",
        "followers_url": "https://api.github.com/users/1440000bytes/followers",
        "following_url": "https://api.github.com/users/1440000bytes/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/1440000bytes/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/1440000bytes/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/1440000bytes/subscriptions",
        "organizations_url": "https://api.github.com/users/1440000bytes/orgs",
        "repos_url": "https://api.github.com/users/1440000bytes/repos",
        "events_url": "https://api.github.com/users/1440000bytes/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/1440000bytes/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#issuecomment-1936003083",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29415"
    },
    {
      "event": "labeled",
      "id": 11759489534,
      "node_id": "LE_lADOABII585-yiT2zwAAAAK865H-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11759489534",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-09T15:35:35Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11764679568,
      "node_id": "HRFPE_lADOABII585-yiT2zwAAAAK9OsOQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11764679568",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-10T11:50:15Z"
    },
    {
      "event": "commented",
      "id": 1936992757,
      "node_id": "IC_kwDOABII585zdCn1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1936992757",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-10T12:16:19Z",
      "updated_at": "2024-02-10T12:17:03Z",
      "author_association": "CONTRIBUTOR",
      "body": "@1440000bytes, thanks for asking! There is some discussion at https://github.com/bitcoin/bitcoin/pull/27509 (the previous attempt on this).\r\n\r\n> Is it necessary to open new short lived tor/i2p connections for broadcasting the transaction?\r\n\r\nYes, it is. See below.\r\n\r\n> What are the trade-offs in this implementation vs a simple implementation to relay tx to one or more peers that our node is already connected to?\r\n\r\nSending the transaction over clearnet reveals the IP address/geolocation of the sender. A spy with many connections to the network could try to guess who was the originator. So, why not send it to our Tor peers only? Because it is relatively easy for a spy to fingerprint and link clearnet and Tor connections to the same peer. That is, a long running connection over Tor could be linked to a long running clearnet connection. This is why the proposed changes open a short-lived connection that does not reveal any of the identity of the sender.\r\n\r\nWould this benefit nodes that don't have clearnet connections, e.g. Tor/I2P-only nodes? Yes! In the case where the sender sends two otherwise unrelated transactions over the same long-running Tor connection, the recipient will know that they have the same origin, even though they are not related on-chain. Using single shot connections fixes that too.\r\n\r\n> Related issues:\r\n\r\nLinked in the OP, thanks!",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#issuecomment-1936992757",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29415"
    },
    {
      "event": "mentioned",
      "id": 11764733867,
      "node_id": "MEE_lADOABII585-yiT2zwAAAAK9O5er",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11764733867",
      "actor": {
        "login": "1440000bytes",
        "id": 147166694,
        "node_id": "U_kgDOCMWV5g",
        "avatar_url": "https://avatars.githubusercontent.com/u/147166694?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/1440000bytes",
        "html_url": "https://github.com/1440000bytes",
        "followers_url": "https://api.github.com/users/1440000bytes/followers",
        "following_url": "https://api.github.com/users/1440000bytes/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/1440000bytes/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/1440000bytes/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/1440000bytes/subscriptions",
        "organizations_url": "https://api.github.com/users/1440000bytes/orgs",
        "repos_url": "https://api.github.com/users/1440000bytes/repos",
        "events_url": "https://api.github.com/users/1440000bytes/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/1440000bytes/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-10T12:16:20Z"
    },
    {
      "event": "subscribed",
      "id": 11764733868,
      "node_id": "SE_lADOABII585-yiT2zwAAAAK9O5es",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11764733868",
      "actor": {
        "login": "1440000bytes",
        "id": 147166694,
        "node_id": "U_kgDOCMWV5g",
        "avatar_url": "https://avatars.githubusercontent.com/u/147166694?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/1440000bytes",
        "html_url": "https://github.com/1440000bytes",
        "followers_url": "https://api.github.com/users/1440000bytes/followers",
        "following_url": "https://api.github.com/users/1440000bytes/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/1440000bytes/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/1440000bytes/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/1440000bytes/subscriptions",
        "organizations_url": "https://api.github.com/users/1440000bytes/orgs",
        "repos_url": "https://api.github.com/users/1440000bytes/repos",
        "events_url": "https://api.github.com/users/1440000bytes/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/1440000bytes/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-10T12:16:20Z"
    },
    {
      "event": "unlabeled",
      "id": 11764779098,
      "node_id": "UNLE_lADOABII585-yiT2zwAAAAK9PEha",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11764779098",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-10T12:48:54Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 1874263137,
      "node_id": "PRR_kwDOABII585vtvxh",
      "url": null,
      "actor": null,
      "commit_id": "2b05af27608f9e4e9a1b5f5c83c7870a8e6c9425",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "davidgumberg",
        "id": 2257631,
        "node_id": "MDQ6VXNlcjIyNTc2MzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2257631?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/davidgumberg",
        "html_url": "https://github.com/davidgumberg",
        "followers_url": "https://api.github.com/users/davidgumberg/followers",
        "following_url": "https://api.github.com/users/davidgumberg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/davidgumberg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/davidgumberg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/davidgumberg/subscriptions",
        "organizations_url": "https://api.github.com/users/davidgumberg/orgs",
        "repos_url": "https://api.github.com/users/davidgumberg/repos",
        "events_url": "https://api.github.com/users/davidgumberg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/davidgumberg/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#pullrequestreview-1874263137",
      "submitted_at": "2024-02-10T21:48:08Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
    },
    {
      "event": "commented",
      "id": 1937228496,
      "node_id": "IC_kwDOABII585zd8LQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1937228496",
      "actor": {
        "login": "epiccurious",
        "id": 109078515,
        "node_id": "U_kgDOBoBn8w",
        "avatar_url": "https://avatars.githubusercontent.com/u/109078515?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/epiccurious",
        "html_url": "https://github.com/epiccurious",
        "followers_url": "https://api.github.com/users/epiccurious/followers",
        "following_url": "https://api.github.com/users/epiccurious/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/epiccurious/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/epiccurious/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/epiccurious/subscriptions",
        "organizations_url": "https://api.github.com/users/epiccurious/orgs",
        "repos_url": "https://api.github.com/users/epiccurious/repos",
        "events_url": "https://api.github.com/users/epiccurious/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/epiccurious/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-10T21:56:09Z",
      "updated_at": "2024-02-10T21:56:09Z",
      "author_association": "CONTRIBUTOR",
      "body": "v2 Transport will be enabled by default in the next release (https://github.com/bitcoin/bitcoin/pull/29347).\r\n\r\nIf there were eventually a change to _force_ clearnet transactions over v2 transport (so the details of the communications were encrypted), would that solve the same problem that this PR is aiming to solve?",
      "user": {
        "login": "epiccurious",
        "id": 109078515,
        "node_id": "U_kgDOBoBn8w",
        "avatar_url": "https://avatars.githubusercontent.com/u/109078515?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/epiccurious",
        "html_url": "https://github.com/epiccurious",
        "followers_url": "https://api.github.com/users/epiccurious/followers",
        "following_url": "https://api.github.com/users/epiccurious/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/epiccurious/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/epiccurious/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/epiccurious/subscriptions",
        "organizations_url": "https://api.github.com/users/epiccurious/orgs",
        "repos_url": "https://api.github.com/users/epiccurious/repos",
        "events_url": "https://api.github.com/users/epiccurious/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/epiccurious/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#issuecomment-1937228496",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29415"
    },
    {
      "event": "commented",
      "id": 1937766372,
      "node_id": "IC_kwDOABII585zf_fk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1937766372",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-11T14:13:16Z",
      "updated_at": "2024-02-11T14:13:16Z",
      "author_association": "CONTRIBUTOR",
      "body": "@epiccurious, p2p encryption \"solves\" the spying from intermediate routers on clearnet (aka man-in-the-middle). Tor, I2P and CJDNS solve that too. While this PR uses only Tor and I2P it would solve that problem. But there is more - it will as well solve issues with spying bitcoin nodes.",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#issuecomment-1937766372",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29415"
    },
    {
      "event": "mentioned",
      "id": 11767128759,
      "node_id": "MEE_lADOABII585-yiT2zwAAAAK9YCK3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11767128759",
      "actor": {
        "login": "epiccurious",
        "id": 109078515,
        "node_id": "U_kgDOBoBn8w",
        "avatar_url": "https://avatars.githubusercontent.com/u/109078515?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/epiccurious",
        "html_url": "https://github.com/epiccurious",
        "followers_url": "https://api.github.com/users/epiccurious/followers",
        "following_url": "https://api.github.com/users/epiccurious/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/epiccurious/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/epiccurious/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/epiccurious/subscriptions",
        "organizations_url": "https://api.github.com/users/epiccurious/orgs",
        "repos_url": "https://api.github.com/users/epiccurious/repos",
        "events_url": "https://api.github.com/users/epiccurious/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/epiccurious/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-11T14:13:18Z"
    },
    {
      "event": "subscribed",
      "id": 11767128766,
      "node_id": "SE_lADOABII585-yiT2zwAAAAK9YCK-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11767128766",
      "actor": {
        "login": "epiccurious",
        "id": 109078515,
        "node_id": "U_kgDOBoBn8w",
        "avatar_url": "https://avatars.githubusercontent.com/u/109078515?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/epiccurious",
        "html_url": "https://github.com/epiccurious",
        "followers_url": "https://api.github.com/users/epiccurious/followers",
        "following_url": "https://api.github.com/users/epiccurious/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/epiccurious/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/epiccurious/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/epiccurious/subscriptions",
        "organizations_url": "https://api.github.com/users/epiccurious/orgs",
        "repos_url": "https://api.github.com/users/epiccurious/repos",
        "events_url": "https://api.github.com/users/epiccurious/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/epiccurious/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-11T14:13:18Z"
    },
    {
      "event": "referenced",
      "id": 11767164746,
      "node_id": "REFE_lADOABII585-yiT2zwAAAAK9YK9K",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11767164746",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "b0344c219a641b759fb0cc4f53afebe675b8ca27",
      "commit_url": "https://api.github.com/repos/vasild/bitcoin/commits/b0344c219a641b759fb0cc4f53afebe675b8ca27",
      "created_at": "2024-02-11T14:26:23Z"
    },
    {
      "event": "labeled",
      "id": 11935116014,
      "node_id": "LE_lADOABII585-yiT2zwAAAALHY2ru",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11935116014",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-27T11:49:34Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11965894649,
      "node_id": "HRFPE_lADOABII585-yiT2zwAAAALJOQ_5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11965894649",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-29T13:18:05Z"
    },
    {
      "event": "commented",
      "id": 1971120973,
      "node_id": "IC_kwDOABII5851fOtN",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1971120973",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-29T13:18:23Z",
      "updated_at": "2024-02-29T13:18:23Z",
      "author_association": "CONTRIBUTOR",
      "body": "`74ba7c7fb5...6fad02cf03`: rebase due to conflicts",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#issuecomment-1971120973",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29415"
    },
    {
      "event": "unlabeled",
      "id": 11966519505,
      "node_id": "UNLE_lADOABII585-yiT2zwAAAALJQpjR",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11966519505",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-29T14:03:56Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 1986011938,
      "node_id": "IC_kwDOABII5852YCMi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1986011938",
      "actor": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-08T16:32:33Z",
      "updated_at": "2024-03-08T16:32:33Z",
      "author_association": "MEMBER",
      "body": "concept ACK 6fad02cf03 \r\n\r\n(code review in progress)\r\n\r\nI am also testing this feature in Warnet, which deploys a regtest network and even has an internal Tor DA so I can simulate onion routing locally. Currently using a 20-node [graph](https://github.com/pinheadmz/warnet/blob/priv-broadcast/test/data/onion.graphml) and a [scenario](https://github.com/pinheadmz/warnet/blob/priv-broadcast/src/scenarios/onion_init.py) which connects the graph, adds onion addresses to the test node, and then sends a raw transaction from the node running this branch.\r\n\r\nThe private broadcast succeeds frequently but not always. In Warnet anyway I had better luck when the test node had `-listenonion=0`, I tried that after suspecting that inbound onion connections were removing potential peers from the private broadcast list, but I'm not sure.\r\n\r\nI think I noticed this in the original PR as well, if multiple transactions are sent, the count keeps going up without a limit: \r\n\r\n```\r\n [privatebroadcast] Requested to open 60 connection(s), trying to open one\r\n```\r\n\r\nScreenshot below, I managed to capture a private broadcast connection! I'll mention when i get to that commit in review as well, but the connection type `\"privbcast\"` is breaking the very nice `-netinfo` table :-)\r\n\r\n\r\nSo far I have a few questions about the strategy:\r\n\r\n1. How do we pick the onion peers to relay to? If we avoid reusing peers then (especially in my miniature network) we can run out quickly, and nothing ever gets broadcast.\r\n\r\n2. Are we using fresh Tor identities for these connections? I think [Wasabi does something like this:](https://docs.wasabiwallet.app/why-wasabi/NetworkLevelPrivacy.html)\r\n\r\n> Wasabi connects to each peer through a different Tor stream. \r\n\r\n3. Do you think we need any RPC to get the status of private tx sends or provide the option to abandon (or revert to clearnet?)\r\n\r\n4. I assume you are restricting the feature to sendraw so the wallet doesn't get involved and try something silly like rebroadcasting over clearnet or inserting in to our own mempool? Do you think future work will integrate the wallet?\r\n\r\n\r\n![privbroadcast](https://github.com/bitcoin/bitcoin/assets/2084648/ec172be1-e5d8-4c00-94fc-e219dccacdec)\r\n\r\n\r\n",
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#issuecomment-1986011938",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29415"
    },
    {
      "event": "commented",
      "id": 1986188327,
      "node_id": "IC_kwDOABII5852YtQn",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1986188327",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-08T18:21:15Z",
      "updated_at": "2024-03-11T09:35:37Z",
      "author_association": "CONTRIBUTOR",
      "body": "@pinheadmz, excellent! Thank you for looking into this! Replies inline:\r\n\r\n> The private broadcast succeeds frequently but not always\r\n\r\nLets debug this in a sub-thread in order not to overwhelm the PR main thread: [here](https://github.com/bitcoin/bitcoin/pull/29415/files#r1519402830).\r\n\r\n> suspecting that inbound onion connections were removing potential peers from the private broadcast list\r\n\r\nNo, this cannot be the case. Inbound onion connections appear as IPv4 connections coming from the Tor daemon. They do not have any source address associated with them, other than the one of the Tor daemon itself (usually `127.0.0.1`).\r\n\r\n> I think I noticed this in the original PR as well, if multiple transactions are sent, the count keeps going up without a limit\r\n\r\nThat is now capped at `size_t MAX_PRIVATE_BROADCAST_CONNECTIONS{64}`.\r\n\r\n> the connection type `\"privbcast\"` is breaking the very nice `-netinfo` table\r\n\r\nThis better be addressed in the visualization engine, e.g. by using `%5.5s`\r\n\r\n> How do we pick the onion peers to relay to? If we avoid reusing peers then...\r\n\r\nWe pick a random Tor (or I2P) peer. In the same way we choose the address when we want to have an outbound connection to a peer from a particular network. No attempt to avoid reuse. But we don't connect to already connected peers. This is the logic as in `master`.\r\n\r\n> Are we using fresh Tor identities for these connections?\r\n\r\nYes, if `-proxyrandomize=1` (the default). This is the same in `master` - separate Tor circuit per connection. This PR does the same as Wasabi: https://docs.wasabiwallet.app/why-wasabi/NetworkLevelPrivacy.html#wasabi-wallet-light-node\r\n\r\n> Do you think we need any RPC to get the status of private tx sends or provide the option to abandon (or revert to clearnet?)\r\n\r\nYes, both would be useful, but as a followup PR. I am afraid putting those here would bloat this PR too much. I could however implement that and publish it under Draft PR that depends on this one, so people can use it during testing.\r\n\r\n> I assume you are restricting the feature to sendraw so the wallet doesn't get involved and try something silly like rebroadcasting over clearnet or inserting in to our own mempool?\r\n\r\nThe reason to omit the wallet is that it currently does not count non-mempool change. For example, if we have 1 BTC and send 0.6 to somebody and 0.4 as change, the wallet will show a balance of 0 (or 1, unchanged? somebody correct me if I am wrong) until the transaction enters the mempool (or gets mined in a block). This would be quite rough user experience. Note that this is already the case in `master` if `-walletbroadcast=0`.\r\n\r\n> Do you think future work will integrate the wallet?\r\n\r\nYes, but I left that for another PR. Omitting it here reduces the size of this PR and allows to deal with the wallet in isolation, after all the distracting infrastructure is in (e.g. log category, new type of connection, the \"net\" code, etc).\r\n",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#issuecomment-1986188327",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29415"
    },
    {
      "event": "mentioned",
      "id": 12059164170,
      "node_id": "MEE_lADOABII585-yiT2zwAAAALOyD4K",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12059164170",
      "actor": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-08T18:21:16Z"
    },
    {
      "event": "subscribed",
      "id": 12059164176,
      "node_id": "SE_lADOABII585-yiT2zwAAAALOyD4Q",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12059164176",
      "actor": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-08T18:21:16Z"
    },
    {
      "event": "reviewed",
      "id": 1925311361,
      "node_id": "PRR_kwDOABII585yweuB",
      "url": null,
      "actor": null,
      "commit_id": "6fad02cf03d6b37d0a22443a411ec92649b1d39d",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Reviewed code through first 11 commits (up to 07dee91112189be02c6694385de261570725b56b) some nits but mostly questions below. I will continue review next week.\r\n\r\nReally great clean up in first commit in logging.cpp, very satisfying!\r\n\r\nOne other out-of-line question, about commit eb9d7386ca82319ab682fc20ab35c13340d108a4, the commit message mentions \"poking CConnman to start broadcast\" but I don't think that is in the code in that commit.",
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#pullrequestreview-1925311361",
      "submitted_at": "2024-03-08T20:59:10Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
    },
    {
      "event": "labeled",
      "id": 12062073882,
      "node_id": "LE_lADOABII585-yiT2zwAAAALO9KQa",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12062073882",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-09T02:12:37Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 1927346768,
      "node_id": "PRR_kwDOABII585y4PpQ",
      "url": null,
      "actor": null,
      "commit_id": "6fad02cf03d6b37d0a22443a411ec92649b1d39d",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#pullrequestreview-1927346768",
      "submitted_at": "2024-03-11T09:35:15Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
    },
    {
      "event": "reviewed",
      "id": 1928530676,
      "node_id": "PRR_kwDOABII585y8wr0",
      "url": null,
      "actor": null,
      "commit_id": "bc05ddc7b9369cf263bf88d0a773ca853d3c9af5",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#pullrequestreview-1928530676",
      "submitted_at": "2024-03-11T17:19:47Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12077825561,
      "node_id": "HRFPE_lADOABII585-yiT2zwAAAALP5P4Z",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12077825561",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-11T17:56:06Z"
    },
    {
      "event": "commented",
      "id": 1989094391,
      "node_id": "IC_kwDOABII5852jyv3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1989094391",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-11T17:56:20Z",
      "updated_at": "2024-03-11T17:56:20Z",
      "author_association": "CONTRIBUTOR",
      "body": "`6fad02cf03...d10a0649b0`: rebase due to conflicts and address some suggestions",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#issuecomment-1989094391",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29415"
    },
    {
      "event": "reviewed",
      "id": 1928558982,
      "node_id": "PRR_kwDOABII585y83mG",
      "url": null,
      "actor": null,
      "commit_id": "d10a0649b018638574fa7dc316b3e783bf6cee69",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "code review ACK d10a0649b0\r\n\r\nAlthough I think you rebased while was in there, so a few of my commit hashes might be off.\r\n\r\nOne additional out of line comment, in commit message for 6b8c645ea623875de9e3e3d3f77054dd0a784c20 you are using C++ syntax to describe python :-)",
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#pullrequestreview-1928558982",
      "submitted_at": "2024-03-11T18:41:58Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
    },
    {
      "event": "unlabeled",
      "id": 12078594150,
      "node_id": "UNLE_lADOABII585-yiT2zwAAAALP8Lhm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12078594150",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-11T18:55:20Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12093175316,
      "node_id": "HRFPE_lADOABII585-yiT2zwAAAALQzzYU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12093175316",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-12T18:02:51Z"
    },
    {
      "event": "commented",
      "id": 1992254693,
      "node_id": "IC_kwDOABII5852v2Tl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1992254693",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-12T18:03:11Z",
      "updated_at": "2024-03-12T18:03:11Z",
      "author_association": "CONTRIBUTOR",
      "body": "`d10a0649b0...5ca891f4e0`: address some suggestions",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#issuecomment-1992254693",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29415"
    },
    {
      "event": "labeled",
      "id": 12093193357,
      "node_id": "LE_lADOABII585-yiT2zwAAAALQz3yN",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12093193357",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-12T18:04:33Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12093209903,
      "node_id": "HRFPE_lADOABII585-yiT2zwAAAALQz70v",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12093209903",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-12T18:06:07Z"
    },
    {
      "event": "commented",
      "id": 1992260133,
      "node_id": "IC_kwDOABII5852v3ol",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1992260133",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-12T18:06:18Z",
      "updated_at": "2024-03-12T18:06:18Z",
      "author_association": "CONTRIBUTOR",
      "body": "`5ca891f4e0...b6dce67064`: rebase due to conflicts",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#issuecomment-1992260133",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29415"
    },
    {
      "event": "unlabeled",
      "id": 12094588085,
      "node_id": "UNLE_lADOABII585-yiT2zwAAAALQ5MS1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12094588085",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-12T20:25:30Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12102946189,
      "node_id": "HRFPE_lADOABII585-yiT2zwAAAALRZE2N",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12102946189",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-13T12:44:09Z"
    },
    {
      "event": "commented",
      "id": 1994313253,
      "node_id": "IC_kwDOABII58523s4l",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1994313253",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-13T12:44:21Z",
      "updated_at": "2024-03-13T12:44:21Z",
      "author_association": "CONTRIBUTOR",
      "body": "`b6dce67064...cc867ebd62`: rebase due to conflicts",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#issuecomment-1994313253",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29415"
    },
    {
      "event": "commented",
      "id": 2000166681,
      "node_id": "IC_kwDOABII5853OB8Z",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2000166681",
      "actor": {
        "login": "iotamega",
        "id": 101424448,
        "node_id": "U_kgDOBgudQA",
        "avatar_url": "https://avatars.githubusercontent.com/u/101424448?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/iotamega",
        "html_url": "https://github.com/iotamega",
        "followers_url": "https://api.github.com/users/iotamega/followers",
        "following_url": "https://api.github.com/users/iotamega/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/iotamega/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/iotamega/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/iotamega/subscriptions",
        "organizations_url": "https://api.github.com/users/iotamega/orgs",
        "repos_url": "https://api.github.com/users/iotamega/repos",
        "events_url": "https://api.github.com/users/iotamega/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/iotamega/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-15T17:56:31Z",
      "updated_at": "2024-03-15T17:56:31Z",
      "author_association": "NONE",
      "body": "Is this going to be on by default or just an option?\r\n\r\nHaven't had a chance to look at the code submissions yet but I do have concerns if this is on by default that many corporate networks will start blocking installation or that transactions will not be submitted as many corporate networks block Tor or I2P connections by default at the corporate firewall level.\r\n\r\nI assume it has failovers as well if it is by default?",
      "user": {
        "login": "iotamega",
        "id": 101424448,
        "node_id": "U_kgDOBgudQA",
        "avatar_url": "https://avatars.githubusercontent.com/u/101424448?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/iotamega",
        "html_url": "https://github.com/iotamega",
        "followers_url": "https://api.github.com/users/iotamega/followers",
        "following_url": "https://api.github.com/users/iotamega/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/iotamega/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/iotamega/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/iotamega/subscriptions",
        "organizations_url": "https://api.github.com/users/iotamega/orgs",
        "repos_url": "https://api.github.com/users/iotamega/repos",
        "events_url": "https://api.github.com/users/iotamega/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/iotamega/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#issuecomment-2000166681",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29415"
    },
    {
      "event": "commented",
      "id": 2000288460,
      "node_id": "IC_kwDOABII5853OfrM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2000288460",
      "actor": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-15T19:09:03Z",
      "updated_at": "2024-03-15T19:09:03Z",
      "author_association": "MEMBER",
      "body": "> Is this going to be on by default or just an option?\r\n\r\nThis PR only affects transactions sent with RPC `sendrawtransaction` and only if `-privatebroadcast=1` is configured, which is not default",
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#issuecomment-2000288460",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29415"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12153291763,
      "node_id": "HRFPE_lADOABII585-yiT2zwAAAALUZIPz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12153291763",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-18T14:32:42Z"
    },
    {
      "event": "commented",
      "id": 2004081907,
      "node_id": "IC_kwDOABII5853c9zz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2004081907",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-18T14:33:03Z",
      "updated_at": "2024-03-18T14:33:03Z",
      "author_association": "CONTRIBUTOR",
      "body": "`cc867ebd62...4828d46209`: rebase and address suggestions",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#issuecomment-2004081907",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29415"
    },
    {
      "event": "commented",
      "id": 2008043439,
      "node_id": "IC_kwDOABII5853sE-v",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2008043439",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-19T20:10:34Z",
      "updated_at": "2024-03-19T20:10:34Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK\r\n\r\nI made similar solutions for [EPS](https://github.com/chris-belcher/electrum-personal-server/pull/124) and [CoreLightning](https://github.com/andrewtoth/broadcast-over-tor), which I'm happy to see being obviated by adding this functionality to the source!\r\n\r\nCurious why this is just pushing an unsolicited `TX` message instead of using `INV`/`GETDATA`/`TX`? [This conversation](https://github.com/bitcoin/bitcoin/pull/27509#discussion_r1186579724) seems to convince me the latter is better?\r\nAlso, if the submitted tx is spending unconfirmed outputs, should we support sending the parents to the peer if requested?\r\n",
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#issuecomment-2008043439",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29415"
    },
    {
      "event": "commented",
      "id": 2013120102,
      "node_id": "IC_kwDOABII5853_cZm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2013120102",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-21T17:23:34Z",
      "updated_at": "2024-03-21T17:23:34Z",
      "author_association": "CONTRIBUTOR",
      "body": "> Curious why this is just pushing an unsolicited TX message instead of using INV/GETDATA/TX? https://github.com/bitcoin/bitcoin/pull/27509#discussion_r1186579724 seems to convince me the latter is better?\r\n\r\nI followed up in that conversion. For now I am keeping it as it is, but if you are happy with all the rest and would otherwise ACK, then say so! ;-)\r\n\r\n> Also, if the submitted tx is spending unconfirmed outputs, should we support sending the parents to the peer if requested?\r\n\r\nRight now in `master` `sendrawtransaction` RPC operates on a single transaction. Its parents must already be in the mempool. This PR keeps it that way. Parent+child is more for the `submitpackage` RPC. That + the wallet I will deal with in a followup PRs.",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#issuecomment-2013120102",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29415"
    },
    {
      "event": "commented",
      "id": 2015255608,
      "node_id": "IC_kwDOABII5854Hlw4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2015255608",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-22T14:43:07Z",
      "updated_at": "2024-03-22T14:52:08Z",
      "author_association": "CONTRIBUTOR",
      "body": "> > Curious why this is just pushing an unsolicited TX message instead of using INV/GETDATA/TX? [#27509 (comment)](https://github.com/bitcoin/bitcoin/pull/27509#discussion_r1186579724) seems to convince me the latter is better?\r\n> \r\n> I followed up in that conversion. For now I am keeping it as it is, but if you are happy with all the rest and would otherwise ACK, then say so! ;-)\r\n\r\nThanks. I read through the proposal to not accept unsolicited `TX` messages, and the reasoning to reject it makes sense to me. I suppose if you know you're the originator of a tx, the only reason *not* to push the tx unsolicited to all your peers is for privacy reasons. However, in this case the privacy reasons are moot because of the ephemeral private connections.\r\n\r\n> \r\n> > Also, if the submitted tx is spending unconfirmed outputs, should we support sending the parents to the peer if requested?\r\n> \r\n> Right now in `master` `sendrawtransaction` RPC operates on a single transaction. Its parents must already be in the mempool. This PR keeps it that way. Parent+child is more for the `submitpackage` RPC. That + the wallet I will deal with in a followup PRs.\r\n\r\nI mean the case where we have a parent unconfirmed tx in our mempool, and the peer we connected to does not. If we push a tx spending that unconfirmed parent, the peer will respond with a `GETDATA` for the parent tx. So we can either:\r\n1. Ignore the `GETDATA` . This will result in our tx not relaying through this connection if the peer doesn't have all unconfirmed parents.\r\n2. Wait for the `GETDATA` and respond with a `TX` message. We won't know if the peer will eventually ask for the parent, so this will be tricky and we will have to wait for some time. However, in this time if we receive an `INV` for it from another peer we can close because we know we were successful.\r\n3. Push all unconfirmed parents along with the tx we are sending. This will result in potentially wasted bandwidth.\r\n",
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#issuecomment-2015255608",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29415"
    },
    {
      "event": "reviewed",
      "id": 1961307297,
      "node_id": "PRR_kwDOABII58505yyh",
      "url": null,
      "actor": null,
      "commit_id": "4828d462094d527dc95b8666627db0e1411f02a5",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Haven't finished my review yet, but submitting a few comments.",
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#pullrequestreview-1961307297",
      "submitted_at": "2024-03-26T21:47:27Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
    },
    {
      "event": "commented",
      "id": 2023117355,
      "node_id": "IC_kwDOABII5854llIr",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2023117355",
      "actor": {
        "login": "jb55",
        "id": 45598,
        "node_id": "MDQ6VXNlcjQ1NTk4",
        "avatar_url": "https://avatars.githubusercontent.com/u/45598?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jb55",
        "html_url": "https://github.com/jb55",
        "followers_url": "https://api.github.com/users/jb55/followers",
        "following_url": "https://api.github.com/users/jb55/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jb55/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jb55/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jb55/subscriptions",
        "organizations_url": "https://api.github.com/users/jb55/orgs",
        "repos_url": "https://api.github.com/users/jb55/repos",
        "events_url": "https://api.github.com/users/jb55/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jb55/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-27T15:51:53Z",
      "updated_at": "2024-03-27T15:51:53Z",
      "author_association": "CONTRIBUTOR",
      "body": "Oh wow just saw this! Thank you. Will review.",
      "user": {
        "login": "jb55",
        "id": 45598,
        "node_id": "MDQ6VXNlcjQ1NTk4",
        "avatar_url": "https://avatars.githubusercontent.com/u/45598?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jb55",
        "html_url": "https://github.com/jb55",
        "followers_url": "https://api.github.com/users/jb55/followers",
        "following_url": "https://api.github.com/users/jb55/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jb55/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jb55/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jb55/subscriptions",
        "organizations_url": "https://api.github.com/users/jb55/orgs",
        "repos_url": "https://api.github.com/users/jb55/repos",
        "events_url": "https://api.github.com/users/jb55/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jb55/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#issuecomment-2023117355",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29415"
    },
    {
      "event": "commented",
      "id": 2025920443,
      "node_id": "IC_kwDOABII5854wRe7",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2025920443",
      "actor": {
        "login": "zzzi2p",
        "id": 62618568,
        "node_id": "MDQ6VXNlcjYyNjE4NTY4",
        "avatar_url": "https://avatars.githubusercontent.com/u/62618568?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zzzi2p",
        "html_url": "https://github.com/zzzi2p",
        "followers_url": "https://api.github.com/users/zzzi2p/followers",
        "following_url": "https://api.github.com/users/zzzi2p/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/zzzi2p/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/zzzi2p/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/zzzi2p/subscriptions",
        "organizations_url": "https://api.github.com/users/zzzi2p/orgs",
        "repos_url": "https://api.github.com/users/zzzi2p/repos",
        "events_url": "https://api.github.com/users/zzzi2p/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/zzzi2p/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-28T19:08:15Z",
      "updated_at": "2024-03-28T19:08:15Z",
      "author_association": "NONE",
      "body": "Concept ACK\r\n\r\nThis is consistent with i2p guidelines on resource usage.\r\nGood work!",
      "user": {
        "login": "zzzi2p",
        "id": 62618568,
        "node_id": "MDQ6VXNlcjYyNjE4NTY4",
        "avatar_url": "https://avatars.githubusercontent.com/u/62618568?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zzzi2p",
        "html_url": "https://github.com/zzzi2p",
        "followers_url": "https://api.github.com/users/zzzi2p/followers",
        "following_url": "https://api.github.com/users/zzzi2p/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/zzzi2p/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/zzzi2p/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/zzzi2p/subscriptions",
        "organizations_url": "https://api.github.com/users/zzzi2p/orgs",
        "repos_url": "https://api.github.com/users/zzzi2p/repos",
        "events_url": "https://api.github.com/users/zzzi2p/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/zzzi2p/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#issuecomment-2025920443",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29415"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12293835861,
      "node_id": "HRFPE_lADOABII585-yiT2zwAAAALcxQxV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12293835861",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-29T10:47:40Z"
    },
    {
      "event": "commented",
      "id": 2027063667,
      "node_id": "IC_kwDOABII58540olz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2027063667",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-29T10:48:02Z",
      "updated_at": "2024-03-29T10:48:02Z",
      "author_association": "CONTRIBUTOR",
      "body": "`4828d46209...09ad469cc1`: rebase and address suggestions",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#issuecomment-2027063667",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29415"
    },
    {
      "event": "commented",
      "id": 2027080005,
      "node_id": "IC_kwDOABII58540slF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2027080005",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-29T11:02:31Z",
      "updated_at": "2024-03-29T11:02:31Z",
      "author_association": "CONTRIBUTOR",
      "body": "> I mean the case where we have a parent unconfirmed tx in our mempool, and the peer we connected to does not. If we push a tx spending that unconfirmed parent, the peer will respond with a `GETDATA` for the parent tx...\r\n\r\nI will keep it simple stupid for now, meaning that in this case that particular peer will not relay the transaction further. Others should succeed. If \"nobody\" has the parent in their mempool, then somehow we are trying to broadcast an orphaned transaction with parent(s) not seen by the network. Can say that this is not supported at this point and will best be supported by a future `submitpackage` which does private broadcast.",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#issuecomment-2027080005",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29415"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12294241122,
      "node_id": "HRFPE_lADOABII585-yiT2zwAAAALcyzti",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12294241122",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-29T11:41:10Z"
    },
    {
      "event": "commented",
      "id": 2027122878,
      "node_id": "IC_kwDOABII585403C-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2027122878",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-29T11:41:15Z",
      "updated_at": "2024-03-29T11:41:15Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n\n🚧 At least one of the CI tasks failed. Make sure to run all tests locally, according to the\ndocumentation.\n\nPossibly this is due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/23235305634</sub>",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#issuecomment-2027122878",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29415"
    },
    {
      "event": "labeled",
      "id": 12294241457,
      "node_id": "LE_lADOABII585-yiT2zwAAAALcyzyx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12294241457",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-29T11:41:15Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 1969324333,
      "node_id": "PRR_kwDOABII5851YYEt",
      "url": null,
      "actor": null,
      "commit_id": "c7e4d5cb2bf01d9719702e71c8d6264ee670e988",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#pullrequestreview-1969324333",
      "submitted_at": "2024-03-29T18:35:13Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
    },
    {
      "event": "reviewed",
      "id": 1969597243,
      "node_id": "PRR_kwDOABII5851Zas7",
      "url": null,
      "actor": null,
      "commit_id": "cf76f4f0fe1a3ef0730f70a035c10e01712b6d6b",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#pullrequestreview-1969597243",
      "submitted_at": "2024-03-29T20:55:52Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
    },
    {
      "event": "reviewed",
      "id": 1969951271,
      "node_id": "PRR_kwDOABII5851axIn",
      "url": null,
      "actor": null,
      "commit_id": "c7e4d5cb2bf01d9719702e71c8d6264ee670e988",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#pullrequestreview-1969951271",
      "submitted_at": "2024-03-30T14:20:06Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
    },
    {
      "event": "reviewed",
      "id": 1970997616,
      "node_id": "PRR_kwDOABII5851ewlw",
      "url": null,
      "actor": null,
      "commit_id": "b1f65ba837a805dc8f855c02337c1593c77add6d",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#pullrequestreview-1970997616",
      "submitted_at": "2024-04-01T09:47:19Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
    },
    {
      "event": "reviewed",
      "id": 1971157352,
      "node_id": "PRR_kwDOABII5851fXlo",
      "url": null,
      "actor": null,
      "commit_id": "b1f65ba837a805dc8f855c02337c1593c77add6d",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#pullrequestreview-1971157352",
      "submitted_at": "2024-04-01T12:12:12Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12312725519,
      "node_id": "HRFPE_lADOABII585-yiT2zwAAAALd5UgP",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12312725519",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-01T16:20:57Z"
    },
    {
      "event": "commented",
      "id": 2030100651,
      "node_id": "IC_kwDOABII5855AOCr",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2030100651",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-01T16:25:57Z",
      "updated_at": "2024-04-01T16:25:57Z",
      "author_association": "CONTRIBUTOR",
      "body": "`c7e4d5cb2b...413574e81e`: rebase and address suggestions",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#issuecomment-2030100651",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29415"
    },
    {
      "event": "reviewed",
      "id": 1971975903,
      "node_id": "PRR_kwDOABII5851ifbf",
      "url": null,
      "actor": null,
      "commit_id": "413574e81ef4d608b9b0a2079f81a4e90ee2a341",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#pullrequestreview-1971975903",
      "submitted_at": "2024-04-01T19:29:12Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
    },
    {
      "event": "referenced",
      "id": 12327287070,
      "node_id": "REFE_lADOABII585-yiT2zwAAAALew3ke",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12327287070",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "3b987d03a49964995dced76889634561fd363d28",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3b987d03a49964995dced76889634561fd363d28",
      "created_at": "2024-04-02T14:47:12Z"
    },
    {
      "event": "labeled",
      "id": 12327500578,
      "node_id": "LE_lADOABII585-yiT2zwAAAALexrsi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12327500578",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-02T14:58:51Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12329000950,
      "node_id": "HRFPE_lADOABII585-yiT2zwAAAALe3Z_2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12329000950",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-02T16:39:40Z"
    },
    {
      "event": "commented",
      "id": 2032545515,
      "node_id": "IC_kwDOABII5855Ji7r",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2032545515",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-02T16:40:02Z",
      "updated_at": "2024-04-02T16:40:02Z",
      "author_association": "CONTRIBUTOR",
      "body": "`413574e81e...390e628a07`: rebase due to conflicts and address suggestion",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#issuecomment-2032545515",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29415"
    },
    {
      "event": "unlabeled",
      "id": 12329529594,
      "node_id": "UNLE_lADOABII585-yiT2zwAAAALe5bD6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12329529594",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-02T17:22:10Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 1974917244,
      "node_id": "PRR_kwDOABII5851tth8",
      "url": null,
      "actor": null,
      "commit_id": "390e628a07ce62d32deae4bcfa1bdb31f5a0e125",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Do we need test coverage for retrying stale txs and having multiple concurrent txs queued for private broadcast?",
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#pullrequestreview-1974917244",
      "submitted_at": "2024-04-02T21:56:50Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12357568855,
      "node_id": "HRFPE_lADOABII585-yiT2zwAAAALgkYlX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12357568855",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-04T12:37:52Z"
    },
    {
      "event": "commented",
      "id": 2037088808,
      "node_id": "IC_kwDOABII5855a4Io",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2037088808",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-04T12:39:01Z",
      "updated_at": "2024-04-04T12:39:01Z",
      "author_association": "CONTRIBUTOR",
      "body": "`390e628a07...9297437af2`: rebase and address suggestions\r\n\r\n> Do we need test coverage for retrying stale txs and having multiple concurrent txs queued for private broadcast?\r\n\r\nYes.",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#issuecomment-2037088808",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29415"
    },
    {
      "event": "unlabeled",
      "id": 12362421618,
      "node_id": "UNLE_lADOABII585-yiT2zwAAAALg25Vy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12362421618",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-04T17:46:39Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 1985948537,
      "node_id": "PRR_kwDOABII5852Xyt5",
      "url": null,
      "actor": null,
      "commit_id": "9297437af2c2f45a7b9a12be78fa0e597c54ac79",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#pullrequestreview-1985948537",
      "submitted_at": "2024-04-08T09:48:36Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
    },
    {
      "event": "reviewed",
      "id": 1984991157,
      "node_id": "PRR_kwDOABII5852UI-1",
      "url": null,
      "actor": null,
      "commit_id": "9297437af2c2f45a7b9a12be78fa0e597c54ac79",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "cACK, with a suggestion and some observations on the design space WRT reliability/success.\r\n\r\n> Yes, if `-proxyrandomize=1` (the default). This is the same in `master` - separate Tor circuit per connection.\r\n\r\nIf this is not the case and a peer to which a long lived connection already exists is selected again, then tor will multiplex both connections on the same established circuit, which means that the two connections are unambiguously correlated.\r\n\r\nAvoiding already connected peers would work around this, but perhaps it's sufficient just to warn on startup if `privatebroadcast=1` and `proxyrandomize=0`, since that is unlikely to be configured (requires opt out & opt in), and unlikely to be an issue even if it is configured since a malicious peer would need to be selected twice.\r\n\r\nThis would be less of a concern if clearnet hosts are also allowed, since the likelyhood of selecting the same peer diminishes quadratically in the size of the set of potential peers.\r\n\r\n> > I assume you are restricting the feature to sendraw so the wallet doesn't get involved and try something silly like rebroadcasting over clearnet or inserting in to our own mempool?\r\n> \r\n> The reason to omit the wallet is that it currently does not count non-mempool change.\r\n\r\nIf I understand correctly, the concern with rebroadcasting still applies, but in the case that private broadcast was successful?",
      "user": {
        "login": "nothingmuch",
        "id": 14242,
        "node_id": "MDQ6VXNlcjE0MjQy",
        "avatar_url": "https://avatars.githubusercontent.com/u/14242?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nothingmuch",
        "html_url": "https://github.com/nothingmuch",
        "followers_url": "https://api.github.com/users/nothingmuch/followers",
        "following_url": "https://api.github.com/users/nothingmuch/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/nothingmuch/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/nothingmuch/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/nothingmuch/subscriptions",
        "organizations_url": "https://api.github.com/users/nothingmuch/orgs",
        "repos_url": "https://api.github.com/users/nothingmuch/repos",
        "events_url": "https://api.github.com/users/nothingmuch/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/nothingmuch/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#pullrequestreview-1984991157",
      "submitted_at": "2024-04-08T10:07:31Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
    },
    {
      "event": "subscribed",
      "id": 12510434826,
      "node_id": "SE_lADOABII585-yiT2zwAAAALprhYK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12510434826",
      "actor": {
        "login": "sethforprivacy",
        "id": 40500387,
        "node_id": "MDQ6VXNlcjQwNTAwMzg3",
        "avatar_url": "https://avatars.githubusercontent.com/u/40500387?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sethforprivacy",
        "html_url": "https://github.com/sethforprivacy",
        "followers_url": "https://api.github.com/users/sethforprivacy/followers",
        "following_url": "https://api.github.com/users/sethforprivacy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sethforprivacy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sethforprivacy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sethforprivacy/subscriptions",
        "organizations_url": "https://api.github.com/users/sethforprivacy/orgs",
        "repos_url": "https://api.github.com/users/sethforprivacy/repos",
        "events_url": "https://api.github.com/users/sethforprivacy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sethforprivacy/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-17T15:43:46Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12579051072,
      "node_id": "HRFPE_lADOABII585-yiT2zwAAAALtxRZA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12579051072",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-23T17:19:27Z"
    },
    {
      "event": "commented",
      "id": 2072977453,
      "node_id": "IC_kwDOABII5857jyAt",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2072977453",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-23T17:21:28Z",
      "updated_at": "2024-04-23T17:21:28Z",
      "author_association": "CONTRIBUTOR",
      "body": "`9297437af2...cc760207b8`: rebase and address suggestions:\r\n\r\n* Give a startup warning if `-privatebroadcast=1`, `-proxyrandomize=0` and the Tor network is reachable (i.e. we will use Tor for private broadcast).\r\n* Enforce `-walletbroadcast=0` if `-privatebroadcast=1` because it would be confusing to have the wallet do the traditional broadcast while the `sendrawtransaction` RPC does a private broadcast. Furthermore if a wallet transaction is sent via `sendrawtransaction` and ends up in the mempool from outside and is not mined for some time, then the wallet will try to broadcast it using the traditional mechanism.\r\n* Private broadcast also to IPv4 and IPv6 peers (!) through the Tor proxy.\r\n* Remove conflicting Tor address from the functional test and don't log every address added to addrman.\r\n",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#issuecomment-2072977453",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29415"
    },
    {
      "event": "commented",
      "id": 2072989163,
      "node_id": "IC_kwDOABII5857j03r",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2072989163",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-23T17:27:56Z",
      "updated_at": "2024-04-23T17:28:09Z",
      "author_association": "CONTRIBUTOR",
      "body": "> Avoiding already connected peers would work around this, but perhaps it's sufficient just to warn on startup if privatebroadcast=1 and proxyrandomize=0\r\n\r\nIn `master` we already avoid connecting to an already connected address, regardless of the connection type:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/256e1703197fdddd78bc6d659431cd0fc3b63cde/src/net.cpp#L2862\r\n\r\nI added a startup warning anyway.\r\n\r\n\r\n\r\n> > > I assume you are restricting the feature to sendraw so the wallet doesn't get involved and try something silly like rebroadcasting over clearnet or inserting in to our own mempool?\r\n\r\n> > The reason to omit the wallet is that it currently does not count non-mempool change.\r\n\r\n> If I understand correctly, the concern with rebroadcasting still applies, but in the case that private broadcast was successful?\r\n\r\nYes, I enforced `walletbroadcast=0` to avoid the wallet rebroadcasting.",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#issuecomment-2072989163",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29415"
    },
    {
      "event": "labeled",
      "id": 12581093248,
      "node_id": "LE_lADOABII585-yiT2zwAAAALt5D-A",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12581093248",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-23T20:07:43Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12587089329,
      "node_id": "HRFPE_lADOABII585-yiT2zwAAAALuP72x",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12587089329",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-24T07:28:55Z"
    },
    {
      "event": "commented",
      "id": 2074267427,
      "node_id": "IC_kwDOABII5857os8j",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2074267427",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-24T07:30:38Z",
      "updated_at": "2024-04-24T07:30:38Z",
      "author_association": "CONTRIBUTOR",
      "body": "`cc760207b8...ea1ca3715e`: adjust `feature_config_args.py` after forbidding `-walletbroadcast` when `-privatebroadcast` is enabled.",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#issuecomment-2074267427",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29415"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12592119310,
      "node_id": "HRFPE_lADOABII585-yiT2zwAAAALujH4O",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12592119310",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-24T13:35:59Z"
    },
    {
      "event": "unlabeled",
      "id": 12596290018,
      "node_id": "UNLE_lADOABII585-yiT2zwAAAALuzCHi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12596290018",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-24T18:16:15Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 12615610375,
      "node_id": "LE_lADOABII585-yiT2zwAAAALv8vAH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12615610375",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-25T21:14:04Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 2020968807,
      "node_id": "PRR_kwDOABII5854dYln",
      "url": null,
      "actor": null,
      "commit_id": "fd603b8f5c23c171e1cff70a73f5d64d6d74c4f7",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Did another round of review.\r\n\r\nnit: `local tx relay` -> `private broadcast` in last commit message",
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#pullrequestreview-2020968807",
      "submitted_at": "2024-04-25T22:34:46Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
    },
    {
      "event": "reviewed",
      "id": 2031166535,
      "node_id": "PRR_kwDOABII5855ESRH",
      "url": null,
      "actor": null,
      "commit_id": "6b4693ee859d6bddf559a0b32749b1dafe015ef4",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#pullrequestreview-2031166535",
      "submitted_at": "2024-04-30T12:22:03Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12670568263,
      "node_id": "HRFPE_lADOABII585-yiT2zwAAAALzOYdH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12670568263",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-01T13:40:14Z"
    },
    {
      "event": "commented",
      "id": 2088480026,
      "node_id": "IC_kwDOABII5858e60a",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2088480026",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-01T13:40:26Z",
      "updated_at": "2024-05-01T13:40:26Z",
      "author_association": "CONTRIBUTOR",
      "body": "`fd603b8f5c...42cb080600`: rebase and address suggestions",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#issuecomment-2088480026",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29415"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12670660262,
      "node_id": "HRFPE_lADOABII585-yiT2zwAAAALzOu6m",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12670660262",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-01T13:47:09Z"
    },
    {
      "event": "unlabeled",
      "id": 12671755684,
      "node_id": "UNLE_lADOABII585-yiT2zwAAAALzS6Wk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12671755684",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-01T15:28:31Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12672028991,
      "node_id": "HRFPE_lADOABII585-yiT2zwAAAALzT9E_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12672028991",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-01T15:54:04Z"
    },
    {
      "event": "labeled",
      "id": 12672030472,
      "node_id": "LE_lADOABII585-yiT2zwAAAALzT9cI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12672030472",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-01T15:54:10Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "unlabeled",
      "id": 12674460856,
      "node_id": "UNLE_lADOABII585-yiT2zwAAAALzdOy4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12674460856",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-01T20:16:28Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 2041604763,
      "node_id": "PRR_kwDOABII5855sGqb",
      "url": null,
      "actor": null,
      "commit_id": "65ba8d02034d8fd0eb4c680614197cab6f1892fc",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Code review up to 28adad8eefd18a62232b5c77cbc9ca739a53308d (no tests so far).\r\n\r\nThe main thing I'm wondering currently is why are we tacking `m_private_broadcast_connections_to_open` loosely? It feels harder to reason about, but I don't see what the benefit of it is.",
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#pullrequestreview-2041604763",
      "submitted_at": "2024-05-13T14:57:31Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
    },
    {
      "event": "reviewed",
      "id": 2052999547,
      "node_id": "PRR_kwDOABII5856Xkl7",
      "url": null,
      "actor": null,
      "commit_id": "0ba30dec085f860c89f4fd8c8a398aa8a13b5ebd",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#pullrequestreview-2052999547",
      "submitted_at": "2024-05-13T15:12:31Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12880140919,
      "node_id": "HRFPE_lADOABII585-yiT2zwAAAAL_t1p3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12880140919",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-21T13:17:50Z"
    },
    {
      "event": "commented",
      "id": 2122621311,
      "node_id": "IC_kwDOABII585-hKF_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2122621311",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-21T13:18:59Z",
      "updated_at": "2024-05-21T13:24:19Z",
      "author_association": "CONTRIBUTOR",
      "body": "`65ba8d0203...e85cc59bad`: rebase, address suggestions and remove the argument of `ProxyForClearnetPrivateBroadcast()` because it is always IPv4 or IPv6 and we treat both in the same way.\r\n\r\n> The main thing I'm wondering currently is why are we tacking m_private_broadcast_connections_to_open loosely? It feels harder to reason about, but I don't see what the benefit of it is.\r\n\r\nContinued at https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1608327017 to avoid overwhelming the main discussion thread of the PR and to make replies close to each other (rather than scattered in the main thread).",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#issuecomment-2122621311",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29415"
    },
    {
      "event": "reviewed",
      "id": 2068635557,
      "node_id": "PRR_kwDOABII5857TN-l",
      "url": null,
      "actor": null,
      "commit_id": "e85cc59badd357219213a6bda985a9fd93910a5c",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#pullrequestreview-2068635557",
      "submitted_at": "2024-05-21T13:21:58Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12897197774,
      "node_id": "HRFPE_lADOABII585-yiT2zwAAAAMAu57O",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12897197774",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-22T16:15:53Z"
    },
    {
      "event": "commented",
      "id": 2125213533,
      "node_id": "IC_kwDOABII585-rC9d",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2125213533",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-22T16:22:20Z",
      "updated_at": "2024-05-22T16:22:20Z",
      "author_association": "CONTRIBUTOR",
      "body": "`e85cc59bad...057c79365c`: in order to decide whether to private broadcast to IPv4/IPv6 peers, instead of (before this force push) requiring that `-onion=` is explicitly set, do this (after this force push): keep track if we ever managed to connect to an `.onion` address via the `NET_ONION` proxy, if yes assume that this proxy is a Tor proxy and connecting to IPv4/IPv6 addresses through it will be done via the Tor network and via a Tor exit node.\r\n\r\nThis is better because it is stronger guarantee (before the user could still misconfigure an orginary non-Tor proxy as `-onion=`) and works automatically, without requiring config options to be set.",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#issuecomment-2125213533",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29415"
    },
    {
      "event": "referenced",
      "id": 12905379001,
      "node_id": "REFE_lADOABII585-yiT2zwAAAAMBOHS5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12905379001",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "a63c7c7ea2dff07e76dd2cf2398cb150667ac86c",
      "commit_url": "https://api.github.com/repos/vasild/pushtx/commits/a63c7c7ea2dff07e76dd2cf2398cb150667ac86c",
      "created_at": "2024-05-23T08:14:53Z"
    },
    {
      "event": "referenced",
      "id": 12906443115,
      "node_id": "REFE_lADOABII585-yiT2zwAAAAMBSLFr",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12906443115",
      "actor": {
        "login": "alfred-hodler",
        "id": 100861939,
        "node_id": "U_kgDOBgMH8w",
        "avatar_url": "https://avatars.githubusercontent.com/u/100861939?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/alfred-hodler",
        "html_url": "https://github.com/alfred-hodler",
        "followers_url": "https://api.github.com/users/alfred-hodler/followers",
        "following_url": "https://api.github.com/users/alfred-hodler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/alfred-hodler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/alfred-hodler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/alfred-hodler/subscriptions",
        "organizations_url": "https://api.github.com/users/alfred-hodler/orgs",
        "repos_url": "https://api.github.com/users/alfred-hodler/repos",
        "events_url": "https://api.github.com/users/alfred-hodler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/alfred-hodler/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "cb75581df22098dcd90dc2989cfc63bbe2262ff7",
      "commit_url": "https://api.github.com/repos/alfred-hodler/pushtx/commits/cb75581df22098dcd90dc2989cfc63bbe2262ff7",
      "created_at": "2024-05-23T09:29:52Z"
    },
    {
      "event": "labeled",
      "id": 13138066829,
      "node_id": "LE_lADOABII585-yiT2zwAAAAMPFv2N",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13138066829",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-12T22:34:44Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13229513265,
      "node_id": "HRFPE_lADOABII585-yiT2zwAAAAMUilox",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13229513265",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-20T13:44:34Z"
    },
    {
      "event": "commented",
      "id": 2180745584,
      "node_id": "IC_kwDOABII586B-4lw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2180745584",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-20T13:44:46Z",
      "updated_at": "2024-06-20T13:44:46Z",
      "author_association": "CONTRIBUTOR",
      "body": "`057c79365c...7a7e7d189d`: rebase due to conflicts",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#issuecomment-2180745584",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29415"
    },
    {
      "event": "unlabeled",
      "id": 13229692616,
      "node_id": "UNLE_lADOABII585-yiT2zwAAAAMUjRbI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13229692616",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-20T13:56:17Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 2142672720,
      "node_id": "PRR_kwDOABII585_tpdQ",
      "url": null,
      "actor": null,
      "commit_id": "7a7e7d189dfe5efa6ab3c644f55f410412163503",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Re-reviewed first half of commits, will continue tomorrow. A few comments and questions below.",
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#pullrequestreview-2142672720",
      "submitted_at": "2024-06-26T19:49:39Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
    },
    {
      "event": "reviewed",
      "id": 2146390857,
      "node_id": "PRR_kwDOABII585_71NJ",
      "url": null,
      "actor": null,
      "commit_id": "7a7e7d189dfe5efa6ab3c644f55f410412163503",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#pullrequestreview-2146390857",
      "submitted_at": "2024-06-27T20:20:05Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
    },
    {
      "event": "reviewed",
      "id": 2148337702,
      "node_id": "PRR_kwDOABII586ADQgm",
      "url": null,
      "actor": null,
      "commit_id": "7a7e7d189dfe5efa6ab3c644f55f410412163503",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "code review ACK 7a7e7d189dfe5efa6ab3c644f55f410412163503\r\n\r\nsome questions and comments above and below (sorry spread out review over a few days)\r\n\r\nI want to run this in warnet again with a lot more TXs and see how we do as well",
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#pullrequestreview-2148337702",
      "submitted_at": "2024-06-28T17:51:53Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
    },
    {
      "event": "review_requested",
      "id": 13334706810,
      "node_id": "RRE_lADOABII585-yiT2zwAAAAMaz3p6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13334706810",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-28T17:51:59Z",
      "requested_reviewer": {
        "login": "nothingmuch",
        "id": 14242,
        "node_id": "MDQ6VXNlcjE0MjQy",
        "avatar_url": "https://avatars.githubusercontent.com/u/14242?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nothingmuch",
        "html_url": "https://github.com/nothingmuch",
        "followers_url": "https://api.github.com/users/nothingmuch/followers",
        "following_url": "https://api.github.com/users/nothingmuch/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/nothingmuch/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/nothingmuch/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/nothingmuch/subscriptions",
        "organizations_url": "https://api.github.com/users/nothingmuch/orgs",
        "repos_url": "https://api.github.com/users/nothingmuch/repos",
        "events_url": "https://api.github.com/users/nothingmuch/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/nothingmuch/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "review_requested",
      "id": 13334706899,
      "node_id": "RRE_lADOABII585-yiT2zwAAAAMaz3rT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13334706899",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-28T17:52:00Z",
      "requested_reviewer": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13363901881,
      "node_id": "HRFPE_lADOABII585-yiT2zwAAAAMcjPW5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13363901881",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-02T10:42:45Z"
    },
    {
      "event": "commented",
      "id": 2202707437,
      "node_id": "IC_kwDOABII586DSqXt",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2202707437",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-02T10:43:00Z",
      "updated_at": "2024-07-02T10:43:00Z",
      "author_association": "CONTRIBUTOR",
      "body": "`7a7e7d189d...3bd618a91f`: rebase and address suggestions",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#issuecomment-2202707437",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29415"
    },
    {
      "event": "commented",
      "id": 2203472829,
      "node_id": "IC_kwDOABII586DVlO9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2203472829",
      "actor": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-02T15:04:55Z",
      "updated_at": "2024-07-02T15:04:55Z",
      "author_association": "MEMBER",
      "body": "utACK 3bd618a91f\r\n\r\nCode changes since last review look good.",
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#issuecomment-2203472829",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29415"
    },
    {
      "event": "reviewed",
      "id": 2154365549,
      "node_id": "PRR_kwDOABII586AaQJt",
      "url": null,
      "actor": null,
      "commit_id": "3bd618a91fe3935399d380d254996e4263586c80",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#pullrequestreview-2154365549",
      "submitted_at": "2024-07-02T19:18:51Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
    },
    {
      "event": "labeled",
      "id": 13393484026,
      "node_id": "LE_lADOABII585-yiT2zwAAAAMeUFj6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13393484026",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-04T11:22:47Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDQ5Yzg3NzNmZDQ5MjNjMGFlMDkyYzc0MTE1ZTMzMWM3ZTFiNTRjMzM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/49c8773fd4923c0ae092c74115e331c7e1b54c33",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/49c8773fd4923c0ae092c74115e331c7e1b54c33",
      "tree": {
        "sha": "42269e118636fe6900a21a144655c0c8f193c5c8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/42269e118636fe6900a21a144655c0c8f193c5c8"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 42269e118636fe6900a21a144655c0c8f193c5c8\nparent c6b4718112eb7e61bb596877eaddaf5a1054bace\nauthor Vasil Dimov <vd@FreeBSD.org> 1702556461 +0100\ncommitter Vasil Dimov <vd@FreeBSD.org> 1722427288 +0200\n\nlog: introduce a new category for private broadcast\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmaqJ5gACgkQVN8G9ktV\ny79nkB/+P8u3Jq5nIBG8xhycDUH+6CbbPCRLj9tTl5O6JibmUJli+DmCUZjtMT1T\nSXsem7JOoPwCkbdCwa5udcCT7ngs0x8joxqOSz0uyRR54TaxSFYZ48dMWntdsYJO\nRSXoBkrxp8HZGFUrRfuCsoSn1DOtNqo+q34MLELm8dJJbGykdPJ82VcVya8m3vgK\nImP4ON/6/O6d58wRbZ61fK5w2PAiHrsPpXE8qcp+PwdCHBatU6HEI04zdwinGgMM\n0qCU8WxN7I9tm2QveE0Y6L9ajHHUOkQryEzH4HPoAPnMDPPgJuWq4mFbc2eFisLJ\nGUDWHSt4U+6xMDEv6XOwAE3Ew3J16tTGgCS56QRZv4VBdsICmWwBtfxdETs2xvwy\nvn8o7HbJ/3EQ3gEFt1IEbZz8Adft2laxyhDBn5Xvn4Bcw1NxcRbNwZ6M4nAo1NYx\nFtl07FLOaY9P0rsu6V549MyFGOmSSKwOJl6jzpY7LdSELi53f0a1PQt19EabFVU3\nFP+S70bcgXOrmMWCa2G0fKJB4DIEAvkc3pHbs3+GW+A60AXOsvHaBxQtcqL5njGz\nazwNNENUXQccvuH9Og44DlQhRXS5yzC+DxVYA6Nwk8h6LMRW5dhlRV1nqZu0N/J1\nt3Jbh8S7D07vzwg/ZZIeV8V1HkuilzGsSd+2CZAt7mo5autN7ilZ5kAf8UmIk4Fi\np50MEQjlWDEN4H72mff9Qnp7etZYPmHM/6EQbb4ap9+ncYaxAbPMRIpr5FxMjH6P\nBY3obasQS5LTYOHZo7a/XC8tR4EbZTwTc+qyLAxWXAMgMwoxyawyazMtzjWkTV0n\n8lsqYtmBXNZC2vXsh2S+xDzebzqB/fDzdRQvS8sLn+DbJ+kMK++18fXGq13Kt98P\njoh2WG7rPD3tZOPFNFGlzhJUrFZ7wzXyS0aokufvZc36qj5ZXwsiGdEZjW9/Hnty\nnEpLBfKaD/u11MtJaYBJ5Hv834S8UDiF8UWk1gVaLHmwxGNCqr8XIP4PFBv6/LoK\n7hkVlbcDKBNu3qSbqBn7g6wRQ/6Fbdop3CPanG8qXTFiFMcSp0ovYqYFT+652MMX\nzoennnRpk792/dyj0/PlMU6EUZHhLOzBMKxwuyw889qurond/8ZlAAfF1bPJk1mK\ne72WGzpKGFx/g4ht0VHNMc5ka6i5FDUiojyfycj9CWIv4no2VhtbKSoC2KPdtQnJ\n5Vvxpo6H2mEU2xq4XWavHeJnPoWzxVojpreL6AvaCH9O3Scob1mkA7Bf65vnD4zT\nhD4S3bV+XT40wF5qK6WNc8JVePZSwbtB/+hAy9E69gEDdRj2EokiXho3Lg2M6HHR\nNnTMhkv9cYWjPI+WvOq2XzMONB1BOA==\n=C8VW\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c6b4718112eb7e61bb596877eaddaf5a1054bace",
          "sha": "c6b4718112eb7e61bb596877eaddaf5a1054bace",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/c6b4718112eb7e61bb596877eaddaf5a1054bace"
        }
      ],
      "message": "log: introduce a new category for private broadcast",
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2024-07-31T12:01:28Z"
      },
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2023-12-14T12:21:01Z"
      },
      "sha": "49c8773fd4923c0ae092c74115e331c7e1b54c33"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGYwM2NiNTM5MDAyNjQwNzFmZGNlZWIzM2M2NTk0YTlkN2UwZWRjZTk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f03cb53900264071fdceeb33c6594a9d7e0edce9",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/f03cb53900264071fdceeb33c6594a9d7e0edce9",
      "tree": {
        "sha": "d91bb4cd5be2b0fcd6ee3182887ec1652b7cebc6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d91bb4cd5be2b0fcd6ee3182887ec1652b7cebc6"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree d91bb4cd5be2b0fcd6ee3182887ec1652b7cebc6\nparent 49c8773fd4923c0ae092c74115e331c7e1b54c33\nauthor Vasil Dimov <vd@FreeBSD.org> 1702559465 +0100\ncommitter Vasil Dimov <vd@FreeBSD.org> 1722427291 +0200\n\ninit: introduce a new option to enable/disable private broadcast\n\nCo-authored-by: brunoerg <brunoely.gc@gmail.com>\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmaqJ5wACgkQVN8G9ktV\ny79tvR/9FDGxXLgFOzKPh7bStWRzGTeRGBIXIk5W8mSlXILLgwznJX6CmsV6Yue9\nNssS40kmvLU71BBJR+skeRY0LCZb0Qk98ZkPplAYUZlv7xCamkpuj3Jn3gVbUy3t\naOTIXjjB/dGT30klSBVWXHanir03TfJk8+26093hP58yfcSu1ShcrhntHOnf8nT4\nakoDfKrXLKRitxRBAOqr3DeAmMRrImmhHY7oQPgEJckifiYamSmFYFjPcN052IHi\nCDC2CBdlCyphs7oaCOXTLJzhmrNPC3QCZhUP4HzXSCDkGSYsRx0N5YjCAs/ipEUC\nwjcPMwD8wQEeVKUZCPr13B07OJfnsYtABEr/4gXNcfm5Vi7QR/QVW16g7y0qSWoV\nk1mrs9koiOtXer8ta09w2Iz+w6kL8AfbdmPUBzEgk90e2WsLqJAQ3dzDd0AeZPTk\n+JutSUUDW5MG4+UJoeVVaqZsFVb965oayqGhJht4slKwQpro4DInbq0/uwR4IDwq\nz2ARz1JkQAd1fSSXgkrd3pxWmgG7XiCIBjL3ZIYXr54C71UFS3HpBCTHzvgJBOiK\nkha2EUKS+SasUTwaJMbntiI+nq3XEyOpdbL8UQRHazVaOk38Sx92rC4A6UxT1+Vq\ndBxCD6S/ZOlrKamzqORSFAuy2ycdtjaKLtxLdVtXmm4kqKOxjbF3+6I15Eh73mOf\n8tPdj/ZNCQwoDQSO7WCr8Rp5hRuZOwU3bhl85+vr3btEZcveQ9m6hHamuhU5+foZ\nNOpJcN9rmqg4yzbGWZ2kR8gtsohWuZW+grHo2elkfJ0ZoyoQ7ZQ6toIQgyYDheXP\niz5Ik6gqsImX172lJXSgg6DixpzbmK+S3PcgkjNa2BzmLULznDFo3D17pBo8wmsh\navYUN3yEQ3s3fJHZbhYqyP2L1TvIrXpy0xlRZcVsS37cVWnzk8bE3G3YOFs4lq5N\nCbEo8GiOikdjbduM2fReX25/6mb+jczALX4ACjDrOBoKSMe0RK1jHyrbV0xA5IZY\nZ77gozkfhDp8y3dfO6QfcpJnjUGk4sIhywYIsN97RAO78pbX2bTAMbNToP8TDjLA\nALgZ+UpGYmvJK9Lr9q2cn1zFj/5rWgmgpvm3qbz2hS6hOjqvt4Ys+QgWxaaHclcW\nLowHn6eJ4UdMzopF885+5+uODjO61WBfZrp3M6cScOpSsdcjVO0J6oddwlr2CRIB\npyOJMvY+rfXn6u9Ua8qEwNbNFbk2iItB4e2lXCyVK6oyeh9mATudM320qV3oC28b\n0w/jXZuPS8TOCFUD9RbN3217PC734p0uMsUVEJT3nMHsmmwTFdh0ZvqujLmgWTdr\nRqCTyzMbXWTHihrdrviUlhsXcoF5mQ==\n=ox3v\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/49c8773fd4923c0ae092c74115e331c7e1b54c33",
          "sha": "49c8773fd4923c0ae092c74115e331c7e1b54c33",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/49c8773fd4923c0ae092c74115e331c7e1b54c33"
        }
      ],
      "message": "init: introduce a new option to enable/disable private broadcast\n\nCo-authored-by: brunoerg <brunoely.gc@gmail.com>",
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2024-07-31T12:01:31Z"
      },
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2023-12-14T13:11:05Z"
      },
      "sha": "f03cb53900264071fdceeb33c6594a9d7e0edce9"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDI2YzhiMzRkYWYwNDczN2NkNjU0ZGM0MTEyNjRiYjViYzhkZjhmNzE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/26c8b34daf04737cd654dc411264bb5bc8df8f71",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/26c8b34daf04737cd654dc411264bb5bc8df8f71",
      "tree": {
        "sha": "466ef740198ae1c1200af41225a0b0fea9eb389d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/466ef740198ae1c1200af41225a0b0fea9eb389d"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 466ef740198ae1c1200af41225a0b0fea9eb389d\nparent f03cb53900264071fdceeb33c6594a9d7e0edce9\nauthor Vasil Dimov <vd@FreeBSD.org> 1702560848 +0100\ncommitter Vasil Dimov <vd@FreeBSD.org> 1722427292 +0200\n\nnet: introduce a new connection type for private broadcast\n\nWe will open a short-lived connection to a random Tor or I2P peer,\nsend our transaction to that peer and close the connection.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmaqJ5wACgkQVN8G9ktV\ny787HyAAiIZeRYheold7FPnlv1GJt5FYOw5sMgsP2K78sHEXprkgaboPbCq7UcN8\nNzgda1R86qmKWZ9eiJGyGCByC5YxsGESQUO69tyX3UwjMmzT1CpDYQtNbHG/NqKd\noq+IJvBVBiWSxsF3DmL901uiA8KMBraDYOwy1jPrhMYpCj8NmJxtLWhsPiOEwGg6\nHZW3aMRkK6jxk2qAUg69kLFC/f5FCau5UFlAYvHvcYsJXw07We7bE69v3B9WUuHi\nxyM6E2a8RKSe83EpbNF+BD7Fw6Q03KsLglU3XfU11S7nsbkGUIg+2TjalXbwUwRc\nFM/ACap3h6IrdA1J7RdC/SS0NS2z1YVt5zLbu44wgwLR8t8TBGQs0tjSUajHUzVZ\nmIOPT/7VQEbDdHH0CxJUfCg0WhgkJBfu9PSB/+P4Wdu/AjPJ7ZeqXsc1VwfSPiW7\nUe3j1agk4bfgVZUA1sPWJxFdz1sYqMr82N3JC662k8LYTS0X5aFBfARKEswWHiUM\nnL6fFTx7CAW6EUHUIwFGvPNADzD3y9Apyjt+dUGGGWiAhu5ceOj9kFOlo1rXV+k+\nDyCkBd3la7r0vGRKaAznruqO+r7kJwKrNXe9+j+aMfimP3ktRy13ta2/7IHOOYgG\nwa+oLC8JrkfjR1EakSr/GKRJah4CHdql4gwIMAtWSnwvrYdWCSz/mMQotmtBnvJP\nhl9On1rbC8V/9VSJ2GWnImLw3KFnwv9U0/BhUeaPwTkRUcH64q59emebSSFvNTY5\n88LAzbt2Y7bQzNqYgGD7sJ1JlA7T40Dklf1wLdVWcDxfi4/mr1jhu5Q18lLPCiMP\nt931469ejqwO2SdFGNo28A4giyF2eu01SA+7L0am+EGpTBECPIbxj0NDCrI4mKzT\njF5qyf+3KWxEMlAMXZy7eUd4fwdhtwxd/kkZLvDe+O01yvFp186aQspnIWCgy3+l\n2V01l/sCBSVZQP8n7q49kT6Y2iIp16aHP/10RkJuYwBhIZlFyZQY/R4l7qj3zHp3\nkqiO5YMvl4tDd5JxlzPJzhPD3ho2sEcxWeThsFs6BEKqwia+5nhXswupM7EX5EGP\nL3PfSsUwbVzB20bF/PxgRRd0a25vzBY9JPuoADiF7+P1W+H9xt9HH7Ye/H52qXO9\nJznkoEK7gwV5TloXTXyCyY7KDTQKEyVYuZYrS1hUGgW9ME/mAQ9N4f9MFtkj7tkY\nflMQi8VMBJBFa3AUJ1ImHGn4VwxQHUnXqBGrGv5CmJZHZGIo2L3Q27hlbjbuT226\n71TDebqRgNVsY/fnW0OaY1VoWrB7S/mQGBQTd9CPsD07lzfqd3c+BT0ve3A6sZAb\nSQzUfb4gSnzY4o21JTAsFvL4hSw+IA==\n=CyTL\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f03cb53900264071fdceeb33c6594a9d7e0edce9",
          "sha": "f03cb53900264071fdceeb33c6594a9d7e0edce9",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/f03cb53900264071fdceeb33c6594a9d7e0edce9"
        }
      ],
      "message": "net: introduce a new connection type for private broadcast\n\nWe will open a short-lived connection to a random Tor or I2P peer,\nsend our transaction to that peer and close the connection.",
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2024-07-31T12:01:32Z"
      },
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2023-12-14T13:34:08Z"
      },
      "sha": "26c8b34daf04737cd654dc411264bb5bc8df8f71"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDJjZjg2MTdkMjc5MDNmZGU4YWUyZjU1M2RiZTk3OGY3YTRhYzU2NjQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2cf8617d27903fde8ae2f553dbe978f7a4ac5664",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/2cf8617d27903fde8ae2f553dbe978f7a4ac5664",
      "tree": {
        "sha": "28ae81e305c62c4a8824e2c4bf0b1cc6c04b6cff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/28ae81e305c62c4a8824e2c4bf0b1cc6c04b6cff"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 28ae81e305c62c4a8824e2c4bf0b1cc6c04b6cff\nparent 26c8b34daf04737cd654dc411264bb5bc8df8f71\nauthor Vasil Dimov <vd@FreeBSD.org> 1702992595 +0100\ncommitter Vasil Dimov <vd@FreeBSD.org> 1722427292 +0200\n\nnet: move peers counting before grant acquisition in ThreadOpenConnections()\n\nIn a subsequent commit we will need to conditionally acquire the\nsemaphore grant based on the collected stats (number and types of opened\nconnections). Thus move the snippet that does the counting earlier. It\njumps accross the fixed seeds addition, but both are unrelated and can\nbe done in any order.\n\nThis is a non-functional change, a mechanical move that is easy to\nverify. The code should behave identically before and after it.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmaqJ50ACgkQVN8G9ktV\ny79hox/+PjRtaWNJTfLoxeDdNHAp0NpbrSXx+p9854PNLclCxFPJYP+mwZCRKWnZ\nWlyqSYWqIaQ1PtJDoI7DLAfNhH5LPZoP0v+K6e4dBOc6GFR96NlzwMoNYC/TzKqy\ncLN1+e7CgdmNNRssoptjSyCTq6W0vJEEMrv1DN4kBuzDi+aiXIgO0/V4cgHIobGq\nAe0BFfo/fTLzUfxDQm2nFz2AW87E4ctPcw3rdY520OdrR6OYJltUtceTsLYED4HU\noNhAHrXowlYlLI0t8H5Cte65QgeQGeYaiCGnFc6TkxKAqXCPpA81jBdrKeSN129X\nakP36LIq89seu1QuxQGiWb97JQ2CdBw85MaTxpg3S91UIu/VgGAA0NLu8nGHKcas\nmLXnRfWUIb9BycPu7ghF9C6d+5vhChwWKIlRYKl4DXIx0v7luq6D636pHZmk1G6A\nqewzFbtjTt6DlH9upyepptjFOBK/tdZGsBwAe5rjI3aS/9yR19PReEOQtydKlD1m\nKfsjuOZ6XhN1bp6HmcrjoC7LxjsBqXvN8dv2eMBOk3ygJkTC7M/t7roj05FdeT11\nsLOY92aM4sQn3rIPEsludRiUXfjXM41bAQuBdH3XXEg8g9rs3Hre2bb2GBKNJsJ1\nGEi2w5nCVYkvEdc/8IupnBTbGiJbxRS05j9NF2MoCD+5CPnfo5Ggj/BNpfPrOZeo\nZUeIIIR1XbubFWEDaaUbAbudSseuiA0fKwfby412CoZ9Q/qn0RY8vf+Mz8Xvmxxb\nAPWdbZnOZtp9vQZyS6oSrO7ubNuYwQjbwHwbTABLxUnrRVwXvw8SHhjJDdkQ5NPr\nI7bjVM2git84JLR/6S+StqRN8W1KJGS99sTQHj62m574Bx79Gja1AtRznuNG7Rn2\nMd+B65tbSsnGgk8RYIGFwBqjj5RzMeNnWpqt3ec2x6XBV5W4/Amue40MVqbnhwXp\n5c/OA/XNyNX/zYw3TZGP8rzC52HUR5lqbRugD/pZr0HqFaRTBb/fooP1+N3zzL0w\nvjIOWFQ9dnIwHtiWnO1C7dC2lkUyvCRIB44eeMgvarFoi6XfIbPkhv+Lp489MLiE\nJftBsFvyAkE23okha6uCsMaYwUcqXK/p69MrZ3d0in+UWmFlxXyXBtvFrGO457A3\nATNN6hun1yqOKc6MMoYFjN60AMFi4hcZk8gObqNVpfy7DxNBFnARG785baEWG/ze\nqhUat2n5+ZIjZEQnReZWGGVQZcOQOqW+9pgRO+/plLr+/i3j7y8A6t8OwinHofXc\npJnq50uw//LzvhWiTqOE/QguxoDelccKU70SLC7VFpfApXDaxl2uAB0GCkaAUwzu\nWVAvlFDcnQqmaeLs3N5IoB50yX5hPw==\n=AdU/\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/26c8b34daf04737cd654dc411264bb5bc8df8f71",
          "sha": "26c8b34daf04737cd654dc411264bb5bc8df8f71",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/26c8b34daf04737cd654dc411264bb5bc8df8f71"
        }
      ],
      "message": "net: move peers counting before grant acquisition in ThreadOpenConnections()\n\nIn a subsequent commit we will need to conditionally acquire the\nsemaphore grant based on the collected stats (number and types of opened\nconnections). Thus move the snippet that does the counting earlier. It\njumps accross the fixed seeds addition, but both are unrelated and can\nbe done in any order.\n\nThis is a non-functional change, a mechanical move that is easy to\nverify. The code should behave identically before and after it.",
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2024-07-31T12:01:32Z"
      },
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2023-12-19T13:29:55Z"
      },
      "sha": "2cf8617d27903fde8ae2f553dbe978f7a4ac5664"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGM1N2QxOGMxNDAzYTI5NmE0ZWI5MjVlMGQ5ZDYwNjEwMGM5ZjQyNGM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c57d18c1403a296a4eb925e0d9d606100c9f424c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/c57d18c1403a296a4eb925e0d9d606100c9f424c",
      "tree": {
        "sha": "d409ca230a12ed3404e5d39e87716164fbed1104",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d409ca230a12ed3404e5d39e87716164fbed1104"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree d409ca230a12ed3404e5d39e87716164fbed1104\nparent 2cf8617d27903fde8ae2f553dbe978f7a4ac5664\nauthor Vasil Dimov <vd@FreeBSD.org> 1703077535 +0100\ncommitter Vasil Dimov <vd@FreeBSD.org> 1722430587 +0200\n\nnet: implement opening PRIVATE_BROADCAST connections\n\nImplement opening `ConnectionType::PRIVATE_BROADCAST` connections with the\nfollowing properties:\n* They have higher priority over other connection types\n* Don't wait for outbound connection slot to be available\n* Only to Tor or I2P (or IPv4/IPv6 through the Tor proxy, if provided)\n* Open such connections only when requested and don't maintain N opened\n  connections of this type.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmaqNHsACgkQVN8G9ktV\ny7/XHCAAgKYxE0k3kXXUFZ+7agUBUkmW0Y9X21hux/XsurZYypMSjqcgHcp6X5OP\nLUj9mohgdjvImVX5ImCJjCCyylvcqpxGAJ2Tn6dRmrjLeSI0HtD8QN3U68155qlK\nkevkQdaULEbYTSRdR2o/gBW/PQHTEf15HVS5a3zPjFum31sjCM6vpKTP+WiqVZbH\n0PkvasmN2fuQLKuTWg/3e/OAIIX+fE7DznTl4XxH5eSv/FvJyoCGXqiHb3rsIQnQ\nly4aLVsQQy8Epnqk3KRog6iYbiE7vYnotOVmVQzV37Q1q4n/7a8L+99YFp8a0AbR\n44KWoLcm4XRi5EVts3c2MKcbaXoy9fUJCsTaunumLQADU2FguDvP1dfP2w7XOmJi\nPzpQrvZxPlMRghcO5r32N4a24f2XNMfNXzToW/tbSg4AuLb1GxJqyetRKyw9yzcc\nJ3B4VnEugb0Tf2tCZ88+tHxbxBJEc6NOXd8gKVrX4VNr5FkEouMbGia7zNQ7IQem\nH2EATN5lB1tSlkn8tNDC3rk+2T9xyTJyO6oL6LrRqS92IxuUmy8INK+Eq0QD/WAR\nHYjA9Q31d5moVlB0ojHdXALZIQcaiAPhIt/IZSgZU9UpGtoR0dNkpcaX8vZNIv/6\nQjuCTbMUAVmvz7Ggiug/YAy99Rlym8N3H6TkDeTIRHWzpDUJq4oLhHbanXFmipM6\nNiGkNv7jwr1KQKJC+P5fDpxqUoJS7FLqdwEokegq/GgD0/OlEx+hXO7hnUmIRcCg\nMv1uGD/TL2Koo02J3TZ6nwTuurgeWL4xWrGsxT1egQ4FIjGzb2Y18yl10q2Xqfux\n3vtMNnnm7g7P2x1ZvPcM8mCyH6u70ZF4jk6wwuPelx7wkYBcYTRXl20TnTK1BjSo\nUVUyOSlZUfJ7C4yKHd2aHrqmoWZJsF8t38ekO03d7TishdW6e5p3L7DBA9uoDSRm\nvHCreWhvvas9mw4ck8ap4JrQWjldAzZ0ZSYaJJRpiJX8Q9PVc+Qum+HHNgBdgUEr\nAjH0Dv9QK0z81+jZ40ru/3ijiNmuC4npKmbRveFbXYBw+5LZKuElThT8rVNb6Wfx\njJF0BPcPm2y6nRG0gs9O/dN2ZAHRoHB/0BX6A9Jf3aYlao3hd4lNNXpPrM4R0mvR\nw+VyZ1Kxy1iXm+CvIQqJSaTc7kmTvz0xg+4QwIdlbUzMd1WYm8bnEVbK+D3V3JCf\nEsf9oE3wTj2Cxfff0mebcrTC1uLcQy5FU7ukVi8Zsn3reESRywW6CL/byPKYiVEx\n2aUXtOON9CFYHa1/O5+MW/5rK+MKt3/xprijG7QhS7OEgofhXBJfmD4k2m/xNLEq\nCILZNqkQq9KVHjnK7X/X7FQg80LzcA==\n=MgEi\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2cf8617d27903fde8ae2f553dbe978f7a4ac5664",
          "sha": "2cf8617d27903fde8ae2f553dbe978f7a4ac5664",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/2cf8617d27903fde8ae2f553dbe978f7a4ac5664"
        }
      ],
      "message": "net: implement opening PRIVATE_BROADCAST connections\n\nImplement opening `ConnectionType::PRIVATE_BROADCAST` connections with the\nfollowing properties:\n* They have higher priority over other connection types\n* Don't wait for outbound connection slot to be available\n* Only to Tor or I2P (or IPv4/IPv6 through the Tor proxy, if provided)\n* Open such connections only when requested and don't maintain N opened\n  connections of this type.",
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2024-07-31T12:56:27Z"
      },
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2023-12-20T13:05:35Z"
      },
      "sha": "c57d18c1403a296a4eb925e0d9d606100c9f424c"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGRlMjc3ZjZlOWFkZWUxYzU4ZmJlZTdiM2VkMmY5NzAwYzZiNzAwZjc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/de277f6e9adee1c58fbee7b3ed2f9700c6b700f7",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/de277f6e9adee1c58fbee7b3ed2f9700c6b700f7",
      "tree": {
        "sha": "9850a57d1f17535bcd18d380ca5a7e3dc7966b9c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9850a57d1f17535bcd18d380ca5a7e3dc7966b9c"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 9850a57d1f17535bcd18d380ca5a7e3dc7966b9c\nparent c57d18c1403a296a4eb925e0d9d606100c9f424c\nauthor Vasil Dimov <vd@FreeBSD.org> 1703082737 +0100\ncommitter Vasil Dimov <vd@FreeBSD.org> 1722430587 +0200\n\nnet_processing: rename RelayTransaction to better describe what it does\n\nRename `PeerManager::RelayTransaction()` to\n`PeerManager::ScheduleTxForBroadcastToAll()`. The transaction is not relayed\nwhen the method returns. It is only scheduled for broadcasting at a later\ntime. Also, there will be another method which only schedules for broadcast\nto Tor or I2P peers.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmaqNHwACgkQVN8G9ktV\ny78MSB//YkTtv6dd32fQP58bltBANL7tJdhM7BbA8bWILQVZk1nwJdW1RPHRaHpy\nWUl8oSnTtIHxv/5zWhVArHVZPDxxipUMp6RcuRwxcxaSTifYx/2osrsjruBO3CfE\nP5XeJQLDnlZYKrxWTab44wXz6mno1PEZb8kO97HxOcRCxzN8zqTaQrRjGETtp6Eb\nL5lb6ilKz3X9dRVm+5YXJ6CbUxY34UPydNP52L9crN8ujfDwAlEoy638JrXqBUWn\nKfWBfdET35BsG5oZRIj99ypeH0SxDG5k3LkTCkP+tt6UFLRBi+bF9PYR2MBD9gMF\nKnCMPrfxcZkN+EQQOuScCFoMwWr5pJXvk2Q3HKGjKI9HZc3Hy7fga9md4A80S2Il\nTGqt7O/PDcyQbSkkSc1wqnkScjmmQvbCLHu7CZ41ChW+/xQuz9Sft7pmlMsb5l5x\n7xRn96S783SIY9kJGdDm0TpUS6rHvaO+ARgX7/WaMHwQDb7N7+02RPDd1Kh36p1+\nAql4Kqb/HcfLC3xXN8APBbeqIg1p40BD2nAfrfHVuMMc5R9984/NQ9lACzpLcB80\nUkmTUgnb98SwWmALPRpLHyIfWgUHYx6LtSxa49P9j8ihPXbsWqyAWnuXBwDTc8Is\nRvPf3I734EB2gob+oBBTG7FcNXfAJFmTdsYSmyGlZqrHKv3jZuqlbiz3xI3kC16C\nbFaYZ7CEFdCu9zvhopgf7Ed0AIygpP+wF9T4WuqVZ8Txn6xBYXa0sCXW1oYcOnjG\nV6H5edxPA4MiRFKxXe2A4Z2IZX85MrPQJYtI147XCoMua2Oy6Hd/lz16+pBBXbMN\nVPJJtfQl2twlbIaJIWiIjRUT2+g7bTEEg42J8Ux/ksB02LPD0lgp2qmwEsjX7cjV\ny3moqU97Y1nrZV9YrOYNimjeh4yczoTb05ag7QFiSuuFJtNwK8sw8JERgDg0WR4u\nznhIjJt1G9CQN2o2/j4+2TQ4cSkr7wdylQnSs8Um1FnEgTP50IPzDHS1/jksoMIs\nq22//eXgpgxtzHBjh/siN84ZbHv1RxpKPd0ZWoTtCdeLsr6DRFo732slI6np2DRN\nuFqqQxDZ3rQfrYTgK7mYP8+PGq1Glms5dMp6BNrrrsWxzQa7TF/JjQAEx3aZZyT0\n2WWU7+pp0CURNl7dU1UQTR/yCOLtJ5l6jlLGhEyeonrqn2yp/pT8POLtVyMcqNY4\n0iDtK2eDzcXB/hJzqUMq7CFMHyGlWlAiCCfJPAvRc4yKVO4/j+GzzE21eo1QIm4f\nqJyQMWHs+019/Ws2w77wZq6OUc31aeLoEibaK1xS8j/U4cfLeP2otblnYqY3qaXJ\nemopldlhde6pdzQHy1gsCgiZi5vd7Q==\n=sWWj\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c57d18c1403a296a4eb925e0d9d606100c9f424c",
          "sha": "c57d18c1403a296a4eb925e0d9d606100c9f424c",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/c57d18c1403a296a4eb925e0d9d606100c9f424c"
        }
      ],
      "message": "net_processing: rename RelayTransaction to better describe what it does\n\nRename `PeerManager::RelayTransaction()` to\n`PeerManager::ScheduleTxForBroadcastToAll()`. The transaction is not relayed\nwhen the method returns. It is only scheduled for broadcasting at a later\ntime. Also, there will be another method which only schedules for broadcast\nto Tor or I2P peers.",
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2024-07-31T12:56:27Z"
      },
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2023-12-20T14:32:17Z"
      },
      "sha": "de277f6e9adee1c58fbee7b3ed2f9700c6b700f7"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGIzYzJlOTk1NmNjNzhkN2NlMWI0MTIzNzZkMTliYzg5N2Y1ZGI0NDg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b3c2e9956cc78d7ce1b412376d19bc897f5db448",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/b3c2e9956cc78d7ce1b412376d19bc897f5db448",
      "tree": {
        "sha": "92c342da41eb845381be9047064394203fecb25a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/92c342da41eb845381be9047064394203fecb25a"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 92c342da41eb845381be9047064394203fecb25a\nparent de277f6e9adee1c58fbee7b3ed2f9700c6b700f7\nauthor Vasil Dimov <vd@FreeBSD.org> 1706198790 +0100\ncommitter Vasil Dimov <vd@FreeBSD.org> 1722430588 +0200\n\nnode: change a tx-relay on/off flag to a tri-state\n\nPreviously the `bool relay` argument to `BroadcastTransaction()`\ndesignated:\n\n```\nrelay=true: add to the mempool and broadcast to all peers\nrelay=false: add to the mempool\n```\n\nExtend this with a third option to not add the transaction to the\nmempool and broadcast privately.\n\nThis is a non-functional change - the new third option is not handled\ninside `BroadcastTransaction()` and is not used by any of the callers.\n\nThe idea for the new `node/types.h` and the comments in it by Ryan.\n\nCo-authored-by: Ryan Ofsky <ryan@ofsky.org>\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmaqNHwACgkQVN8G9ktV\ny79WzR/+OpDnlx8Lvlk48p8NzXsIUKcEwkHH1YF+ROPbf58tfxWSbPkg04drVEuD\ncU+SrMQaqGKy4E/vsYjwY1lDZ7GENSaURPLEY4DjM/Dj7N1yyxIFykVFESGiP88H\nKRNz+G7iXibxYusEChvNz8rrh0xYrfEp0pb3ShNSH5bJUK2J4BW/WeOmXll+t4V/\n1agieQaGhB+gMzkyOs51L6ZOnKwAonrPDDGhbpyNcK2cca3rxZK9VvQp7mGuyzKD\n7PNpq2mNz+uiUJplZiOIfnvCCXxFZPSCHLH0hhPMSQoPSLjGnUV79f3WmJMYyEsW\nEWjvEgxPiKsL9Vrl3Sbc6IzWQu+iqJsJtI7R7uGS7kRbssVRy4gY8LcN5yQYsUUk\nAvw8nEOvv9H0ww5sQco96zt+aARBWRUbPZ9ovv14+zmWOmHPgXggWEL8U+lwCU9v\nQDnofSh2j6QSZFiBHALzOJGtbyDBE4btOkIWByT+3Mls6UrjRALnteo6Gb/3yG1u\nePBdTf7u29w/KMwNmQmi/GQPX5HKbgP0xxr6vq/50oFob3cypexVxuT2rhbv2Lkk\nr/U2L8Z5L1yRGAihzp7tFCY4wXSNSecFoOGvKKsSLRyQZiFYEoiSrort5IEQv7xR\nar175S9QcEeBOWX1ZoiMKE42gaOX0JrrHvel+srijH546I98EbNlhUHFzZ2GepBw\nGFBehZrVZWXDJn8kyP2FJaSJz2j/9ulHg4HzTrkWuH/LsikEhJIyBxVZ9b/fPRJH\nZ+5rwJlDh30fkSnZ+mOe0xUnLhr9ZKYrYw/puYtRDmvLrTxtoawzr28jgN83Kz9m\nu0TaBT4jJb+nREtrV2rr0sdd1iUvWHDzjV76REviMHmJmMRkQM04RK5o6PpXv2Bl\ngEhnUIXSrlCWg33q61FLxifiQrGRJ447jVWx6c13GrDn6YJtQNkJ5oEdiKD6V/0Z\nUa6+mm/hjES340kC8Qz5RaN3IqgrMKlLKU0T9Zg1xKM4sosiGvJhDRwTWjCOwy5H\n4UwumQ3rbV9OHkRzADE1vLcmHAngwNNEM5nSrAyV9PbmZP8NLaDW6Ejw7XaWU6+d\n06fsfVx2SryKTuu1I4izp0KZdGo/ltJiblJmv1eMUnMNAJmEJscvEEuk9YOdS/0v\nFOfSKlcgVMDP5ulFb+/n9E7TkE6VNHp//Q4dGGElEWJlBmEQn528W2ywE+0YzcoY\n6aIPtPFs1poLWeE1l0AqTqEWdA7ukB6p9jIzVFsUlWoIDKL1nEUoLGAILdet4ihH\njRDlEQXq4tv8eLXC9TDaAvUoeU9ObsDIdGSEcJL8gAKFyvBsnMc/EAtDLQTftGY8\nUSotdUn5YN9UBhPZCDohLaj/bHDoYg==\n=ibo8\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/de277f6e9adee1c58fbee7b3ed2f9700c6b700f7",
          "sha": "de277f6e9adee1c58fbee7b3ed2f9700c6b700f7",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/de277f6e9adee1c58fbee7b3ed2f9700c6b700f7"
        }
      ],
      "message": "node: change a tx-relay on/off flag to a tri-state\n\nPreviously the `bool relay` argument to `BroadcastTransaction()`\ndesignated:\n\n```\nrelay=true: add to the mempool and broadcast to all peers\nrelay=false: add to the mempool\n```\n\nExtend this with a third option to not add the transaction to the\nmempool and broadcast privately.\n\nThis is a non-functional change - the new third option is not handled\ninside `BroadcastTransaction()` and is not used by any of the callers.\n\nThe idea for the new `node/types.h` and the comments in it by Ryan.\n\nCo-authored-by: Ryan Ofsky <ryan@ofsky.org>",
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2024-07-31T12:56:28Z"
      },
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2024-01-25T16:06:30Z"
      },
      "sha": "b3c2e9956cc78d7ce1b412376d19bc897f5db448"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGQ5OTAxZGI4Mzc1MWVhNDgwNjBhMjc2ODhhZTliNzYzNWRkZDFmNzk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d9901db83751ea48060a27688ae9b7635ddd1f79",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/d9901db83751ea48060a27688ae9b7635ddd1f79",
      "tree": {
        "sha": "3b7920f66b7c0147f8b2cc9f1f178c0afc8407fb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3b7920f66b7c0147f8b2cc9f1f178c0afc8407fb"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 3b7920f66b7c0147f8b2cc9f1f178c0afc8407fb\nparent b3c2e9956cc78d7ce1b412376d19bc897f5db448\nauthor Vasil Dimov <vd@FreeBSD.org> 1706605284 +0100\ncommitter Vasil Dimov <vd@FreeBSD.org> 1722430588 +0200\n\nnet_processing: store transactions for private broadcast in PeerManager\n\nExtend `PeerManager` with a transaction storage and a new method\n`ScheduleTxForPrivateBroadcast()` which:\n* adds a transaction to that storage and\n* calls `CConnman::PrivateBroadcastAdd()` to open dedicated privacy\n  connections that will pick an entry from the transaction storage and\n  broadcast it.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmaqNH0ACgkQVN8G9ktV\ny79LCh/7BSINpKultjj6D8kH40Lp5U16QApbflnvXr0DOOkRt/rrWCbPh+xBlB1e\nsuHJTLOSfxlctsCEJoeNAvHyxHx3BV75tEBHvKz/nlmQUNmnK64l7kiqS1h5z346\nZ2Z2jUThrHtynaz5yKNGyedNFNvfZp6MAxDMrXK49TI665rXS+f6zdxmDGt66Aye\nRw391JmueGNSugVlER+Gu3d2nSacvj5AeqdGqbBx1klo1htLGi0p8JeYLvTjLwSh\nqrQQFRtN6HFSNthCkuDHPoH0omsMhXYKsJZTeMLjnINChP3pPPpV1WIufVk8uqfM\nvMxH62BgyEXzQ0RxAtMDgjnVxZv9LLJq5YlWw7KEeNGf+/Pq+7mkXYrtlBx/4c7a\nViaO970LwJVqWQOrcqV8VUDK2LfDsOU9jVY3CNSttp9msPUkIsjV/AtptFmjgJKz\n+qOvkEKw3dPDDJG5/UdRnH3nwbu88As/I0c5gQmToRDt7D9XNivA2kbcAHviMSmC\nhl/KrhnZVOXOyehW1OUKfcz8PN3r1qvzs5fSF8R6YtKhy1pKyFeuSxlgrRS39pGH\nldUFlDSmlpxz9vgn0u4c3mwSZST5qfDLpP+iJ/MYTiFV7RPMqXdToA1CpeiHjO4J\nEW3oxXpUFyh8EQkj4A2qEVN9OYuUT3BExcLJVDM//OMsHsG5lY+zfNXKEPydOj4P\nLbZ7B44yV6UVXB+mjRR9XdSeoc5BwKTAsKhmJ4cSTMrXPwO9T3JMlbCHGjZOCVJU\n0aIlkcOUtulOuGa0z+sA1gij7ddAm0fg/bva4hTOLyu6ewtcUNP32SwAmeQ94lp6\ndzyF5VXBgi1hJaaU8sg/9iHd3stDA1/JqxDqUO7vOJZeiXbMHfHX1KDmtisbuEh/\ndFX+ipQnJsC9AMVJaGV0dkuc5WDXAxhcdTAFR1oro59wDPmar/PlBUKgnw5Hvssw\nsVyOQnueuo5/PXEO7cDmmVUzKVg3gE/Qet7PPidQBw514S7uB6CFl49BptG78ARf\ntgEt/DQ9JGC54Hfq61JMdqiZK/KgUEKk/VCMXNcSwUMSfgGtXlCFlv1fxtYob5No\n+/MHQ1zH+gAkrZmoNy1zG1+R7JyL+/3KYgrp+smtdjLxoD8hAwqULuK87ng43ZT4\nJGRROV8iPb1aFsPupxl3MCz4KnPqD2s8LKiHsmxsjSuDDJuMrEFwRqK4hJP4qUNX\nNd9jhReVo058MtVQ/lZXWF/MbjOaiWw8r6x1b74fj8hBNhp0oml4XmYUABdvwFz6\n4G3RV93lvVNa/JyUcqmOjGpCMfZXTiOcP9KCqUNwEk/PCitUAcmWGyPUF23HurpH\neGPAdUhFUgVPXKe28eGza9fG4hoA0Q==\n=gtx8\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b3c2e9956cc78d7ce1b412376d19bc897f5db448",
          "sha": "b3c2e9956cc78d7ce1b412376d19bc897f5db448",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/b3c2e9956cc78d7ce1b412376d19bc897f5db448"
        }
      ],
      "message": "net_processing: store transactions for private broadcast in PeerManager\n\nExtend `PeerManager` with a transaction storage and a new method\n`ScheduleTxForPrivateBroadcast()` which:\n* adds a transaction to that storage and\n* calls `CConnman::PrivateBroadcastAdd()` to open dedicated privacy\n  connections that will pick an entry from the transaction storage and\n  broadcast it.",
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2024-07-31T12:56:28Z"
      },
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2024-01-30T09:01:24Z"
      },
      "sha": "d9901db83751ea48060a27688ae9b7635ddd1f79"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDgzNjI0YzJiNzM4NWJjODUyZjRiNTNiNmFkODIxMzExOGMzMTIyZTY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/83624c2b7385bc852f4b53b6ad8213118c3122e6",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/83624c2b7385bc852f4b53b6ad8213118c3122e6",
      "tree": {
        "sha": "aa32749f767e3feae723e7226373954e4e8ed058",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/aa32749f767e3feae723e7226373954e4e8ed058"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree aa32749f767e3feae723e7226373954e4e8ed058\nparent d9901db83751ea48060a27688ae9b7635ddd1f79\nauthor Vasil Dimov <vd@FreeBSD.org> 1703161470 +0100\ncommitter Vasil Dimov <vd@FreeBSD.org> 1722430589 +0200\n\nnet_processing: reorder the code that handles the VERSION message\n\nChange the order in which code snippets are executed as a result of\nreceiving the `VERSION` message. Move the snippets that do\n`MakeAndPushMessage()` near the end. This will help with handling of\nprivate broadcast connections - they do not require any of that.\n\nThis is a non-functional change.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmaqNH0ACgkQVN8G9ktV\ny7+rDyAAqF+MS9p+7Qjw3q6l9LpeDKVyt9xFarOQKf71Y4Sm8j2NZ4DaQ7Y0JqpL\n5ypALJMe9gKDMBto/AOWMfXXJ+h/s+9JEAzPdQz2J+n1iv2SvJGR617er/gFwX/G\nNJkwjT3kvH1BZS4NdHi9M3ohSH0qoQknSYxDbXs3PGE/p524UYccHCjLqHVnMRo9\nt9D30n624eGq8MsjMSXhQ0UW7YYSoFNkgGBp3o9YJt6IPdFiU3TVzsAydspEnYNu\nb59Ej+EaCmOyCLJu5LFcKjOjOKXO+kTrpErYOIk4kBP18WPk0wLkp1/Wu3thXHmH\nTuTs7fHuvHavKpbQ3Xd8NL33XMoY7XRyLs+qbv8n0dzw+DlVmVaST84hdBm1vXP6\nIJ35n30YKY1u4Dgn7+7UXIfnzhLdq0yuuDqlwlSndZzEbiML68J7VeDxO2/5mJs7\nlw5+AumyG2GhWujUUVCIZlM6vFVx6p7eJnqoag5uBDQQxAZSz3GEgkRE4goNuQqJ\n/EHP+MXvVKJuRW4/U7DvgM5LEo4tigJShLABAPvN2I3buHO0o6H5nW9QSs7FW5Qi\n9JZiCO53o3xhOD/d8ucNTREDxn4yHxrIeGtexVlkQFkPgivRtlNeCYdBDigCPkYQ\niuSIsPCFjrdB1G/j8+eCBg1lSWNs69YeJgyJiXwPZcvOwZo99AOKGFDx0YyoqrJq\nUs5uR4VP1RIEu3wxRM6xCeha0u4n4FVozt4IRs/pUhufMH6JzGprcnWtt24ljlKz\nwQvyySjg0N0ab34fSxfMcFff7RUz61MzTF5pJUzscTtQ/lE2oKETIglgJygV13Ii\n4propzVFIvmTRLTdYKGVsLr47/r/r1vHdofVZlNG6rBX6g3geI8nF3QBCyDWNFhN\nWb3lolB/PbbZhzws5H3dMhCQY9yCghvLvKuvugjzj8LCI2j76CoHz9cU+2btA48d\nV82gKCchZsqfF9CTRyPVspz2qFf+19JAyTGrk+hPh1OuwxMoS1JdQgBrQiy9HqsC\nSxTwa4H+S9CQbLV2oaXW9vj8RbOF8krrpXm0RpKecz/k0giAmF931KyUqJafpyCr\neblp8bx+Oql9gmzfSL7N9MjvNTcXWC1Gs4NbxPoEeKn2dVqfFDcTm61Kj2LzRw8t\n6mfqHmjcDEu1Wy4lOQOSVIlkvmzxMXgDtMw4ySv79EXH17DQ+yS2Ahe77jr7BuMI\n6y2hshbeKZzCHW32ABZQ40KatJvanjgUpMstQP2H1xycwFieoGOER19S7Y36HjT0\nNDiNLplfkU4h5DYcKZR6v5Fo+4mdI8Wb1E/CuO4BujOCdd3t4Ymd//qHy5gGyzme\nzYcJ0iLUkyEQqlg0ibzhckD0UMssdw==\n=/Ny4\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d9901db83751ea48060a27688ae9b7635ddd1f79",
          "sha": "d9901db83751ea48060a27688ae9b7635ddd1f79",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/d9901db83751ea48060a27688ae9b7635ddd1f79"
        }
      ],
      "message": "net_processing: reorder the code that handles the VERSION message\n\nChange the order in which code snippets are executed as a result of\nreceiving the `VERSION` message. Move the snippets that do\n`MakeAndPushMessage()` near the end. This will help with handling of\nprivate broadcast connections - they do not require any of that.\n\nThis is a non-functional change.",
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2024-07-31T12:56:29Z"
      },
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2023-12-21T12:24:30Z"
      },
      "sha": "83624c2b7385bc852f4b53b6ad8213118c3122e6"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDY0MGFkZmRhYTYzNWFjNmRmNzU5ZTA5MzU2ZjlhMTJhZjc1NjYyNzc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/640adfdaa635ac6df759e09356f9a12af7566277",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/640adfdaa635ac6df759e09356f9a12af7566277",
      "tree": {
        "sha": "9344d9419ad75886c62a1e03b96324f2fcbd8e10",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9344d9419ad75886c62a1e03b96324f2fcbd8e10"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 9344d9419ad75886c62a1e03b96324f2fcbd8e10\nparent 83624c2b7385bc852f4b53b6ad8213118c3122e6\nauthor Vasil Dimov <vd@FreeBSD.org> 1681911630 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1722430590 +0200\n\nnet_processing: handle ConnectionType::PRIVATE_BROADCAST connections\n\nFor connections of type `ConnectionType::PRIVATE_BROADCAST`:\n* After receiving VERACK, relay a transaction from the list of\n  transactions for private broadcast and disconnect\n* Don't process any messages after VERACK\n* Don't send any messages other than the minimum required for the\n  transaction relay\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmaqNH4ACgkQVN8G9ktV\ny7+2dh//XHaF04z5uXp3vuj8SgTZo3f96Mxq0QVgYZ3mOtUtbi3NHAMWuMpoxXTF\nRta30T/4oC8zJlnxFeoUXjyr2IJAXLQPVh8ADrvn4tMUr3cjTETB0Ldw2RVAbl0v\nxNkluOVrDo230nCWlyirc5jDDfsahoyrY07tG1rAscMLKZsaYPneDxhNjQBvVFSJ\nKNiT3jAYXYCF6gY6r1pfVr3ToPTY8vH1WAZGt9Be0byX0hp+5yxmR0nNsED5Kyn4\nNAxL0lPY/RVVAkB3qcdUzFSu6wvcQVVlBOdHR7Esj7ZkkuVurDnbf3kzrmnIeSdo\nE/0WkFVNswrhjZkSPX8CbL1GSmbB7xQW6B7UEAn+1QX4nZg6f9rY4fDfhWvbsjVr\nLECtUrHQiIti0GMam+t20KMsdiM2brZZokQUKY3krT+zX/p2IL+abSE9Niyx/vcn\n9DfIj1v3K3vStVsq8Jiag6jY6ehzd+TIKsPodMOBeeBzkpUqGlV9+92qiaOpj8Ck\nm4JNSSJc2qHrJie1oTSfyPrAogo5SOcbMgJmIxSZMU0D5RhMuDK0HMMT7CFyNbrH\nbFf4xvRimwbx7sNJW7ybXy4nktRmwmBDoyYgvgPekpMEHWPGXTvTGOL0xfxDr+vK\nJqnGN2B8ubdnTtWu6kp+aFlfxLW2qwOeSnzjEeSnltwLVzeF+Ei0kAV8Hzz1Hjsj\n68a+MFpYBZRzJUzQlOYWYpMnnCPa69v93ojvH3fz/YvZ5jo6vk8sOvC94qLrquZa\nRpiNgOP6YG6vqx5XcMQ/xP89MiljkqDqQ3kavIbys9ugXeAQ09wsDbWgWTrmoDJG\nCC7PrB3BY6fMm1yFKGQ8ZzyESiLM+pCwWCZ9vV+quqKKx2zc2Q6DLENM83fHCvhh\nej9ndY11l3s2rkv4D/xmNNz/XGB7VB9YJnUPgphZrFmWYo6AaEl9AFji5JhQGeM8\nLNbMIwk6WG1uLX3kx5yq4bgz+pKJPpOfv09lBi2V+zJm+mf5Bj2U+P5Xd395JDQr\nyuQ2A4cgXzqCV8IZhlf2HZeTgKCddx1eztSMmuTTQ8WcMQNmZq4vFUIOmytK+VAf\nrv6VOMxjQyOmlIXbZa89hAwZ8+T5j1R8VUWZjQyjP0fL/TuOdmA/0KWvX/E+e9Br\nbc8RKj8l2KL+OQh/IxNDU74kjhpFG+uqDZF0NtXCi2+h/oDpU3F64gUVyos2AI+2\nvct90NT7q1IgM4ILvFwPGO8a6fagJx/5dExhs4RA8tnoIRGGqXnTH1dMv+lCSEU4\nYePF0hZpMalrS3WeSAIoEaXPVzd/oae39A31juyo9jltyCIhjpUC+dU+c5LZvOSR\nMIZQYGUaiousRW2bb9B8O3HMKzqfmw==\n=NjDP\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/83624c2b7385bc852f4b53b6ad8213118c3122e6",
          "sha": "83624c2b7385bc852f4b53b6ad8213118c3122e6",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/83624c2b7385bc852f4b53b6ad8213118c3122e6"
        }
      ],
      "message": "net_processing: handle ConnectionType::PRIVATE_BROADCAST connections\n\nFor connections of type `ConnectionType::PRIVATE_BROADCAST`:\n* After receiving VERACK, relay a transaction from the list of\n  transactions for private broadcast and disconnect\n* Don't process any messages after VERACK\n* Don't send any messages other than the minimum required for the\n  transaction relay",
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2024-07-31T12:56:30Z"
      },
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2023-04-19T13:40:30Z"
      },
      "sha": "640adfdaa635ac6df759e09356f9a12af7566277"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDQ2ZGIwNjZiZDAzNThmMjBjNmNjZjQ3ZTQ5ZDMxN2JiMDIzMTQyZWQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/46db066bd0358f20c6ccf47e49d317bb023142ed",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/46db066bd0358f20c6ccf47e49d317bb023142ed",
      "tree": {
        "sha": "05681eae1ec1a3ecf55a82b39fd31b476bab8662",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/05681eae1ec1a3ecf55a82b39fd31b476bab8662"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 05681eae1ec1a3ecf55a82b39fd31b476bab8662\nparent 640adfdaa635ac6df759e09356f9a12af7566277\nauthor Vasil Dimov <vd@FreeBSD.org> 1706637083 +0100\ncommitter Vasil Dimov <vd@FreeBSD.org> 1722430590 +0200\n\nnet_processing: stop private broadcast of a transaction after round-trip\n\nRemove the transaction from the list of transactions to broadcast after\nwe receive it from the network.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmaqNH8ACgkQVN8G9ktV\ny78OkB//TG4VzuTOHFrBheaIFd1fPLgjQ7vS3/ibocCmRNI6TeVBXxs+k3kZMdcR\nKjV6OBazMTf5OBiNstdEj64+OXqtKcwffAliKBVRbx4m/2dAXkOgiiVLMSr6/MHU\nBvUkrLL+hD9upLydVhEY54dm9POnEwC2xO36BS4i/n2xbKyLWXqaIRsgALyg+qo2\nKi8Ddx+caT/qA3d6ntoRyusth5BzHfAAdWb5mU8N57GVmd2Kkl3FUJUtBIilHeya\nCPL0uX58Llhx+kOBAE47UCZWb+RXV/MsGkTmjpxSPn4H+9Nq0a9YEQNmQkpzYAMY\nToJ132kVbdHgemabcWivxeoLEVPegCWO9hlnS96XnCN/AOe7sGw/mx1bQdTRJywi\nMWeF6xhuJatPrdCzP1GoK0wYpLbwnnw92NcZGGfCnaI2Hvq2mMs7BBhRJYs62J79\nlT1pFYJEkmzft1x3v9hyQ6YP76MFWMAMGmfAauwebfxO7IUZ385ZBnisI+Ouwxxd\n1heZd5N3KtLLj7k1zgB0Z8KCrvvUWVBXaaRWF1gNDKHx3oHhqDvLxUFnJVWeZv2t\nLbqM+wGgXv6a7E2Z5mT1OCY2M0/qfO9+xqEmWnEMlgMhwZCm4808TjqwbQrKpmBM\nhZtQvmsyV2IbaiatiILQHC0XOME3Vh4rAhFIHwUz+1nDCK5cOyYQMc5iA0+BblSJ\n8GrD2Lp3oT23bNz5JTJrIYQgq0rlOs+1aNYsWXM8qza9wtGS/9JLZah26KpAploK\nK81r4d1LhBfmvFrxvYJuHe+tVFTBtRpiHcqNR+A7lQHphW/ePfdcNwZHz7iYxddS\noSRkQ836qxwlneYGUGHE2okg5fHigAxowgATE2vUm6KYH68PfTQUY40n6Zu9VdLB\ny48nEwLOldC+VTRYbFte1ibhJSgqI5AXnOi6nSgildQXaUFrAXqFPJHABfFAFFoI\nvan2Bo0U9VhwwMjuM6JchLMQQs0lyfygRhD7/XQm7DZQo9AXi3FveR3SRZVMAdLh\nqJ7P7xxZyPKV28tMJk7NYT5B1dq3aXkGtwVmB5fjtF2w9P2h1QzsUmrz60jZFPLU\nd24whqezJssgSiRq1jHD78V2J1oinbgdNCbZqPXgqpGJEExC7TdNKWwOoJLiKBkK\nAaC9FED2YH4PDpcXv4FLK68vgOPHuRqs3/+0Wcy3NJ0xehZQn7KpWvYpSghRmtwS\nvDtLWpCYSBrV63tRylOh3bgaClV/l6UT2zMixe8sM+ZG23aU0+T7+ONuU4F7x5Uo\nuGLPCMU6a46CCGVdfA9UqeOvEI3J1/6TsulPrQyx0/rAUJYGZJ52BEflv4ZKn/PT\nzeu9tUPBH1yVIGvwgpWAx+GxhO89eQ==\n=/Y1F\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/640adfdaa635ac6df759e09356f9a12af7566277",
          "sha": "640adfdaa635ac6df759e09356f9a12af7566277",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/640adfdaa635ac6df759e09356f9a12af7566277"
        }
      ],
      "message": "net_processing: stop private broadcast of a transaction after round-trip\n\nRemove the transaction from the list of transactions to broadcast after\nwe receive it from the network.",
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2024-07-31T12:56:30Z"
      },
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2024-01-30T17:51:23Z"
      },
      "sha": "46db066bd0358f20c6ccf47e49d317bb023142ed"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGYyYTU4ZmJkMDM1NDg4YjliNmFkMjc4YzdhNjc3YWQ0ZjA3NTY4OGM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f2a58fbd035488b9b6ad278c7a677ad4f075688c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/f2a58fbd035488b9b6ad278c7a677ad4f075688c",
      "tree": {
        "sha": "65570218cab79521d93b82251a612c5fe49a88b1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/65570218cab79521d93b82251a612c5fe49a88b1"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 65570218cab79521d93b82251a612c5fe49a88b1\nparent 46db066bd0358f20c6ccf47e49d317bb023142ed\nauthor Vasil Dimov <vd@FreeBSD.org> 1706635523 +0100\ncommitter Vasil Dimov <vd@FreeBSD.org> 1722430591 +0200\n\nnet_processing: retry private broadcast\n\nPeriodically check for stale transactions in peerman and if found,\nreschedule new connections to be opened by connman for broadcasting\nthem.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmaqNH8ACgkQVN8G9ktV\ny78noB//WQ0fKDCWiX03UNdMdGlU5+yedj8RRIE1DnkSheByx1nn90zFPmYmdVK/\nV/RpQkk4Y8DcOfZWL49aRlgdVRQxqv1hxf/JMmU8tlhrh2FoghcilJBdO1mCFDy6\nErUHt9+FpsHXgUcdT9WzqsXVXdTatUwuqTQNS1ZBAiC+lWy6wxIVYNHb4PILAo1J\nSaMo48K8flkHNVuJxbF/ORoi+bBl+qlA5MLPcYTNchUYY5+XNVAA/ieZDzKArtZI\nlPfJ/ZCZNg86WjZl9LqSyyj8frXRtdXDrQ6cICJSL5l8yd4K/XOkIiSeLaHT1voO\nUjWJDYIwGp7kKdr7cwJGa2xcLeOth49Sbgezj3dvltWkxqeT0Ub/x4ztM5s2gvL9\n4sZmFcQFDiEiiFHnGcmVU6iwbKuy80GF+0wkwAyYiNxVompIOTMikw4+pQifHVhz\nLWL2+vzXo6sKs95El0XrjVaT/nqe95vzaNMjTqMX1Vjq1P0xR/CkERQUyXx0QpYB\n1z2VxMz+25me3cnQrjsCe/sf+c8M+GSfRs8ZkOeBXNuBWt9IQWFIOJ5HrZfTIFNF\n6ojr9ew2lWuiZwE6YNPOrUOjpmzSnMZcgXTmUqEKGIGh1CSNX6D2uum+Z2MKs5Pf\ngTsSwjvcK2tlpgbJOIck6q08BI/9Ep7CbVF5a9T2a1+w03dFF3pcTd7e2l66DqcO\nRp8Xjil+xP0HvGbX/uwGs+4uz1SBL/qeGbKM3XVdB5qLOEwzfL47j2LN84Cxpzr/\nF1MfYh9mwz+taWsFmtCMCwGG7m9KHRSbFwJIeZgM2jeeBCfTXGmKQYTk1MnnlUP5\nQFHu09cInfyfOsiysetBQsfciTj5dF7aeOYH++b8OA+dmlocIwxfQAIC8gDE02ms\nihPmIs+LXz3duv8s5sHkUK26zeuK0TjLEV6Zfbao7c3ZiLL3TI552rVPcq0iRANY\nU4nzMD3h7WBTtd0znTyHicoxj21NYaG8i7TwpsgC/ISX2TK86B41KxjUSSntk9gK\n5NEVqPYwj1qIR04KjWvln/YflkBxsg8ZSB0qm9cYftUoK8dgJ+v81YP91/BUhSXR\nUJKWfUxP6zl0nNv30sqPVQIwKukdcDbjdsFrhL3zHHASa9I4zz7m4n04+2pKJUIu\nax/InijGk8KgHcTCzgwH4XnRqQrlG3H0EF8KKsEhjTSC9VVWVPqcbJmXaEQG0EMz\nUhW4Iv9m9OHcGm+aKeXNCF+z6GUkrU9kOpXc9rXqR9zL8kQt6NgK946itMck9uyj\nZvGgNTVnSDByx+uP8s/URa2dOCiu930GCqNpAY6MNABZ5ZLuBUQ6lIfyU+/s9kbQ\nzlAZONyrEDrTng4bz4UKLCjMMZvp7w==\n=5rkn\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/46db066bd0358f20c6ccf47e49d317bb023142ed",
          "sha": "46db066bd0358f20c6ccf47e49d317bb023142ed",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/46db066bd0358f20c6ccf47e49d317bb023142ed"
        }
      ],
      "message": "net_processing: retry private broadcast\n\nPeriodically check for stale transactions in peerman and if found,\nreschedule new connections to be opened by connman for broadcasting\nthem.",
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2024-07-31T12:56:31Z"
      },
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2024-01-30T17:25:23Z"
      },
      "sha": "f2a58fbd035488b9b6ad278c7a677ad4f075688c"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGY1NmM5NTNlZGQyYTk0YTgzYzRkMTBkODI0Mjc0MTY2MTZiYTQ5ZDg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f56c953edd2a94a83c4d10d82427416616ba49d8",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/f56c953edd2a94a83c4d10d82427416616ba49d8",
      "tree": {
        "sha": "f8adde815b62bbc05aaec6e2dadfee19011ac50f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f8adde815b62bbc05aaec6e2dadfee19011ac50f"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree f8adde815b62bbc05aaec6e2dadfee19011ac50f\nparent f2a58fbd035488b9b6ad278c7a677ad4f075688c\nauthor Vasil Dimov <vd@FreeBSD.org> 1706800264 +0100\ncommitter Vasil Dimov <vd@FreeBSD.org> 1722430591 +0200\n\nrpc: use private broadcast from sendrawtransaction RPC if -privatebroadcast is ON\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmaqNIAACgkQVN8G9ktV\ny78crh/+Orn7hKWkDVzD8xQbBrxbH6FkvOCxH7SSGJzWCpjlCfTqrLO9EUybrw4+\njLkM0XTB5wgF+DuguujaxFXQrSJsMLnr4UfF2we/IdIjU9zetMMiIJoaZJE7YVXW\nuOdg4mpEVPb8G4ZJMFPM/9BNhnNo55n+eUO5QkJeSEZ+zNu+ifIedXQ2cFbr+Sxg\nDi6cd0K7eucqDBAJnNUfRPxja6vaGemMT5P45TmK3VpHkmUp6Jmn7ePE0FIw4l5y\nQVUDx4n8vwB0lp8Ieqci2m6CMpOjzlSJTIBMWA/K/FW5XXaAKn20kjiJTHRTAnAg\n9SBjxK7CYJ0TYNqTrwWtO9vlP6nzik7J8EDgxLwmDA3QdtsSO/5bcMpM3c2vR3Fm\nCGQZKyBnr+G5CkPqWgPIdSQ9f2DMPMEDKNBB/uwun/ni5TFh4bxh4TdKJSV/zHvo\n0zpCcNianOPRenCRUxx/kjHVkxywaxTlZKSQ8c0biAyYJdMqGwnXNPNXKC0spqNT\nkfBOO3Y3OFZbwdEFSDz1MY+hOzdndOPu9ybLaMSLXKQhfdPoUIh8/ruJhwXf64o5\nK+y6U4neh4UEUieDNV1QXezzo/Bhj2ssYri+9oWRBssH3YYqWimQndttFvTP0X6B\nMPvBgR0f4rted1rACRN4ZjiOt9ifd4gdBzSEQvoNNv0BjKJ8QIQpLSn0As16dBne\noL0d3HODJlXo0TiLmYlLRk8A8MUK4FKXFfK87fZe5HiydnYuQCyT3Y/yIcLWWg4c\nr3xYKlE2nzbF6UBJ/7CVVR9G26ppbIGvx0hjmSoFMBjgWSWssLyzoECTG2fEB2qJ\nrFyrSLQVnLBGRU6OSMYk7oc7Ps7DBZIQwkZQaYRX+csjhJYibMiE4LK+TFilgpUX\nXimXp8cgqcaWKGpEiyC2Lq3eHpZswt39AhhzSwMxJk+WhFsmZBCrchBIbGV+1klX\nTp4Y21IHRsKnvdMmUdhbkVNr/qv73xvSbNdePbfanhZOyX57c2gfrw/JA30ALckv\nLt7P7EMJYktE+ViVhHmRhuK4EPSbeuY47DcVP4+HzwXpz7rsQRL9D69lpw9gJv4Y\nDWvu5FFdC8SSsb1d/lvU6LP56Yvl0mM6ua2D1tOGipd7VuiZjaExh93DubeTle5q\no5lAOszQtB/MiovAs337Wzt5B/IjaSU/oq6WWcxIEHhX4mhitMUabX+wXXq2xpD6\neDdhUVUdkrxrrZws3XaOsip1CX4+eibCq0OSjVCIi9xhEUIQJD42QzgN+4SHau5t\nCdD8hScYtV3ONYXqSmpI4yr4KVlCxhy3ggH6PeZJRpkt8utofSmBiBFP8YaYFkop\nDsMCn+wzMC/WlIeARd6qhvLXUGfVEw==\n=xznZ\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f2a58fbd035488b9b6ad278c7a677ad4f075688c",
          "sha": "f2a58fbd035488b9b6ad278c7a677ad4f075688c",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/f2a58fbd035488b9b6ad278c7a677ad4f075688c"
        }
      ],
      "message": "rpc: use private broadcast from sendrawtransaction RPC if -privatebroadcast is ON",
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2024-07-31T12:56:31Z"
      },
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2024-02-01T15:11:04Z"
      },
      "sha": "f56c953edd2a94a83c4d10d82427416616ba49d8"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDMzYTFmMjE2MzUzZTdlNTZjMzk1OTg3OTg2ZWExYWE4Y2NhZTZjYWY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/33a1f216353e7e56c395987986ea1aa8ccae6caf",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/33a1f216353e7e56c395987986ea1aa8ccae6caf",
      "tree": {
        "sha": "e2b8fa8b9e54aa41254c7b88284c6d18e7e65074",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e2b8fa8b9e54aa41254c7b88284c6d18e7e65074"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree e2b8fa8b9e54aa41254c7b88284c6d18e7e65074\nparent f56c953edd2a94a83c4d10d82427416616ba49d8\nauthor Vasil Dimov <vd@FreeBSD.org> 1684335182 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1722430592 +0200\n\ntest: improve debug log message from P2PConnection::connection_made()\n\nThis is used in both cases - TCP server (accept) and TCP client (connect).\nThe message \"Connected & Listening address:port\" is confusing.\n\nPrint both ends of the TCP connection.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmaqNIAACgkQVN8G9ktV\ny7+pcB/9Fi4S9PUHSzppp6aaf/JcfTuONvfrvjtoxdC3inu2wrk9ELi7qdmiIM3w\n1AhP/PIdJ2FrP+/obUrYN/r/FXUmbrGkdqqUHxfXK8dC7Roh6BoW2Hd3z0HpHqqS\nTkh3oD8Qy8YFX85S2/oy9NjS5qUbqg72imfVTSQRD0Zty2xSjMZO/+9KV1f+16zj\nkq9m7eAGgOIlOHNh+bYRg7vKxgPNfT1vvkcCmeQKYQEs83k0J87skZbfVRVV9AYT\nTyAjRM9Nqf1pfcZfRiVI+hJr+75OsYSvoVo0MdN7RBcgX4jpG++zDk0gvoooz7Wg\nWEBDxAVFt3pt3CgTsUN6V4JfZojFxJfz0RmxFDDF1mspPj0X/YBAph0Xh2S0luL6\nsHQVEfAGnC/mFuIWwaU+snRVp42FZfaoUJ5cOUjOOm44557LVmwfH1alQKeESV71\nFpV/k6t+CFiLWZLq8e0K6pLpKR1cV4h0FQDw7NBNbOYk+iXdv0EjUwsm7MC7ZSoa\nQZMewzutkuyuST4uaKFSlQS5944OcrNCXndd6486Cw0fxdp8LvJ7LMvn9uxTO3BJ\nOKtrcxMAUR2K0FfM6RwuJUo+RHFDD7NhD2HKVHCN8MzNcrFs2Nh6b0e0YfkKzSqU\nfA8S+WUpFOxDkFKv6WMutghnbLtJPspMA6edHdkOYkFyF1s8d3j3lzSIQzGNc+fe\nOCfDMqjdg+Ax1ZTK8g2bgbJiMxU43GX7uI7BTGaWl1aFnpQFAipfskWK8NgZFvjD\nMQi7BXrtcZ/M873xvCgkP81XBXwGF6+NwBBhL8fXQ6mWlX/DcTRrLzcjd30/tmTw\n1B4pbS9AkLM6Bc7BvSG53ShIlqp13vGDztU6m/xOFXcvZohLtB7PtvmfUbtFQFUA\nIKzDcE+JvmrpLMjThxNyTjjEPezUovzl3hXyyLmS4RoHPlQApdgBtK19b0BjRtV5\nIblBaLkR5+8Ile5gQ6706Ru/YnIwtvHTAtXDVCsTEPJom4w3hFwI23Xt9F0FHGI9\nP00wkvpOxvf6p/9faD+nuqLAXwfV1SXrdebyVTZIAiB31gOrD+vfkV8Dy1IXKyFh\n3yIe+VGpTBz0yENeSPqozeRSHOAN5Km/PHyunncMhr449p0Gmz7hCZwGGsP31oK3\n2DlCmwR8mS9MJvqSSqmU4jVTTgu++ruwJKgRfkEcfv25ZL7LMLH7ODCNVams9oLK\njhWfAN0JSNFbRIM9YeiYJXxaNLWfyjwNqpcW8Up96jfJmYz2LB7zC5mlBRsZs5eA\nTvNSR5k9+H7e5CvLQFuXTKY9CxPLHleBcLLYK5WYj1UXnjcFtStHd6Z9UxbEnEqa\nCg+2Sb9v0MwJ0v7KH0wQiYsH4Uz13w==\n=m1Pe\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f56c953edd2a94a83c4d10d82427416616ba49d8",
          "sha": "f56c953edd2a94a83c4d10d82427416616ba49d8",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/f56c953edd2a94a83c4d10d82427416616ba49d8"
        }
      ],
      "message": "test: improve debug log message from P2PConnection::connection_made()\n\nThis is used in both cases - TCP server (accept) and TCP client (connect).\nThe message \"Connected & Listening address:port\" is confusing.\n\nPrint both ends of the TCP connection.",
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2024-07-31T12:56:32Z"
      },
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2023-05-17T14:53:02Z"
      },
      "sha": "33a1f216353e7e56c395987986ea1aa8ccae6caf"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDk3NTNmOGUzYjhjNmQzNThhZDEwZmI2NGJjNzlmMmQyZTY0ZWM4N2U",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9753f8e3b8c6d358ad10fb64bc79f2d2e64ec87e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/9753f8e3b8c6d358ad10fb64bc79f2d2e64ec87e",
      "tree": {
        "sha": "3935b42a2b2d9255a97fe97106b84febd74e9b58",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3935b42a2b2d9255a97fe97106b84febd74e9b58"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 3935b42a2b2d9255a97fe97106b84febd74e9b58\nparent 33a1f216353e7e56c395987986ea1aa8ccae6caf\nauthor Vasil Dimov <vd@FreeBSD.org> 1684492282 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1722432064 +0200\n\ntest: extend the SOCKS5 Python proxy to actually connect to a destination\n\nIf requested, make the SOCKS5 Python proxy redirect each connection to a\ngiven destination. Actually act as a real proxy, connecting the\nclient to a destination, except that the destination is not what the\nclient asked for.\n\nThis would enable us to \"connect\" to Tor addresses from the functional\ntests.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmaqOmwACgkQVN8G9ktV\ny78Ubh//fXmS7ymLh4SOCFw3qqZSwMKRGI0aXKk5f/Cdz2n3x4/YrCksC12ymR47\nQzL2DjNnPVweqbe3Dp9W/mPq+YSka3hl0aWfDT8t/qyh5XvYDnj8nmRFlfTwhWuh\nyD8e1oqpJOKlivWotPNZJ8hZizTGLrHMZUt2/wDwPaIpKF1O/CP1A6Sm28I4iPXg\ng8Jt0rWU3hjbW0TD02fidf52TTu99hBh7Q1Ts3m3qzQMrsg1Hoi8zWYD45Ei8FoX\nnuZFb/U4ZwP4ePrD8K+n72VrXSYM5DOcGYmkymbuNS7XgysAAccTNFj6r7Q7CfS/\nwlORtt9XeQNq9PByYspEVX6HWUKLRnUWFo+vEXw3UThOnrtlXxwUHR3PfIdx1LQf\njcEkm3UXWDxszqtUOshBb3H5csufNVeTaHG6fQPadOUga7VtXzcgqGhSLZf+oGLg\nzSdOKwT4jLTsVOyaWS4dNJ5os+uZv7v+qekJ7kk3O4VmoRvkP0U8/HJrVsWUHI3o\n/Sz0Z0W5H9aoYCBtD67+wi63Wg9I6XcvUPmb3HR7V264PnmItdRjm5ATGx+ihojb\nFLDZSOrdnHUSnj9w3AyewL7gxQfz7p/SSdoNkP0Ybtv6ggKJM2JclyBkvFDEEhml\ntU6/+F3GIOJErbtDECY+CU1MnvJUr1M56d1SAUonoAKSGqkqsXvCq3VRlHtQiy44\nsjQzQh+gJ/B2zzTjaKvQSdHpGH45FdhDGpSP+48c0aD9nmoIJeXu/GJCPqfM26OC\nWnonLknClB0vxR4TBPnBgtHY023iiZ5fRIMqFknO1kKjUXWsCHk4oCkdAZdezM99\nbNYdMhcILGN50ig0Ti6YOdFD60lownLMKuTajEs+idlPOREZ8fqyQAl4no6urUMx\naJgUEcqkaeyZE+eBiKw3gFEbH8qQQ+hr8Q9WLrcaxfJ+nZHrgsHw28CEcgmA+hh9\nR8Sn1V5K5NBhNke24HAmGxXvt746/qnS+mR3+OeOjaugjZqsy5v06cOJH4sZJ72p\n2xTp2HS21kuU9Fi7IxYJ9AsF2pT5HQmrCDd95xJ8DAbsl/QjdPHzaf0D8611wP/R\nw2pC2kFrkyPwpW83SfmwrSorZ7/6Yjt/O/dWL6mfWLYAw33iUaGqFusChIqIGT+u\nOI0gdrOSNgxy+t1huiP4bxKkS42Kl29cGl15bKU3ej/HleG9XDcjZAS8FygJLJyU\nNKvyfZBA1nGJHKwNt9h6obbbNoEm6fPKfLPcjUQEJnpaiDicID2tUvHDpxM1DSHi\nMw2iyMz1z7uXMUpjlnOCYDadPXDo6TIo9kwSYB+xUMMVerTvv2wDp3VGB2HLu8QI\n1JcWteQHa8+8dvPHYLG6A2Vn724zxA==\n=KxTv\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/33a1f216353e7e56c395987986ea1aa8ccae6caf",
          "sha": "33a1f216353e7e56c395987986ea1aa8ccae6caf",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/33a1f216353e7e56c395987986ea1aa8ccae6caf"
        }
      ],
      "message": "test: extend the SOCKS5 Python proxy to actually connect to a destination\n\nIf requested, make the SOCKS5 Python proxy redirect each connection to a\ngiven destination. Actually act as a real proxy, connecting the\nclient to a destination, except that the destination is not what the\nclient asked for.\n\nThis would enable us to \"connect\" to Tor addresses from the functional\ntests.",
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2024-07-31T13:21:04Z"
      },
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2023-05-19T10:31:22Z"
      },
      "sha": "9753f8e3b8c6d358ad10fb64bc79f2d2e64ec87e"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDQzNThlZGZiZDE3YzQ2NmJlNDM1NzZmZmNiYWRhN2Q1OTg2NWE3Zjc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4358edfbd17c466be43576ffcbada7d59865a7f7",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/4358edfbd17c466be43576ffcbada7d59865a7f7",
      "tree": {
        "sha": "32ec26e93e30603e34d6b3561d02c412ca367557",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/32ec26e93e30603e34d6b3561d02c412ca367557"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 32ec26e93e30603e34d6b3561d02c412ca367557\nparent 9753f8e3b8c6d358ad10fb64bc79f2d2e64ec87e\nauthor Vasil Dimov <vd@FreeBSD.org> 1684910097 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1722432108 +0200\n\ntest: support WTX INVs from P2PDataStore and fix a comment\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmaqOm0ACgkQVN8G9ktV\ny7/axR/8CartzrwqK77BfMc/7MIch2L6lzFjDueI8uVp/CkiwlenUlzD6fxOz8XU\n2X6BX4syXhYgJC7PuBnXl52lGzJuGU4jQ98x721qv0or2wHsKGhCnKF/yjzy2oc3\nizH9i6T5Ei6I2D2TpdYLG9qKg9s1Tjfpa7WdCYVM0TgZBuJS47zRxyAgzH71r+jr\n5C9pcKP0iedq7gn/RQQTFBXAguFctQJw0EfPi4aO/ToxvrsJcSKdS5Tdlsww1oP6\njrm12hooUl2knN1tQ187SVGF8RqG0aQHj66koJ7oZW67ct/alerFAPgufCAXhhNG\nyb+oQ/ZofSXFti/u84hyHYAATT+0TV+UJrFmyg0hPooNTa3cnHx+TcDifNIM4TGk\nY+fov+YSXLMDyCcb68hyh9vqQ4CwLHN4aKtiHNgzhyGsNF7FLZ38BnP2LW4mHbWu\nu1sCwB3rGBBHWvbDDTBIb43dgDBfsGev6ab7aG7vXCSTzj4zPIqsDYkfThZiQk1t\n1FlHEZUT8JhurufG1heF5s0FETLxotfVoHRXGK0iotH/PtsDU7shrUUODpMZFPJ5\npZ02n0wJHmDWoHbDe2cuDlFRTNJmPsthALACHal0eL/pFk8q4cZZOwR/FTXOceFF\nyP8cd9Edhyl8FXCOOasP+5C5PdS4zSGbJVCKPXZ7bsa3SN9JlP7q0yMtc6UXepZz\nuZNeDzoNPS7qpQv50Mrz5XzRoUVNNgsizck01SjfRQfys4Cn/jWSyFH8y+2WvR2C\n1PB270ho/CIrkJsptlYn5IwtUA8bnabG3i9IdXWHCHr9gPDmUO5mckCtLggxOIAu\nxtRCQOp9p4iq4HcOm7QBUyfEhv5cgaafM7xYf8XPbyxw4Vs3ehBJDS81Sc/S9Jsq\nEBCmiVS4HqA2kOl29aOnFhBDYuL+FcZYblghyjaUHWBWdGFMl2ov366Cv9g+P21A\nzkgqumbBoeTSmIOOSvDlr8SR5boaecMRrCKAmYYR+FeW+XRG6dEojkhxgd+EJ9sG\nvd4zBb+ik1bgALw2qk6kBbLUirMlWLLIGdYKo7KaYiQtnLkAWov2YBsJAoBTHmAk\nCkzij8CxlwoJFR7po00WlVrv9SIN4sA5xzw9mS/gEnXWGAlHl6A3hB7lfo/r6kWx\noF1U3dBkCyYwg9SXKW+PrsZiraM58bn7MCzk9Kev7vM2qdAhsOU0mcs2goCCwGmz\nfU9ejctFKRSNmli8SWhtYrZ62FJDPnxzHo6ZWf1TKSx2zPUqOWPYDXQWhUIX2Hvl\nTL9tYiBxyhCYbSA5LX3rW5z2CZqb/v94CiTx1ae6JYqn0eEPljPy8vGv0U1qVE4z\nJXNAovvxnwhLL+SjtyY1Ius59y4nXA==\n=HqAX\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9753f8e3b8c6d358ad10fb64bc79f2d2e64ec87e",
          "sha": "9753f8e3b8c6d358ad10fb64bc79f2d2e64ec87e",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/9753f8e3b8c6d358ad10fb64bc79f2d2e64ec87e"
        }
      ],
      "message": "test: support WTX INVs from P2PDataStore and fix a comment",
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2024-07-31T13:21:48Z"
      },
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2023-05-24T06:34:57Z"
      },
      "sha": "4358edfbd17c466be43576ffcbada7d59865a7f7"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDBjODkxMzRmMTU2YjhhMDlkODQxYTZjYmQ4MGMxNTdkMjQwODg5ZjY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0c89134f156b8a09d841a6cbd80c157d240889f6",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/0c89134f156b8a09d841a6cbd80c157d240889f6",
      "tree": {
        "sha": "8a953fef97429404a3b86a62b98563e728b3759e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8a953fef97429404a3b86a62b98563e728b3759e"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 8a953fef97429404a3b86a62b98563e728b3759e\nparent 4358edfbd17c466be43576ffcbada7d59865a7f7\nauthor Vasil Dimov <vd@FreeBSD.org> 1707142672 +0100\ncommitter Vasil Dimov <vd@FreeBSD.org> 1722432109 +0200\n\ntest: set P2PConnection.p2p_connected_to_node in peer_connect_helper()\n\nSet `P2PConnection.p2p_connected_to_node` in\n`P2PConnection.peer_connect_helper()` instead of\n`TestNode.add_p2p_connection()` and\n`TestNode.add_outbound_p2p_connection()`.\n\nThis way tests can create an instance of `P2PConnection` and use\n`P2PConnection.peer_connect_helper()` directly.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmaqOm0ACgkQVN8G9ktV\ny79ykiAAo/zKm+RagvychSYkxq6wqfkcbM7GpUF5bUhsx2A6mk59yQSDdBls9LZR\nxGC2/9ex+rsm/x4+ugycGi4hdLfV5bUx7jPIztKTSLpp9hIoq5wM5SWlVJ/A7Ol5\nhQ4OzdEkax6ARG0kRMyRng+ytyJH/tCbEDymCK9fmKES3w552JHfrgXjEgjl5UzU\nTq6wGO8DQDVqLp0bu9DKDYC3oL65lktTZh45oViSb8oUGomcp0boqdSx3KDE0TgW\nmYp2mnm17/mppR1M+g2NwZhX871hUy6k/2LJCZxUL3MOjPS9jt2kw1ZGuK5THfeS\nIOMBVB8xcY7v1oq0+a+LVU2X1ofaoufVJtcS3iDlY73r6avDxl4n+wp38hoZ+Exd\nRhh8thfzVcUFXoOnC4mN3jJ30PWMq52gcYAqX1YLOHpNvy7YP13xTGFVAlPAE9t+\n3QsV2Lb3QsRE7jlV5hyFiAo8RGmA0JAwgxCt7aiWFAyT3LGNTsZM2DffpZ07Qx3X\n4QtOqdAhjzpbt5W0DWeC3P3kDpcCugKrCRjYvZGI6GvnS3BTY0t6/dRx+qQF31N2\nb4RqhMODuk9qoHdWpNh1NYpcHz7S3B9dbeNTK86aiOmPTAk2P5TJCFDSf1Wh1Mvl\n+13TxJESfRt6ePoQ6BdcIc9pipc3z7x41I/Jm+tg8AB0gpQ69t2mzBWIXdiD1NOY\nun9A8yAaronsewpRGYeAvBIh0a5xGZBPgoi7GaVFMr5Y+FWMkAR4n0gOSG2zMiyy\nS/T/K656tujJVefgUdIj5uxEcdX+12AS6pxO5Nus5IzYmXW0JvLJki9k9qolpcJJ\nBCR3vK+cPhFh13/0tivhjUVhejfDJhjzgfiot4960d522BTu1oU9Ddaw7hOWEoDh\n0504tohwNr9dztRyoL5ifNd/YMRD2x3PH6zqvQfLEFwVJHFiZ8pcTeAI1qO7xUOk\n3IyCImdnvi8CgmbaJEoL2f3aEZmNJSaYIPjGHFnLAmMEaUkY5IQhH1ZEcy5wmlz9\naMGB16fk24BCon+CvjAdjBieS8lGazSFXB+Iq7XWnZizSffCMV7LDC78DhE54HIl\n61Pk9mBjC7XcIDt4jYSCEpquzfYDrwsjFhMTbaa1EOSHuOGfwdGy1v+wU3C5Oy39\n0e0Sk9MW8iU2thYgU/TLxQOUO9oKm6N1XO6U9Ebw88wZZVCv+9DCxwhOLjchiSI7\nSKwEd7zwHz29W4ojaP4fFz7uDVvOYupByl3Y/rb2fTTiWUYFcSnNJCQPtHnHv9DB\nnu85udSAISXtGLejnUrMSnQdrSOjZeNLMDvuV9ezHMtmfzSwtBrSN4rgGQ163+Cs\n2FjM28aYcx+Jsbu+2x9CpSSj3WZRSA==\n=sTqP\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4358edfbd17c466be43576ffcbada7d59865a7f7",
          "sha": "4358edfbd17c466be43576ffcbada7d59865a7f7",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/4358edfbd17c466be43576ffcbada7d59865a7f7"
        }
      ],
      "message": "test: set P2PConnection.p2p_connected_to_node in peer_connect_helper()\n\nSet `P2PConnection.p2p_connected_to_node` in\n`P2PConnection.peer_connect_helper()` instead of\n`TestNode.add_p2p_connection()` and\n`TestNode.add_outbound_p2p_connection()`.\n\nThis way tests can create an instance of `P2PConnection` and use\n`P2PConnection.peer_connect_helper()` directly.",
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2024-07-31T13:21:49Z"
      },
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2024-02-05T14:17:52Z"
      },
      "sha": "0c89134f156b8a09d841a6cbd80c157d240889f6"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGZiYjE5OGFhNGQzM2E4NjJlOGVjODAxZmIzODFiZmVhMzRkOTIzNmU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fbb198aa4d33a862e8ec801fb381bfea34d9236e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/fbb198aa4d33a862e8ec801fb381bfea34d9236e",
      "tree": {
        "sha": "955fdca2cb7caf2b6bb5f21ad6a52188a2b9c903",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/955fdca2cb7caf2b6bb5f21ad6a52188a2b9c903"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 955fdca2cb7caf2b6bb5f21ad6a52188a2b9c903\nparent 0c89134f156b8a09d841a6cbd80c157d240889f6\nauthor Vasil Dimov <vd@FreeBSD.org> 1722432152 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1722432152 +0200\n\ntest: move create_malleated_version() to messages.py for reuse\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmaqOsAACgkQVN8G9ktV\ny7+zfh/+IaZ2AyLGpujHscTQ6QOkhZLRuzUk6Ohhp2+KKE/vYknqRvrrIyvreDa5\nh61dx6OU6J1svh+LxIaCRlHzkyLe1/H1cVh4kibVH4a0CJZEZ1f4E6XDTvz1lr1+\nRFvQhSJNvclw7SNXShXyIzwdurAUvoFYaYxlJ61h7WooFdltPrhQZRTMRkYo51Yl\ne/klWfGAiWIXFJsFD2N8mLRIySpcApD3VaOUN2YQOUzr7xxZ4/psPquq9CPxHRYE\nnTk68biW2GE7KNQbhz/zYxrjQpuutmyGvxxg60enaump24gmB+BotsfHzc5ESMRU\nPmbycDPJZWB5e2owdWaXart3DRQB7N8azRvpchZ9fxYrsXPETtQv5urnRjug9Zme\nNJf4QaDJYmG6d2FgvM0S5ejITLYsdKE4t6AdoP3baoXrvoy0h4CXqFHM7bUzQ7Zz\nZNppvZvpPsPRQOZCw2onZMVRfQz7/21YZdqJgmuBypUGJtNTAJW8LDCiUfjnZYeM\nCG3HdTr18gPO+SdTkHq7RlWNdHmuIddeO9xR+Piaqnfq03Spr8K6YPhZ9wurU+Lc\naTHaiUvpQ2dAd6g9OD5ROvpn/iCJPBHWPow9ySvJhbGJZDlExTTsslUSepNB4r/1\n3UtsCnlbH0efGED7G+NRdwqhJee6KgIYGdPfEr7rEa/xCnfFeW119kVNmepkxvoV\nslC/MXXHH5U4xvIvjIMEiWpJNzyrOboinmJ5jhgjC8j2bo546EycgglQTIVp5kUY\n0xbGkCd1P8L1UwaKl5qe8xcwxHj/WOQ+JiE2fWL0HdNweCNwr7q1pQq8qgTAhQap\n96UZCaV869p6BC8AmP5hqCwOQP0ADwBGJ9jUlPX1rUttZovRsHwUbHIVQ266QqES\n2HPbI07qDpeK3YkKXVqf8srnlNiNgBpHZnH2xb7XqVFPNBmFzjqe2X4hftGujCGw\nkaKmukO7SQ1LFrk2skWhMDvtMXiLzqe+MgNSjE1GcGYSTnERWhTFWbAhZhrKSKqx\nsgw6zHBALL2CsoU3t8NpQWs6SpygrAf8zfPnvSW6GMB82VJIETvOoXOqDtHciXr1\nMQwfHzTT8bxqytgc9D1T6NFHd2IsJdBEd+TyX/kmKTwAczEwb4tx0mzx5AoA/N44\nAThWpfrSb15HIcB0D2iWQvTitP59TPDrbx0lY5F1m8Ib4I6FBxN9FG1dLKCdni0T\nefTVn6FxRxdWDb6ADc64acJG1zubasmUD77quKL+Qu8ycDABltqRc1BOsC6iBdID\nbtr1jlDgNvwxOllSHdPj0SEfLMORpLjzax6pjW+iVFrmmq/8wKT2xy4eyhj3Gefo\nbb27l4MSq6FnIxNixwEmo/5KsvMLqg==\n=pNf2\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0c89134f156b8a09d841a6cbd80c157d240889f6",
          "sha": "0c89134f156b8a09d841a6cbd80c157d240889f6",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/0c89134f156b8a09d841a6cbd80c157d240889f6"
        }
      ],
      "message": "test: move create_malleated_version() to messages.py for reuse",
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2024-07-31T13:22:32Z"
      },
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2024-07-31T13:22:32Z"
      },
      "sha": "fbb198aa4d33a862e8ec801fb381bfea34d9236e"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDhiYWYxOWZiMmFmNWY4YzA3NDJiYTVlZjUwMDdmM2U0YTYzMmJlMDg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "tree": {
        "sha": "1e991dfdeba2869b20dbfb3c056696f157d70fdf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1e991dfdeba2869b20dbfb3c056696f157d70fdf"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 1e991dfdeba2869b20dbfb3c056696f157d70fdf\nparent fbb198aa4d33a862e8ec801fb381bfea34d9236e\nauthor Vasil Dimov <vd@FreeBSD.org> 1684336789 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1722432196 +0200\n\ntest: add functional test for private broadcast\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmaqOsQACgkQVN8G9ktV\ny78ejCAAiCjJQB931VrVgFHyqnQky2FEP88apTbE5i9q9m/N/VjxA5kyePJgwtS5\nY2CLQNjDJJEzmYAcE3U61DO15V/ynskPm4gYka2i7tJyGezkxc5a8YOLOZfYeUaL\nyOsgP4DboFj0vLi5bxDTQaJkJhJ5/xHE7txsPnPkSwP8cCcZI/cyXodMeEjRjdLv\niTQgupWS9nVfESs+PhWn17r4QFhxy2l88d/SiZv0r/CV7GzQgR0X06YZZw/zMwb3\nRX2SOWFkO763bov4JS0CaCMLiauTmKVkvQUU35FsmrMDquorE8loEzlEQXRifY6p\nox5n3egcE0mpwIn63L5NK08aX0yM4HkjBMU8o6cjL/mM5GTAgIMvKvWHQXN1AB3r\npmJNDWwPAkseA7mQrXhsKd8YDJer0FSq3wgbSv/NCLUmHYT8kG6PnSH9tvMVVpWW\nXfGIPLzpz7yRF9J9ovHd716ZMm5CtoBdpL0/RZZC/OZkbX5J0LyVi2zbWuA5vATv\n26xeFTTqa3kz1rFbQs466aDl8bBJiufX3X4y3cu0RmhJrOJo32AEs7U4pWJnW0G4\nGwssh7+R1B+1xHRwx66iukakwfIh0XAelZdf+G5NEsA6Y/VvVxdHgfJaLWOTP5Bm\nGHgnYawYZUciZazD7kH2wJSLXdqv3cH406vYM8EvHE1F6o0ItB2d58YlcU5VylSD\n6vTbz5kiIyI8cTM1BFgtr2Vbpk456/l38axKNVjf6PezYfx7Gs6bumkNtfL6OjkN\nSAfaLJIW9UzJ7+07MaZP30Y6iX3mGyJ6D1oKjEk6kqWhtmsrof8ZsJ1C6cS5Z+pH\nZKiOegrfxHr1z1UJXToFwCcN3Yxe8ahjgqlsWPOSsM5ySZ1evgOYDbExW++TsLQZ\n3n2dgQi9lcbT6xmAgaL1r8ylZL9E2xxMU6tCjIK1dfIjmSgb41j2M+o/s/sM5ziv\nV0leyr1R2ev6Ip4ONxSXAj5kQKa+F7AIl0r6HRBBUcr46wwAivpTyGPsG59XK1CY\nhCRLeawNeCq+N57kKvMwfRnR3qxXq1csZnFsNDCKBy3+sd2Qh5+2cyw87yvEqS3p\n9tpkoEOyNDFZVo7rJdcXBw5hFSvmsbvTouC37kwrdLV1tLvY1C5svuE3oSIYre5W\niMIAsNRmWslDqa+uylXapV3AqhWe205bXwwC21DNtLrUTwpcI3NXWCrI+SEHVSer\ni+CXuv8tBLRAzdlWecrhtiFXCT4z42cvBsCDAz8QT6/1w9PzQm4fVSDrwoDGbrf2\n6ax8RTHdW2R5J83sjKG4HJdaqwI5GyV/WV+vIZHHwfIi+zSviCIKZVcxYgOKT9kl\nEE6Vl7d6kMK4DHejsNB9ZkPecYqqsA==\n=Go2x\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fbb198aa4d33a862e8ec801fb381bfea34d9236e",
          "sha": "fbb198aa4d33a862e8ec801fb381bfea34d9236e",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/fbb198aa4d33a862e8ec801fb381bfea34d9236e"
        }
      ],
      "message": "test: add functional test for private broadcast",
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2024-07-31T13:23:16Z"
      },
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2023-05-17T15:19:49Z"
      },
      "sha": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13710036067,
      "node_id": "HRFPE_lADOABII585-yiT2zwAAAAMxLoxj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13710036067",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-31T13:25:25Z"
    },
    {
      "event": "commented",
      "id": 2260523021,
      "node_id": "IC_kwDOABII586GvNgN",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2260523021",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-31T13:25:48Z",
      "updated_at": "2024-07-31T13:25:48Z",
      "author_association": "CONTRIBUTOR",
      "body": "`3bd618a91f...8baf19fb2a`:\r\n\r\n* Rebase due to conflicts.\r\n\r\n* Tune the logic of the decision to open a private broadcast connection - we yield to other connection types every other attempt, but it might happen that when we yield the loop blocks on the `semOutbound` grant. This means that we are not ready to open other connection types. In this case and if private broadcast is needed, proceed with private broadcast even if the previous connection was private broadcast as well. This simplifies `ShouldOpen()` as the logic \"previous was private broadcast\" is moved to the caller.\r\n\r\n* Rename `tor_proxy` to `proxy_for_ipv4or6` and actually set it, it's used only for logging.\r\n\r\n* Run transactions to be broadcast through mempool acceptance test, they were not before.\r\n\r\n* If the same transaction is repeatedly given to `sendrawtransaction` RPC, then don't open 5 new private broadcast connections every time. Change subsequent requests to do nothing but log a message that it was not necessary to `sendrawtransaction` the transaction again.\r\n\r\n* Change the extension of the SOCKS5 proxy - instead of being given a set of predefined destinations to redirect the connections to, it is now given a callback function which returns the destination where to redirect, or it can decide to return `None` asking the SOCKS5 proxy to close the connection (default behavior). This is more flexible.\r\n\r\n* Move `create_malleated_version()` from `p2p_orphan_handling.py` to `test_framework/messages.py` where it can be reused.\r\n\r\n* Extend the functional tests as per https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1663040526, thanks @instagibbs for the suggestions!\r\n",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#issuecomment-2260523021",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29415"
    },
    {
      "event": "mentioned",
      "id": 13710042030,
      "node_id": "MEE_lADOABII585-yiT2zwAAAAMxLqOu",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13710042030",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-31T13:25:49Z"
    },
    {
      "event": "subscribed",
      "id": 13710042052,
      "node_id": "SE_lADOABII585-yiT2zwAAAAMxLqPE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13710042052",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-31T13:25:49Z"
    },
    {
      "event": "unlabeled",
      "id": 13711443663,
      "node_id": "UNLE_lADOABII585-yiT2zwAAAAMxRAbP",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13711443663",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-31T14:57:27Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1485310634",
      "pull_request_review_id": 1874263137,
      "id": 1485310634,
      "node_id": "PRRC_kwDOABII585YiAqq",
      "diff_hunk": "@@ -142,49 +141,58 @@ bool BCLog::Logger::DefaultShrinkDebugFile() const\n     return m_categories == BCLog::NONE;\n }\n \n-struct CLogCategoryDesc {\n-    BCLog::LogFlags flag;\n-    std::string category;\n-};\n-\n-const CLogCategoryDesc LogCategories[] =\n-{\n-    {BCLog::NONE, \"0\"},\n-    {BCLog::NONE, \"\"},\n-    {BCLog::NET, \"net\"},\n-    {BCLog::TOR, \"tor\"},\n-    {BCLog::MEMPOOL, \"mempool\"},\n-    {BCLog::HTTP, \"http\"},\n-    {BCLog::BENCH, \"bench\"},\n-    {BCLog::ZMQ, \"zmq\"},\n-    {BCLog::WALLETDB, \"walletdb\"},\n-    {BCLog::RPC, \"rpc\"},\n-    {BCLog::ESTIMATEFEE, \"estimatefee\"},\n-    {BCLog::ADDRMAN, \"addrman\"},\n-    {BCLog::SELECTCOINS, \"selectcoins\"},\n-    {BCLog::REINDEX, \"reindex\"},\n-    {BCLog::CMPCTBLOCK, \"cmpctblock\"},\n-    {BCLog::RAND, \"rand\"},\n-    {BCLog::PRUNE, \"prune\"},\n-    {BCLog::PROXY, \"proxy\"},\n-    {BCLog::MEMPOOLREJ, \"mempoolrej\"},\n-    {BCLog::LIBEVENT, \"libevent\"},\n-    {BCLog::COINDB, \"coindb\"},\n-    {BCLog::QT, \"qt\"},\n-    {BCLog::LEVELDB, \"leveldb\"},\n-    {BCLog::VALIDATION, \"validation\"},\n-    {BCLog::I2P, \"i2p\"},\n-    {BCLog::IPC, \"ipc\"},\n+static const std::map<std::string, BCLog::LogFlags> LOG_CATEGORIES_BY_STR{\n+    {\"0\", BCLog::NONE},\n+    {\"\", BCLog::NONE},\n+    {\"net\", BCLog::NET},\n+    {\"tor\", BCLog::TOR},\n+    {\"mempool\", BCLog::MEMPOOL},\n+    {\"http\", BCLog::HTTP},\n+    {\"bench\", BCLog::BENCH},\n+    {\"zmq\", BCLog::ZMQ},\n+    {\"walletdb\", BCLog::WALLETDB},\n+    {\"rpc\", BCLog::RPC},\n+    {\"estimatefee\", BCLog::ESTIMATEFEE},\n+    {\"addrman\", BCLog::ADDRMAN},\n+    {\"selectcoins\", BCLog::SELECTCOINS},\n+    {\"reindex\", BCLog::REINDEX},\n+    {\"cmpctblock\", BCLog::CMPCTBLOCK},\n+    {\"rand\", BCLog::RAND},\n+    {\"prune\", BCLog::PRUNE},\n+    {\"proxy\", BCLog::PROXY},\n+    {\"mempoolrej\", BCLog::MEMPOOLREJ},\n+    {\"libevent\", BCLog::LIBEVENT},\n+    {\"coindb\", BCLog::COINDB},\n+    {\"qt\", BCLog::QT},\n+    {\"leveldb\", BCLog::LEVELDB},\n+    {\"validation\", BCLog::VALIDATION},\n+    {\"i2p\", BCLog::I2P},\n+    {\"ipc\", BCLog::IPC},\n #ifdef DEBUG_LOCKCONTENTION\n-    {BCLog::LOCK, \"lock\"},\n+    {\"lock\", BCLog::LOCK},\n #endif\n-    {BCLog::UTIL, \"util\"},\n-    {BCLog::BLOCKSTORAGE, \"blockstorage\"},\n-    {BCLog::TXRECONCILIATION, \"txreconciliation\"},\n-    {BCLog::SCAN, \"scan\"},\n-    {BCLog::TXPACKAGES, \"txpackages\"},\n-    {BCLog::ALL, \"1\"},\n-    {BCLog::ALL, \"all\"},\n+    {\"util\", BCLog::UTIL},",
      "path": "src/logging.cpp",
      "position": null,
      "original_position": 86,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "2b05af27608f9e4e9a1b5f5c83c7870a8e6c9425",
      "in_reply_to_id": null,
      "user": {
        "login": "davidgumberg",
        "id": 2257631,
        "node_id": "MDQ6VXNlcjIyNTc2MzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2257631?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/davidgumberg",
        "html_url": "https://github.com/davidgumberg",
        "followers_url": "https://api.github.com/users/davidgumberg/followers",
        "following_url": "https://api.github.com/users/davidgumberg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/davidgumberg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/davidgumberg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/davidgumberg/subscriptions",
        "organizations_url": "https://api.github.com/users/davidgumberg/orgs",
        "repos_url": "https://api.github.com/users/davidgumberg/repos",
        "events_url": "https://api.github.com/users/davidgumberg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/davidgumberg/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "While touching this, maybe `BCLog::UTIL` which is not used since https://github.com/bitcoin/bitcoin/pull/27896 should be dropped?",
      "created_at": "2024-02-10T21:48:08Z",
      "updated_at": "2024-02-10T21:50:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1485310634",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1485310634"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 174,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1485605463",
      "pull_request_review_id": 1874379420,
      "id": 1485605463,
      "node_id": "PRRC_kwDOABII585YjIpX",
      "diff_hunk": "@@ -142,49 +141,58 @@ bool BCLog::Logger::DefaultShrinkDebugFile() const\n     return m_categories == BCLog::NONE;\n }\n \n-struct CLogCategoryDesc {\n-    BCLog::LogFlags flag;\n-    std::string category;\n-};\n-\n-const CLogCategoryDesc LogCategories[] =\n-{\n-    {BCLog::NONE, \"0\"},\n-    {BCLog::NONE, \"\"},\n-    {BCLog::NET, \"net\"},\n-    {BCLog::TOR, \"tor\"},\n-    {BCLog::MEMPOOL, \"mempool\"},\n-    {BCLog::HTTP, \"http\"},\n-    {BCLog::BENCH, \"bench\"},\n-    {BCLog::ZMQ, \"zmq\"},\n-    {BCLog::WALLETDB, \"walletdb\"},\n-    {BCLog::RPC, \"rpc\"},\n-    {BCLog::ESTIMATEFEE, \"estimatefee\"},\n-    {BCLog::ADDRMAN, \"addrman\"},\n-    {BCLog::SELECTCOINS, \"selectcoins\"},\n-    {BCLog::REINDEX, \"reindex\"},\n-    {BCLog::CMPCTBLOCK, \"cmpctblock\"},\n-    {BCLog::RAND, \"rand\"},\n-    {BCLog::PRUNE, \"prune\"},\n-    {BCLog::PROXY, \"proxy\"},\n-    {BCLog::MEMPOOLREJ, \"mempoolrej\"},\n-    {BCLog::LIBEVENT, \"libevent\"},\n-    {BCLog::COINDB, \"coindb\"},\n-    {BCLog::QT, \"qt\"},\n-    {BCLog::LEVELDB, \"leveldb\"},\n-    {BCLog::VALIDATION, \"validation\"},\n-    {BCLog::I2P, \"i2p\"},\n-    {BCLog::IPC, \"ipc\"},\n+static const std::map<std::string, BCLog::LogFlags> LOG_CATEGORIES_BY_STR{\n+    {\"0\", BCLog::NONE},\n+    {\"\", BCLog::NONE},\n+    {\"net\", BCLog::NET},\n+    {\"tor\", BCLog::TOR},\n+    {\"mempool\", BCLog::MEMPOOL},\n+    {\"http\", BCLog::HTTP},\n+    {\"bench\", BCLog::BENCH},\n+    {\"zmq\", BCLog::ZMQ},\n+    {\"walletdb\", BCLog::WALLETDB},\n+    {\"rpc\", BCLog::RPC},\n+    {\"estimatefee\", BCLog::ESTIMATEFEE},\n+    {\"addrman\", BCLog::ADDRMAN},\n+    {\"selectcoins\", BCLog::SELECTCOINS},\n+    {\"reindex\", BCLog::REINDEX},\n+    {\"cmpctblock\", BCLog::CMPCTBLOCK},\n+    {\"rand\", BCLog::RAND},\n+    {\"prune\", BCLog::PRUNE},\n+    {\"proxy\", BCLog::PROXY},\n+    {\"mempoolrej\", BCLog::MEMPOOLREJ},\n+    {\"libevent\", BCLog::LIBEVENT},\n+    {\"coindb\", BCLog::COINDB},\n+    {\"qt\", BCLog::QT},\n+    {\"leveldb\", BCLog::LEVELDB},\n+    {\"validation\", BCLog::VALIDATION},\n+    {\"i2p\", BCLog::I2P},\n+    {\"ipc\", BCLog::IPC},\n #ifdef DEBUG_LOCKCONTENTION\n-    {BCLog::LOCK, \"lock\"},\n+    {\"lock\", BCLog::LOCK},\n #endif\n-    {BCLog::UTIL, \"util\"},\n-    {BCLog::BLOCKSTORAGE, \"blockstorage\"},\n-    {BCLog::TXRECONCILIATION, \"txreconciliation\"},\n-    {BCLog::SCAN, \"scan\"},\n-    {BCLog::TXPACKAGES, \"txpackages\"},\n-    {BCLog::ALL, \"1\"},\n-    {BCLog::ALL, \"all\"},\n+    {\"util\", BCLog::UTIL},",
      "path": "src/logging.cpp",
      "position": null,
      "original_position": 86,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "2b05af27608f9e4e9a1b5f5c83c7870a8e6c9425",
      "in_reply_to_id": 1485310634,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done in https://github.com/bitcoin/bitcoin/pull/29419, thanks for the suggestion!",
      "created_at": "2024-02-11T14:28:49Z",
      "updated_at": "2024-02-11T14:28:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1485605463",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1485605463"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 174,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1517972760",
      "pull_request_review_id": 1925311361,
      "id": 1517972760,
      "node_id": "PRRC_kwDOABII585aem0Y",
      "diff_hunk": "@@ -70,6 +70,7 @@ namespace BCLog {\n         TXRECONCILIATION = (1 << 27),\n         SCAN        = (1 << 28),\n         TXPACKAGES  = (1 << 29),\n+        PRIVATE_BROADCAST = (1 << 30),",
      "path": "src/logging.h",
      "position": null,
      "original_position": 4,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "e672e55ddb49378bd5c8e4f03fadae5774310c70",
      "in_reply_to_id": null,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "e672e55ddb49378bd5c8e4f03fadae5774310c70 does this mean there is only one bit left in `LogFlags : uint32_t` ?!",
      "created_at": "2024-03-08T16:42:11Z",
      "updated_at": "2024-03-08T20:59:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1517972760",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1517972760"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 73,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1517981961",
      "pull_request_review_id": 1925311361,
      "id": 1517981961,
      "node_id": "PRRC_kwDOABII585aepEJ",
      "diff_hunk": "@@ -1900,6 +1911,23 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n \n     connOptions.m_i2p_accept_incoming = args.GetBoolArg(\"-i2pacceptincoming\", DEFAULT_I2P_ACCEPT_INCOMING);\n \n+    if (args.GetBoolArg(\"-privatebroadcast\", DEFAULT_PRIVATE_BROADCAST)) {\n+        // If -listenonion is set, then NET_ONION may not be reachable now\n+        // but may become reachable later, thus only error here if it is not\n+        // reachable and will not become reachable for sure.\n+        if (!g_reachable_nets.Contains(NET_I2P) && !g_reachable_nets.Contains(NET_ONION) &&\n+            (!listenonion || args.IsArgSet(\"-onlynet\"))) {",
      "path": "src/init.cpp",
      "position": null,
      "original_position": 52,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "72f0dbc99e6eed26bef21965dabc5f0bebf01b33",
      "in_reply_to_id": null,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "72f0dbc99e6eed26bef21965dabc5f0bebf01b33 if user sets `-onlynet=onion` do we require (by the time we get to this line) that NET_ONION is reachable? Or couldn't it come up later, similar to the `-listenonion` configuration?",
      "created_at": "2024-03-08T16:50:30Z",
      "updated_at": "2024-03-08T20:59:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1517981961",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1517981961"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1961,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1518063388",
      "pull_request_review_id": 1925311361,
      "id": 1518063388,
      "node_id": "PRRC_kwDOABII585ae88c",
      "diff_hunk": "@@ -452,6 +452,7 @@ class NetinfoRequestHandler : public BaseRequestHandler\n         if (conn_type == \"block-relay-only\") return \"block\";\n         if (conn_type == \"manual\" || conn_type == \"feeler\") return conn_type;\n         if (conn_type == \"addr-fetch\") return \"addr\";\n+        if (conn_type == \"private-broadcast\") return \"privbcast\";",
      "path": "src/bitcoin-cli.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "7a0f492104c1621b7089a64fa330c72b06d30574",
      "in_reply_to_id": null,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "7a0f492104c1621b7089a64fa330c72b06d30574 `\"privbcast\"` needs to be <= 6 characters to fit nicely in the table layout, or you could extend the column width:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/1cd2e29870e4ad3b7c57b1d567df0e6df56572b0/src/bitcoin-cli.cpp#L549-L552",
      "created_at": "2024-03-08T17:51:51Z",
      "updated_at": "2024-03-08T20:59:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1518063388",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1518063388"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 455,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1518080397",
      "pull_request_review_id": 1925311361,
      "id": 1518080397,
      "node_id": "PRRC_kwDOABII585afBGN",
      "diff_hunk": "@@ -75,6 +75,13 @@ enum class ConnectionType {\n      * AddrMan is empty.\n      */\n     ADDR_FETCH,\n+\n+    /**\n+     * Private broadcast connections are short-lived and only opened to\n+     * privacy networks (Tor, I2P) for relaying privacy-sensitive data (like\n+     * our own transactions) and closed afterwards.\n+     */\n+    PRIVATE_BROADCAST,",
      "path": "src/node/connection_types.h",
      "position": 10,
      "original_position": 10,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "7a0f492104c1621b7089a64fa330c72b06d30574",
      "in_reply_to_id": null,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "7a0f492104c1621b7089a64fa330c72b06d30574 I noticed this wasn't added to the fuzzer, dunno if it needs to be:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/1cd2e29870e4ad3b7c57b1d567df0e6df56572b0/src/test/util/net.h#L112-L119",
      "created_at": "2024-03-08T18:06:46Z",
      "updated_at": "2024-03-08T20:59:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1518080397",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1518080397"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 84,
      "original_line": 84,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1518132032",
      "pull_request_review_id": 1925311361,
      "id": 1518132032,
      "node_id": "PRRC_kwDOABII585afNtA",
      "diff_hunk": "@@ -456,7 +456,7 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n         if (addrConnect.IsI2P() && use_proxy) {\n             i2p::Connection conn;\n \n-            if (m_i2p_sam_session) {\n+            if (m_i2p_sam_session && conn_type != ConnectionType::PRIVATE_BROADCAST) {",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "4e19f9cc9834c0b76a2d03fea0921879de46fea9",
      "in_reply_to_id": null,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "4e19f9cc9834c0b76a2d03fea0921879de46fea9 Just to clarify: if a i2p sam session already exists, normally we would re-use it. But in the case of private broadcast we force a new transient session? Comment might be nice here.",
      "created_at": "2024-03-08T18:38:29Z",
      "updated_at": "2024-03-08T20:59:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1518132032",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1518132032"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 494,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1518175963",
      "pull_request_review_id": 1925311361,
      "id": 1518175963,
      "node_id": "PRRC_kwDOABII585afYbb",
      "diff_hunk": "@@ -2413,6 +2413,63 @@ bool CConnman::MaybePickPreferredNetwork(std::optional<Network>& network)\n     return false;\n }\n \n+/**\n+ * Decide whether to open a private broadcast connection and if yes, to which network.\n+ * @param[in,out] net If the previous attempt to open a connection was an attempt to\n+ * open a private broadcast connection (successful or not), then this should have a\n+ * value. When the function ends if this has value then it will contain the network\n+ * to which to open the connection.\n+ * @param[in] num_needed Number of private broadcast connections that need to be opened.\n+ * @param[in] num_opened Number of private broadcast connections that are currently opened.\n+ */\n+static void MaybePickPrivateBroadcastNetwork(std::optional<Network>& net, size_t num_needed, size_t num_opened)\n+{\n+    if (net.has_value()) {\n+        // Yield to other connection types.\n+        net = std::nullopt;\n+        return;\n+    }\n+\n+    if (num_needed == 0) {\n+        net = std::nullopt;\n+        return;\n+    }\n+\n+    if (num_opened >= MAX_PRIVATE_BROADCAST_CONNECTIONS) {\n+        LogPrintLevel(BCLog::PRIVATE_BROADCAST,\n+                      BCLog::Level::Debug,\n+                      \"Requested to open %d connection(s), but there are already %d \"\n+                      \"connections opened. Will wait for some of them to be closed \"\n+                      \"before opening a new one\\n\",\n+                      num_needed,\n+                      num_opened);\n+        net = std::nullopt;\n+        return;\n+    }\n+\n+    const bool tor_reachable{g_reachable_nets.Contains(NET_ONION)};\n+    const bool i2p_reachable{g_reachable_nets.Contains(NET_I2P)};\n+    if (tor_reachable && i2p_reachable) {\n+        net = FastRandomContext{}.randbool() ? NET_ONION : NET_I2P;\n+    } else if (tor_reachable) {\n+        net = NET_ONION;\n+    } else if (i2p_reachable) {\n+        net = NET_I2P;\n+    } else {\n+        LogPrintLevel(BCLog::PRIVATE_BROADCAST,\n+                      BCLog::Level::Warning,\n+                      \"Requested to open %d connection(s) but none of the Tor or I2P networks is reachable.\\n\",\n+                      num_needed);\n+        net = std::nullopt;\n+        return;\n+    }\n+\n+    LogPrintLevel(BCLog::PRIVATE_BROADCAST,\n+                  BCLog::Level::Debug,\n+                  \"Requested to open %d connection(s), trying to open one\\n\",\n+                  num_needed);",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 67,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "4e19f9cc9834c0b76a2d03fea0921879de46fea9",
      "in_reply_to_id": null,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "4e19f9cc9834c0b76a2d03fea0921879de46fea9 Feels like this log message is not in the right place since this function does not try to open a connection.",
      "created_at": "2024-03-08T19:01:46Z",
      "updated_at": "2024-03-08T20:59:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1518175963",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1518175963"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": 2467,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 2465,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1518178949",
      "pull_request_review_id": 1925311361,
      "id": 1518178949,
      "node_id": "PRRC_kwDOABII585afZKF",
      "diff_hunk": "@@ -2886,6 +2964,16 @@ void CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFai\n         return;\n     pnode->grantOutbound = std::move(grant_outbound);\n \n+    if (conn_type == ConnectionType::PRIVATE_BROADCAST) {\n+        const size_t before_sub{m_private_broadcast_connections_to_open.fetch_sub(1)};",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 170,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "4e19f9cc9834c0b76a2d03fea0921879de46fea9",
      "in_reply_to_id": null,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "4e19f9cc9834c0b76a2d03fea0921879de46fea9 does this need underflow protection? Just like an `Assume()` even?",
      "created_at": "2024-03-08T19:04:52Z",
      "updated_at": "2024-03-08T20:59:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1518178949",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1518178949"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3054,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1518194970",
      "pull_request_review_id": 1925311361,
      "id": 1518194970,
      "node_id": "PRRC_kwDOABII585afdEa",
      "diff_hunk": "@@ -2051,7 +2065,7 @@ NodeClock::time_point CWallet::GetDefaultNextResend() { return FastRandomContext\n // that depends on the `relay` option. Periodic rebroadcast uses the pattern\n // relay=true force=false, while loading into the mempool\n // (on start, or after import) uses relay=false force=true.\n-void CWallet::ResubmitWalletTransactions(bool relay, bool force)\n+void CWallet::ResubmitWalletTransactions(TxBroadcastMethod broadcast_method, bool force)",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 46,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "532e63279a3c04fef8da2c1bb95e5280c94abc4e",
      "in_reply_to_id": null,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "532e63279a3c04fef8da2c1bb95e5280c94abc4e consider rephrasing the comment on the previous line since `relay=true` isn't a thing any more?",
      "created_at": "2024-03-08T19:22:32Z",
      "updated_at": "2024-03-08T20:59:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1518194970",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1518194970"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2069,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1518225842",
      "pull_request_review_id": 1925311361,
      "id": 1518225842,
      "node_id": "PRRC_kwDOABII585afkmy",
      "diff_hunk": "@@ -1083,6 +1087,62 @@ class PeerManagerImpl final : public PeerManager\n \n     void AddAddressKnown(Peer& peer, const CAddress& addr) EXCLUSIVE_LOCKS_REQUIRED(g_msgproc_mutex);\n     void PushAddress(Peer& peer, const CAddress& addr) EXCLUSIVE_LOCKS_REQUIRED(g_msgproc_mutex);\n+\n+    /**\n+     * Store a list of transactions to be broadcast privately. Supports the following operations:\n+     * - Add a new transaction\n+     * - Remove a transaction, after it has been seen by the network\n+     * - Mark a broadcast of a transaction (remember when and how many times)\n+     * - Get a transaction for broadcast, the one that has been broadcast less times and least recently\n+     */\n+    class PrivateBroadcast\n+    {\n+    public:\n+        void Add(const CTransactionRef& tx) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+        {\n+            const Txid& txid = tx->GetHash();\n+            LOCK(m_mutex);\n+            auto [pos, inserted] = m_by_txid.emplace(txid, TxWithPriority{.tx = tx, .priority = Priority{}});\n+            if (inserted) {\n+                m_by_priority.emplace(Priority{}, txid);\n+            }\n+        }\n+\n+    private:\n+        struct Priority {\n+            size_t num_broadcasted{0};\n+            std::chrono::microseconds last_broadcasted{0};\n+\n+            bool operator<(const Priority& other) const\n+            {\n+                if (num_broadcasted < other.num_broadcasted) {\n+                    return true;\n+                }\n+                return last_broadcasted < other.last_broadcasted;\n+            }\n+        };\n+\n+        struct TxWithPriority {\n+            CTransactionRef tx;\n+            Priority priority;\n+        };\n+\n+        struct TxidHasher {\n+            size_t operator()(const Txid& txid) const { return SipHashUint256(0, 0, txid.ToUint256()); }",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 63,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "eb9d7386ca82319ab682fc20ab35c13340d108a4",
      "in_reply_to_id": null,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "eb9d7386ca82319ab682fc20ab35c13340d108a4 Hashing a hash? Does this just make the `std::unordered_map` lookups faster because the keys are smaller (looks like 64 bits?)",
      "created_at": "2024-03-08T19:47:41Z",
      "updated_at": "2024-03-08T20:59:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1518225842",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1518225842"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1236,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1518256562",
      "pull_request_review_id": 1925311361,
      "id": 1518256562,
      "node_id": "PRRC_kwDOABII585afsGy",
      "diff_hunk": "@@ -1108,6 +1116,71 @@ class PeerManagerImpl final : public PeerManager\n             }\n         }\n \n+        /**\n+         * Get the transaction that has been broadcast less times and least recently.\n+         */\n+        std::optional<CTransactionRef> GetTxForBroadcast() const EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+        {\n+            LOCK(m_mutex);\n+            if (m_by_priority.empty()) {\n+                return std::nullopt;\n+            }\n+            const Txid& txid = m_by_priority.begin()->second;\n+            auto it = m_by_txid.find(txid);\n+            if (it == m_by_txid.end()) {\n+                return std::nullopt;",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 42,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "07dee91112189be02c6694385de261570725b56b",
      "in_reply_to_id": null,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "07dee91112189be02c6694385de261570725b56b this would be unexpected if we had the txid in the priority list but not in the actual txid list, right? Maybe we should at least remove the txid from the priority list if this ever happens, or log something, or like, call the police or something?",
      "created_at": "2024-03-08T20:23:23Z",
      "updated_at": "2024-03-08T20:59:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1518256562",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1518256562"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1150,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1518263617",
      "pull_request_review_id": 1925311361,
      "id": 1518263617,
      "node_id": "PRRC_kwDOABII585aft1B",
      "diff_hunk": "@@ -1566,26 +1665,53 @@ void PeerManagerImpl::FindNextBlocks(std::vector<const CBlockIndex*>& vBlocks, c\n \n void PeerManagerImpl::PushNodeVersion(CNode& pnode, const Peer& peer)\n {\n-    uint64_t my_services{peer.m_our_services};\n-    const int64_t nTime{count_seconds(GetTime<std::chrono::seconds>())};\n-    uint64_t nonce = pnode.GetLocalNonce();\n-    const int nNodeStartingHeight{m_best_height};\n-    NodeId nodeid = pnode.GetId();\n-    CAddress addr = pnode.addr;\n-\n-    CService addr_you = addr.IsRoutable() && !IsProxy(addr) && addr.IsAddrV1Compatible() ? addr : CService();\n-    uint64_t your_services{addr.nServices};\n-\n-    const bool tx_relay{!RejectIncomingTxs(pnode)};\n-    MakeAndPushMessage(pnode, NetMsgType::VERSION, PROTOCOL_VERSION, my_services, nTime,\n-            your_services, CNetAddr::V1(addr_you), // Together the pre-version-31402 serialization of CAddress \"addrYou\" (without nTime)\n-            my_services, CNetAddr::V1(CService{}), // Together the pre-version-31402 serialization of CAddress \"addrMe\" (without nTime)\n-            nonce, strSubVersion, nNodeStartingHeight, tx_relay);\n-\n+    uint64_t my_services;\n+    int64_t my_time;\n+    uint64_t your_services;\n+    CService your_addr;\n+    std::string my_user_agent;\n+    int my_height;\n+    bool my_tx_relay;\n+    if (pnode.IsPrivateBroadcastConn()) {\n+        my_services = NODE_NONE;\n+        my_time = 0;\n+        your_services = NODE_NONE;\n+        your_addr = CService{};\n+        my_user_agent = \"/pynode:0.0.1/\";",
      "path": "src/net_processing.cpp",
      "position": 105,
      "original_position": 172,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "07dee91112189be02c6694385de261570725b56b",
      "in_reply_to_id": null,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "07dee91112189be02c6694385de261570725b56b could this just be blank?",
      "created_at": "2024-03-08T20:32:24Z",
      "updated_at": "2024-03-08T20:59:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1518263617",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1518263617"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1644,
      "original_line": 1644,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1518279844",
      "pull_request_review_id": 1925311361,
      "id": 1518279844,
      "node_id": "PRRC_kwDOABII585afxyk",
      "diff_hunk": "@@ -3706,7 +3885,7 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n                       (mapped_as ? strprintf(\", mapped_as=%d\", mapped_as) : \"\"));\n         }\n \n-        if (pfrom.GetCommonVersion() >= SHORT_IDS_BLOCKS_VERSION) {\n+        if (pfrom.GetCommonVersion() >= SHORT_IDS_BLOCKS_VERSION && !pfrom.IsPrivateBroadcastConn()) {",
      "path": "src/net_processing.cpp",
      "position": 475,
      "original_position": 291,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "07dee91112189be02c6694385de261570725b56b",
      "in_reply_to_id": null,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "07dee91112189be02c6694385de261570725b56b do you need this here? I thought you had filtered out all the unnecessary messages already in `CConnman::PushMessage()`",
      "created_at": "2024-03-08T20:52:20Z",
      "updated_at": "2024-03-08T20:59:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1518279844",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1518279844"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 4112,
      "original_line": 4112,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1518282738",
      "pull_request_review_id": 1925311361,
      "id": 1518282738,
      "node_id": "PRRC_kwDOABII585afyfy",
      "diff_hunk": "@@ -4929,6 +5133,16 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n                     if (ping_time.count() >= 0) {\n                         // Let connman know about this successful ping-pong\n                         pfrom.PongReceived(ping_time);\n+                        if (pfrom.IsPrivateBroadcastConn()) {\n+                            m_tx_for_private_broadcast.BroadcastEnd(pfrom.GetId(), /*confirmed_by_node=*/true);",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 339,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "07dee91112189be02c6694385de261570725b56b",
      "in_reply_to_id": null,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "07dee91112189be02c6694385de261570725b56b `BroadcastEnd()` returns a `bool`, seems like you could include that in the log message where you have the word \"probably\"",
      "created_at": "2024-03-08T20:55:54Z",
      "updated_at": "2024-03-08T20:59:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1518282738",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1518282738"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5357,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1519402830",
      "pull_request_review_id": 1927346768,
      "id": 1519402830,
      "node_id": "PRRC_kwDOABII585akD9O",
      "diff_hunk": "@@ -452,6 +452,7 @@ class NetinfoRequestHandler : public BaseRequestHandler\n         if (conn_type == \"block-relay-only\") return \"block\";",
      "path": "src/bitcoin-cli.cpp",
      "position": 1,
      "original_position": 1,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "6fad02cf03d6b37d0a22443a411ec92649b1d39d",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "From the PR main thread https://github.com/bitcoin/bitcoin/pull/29415#issuecomment-1986011938:\r\n\r\n> The private broadcast succeeds frequently but not always\r\n\r\nIn the originator's log you can check to whom is the transaction being sent. Then in the recipient's logs you can check if it was accepted and further broadcast to everybody. Enable `-debug=net -debug=privatebroadcast`.",
      "created_at": "2024-03-11T09:35:14Z",
      "updated_at": "2024-03-11T09:35:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1519402830",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1519402830"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 451,
      "original_line": 451,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1519831611",
      "pull_request_review_id": 1928014516,
      "id": 1519831611,
      "node_id": "PRRC_kwDOABII585also7",
      "diff_hunk": "@@ -70,6 +70,7 @@ namespace BCLog {\n         TXRECONCILIATION = (1 << 27),\n         SCAN        = (1 << 28),\n         TXPACKAGES  = (1 << 29),\n+        PRIVATE_BROADCAST = (1 << 30),",
      "path": "src/logging.h",
      "position": null,
      "original_position": 4,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "e672e55ddb49378bd5c8e4f03fadae5774310c70",
      "in_reply_to_id": 1517972760,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes. `LogFlags` is not stored on disk (I hope!) or participate in some permanent on-disk format. It is memory only and can be flipped to `uint64_t` when needed.",
      "created_at": "2024-03-11T14:37:03Z",
      "updated_at": "2024-03-11T14:37:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1519831611",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1519831611"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 73,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1520116658",
      "pull_request_review_id": 1928519119,
      "id": 1520116658,
      "node_id": "PRRC_kwDOABII585amyOy",
      "diff_hunk": "@@ -1900,6 +1911,23 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n \n     connOptions.m_i2p_accept_incoming = args.GetBoolArg(\"-i2pacceptincoming\", DEFAULT_I2P_ACCEPT_INCOMING);\n \n+    if (args.GetBoolArg(\"-privatebroadcast\", DEFAULT_PRIVATE_BROADCAST)) {\n+        // If -listenonion is set, then NET_ONION may not be reachable now\n+        // but may become reachable later, thus only error here if it is not\n+        // reachable and will not become reachable for sure.\n+        if (!g_reachable_nets.Contains(NET_I2P) && !g_reachable_nets.Contains(NET_ONION) &&\n+            (!listenonion || args.IsArgSet(\"-onlynet\"))) {",
      "path": "src/init.cpp",
      "position": null,
      "original_position": 52,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "72f0dbc99e6eed26bef21965dabc5f0bebf01b33",
      "in_reply_to_id": 1517981961,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> if user sets `-onlynet=onion` do we require (by the time we get to this line) that NET_ONION is reachable?\r\n\r\nNo. `-listen=1 -listenonion=1 -torcontrol=... -torpassword=... -onlynet=onion` would get us here with `NET_ONION` being unreachable.\r\n\r\n> Or couldn't it come up later, similar to the `-listenonion` configuration?\r\n\r\nYes, if `-listenonion=1 -torcontrol=... -torpassword=...` is given then we will later, after startup, connect to the Tor daemon and possibly make `NET_ONION` reachable.",
      "created_at": "2024-03-11T17:15:17Z",
      "updated_at": "2024-03-11T17:15:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1520116658",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1520116658"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1961,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1520122930",
      "pull_request_review_id": 1928530676,
      "id": 1520122930,
      "node_id": "PRRC_kwDOABII585amzwy",
      "diff_hunk": "@@ -4499,6 +4515,16 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         const uint256& hash = peer->m_wtxid_relay ? wtxid : txid;\n         AddKnownTx(*peer, hash);\n \n+        if (m_tx_for_private_broadcast.Remove(ptx)) {",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 27,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "bc05ddc7b9369cf263bf88d0a773ca853d3c9af5",
      "in_reply_to_id": null,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "bc05ddc7b9369cf263bf88d0a773ca853d3c9af5 maybe I'm missing something, but should we not also adjust `m_private_broadcast_connections_to_open` when we get our privately broadcast tx back over regular relay? In my first local test, all 5 onion connections were completed before I got the tx back. But if the very first private connection relays the tx around and we get it back, do we still need to bother with the next 4?",
      "created_at": "2024-03-11T17:19:46Z",
      "updated_at": "2024-03-11T17:19:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1520122930",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1520122930"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4663,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1520128211",
      "pull_request_review_id": 1928539673,
      "id": 1520128211,
      "node_id": "PRRC_kwDOABII585am1DT",
      "diff_hunk": "@@ -1900,6 +1911,23 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n \n     connOptions.m_i2p_accept_incoming = args.GetBoolArg(\"-i2pacceptincoming\", DEFAULT_I2P_ACCEPT_INCOMING);\n \n+    if (args.GetBoolArg(\"-privatebroadcast\", DEFAULT_PRIVATE_BROADCAST)) {\n+        // If -listenonion is set, then NET_ONION may not be reachable now\n+        // but may become reachable later, thus only error here if it is not\n+        // reachable and will not become reachable for sure.\n+        if (!g_reachable_nets.Contains(NET_I2P) && !g_reachable_nets.Contains(NET_ONION) &&\n+            (!listenonion || args.IsArgSet(\"-onlynet\"))) {",
      "path": "src/init.cpp",
      "position": null,
      "original_position": 52,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "72f0dbc99e6eed26bef21965dabc5f0bebf01b33",
      "in_reply_to_id": 1517981961,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "ok so then isn't it possible for a user to start with `-privatebroadcast` but i2p and onion aren't reachable *yet*? They would get an init error but the Tor daemon could become reachable later, by the time we need it.",
      "created_at": "2024-03-11T17:23:32Z",
      "updated_at": "2024-03-11T17:23:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1520128211",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1520128211"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1961,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1520139562",
      "pull_request_review_id": 1928558982,
      "id": 1520139562,
      "node_id": "PRRC_kwDOABII585am30q",
      "diff_hunk": "@@ -2657,7 +2733,9 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n             CAddress addr;\n             NodeSeconds addr_last_try{0s};\n \n-            if (fFeeler) {\n+            if (open_private_broadcast_to.has_value()) {\n+                std::tie(addr, addr_last_try) = addrman.Select(/*new_only=*/false, open_private_broadcast_to.value());",
      "path": "src/net.cpp",
      "position": 220,
      "original_position": 160,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "4e19f9cc9834c0b76a2d03fea0921879de46fea9",
      "in_reply_to_id": null,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "4e19f9cc9834c0b76a2d03fea0921879de46fea9 what if `MaybePickPrivateBroadcastNetwork()` chooses i2p but we don't have any addrs for that network? I think the `while` loop below may try forever until addrman finally has something for i2p? But we *could* call `MaybePickPrivateBroadcastNetwork()` again or just switch to Tor if we know we have addrs there.",
      "created_at": "2024-03-11T17:31:42Z",
      "updated_at": "2024-03-11T18:41:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1520139562",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1520139562"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2741,
      "original_line": 2741,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1520152548",
      "pull_request_review_id": 1928558982,
      "id": 1520152548,
      "node_id": "PRRC_kwDOABII585am6_k",
      "diff_hunk": "@@ -1797,10 +1820,56 @@ void PeerManagerImpl::ReattemptInitialBroadcast(CScheduler& scheduler)\n         }\n     }\n \n-    // Schedule next run for 10-15 minutes in the future.\n-    // We add randomness on every cycle to avoid the possibility of P2P fingerprinting.\n-    const std::chrono::milliseconds delta = 10min + GetRandMillis(5min);\n-    scheduler.scheduleFromNow([&] { ReattemptInitialBroadcast(scheduler); }, delta);\n+    scheduler.scheduleFromNow([&] { ReattemptInitialBroadcast(scheduler); }, NextTxBroadcast());\n+}\n+\n+void PeerManagerImpl::ReattemptPrivateBroadcast(CScheduler& scheduler)\n+{\n+    // The following heuristic is subject to races, but that is ok: if it overshoots,\n+    // we will open some private connections in vain, if it undershoots, the stale\n+    // transactions will be picked on the next run.\n+\n+    size_t num_active{0};\n+    m_connman.ForEachNode([&num_active](const CNode* node) {\n+        if (node->IsPrivateBroadcastConn()) {\n+            ++num_active;\n+        }\n+    });\n+\n+    const size_t num_to_open{m_connman.NumPrivateBroadcastToOpen()};\n+\n+    // Remove stale transactions that are no longer relevant (e.g. already in\n+    // the mempool or mined) and count the remaining ones.\n+    size_t num_stale{0};\n+    const auto stale_txs = m_tx_for_private_broadcast.GetStale();\n+    {\n+        LOCK(cs_main);\n+        for (const auto& stale_tx : stale_txs) {\n+            auto mempool_acceptable = m_chainman.ProcessTransaction(stale_tx, /*test_accept=*/true);\n+            if (mempool_acceptable.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n+                LogPrintLevel(BCLog::PRIVATE_BROADCAST,\n+                              BCLog::Level::Debug,\n+                              \"Reattempting broadcast of stale txid=%s wtxid=%s\\n\",\n+                              stale_tx->GetHash().ToString(),\n+                              stale_tx->GetWitnessHash().ToString());\n+                ++num_stale;\n+            } else {\n+                LogPrintLevel(BCLog::PRIVATE_BROADCAST,\n+                              BCLog::Level::Info,\n+                              \"Giving up broadcast attempts for txid=%s wtxid=%s: %s\\n\",\n+                              stale_tx->GetHash().ToString(),\n+                              stale_tx->GetWitnessHash().ToString(),\n+                              mempool_acceptable.m_state.ToString());\n+                m_tx_for_private_broadcast.Remove(stale_tx);\n+            }\n+        }\n+    }\n+\n+    if (num_stale > num_active + num_to_open) {",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 97,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "c09d6409c957af7c449a60778689d6715d9a6628",
      "in_reply_to_id": null,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "c09d6409c957af7c449a60778689d6715d9a6628 `num_stale` is a count of transactions but the other two numbers here count p2p connections, are we still going to use `NUM_PRIVATE_BROADCAST_PER_TX` here?",
      "created_at": "2024-03-11T17:40:18Z",
      "updated_at": "2024-03-11T18:41:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1520152548",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1520152548"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1901,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1520180548",
      "pull_request_review_id": 1928640468,
      "id": 1520180548,
      "node_id": "PRRC_kwDOABII585anB1E",
      "diff_hunk": "@@ -452,6 +452,7 @@ class NetinfoRequestHandler : public BaseRequestHandler\n         if (conn_type == \"block-relay-only\") return \"block\";\n         if (conn_type == \"manual\" || conn_type == \"feeler\") return conn_type;\n         if (conn_type == \"addr-fetch\") return \"addr\";\n+        if (conn_type == \"private-broadcast\") return \"privbcast\";",
      "path": "src/bitcoin-cli.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "7a0f492104c1621b7089a64fa330c72b06d30574",
      "in_reply_to_id": 1518063388,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Changed to `privat`. Feel free to suggest another name.",
      "created_at": "2024-03-11T17:54:41Z",
      "updated_at": "2024-03-11T17:54:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1520180548",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1520180548"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 455,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1520182217",
      "pull_request_review_id": 1928643867,
      "id": 1520182217,
      "node_id": "PRRC_kwDOABII585anCPJ",
      "diff_hunk": "@@ -75,6 +75,13 @@ enum class ConnectionType {\n      * AddrMan is empty.\n      */\n     ADDR_FETCH,\n+\n+    /**\n+     * Private broadcast connections are short-lived and only opened to\n+     * privacy networks (Tor, I2P) for relaying privacy-sensitive data (like\n+     * our own transactions) and closed afterwards.\n+     */\n+    PRIVATE_BROADCAST,",
      "path": "src/node/connection_types.h",
      "position": 10,
      "original_position": 10,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "7a0f492104c1621b7089a64fa330c72b06d30574",
      "in_reply_to_id": 1518080397,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good catch, added!",
      "created_at": "2024-03-11T17:55:04Z",
      "updated_at": "2024-03-11T17:55:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1520182217",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1520182217"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 84,
      "original_line": 84,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1520183380",
      "pull_request_review_id": 1928646551,
      "id": 1520183380,
      "node_id": "PRRC_kwDOABII585anChU",
      "diff_hunk": "@@ -456,7 +456,7 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n         if (addrConnect.IsI2P() && use_proxy) {\n             i2p::Connection conn;\n \n-            if (m_i2p_sam_session) {\n+            if (m_i2p_sam_session && conn_type != ConnectionType::PRIVATE_BROADCAST) {",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "4e19f9cc9834c0b76a2d03fea0921879de46fea9",
      "in_reply_to_id": 1518132032,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes. Added a comment.",
      "created_at": "2024-03-11T17:55:22Z",
      "updated_at": "2024-03-11T17:55:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1520183380",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1520183380"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 494,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1520191910",
      "pull_request_review_id": 1928558982,
      "id": 1520191910,
      "node_id": "PRRC_kwDOABII585anEmm",
      "diff_hunk": "@@ -89,11 +91,14 @@ static RPCHelpMan sendrawtransaction()\n             std::string err_string;\n             AssertLockNotHeld(cs_main);\n             NodeContext& node = EnsureAnyNodeContext(request.context);\n+            const auto method = gArgs.GetBoolArg(\"-privatebroadcast\", DEFAULT_PRIVATE_BROADCAST) ?\n+                                    NO_MEMPOOL_PRIVATE_BROADCAST :",
      "path": "src/rpc/mempool.cpp",
      "position": null,
      "original_position": 16,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "e36a1b4848f8f762b550a9469993211d41bd6cb9",
      "in_reply_to_id": null,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "e36a1b4848f8f762b550a9469993211d41bd6cb9 heh, makes the placement of this function in `mempool.cpp` a bit arbitrary now!",
      "created_at": "2024-03-11T17:59:08Z",
      "updated_at": "2024-03-11T18:42:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1520191910",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1520191910"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 95,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1520210992",
      "pull_request_review_id": 1928558982,
      "id": 1520210992,
      "node_id": "PRRC_kwDOABII585anJQw",
      "diff_hunk": "@@ -117,6 +128,33 @@ def handle(self):\n             cmdin = Socks5Command(cmd, atyp, addr, port, username, password)\n             self.serv.queue.put(cmdin)\n             logger.debug('Proxy: %s', cmdin)\n+",
      "path": "test/functional/test_framework/socks5.py",
      "position": 41,
      "original_position": 29,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "2b2e747455699236200fa3cddddfff7005f6a44a",
      "in_reply_to_id": null,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "2b2e747455699236200fa3cddddfff7005f6a44a Could be overkill, but you could actually adjust the \"dummy response\" a few lines up to actually respond accurately, in particular the `REPLY` field could be used to report a connection failure back to bitcoind.\r\n\r\nFrom https://www.rfc-editor.org/rfc/rfc1928\r\n\r\n```diff\r\ndiff --git a/test/functional/test_framework/socks5.py b/test/functional/test_framework/socks5.py\r\nindex 48ad8bbeea..568e9fa64c 100644\r\n--- a/test/functional/test_framework/socks5.py\r\n+++ b/test/functional/test_framework/socks5.py\r\n@@ -123,7 +123,14 @@ class Socks5Connection():\r\n             port = (port_hi << 8) | port_lo\r\n \r\n             # Send dummy response\r\n-            self.conn.sendall(bytearray([0x05, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]))\r\n+            self.conn.sendall(bytearray([\r\n+                0x05, # Protocol version\r\n+                0x00, # Reply (0x00 = success)\r\n+                0x00, # Reserved (must be 0x00)\r\n+                0x01, # Server bound address type (0x01 = ipv4)\r\n+                0x00, 0x00, 0x00, 0x00, # Server bound ipv4 address\r\n+                0x00, 0x00 # Server bound port\r\n+            ]))\r\n \r\n             cmdin = Socks5Command(cmd, atyp, addr, port, username, password)\r\n             self.serv.queue.put(cmdin)\r\n\r\n```",
      "created_at": "2024-03-11T18:13:52Z",
      "updated_at": "2024-03-11T18:41:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1520210992",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1520210992"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 138,
      "original_line": 138,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1520232425",
      "pull_request_review_id": 1928558982,
      "id": 1520232425,
      "node_id": "PRRC_kwDOABII585anOfp",
      "diff_hunk": "@@ -0,0 +1,311 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test how locally submitted transactions are sent to the network when private broadcast is used.\n+\n+The topology in the test is:\n+\n+Bitcoin Core (tx_originator)\n+               ^   v       The default full-outbound + block-only connections\n+               |   |       (MAX_OUTBOUND_FULL_RELAY_CONNECTIONS + MAX_BLOCK_RELAY_ONLY_CONNECTIONS):\n+               |   |\n+               |   *-----> SOCKS5 Proxy ---> P2PInterface (self.socks5_server.conf.destinations[0][\"node\"])\n+               |   |\n+               |   *-----> SOCKS5 Proxy ---> P2PInterface (self.socks5_server.conf.destinations[1][\"node\"])\n+               |   ...\n+               |   |       The private broadcast TX recipients\n+               |   |       (NUM_PRIVATE_BROADCAST_PER_TX)\n+               |   |       plus maybe some feeler or extra block only connections:\n+               |   |\n+               |   *-----> SOCKS5 Proxy ---> Bitcoin Core (node1) (self.socks5_server.conf.destinations[i][\"node\"] is None)\n+               |   |                          ^\n+               |   |                          *----< P2PInterface (far_observer) (to check Bitcoin Core relays the tx)\n+               |   |\n+               |   *-----> SOCKS5 Proxy ---> P2PInterface (self.socks5_server.conf.destinations[i + 1][\"node\"])\n+               |   ...\n+               |\n+               *---------< P2PDataStore (observer_inbound)\n+\"\"\"\n+\n+from test_framework.p2p import (\n+    P2PDataStore,\n+    P2PInterface,\n+    P2P_SERVICES,\n+    P2P_VERSION,\n+)\n+from test_framework.messages import (\n+    CAddress,\n+    CInv,\n+    MSG_WTX,\n+    msg_inv,\n+)\n+from test_framework.socks5 import (\n+    Socks5Configuration,\n+    Socks5Server,\n+)\n+from test_framework.test_framework import (\n+    BitcoinTestFramework,\n+)\n+from test_framework.util import (\n+    MAX_NODES,\n+    assert_equal,\n+    p2p_port,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+)\n+\n+MAX_OUTBOUND_FULL_RELAY_CONNECTIONS = 8\n+MAX_BLOCK_RELAY_ONLY_CONNECTIONS = 2\n+NUM_INITIAL_CONNECTIONS = MAX_OUTBOUND_FULL_RELAY_CONNECTIONS + MAX_BLOCK_RELAY_ONLY_CONNECTIONS\n+NUM_PRIVATE_BROADCAST_PER_TX = 5\n+\n+# Fill addrman with these addresses. Must have enough Tor addresses, so that even\n+# if all 10 default connections are opened to a Tor address (!?) there must be more",
      "path": "test/functional/p2p_private_broadcast.py",
      "position": 51,
      "original_position": 66,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "d10a0649b018638574fa7dc316b3e783bf6cee69",
      "in_reply_to_id": null,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "d10a0649b018638574fa7dc316b3e783bf6cee69 just a guess, would this work?\r\n1. start the node with `-addnode=<ipv4>` x10\r\n2. wait for 10 outbounds to connect\r\n3. `addpeeraddress` with all the onion and i2p addrs\r\n4. send raw, etc...",
      "created_at": "2024-03-11T18:21:54Z",
      "updated_at": "2024-03-11T18:41:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1520232425",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1520232425"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 51,
      "original_line": 51,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1520245249",
      "pull_request_review_id": 1928558982,
      "id": 1520245249,
      "node_id": "PRRC_kwDOABII585anRoB",
      "diff_hunk": "@@ -0,0 +1,311 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test how locally submitted transactions are sent to the network when private broadcast is used.\n+\n+The topology in the test is:\n+\n+Bitcoin Core (tx_originator)\n+               ^   v       The default full-outbound + block-only connections\n+               |   |       (MAX_OUTBOUND_FULL_RELAY_CONNECTIONS + MAX_BLOCK_RELAY_ONLY_CONNECTIONS):\n+               |   |\n+               |   *-----> SOCKS5 Proxy ---> P2PInterface (self.socks5_server.conf.destinations[0][\"node\"])\n+               |   |\n+               |   *-----> SOCKS5 Proxy ---> P2PInterface (self.socks5_server.conf.destinations[1][\"node\"])\n+               |   ...\n+               |   |       The private broadcast TX recipients\n+               |   |       (NUM_PRIVATE_BROADCAST_PER_TX)\n+               |   |       plus maybe some feeler or extra block only connections:\n+               |   |\n+               |   *-----> SOCKS5 Proxy ---> Bitcoin Core (node1) (self.socks5_server.conf.destinations[i][\"node\"] is None)\n+               |   |                          ^\n+               |   |                          *----< P2PInterface (far_observer) (to check Bitcoin Core relays the tx)\n+               |   |\n+               |   *-----> SOCKS5 Proxy ---> P2PInterface (self.socks5_server.conf.destinations[i + 1][\"node\"])\n+               |   ...\n+               |\n+               *---------< P2PDataStore (observer_inbound)\n+\"\"\"\n+\n+from test_framework.p2p import (\n+    P2PDataStore,\n+    P2PInterface,\n+    P2P_SERVICES,\n+    P2P_VERSION,\n+)\n+from test_framework.messages import (\n+    CAddress,\n+    CInv,\n+    MSG_WTX,\n+    msg_inv,\n+)\n+from test_framework.socks5 import (\n+    Socks5Configuration,\n+    Socks5Server,\n+)\n+from test_framework.test_framework import (\n+    BitcoinTestFramework,\n+)\n+from test_framework.util import (\n+    MAX_NODES,\n+    assert_equal,\n+    p2p_port,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+)\n+\n+MAX_OUTBOUND_FULL_RELAY_CONNECTIONS = 8\n+MAX_BLOCK_RELAY_ONLY_CONNECTIONS = 2\n+NUM_INITIAL_CONNECTIONS = MAX_OUTBOUND_FULL_RELAY_CONNECTIONS + MAX_BLOCK_RELAY_ONLY_CONNECTIONS\n+NUM_PRIVATE_BROADCAST_PER_TX = 5\n+\n+# Fill addrman with these addresses. Must have enough Tor addresses, so that even\n+# if all 10 default connections are opened to a Tor address (!?) there must be more\n+# for private broadcast.\n+addresses = [\n+    \"1.65.195.98\",\n+    \"2.59.236.56\",\n+    \"2.83.114.20\",\n+    \"2.248.194.16\",\n+    \"5.2.154.6\",\n+    \"5.101.140.30\",\n+    \"5.128.87.126\",\n+    \"5.144.21.49\",\n+    \"5.172.132.104\",\n+    \"5.188.62.18\",\n+    \"5.200.2.180\",\n+    \"8.129.184.255\",\n+    \"8.209.105.138\",\n+    \"12.34.98.148\",\n+    \"14.199.102.151\",\n+    \"18.27.79.17\",\n+    \"18.27.124.231\",\n+    \"18.216.249.151\",\n+    \"23.88.155.58\",\n+    \"23.93.101.158\",\n+    \"[2001:19f0:1000:1db3:5400:4ff:fe56:5a8d]\",\n+    \"[2001:19f0:5:24da:3eec:efff:feb9:f36e]\",\n+    \"[2001:19f0:5:24da::]\",\n+    \"[2001:19f0:5:4535:3eec:efff:feb9:87e4]\",\n+    \"[2001:19f0:5:4535::]\",\n+    \"[2001:1bc0:c1::2000]\",\n+    \"[2001:1c04:4008:6300:8a5f:2678:114b:a660]\",\n+    \"[2001:41d0:203:3739::]\",\n+    \"[2001:41d0:203:8f49::]\",\n+    \"[2001:41d0:203:bb0a::]\",\n+    \"[2001:41d0:2:bf8f::]\",\n+    \"[2001:41d0:303:de8b::]\",\n+    \"[2001:41d0:403:3d61::]\",\n+    \"[2001:41d0:405:9600::]\",\n+    \"[2001:41d0:8:ed7f::1]\",\n+    \"[2001:41d0:a:69a2::1]\",\n+    \"[2001:41f0::62:6974:636f:696e]\",\n+    \"[2001:470:1b62::]\",\n+    \"[2001:470:1f05:43b:2831:8530:7179:5864]\",\n+    \"[2001:470:1f09:b14::11]\",\n+    \"2bqghnldu6mcug4pikzprwhtjjnsyederctvci6klcwzepnjd46ikjyd.onion\",\n+    \"4lr3w2iyyl5u5l6tosizclykf5v3smqroqdn2i4h3kq6pfbbjb2xytad.onion\",\n+    \"5g72ppm3krkorsfopcm2bi7wlv4ohhs4u4mlseymasn7g7zhdcyjpfid.onion\",\n+    \"5sbmcl4m5api5tqafi4gcckrn3y52sz5mskxf3t6iw4bp7erwiptrgqd.onion\",\n+    \"776aegl7tfhg6oiqqy76jnwrwbvcytsx2qegcgh2mjqujll4376ohlid.onion\",\n+    \"77mdte42srl42shdh2mhtjr7nf7dmedqrw6bkcdekhdvmnld6ojyyiad.onion\",\n+    \"azbpsh4arqlm6442wfimy7qr65bmha2zhgjg7wbaji6vvaug53hur2qd.onion\",\n+    \"b64xcbleqmwgq2u46bh4hegnlrzzvxntyzbmucn3zt7cssm7y4ubv3id.onion\",\n+    \"bsqbtcparrfihlwolt4xgjbf4cgqckvrvsfyvy6vhiqrnh4w6ghixoid.onion\",\n+    \"bsqbtctulf2g4jtjsdfgl2ed7qs6zz5wqx27qnyiik7laockryvszqqd.onion\",\n+    \"cwi3ekrwhig47dhhzfenr5hbvckj7fzaojygvazi2lucsenwbzwoyiqd.onion\",\n+    \"devinbtcmwkuitvxl3tfi5of4zau46ymeannkjv6fpnylkgf3q5fa3id.onion\",\n+    \"devinbtctu7uctl7hly2juu3thbgeivfnvw3ckj3phy6nyvpnx66yeyd.onion\",\n+    \"devinbtcyk643iruzfpaxw3on2jket7rbjmwygm42dmdyub3ietrbmid.onion\",\n+    \"dtql5vci4iaml4anmueftqr7bfgzqlauzfy4rc2tfgulldd3ekyijjyd.onion\",\n+    \"emzybtc25oddoa2prol2znpz2axnrg6k77xwgirmhv7igoiucddsxiad.onion\",\n+    \"emzybtc3ewh7zihpkdvuwlgxrhzcxy2p5fvjggp7ngjbxcytxvt4rjid.onion\",\n+    \"emzybtc454ewbviqnmgtgx3rgublsgkk23r4onbhidcv36wremue4kqd.onion\",\n+    \"emzybtc5bnpb2o6gh54oquiox54o4r7yn4a2wiiwzrjonlouaibm2zid.onion\",\n+    \"fpz6r5ppsakkwypjcglz6gcnwt7ytfhxskkfhzu62tnylcknh3eq6pad.onion\",\n+    \"255fhcp6ajvftnyo7bwz3an3t4a4brhopm3bamyh2iu5r3gnr2rq.b32.i2p\",\n+    \"27yrtht5b5bzom2w5ajb27najuqvuydtzb7bavlak25wkufec5mq.b32.i2p\",\n+    \"3gocb7wc4zvbmmebktet7gujccuux4ifk3kqilnxnj5wpdpqx2hq.b32.i2p\",\n+    \"4fcc23wt3hyjk3csfzcdyjz5pcwg5dzhdqgma6bch2qyiakcbboa.b32.i2p\",\n+    \"4osyqeknhx5qf3a73jeimexwclmt42cju6xdp7icja4ixxguu2hq.b32.i2p\",\n+    \"4umsi4nlmgyp4rckosg4vegd2ysljvid47zu7pqsollkaszcbpqq.b32.i2p\",\n+    \"6j2ezegd3e2e2x3o3pox335f5vxfthrrigkdrbgfbdjchm5h4awa.b32.i2p\",\n+    \"6n36ljyr55szci5ygidmxqer64qr24f4qmnymnbvgehz7qinxnla.b32.i2p\",\n+    \"72yjs6mvlby3ky6mgpvvlemmwq5pfcznrzd34jkhclgrishqdxva.b32.i2p\",\n+    \"a5qsnv3maw77mlmmzlcglu6twje6ttctd3fhpbfwcbpmewx6fczq.b32.i2p\",\n+    \"aovep2pco7v2k4rheofrgytbgk23eg22dczpsjqgqtxcqqvmxk6a.b32.i2p\",\n+    \"bitcoi656nll5hu6u7ddzrmzysdtwtnzcnrjd4rfdqbeey7dmn5a.b32.i2p\",\n+    \"brifkruhlkgrj65hffybrjrjqcgdgqs2r7siizb5b2232nruik3a.b32.i2p\",\n+    \"c4gfnttsuwqomiygupdqqqyy5y5emnk5c73hrfvatri67prd7vyq.b32.i2p\",\n+    \"day3hgxyrtwjslt54sikevbhxxs4qzo7d6vi72ipmscqtq3qmijq.b32.i2p\",\n+    \"du5kydummi23bjfp6bd7owsvrijgt7zhvxmz5h5f5spcioeoetwq.b32.i2p\",\n+    \"e55k6wu46rzp4pg5pk5npgbr3zz45bc3ihtzu2xcye5vwnzdy7pq.b32.i2p\",\n+    \"eciohu5nq7vsvwjjc52epskuk75d24iccgzmhbzrwonw6lx4gdva.b32.i2p\",\n+    \"ejlnngarmhqvune74ko7kk55xtgbz5i5ncs4vmnvjpy3l7y63xaa.b32.i2p\",\n+    \"fhzlp3xroabohnmjonu5iqazwhlbbwh5cpujvw2azcu3srqdceja.b32.i2p\",\n+    \"[fc32:17ea:e415:c3bf:9808:149d:b5a2:c9aa]\",\n+    \"[fcc7:be49:ccd1:dc91:3125:f0da:457d:8ce]\",\n+    \"[fcdc:73ae:b1a9:1bf8:d4c2:811:a4c7:c34e]\",\n+]\n+\n+class P2PPrivateBroadcast(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.disable_autoconnect = False\n+        self.num_nodes = 2\n+\n+    def setup_nodes(self):\n+        # Start a SOCKS5 proxy server.\n+        socks5_server_config = Socks5Configuration()\n+        # self.nodes[0] listens on p2p_port(0),\n+        # self.nodes[1] listens on p2p_port(1),\n+        # thus we tell the SOCKS5 server to listen on p2p_port(self.num_nodes (which is 2))\n+        socks5_server_config.addr = (\"127.0.0.1\", p2p_port(self.num_nodes))\n+        socks5_server_config.unauth = True\n+        socks5_server_config.auth = True\n+\n+        self.socks5_server = Socks5Server(socks5_server_config)\n+        self.socks5_server.start()\n+\n+        ports_base = p2p_port(MAX_NODES) + 15000\n+\n+        # Add 2 because one feeler and one extra block relay connections may\n+        # sneak in between the private broadcast connections.\n+        for i in range(NUM_INITIAL_CONNECTIONS + NUM_PRIVATE_BROADCAST_PER_TX + 2):\n+            if i == NUM_INITIAL_CONNECTIONS:\n+                # Instruct the SOCKS5 server to redirect the first private\n+                # broadcast connection from nodes[0] to nodes[1]\n+                self.socks5_server.conf.destinations.append({\n+                    \"listen_addr\": \"127.0.0.1\", # nodes[1] listen address\n+                    \"listen_port\": p2p_port(1), # nodes[1] listen port",
      "path": "test/functional/p2p_private_broadcast.py",
      "position": null,
      "original_position": 182,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "d10a0649b018638574fa7dc316b3e783bf6cee69",
      "in_reply_to_id": null,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "d10a0649b018638574fa7dc316b3e783bf6cee69 nit: slightly confusing to prefix these with `listen_` I would expect, like:\r\n`to_addr` `to_port` `requested_to_addr`",
      "created_at": "2024-03-11T18:26:52Z",
      "updated_at": "2024-03-11T18:41:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1520245249",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1520245249"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": 181,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 182,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1520261754",
      "pull_request_review_id": 1928558982,
      "id": 1520261754,
      "node_id": "PRRC_kwDOABII585anVp6",
      "diff_hunk": "@@ -0,0 +1,311 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test how locally submitted transactions are sent to the network when private broadcast is used.\n+\n+The topology in the test is:\n+\n+Bitcoin Core (tx_originator)\n+               ^   v       The default full-outbound + block-only connections\n+               |   |       (MAX_OUTBOUND_FULL_RELAY_CONNECTIONS + MAX_BLOCK_RELAY_ONLY_CONNECTIONS):\n+               |   |\n+               |   *-----> SOCKS5 Proxy ---> P2PInterface (self.socks5_server.conf.destinations[0][\"node\"])\n+               |   |\n+               |   *-----> SOCKS5 Proxy ---> P2PInterface (self.socks5_server.conf.destinations[1][\"node\"])\n+               |   ...\n+               |   |       The private broadcast TX recipients\n+               |   |       (NUM_PRIVATE_BROADCAST_PER_TX)\n+               |   |       plus maybe some feeler or extra block only connections:\n+               |   |\n+               |   *-----> SOCKS5 Proxy ---> Bitcoin Core (node1) (self.socks5_server.conf.destinations[i][\"node\"] is None)\n+               |   |                          ^\n+               |   |                          *----< P2PInterface (far_observer) (to check Bitcoin Core relays the tx)\n+               |   |\n+               |   *-----> SOCKS5 Proxy ---> P2PInterface (self.socks5_server.conf.destinations[i + 1][\"node\"])\n+               |   ...\n+               |\n+               *---------< P2PDataStore (observer_inbound)\n+\"\"\"\n+\n+from test_framework.p2p import (\n+    P2PDataStore,\n+    P2PInterface,\n+    P2P_SERVICES,\n+    P2P_VERSION,\n+)\n+from test_framework.messages import (\n+    CAddress,\n+    CInv,\n+    MSG_WTX,\n+    msg_inv,\n+)\n+from test_framework.socks5 import (\n+    Socks5Configuration,\n+    Socks5Server,\n+)\n+from test_framework.test_framework import (\n+    BitcoinTestFramework,\n+)\n+from test_framework.util import (\n+    MAX_NODES,\n+    assert_equal,\n+    p2p_port,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+)\n+\n+MAX_OUTBOUND_FULL_RELAY_CONNECTIONS = 8\n+MAX_BLOCK_RELAY_ONLY_CONNECTIONS = 2\n+NUM_INITIAL_CONNECTIONS = MAX_OUTBOUND_FULL_RELAY_CONNECTIONS + MAX_BLOCK_RELAY_ONLY_CONNECTIONS\n+NUM_PRIVATE_BROADCAST_PER_TX = 5\n+\n+# Fill addrman with these addresses. Must have enough Tor addresses, so that even\n+# if all 10 default connections are opened to a Tor address (!?) there must be more\n+# for private broadcast.\n+addresses = [\n+    \"1.65.195.98\",\n+    \"2.59.236.56\",\n+    \"2.83.114.20\",\n+    \"2.248.194.16\",\n+    \"5.2.154.6\",\n+    \"5.101.140.30\",\n+    \"5.128.87.126\",\n+    \"5.144.21.49\",\n+    \"5.172.132.104\",\n+    \"5.188.62.18\",\n+    \"5.200.2.180\",\n+    \"8.129.184.255\",\n+    \"8.209.105.138\",\n+    \"12.34.98.148\",\n+    \"14.199.102.151\",\n+    \"18.27.79.17\",\n+    \"18.27.124.231\",\n+    \"18.216.249.151\",\n+    \"23.88.155.58\",\n+    \"23.93.101.158\",\n+    \"[2001:19f0:1000:1db3:5400:4ff:fe56:5a8d]\",\n+    \"[2001:19f0:5:24da:3eec:efff:feb9:f36e]\",\n+    \"[2001:19f0:5:24da::]\",\n+    \"[2001:19f0:5:4535:3eec:efff:feb9:87e4]\",\n+    \"[2001:19f0:5:4535::]\",\n+    \"[2001:1bc0:c1::2000]\",\n+    \"[2001:1c04:4008:6300:8a5f:2678:114b:a660]\",\n+    \"[2001:41d0:203:3739::]\",\n+    \"[2001:41d0:203:8f49::]\",\n+    \"[2001:41d0:203:bb0a::]\",\n+    \"[2001:41d0:2:bf8f::]\",\n+    \"[2001:41d0:303:de8b::]\",\n+    \"[2001:41d0:403:3d61::]\",\n+    \"[2001:41d0:405:9600::]\",\n+    \"[2001:41d0:8:ed7f::1]\",\n+    \"[2001:41d0:a:69a2::1]\",\n+    \"[2001:41f0::62:6974:636f:696e]\",\n+    \"[2001:470:1b62::]\",\n+    \"[2001:470:1f05:43b:2831:8530:7179:5864]\",\n+    \"[2001:470:1f09:b14::11]\",\n+    \"2bqghnldu6mcug4pikzprwhtjjnsyederctvci6klcwzepnjd46ikjyd.onion\",\n+    \"4lr3w2iyyl5u5l6tosizclykf5v3smqroqdn2i4h3kq6pfbbjb2xytad.onion\",\n+    \"5g72ppm3krkorsfopcm2bi7wlv4ohhs4u4mlseymasn7g7zhdcyjpfid.onion\",\n+    \"5sbmcl4m5api5tqafi4gcckrn3y52sz5mskxf3t6iw4bp7erwiptrgqd.onion\",\n+    \"776aegl7tfhg6oiqqy76jnwrwbvcytsx2qegcgh2mjqujll4376ohlid.onion\",\n+    \"77mdte42srl42shdh2mhtjr7nf7dmedqrw6bkcdekhdvmnld6ojyyiad.onion\",\n+    \"azbpsh4arqlm6442wfimy7qr65bmha2zhgjg7wbaji6vvaug53hur2qd.onion\",\n+    \"b64xcbleqmwgq2u46bh4hegnlrzzvxntyzbmucn3zt7cssm7y4ubv3id.onion\",\n+    \"bsqbtcparrfihlwolt4xgjbf4cgqckvrvsfyvy6vhiqrnh4w6ghixoid.onion\",\n+    \"bsqbtctulf2g4jtjsdfgl2ed7qs6zz5wqx27qnyiik7laockryvszqqd.onion\",\n+    \"cwi3ekrwhig47dhhzfenr5hbvckj7fzaojygvazi2lucsenwbzwoyiqd.onion\",\n+    \"devinbtcmwkuitvxl3tfi5of4zau46ymeannkjv6fpnylkgf3q5fa3id.onion\",\n+    \"devinbtctu7uctl7hly2juu3thbgeivfnvw3ckj3phy6nyvpnx66yeyd.onion\",\n+    \"devinbtcyk643iruzfpaxw3on2jket7rbjmwygm42dmdyub3ietrbmid.onion\",\n+    \"dtql5vci4iaml4anmueftqr7bfgzqlauzfy4rc2tfgulldd3ekyijjyd.onion\",\n+    \"emzybtc25oddoa2prol2znpz2axnrg6k77xwgirmhv7igoiucddsxiad.onion\",\n+    \"emzybtc3ewh7zihpkdvuwlgxrhzcxy2p5fvjggp7ngjbxcytxvt4rjid.onion\",\n+    \"emzybtc454ewbviqnmgtgx3rgublsgkk23r4onbhidcv36wremue4kqd.onion\",\n+    \"emzybtc5bnpb2o6gh54oquiox54o4r7yn4a2wiiwzrjonlouaibm2zid.onion\",\n+    \"fpz6r5ppsakkwypjcglz6gcnwt7ytfhxskkfhzu62tnylcknh3eq6pad.onion\",\n+    \"255fhcp6ajvftnyo7bwz3an3t4a4brhopm3bamyh2iu5r3gnr2rq.b32.i2p\",\n+    \"27yrtht5b5bzom2w5ajb27najuqvuydtzb7bavlak25wkufec5mq.b32.i2p\",\n+    \"3gocb7wc4zvbmmebktet7gujccuux4ifk3kqilnxnj5wpdpqx2hq.b32.i2p\",\n+    \"4fcc23wt3hyjk3csfzcdyjz5pcwg5dzhdqgma6bch2qyiakcbboa.b32.i2p\",\n+    \"4osyqeknhx5qf3a73jeimexwclmt42cju6xdp7icja4ixxguu2hq.b32.i2p\",\n+    \"4umsi4nlmgyp4rckosg4vegd2ysljvid47zu7pqsollkaszcbpqq.b32.i2p\",\n+    \"6j2ezegd3e2e2x3o3pox335f5vxfthrrigkdrbgfbdjchm5h4awa.b32.i2p\",\n+    \"6n36ljyr55szci5ygidmxqer64qr24f4qmnymnbvgehz7qinxnla.b32.i2p\",\n+    \"72yjs6mvlby3ky6mgpvvlemmwq5pfcznrzd34jkhclgrishqdxva.b32.i2p\",\n+    \"a5qsnv3maw77mlmmzlcglu6twje6ttctd3fhpbfwcbpmewx6fczq.b32.i2p\",\n+    \"aovep2pco7v2k4rheofrgytbgk23eg22dczpsjqgqtxcqqvmxk6a.b32.i2p\",\n+    \"bitcoi656nll5hu6u7ddzrmzysdtwtnzcnrjd4rfdqbeey7dmn5a.b32.i2p\",\n+    \"brifkruhlkgrj65hffybrjrjqcgdgqs2r7siizb5b2232nruik3a.b32.i2p\",\n+    \"c4gfnttsuwqomiygupdqqqyy5y5emnk5c73hrfvatri67prd7vyq.b32.i2p\",\n+    \"day3hgxyrtwjslt54sikevbhxxs4qzo7d6vi72ipmscqtq3qmijq.b32.i2p\",\n+    \"du5kydummi23bjfp6bd7owsvrijgt7zhvxmz5h5f5spcioeoetwq.b32.i2p\",\n+    \"e55k6wu46rzp4pg5pk5npgbr3zz45bc3ihtzu2xcye5vwnzdy7pq.b32.i2p\",\n+    \"eciohu5nq7vsvwjjc52epskuk75d24iccgzmhbzrwonw6lx4gdva.b32.i2p\",\n+    \"ejlnngarmhqvune74ko7kk55xtgbz5i5ncs4vmnvjpy3l7y63xaa.b32.i2p\",\n+    \"fhzlp3xroabohnmjonu5iqazwhlbbwh5cpujvw2azcu3srqdceja.b32.i2p\",\n+    \"[fc32:17ea:e415:c3bf:9808:149d:b5a2:c9aa]\",\n+    \"[fcc7:be49:ccd1:dc91:3125:f0da:457d:8ce]\",\n+    \"[fcdc:73ae:b1a9:1bf8:d4c2:811:a4c7:c34e]\",\n+]\n+\n+class P2PPrivateBroadcast(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.disable_autoconnect = False\n+        self.num_nodes = 2\n+\n+    def setup_nodes(self):\n+        # Start a SOCKS5 proxy server.\n+        socks5_server_config = Socks5Configuration()\n+        # self.nodes[0] listens on p2p_port(0),\n+        # self.nodes[1] listens on p2p_port(1),\n+        # thus we tell the SOCKS5 server to listen on p2p_port(self.num_nodes (which is 2))\n+        socks5_server_config.addr = (\"127.0.0.1\", p2p_port(self.num_nodes))\n+        socks5_server_config.unauth = True\n+        socks5_server_config.auth = True\n+\n+        self.socks5_server = Socks5Server(socks5_server_config)\n+        self.socks5_server.start()\n+\n+        ports_base = p2p_port(MAX_NODES) + 15000\n+\n+        # Add 2 because one feeler and one extra block relay connections may\n+        # sneak in between the private broadcast connections.\n+        for i in range(NUM_INITIAL_CONNECTIONS + NUM_PRIVATE_BROADCAST_PER_TX + 2):\n+            if i == NUM_INITIAL_CONNECTIONS:\n+                # Instruct the SOCKS5 server to redirect the first private\n+                # broadcast connection from nodes[0] to nodes[1]\n+                self.socks5_server.conf.destinations.append({\n+                    \"listen_addr\": \"127.0.0.1\", # nodes[1] listen address\n+                    \"listen_port\": p2p_port(1), # nodes[1] listen port\n+                    \"node\": None,\n+                    \"requested_to_addr\": None,\n+                })\n+            else:\n+                # Create a Python P2P listening node and add it to self.socks5_server.conf.destinations[]\n+                listener = P2PInterface()\n+                listener.peer_connect_helper(dstaddr=\"0.0.0.0\", dstport=0, net=self.chain, timeout_factor=self.options.timeout_factor)\n+                listener.peer_connect_send_version(services=P2P_SERVICES)\n+                self.network_thread.listen(\n+                    p2p=listener,\n+                    # Instruct the SOCKS5 server to redirect a connection to this Python P2P listener.\n+                    callback=lambda addr, port: self.socks5_server.conf.destinations.append({\n+                        \"listen_addr\": addr,\n+                        \"listen_port\": port,\n+                        \"node\": None,\n+                        \"requested_to_addr\": None,\n+                    }),\n+                    addr=\"127.0.0.1\",\n+                    port=ports_base + i)\n+                # Wait until the callback has been called and it has done append().\n+                self.wait_until(lambda: len(self.socks5_server.conf.destinations) == i + 1)\n+\n+                self.socks5_server.conf.destinations[i][\"node\"] = listener\n+\n+        self.extra_args = [\n+            [\n+                \"-peerbloomfilters\", # needed to test replies to MEMPOOL\n+                \"-cjdnsreachable\", # needed to be able to add CJDNS addresses to addrman (otherwise they are unroutable).\n+                \"-privatebroadcast\",\n+                f\"-proxy={socks5_server_config.addr[0]}:{socks5_server_config.addr[1]}\",\n+            ],\n+            [\n+                \"-connect=0\",\n+                f\"-bind=127.0.0.1:{p2p_port(1)}=onion\", # consider all incoming as coming from Tor\n+            ],\n+        ]\n+        super().setup_nodes()\n+\n+    def setup_network(self):\n+        self.setup_nodes()\n+\n+    def run_test(self):\n+        tx_originator = self.nodes[0]\n+\n+        observer_inbound = tx_originator.add_p2p_connection(P2PDataStore())\n+\n+        # Fill tx_originator's addrman.\n+        for addr in addresses:\n+            res = tx_originator.addpeeraddress(address=addr, port=8333, tried=False)\n+            if res[\"success\"]:\n+                self.log.debug(f\"Added {addr} to tx_originator's addrman\")\n+            else:\n+                self.log.debug(f\"Could not add {addr} to tx_originator's addrman (collision?)\")\n+\n+        self.wait_until(lambda: self.socks5_server.conf.destinations_used == NUM_INITIAL_CONNECTIONS)\n+\n+        node1 = self.nodes[1]\n+        far_observer = node1.add_p2p_connection(P2PInterface())\n+\n+        # The next opened connections should be \"private broadcast\" for sending the transaction.\n+\n+        miniwallet = MiniWallet(tx_originator)\n+        tx = miniwallet.send_self_transfer(from_node=tx_originator)\n+        self.log.info(f\"Created transaction txid={tx['txid']}\")\n+\n+        self.log.debug(f\"Inspecting outbound connection i={NUM_INITIAL_CONNECTIONS}, must be the first private broadcast connection\")\n+        self.wait_until(lambda: len(node1.getrawmempool()) > 0)\n+        far_observer.wait_for_tx(tx[\"txid\"])\n+        self.log.debug(f\"Outbound connection i={NUM_INITIAL_CONNECTIONS}: the private broadcast target received and further relayed the transaction\")\n+\n+        num_private_broadcast_opened = 1 # already 1 connection to node1, confirmed by far_observer getting the tx\n+        for i in range(NUM_INITIAL_CONNECTIONS + 1, len(self.socks5_server.conf.destinations)):\n+            self.log.debug(f\"Inspecting outbound connection i={i}\")\n+            # At this point the connection may not yet have been established (A),\n+            # may be active (B), or may have already been closed (C).\n+            peer = self.socks5_server.conf.destinations[i][\"node\"]\n+            peer.wait_until(lambda: peer.message_count[\"version\"] == 1, check_connected=False)\n+            # Now it is either (B) or (C).\n+            requested_to_addr = self.socks5_server.conf.destinations[i][\"requested_to_addr\"]\n+            if peer.last_message[\"version\"].nServices != 0:\n+                self.log.debug(f\"Outbound connection i={i} to {requested_to_addr} not a private broadcast, ignoring it (maybe feeler or extra block only)\")\n+                continue\n+            self.log.debug(f\"Outbound connection i={i} to {requested_to_addr} must be a private broadcast, checking it\")\n+            assert requested_to_addr.endswith(\".onion\")\n+            peer.wait_for_disconnect()\n+            # Now it is (C).\n+            assert_equal(peer.message_count, {\n+                \"version\": 1,\n+                \"verack\": 1,\n+                \"tx\": 1,\n+                \"ping\": 1\n+            })\n+            dummy_address = CAddress()\n+            dummy_address.nServices = 0\n+            assert_equal(peer.last_message[\"version\"].nVersion, P2P_VERSION)\n+            assert_equal(peer.last_message[\"version\"].nServices, 0)\n+            assert_equal(peer.last_message[\"version\"].nTime, 0)\n+            assert_equal(peer.last_message[\"version\"].addrTo, dummy_address)\n+            assert_equal(peer.last_message[\"version\"].addrFrom, dummy_address)\n+            assert_equal(peer.last_message[\"version\"].strSubVer, \"/pynode:0.0.1/\")\n+            assert_equal(peer.last_message[\"version\"].nStartingHeight, 0)\n+            assert_equal(peer.last_message[\"version\"].relay, 0)\n+            assert_equal(peer.last_message[\"tx\"].tx.rehash(), tx[\"txid\"])\n+            self.log.debug(f\"Outbound connection i={i} is proper private broadcast, test ok\")\n+            num_private_broadcast_opened += 1\n+            if num_private_broadcast_opened == NUM_PRIVATE_BROADCAST_PER_TX:\n+                break\n+        assert_equal(num_private_broadcast_opened, NUM_PRIVATE_BROADCAST_PER_TX)\n+\n+        wtxid_int = int(tx[\"wtxid\"], 16)\n+        inv = CInv(MSG_WTX, wtxid_int)\n+\n+        self.log.info(\"Checking that the transaction is not in the originator node's mempool\")\n+        assert len(tx_originator.getrawmempool()) == 0",
      "path": "test/functional/p2p_private_broadcast.py",
      "position": null,
      "original_position": 296,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "d10a0649b018638574fa7dc316b3e783bf6cee69",
      "in_reply_to_id": null,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "d10a0649b018638574fa7dc316b3e783bf6cee69 sanity check: you can assert this because none of the private-broadcast peers are connected back to the `tx_originator`?",
      "created_at": "2024-03-11T18:40:21Z",
      "updated_at": "2024-03-11T18:41:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1520261754",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1520261754"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": 295,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 296,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1521442428",
      "pull_request_review_id": 1931025116,
      "id": 1521442428,
      "node_id": "PRRC_kwDOABII585ar158",
      "diff_hunk": "@@ -1900,6 +1911,23 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n \n     connOptions.m_i2p_accept_incoming = args.GetBoolArg(\"-i2pacceptincoming\", DEFAULT_I2P_ACCEPT_INCOMING);\n \n+    if (args.GetBoolArg(\"-privatebroadcast\", DEFAULT_PRIVATE_BROADCAST)) {\n+        // If -listenonion is set, then NET_ONION may not be reachable now\n+        // but may become reachable later, thus only error here if it is not\n+        // reachable and will not become reachable for sure.\n+        if (!g_reachable_nets.Contains(NET_I2P) && !g_reachable_nets.Contains(NET_ONION) &&\n+            (!listenonion || args.IsArgSet(\"-onlynet\"))) {",
      "path": "src/init.cpp",
      "position": null,
      "original_position": 52,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "72f0dbc99e6eed26bef21965dabc5f0bebf01b33",
      "in_reply_to_id": 1517981961,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It would be possible.\r\n`-privatebroadcast=1 -listenonion=1 -torcontrol=... -torpassword=...` would do exactly that and allow the startup to proceed. However, `args.IsArgSet(\"-onlynet\")` was misplaced. It was intended to give error on things like\r\n`-privatebroadcast=1 -listenonion=1 -torcontrol=... -torpassword=... -onlynet=ipv4` but it was too strong and would mistakenly forbid\r\n`-privatebroadcast=1 -listenonion=1 -torcontrol=... -torpassword=... -onlynet=onion` as well.\r\n\r\nChanged.",
      "created_at": "2024-03-12T13:12:59Z",
      "updated_at": "2024-03-12T13:12:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1521442428",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1521442428"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1961,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1521449066",
      "pull_request_review_id": 1931037458,
      "id": 1521449066,
      "node_id": "PRRC_kwDOABII585ar3hq",
      "diff_hunk": "@@ -2413,6 +2413,63 @@ bool CConnman::MaybePickPreferredNetwork(std::optional<Network>& network)\n     return false;\n }\n \n+/**\n+ * Decide whether to open a private broadcast connection and if yes, to which network.\n+ * @param[in,out] net If the previous attempt to open a connection was an attempt to\n+ * open a private broadcast connection (successful or not), then this should have a\n+ * value. When the function ends if this has value then it will contain the network\n+ * to which to open the connection.\n+ * @param[in] num_needed Number of private broadcast connections that need to be opened.\n+ * @param[in] num_opened Number of private broadcast connections that are currently opened.\n+ */\n+static void MaybePickPrivateBroadcastNetwork(std::optional<Network>& net, size_t num_needed, size_t num_opened)\n+{\n+    if (net.has_value()) {\n+        // Yield to other connection types.\n+        net = std::nullopt;\n+        return;\n+    }\n+\n+    if (num_needed == 0) {\n+        net = std::nullopt;\n+        return;\n+    }\n+\n+    if (num_opened >= MAX_PRIVATE_BROADCAST_CONNECTIONS) {\n+        LogPrintLevel(BCLog::PRIVATE_BROADCAST,\n+                      BCLog::Level::Debug,\n+                      \"Requested to open %d connection(s), but there are already %d \"\n+                      \"connections opened. Will wait for some of them to be closed \"\n+                      \"before opening a new one\\n\",\n+                      num_needed,\n+                      num_opened);\n+        net = std::nullopt;\n+        return;\n+    }\n+\n+    const bool tor_reachable{g_reachable_nets.Contains(NET_ONION)};\n+    const bool i2p_reachable{g_reachable_nets.Contains(NET_I2P)};\n+    if (tor_reachable && i2p_reachable) {\n+        net = FastRandomContext{}.randbool() ? NET_ONION : NET_I2P;\n+    } else if (tor_reachable) {\n+        net = NET_ONION;\n+    } else if (i2p_reachable) {\n+        net = NET_I2P;\n+    } else {\n+        LogPrintLevel(BCLog::PRIVATE_BROADCAST,\n+                      BCLog::Level::Warning,\n+                      \"Requested to open %d connection(s) but none of the Tor or I2P networks is reachable.\\n\",\n+                      num_needed);\n+        net = std::nullopt;\n+        return;\n+    }\n+\n+    LogPrintLevel(BCLog::PRIVATE_BROADCAST,\n+                  BCLog::Level::Debug,\n+                  \"Requested to open %d connection(s), trying to open one\\n\",\n+                  num_needed);",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 67,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "4e19f9cc9834c0b76a2d03fea0921879de46fea9",
      "in_reply_to_id": 1518175963,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think it is ok. This function is a helper of the caller which opens the connection. The doc of the function reads: `Decide whether to open a private broadcast connection and if yes, to which network.`",
      "created_at": "2024-03-12T13:16:53Z",
      "updated_at": "2024-03-12T13:16:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1521449066",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1521449066"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": 2467,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 2465,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1521573338",
      "pull_request_review_id": 1931240276,
      "id": 1521573338,
      "node_id": "PRRC_kwDOABII585asV3a",
      "diff_hunk": "@@ -2886,6 +2964,16 @@ void CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFai\n         return;\n     pnode->grantOutbound = std::move(grant_outbound);\n \n+    if (conn_type == ConnectionType::PRIVATE_BROADCAST) {\n+        const size_t before_sub{m_private_broadcast_connections_to_open.fetch_sub(1)};",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 170,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "4e19f9cc9834c0b76a2d03fea0921879de46fea9",
      "in_reply_to_id": 1518178949,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added `Assume()`",
      "created_at": "2024-03-12T14:29:17Z",
      "updated_at": "2024-03-12T14:29:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1521573338",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1521573338"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3054,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1521584926",
      "pull_request_review_id": 1931259359,
      "id": 1521584926,
      "node_id": "PRRC_kwDOABII585asYse",
      "diff_hunk": "@@ -2051,7 +2065,7 @@ NodeClock::time_point CWallet::GetDefaultNextResend() { return FastRandomContext\n // that depends on the `relay` option. Periodic rebroadcast uses the pattern\n // relay=true force=false, while loading into the mempool\n // (on start, or after import) uses relay=false force=true.\n-void CWallet::ResubmitWalletTransactions(bool relay, bool force)\n+void CWallet::ResubmitWalletTransactions(TxBroadcastMethod broadcast_method, bool force)",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 46,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "532e63279a3c04fef8da2c1bb95e5280c94abc4e",
      "in_reply_to_id": 1518194970,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Right, changed.",
      "created_at": "2024-03-12T14:36:08Z",
      "updated_at": "2024-03-12T14:36:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1521584926",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1521584926"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2069,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1521812693",
      "pull_request_review_id": 1931643945,
      "id": 1521812693,
      "node_id": "PRRC_kwDOABII585atQTV",
      "diff_hunk": "@@ -1083,6 +1087,62 @@ class PeerManagerImpl final : public PeerManager\n \n     void AddAddressKnown(Peer& peer, const CAddress& addr) EXCLUSIVE_LOCKS_REQUIRED(g_msgproc_mutex);\n     void PushAddress(Peer& peer, const CAddress& addr) EXCLUSIVE_LOCKS_REQUIRED(g_msgproc_mutex);\n+\n+    /**\n+     * Store a list of transactions to be broadcast privately. Supports the following operations:\n+     * - Add a new transaction\n+     * - Remove a transaction, after it has been seen by the network\n+     * - Mark a broadcast of a transaction (remember when and how many times)\n+     * - Get a transaction for broadcast, the one that has been broadcast less times and least recently\n+     */\n+    class PrivateBroadcast\n+    {\n+    public:\n+        void Add(const CTransactionRef& tx) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+        {\n+            const Txid& txid = tx->GetHash();\n+            LOCK(m_mutex);\n+            auto [pos, inserted] = m_by_txid.emplace(txid, TxWithPriority{.tx = tx, .priority = Priority{}});\n+            if (inserted) {\n+                m_by_priority.emplace(Priority{}, txid);\n+            }\n+        }\n+\n+    private:\n+        struct Priority {\n+            size_t num_broadcasted{0};\n+            std::chrono::microseconds last_broadcasted{0};\n+\n+            bool operator<(const Priority& other) const\n+            {\n+                if (num_broadcasted < other.num_broadcasted) {\n+                    return true;\n+                }\n+                return last_broadcasted < other.last_broadcasted;\n+            }\n+        };\n+\n+        struct TxWithPriority {\n+            CTransactionRef tx;\n+            Priority priority;\n+        };\n+\n+        struct TxidHasher {\n+            size_t operator()(const Txid& txid) const { return SipHashUint256(0, 0, txid.ToUint256()); }",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 63,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "eb9d7386ca82319ab682fc20ab35c13340d108a4",
      "in_reply_to_id": 1518225842,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "https://www.erisian.com.au/bitcoin-core-dev/log-2024-03-12.html#l-136 switched to `SaltedTxidHasher`.",
      "created_at": "2024-03-12T16:49:32Z",
      "updated_at": "2024-03-12T16:49:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1521812693",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1521812693"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1236,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1521854424",
      "pull_request_review_id": 1931752158,
      "id": 1521854424,
      "node_id": "PRRC_kwDOABII585atafY",
      "diff_hunk": "@@ -1108,6 +1116,71 @@ class PeerManagerImpl final : public PeerManager\n             }\n         }\n \n+        /**\n+         * Get the transaction that has been broadcast less times and least recently.\n+         */\n+        std::optional<CTransactionRef> GetTxForBroadcast() const EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+        {\n+            LOCK(m_mutex);\n+            if (m_by_priority.empty()) {\n+                return std::nullopt;\n+            }\n+            const Txid& txid = m_by_priority.begin()->second;\n+            auto it = m_by_txid.find(txid);\n+            if (it == m_by_txid.end()) {\n+                return std::nullopt;",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 42,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "07dee91112189be02c6694385de261570725b56b",
      "in_reply_to_id": 1518256562,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added `Assume()` that the entry is found.",
      "created_at": "2024-03-12T17:20:01Z",
      "updated_at": "2024-03-12T17:20:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1521854424",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1521854424"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1150,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1521863661",
      "pull_request_review_id": 1931777320,
      "id": 1521863661,
      "node_id": "PRRC_kwDOABII585atcvt",
      "diff_hunk": "@@ -1566,26 +1665,53 @@ void PeerManagerImpl::FindNextBlocks(std::vector<const CBlockIndex*>& vBlocks, c\n \n void PeerManagerImpl::PushNodeVersion(CNode& pnode, const Peer& peer)\n {\n-    uint64_t my_services{peer.m_our_services};\n-    const int64_t nTime{count_seconds(GetTime<std::chrono::seconds>())};\n-    uint64_t nonce = pnode.GetLocalNonce();\n-    const int nNodeStartingHeight{m_best_height};\n-    NodeId nodeid = pnode.GetId();\n-    CAddress addr = pnode.addr;\n-\n-    CService addr_you = addr.IsRoutable() && !IsProxy(addr) && addr.IsAddrV1Compatible() ? addr : CService();\n-    uint64_t your_services{addr.nServices};\n-\n-    const bool tx_relay{!RejectIncomingTxs(pnode)};\n-    MakeAndPushMessage(pnode, NetMsgType::VERSION, PROTOCOL_VERSION, my_services, nTime,\n-            your_services, CNetAddr::V1(addr_you), // Together the pre-version-31402 serialization of CAddress \"addrYou\" (without nTime)\n-            my_services, CNetAddr::V1(CService{}), // Together the pre-version-31402 serialization of CAddress \"addrMe\" (without nTime)\n-            nonce, strSubVersion, nNodeStartingHeight, tx_relay);\n-\n+    uint64_t my_services;\n+    int64_t my_time;\n+    uint64_t your_services;\n+    CService your_addr;\n+    std::string my_user_agent;\n+    int my_height;\n+    bool my_tx_relay;\n+    if (pnode.IsPrivateBroadcastConn()) {\n+        my_services = NODE_NONE;\n+        my_time = 0;\n+        your_services = NODE_NONE;\n+        your_addr = CService{};\n+        my_user_agent = \"/pynode:0.0.1/\";",
      "path": "src/net_processing.cpp",
      "position": 105,
      "original_position": 172,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "07dee91112189be02c6694385de261570725b56b",
      "in_reply_to_id": 1518263617,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "See this: https://github.com/bitcoin/bitcoin/pull/27509#discussion_r1214671917",
      "created_at": "2024-03-12T17:27:09Z",
      "updated_at": "2024-03-12T17:27:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1521863661",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1521863661"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1644,
      "original_line": 1644,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1521865397",
      "pull_request_review_id": 1931781298,
      "id": 1521865397,
      "node_id": "PRRC_kwDOABII585atdK1",
      "diff_hunk": "@@ -3706,7 +3885,7 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n                       (mapped_as ? strprintf(\", mapped_as=%d\", mapped_as) : \"\"));\n         }\n \n-        if (pfrom.GetCommonVersion() >= SHORT_IDS_BLOCKS_VERSION) {\n+        if (pfrom.GetCommonVersion() >= SHORT_IDS_BLOCKS_VERSION && !pfrom.IsPrivateBroadcastConn()) {",
      "path": "src/net_processing.cpp",
      "position": 475,
      "original_position": 291,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "07dee91112189be02c6694385de261570725b56b",
      "in_reply_to_id": 1518279844,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Somehow I find this more clear. Some redundancy doesn't hurt.",
      "created_at": "2024-03-12T17:28:08Z",
      "updated_at": "2024-03-12T17:28:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1521865397",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1521865397"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 4112,
      "original_line": 4112,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1521879812",
      "pull_request_review_id": 1931815592,
      "id": 1521879812,
      "node_id": "PRRC_kwDOABII585atgsE",
      "diff_hunk": "@@ -4929,6 +5133,16 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n                     if (ping_time.count() >= 0) {\n                         // Let connman know about this successful ping-pong\n                         pfrom.PongReceived(ping_time);\n+                        if (pfrom.IsPrivateBroadcastConn()) {\n+                            m_tx_for_private_broadcast.BroadcastEnd(pfrom.GetId(), /*confirmed_by_node=*/true);",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 339,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "07dee91112189be02c6694385de261570725b56b",
      "in_reply_to_id": 1518282738,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "By \"probably successful private broadcast\" I meant that probably the transaction will successfully reach the network, not that we successfully gave it to one peer. Reworded.\r\n\r\n~Also the return value of `BroadcastEnd()` was not used by the callers. Changed it to `void`.~ ignore this nonsense",
      "created_at": "2024-03-12T17:37:14Z",
      "updated_at": "2024-03-12T18:01:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1521879812",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1521879812"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5357,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1521896483",
      "pull_request_review_id": 1931861170,
      "id": 1521896483,
      "node_id": "PRRC_kwDOABII585atkwj",
      "diff_hunk": "@@ -2657,7 +2733,9 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n             CAddress addr;\n             NodeSeconds addr_last_try{0s};\n \n-            if (fFeeler) {\n+            if (open_private_broadcast_to.has_value()) {\n+                std::tie(addr, addr_last_try) = addrman.Select(/*new_only=*/false, open_private_broadcast_to.value());",
      "path": "src/net.cpp",
      "position": 220,
      "original_position": 160,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "4e19f9cc9834c0b76a2d03fea0921879de46fea9",
      "in_reply_to_id": 1520139562,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "No, in that case `Select()` will return an invalid address and we will `break;` from the inside loop. Then the outside loop will call `MaybePickPrivateBroadcastNetwork()` again.",
      "created_at": "2024-03-12T17:50:14Z",
      "updated_at": "2024-03-12T17:50:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1521896483",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1521896483"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2741,
      "original_line": 2741,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1521900121",
      "pull_request_review_id": 1931871701,
      "id": 1521900121,
      "node_id": "PRRC_kwDOABII585atlpZ",
      "diff_hunk": "@@ -1797,10 +1820,56 @@ void PeerManagerImpl::ReattemptInitialBroadcast(CScheduler& scheduler)\n         }\n     }\n \n-    // Schedule next run for 10-15 minutes in the future.\n-    // We add randomness on every cycle to avoid the possibility of P2P fingerprinting.\n-    const std::chrono::milliseconds delta = 10min + GetRandMillis(5min);\n-    scheduler.scheduleFromNow([&] { ReattemptInitialBroadcast(scheduler); }, delta);\n+    scheduler.scheduleFromNow([&] { ReattemptInitialBroadcast(scheduler); }, NextTxBroadcast());\n+}\n+\n+void PeerManagerImpl::ReattemptPrivateBroadcast(CScheduler& scheduler)\n+{\n+    // The following heuristic is subject to races, but that is ok: if it overshoots,\n+    // we will open some private connections in vain, if it undershoots, the stale\n+    // transactions will be picked on the next run.\n+\n+    size_t num_active{0};\n+    m_connman.ForEachNode([&num_active](const CNode* node) {\n+        if (node->IsPrivateBroadcastConn()) {\n+            ++num_active;\n+        }\n+    });\n+\n+    const size_t num_to_open{m_connman.NumPrivateBroadcastToOpen()};\n+\n+    // Remove stale transactions that are no longer relevant (e.g. already in\n+    // the mempool or mined) and count the remaining ones.\n+    size_t num_stale{0};\n+    const auto stale_txs = m_tx_for_private_broadcast.GetStale();\n+    {\n+        LOCK(cs_main);\n+        for (const auto& stale_tx : stale_txs) {\n+            auto mempool_acceptable = m_chainman.ProcessTransaction(stale_tx, /*test_accept=*/true);\n+            if (mempool_acceptable.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n+                LogPrintLevel(BCLog::PRIVATE_BROADCAST,\n+                              BCLog::Level::Debug,\n+                              \"Reattempting broadcast of stale txid=%s wtxid=%s\\n\",\n+                              stale_tx->GetHash().ToString(),\n+                              stale_tx->GetWitnessHash().ToString());\n+                ++num_stale;\n+            } else {\n+                LogPrintLevel(BCLog::PRIVATE_BROADCAST,\n+                              BCLog::Level::Info,\n+                              \"Giving up broadcast attempts for txid=%s wtxid=%s: %s\\n\",\n+                              stale_tx->GetHash().ToString(),\n+                              stale_tx->GetWitnessHash().ToString(),\n+                              mempool_acceptable.m_state.ToString());\n+                m_tx_for_private_broadcast.Remove(stale_tx);\n+            }\n+        }\n+    }\n+\n+    if (num_stale > num_active + num_to_open) {",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 97,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "c09d6409c957af7c449a60778689d6715d9a6628",
      "in_reply_to_id": 1520152548,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`NUM_PRIVATE_BROADCAST_PER_TX` is just for the initial broadcast. Then if a transaction gets stale, we retry one shot at a time. There is no special reason for this. Could be either way.",
      "created_at": "2024-03-12T17:53:17Z",
      "updated_at": "2024-03-12T17:53:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1521900121",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1521900121"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1901,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1523138657",
      "pull_request_review_id": 1933992798,
      "id": 1523138657,
      "node_id": "PRRC_kwDOABII585ayUBh",
      "diff_hunk": "@@ -89,11 +91,14 @@ static RPCHelpMan sendrawtransaction()\n             std::string err_string;\n             AssertLockNotHeld(cs_main);\n             NodeContext& node = EnsureAnyNodeContext(request.context);\n+            const auto method = gArgs.GetBoolArg(\"-privatebroadcast\", DEFAULT_PRIVATE_BROADCAST) ?\n+                                    NO_MEMPOOL_PRIVATE_BROADCAST :",
      "path": "src/rpc/mempool.cpp",
      "position": null,
      "original_position": 16,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "e36a1b4848f8f762b550a9469993211d41bd6cb9",
      "in_reply_to_id": 1520191910,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yeah, it was before as well. Somehow the code and the comments around this say that \"the transaction is sent to the mempool for broadcast\" which is not quite accurate (in `master`). I don't think that the mempool is broadcasting the transaction. Will leave it as it is for now.",
      "created_at": "2024-03-13T12:27:09Z",
      "updated_at": "2024-03-13T12:27:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1523138657",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1523138657"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 95,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1523162366",
      "pull_request_review_id": 1934036115,
      "id": 1523162366,
      "node_id": "PRRC_kwDOABII585ayZz-",
      "diff_hunk": "@@ -0,0 +1,311 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test how locally submitted transactions are sent to the network when private broadcast is used.\n+\n+The topology in the test is:\n+\n+Bitcoin Core (tx_originator)\n+               ^   v       The default full-outbound + block-only connections\n+               |   |       (MAX_OUTBOUND_FULL_RELAY_CONNECTIONS + MAX_BLOCK_RELAY_ONLY_CONNECTIONS):\n+               |   |\n+               |   *-----> SOCKS5 Proxy ---> P2PInterface (self.socks5_server.conf.destinations[0][\"node\"])\n+               |   |\n+               |   *-----> SOCKS5 Proxy ---> P2PInterface (self.socks5_server.conf.destinations[1][\"node\"])\n+               |   ...\n+               |   |       The private broadcast TX recipients\n+               |   |       (NUM_PRIVATE_BROADCAST_PER_TX)\n+               |   |       plus maybe some feeler or extra block only connections:\n+               |   |\n+               |   *-----> SOCKS5 Proxy ---> Bitcoin Core (node1) (self.socks5_server.conf.destinations[i][\"node\"] is None)\n+               |   |                          ^\n+               |   |                          *----< P2PInterface (far_observer) (to check Bitcoin Core relays the tx)\n+               |   |\n+               |   *-----> SOCKS5 Proxy ---> P2PInterface (self.socks5_server.conf.destinations[i + 1][\"node\"])\n+               |   ...\n+               |\n+               *---------< P2PDataStore (observer_inbound)\n+\"\"\"\n+\n+from test_framework.p2p import (\n+    P2PDataStore,\n+    P2PInterface,\n+    P2P_SERVICES,\n+    P2P_VERSION,\n+)\n+from test_framework.messages import (\n+    CAddress,\n+    CInv,\n+    MSG_WTX,\n+    msg_inv,\n+)\n+from test_framework.socks5 import (\n+    Socks5Configuration,\n+    Socks5Server,\n+)\n+from test_framework.test_framework import (\n+    BitcoinTestFramework,\n+)\n+from test_framework.util import (\n+    MAX_NODES,\n+    assert_equal,\n+    p2p_port,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+)\n+\n+MAX_OUTBOUND_FULL_RELAY_CONNECTIONS = 8\n+MAX_BLOCK_RELAY_ONLY_CONNECTIONS = 2\n+NUM_INITIAL_CONNECTIONS = MAX_OUTBOUND_FULL_RELAY_CONNECTIONS + MAX_BLOCK_RELAY_ONLY_CONNECTIONS\n+NUM_PRIVATE_BROADCAST_PER_TX = 5\n+\n+# Fill addrman with these addresses. Must have enough Tor addresses, so that even\n+# if all 10 default connections are opened to a Tor address (!?) there must be more\n+# for private broadcast.\n+addresses = [\n+    \"1.65.195.98\",\n+    \"2.59.236.56\",\n+    \"2.83.114.20\",\n+    \"2.248.194.16\",\n+    \"5.2.154.6\",\n+    \"5.101.140.30\",\n+    \"5.128.87.126\",\n+    \"5.144.21.49\",\n+    \"5.172.132.104\",\n+    \"5.188.62.18\",\n+    \"5.200.2.180\",\n+    \"8.129.184.255\",\n+    \"8.209.105.138\",\n+    \"12.34.98.148\",\n+    \"14.199.102.151\",\n+    \"18.27.79.17\",\n+    \"18.27.124.231\",\n+    \"18.216.249.151\",\n+    \"23.88.155.58\",\n+    \"23.93.101.158\",\n+    \"[2001:19f0:1000:1db3:5400:4ff:fe56:5a8d]\",\n+    \"[2001:19f0:5:24da:3eec:efff:feb9:f36e]\",\n+    \"[2001:19f0:5:24da::]\",\n+    \"[2001:19f0:5:4535:3eec:efff:feb9:87e4]\",\n+    \"[2001:19f0:5:4535::]\",\n+    \"[2001:1bc0:c1::2000]\",\n+    \"[2001:1c04:4008:6300:8a5f:2678:114b:a660]\",\n+    \"[2001:41d0:203:3739::]\",\n+    \"[2001:41d0:203:8f49::]\",\n+    \"[2001:41d0:203:bb0a::]\",\n+    \"[2001:41d0:2:bf8f::]\",\n+    \"[2001:41d0:303:de8b::]\",\n+    \"[2001:41d0:403:3d61::]\",\n+    \"[2001:41d0:405:9600::]\",\n+    \"[2001:41d0:8:ed7f::1]\",\n+    \"[2001:41d0:a:69a2::1]\",\n+    \"[2001:41f0::62:6974:636f:696e]\",\n+    \"[2001:470:1b62::]\",\n+    \"[2001:470:1f05:43b:2831:8530:7179:5864]\",\n+    \"[2001:470:1f09:b14::11]\",\n+    \"2bqghnldu6mcug4pikzprwhtjjnsyederctvci6klcwzepnjd46ikjyd.onion\",\n+    \"4lr3w2iyyl5u5l6tosizclykf5v3smqroqdn2i4h3kq6pfbbjb2xytad.onion\",\n+    \"5g72ppm3krkorsfopcm2bi7wlv4ohhs4u4mlseymasn7g7zhdcyjpfid.onion\",\n+    \"5sbmcl4m5api5tqafi4gcckrn3y52sz5mskxf3t6iw4bp7erwiptrgqd.onion\",\n+    \"776aegl7tfhg6oiqqy76jnwrwbvcytsx2qegcgh2mjqujll4376ohlid.onion\",\n+    \"77mdte42srl42shdh2mhtjr7nf7dmedqrw6bkcdekhdvmnld6ojyyiad.onion\",\n+    \"azbpsh4arqlm6442wfimy7qr65bmha2zhgjg7wbaji6vvaug53hur2qd.onion\",\n+    \"b64xcbleqmwgq2u46bh4hegnlrzzvxntyzbmucn3zt7cssm7y4ubv3id.onion\",\n+    \"bsqbtcparrfihlwolt4xgjbf4cgqckvrvsfyvy6vhiqrnh4w6ghixoid.onion\",\n+    \"bsqbtctulf2g4jtjsdfgl2ed7qs6zz5wqx27qnyiik7laockryvszqqd.onion\",\n+    \"cwi3ekrwhig47dhhzfenr5hbvckj7fzaojygvazi2lucsenwbzwoyiqd.onion\",\n+    \"devinbtcmwkuitvxl3tfi5of4zau46ymeannkjv6fpnylkgf3q5fa3id.onion\",\n+    \"devinbtctu7uctl7hly2juu3thbgeivfnvw3ckj3phy6nyvpnx66yeyd.onion\",\n+    \"devinbtcyk643iruzfpaxw3on2jket7rbjmwygm42dmdyub3ietrbmid.onion\",\n+    \"dtql5vci4iaml4anmueftqr7bfgzqlauzfy4rc2tfgulldd3ekyijjyd.onion\",\n+    \"emzybtc25oddoa2prol2znpz2axnrg6k77xwgirmhv7igoiucddsxiad.onion\",\n+    \"emzybtc3ewh7zihpkdvuwlgxrhzcxy2p5fvjggp7ngjbxcytxvt4rjid.onion\",\n+    \"emzybtc454ewbviqnmgtgx3rgublsgkk23r4onbhidcv36wremue4kqd.onion\",\n+    \"emzybtc5bnpb2o6gh54oquiox54o4r7yn4a2wiiwzrjonlouaibm2zid.onion\",\n+    \"fpz6r5ppsakkwypjcglz6gcnwt7ytfhxskkfhzu62tnylcknh3eq6pad.onion\",\n+    \"255fhcp6ajvftnyo7bwz3an3t4a4brhopm3bamyh2iu5r3gnr2rq.b32.i2p\",\n+    \"27yrtht5b5bzom2w5ajb27najuqvuydtzb7bavlak25wkufec5mq.b32.i2p\",\n+    \"3gocb7wc4zvbmmebktet7gujccuux4ifk3kqilnxnj5wpdpqx2hq.b32.i2p\",\n+    \"4fcc23wt3hyjk3csfzcdyjz5pcwg5dzhdqgma6bch2qyiakcbboa.b32.i2p\",\n+    \"4osyqeknhx5qf3a73jeimexwclmt42cju6xdp7icja4ixxguu2hq.b32.i2p\",\n+    \"4umsi4nlmgyp4rckosg4vegd2ysljvid47zu7pqsollkaszcbpqq.b32.i2p\",\n+    \"6j2ezegd3e2e2x3o3pox335f5vxfthrrigkdrbgfbdjchm5h4awa.b32.i2p\",\n+    \"6n36ljyr55szci5ygidmxqer64qr24f4qmnymnbvgehz7qinxnla.b32.i2p\",\n+    \"72yjs6mvlby3ky6mgpvvlemmwq5pfcznrzd34jkhclgrishqdxva.b32.i2p\",\n+    \"a5qsnv3maw77mlmmzlcglu6twje6ttctd3fhpbfwcbpmewx6fczq.b32.i2p\",\n+    \"aovep2pco7v2k4rheofrgytbgk23eg22dczpsjqgqtxcqqvmxk6a.b32.i2p\",\n+    \"bitcoi656nll5hu6u7ddzrmzysdtwtnzcnrjd4rfdqbeey7dmn5a.b32.i2p\",\n+    \"brifkruhlkgrj65hffybrjrjqcgdgqs2r7siizb5b2232nruik3a.b32.i2p\",\n+    \"c4gfnttsuwqomiygupdqqqyy5y5emnk5c73hrfvatri67prd7vyq.b32.i2p\",\n+    \"day3hgxyrtwjslt54sikevbhxxs4qzo7d6vi72ipmscqtq3qmijq.b32.i2p\",\n+    \"du5kydummi23bjfp6bd7owsvrijgt7zhvxmz5h5f5spcioeoetwq.b32.i2p\",\n+    \"e55k6wu46rzp4pg5pk5npgbr3zz45bc3ihtzu2xcye5vwnzdy7pq.b32.i2p\",\n+    \"eciohu5nq7vsvwjjc52epskuk75d24iccgzmhbzrwonw6lx4gdva.b32.i2p\",\n+    \"ejlnngarmhqvune74ko7kk55xtgbz5i5ncs4vmnvjpy3l7y63xaa.b32.i2p\",\n+    \"fhzlp3xroabohnmjonu5iqazwhlbbwh5cpujvw2azcu3srqdceja.b32.i2p\",\n+    \"[fc32:17ea:e415:c3bf:9808:149d:b5a2:c9aa]\",\n+    \"[fcc7:be49:ccd1:dc91:3125:f0da:457d:8ce]\",\n+    \"[fcdc:73ae:b1a9:1bf8:d4c2:811:a4c7:c34e]\",\n+]\n+\n+class P2PPrivateBroadcast(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.disable_autoconnect = False\n+        self.num_nodes = 2\n+\n+    def setup_nodes(self):\n+        # Start a SOCKS5 proxy server.\n+        socks5_server_config = Socks5Configuration()\n+        # self.nodes[0] listens on p2p_port(0),\n+        # self.nodes[1] listens on p2p_port(1),\n+        # thus we tell the SOCKS5 server to listen on p2p_port(self.num_nodes (which is 2))\n+        socks5_server_config.addr = (\"127.0.0.1\", p2p_port(self.num_nodes))\n+        socks5_server_config.unauth = True\n+        socks5_server_config.auth = True\n+\n+        self.socks5_server = Socks5Server(socks5_server_config)\n+        self.socks5_server.start()\n+\n+        ports_base = p2p_port(MAX_NODES) + 15000\n+\n+        # Add 2 because one feeler and one extra block relay connections may\n+        # sneak in between the private broadcast connections.\n+        for i in range(NUM_INITIAL_CONNECTIONS + NUM_PRIVATE_BROADCAST_PER_TX + 2):\n+            if i == NUM_INITIAL_CONNECTIONS:\n+                # Instruct the SOCKS5 server to redirect the first private\n+                # broadcast connection from nodes[0] to nodes[1]\n+                self.socks5_server.conf.destinations.append({\n+                    \"listen_addr\": \"127.0.0.1\", # nodes[1] listen address\n+                    \"listen_port\": p2p_port(1), # nodes[1] listen port\n+                    \"node\": None,\n+                    \"requested_to_addr\": None,\n+                })\n+            else:\n+                # Create a Python P2P listening node and add it to self.socks5_server.conf.destinations[]\n+                listener = P2PInterface()\n+                listener.peer_connect_helper(dstaddr=\"0.0.0.0\", dstport=0, net=self.chain, timeout_factor=self.options.timeout_factor)\n+                listener.peer_connect_send_version(services=P2P_SERVICES)\n+                self.network_thread.listen(\n+                    p2p=listener,\n+                    # Instruct the SOCKS5 server to redirect a connection to this Python P2P listener.\n+                    callback=lambda addr, port: self.socks5_server.conf.destinations.append({\n+                        \"listen_addr\": addr,\n+                        \"listen_port\": port,\n+                        \"node\": None,\n+                        \"requested_to_addr\": None,\n+                    }),\n+                    addr=\"127.0.0.1\",\n+                    port=ports_base + i)\n+                # Wait until the callback has been called and it has done append().\n+                self.wait_until(lambda: len(self.socks5_server.conf.destinations) == i + 1)\n+\n+                self.socks5_server.conf.destinations[i][\"node\"] = listener\n+\n+        self.extra_args = [\n+            [\n+                \"-peerbloomfilters\", # needed to test replies to MEMPOOL\n+                \"-cjdnsreachable\", # needed to be able to add CJDNS addresses to addrman (otherwise they are unroutable).\n+                \"-privatebroadcast\",\n+                f\"-proxy={socks5_server_config.addr[0]}:{socks5_server_config.addr[1]}\",\n+            ],\n+            [\n+                \"-connect=0\",\n+                f\"-bind=127.0.0.1:{p2p_port(1)}=onion\", # consider all incoming as coming from Tor\n+            ],\n+        ]\n+        super().setup_nodes()\n+\n+    def setup_network(self):\n+        self.setup_nodes()\n+\n+    def run_test(self):\n+        tx_originator = self.nodes[0]\n+\n+        observer_inbound = tx_originator.add_p2p_connection(P2PDataStore())\n+\n+        # Fill tx_originator's addrman.\n+        for addr in addresses:\n+            res = tx_originator.addpeeraddress(address=addr, port=8333, tried=False)\n+            if res[\"success\"]:\n+                self.log.debug(f\"Added {addr} to tx_originator's addrman\")\n+            else:\n+                self.log.debug(f\"Could not add {addr} to tx_originator's addrman (collision?)\")\n+\n+        self.wait_until(lambda: self.socks5_server.conf.destinations_used == NUM_INITIAL_CONNECTIONS)\n+\n+        node1 = self.nodes[1]\n+        far_observer = node1.add_p2p_connection(P2PInterface())\n+\n+        # The next opened connections should be \"private broadcast\" for sending the transaction.\n+\n+        miniwallet = MiniWallet(tx_originator)\n+        tx = miniwallet.send_self_transfer(from_node=tx_originator)\n+        self.log.info(f\"Created transaction txid={tx['txid']}\")\n+\n+        self.log.debug(f\"Inspecting outbound connection i={NUM_INITIAL_CONNECTIONS}, must be the first private broadcast connection\")\n+        self.wait_until(lambda: len(node1.getrawmempool()) > 0)\n+        far_observer.wait_for_tx(tx[\"txid\"])\n+        self.log.debug(f\"Outbound connection i={NUM_INITIAL_CONNECTIONS}: the private broadcast target received and further relayed the transaction\")\n+\n+        num_private_broadcast_opened = 1 # already 1 connection to node1, confirmed by far_observer getting the tx\n+        for i in range(NUM_INITIAL_CONNECTIONS + 1, len(self.socks5_server.conf.destinations)):\n+            self.log.debug(f\"Inspecting outbound connection i={i}\")\n+            # At this point the connection may not yet have been established (A),\n+            # may be active (B), or may have already been closed (C).\n+            peer = self.socks5_server.conf.destinations[i][\"node\"]\n+            peer.wait_until(lambda: peer.message_count[\"version\"] == 1, check_connected=False)\n+            # Now it is either (B) or (C).\n+            requested_to_addr = self.socks5_server.conf.destinations[i][\"requested_to_addr\"]\n+            if peer.last_message[\"version\"].nServices != 0:\n+                self.log.debug(f\"Outbound connection i={i} to {requested_to_addr} not a private broadcast, ignoring it (maybe feeler or extra block only)\")\n+                continue\n+            self.log.debug(f\"Outbound connection i={i} to {requested_to_addr} must be a private broadcast, checking it\")\n+            assert requested_to_addr.endswith(\".onion\")\n+            peer.wait_for_disconnect()\n+            # Now it is (C).\n+            assert_equal(peer.message_count, {\n+                \"version\": 1,\n+                \"verack\": 1,\n+                \"tx\": 1,\n+                \"ping\": 1\n+            })\n+            dummy_address = CAddress()\n+            dummy_address.nServices = 0\n+            assert_equal(peer.last_message[\"version\"].nVersion, P2P_VERSION)\n+            assert_equal(peer.last_message[\"version\"].nServices, 0)\n+            assert_equal(peer.last_message[\"version\"].nTime, 0)\n+            assert_equal(peer.last_message[\"version\"].addrTo, dummy_address)\n+            assert_equal(peer.last_message[\"version\"].addrFrom, dummy_address)\n+            assert_equal(peer.last_message[\"version\"].strSubVer, \"/pynode:0.0.1/\")\n+            assert_equal(peer.last_message[\"version\"].nStartingHeight, 0)\n+            assert_equal(peer.last_message[\"version\"].relay, 0)\n+            assert_equal(peer.last_message[\"tx\"].tx.rehash(), tx[\"txid\"])\n+            self.log.debug(f\"Outbound connection i={i} is proper private broadcast, test ok\")\n+            num_private_broadcast_opened += 1\n+            if num_private_broadcast_opened == NUM_PRIVATE_BROADCAST_PER_TX:\n+                break\n+        assert_equal(num_private_broadcast_opened, NUM_PRIVATE_BROADCAST_PER_TX)\n+\n+        wtxid_int = int(tx[\"wtxid\"], 16)\n+        inv = CInv(MSG_WTX, wtxid_int)\n+\n+        self.log.info(\"Checking that the transaction is not in the originator node's mempool\")\n+        assert len(tx_originator.getrawmempool()) == 0",
      "path": "test/functional/p2p_private_broadcast.py",
      "position": null,
      "original_position": 296,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "d10a0649b018638574fa7dc316b3e783bf6cee69",
      "in_reply_to_id": 1520261754,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, exactly.",
      "created_at": "2024-03-13T12:40:40Z",
      "updated_at": "2024-03-13T12:40:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1523162366",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1523162366"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": 295,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 296,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1528651929",
      "pull_request_review_id": 1943216946,
      "id": 1528651929,
      "node_id": "PRRC_kwDOABII585bHWCZ",
      "diff_hunk": "@@ -117,6 +128,33 @@ def handle(self):\n             cmdin = Socks5Command(cmd, atyp, addr, port, username, password)\n             self.serv.queue.put(cmdin)\n             logger.debug('Proxy: %s', cmdin)\n+",
      "path": "test/functional/test_framework/socks5.py",
      "position": 41,
      "original_position": 29,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "2b2e747455699236200fa3cddddfff7005f6a44a",
      "in_reply_to_id": 1520210992,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I will leave it as it is, looks too complicated after looking at doing this for some time.",
      "created_at": "2024-03-18T14:16:14Z",
      "updated_at": "2024-03-18T14:16:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1528651929",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1528651929"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 138,
      "original_line": 138,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1528654321",
      "pull_request_review_id": 1943220975,
      "id": 1528654321,
      "node_id": "PRRC_kwDOABII585bHWnx",
      "diff_hunk": "@@ -0,0 +1,311 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test how locally submitted transactions are sent to the network when private broadcast is used.\n+\n+The topology in the test is:\n+\n+Bitcoin Core (tx_originator)\n+               ^   v       The default full-outbound + block-only connections\n+               |   |       (MAX_OUTBOUND_FULL_RELAY_CONNECTIONS + MAX_BLOCK_RELAY_ONLY_CONNECTIONS):\n+               |   |\n+               |   *-----> SOCKS5 Proxy ---> P2PInterface (self.socks5_server.conf.destinations[0][\"node\"])\n+               |   |\n+               |   *-----> SOCKS5 Proxy ---> P2PInterface (self.socks5_server.conf.destinations[1][\"node\"])\n+               |   ...\n+               |   |       The private broadcast TX recipients\n+               |   |       (NUM_PRIVATE_BROADCAST_PER_TX)\n+               |   |       plus maybe some feeler or extra block only connections:\n+               |   |\n+               |   *-----> SOCKS5 Proxy ---> Bitcoin Core (node1) (self.socks5_server.conf.destinations[i][\"node\"] is None)\n+               |   |                          ^\n+               |   |                          *----< P2PInterface (far_observer) (to check Bitcoin Core relays the tx)\n+               |   |\n+               |   *-----> SOCKS5 Proxy ---> P2PInterface (self.socks5_server.conf.destinations[i + 1][\"node\"])\n+               |   ...\n+               |\n+               *---------< P2PDataStore (observer_inbound)\n+\"\"\"\n+\n+from test_framework.p2p import (\n+    P2PDataStore,\n+    P2PInterface,\n+    P2P_SERVICES,\n+    P2P_VERSION,\n+)\n+from test_framework.messages import (\n+    CAddress,\n+    CInv,\n+    MSG_WTX,\n+    msg_inv,\n+)\n+from test_framework.socks5 import (\n+    Socks5Configuration,\n+    Socks5Server,\n+)\n+from test_framework.test_framework import (\n+    BitcoinTestFramework,\n+)\n+from test_framework.util import (\n+    MAX_NODES,\n+    assert_equal,\n+    p2p_port,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+)\n+\n+MAX_OUTBOUND_FULL_RELAY_CONNECTIONS = 8\n+MAX_BLOCK_RELAY_ONLY_CONNECTIONS = 2\n+NUM_INITIAL_CONNECTIONS = MAX_OUTBOUND_FULL_RELAY_CONNECTIONS + MAX_BLOCK_RELAY_ONLY_CONNECTIONS\n+NUM_PRIVATE_BROADCAST_PER_TX = 5\n+\n+# Fill addrman with these addresses. Must have enough Tor addresses, so that even\n+# if all 10 default connections are opened to a Tor address (!?) there must be more",
      "path": "test/functional/p2p_private_broadcast.py",
      "position": 51,
      "original_position": 66,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "d10a0649b018638574fa7dc316b3e783bf6cee69",
      "in_reply_to_id": 1520232425,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "No, because `-addnode` is counted separately from the `10` automatic outbound connections.",
      "created_at": "2024-03-18T14:17:49Z",
      "updated_at": "2024-03-18T14:17:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1528654321",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1528654321"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 51,
      "original_line": 51,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1528677093",
      "pull_request_review_id": 1943255900,
      "id": 1528677093,
      "node_id": "PRRC_kwDOABII585bHcLl",
      "diff_hunk": "@@ -0,0 +1,311 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test how locally submitted transactions are sent to the network when private broadcast is used.\n+\n+The topology in the test is:\n+\n+Bitcoin Core (tx_originator)\n+               ^   v       The default full-outbound + block-only connections\n+               |   |       (MAX_OUTBOUND_FULL_RELAY_CONNECTIONS + MAX_BLOCK_RELAY_ONLY_CONNECTIONS):\n+               |   |\n+               |   *-----> SOCKS5 Proxy ---> P2PInterface (self.socks5_server.conf.destinations[0][\"node\"])\n+               |   |\n+               |   *-----> SOCKS5 Proxy ---> P2PInterface (self.socks5_server.conf.destinations[1][\"node\"])\n+               |   ...\n+               |   |       The private broadcast TX recipients\n+               |   |       (NUM_PRIVATE_BROADCAST_PER_TX)\n+               |   |       plus maybe some feeler or extra block only connections:\n+               |   |\n+               |   *-----> SOCKS5 Proxy ---> Bitcoin Core (node1) (self.socks5_server.conf.destinations[i][\"node\"] is None)\n+               |   |                          ^\n+               |   |                          *----< P2PInterface (far_observer) (to check Bitcoin Core relays the tx)\n+               |   |\n+               |   *-----> SOCKS5 Proxy ---> P2PInterface (self.socks5_server.conf.destinations[i + 1][\"node\"])\n+               |   ...\n+               |\n+               *---------< P2PDataStore (observer_inbound)\n+\"\"\"\n+\n+from test_framework.p2p import (\n+    P2PDataStore,\n+    P2PInterface,\n+    P2P_SERVICES,\n+    P2P_VERSION,\n+)\n+from test_framework.messages import (\n+    CAddress,\n+    CInv,\n+    MSG_WTX,\n+    msg_inv,\n+)\n+from test_framework.socks5 import (\n+    Socks5Configuration,\n+    Socks5Server,\n+)\n+from test_framework.test_framework import (\n+    BitcoinTestFramework,\n+)\n+from test_framework.util import (\n+    MAX_NODES,\n+    assert_equal,\n+    p2p_port,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+)\n+\n+MAX_OUTBOUND_FULL_RELAY_CONNECTIONS = 8\n+MAX_BLOCK_RELAY_ONLY_CONNECTIONS = 2\n+NUM_INITIAL_CONNECTIONS = MAX_OUTBOUND_FULL_RELAY_CONNECTIONS + MAX_BLOCK_RELAY_ONLY_CONNECTIONS\n+NUM_PRIVATE_BROADCAST_PER_TX = 5\n+\n+# Fill addrman with these addresses. Must have enough Tor addresses, so that even\n+# if all 10 default connections are opened to a Tor address (!?) there must be more\n+# for private broadcast.\n+addresses = [\n+    \"1.65.195.98\",\n+    \"2.59.236.56\",\n+    \"2.83.114.20\",\n+    \"2.248.194.16\",\n+    \"5.2.154.6\",\n+    \"5.101.140.30\",\n+    \"5.128.87.126\",\n+    \"5.144.21.49\",\n+    \"5.172.132.104\",\n+    \"5.188.62.18\",\n+    \"5.200.2.180\",\n+    \"8.129.184.255\",\n+    \"8.209.105.138\",\n+    \"12.34.98.148\",\n+    \"14.199.102.151\",\n+    \"18.27.79.17\",\n+    \"18.27.124.231\",\n+    \"18.216.249.151\",\n+    \"23.88.155.58\",\n+    \"23.93.101.158\",\n+    \"[2001:19f0:1000:1db3:5400:4ff:fe56:5a8d]\",\n+    \"[2001:19f0:5:24da:3eec:efff:feb9:f36e]\",\n+    \"[2001:19f0:5:24da::]\",\n+    \"[2001:19f0:5:4535:3eec:efff:feb9:87e4]\",\n+    \"[2001:19f0:5:4535::]\",\n+    \"[2001:1bc0:c1::2000]\",\n+    \"[2001:1c04:4008:6300:8a5f:2678:114b:a660]\",\n+    \"[2001:41d0:203:3739::]\",\n+    \"[2001:41d0:203:8f49::]\",\n+    \"[2001:41d0:203:bb0a::]\",\n+    \"[2001:41d0:2:bf8f::]\",\n+    \"[2001:41d0:303:de8b::]\",\n+    \"[2001:41d0:403:3d61::]\",\n+    \"[2001:41d0:405:9600::]\",\n+    \"[2001:41d0:8:ed7f::1]\",\n+    \"[2001:41d0:a:69a2::1]\",\n+    \"[2001:41f0::62:6974:636f:696e]\",\n+    \"[2001:470:1b62::]\",\n+    \"[2001:470:1f05:43b:2831:8530:7179:5864]\",\n+    \"[2001:470:1f09:b14::11]\",\n+    \"2bqghnldu6mcug4pikzprwhtjjnsyederctvci6klcwzepnjd46ikjyd.onion\",\n+    \"4lr3w2iyyl5u5l6tosizclykf5v3smqroqdn2i4h3kq6pfbbjb2xytad.onion\",\n+    \"5g72ppm3krkorsfopcm2bi7wlv4ohhs4u4mlseymasn7g7zhdcyjpfid.onion\",\n+    \"5sbmcl4m5api5tqafi4gcckrn3y52sz5mskxf3t6iw4bp7erwiptrgqd.onion\",\n+    \"776aegl7tfhg6oiqqy76jnwrwbvcytsx2qegcgh2mjqujll4376ohlid.onion\",\n+    \"77mdte42srl42shdh2mhtjr7nf7dmedqrw6bkcdekhdvmnld6ojyyiad.onion\",\n+    \"azbpsh4arqlm6442wfimy7qr65bmha2zhgjg7wbaji6vvaug53hur2qd.onion\",\n+    \"b64xcbleqmwgq2u46bh4hegnlrzzvxntyzbmucn3zt7cssm7y4ubv3id.onion\",\n+    \"bsqbtcparrfihlwolt4xgjbf4cgqckvrvsfyvy6vhiqrnh4w6ghixoid.onion\",\n+    \"bsqbtctulf2g4jtjsdfgl2ed7qs6zz5wqx27qnyiik7laockryvszqqd.onion\",\n+    \"cwi3ekrwhig47dhhzfenr5hbvckj7fzaojygvazi2lucsenwbzwoyiqd.onion\",\n+    \"devinbtcmwkuitvxl3tfi5of4zau46ymeannkjv6fpnylkgf3q5fa3id.onion\",\n+    \"devinbtctu7uctl7hly2juu3thbgeivfnvw3ckj3phy6nyvpnx66yeyd.onion\",\n+    \"devinbtcyk643iruzfpaxw3on2jket7rbjmwygm42dmdyub3ietrbmid.onion\",\n+    \"dtql5vci4iaml4anmueftqr7bfgzqlauzfy4rc2tfgulldd3ekyijjyd.onion\",\n+    \"emzybtc25oddoa2prol2znpz2axnrg6k77xwgirmhv7igoiucddsxiad.onion\",\n+    \"emzybtc3ewh7zihpkdvuwlgxrhzcxy2p5fvjggp7ngjbxcytxvt4rjid.onion\",\n+    \"emzybtc454ewbviqnmgtgx3rgublsgkk23r4onbhidcv36wremue4kqd.onion\",\n+    \"emzybtc5bnpb2o6gh54oquiox54o4r7yn4a2wiiwzrjonlouaibm2zid.onion\",\n+    \"fpz6r5ppsakkwypjcglz6gcnwt7ytfhxskkfhzu62tnylcknh3eq6pad.onion\",\n+    \"255fhcp6ajvftnyo7bwz3an3t4a4brhopm3bamyh2iu5r3gnr2rq.b32.i2p\",\n+    \"27yrtht5b5bzom2w5ajb27najuqvuydtzb7bavlak25wkufec5mq.b32.i2p\",\n+    \"3gocb7wc4zvbmmebktet7gujccuux4ifk3kqilnxnj5wpdpqx2hq.b32.i2p\",\n+    \"4fcc23wt3hyjk3csfzcdyjz5pcwg5dzhdqgma6bch2qyiakcbboa.b32.i2p\",\n+    \"4osyqeknhx5qf3a73jeimexwclmt42cju6xdp7icja4ixxguu2hq.b32.i2p\",\n+    \"4umsi4nlmgyp4rckosg4vegd2ysljvid47zu7pqsollkaszcbpqq.b32.i2p\",\n+    \"6j2ezegd3e2e2x3o3pox335f5vxfthrrigkdrbgfbdjchm5h4awa.b32.i2p\",\n+    \"6n36ljyr55szci5ygidmxqer64qr24f4qmnymnbvgehz7qinxnla.b32.i2p\",\n+    \"72yjs6mvlby3ky6mgpvvlemmwq5pfcznrzd34jkhclgrishqdxva.b32.i2p\",\n+    \"a5qsnv3maw77mlmmzlcglu6twje6ttctd3fhpbfwcbpmewx6fczq.b32.i2p\",\n+    \"aovep2pco7v2k4rheofrgytbgk23eg22dczpsjqgqtxcqqvmxk6a.b32.i2p\",\n+    \"bitcoi656nll5hu6u7ddzrmzysdtwtnzcnrjd4rfdqbeey7dmn5a.b32.i2p\",\n+    \"brifkruhlkgrj65hffybrjrjqcgdgqs2r7siizb5b2232nruik3a.b32.i2p\",\n+    \"c4gfnttsuwqomiygupdqqqyy5y5emnk5c73hrfvatri67prd7vyq.b32.i2p\",\n+    \"day3hgxyrtwjslt54sikevbhxxs4qzo7d6vi72ipmscqtq3qmijq.b32.i2p\",\n+    \"du5kydummi23bjfp6bd7owsvrijgt7zhvxmz5h5f5spcioeoetwq.b32.i2p\",\n+    \"e55k6wu46rzp4pg5pk5npgbr3zz45bc3ihtzu2xcye5vwnzdy7pq.b32.i2p\",\n+    \"eciohu5nq7vsvwjjc52epskuk75d24iccgzmhbzrwonw6lx4gdva.b32.i2p\",\n+    \"ejlnngarmhqvune74ko7kk55xtgbz5i5ncs4vmnvjpy3l7y63xaa.b32.i2p\",\n+    \"fhzlp3xroabohnmjonu5iqazwhlbbwh5cpujvw2azcu3srqdceja.b32.i2p\",\n+    \"[fc32:17ea:e415:c3bf:9808:149d:b5a2:c9aa]\",\n+    \"[fcc7:be49:ccd1:dc91:3125:f0da:457d:8ce]\",\n+    \"[fcdc:73ae:b1a9:1bf8:d4c2:811:a4c7:c34e]\",\n+]\n+\n+class P2PPrivateBroadcast(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.disable_autoconnect = False\n+        self.num_nodes = 2\n+\n+    def setup_nodes(self):\n+        # Start a SOCKS5 proxy server.\n+        socks5_server_config = Socks5Configuration()\n+        # self.nodes[0] listens on p2p_port(0),\n+        # self.nodes[1] listens on p2p_port(1),\n+        # thus we tell the SOCKS5 server to listen on p2p_port(self.num_nodes (which is 2))\n+        socks5_server_config.addr = (\"127.0.0.1\", p2p_port(self.num_nodes))\n+        socks5_server_config.unauth = True\n+        socks5_server_config.auth = True\n+\n+        self.socks5_server = Socks5Server(socks5_server_config)\n+        self.socks5_server.start()\n+\n+        ports_base = p2p_port(MAX_NODES) + 15000\n+\n+        # Add 2 because one feeler and one extra block relay connections may\n+        # sneak in between the private broadcast connections.\n+        for i in range(NUM_INITIAL_CONNECTIONS + NUM_PRIVATE_BROADCAST_PER_TX + 2):\n+            if i == NUM_INITIAL_CONNECTIONS:\n+                # Instruct the SOCKS5 server to redirect the first private\n+                # broadcast connection from nodes[0] to nodes[1]\n+                self.socks5_server.conf.destinations.append({\n+                    \"listen_addr\": \"127.0.0.1\", # nodes[1] listen address\n+                    \"listen_port\": p2p_port(1), # nodes[1] listen port",
      "path": "test/functional/p2p_private_broadcast.py",
      "position": null,
      "original_position": 182,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "d10a0649b018638574fa7dc316b3e783bf6cee69",
      "in_reply_to_id": 1520245249,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Renamed.",
      "created_at": "2024-03-18T14:29:42Z",
      "updated_at": "2024-03-18T14:29:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1528677093",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1528677093"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": 181,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 182,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1528683066",
      "pull_request_review_id": 1943267875,
      "id": 1528683066,
      "node_id": "PRRC_kwDOABII585bHdo6",
      "diff_hunk": "@@ -4499,6 +4515,16 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         const uint256& hash = peer->m_wtxid_relay ? wtxid : txid;\n         AddKnownTx(*peer, hash);\n \n+        if (m_tx_for_private_broadcast.Remove(ptx)) {",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 27,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "bc05ddc7b9369cf263bf88d0a773ca853d3c9af5",
      "in_reply_to_id": 1520122930,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, good idea. Implemented.",
      "created_at": "2024-03-18T14:33:28Z",
      "updated_at": "2024-03-18T14:33:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1528683066",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1528683066"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4663,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1528684259",
      "pull_request_review_id": 1943270053,
      "id": 1528684259,
      "node_id": "PRRC_kwDOABII585bHd7j",
      "diff_hunk": "@@ -1797,10 +1820,56 @@ void PeerManagerImpl::ReattemptInitialBroadcast(CScheduler& scheduler)\n         }\n     }\n \n-    // Schedule next run for 10-15 minutes in the future.\n-    // We add randomness on every cycle to avoid the possibility of P2P fingerprinting.\n-    const std::chrono::milliseconds delta = 10min + GetRandMillis(5min);\n-    scheduler.scheduleFromNow([&] { ReattemptInitialBroadcast(scheduler); }, delta);\n+    scheduler.scheduleFromNow([&] { ReattemptInitialBroadcast(scheduler); }, NextTxBroadcast());\n+}\n+\n+void PeerManagerImpl::ReattemptPrivateBroadcast(CScheduler& scheduler)\n+{\n+    // The following heuristic is subject to races, but that is ok: if it overshoots,\n+    // we will open some private connections in vain, if it undershoots, the stale\n+    // transactions will be picked on the next run.\n+\n+    size_t num_active{0};\n+    m_connman.ForEachNode([&num_active](const CNode* node) {\n+        if (node->IsPrivateBroadcastConn()) {\n+            ++num_active;\n+        }\n+    });\n+\n+    const size_t num_to_open{m_connman.NumPrivateBroadcastToOpen()};\n+\n+    // Remove stale transactions that are no longer relevant (e.g. already in\n+    // the mempool or mined) and count the remaining ones.\n+    size_t num_stale{0};\n+    const auto stale_txs = m_tx_for_private_broadcast.GetStale();\n+    {\n+        LOCK(cs_main);\n+        for (const auto& stale_tx : stale_txs) {\n+            auto mempool_acceptable = m_chainman.ProcessTransaction(stale_tx, /*test_accept=*/true);\n+            if (mempool_acceptable.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n+                LogPrintLevel(BCLog::PRIVATE_BROADCAST,\n+                              BCLog::Level::Debug,\n+                              \"Reattempting broadcast of stale txid=%s wtxid=%s\\n\",\n+                              stale_tx->GetHash().ToString(),\n+                              stale_tx->GetWitnessHash().ToString());\n+                ++num_stale;\n+            } else {\n+                LogPrintLevel(BCLog::PRIVATE_BROADCAST,\n+                              BCLog::Level::Info,\n+                              \"Giving up broadcast attempts for txid=%s wtxid=%s: %s\\n\",\n+                              stale_tx->GetHash().ToString(),\n+                              stale_tx->GetWitnessHash().ToString(),\n+                              mempool_acceptable.m_state.ToString());\n+                m_tx_for_private_broadcast.Remove(stale_tx);\n+            }\n+        }\n+    }\n+\n+    if (num_stale > num_active + num_to_open) {",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 97,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "c09d6409c957af7c449a60778689d6715d9a6628",
      "in_reply_to_id": 1520152548,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I also renamed the variables to make it clear that we are comparing number of transactions with number of connections.",
      "created_at": "2024-03-18T14:34:17Z",
      "updated_at": "2024-03-18T14:34:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1528684259",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1528684259"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1901,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1539838051",
      "pull_request_review_id": 1961307297,
      "id": 1539838051,
      "node_id": "PRRC_kwDOABII585byBBj",
      "diff_hunk": "@@ -514,7 +514,10 @@ RPCConsole::RPCConsole(interfaces::Node& node, const PlatformStyle *_platformSty\n         tr(\"Outbound Feeler: short-lived, for testing addresses\"),\n         /*: Explanatory text for a short-lived outbound peer connection that is used\n             to request addresses from a peer. */\n-        tr(\"Outbound Address Fetch: short-lived, for soliciting addresses\")};\n+        tr(\"Outbound Address Fetch: short-lived, for soliciting addresses\"),\n+        /*: Explanatory text for a short-lived outbound peer connection that is used\n+            to broadcast privacy-sensitve data (like our transactions). */",
      "path": "src/qt/rpcconsole.cpp",
      "position": null,
      "original_position": 7,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "9eee0e9d71b4d80dd1fe7439882d07adbd23ee42",
      "in_reply_to_id": null,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "typo: sensitive (this and next line)",
      "created_at": "2024-03-26T17:58:08Z",
      "updated_at": "2024-03-26T21:47:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1539838051",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1539838051"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 519,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1539858047",
      "pull_request_review_id": 1961307297,
      "id": 1539858047,
      "node_id": "PRRC_kwDOABII585byF5_",
      "diff_hunk": "@@ -1007,10 +1012,22 @@ bool AppInitParameterInteraction(const ArgsManager& args)\n #endif\n     // Trim requested connection counts, to fit into system limitations\n     // <int> in std::min<int>(...) to work around FreeBSD compilation issue described in #2695\n-    nMaxConnections = std::max(std::min<int>(nMaxConnections, fd_max - nBind - MIN_CORE_FILEDESCRIPTORS - MAX_ADDNODE_CONNECTIONS - NUM_FDS_MESSAGE_CAPTURE), 0);\n+    nMaxConnections = std::max(std::min<int>(nMaxConnections,",
      "path": "src/init.cpp",
      "position": 53,
      "original_position": 28,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "64742d7881d7646a382d97a934c05347c8bdd04d",
      "in_reply_to_id": null,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It seems excessive that `MAX_PRIVATE_BROADCAST_CONNECTIONS=64` has the power to reduce `nMaxConnections` to a lower value even in the case where private broadcast isn't enabled.\r\nMight be better to make that conditional on `privatebroadcast`, similar to how it's done with `nBind`.",
      "created_at": "2024-03-26T18:13:16Z",
      "updated_at": "2024-03-26T21:47:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1539858047",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1539858047"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1010,
      "original_line": 1010,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1540013020",
      "pull_request_review_id": 1961307297,
      "id": 1540013020,
      "node_id": "PRRC_kwDOABII585byrvc",
      "diff_hunk": "@@ -439,4 +439,18 @@ class GenTxid\n     friend bool operator<(const GenTxid& a, const GenTxid& b) { return std::tie(a.m_is_wtxid, a.m_hash) < std::tie(b.m_is_wtxid, b.m_hash); }\n };\n \n+/**\n+ * Methods to broadcast a local transaction.\n+ * Used to influence BroadcastTransaction() and its callers.\n+ */\n+enum TxBroadcastMethod : uint8_t {",
      "path": "src/primitives/transaction.h",
      "position": null,
      "original_position": 8,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "52e6a40d2aab620e71eed23da26b43e3e3457503",
      "in_reply_to_id": null,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Wouldn't this fit better into `node/transaction.h` , together with `BroadcastTransaction` ?",
      "created_at": "2024-03-26T19:53:53Z",
      "updated_at": "2024-03-26T21:47:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1540013020",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1540013020"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 446,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1540139554",
      "pull_request_review_id": 1961307297,
      "id": 1540139554,
      "node_id": "PRRC_kwDOABII585bzKoi",
      "diff_hunk": "@@ -366,7 +366,16 @@ bool CConnman::CheckIncomingNonce(uint64_t nonce)\n {\n     LOCK(m_nodes_mutex);\n     for (const CNode* pnode : m_nodes) {\n-        if (!pnode->fSuccessfullyConnected && !pnode->IsInboundConn() && pnode->GetLocalNonce() == nonce)\n+        // Omit private broadcast connections from this check to prevent this privacy attack:",
      "path": "src/net.cpp",
      "position": 5,
      "original_position": 5,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "5ce95d9960a3935e633fba08ddd9efe3f5b20b0d",
      "in_reply_to_id": null,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> The peer starts connecting to (clearnet) nodes and sends them a VERSION message which contains our nonce. If the peer manages to connect to us we would disconnect.\r\n\r\nI'm confused by this attack. First, if the peer connects to us over clearnet it would be an inbound connection for us - we don't disconnect inbounds, see `!pnode->IsInboundConn()` a few lines below. Second, even if we did disconnect, I still don't see the how the attack could work - it would be a new connection with a new ID and a new nonce (the nonce is created using the peer id [here](https://github.com/bitcoin/bitcoin/blob/d04324a7056a735c1127ba8ccdc720a16e7281a3/src/net.cpp#L509), so it should be different for each peer).",
      "created_at": "2024-03-26T21:35:28Z",
      "updated_at": "2024-03-26T21:47:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1540139554",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1540139554"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 366,
      "original_line": 366,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1542970441",
      "pull_request_review_id": 1966214627,
      "id": 1542970441,
      "node_id": "PRRC_kwDOABII585b99xJ",
      "diff_hunk": "@@ -439,4 +439,18 @@ class GenTxid\n     friend bool operator<(const GenTxid& a, const GenTxid& b) { return std::tie(a.m_is_wtxid, a.m_hash) < std::tie(b.m_is_wtxid, b.m_hash); }\n };\n \n+/**\n+ * Methods to broadcast a local transaction.\n+ * Used to influence BroadcastTransaction() and its callers.\n+ */\n+enum TxBroadcastMethod : uint8_t {",
      "path": "src/primitives/transaction.h",
      "position": null,
      "original_position": 8,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "52e6a40d2aab620e71eed23da26b43e3e3457503",
      "in_reply_to_id": 1540013020,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think so, but this drags some further changes, are you ok with those:\r\n\r\n<details>\r\n<summary>[patch] move TxBroadcastMethod from primitives/transaction.h to node/transaction.h</summary>\r\n\r\n```diff\r\ndiff --git i/src/interfaces/chain.h w/src/interfaces/chain.h\r\nindex 315211ae49..eeb5fef42b 100644\r\n--- i/src/interfaces/chain.h\r\n+++ w/src/interfaces/chain.h\r\n@@ -4,12 +4,13 @@\r\n \r\n #ifndef BITCOIN_INTERFACES_CHAIN_H\r\n #define BITCOIN_INTERFACES_CHAIN_H\r\n \r\n #include <blockfilter.h>\r\n #include <common/settings.h>\r\n+#include <node/transaction.h>\r\n #include <primitives/transaction.h> // For CTransactionRef\r\n #include <util/result.h>\r\n \r\n #include <functional>\r\n #include <memory>\r\n #include <optional>\r\n@@ -215,13 +216,13 @@ public:\r\n     //! @param[in] broadcast_method Whether to add the transaction to the\r\n     //! mempool and how/whether to broadcast it.\r\n     //! @param[out] err_string Set if an error occurs.\r\n     //! @return False if the transaction could not be added due to the fee or for another reason.\r\n     virtual bool broadcastTransaction(const CTransactionRef& tx,\r\n                                       const CAmount& max_tx_fee,\r\n-                                      TxBroadcastMethod broadcast_method,\r\n+                                      node::TxBroadcastMethod broadcast_method,\r\n                                       std::string& err_string) = 0;\r\n \r\n     //! Calculate mempool ancestor and descendant counts for the given transaction.\r\n     virtual void getTransactionAncestry(const uint256& txid, size_t& ancestors, size_t& descendants, size_t* ancestorsize = nullptr, CAmount* ancestorfees = nullptr) = 0;\r\n \r\n     //! For each outpoint, calculate the fee-bumping cost to spend this outpoint at the specified\r\ndiff --git i/src/node/transaction.h w/src/node/transaction.h\r\nindex 75c50bab28..01cdfaf1ff 100644\r\n--- i/src/node/transaction.h\r\n+++ w/src/node/transaction.h\r\n@@ -29,12 +29,26 @@ static const CFeeRate DEFAULT_MAX_RAW_TX_FEE_RATE{COIN / 10};\r\n /** Maximum burn value for sendrawtransaction, submitpackage, and testmempoolaccept RPC calls.\r\n  * By default, a transaction with a burn value higher than this will be rejected\r\n  * by these RPCs and the GUI. This can be overridden with the maxburnamount argument.\r\n  */\r\n static const CAmount DEFAULT_MAX_BURN_AMOUNT{0};\r\n \r\n+/**\r\n+ * Methods to broadcast a local transaction.\r\n+ * Used to influence BroadcastTransaction() and its callers.\r\n+ */\r\n+enum TxBroadcastMethod : uint8_t {\r\n+    /// Add the transaction to the mempool and broadcast to all currently connected peers.\r\n+    ADD_TO_MEMPOOL_AND_BROADCAST_TO_ALL,\r\n+    /// Add the transaction to the mempool, but don't broadcast to anybody.\r\n+    ADD_TO_MEMPOOL_NO_BROADCAST,\r\n+    /// Omit the mempool and directly send the transaction via a few dedicated connections to\r\n+    /// peers on privacy networks.\r\n+    NO_MEMPOOL_PRIVATE_BROADCAST,\r\n+};\r\n+\r\n /**\r\n  * Submit a transaction to the mempool and (optionally) relay it to all P2P peers.\r\n  *\r\n  * Mempool submission can be synchronous (will await mempool entry notification\r\n  * over the CValidationInterface) or asynchronous (will submit and not wait for\r\n  * notification), depending on the value of wait_callback. wait_callback MUST\r\ndiff --git i/src/primitives/transaction.h w/src/primitives/transaction.h\r\nindex 2051ebae5a..ccbeb3ec49 100644\r\n--- i/src/primitives/transaction.h\r\n+++ w/src/primitives/transaction.h\r\n@@ -436,21 +436,7 @@ public:\r\n     bool IsWtxid() const { return m_is_wtxid; }\r\n     const uint256& GetHash() const LIFETIMEBOUND { return m_hash; }\r\n     friend bool operator==(const GenTxid& a, const GenTxid& b) { return a.m_is_wtxid == b.m_is_wtxid && a.m_hash == b.m_hash; }\r\n     friend bool operator<(const GenTxid& a, const GenTxid& b) { return std::tie(a.m_is_wtxid, a.m_hash) < std::tie(b.m_is_wtxid, b.m_hash); }\r\n };\r\n \r\n-/**\r\n- * Methods to broadcast a local transaction.\r\n- * Used to influence BroadcastTransaction() and its callers.\r\n- */\r\n-enum TxBroadcastMethod : uint8_t {\r\n-    /// Add the transaction to the mempool and broadcast to all currently connected peers.\r\n-    ADD_TO_MEMPOOL_AND_BROADCAST_TO_ALL,\r\n-    /// Add the transaction to the mempool, but don't broadcast to anybody.\r\n-    ADD_TO_MEMPOOL_NO_BROADCAST,\r\n-    /// Omit the mempool and directly send the transaction via a few dedicated connections to\r\n-    /// peers on privacy networks.\r\n-    NO_MEMPOOL_PRIVATE_BROADCAST,\r\n-};\r\n-\r\n #endif // BITCOIN_PRIMITIVES_TRANSACTION_H\r\ndiff --git i/src/rpc/mempool.cpp w/src/rpc/mempool.cpp\r\nindex 14d303a0b1..ba69446f36 100644\r\n--- i/src/rpc/mempool.cpp\r\n+++ w/src/rpc/mempool.cpp\r\n@@ -8,12 +8,13 @@\r\n #include <kernel/mempool_persist.h>\r\n \r\n #include <chainparams.h>\r\n #include <core_io.h>\r\n #include <kernel/mempool_entry.h>\r\n #include <node/mempool_persist_args.h>\r\n+#include <node/transaction.h>\r\n #include <policy/rbf.h>\r\n #include <policy/settings.h>\r\n #include <primitives/transaction.h>\r\n #include <rpc/server.h>\r\n #include <rpc/server_util.h>\r\n #include <rpc/util.h>\r\n@@ -91,13 +92,13 @@ static RPCHelpMan sendrawtransaction()\r\n             AssertLockNotHeld(cs_main);\r\n             NodeContext& node = EnsureAnyNodeContext(request.context);\r\n             const TransactionError err = BroadcastTransaction(node,\r\n                                                               tx,\r\n                                                               err_string,\r\n                                                               max_raw_tx_fee,\r\n-                                                              ADD_TO_MEMPOOL_AND_BROADCAST_TO_ALL,\r\n+                                                              node::ADD_TO_MEMPOOL_AND_BROADCAST_TO_ALL,\r\n                                                               /*wait_callback=*/true);\r\n             if (TransactionError::OK != err) {\r\n                 throw JSONRPCTransactionError(err, err_string);\r\n             }\r\n \r\n             return tx->GetHash().GetHex();\r\n@@ -953,13 +954,13 @@ static RPCHelpMan submitpackage()\r\n                 // We do not expect an error here; we are only broadcasting things already/still in mempool\r\n                 std::string err_string;\r\n                 const auto err = BroadcastTransaction(node,\r\n                                                       tx,\r\n                                                       err_string,\r\n                                                       /*max_tx_fee=*/0,\r\n-                                                      ADD_TO_MEMPOOL_AND_BROADCAST_TO_ALL,\r\n+                                                      node::ADD_TO_MEMPOOL_AND_BROADCAST_TO_ALL,\r\n                                                       /*wait_callback=*/true);\r\n                 if (err != TransactionError::OK) {\r\n                     throw JSONRPCTransactionError(err,\r\n                         strprintf(\"transaction broadcast failed: %s (%d transactions were broadcast successfully)\",\r\n                             err_string, num_broadcast));\r\n                 }\r\ndiff --git i/src/wallet/rpc/backup.cpp w/src/wallet/rpc/backup.cpp\r\nindex fdbd44ffe5..2e61a0e945 100644\r\n--- i/src/wallet/rpc/backup.cpp\r\n+++ w/src/wallet/rpc/backup.cpp\r\n@@ -10,12 +10,13 @@\r\n #include <clientversion.h>\r\n #include <core_io.h>\r\n #include <hash.h>\r\n #include <interfaces/chain.h>\r\n #include <key_io.h>\r\n #include <merkleblock.h>\r\n+#include <node/transaction.h>\r\n #include <rpc/util.h>\r\n #include <script/descriptor.h>\r\n #include <script/script.h>\r\n #include <script/solver.h>\r\n #include <sync.h>\r\n #include <uint256.h>\r\n@@ -308,13 +309,13 @@ RPCHelpMan importaddress()\r\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address or script\");\r\n         }\r\n     }\r\n     if (fRescan)\r\n     {\r\n         RescanWallet(*pwallet, reserver);\r\n-        pwallet->ResubmitWalletTransactions(ADD_TO_MEMPOOL_NO_BROADCAST, /*force=*/true);\r\n+        pwallet->ResubmitWalletTransactions(node::ADD_TO_MEMPOOL_NO_BROADCAST, /*force=*/true);\r\n     }\r\n \r\n     return UniValue::VNULL;\r\n },\r\n     };\r\n }\r\n@@ -479,13 +480,13 @@ RPCHelpMan importpubkey()\r\n \r\n         pwallet->ImportPubKeys({pubKey.GetID()}, {{pubKey.GetID(), pubKey}} , /*key_origins=*/{}, /*add_keypool=*/false, /*internal=*/false, /*timestamp=*/1);\r\n     }\r\n     if (fRescan)\r\n     {\r\n         RescanWallet(*pwallet, reserver);\r\n-        pwallet->ResubmitWalletTransactions(ADD_TO_MEMPOOL_NO_BROADCAST, /*force=*/true);\r\n+        pwallet->ResubmitWalletTransactions(node::ADD_TO_MEMPOOL_NO_BROADCAST, /*force=*/true);\r\n     }\r\n \r\n     return UniValue::VNULL;\r\n },\r\n     };\r\n }\r\n@@ -1400,13 +1401,13 @@ RPCHelpMan importmulti()\r\n                 nLowestTimestamp = timestamp;\r\n             }\r\n         }\r\n     }\r\n     if (fRescan && fRunScan && requests.size()) {\r\n         int64_t scannedTime = pwallet->RescanFromTime(nLowestTimestamp, reserver, /*update=*/true);\r\n-        pwallet->ResubmitWalletTransactions(ADD_TO_MEMPOOL_NO_BROADCAST, /*force=*/true);\r\n+        pwallet->ResubmitWalletTransactions(node::ADD_TO_MEMPOOL_NO_BROADCAST, /*force=*/true);\r\n \r\n         if (pwallet->IsAbortingRescan()) {\r\n             throw JSONRPCError(RPC_MISC_ERROR, \"Rescan aborted by user.\");\r\n         }\r\n         if (scannedTime > nLowestTimestamp) {\r\n             std::vector<UniValue> results = response.getValues();\r\n@@ -1694,13 +1695,13 @@ RPCHelpMan importdescriptors()\r\n         pwallet->ConnectScriptPubKeyManNotifiers();\r\n     }\r\n \r\n     // Rescan the blockchain using the lowest timestamp\r\n     if (rescan) {\r\n         int64_t scanned_time = pwallet->RescanFromTime(lowest_timestamp, reserver, /*update=*/true);\r\n-        pwallet->ResubmitWalletTransactions(ADD_TO_MEMPOOL_NO_BROADCAST, /*force=*/true);\r\n+        pwallet->ResubmitWalletTransactions(node::ADD_TO_MEMPOOL_NO_BROADCAST, /*force=*/true);\r\n \r\n         if (pwallet->IsAbortingRescan()) {\r\n             throw JSONRPCError(RPC_MISC_ERROR, \"Rescan aborted by user.\");\r\n         }\r\n \r\n         if (scanned_time > lowest_timestamp) {\r\ndiff --git i/src/wallet/test/wallet_tests.cpp w/src/wallet/test/wallet_tests.cpp\r\nindex 003d1aab29..2377c71e21 100644\r\n--- i/src/wallet/test/wallet_tests.cpp\r\n+++ w/src/wallet/test/wallet_tests.cpp\r\n@@ -10,12 +10,13 @@\r\n #include <vector>\r\n \r\n #include <addresstype.h>\r\n #include <interfaces/chain.h>\r\n #include <key_io.h>\r\n #include <node/blockstorage.h>\r\n+#include <node/transaction.h>\r\n #include <policy/policy.h>\r\n #include <rpc/server.h>\r\n #include <script/solver.h>\r\n #include <test/util/logging.h>\r\n #include <test/util/random.h>\r\n #include <test/util/setup_common.h>\r\n@@ -819,13 +820,13 @@ BOOST_FIXTURE_TEST_CASE(CreateWallet, TestChain100Setup)\r\n     });\r\n     std::string error;\r\n     m_coinbase_txns.push_back(CreateAndProcessBlock({}, GetScriptForRawPubKey(coinbaseKey.GetPubKey())).vtx[0]);\r\n     auto block_tx = TestSimpleSpend(*m_coinbase_txns[0], 0, coinbaseKey, GetScriptForRawPubKey(key.GetPubKey()));\r\n     m_coinbase_txns.push_back(CreateAndProcessBlock({block_tx}, GetScriptForRawPubKey(coinbaseKey.GetPubKey())).vtx[0]);\r\n     auto mempool_tx = TestSimpleSpend(*m_coinbase_txns[1], 0, coinbaseKey, GetScriptForRawPubKey(key.GetPubKey()));\r\n-    BOOST_CHECK(m_node.chain->broadcastTransaction(MakeTransactionRef(mempool_tx), DEFAULT_TRANSACTION_MAXFEE, ADD_TO_MEMPOOL_NO_BROADCAST, error));\r\n+    BOOST_CHECK(m_node.chain->broadcastTransaction(MakeTransactionRef(mempool_tx), DEFAULT_TRANSACTION_MAXFEE, node::ADD_TO_MEMPOOL_NO_BROADCAST, error));\r\n \r\n \r\n     // Reload wallet and make sure new transactions are detected despite events\r\n     // being blocked\r\n     // Loading will also ask for current mempool transactions\r\n     wallet = TestLoadWallet(context);\r\n@@ -861,13 +862,13 @@ BOOST_FIXTURE_TEST_CASE(CreateWallet, TestChain100Setup)\r\n     auto handler = HandleLoadWallet(context, [&](std::unique_ptr<interfaces::Wallet> wallet) {\r\n             BOOST_CHECK(rescan_completed);\r\n             m_coinbase_txns.push_back(CreateAndProcessBlock({}, GetScriptForRawPubKey(coinbaseKey.GetPubKey())).vtx[0]);\r\n             block_tx = TestSimpleSpend(*m_coinbase_txns[2], 0, coinbaseKey, GetScriptForRawPubKey(key.GetPubKey()));\r\n             m_coinbase_txns.push_back(CreateAndProcessBlock({block_tx}, GetScriptForRawPubKey(coinbaseKey.GetPubKey())).vtx[0]);\r\n             mempool_tx = TestSimpleSpend(*m_coinbase_txns[3], 0, coinbaseKey, GetScriptForRawPubKey(key.GetPubKey()));\r\n-            BOOST_CHECK(m_node.chain->broadcastTransaction(MakeTransactionRef(mempool_tx), DEFAULT_TRANSACTION_MAXFEE, ADD_TO_MEMPOOL_NO_BROADCAST, error));\r\n+            BOOST_CHECK(m_node.chain->broadcastTransaction(MakeTransactionRef(mempool_tx), DEFAULT_TRANSACTION_MAXFEE, node::ADD_TO_MEMPOOL_NO_BROADCAST, error));\r\n             m_node.validation_signals->SyncWithValidationInterfaceQueue();\r\n         });\r\n     wallet = TestLoadWallet(context);\r\n     // Since mempool transactions are requested at the end of loading, there will\r\n     // be 2 additional AddToWallet calls, one from the previous test, and a duplicate for mempool_tx\r\n     BOOST_CHECK_EQUAL(addtx_count, 2 + 2);\r\ndiff --git i/src/wallet/wallet.cpp w/src/wallet/wallet.cpp\r\nindex 0904399926..2566b2d543 100644\r\n--- i/src/wallet/wallet.cpp\r\n+++ w/src/wallet/wallet.cpp\r\n@@ -24,12 +24,13 @@\r\n #include <interfaces/wallet.h>\r\n #include <kernel/chain.h>\r\n #include <kernel/mempool_removal_reason.h>\r\n #include <key.h>\r\n #include <key_io.h>\r\n #include <logging.h>\r\n+#include <node/transaction.h>\r\n #include <outputtype.h>\r\n #include <policy/feerate.h>\r\n #include <primitives/block.h>\r\n #include <primitives/transaction.h>\r\n #include <psbt.h>\r\n #include <pubkey.h>\r\n@@ -1999,13 +2000,13 @@ CWallet::ScanResult CWallet::ScanForWalletTransactions(const uint256& start_bloc\r\n     }\r\n     return result;\r\n }\r\n \r\n bool CWallet::SubmitTxMemoryPoolAndRelay(CWalletTx& wtx,\r\n                                          std::string& err_string,\r\n-                                         TxBroadcastMethod broadcast_method) const\r\n+                                         node::TxBroadcastMethod broadcast_method) const\r\n {\r\n     AssertLockHeld(cs_wallet);\r\n \r\n     // Can't relay if wallet is not broadcasting\r\n     if (!GetBroadcastTransactions()) return false;\r\n     // Don't relay abandoned transactions\r\n@@ -2016,19 +2017,19 @@ bool CWallet::SubmitTxMemoryPoolAndRelay(CWalletTx& wtx,\r\n     // Don't try to submit conflicted or confirmed transactions.\r\n     if (GetTxDepthInMainChain(wtx) != 0) return false;\r\n \r\n     // Submit transaction to mempool for relay\r\n     const char* what{\"\"};\r\n     switch (broadcast_method) {\r\n-    case ADD_TO_MEMPOOL_AND_BROADCAST_TO_ALL:\r\n+    case node::ADD_TO_MEMPOOL_AND_BROADCAST_TO_ALL:\r\n         what = \"to mempool and for broadcast to all peers\";\r\n         break;\r\n-    case ADD_TO_MEMPOOL_NO_BROADCAST:\r\n+    case node::ADD_TO_MEMPOOL_NO_BROADCAST:\r\n         what = \"to mempool without broadcast\";\r\n         break;\r\n-    case NO_MEMPOOL_PRIVATE_BROADCAST:\r\n+    case node::NO_MEMPOOL_PRIVATE_BROADCAST:\r\n         what = \"for private broadcast without adding to the mempool\";\r\n         break;\r\n     }\r\n     WalletLogPrintf(\"Submitting wtx %s %s\\n\", wtx.GetHash().ToString(), what);\r\n     // We must set TxStateInMempool here. Even though it will also be set later by the\r\n     // entered-mempool callback, if we did not there would be a race where a\r\n@@ -2095,13 +2096,13 @@ NodeClock::time_point CWallet::GetDefaultNextResend() { return FastRandomContext\r\n // The `force` option results in all unconfirmed transactions being submitted to\r\n // the mempool. This does not necessarily result in those transactions being relayed,\r\n // that depends on the `broadcast_method` option. Periodic rebroadcast uses the pattern\r\n // broadcast_method=ADD_TO_MEMPOOL_AND_BROADCAST_TO_ALL force=false, while loading into\r\n // the mempool (on start, or after import) uses\r\n // broadcast_method=ADD_TO_MEMPOOL_NO_BROADCAST force=true.\r\n-void CWallet::ResubmitWalletTransactions(TxBroadcastMethod broadcast_method, bool force)\r\n+void CWallet::ResubmitWalletTransactions(node::TxBroadcastMethod broadcast_method, bool force)\r\n {\r\n     // Don't attempt to resubmit if the wallet is configured to not broadcast,\r\n     // even if forcing.\r\n     if (!fBroadcastTransactions) return;\r\n \r\n     int submitted_tx_count = 0;\r\n@@ -2136,13 +2137,13 @@ void CWallet::ResubmitWalletTransactions(TxBroadcastMethod broadcast_method, boo\r\n /** @} */ // end of mapWallet\r\n \r\n void MaybeResendWalletTxs(WalletContext& context)\r\n {\r\n     for (const std::shared_ptr<CWallet>& pwallet : GetWallets(context)) {\r\n         if (!pwallet->ShouldResend()) continue;\r\n-        pwallet->ResubmitWalletTransactions(ADD_TO_MEMPOOL_AND_BROADCAST_TO_ALL, /*force=*/false);\r\n+        pwallet->ResubmitWalletTransactions(node::ADD_TO_MEMPOOL_AND_BROADCAST_TO_ALL, /*force=*/false);\r\n         pwallet->SetNextResend();\r\n     }\r\n }\r\n \r\n \r\n /** @defgroup Actions\r\n@@ -2344,13 +2345,13 @@ void CWallet::CommitTransaction(CTransactionRef tx, mapValue_t mapValue, std::ve\r\n     if (!fBroadcastTransactions) {\r\n         // Don't submit tx to the mempool\r\n         return;\r\n     }\r\n \r\n     std::string err_string;\r\n-    if (!SubmitTxMemoryPoolAndRelay(*wtx, err_string, ADD_TO_MEMPOOL_AND_BROADCAST_TO_ALL)) {\r\n+    if (!SubmitTxMemoryPoolAndRelay(*wtx, err_string, node::ADD_TO_MEMPOOL_AND_BROADCAST_TO_ALL)) {\r\n         WalletLogPrintf(\"CommitTransaction(): Transaction cannot be broadcast immediately, %s\\n\", err_string);\r\n         // TODO: if we expect the failure to be long term or permanent, instead delete wtx from the wallet and return failure.\r\n     }\r\n }\r\n \r\n DBErrors CWallet::LoadWallet()\r\n@@ -3389,13 +3390,13 @@ bool CWallet::UpgradeWallet(int version, bilingual_str& error)\r\n }\r\n \r\n void CWallet::postInitProcess()\r\n {\r\n     // Add wallet transactions that aren't already in a block to mempool\r\n     // Do this here as mempool requires genesis block to be loaded\r\n-    ResubmitWalletTransactions(ADD_TO_MEMPOOL_NO_BROADCAST, /*force=*/true);\r\n+    ResubmitWalletTransactions(node::ADD_TO_MEMPOOL_NO_BROADCAST, /*force=*/true);\r\n \r\n     // Update wallet transactions with current mempool transactions.\r\n     WITH_LOCK(cs_wallet, chain().requestMempoolTransactions(*this));\r\n }\r\n \r\n bool CWallet::BackupWallet(const std::string& strDest) const\r\ndiff --git i/src/wallet/wallet.h w/src/wallet/wallet.h\r\nindex 8f9881c304..ceadabf165 100644\r\n--- i/src/wallet/wallet.h\r\n+++ w/src/wallet/wallet.h\r\n@@ -9,12 +9,13 @@\r\n #include <addresstype.h>\r\n #include <consensus/amount.h>\r\n #include <interfaces/chain.h>\r\n #include <interfaces/handler.h>\r\n #include <kernel/cs_main.h>\r\n #include <logging.h>\r\n+#include <node/transaction.h>\r\n #include <outputtype.h>\r\n #include <policy/feerate.h>\r\n #include <primitives/transaction.h>\r\n #include <script/interpreter.h>\r\n #include <script/script.h>\r\n #include <support/allocators/secure.h>\r\n@@ -631,13 +632,13 @@ public:\r\n     ScanResult ScanForWalletTransactions(const uint256& start_block, int start_height, std::optional<int> max_height, const WalletRescanReserver& reserver, bool fUpdate, const bool save_progress);\r\n     void transactionRemovedFromMempool(const CTransactionRef& tx, MemPoolRemovalReason reason) override;\r\n     /** Set the next time this wallet should resend transactions to 12-36 hours from now, ~1 day on average. */\r\n     void SetNextResend() { m_next_resend = GetDefaultNextResend(); }\r\n     /** Return true if all conditions for periodically resending transactions are met. */\r\n     bool ShouldResend() const;\r\n-    void ResubmitWalletTransactions(TxBroadcastMethod broadcast_method, bool force);\r\n+    void ResubmitWalletTransactions(node::TxBroadcastMethod broadcast_method, bool force);\r\n \r\n     OutputType TransactionChangeType(const std::optional<OutputType>& change_type, const std::vector<CRecipient>& vecSend) const;\r\n \r\n     /** Fetch the inputs and sign with SIGHASH_ALL. */\r\n     bool SignTransaction(CMutableTransaction& tx) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\r\n     /** Sign the tx given the input coins and sighash. */\r\n@@ -676,13 +677,13 @@ public:\r\n      * @param[in] mapValue key-values to be set on the transaction.\r\n      * @param[in] orderForm BIP 70 / BIP 21 order form details to be set on the transaction.\r\n      */\r\n     void CommitTransaction(CTransactionRef tx, mapValue_t mapValue, std::vector<std::pair<std::string, std::string>> orderForm);\r\n \r\n     /** Pass this transaction to node for optional mempool insertion and relay to peers. */\r\n-    bool SubmitTxMemoryPoolAndRelay(CWalletTx& wtx, std::string& err_string, TxBroadcastMethod broadcast_method) const\r\n+    bool SubmitTxMemoryPoolAndRelay(CWalletTx& wtx, std::string& err_string, node::TxBroadcastMethod broadcast_method) const\r\n         EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\r\n \r\n     bool ImportScripts(const std::set<CScript> scripts, int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\r\n     bool ImportPrivKeys(const std::map<CKeyID, CKey>& privkey_map, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\r\n     bool ImportPubKeys(const std::vector<CKeyID>& ordered_pubkeys, const std::map<CKeyID, CPubKey>& pubkey_map, const std::map<CKeyID, std::pair<CPubKey, KeyOriginInfo>>& key_origins, const bool add_keypool, const bool internal, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\r\n     bool ImportScriptPubKeys(const std::string& label, const std::set<CScript>& script_pub_keys, const bool have_solving_data, const bool apply_label, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\r\n```\r\n\r\n</details>",
      "created_at": "2024-03-28T13:22:43Z",
      "updated_at": "2024-03-28T13:22:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1542970441",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1542970441"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 446,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1543036439",
      "pull_request_review_id": 1966317652,
      "id": 1543036439,
      "node_id": "PRRC_kwDOABII585b-N4X",
      "diff_hunk": "@@ -366,7 +366,16 @@ bool CConnman::CheckIncomingNonce(uint64_t nonce)\n {\n     LOCK(m_nodes_mutex);\n     for (const CNode* pnode : m_nodes) {\n-        if (!pnode->fSuccessfullyConnected && !pnode->IsInboundConn() && pnode->GetLocalNonce() == nonce)\n+        // Omit private broadcast connections from this check to prevent this privacy attack:",
      "path": "src/net.cpp",
      "position": 5,
      "original_position": 5,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "5ce95d9960a3935e633fba08ddd9efe3f5b20b0d",
      "in_reply_to_id": 1540139554,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I reread your statement and the code a few times and I think that the code is legit (or the attack the code is guarding against could happen). Let me elaborate:\r\n\r\n1. We connect for a private broadcast to `boopeer.onion` and send them `nonce=1234` in our `VERSION` message. For this an entry is added to `CConnman::m_nodes` that has `IsInboundConn() == false`.\r\n2. The `boo` guy delays their `VERACK` on the private connection and connects to random nodes on clearnet. Assuming we also listen on clearnet address, they are lucky enough and manage to connect to us. They send us `VERSION` with `nonce=1234`. For this connection `IsInboundConn() == true` on our side and this code is executed:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/c8e3978114716bb8fb10695b9d187652f3ab4926/src/net_processing.cpp#L3532-L3537\r\n\r\npassing `nonce=1234` to `CheckIncomingNonce()` which finds the entry in `m_nodes` from 1. and returns `false`. Then the clearnet connection from 2. is closed by us.\r\n\r\nMakes sense?",
      "created_at": "2024-03-28T14:01:39Z",
      "updated_at": "2024-03-28T14:01:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1543036439",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1543036439"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 366,
      "original_line": 366,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1543171484",
      "pull_request_review_id": 1966540871,
      "id": 1543171484,
      "node_id": "PRRC_kwDOABII585b-u2c",
      "diff_hunk": "@@ -439,4 +439,18 @@ class GenTxid\n     friend bool operator<(const GenTxid& a, const GenTxid& b) { return std::tie(a.m_is_wtxid, a.m_hash) < std::tie(b.m_is_wtxid, b.m_hash); }\n };\n \n+/**\n+ * Methods to broadcast a local transaction.\n+ * Used to influence BroadcastTransaction() and its callers.\n+ */\n+enum TxBroadcastMethod : uint8_t {",
      "path": "src/primitives/transaction.h",
      "position": null,
      "original_position": 8,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "52e6a40d2aab620e71eed23da26b43e3e3457503",
      "in_reply_to_id": 1540013020,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Hmm, after looking at that diff I'm not so sure . It's probably a layer violation include `node/` files from the wallet.\r\nOn the other hand, having this enum in `primitive/transaction.h` still doesn't feel right, given that this isn't really a primitive property of a transaction like `COutPoint`. Maybe put it into another (new) file in `kernel/`, and handle it similar to `enum class ChainstateRole` and `enum class MemPoolRemovalReason` could be the best way?",
      "created_at": "2024-03-28T15:27:04Z",
      "updated_at": "2024-03-28T15:27:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1543171484",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1543171484"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 446,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1543176910",
      "pull_request_review_id": 1966549210,
      "id": 1543176910,
      "node_id": "PRRC_kwDOABII585b-wLO",
      "diff_hunk": "@@ -366,7 +366,16 @@ bool CConnman::CheckIncomingNonce(uint64_t nonce)\n {\n     LOCK(m_nodes_mutex);\n     for (const CNode* pnode : m_nodes) {\n-        if (!pnode->fSuccessfullyConnected && !pnode->IsInboundConn() && pnode->GetLocalNonce() == nonce)\n+        // Omit private broadcast connections from this check to prevent this privacy attack:",
      "path": "src/net.cpp",
      "position": 5,
      "original_position": 5,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "5ce95d9960a3935e633fba08ddd9efe3f5b20b0d",
      "in_reply_to_id": 1540139554,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, now it makes sense, thanks! I'm not sure where I got confused, I probably misread the existing code.",
      "created_at": "2024-03-28T15:30:30Z",
      "updated_at": "2024-03-28T15:30:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1543176910",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1543176910"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 366,
      "original_line": 366,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1543237929",
      "pull_request_review_id": 1966647339,
      "id": 1543237929,
      "node_id": "PRRC_kwDOABII585b-_Ep",
      "diff_hunk": "@@ -514,7 +514,10 @@ RPCConsole::RPCConsole(interfaces::Node& node, const PlatformStyle *_platformSty\n         tr(\"Outbound Feeler: short-lived, for testing addresses\"),\n         /*: Explanatory text for a short-lived outbound peer connection that is used\n             to request addresses from a peer. */\n-        tr(\"Outbound Address Fetch: short-lived, for soliciting addresses\")};\n+        tr(\"Outbound Address Fetch: short-lived, for soliciting addresses\"),\n+        /*: Explanatory text for a short-lived outbound peer connection that is used\n+            to broadcast privacy-sensitve data (like our transactions). */",
      "path": "src/qt/rpcconsole.cpp",
      "position": null,
      "original_position": 7,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "9eee0e9d71b4d80dd1fe7439882d07adbd23ee42",
      "in_reply_to_id": 1539838051,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed, will be in next push.",
      "created_at": "2024-03-28T16:08:37Z",
      "updated_at": "2024-03-28T16:08:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1543237929",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1543237929"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 519,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1543240449",
      "pull_request_review_id": 1966651380,
      "id": 1543240449,
      "node_id": "PRRC_kwDOABII585b-_sB",
      "diff_hunk": "@@ -1007,10 +1012,22 @@ bool AppInitParameterInteraction(const ArgsManager& args)\n #endif\n     // Trim requested connection counts, to fit into system limitations\n     // <int> in std::min<int>(...) to work around FreeBSD compilation issue described in #2695\n-    nMaxConnections = std::max(std::min<int>(nMaxConnections, fd_max - nBind - MIN_CORE_FILEDESCRIPTORS - MAX_ADDNODE_CONNECTIONS - NUM_FDS_MESSAGE_CAPTURE), 0);\n+    nMaxConnections = std::max(std::min<int>(nMaxConnections,",
      "path": "src/init.cpp",
      "position": 53,
      "original_position": 28,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "64742d7881d7646a382d97a934c05347c8bdd04d",
      "in_reply_to_id": 1539858047,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done, will be in next push. Good observation!\r\n\r\nThis raised the unrelated-to-this-PR question https://www.erisian.com.au/bitcoin-core-dev/log-2024-03-28.html#l-59",
      "created_at": "2024-03-28T16:10:34Z",
      "updated_at": "2024-03-28T16:10:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1543240449",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1543240449"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1010,
      "original_line": 1010,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1543265026",
      "pull_request_review_id": 1966686141,
      "id": 1543265026,
      "node_id": "PRRC_kwDOABII585b_FsC",
      "diff_hunk": "@@ -439,4 +439,18 @@ class GenTxid\n     friend bool operator<(const GenTxid& a, const GenTxid& b) { return std::tie(a.m_is_wtxid, a.m_hash) < std::tie(b.m_is_wtxid, b.m_hash); }\n };\n \n+/**\n+ * Methods to broadcast a local transaction.\n+ * Used to influence BroadcastTransaction() and its callers.\n+ */\n+enum TxBroadcastMethod : uint8_t {",
      "path": "src/primitives/transaction.h",
      "position": null,
      "original_position": 8,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "52e6a40d2aab620e71eed23da26b43e3e3457503",
      "in_reply_to_id": 1540013020,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Maybe it is ok to include `node/` from the wallet:\r\n\r\n```\r\n$ git grep node/ origin/master -- \"*wallet*\"\r\norigin/master:src/bench/wallet_balance.cpp:7:#include <node/chainstate.h>\r\norigin/master:src/bench/wallet_balance.cpp:8:#include <node/context.h>\r\norigin/master:src/bench/wallet_create.cpp:10:#include <node/context.h>\r\norigin/master:src/bench/wallet_create_tx.cpp:10:#include <node/context.h>\r\norigin/master:src/bench/wallet_ismine.cpp:12:#include <node/context.h>\r\norigin/master:src/bench/wallet_loading.cpp:11:#include <node/context.h>\r\norigin/master:src/qt/walletframe.cpp:7:#include <node/interface_ui.h>\r\norigin/master:src/qt/walletmodel.cpp:21:#include <node/interface_ui.h>\r\norigin/master:src/qt/walletview.cpp:22:#include <node/interface_ui.h>\r\norigin/master:src/wallet/init.cpp:16:#include <node/context.h>\r\norigin/master:src/wallet/init.cpp:17:#include <node/interface_ui.h>\r\norigin/master:src/wallet/test/coinselector_tests.cpp:6:#include <node/context.h>\r\norigin/master:src/wallet/test/init_test_fixture.h:10:#include <node/context.h>\r\norigin/master:src/wallet/test/ismine_tests.cpp:7:#include <node/context.h>\r\norigin/master:src/wallet/test/wallet_test_fixture.h:12:#include <node/context.h>\r\norigin/master:src/wallet/test/wallet_tests.cpp:15:#include <node/blockstorage.h>\r\norigin/master:test/functional/test_framework/wallet.py:141:            # Sort tx by ancestor count. See BlockAssembler::SortForBlock in src/node/miner.cpp\r\n```",
      "created_at": "2024-03-28T16:24:37Z",
      "updated_at": "2024-03-28T16:24:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1543265026",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1543265026"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 446,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1543307618",
      "pull_request_review_id": 1966753698,
      "id": 1543307618,
      "node_id": "PRRC_kwDOABII585b_QFi",
      "diff_hunk": "@@ -439,4 +439,18 @@ class GenTxid\n     friend bool operator<(const GenTxid& a, const GenTxid& b) { return std::tie(a.m_is_wtxid, a.m_hash) < std::tie(b.m_is_wtxid, b.m_hash); }\n };\n \n+/**\n+ * Methods to broadcast a local transaction.\n+ * Used to influence BroadcastTransaction() and its callers.\n+ */\n+enum TxBroadcastMethod : uint8_t {",
      "path": "src/primitives/transaction.h",
      "position": null,
      "original_position": 8,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "52e6a40d2aab620e71eed23da26b43e3e3457503",
      "in_reply_to_id": 1540013020,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "@TheCharlatan you probably dealt a lot with these kind of questions for kernel, do you have an opinion where this enum should be?",
      "created_at": "2024-03-28T16:53:30Z",
      "updated_at": "2024-03-28T16:53:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1543307618",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1543307618"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 446,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1543379055",
      "pull_request_review_id": 1966863599,
      "id": 1543379055,
      "node_id": "PRRC_kwDOABII585b_hhv",
      "diff_hunk": "@@ -439,4 +439,18 @@ class GenTxid\n     friend bool operator<(const GenTxid& a, const GenTxid& b) { return std::tie(a.m_is_wtxid, a.m_hash) < std::tie(b.m_is_wtxid, b.m_hash); }\n };\n \n+/**\n+ * Methods to broadcast a local transaction.\n+ * Used to influence BroadcastTransaction() and its callers.\n+ */\n+enum TxBroadcastMethod : uint8_t {",
      "path": "src/primitives/transaction.h",
      "position": null,
      "original_position": 8,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "52e6a40d2aab620e71eed23da26b43e3e3457503",
      "in_reply_to_id": 1540013020,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1543307618\r\n\r\nI'd suggest moving `TxBroadcastMethod` enum to [`node/types.h`](https://github.com/ryanofsky/bitcoin/blob/pr/rmutil/src/node/types.h), which doesn't exist yet but is introduced in #29015, and could be added here as well.\r\n\r\n> It's probably a layer violation include node/ files from the wallet.\r\n\r\nWe don't want wallet code to call node functions or use internal node types, but node and wallet code do define a handful of \"public\" types (CNodeStats, CNodeStateStats, and SynchronizationState, AddressPurpose, isminetype, CRecipient, and CCoinControl) I mentioned recently in https://github.com/bitcoin/bitcoin/pull/29015#discussion_r1425731507 that are useful even without depending on node or wallet libraries, and I think it makes sense to put the lightweight types in [`node/types.h`](https://github.com/ryanofsky/bitcoin/blob/pr/rmutil/src/node/types.h), [`wallet/types.h`](https://github.com/ryanofsky/bitcoin/blob/pr/rmutil/src/wallet/types.h), [`common/types.h`](https://github.com/ryanofsky/bitcoin/blob/pr/rmutil/src/common/types.h) files so they can be explained and used without dragging in other things. Other options I mentioned in that comment:\r\n\r\n> We do have a choice where about where to put public types which are not really part of any library. We can put them in the interfaces directory, or in common, or in the node and wallet directories. Personally, I think it makes sense to put them in the wallet directory when they are related to wallet functionality and used by wallet code, put them in the node directory when they are related to node functionality and used by node code, put them in the common directory when they are related to common functionality (like PSBT) and used by common code. The comments at the top of {node,wallet,common}/types.h files are meant to explain the idea that these are public types.",
      "created_at": "2024-03-28T17:39:28Z",
      "updated_at": "2024-03-28T17:39:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1543379055",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1543379055"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 446,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1544337066",
      "pull_request_review_id": 1968266790,
      "id": 1544337066,
      "node_id": "PRRC_kwDOABII585cDLaq",
      "diff_hunk": "@@ -439,4 +439,18 @@ class GenTxid\n     friend bool operator<(const GenTxid& a, const GenTxid& b) { return std::tie(a.m_is_wtxid, a.m_hash) < std::tie(b.m_is_wtxid, b.m_hash); }\n };\n \n+/**\n+ * Methods to broadcast a local transaction.\n+ * Used to influence BroadcastTransaction() and its callers.\n+ */\n+enum TxBroadcastMethod : uint8_t {",
      "path": "src/primitives/transaction.h",
      "position": null,
      "original_position": 8,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "52e6a40d2aab620e71eed23da26b43e3e3457503",
      "in_reply_to_id": 1540013020,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Moved to `node/types.h` (new file). Could put it elsewhere if there are better suggestions. Thanks for the suggestion!\r\n\r\nEdit: btw, the doxygen comment should have `\\file` on its own line. See https://www.doxygen.nl/manual/commands.html#cmdfile and run `doxygen doc/Doxyfile` and then inspect `doc/doxygen/html/node_2types_8h.html`.",
      "created_at": "2024-03-29T10:27:49Z",
      "updated_at": "2024-03-29T10:30:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1544337066",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1544337066"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 446,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1544759045",
      "pull_request_review_id": 1969324333,
      "id": 1544759045,
      "node_id": "PRRC_kwDOABII585cEycF",
      "diff_hunk": "@@ -0,0 +1,311 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test how locally submitted transactions are sent to the network when private broadcast is used.\n+\n+The topology in the test is:\n+\n+Bitcoin Core (tx_originator)\n+               ^   v       The default full-outbound + block-only connections\n+               |   |       (MAX_OUTBOUND_FULL_RELAY_CONNECTIONS + MAX_BLOCK_RELAY_ONLY_CONNECTIONS):\n+               |   |\n+               |   *-----> SOCKS5 Proxy ---> P2PInterface (self.socks5_server.conf.destinations[0][\"node\"])\n+               |   |\n+               |   *-----> SOCKS5 Proxy ---> P2PInterface (self.socks5_server.conf.destinations[1][\"node\"])\n+               |   ...\n+               |   |       The private broadcast TX recipients\n+               |   |       (NUM_PRIVATE_BROADCAST_PER_TX)\n+               |   |       plus maybe some feeler or extra block only connections:\n+               |   |\n+               |   *-----> SOCKS5 Proxy ---> Bitcoin Core (node1) (self.socks5_server.conf.destinations[i][\"node\"] is None)\n+               |   |                          ^\n+               |   |                          *----< P2PInterface (far_observer) (to check Bitcoin Core relays the tx)\n+               |   |\n+               |   *-----> SOCKS5 Proxy ---> P2PInterface (self.socks5_server.conf.destinations[i + 1][\"node\"])\n+               |   ...\n+               |\n+               *---------< P2PDataStore (observer_inbound)\n+\"\"\"\n+\n+from test_framework.p2p import (\n+    P2PDataStore,\n+    P2PInterface,\n+    P2P_SERVICES,\n+    P2P_VERSION,\n+)\n+from test_framework.messages import (\n+    CAddress,\n+    CInv,\n+    MSG_WTX,\n+    msg_inv,\n+)\n+from test_framework.socks5 import (\n+    Socks5Configuration,\n+    Socks5Server,\n+)\n+from test_framework.test_framework import (\n+    BitcoinTestFramework,\n+)\n+from test_framework.util import (\n+    MAX_NODES,\n+    assert_equal,\n+    p2p_port,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+)\n+\n+MAX_OUTBOUND_FULL_RELAY_CONNECTIONS = 8\n+MAX_BLOCK_RELAY_ONLY_CONNECTIONS = 2\n+NUM_INITIAL_CONNECTIONS = MAX_OUTBOUND_FULL_RELAY_CONNECTIONS + MAX_BLOCK_RELAY_ONLY_CONNECTIONS\n+NUM_PRIVATE_BROADCAST_PER_TX = 5\n+\n+# Fill addrman with these addresses. Must have enough Tor addresses, so that even\n+# if all 10 default connections are opened to a Tor address (!?) there must be more\n+# for private broadcast.\n+addresses = [\n+    \"1.65.195.98\",\n+    \"2.59.236.56\",\n+    \"2.83.114.20\",\n+    \"2.248.194.16\",\n+    \"5.2.154.6\",\n+    \"5.101.140.30\",\n+    \"5.128.87.126\",\n+    \"5.144.21.49\",\n+    \"5.172.132.104\",\n+    \"5.188.62.18\",\n+    \"5.200.2.180\",\n+    \"8.129.184.255\",\n+    \"8.209.105.138\",\n+    \"12.34.98.148\",\n+    \"14.199.102.151\",\n+    \"18.27.79.17\",\n+    \"18.27.124.231\",\n+    \"18.216.249.151\",\n+    \"23.88.155.58\",\n+    \"23.93.101.158\",\n+    \"[2001:19f0:1000:1db3:5400:4ff:fe56:5a8d]\",\n+    \"[2001:19f0:5:24da:3eec:efff:feb9:f36e]\",\n+    \"[2001:19f0:5:24da::]\",\n+    \"[2001:19f0:5:4535:3eec:efff:feb9:87e4]\",\n+    \"[2001:19f0:5:4535::]\",\n+    \"[2001:1bc0:c1::2000]\",\n+    \"[2001:1c04:4008:6300:8a5f:2678:114b:a660]\",\n+    \"[2001:41d0:203:3739::]\",\n+    \"[2001:41d0:203:8f49::]\",\n+    \"[2001:41d0:203:bb0a::]\",\n+    \"[2001:41d0:2:bf8f::]\",\n+    \"[2001:41d0:303:de8b::]\",\n+    \"[2001:41d0:403:3d61::]\",\n+    \"[2001:41d0:405:9600::]\",\n+    \"[2001:41d0:8:ed7f::1]\",\n+    \"[2001:41d0:a:69a2::1]\",\n+    \"[2001:41f0::62:6974:636f:696e]\",\n+    \"[2001:470:1b62::]\",\n+    \"[2001:470:1f05:43b:2831:8530:7179:5864]\",\n+    \"[2001:470:1f09:b14::11]\",\n+    \"2bqghnldu6mcug4pikzprwhtjjnsyederctvci6klcwzepnjd46ikjyd.onion\",\n+    \"4lr3w2iyyl5u5l6tosizclykf5v3smqroqdn2i4h3kq6pfbbjb2xytad.onion\",\n+    \"5g72ppm3krkorsfopcm2bi7wlv4ohhs4u4mlseymasn7g7zhdcyjpfid.onion\",\n+    \"5sbmcl4m5api5tqafi4gcckrn3y52sz5mskxf3t6iw4bp7erwiptrgqd.onion\",\n+    \"776aegl7tfhg6oiqqy76jnwrwbvcytsx2qegcgh2mjqujll4376ohlid.onion\",\n+    \"77mdte42srl42shdh2mhtjr7nf7dmedqrw6bkcdekhdvmnld6ojyyiad.onion\",\n+    \"azbpsh4arqlm6442wfimy7qr65bmha2zhgjg7wbaji6vvaug53hur2qd.onion\",\n+    \"b64xcbleqmwgq2u46bh4hegnlrzzvxntyzbmucn3zt7cssm7y4ubv3id.onion\",\n+    \"bsqbtcparrfihlwolt4xgjbf4cgqckvrvsfyvy6vhiqrnh4w6ghixoid.onion\",\n+    \"bsqbtctulf2g4jtjsdfgl2ed7qs6zz5wqx27qnyiik7laockryvszqqd.onion\",\n+    \"cwi3ekrwhig47dhhzfenr5hbvckj7fzaojygvazi2lucsenwbzwoyiqd.onion\",\n+    \"devinbtcmwkuitvxl3tfi5of4zau46ymeannkjv6fpnylkgf3q5fa3id.onion\",\n+    \"devinbtctu7uctl7hly2juu3thbgeivfnvw3ckj3phy6nyvpnx66yeyd.onion\",\n+    \"devinbtcyk643iruzfpaxw3on2jket7rbjmwygm42dmdyub3ietrbmid.onion\",\n+    \"dtql5vci4iaml4anmueftqr7bfgzqlauzfy4rc2tfgulldd3ekyijjyd.onion\",\n+    \"emzybtc25oddoa2prol2znpz2axnrg6k77xwgirmhv7igoiucddsxiad.onion\",\n+    \"emzybtc3ewh7zihpkdvuwlgxrhzcxy2p5fvjggp7ngjbxcytxvt4rjid.onion\",\n+    \"emzybtc454ewbviqnmgtgx3rgublsgkk23r4onbhidcv36wremue4kqd.onion\",\n+    \"emzybtc5bnpb2o6gh54oquiox54o4r7yn4a2wiiwzrjonlouaibm2zid.onion\",\n+    \"fpz6r5ppsakkwypjcglz6gcnwt7ytfhxskkfhzu62tnylcknh3eq6pad.onion\",\n+    \"255fhcp6ajvftnyo7bwz3an3t4a4brhopm3bamyh2iu5r3gnr2rq.b32.i2p\",\n+    \"27yrtht5b5bzom2w5ajb27najuqvuydtzb7bavlak25wkufec5mq.b32.i2p\",\n+    \"3gocb7wc4zvbmmebktet7gujccuux4ifk3kqilnxnj5wpdpqx2hq.b32.i2p\",\n+    \"4fcc23wt3hyjk3csfzcdyjz5pcwg5dzhdqgma6bch2qyiakcbboa.b32.i2p\",\n+    \"4osyqeknhx5qf3a73jeimexwclmt42cju6xdp7icja4ixxguu2hq.b32.i2p\",\n+    \"4umsi4nlmgyp4rckosg4vegd2ysljvid47zu7pqsollkaszcbpqq.b32.i2p\",\n+    \"6j2ezegd3e2e2x3o3pox335f5vxfthrrigkdrbgfbdjchm5h4awa.b32.i2p\",\n+    \"6n36ljyr55szci5ygidmxqer64qr24f4qmnymnbvgehz7qinxnla.b32.i2p\",\n+    \"72yjs6mvlby3ky6mgpvvlemmwq5pfcznrzd34jkhclgrishqdxva.b32.i2p\",\n+    \"a5qsnv3maw77mlmmzlcglu6twje6ttctd3fhpbfwcbpmewx6fczq.b32.i2p\",\n+    \"aovep2pco7v2k4rheofrgytbgk23eg22dczpsjqgqtxcqqvmxk6a.b32.i2p\",\n+    \"bitcoi656nll5hu6u7ddzrmzysdtwtnzcnrjd4rfdqbeey7dmn5a.b32.i2p\",\n+    \"brifkruhlkgrj65hffybrjrjqcgdgqs2r7siizb5b2232nruik3a.b32.i2p\",\n+    \"c4gfnttsuwqomiygupdqqqyy5y5emnk5c73hrfvatri67prd7vyq.b32.i2p\",\n+    \"day3hgxyrtwjslt54sikevbhxxs4qzo7d6vi72ipmscqtq3qmijq.b32.i2p\",\n+    \"du5kydummi23bjfp6bd7owsvrijgt7zhvxmz5h5f5spcioeoetwq.b32.i2p\",\n+    \"e55k6wu46rzp4pg5pk5npgbr3zz45bc3ihtzu2xcye5vwnzdy7pq.b32.i2p\",\n+    \"eciohu5nq7vsvwjjc52epskuk75d24iccgzmhbzrwonw6lx4gdva.b32.i2p\",\n+    \"ejlnngarmhqvune74ko7kk55xtgbz5i5ncs4vmnvjpy3l7y63xaa.b32.i2p\",\n+    \"fhzlp3xroabohnmjonu5iqazwhlbbwh5cpujvw2azcu3srqdceja.b32.i2p\",\n+    \"[fc32:17ea:e415:c3bf:9808:149d:b5a2:c9aa]\",\n+    \"[fcc7:be49:ccd1:dc91:3125:f0da:457d:8ce]\",\n+    \"[fcdc:73ae:b1a9:1bf8:d4c2:811:a4c7:c34e]\",\n+]\n+\n+class P2PPrivateBroadcast(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.disable_autoconnect = False\n+        self.num_nodes = 2\n+\n+    def setup_nodes(self):\n+        # Start a SOCKS5 proxy server.\n+        socks5_server_config = Socks5Configuration()\n+        # self.nodes[0] listens on p2p_port(0),\n+        # self.nodes[1] listens on p2p_port(1),\n+        # thus we tell the SOCKS5 server to listen on p2p_port(self.num_nodes (which is 2))\n+        socks5_server_config.addr = (\"127.0.0.1\", p2p_port(self.num_nodes))\n+        socks5_server_config.unauth = True\n+        socks5_server_config.auth = True\n+\n+        self.socks5_server = Socks5Server(socks5_server_config)\n+        self.socks5_server.start()\n+\n+        ports_base = p2p_port(MAX_NODES) + 15000\n+\n+        # Add 2 because one feeler and one extra block relay connections may\n+        # sneak in between the private broadcast connections.\n+        for i in range(NUM_INITIAL_CONNECTIONS + NUM_PRIVATE_BROADCAST_PER_TX + 2):\n+            if i == NUM_INITIAL_CONNECTIONS:\n+                # Instruct the SOCKS5 server to redirect the first private\n+                # broadcast connection from nodes[0] to nodes[1]\n+                self.socks5_server.conf.destinations.append({\n+                    \"to_addr\": \"127.0.0.1\", # nodes[1] listen address\n+                    \"to_port\": p2p_port(1), # nodes[1] listen port\n+                    \"node\": None,\n+                    \"requested_to_addr\": None,\n+                })\n+            else:\n+                # Create a Python P2P listening node and add it to self.socks5_server.conf.destinations[]\n+                listener = P2PInterface()\n+                listener.peer_connect_helper(dstaddr=\"0.0.0.0\", dstport=0, net=self.chain, timeout_factor=self.options.timeout_factor)\n+                listener.peer_connect_send_version(services=P2P_SERVICES)\n+                self.network_thread.listen(\n+                    p2p=listener,\n+                    # Instruct the SOCKS5 server to redirect a connection to this Python P2P listener.\n+                    callback=lambda addr, port: self.socks5_server.conf.destinations.append({\n+                        \"to_addr\": addr,\n+                        \"to_port\": port,\n+                        \"node\": None,\n+                        \"requested_to_addr\": None,\n+                    }),\n+                    addr=\"127.0.0.1\",\n+                    port=ports_base + i)\n+                # Wait until the callback has been called and it has done append().\n+                self.wait_until(lambda: len(self.socks5_server.conf.destinations) == i + 1)\n+\n+                self.socks5_server.conf.destinations[i][\"node\"] = listener\n+\n+        self.extra_args = [\n+            [\n+                \"-peerbloomfilters\", # needed to test replies to MEMPOOL\n+                \"-cjdnsreachable\", # needed to be able to add CJDNS addresses to addrman (otherwise they are unroutable).\n+                \"-privatebroadcast\",\n+                f\"-proxy={socks5_server_config.addr[0]}:{socks5_server_config.addr[1]}\",\n+            ],\n+            [\n+                \"-connect=0\",\n+                f\"-bind=127.0.0.1:{p2p_port(1)}=onion\", # consider all incoming as coming from Tor\n+            ],\n+        ]\n+        super().setup_nodes()\n+\n+    def setup_network(self):\n+        self.setup_nodes()\n+\n+    def run_test(self):\n+        tx_originator = self.nodes[0]\n+\n+        observer_inbound = tx_originator.add_p2p_connection(P2PDataStore())\n+\n+        # Fill tx_originator's addrman.\n+        for addr in addresses:\n+            res = tx_originator.addpeeraddress(address=addr, port=8333, tried=False)\n+            if res[\"success\"]:\n+                self.log.debug(f\"Added {addr} to tx_originator's addrman\")\n+            else:\n+                self.log.debug(f\"Could not add {addr} to tx_originator's addrman (collision?)\")\n+\n+        self.wait_until(lambda: self.socks5_server.conf.destinations_used == NUM_INITIAL_CONNECTIONS)\n+\n+        node1 = self.nodes[1]\n+        far_observer = node1.add_p2p_connection(P2PInterface())\n+\n+        # The next opened connections should be \"private broadcast\" for sending the transaction.\n+\n+        miniwallet = MiniWallet(tx_originator)\n+        tx = miniwallet.send_self_transfer(from_node=tx_originator)\n+        self.log.info(f\"Created transaction txid={tx['txid']}\")\n+\n+        self.log.debug(f\"Inspecting outbound connection i={NUM_INITIAL_CONNECTIONS}, must be the first private broadcast connection\")\n+        self.wait_until(lambda: len(node1.getrawmempool()) > 0)\n+        far_observer.wait_for_tx(tx[\"txid\"])\n+        self.log.debug(f\"Outbound connection i={NUM_INITIAL_CONNECTIONS}: the private broadcast target received and further relayed the transaction\")\n+\n+        num_private_broadcast_opened = 1 # already 1 connection to node1, confirmed by far_observer getting the tx\n+        for i in range(NUM_INITIAL_CONNECTIONS + 1, len(self.socks5_server.conf.destinations)):\n+            self.log.debug(f\"Inspecting outbound connection i={i}\")\n+            # At this point the connection may not yet have been established (A),\n+            # may be active (B), or may have already been closed (C).\n+            peer = self.socks5_server.conf.destinations[i][\"node\"]\n+            peer.wait_until(lambda: peer.message_count[\"version\"] == 1, check_connected=False)\n+            # Now it is either (B) or (C).\n+            requested_to_addr = self.socks5_server.conf.destinations[i][\"requested_to_addr\"]\n+            if peer.last_message[\"version\"].nServices != 0:\n+                self.log.debug(f\"Outbound connection i={i} to {requested_to_addr} not a private broadcast, ignoring it (maybe feeler or extra block only)\")\n+                continue\n+            self.log.debug(f\"Outbound connection i={i} to {requested_to_addr} must be a private broadcast, checking it\")\n+            assert requested_to_addr.endswith(\".onion\")\n+            peer.wait_for_disconnect()\n+            # Now it is (C).\n+            assert_equal(peer.message_count, {\n+                \"version\": 1,\n+                \"verack\": 1,\n+                \"tx\": 1,\n+                \"ping\": 1\n+            })\n+            dummy_address = CAddress()\n+            dummy_address.nServices = 0\n+            assert_equal(peer.last_message[\"version\"].nVersion, P2P_VERSION)\n+            assert_equal(peer.last_message[\"version\"].nServices, 0)\n+            assert_equal(peer.last_message[\"version\"].nTime, 0)\n+            assert_equal(peer.last_message[\"version\"].addrTo, dummy_address)\n+            assert_equal(peer.last_message[\"version\"].addrFrom, dummy_address)\n+            assert_equal(peer.last_message[\"version\"].strSubVer, \"/pynode:0.0.1/\")\n+            assert_equal(peer.last_message[\"version\"].nStartingHeight, 0)\n+            assert_equal(peer.last_message[\"version\"].relay, 0)\n+            assert_equal(peer.last_message[\"tx\"].tx.rehash(), tx[\"txid\"])\n+            self.log.debug(f\"Outbound connection i={i} is proper private broadcast, test ok\")\n+            num_private_broadcast_opened += 1\n+            if num_private_broadcast_opened == NUM_PRIVATE_BROADCAST_PER_TX:\n+                break\n+        assert_equal(num_private_broadcast_opened, NUM_PRIVATE_BROADCAST_PER_TX)\n+\n+        wtxid_int = int(tx[\"wtxid\"], 16)\n+        inv = CInv(MSG_WTX, wtxid_int)\n+\n+        self.log.info(\"Checking that the transaction is not in the originator node's mempool\")\n+        assert len(tx_originator.getrawmempool()) == 0",
      "path": "test/functional/p2p_private_broadcast.py",
      "position": null,
      "original_position": 296,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "c7e4d5cb2bf01d9719702e71c8d6264ee670e988",
      "in_reply_to_id": null,
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit:\r\n```suggestion\r\n        assert_equal(len(tx_originator.getrawmempool()), 0)\r\n```",
      "created_at": "2024-03-29T18:35:12Z",
      "updated_at": "2024-03-29T18:35:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1544759045",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1544759045"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 296,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1544863598",
      "pull_request_review_id": 1969597243,
      "id": 1544863598,
      "node_id": "PRRC_kwDOABII585cFL9u",
      "diff_hunk": "@@ -91,11 +93,14 @@ static RPCHelpMan sendrawtransaction()\n             std::string err_string;\n             AssertLockNotHeld(cs_main);\n             NodeContext& node = EnsureAnyNodeContext(request.context);\n+            const auto method = gArgs.GetBoolArg(\"-privatebroadcast\", DEFAULT_PRIVATE_BROADCAST)",
      "path": "src/rpc/mempool.cpp",
      "position": null,
      "original_position": 15,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "cf76f4f0fe1a3ef0730f70a035c10e01712b6d6b",
      "in_reply_to_id": null,
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In cf76f4f0fe1a3ef0730f70a035c10e01712b6d6b: Shouldn't we check here whether any private network is reachable? Because we can start a node with `-privatebroadcast` with `NET_ONION` becoming reachable later, no?",
      "created_at": "2024-03-29T20:55:52Z",
      "updated_at": "2024-03-29T20:55:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1544863598",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1544863598"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 96,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1545397035",
      "pull_request_review_id": 1969951271,
      "id": 1545397035,
      "node_id": "PRRC_kwDOABII585cHOMr",
      "diff_hunk": "@@ -655,11 +656,12 @@ class NetinfoRequestHandler : public BaseRequestHandler\n         \"           \\\"in\\\"  - inbound connections are those initiated by the peer\\n\"\n         \"           \\\"out\\\" - outbound connections are those initiated by us\\n\"\n         \"  type     Type of peer connection\\n\"\n-        \"           \\\"full\\\"   - full relay, the default\\n\"\n-        \"           \\\"block\\\"  - block relay; like full relay but does not relay transactions or addresses\\n\"\n-        \"           \\\"manual\\\" - peer we manually added using RPC addnode or the -addnode/-connect config options\\n\"\n-        \"           \\\"feeler\\\" - short-lived connection for testing addresses\\n\"\n-        \"           \\\"addr\\\"   - address fetch; short-lived connection for requesting addresses\\n\"\n+        \"           \\\"full\\\"      - full relay, the default\\n\"\n+        \"           \\\"block\\\"     - block relay; like full relay but does not relay transactions or addresses\\n\"\n+        \"           \\\"manual\\\"    - peer we manually added using RPC addnode or the -addnode/-connect config options\\n\"\n+        \"           \\\"feeler\\\"    - short-lived connection for testing addresses\\n\"\n+        \"           \\\"addr\\\"      - address fetch; short-lived connection for requesting addresses\\n\"\n+        \"           \\\"privat\\\"    - private broadcast; short-lived connection for broadcasting our transactions\\n\"",
      "path": "src/bitcoin-cli.cpp",
      "position": 22,
      "original_position": 22,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "c7e4d5cb2bf01d9719702e71c8d6264ee670e988",
      "in_reply_to_id": null,
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n        \"           \\\"private\\\"    - private broadcast; short-lived connection for broadcasting our transactions\\n\"\r\n```",
      "created_at": "2024-03-30T14:20:06Z",
      "updated_at": "2024-03-30T14:20:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1545397035",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1545397035"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 663,
      "original_line": 663,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1546167724",
      "pull_request_review_id": 1970997616,
      "id": 1546167724,
      "node_id": "PRRC_kwDOABII585cKKWs",
      "diff_hunk": "@@ -2493,7 +2561,17 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n             }\n         }\n \n-        CSemaphoreGrant grant(*semOutbound);\n+        MaybePickPrivateBroadcastNetwork(open_private_broadcast_to,\n+                                         m_private_broadcast_connections_to_open.load(),\n+                                         num_private_broadcast_opened);\n+\n+        // Don't wait for outbound connection slot to be available if we are going",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 115,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "b1f65ba837a805dc8f855c02337c1593c77add6d",
      "in_reply_to_id": null,
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Private connections are opened regardless of max connections limits, I think we could cover it in the functional test.",
      "created_at": "2024-04-01T09:47:18Z",
      "updated_at": "2024-04-01T09:47:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1546167724",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1546167724"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2580,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1546262607",
      "pull_request_review_id": 1971157352,
      "id": 1546262607,
      "node_id": "PRRC_kwDOABII585cKhhP",
      "diff_hunk": "@@ -2396,6 +2399,63 @@ bool CConnman::MaybePickPreferredNetwork(std::optional<Network>& network)\n     return false;\n }\n \n+/**\n+ * Decide whether to open a private broadcast connection and if yes, to which network.\n+ * @param[in,out] net If the previous attempt to open a connection was an attempt to\n+ * open a private broadcast connection (successful or not), then this should have a\n+ * value. When the function ends if this has value then it will contain the network\n+ * to which to open the connection.\n+ * @param[in] num_needed Number of private broadcast connections that need to be opened.\n+ * @param[in] num_opened Number of private broadcast connections that are currently opened.\n+ */\n+static void MaybePickPrivateBroadcastNetwork(std::optional<Network>& net, size_t num_needed, size_t num_opened)",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 25,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "b1f65ba837a805dc8f855c02337c1593c77add6d",
      "in_reply_to_id": null,
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In b1f65ba837a805dc8f855c02337c1593c77add6d: non-blocker: I think it would be more elegant if `MaybePickPrivateBroadcastNetwork` returns `std::optional<Network> net`. ",
      "created_at": "2024-04-01T12:12:12Z",
      "updated_at": "2024-04-01T12:12:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1546262607",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1546262607"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2411,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1546535762",
      "pull_request_review_id": 1971635317,
      "id": 1546535762,
      "node_id": "PRRC_kwDOABII585cLkNS",
      "diff_hunk": "@@ -0,0 +1,311 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test how locally submitted transactions are sent to the network when private broadcast is used.\n+\n+The topology in the test is:\n+\n+Bitcoin Core (tx_originator)\n+               ^   v       The default full-outbound + block-only connections\n+               |   |       (MAX_OUTBOUND_FULL_RELAY_CONNECTIONS + MAX_BLOCK_RELAY_ONLY_CONNECTIONS):\n+               |   |\n+               |   *-----> SOCKS5 Proxy ---> P2PInterface (self.socks5_server.conf.destinations[0][\"node\"])\n+               |   |\n+               |   *-----> SOCKS5 Proxy ---> P2PInterface (self.socks5_server.conf.destinations[1][\"node\"])\n+               |   ...\n+               |   |       The private broadcast TX recipients\n+               |   |       (NUM_PRIVATE_BROADCAST_PER_TX)\n+               |   |       plus maybe some feeler or extra block only connections:\n+               |   |\n+               |   *-----> SOCKS5 Proxy ---> Bitcoin Core (node1) (self.socks5_server.conf.destinations[i][\"node\"] is None)\n+               |   |                          ^\n+               |   |                          *----< P2PInterface (far_observer) (to check Bitcoin Core relays the tx)\n+               |   |\n+               |   *-----> SOCKS5 Proxy ---> P2PInterface (self.socks5_server.conf.destinations[i + 1][\"node\"])\n+               |   ...\n+               |\n+               *---------< P2PDataStore (observer_inbound)\n+\"\"\"\n+\n+from test_framework.p2p import (\n+    P2PDataStore,\n+    P2PInterface,\n+    P2P_SERVICES,\n+    P2P_VERSION,\n+)\n+from test_framework.messages import (\n+    CAddress,\n+    CInv,\n+    MSG_WTX,\n+    msg_inv,\n+)\n+from test_framework.socks5 import (\n+    Socks5Configuration,\n+    Socks5Server,\n+)\n+from test_framework.test_framework import (\n+    BitcoinTestFramework,\n+)\n+from test_framework.util import (\n+    MAX_NODES,\n+    assert_equal,\n+    p2p_port,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+)\n+\n+MAX_OUTBOUND_FULL_RELAY_CONNECTIONS = 8\n+MAX_BLOCK_RELAY_ONLY_CONNECTIONS = 2\n+NUM_INITIAL_CONNECTIONS = MAX_OUTBOUND_FULL_RELAY_CONNECTIONS + MAX_BLOCK_RELAY_ONLY_CONNECTIONS\n+NUM_PRIVATE_BROADCAST_PER_TX = 5\n+\n+# Fill addrman with these addresses. Must have enough Tor addresses, so that even\n+# if all 10 default connections are opened to a Tor address (!?) there must be more\n+# for private broadcast.\n+addresses = [\n+    \"1.65.195.98\",\n+    \"2.59.236.56\",\n+    \"2.83.114.20\",\n+    \"2.248.194.16\",\n+    \"5.2.154.6\",\n+    \"5.101.140.30\",\n+    \"5.128.87.126\",\n+    \"5.144.21.49\",\n+    \"5.172.132.104\",\n+    \"5.188.62.18\",\n+    \"5.200.2.180\",\n+    \"8.129.184.255\",\n+    \"8.209.105.138\",\n+    \"12.34.98.148\",\n+    \"14.199.102.151\",\n+    \"18.27.79.17\",\n+    \"18.27.124.231\",\n+    \"18.216.249.151\",\n+    \"23.88.155.58\",\n+    \"23.93.101.158\",\n+    \"[2001:19f0:1000:1db3:5400:4ff:fe56:5a8d]\",\n+    \"[2001:19f0:5:24da:3eec:efff:feb9:f36e]\",\n+    \"[2001:19f0:5:24da::]\",\n+    \"[2001:19f0:5:4535:3eec:efff:feb9:87e4]\",\n+    \"[2001:19f0:5:4535::]\",\n+    \"[2001:1bc0:c1::2000]\",\n+    \"[2001:1c04:4008:6300:8a5f:2678:114b:a660]\",\n+    \"[2001:41d0:203:3739::]\",\n+    \"[2001:41d0:203:8f49::]\",\n+    \"[2001:41d0:203:bb0a::]\",\n+    \"[2001:41d0:2:bf8f::]\",\n+    \"[2001:41d0:303:de8b::]\",\n+    \"[2001:41d0:403:3d61::]\",\n+    \"[2001:41d0:405:9600::]\",\n+    \"[2001:41d0:8:ed7f::1]\",\n+    \"[2001:41d0:a:69a2::1]\",\n+    \"[2001:41f0::62:6974:636f:696e]\",\n+    \"[2001:470:1b62::]\",\n+    \"[2001:470:1f05:43b:2831:8530:7179:5864]\",\n+    \"[2001:470:1f09:b14::11]\",\n+    \"2bqghnldu6mcug4pikzprwhtjjnsyederctvci6klcwzepnjd46ikjyd.onion\",\n+    \"4lr3w2iyyl5u5l6tosizclykf5v3smqroqdn2i4h3kq6pfbbjb2xytad.onion\",\n+    \"5g72ppm3krkorsfopcm2bi7wlv4ohhs4u4mlseymasn7g7zhdcyjpfid.onion\",\n+    \"5sbmcl4m5api5tqafi4gcckrn3y52sz5mskxf3t6iw4bp7erwiptrgqd.onion\",\n+    \"776aegl7tfhg6oiqqy76jnwrwbvcytsx2qegcgh2mjqujll4376ohlid.onion\",\n+    \"77mdte42srl42shdh2mhtjr7nf7dmedqrw6bkcdekhdvmnld6ojyyiad.onion\",\n+    \"azbpsh4arqlm6442wfimy7qr65bmha2zhgjg7wbaji6vvaug53hur2qd.onion\",\n+    \"b64xcbleqmwgq2u46bh4hegnlrzzvxntyzbmucn3zt7cssm7y4ubv3id.onion\",\n+    \"bsqbtcparrfihlwolt4xgjbf4cgqckvrvsfyvy6vhiqrnh4w6ghixoid.onion\",\n+    \"bsqbtctulf2g4jtjsdfgl2ed7qs6zz5wqx27qnyiik7laockryvszqqd.onion\",\n+    \"cwi3ekrwhig47dhhzfenr5hbvckj7fzaojygvazi2lucsenwbzwoyiqd.onion\",\n+    \"devinbtcmwkuitvxl3tfi5of4zau46ymeannkjv6fpnylkgf3q5fa3id.onion\",\n+    \"devinbtctu7uctl7hly2juu3thbgeivfnvw3ckj3phy6nyvpnx66yeyd.onion\",\n+    \"devinbtcyk643iruzfpaxw3on2jket7rbjmwygm42dmdyub3ietrbmid.onion\",\n+    \"dtql5vci4iaml4anmueftqr7bfgzqlauzfy4rc2tfgulldd3ekyijjyd.onion\",\n+    \"emzybtc25oddoa2prol2znpz2axnrg6k77xwgirmhv7igoiucddsxiad.onion\",\n+    \"emzybtc3ewh7zihpkdvuwlgxrhzcxy2p5fvjggp7ngjbxcytxvt4rjid.onion\",\n+    \"emzybtc454ewbviqnmgtgx3rgublsgkk23r4onbhidcv36wremue4kqd.onion\",\n+    \"emzybtc5bnpb2o6gh54oquiox54o4r7yn4a2wiiwzrjonlouaibm2zid.onion\",\n+    \"fpz6r5ppsakkwypjcglz6gcnwt7ytfhxskkfhzu62tnylcknh3eq6pad.onion\",\n+    \"255fhcp6ajvftnyo7bwz3an3t4a4brhopm3bamyh2iu5r3gnr2rq.b32.i2p\",\n+    \"27yrtht5b5bzom2w5ajb27najuqvuydtzb7bavlak25wkufec5mq.b32.i2p\",\n+    \"3gocb7wc4zvbmmebktet7gujccuux4ifk3kqilnxnj5wpdpqx2hq.b32.i2p\",\n+    \"4fcc23wt3hyjk3csfzcdyjz5pcwg5dzhdqgma6bch2qyiakcbboa.b32.i2p\",\n+    \"4osyqeknhx5qf3a73jeimexwclmt42cju6xdp7icja4ixxguu2hq.b32.i2p\",\n+    \"4umsi4nlmgyp4rckosg4vegd2ysljvid47zu7pqsollkaszcbpqq.b32.i2p\",\n+    \"6j2ezegd3e2e2x3o3pox335f5vxfthrrigkdrbgfbdjchm5h4awa.b32.i2p\",\n+    \"6n36ljyr55szci5ygidmxqer64qr24f4qmnymnbvgehz7qinxnla.b32.i2p\",\n+    \"72yjs6mvlby3ky6mgpvvlemmwq5pfcznrzd34jkhclgrishqdxva.b32.i2p\",\n+    \"a5qsnv3maw77mlmmzlcglu6twje6ttctd3fhpbfwcbpmewx6fczq.b32.i2p\",\n+    \"aovep2pco7v2k4rheofrgytbgk23eg22dczpsjqgqtxcqqvmxk6a.b32.i2p\",\n+    \"bitcoi656nll5hu6u7ddzrmzysdtwtnzcnrjd4rfdqbeey7dmn5a.b32.i2p\",\n+    \"brifkruhlkgrj65hffybrjrjqcgdgqs2r7siizb5b2232nruik3a.b32.i2p\",\n+    \"c4gfnttsuwqomiygupdqqqyy5y5emnk5c73hrfvatri67prd7vyq.b32.i2p\",\n+    \"day3hgxyrtwjslt54sikevbhxxs4qzo7d6vi72ipmscqtq3qmijq.b32.i2p\",\n+    \"du5kydummi23bjfp6bd7owsvrijgt7zhvxmz5h5f5spcioeoetwq.b32.i2p\",\n+    \"e55k6wu46rzp4pg5pk5npgbr3zz45bc3ihtzu2xcye5vwnzdy7pq.b32.i2p\",\n+    \"eciohu5nq7vsvwjjc52epskuk75d24iccgzmhbzrwonw6lx4gdva.b32.i2p\",\n+    \"ejlnngarmhqvune74ko7kk55xtgbz5i5ncs4vmnvjpy3l7y63xaa.b32.i2p\",\n+    \"fhzlp3xroabohnmjonu5iqazwhlbbwh5cpujvw2azcu3srqdceja.b32.i2p\",\n+    \"[fc32:17ea:e415:c3bf:9808:149d:b5a2:c9aa]\",\n+    \"[fcc7:be49:ccd1:dc91:3125:f0da:457d:8ce]\",\n+    \"[fcdc:73ae:b1a9:1bf8:d4c2:811:a4c7:c34e]\",\n+]\n+\n+class P2PPrivateBroadcast(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.disable_autoconnect = False\n+        self.num_nodes = 2\n+\n+    def setup_nodes(self):\n+        # Start a SOCKS5 proxy server.\n+        socks5_server_config = Socks5Configuration()\n+        # self.nodes[0] listens on p2p_port(0),\n+        # self.nodes[1] listens on p2p_port(1),\n+        # thus we tell the SOCKS5 server to listen on p2p_port(self.num_nodes (which is 2))\n+        socks5_server_config.addr = (\"127.0.0.1\", p2p_port(self.num_nodes))\n+        socks5_server_config.unauth = True\n+        socks5_server_config.auth = True\n+\n+        self.socks5_server = Socks5Server(socks5_server_config)\n+        self.socks5_server.start()\n+\n+        ports_base = p2p_port(MAX_NODES) + 15000\n+\n+        # Add 2 because one feeler and one extra block relay connections may\n+        # sneak in between the private broadcast connections.\n+        for i in range(NUM_INITIAL_CONNECTIONS + NUM_PRIVATE_BROADCAST_PER_TX + 2):\n+            if i == NUM_INITIAL_CONNECTIONS:\n+                # Instruct the SOCKS5 server to redirect the first private\n+                # broadcast connection from nodes[0] to nodes[1]\n+                self.socks5_server.conf.destinations.append({\n+                    \"to_addr\": \"127.0.0.1\", # nodes[1] listen address\n+                    \"to_port\": p2p_port(1), # nodes[1] listen port\n+                    \"node\": None,\n+                    \"requested_to_addr\": None,\n+                })\n+            else:\n+                # Create a Python P2P listening node and add it to self.socks5_server.conf.destinations[]\n+                listener = P2PInterface()\n+                listener.peer_connect_helper(dstaddr=\"0.0.0.0\", dstport=0, net=self.chain, timeout_factor=self.options.timeout_factor)\n+                listener.peer_connect_send_version(services=P2P_SERVICES)\n+                self.network_thread.listen(\n+                    p2p=listener,\n+                    # Instruct the SOCKS5 server to redirect a connection to this Python P2P listener.\n+                    callback=lambda addr, port: self.socks5_server.conf.destinations.append({\n+                        \"to_addr\": addr,\n+                        \"to_port\": port,\n+                        \"node\": None,\n+                        \"requested_to_addr\": None,\n+                    }),\n+                    addr=\"127.0.0.1\",\n+                    port=ports_base + i)\n+                # Wait until the callback has been called and it has done append().\n+                self.wait_until(lambda: len(self.socks5_server.conf.destinations) == i + 1)\n+\n+                self.socks5_server.conf.destinations[i][\"node\"] = listener\n+\n+        self.extra_args = [\n+            [\n+                \"-peerbloomfilters\", # needed to test replies to MEMPOOL\n+                \"-cjdnsreachable\", # needed to be able to add CJDNS addresses to addrman (otherwise they are unroutable).\n+                \"-privatebroadcast\",\n+                f\"-proxy={socks5_server_config.addr[0]}:{socks5_server_config.addr[1]}\",\n+            ],\n+            [\n+                \"-connect=0\",\n+                f\"-bind=127.0.0.1:{p2p_port(1)}=onion\", # consider all incoming as coming from Tor\n+            ],\n+        ]\n+        super().setup_nodes()\n+\n+    def setup_network(self):\n+        self.setup_nodes()\n+\n+    def run_test(self):\n+        tx_originator = self.nodes[0]\n+\n+        observer_inbound = tx_originator.add_p2p_connection(P2PDataStore())\n+\n+        # Fill tx_originator's addrman.\n+        for addr in addresses:\n+            res = tx_originator.addpeeraddress(address=addr, port=8333, tried=False)\n+            if res[\"success\"]:\n+                self.log.debug(f\"Added {addr} to tx_originator's addrman\")\n+            else:\n+                self.log.debug(f\"Could not add {addr} to tx_originator's addrman (collision?)\")\n+\n+        self.wait_until(lambda: self.socks5_server.conf.destinations_used == NUM_INITIAL_CONNECTIONS)\n+\n+        node1 = self.nodes[1]\n+        far_observer = node1.add_p2p_connection(P2PInterface())\n+\n+        # The next opened connections should be \"private broadcast\" for sending the transaction.\n+\n+        miniwallet = MiniWallet(tx_originator)\n+        tx = miniwallet.send_self_transfer(from_node=tx_originator)\n+        self.log.info(f\"Created transaction txid={tx['txid']}\")\n+\n+        self.log.debug(f\"Inspecting outbound connection i={NUM_INITIAL_CONNECTIONS}, must be the first private broadcast connection\")\n+        self.wait_until(lambda: len(node1.getrawmempool()) > 0)\n+        far_observer.wait_for_tx(tx[\"txid\"])\n+        self.log.debug(f\"Outbound connection i={NUM_INITIAL_CONNECTIONS}: the private broadcast target received and further relayed the transaction\")\n+\n+        num_private_broadcast_opened = 1 # already 1 connection to node1, confirmed by far_observer getting the tx\n+        for i in range(NUM_INITIAL_CONNECTIONS + 1, len(self.socks5_server.conf.destinations)):\n+            self.log.debug(f\"Inspecting outbound connection i={i}\")\n+            # At this point the connection may not yet have been established (A),\n+            # may be active (B), or may have already been closed (C).\n+            peer = self.socks5_server.conf.destinations[i][\"node\"]\n+            peer.wait_until(lambda: peer.message_count[\"version\"] == 1, check_connected=False)\n+            # Now it is either (B) or (C).\n+            requested_to_addr = self.socks5_server.conf.destinations[i][\"requested_to_addr\"]\n+            if peer.last_message[\"version\"].nServices != 0:\n+                self.log.debug(f\"Outbound connection i={i} to {requested_to_addr} not a private broadcast, ignoring it (maybe feeler or extra block only)\")\n+                continue\n+            self.log.debug(f\"Outbound connection i={i} to {requested_to_addr} must be a private broadcast, checking it\")\n+            assert requested_to_addr.endswith(\".onion\")\n+            peer.wait_for_disconnect()\n+            # Now it is (C).\n+            assert_equal(peer.message_count, {\n+                \"version\": 1,\n+                \"verack\": 1,\n+                \"tx\": 1,\n+                \"ping\": 1\n+            })\n+            dummy_address = CAddress()\n+            dummy_address.nServices = 0\n+            assert_equal(peer.last_message[\"version\"].nVersion, P2P_VERSION)\n+            assert_equal(peer.last_message[\"version\"].nServices, 0)\n+            assert_equal(peer.last_message[\"version\"].nTime, 0)\n+            assert_equal(peer.last_message[\"version\"].addrTo, dummy_address)\n+            assert_equal(peer.last_message[\"version\"].addrFrom, dummy_address)\n+            assert_equal(peer.last_message[\"version\"].strSubVer, \"/pynode:0.0.1/\")\n+            assert_equal(peer.last_message[\"version\"].nStartingHeight, 0)\n+            assert_equal(peer.last_message[\"version\"].relay, 0)\n+            assert_equal(peer.last_message[\"tx\"].tx.rehash(), tx[\"txid\"])\n+            self.log.debug(f\"Outbound connection i={i} is proper private broadcast, test ok\")\n+            num_private_broadcast_opened += 1\n+            if num_private_broadcast_opened == NUM_PRIVATE_BROADCAST_PER_TX:\n+                break\n+        assert_equal(num_private_broadcast_opened, NUM_PRIVATE_BROADCAST_PER_TX)\n+\n+        wtxid_int = int(tx[\"wtxid\"], 16)\n+        inv = CInv(MSG_WTX, wtxid_int)\n+\n+        self.log.info(\"Checking that the transaction is not in the originator node's mempool\")\n+        assert len(tx_originator.getrawmempool()) == 0",
      "path": "test/functional/p2p_private_broadcast.py",
      "position": null,
      "original_position": 296,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "c7e4d5cb2bf01d9719702e71c8d6264ee670e988",
      "in_reply_to_id": 1544759045,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2024-04-01T16:21:13Z",
      "updated_at": "2024-04-01T16:21:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1546535762",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1546535762"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 296,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1546542191",
      "pull_request_review_id": 1971641791,
      "id": 1546542191,
      "node_id": "PRRC_kwDOABII585cLlxv",
      "diff_hunk": "@@ -91,11 +93,14 @@ static RPCHelpMan sendrawtransaction()\n             std::string err_string;\n             AssertLockNotHeld(cs_main);\n             NodeContext& node = EnsureAnyNodeContext(request.context);\n+            const auto method = gArgs.GetBoolArg(\"-privatebroadcast\", DEFAULT_PRIVATE_BROADCAST)",
      "path": "src/rpc/mempool.cpp",
      "position": null,
      "original_position": 15,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "cf76f4f0fe1a3ef0730f70a035c10e01712b6d6b",
      "in_reply_to_id": 1544863598,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2024-04-01T16:23:44Z",
      "updated_at": "2024-04-01T16:23:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1546542191",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1546542191"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 96,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1546548842",
      "pull_request_review_id": 1971648140,
      "id": 1546548842,
      "node_id": "PRRC_kwDOABII585cLnZq",
      "diff_hunk": "@@ -2493,7 +2561,17 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n             }\n         }\n \n-        CSemaphoreGrant grant(*semOutbound);\n+        MaybePickPrivateBroadcastNetwork(open_private_broadcast_to,\n+                                         m_private_broadcast_connections_to_open.load(),\n+                                         num_private_broadcast_opened);\n+\n+        // Don't wait for outbound connection slot to be available if we are going",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 115,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "b1f65ba837a805dc8f855c02337c1593c77add6d",
      "in_reply_to_id": 1546167724,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The current functional test already opens the usual 10 connections and then fires a private broadcast one. Is this what you mean?",
      "created_at": "2024-04-01T16:25:11Z",
      "updated_at": "2024-04-01T16:25:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1546548842",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1546548842"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2580,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1546549521",
      "pull_request_review_id": 1971648844,
      "id": 1546549521,
      "node_id": "PRRC_kwDOABII585cLnkR",
      "diff_hunk": "@@ -2396,6 +2399,63 @@ bool CConnman::MaybePickPreferredNetwork(std::optional<Network>& network)\n     return false;\n }\n \n+/**\n+ * Decide whether to open a private broadcast connection and if yes, to which network.\n+ * @param[in,out] net If the previous attempt to open a connection was an attempt to\n+ * open a private broadcast connection (successful or not), then this should have a\n+ * value. When the function ends if this has value then it will contain the network\n+ * to which to open the connection.\n+ * @param[in] num_needed Number of private broadcast connections that need to be opened.\n+ * @param[in] num_opened Number of private broadcast connections that are currently opened.\n+ */\n+static void MaybePickPrivateBroadcastNetwork(std::optional<Network>& net, size_t num_needed, size_t num_opened)",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 25,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "b1f65ba837a805dc8f855c02337c1593c77add6d",
      "in_reply_to_id": 1546262607,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2024-04-01T16:25:20Z",
      "updated_at": "2024-04-01T16:25:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1546549521",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1546549521"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2411,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1546557097",
      "pull_request_review_id": 1971658452,
      "id": 1546557097,
      "node_id": "PRRC_kwDOABII585cLpap",
      "diff_hunk": "@@ -2493,7 +2561,17 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n             }\n         }\n \n-        CSemaphoreGrant grant(*semOutbound);\n+        MaybePickPrivateBroadcastNetwork(open_private_broadcast_to,\n+                                         m_private_broadcast_connections_to_open.load(),\n+                                         num_private_broadcast_opened);\n+\n+        // Don't wait for outbound connection slot to be available if we are going",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 115,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "b1f65ba837a805dc8f855c02337c1593c77add6d",
      "in_reply_to_id": 1546167724,
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, I missed that. Nevermind.",
      "created_at": "2024-04-01T16:27:36Z",
      "updated_at": "2024-04-01T16:27:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1546557097",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1546557097"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2580,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1546558523",
      "pull_request_review_id": 1971659859,
      "id": 1546558523,
      "node_id": "PRRC_kwDOABII585cLpw7",
      "diff_hunk": "@@ -655,11 +656,12 @@ class NetinfoRequestHandler : public BaseRequestHandler\n         \"           \\\"in\\\"  - inbound connections are those initiated by the peer\\n\"\n         \"           \\\"out\\\" - outbound connections are those initiated by us\\n\"\n         \"  type     Type of peer connection\\n\"\n-        \"           \\\"full\\\"   - full relay, the default\\n\"\n-        \"           \\\"block\\\"  - block relay; like full relay but does not relay transactions or addresses\\n\"\n-        \"           \\\"manual\\\" - peer we manually added using RPC addnode or the -addnode/-connect config options\\n\"\n-        \"           \\\"feeler\\\" - short-lived connection for testing addresses\\n\"\n-        \"           \\\"addr\\\"   - address fetch; short-lived connection for requesting addresses\\n\"\n+        \"           \\\"full\\\"      - full relay, the default\\n\"\n+        \"           \\\"block\\\"     - block relay; like full relay but does not relay transactions or addresses\\n\"\n+        \"           \\\"manual\\\"    - peer we manually added using RPC addnode or the -addnode/-connect config options\\n\"\n+        \"           \\\"feeler\\\"    - short-lived connection for testing addresses\\n\"\n+        \"           \\\"addr\\\"      - address fetch; short-lived connection for requesting addresses\\n\"\n+        \"           \\\"privat\\\"    - private broadcast; short-lived connection for broadcasting our transactions\\n\"",
      "path": "src/bitcoin-cli.cpp",
      "position": 22,
      "original_position": 22,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "c7e4d5cb2bf01d9719702e71c8d6264ee670e988",
      "in_reply_to_id": 1545397035,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It was suggested that this be 6 chars or less: https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1518063388. Feel free to suggest another name.",
      "created_at": "2024-04-01T16:28:36Z",
      "updated_at": "2024-04-01T16:28:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1546558523",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1546558523"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 663,
      "original_line": 663,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1546756330",
      "pull_request_review_id": 1971975903,
      "id": 1546756330,
      "node_id": "PRRC_kwDOABII585cMaDq",
      "diff_hunk": "@@ -0,0 +1,311 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test how locally submitted transactions are sent to the network when private broadcast is used.\n+\n+The topology in the test is:\n+\n+Bitcoin Core (tx_originator)\n+               ^   v       The default full-outbound + block-only connections\n+               |   |       (MAX_OUTBOUND_FULL_RELAY_CONNECTIONS + MAX_BLOCK_RELAY_ONLY_CONNECTIONS):\n+               |   |\n+               |   *-----> SOCKS5 Proxy ---> P2PInterface (self.socks5_server.conf.destinations[0][\"node\"])\n+               |   |\n+               |   *-----> SOCKS5 Proxy ---> P2PInterface (self.socks5_server.conf.destinations[1][\"node\"])\n+               |   ...\n+               |   |       The private broadcast TX recipients\n+               |   |       (NUM_PRIVATE_BROADCAST_PER_TX)\n+               |   |       plus maybe some feeler or extra block only connections:\n+               |   |\n+               |   *-----> SOCKS5 Proxy ---> Bitcoin Core (node1) (self.socks5_server.conf.destinations[i][\"node\"] is None)\n+               |   |                          ^\n+               |   |                          *----< P2PInterface (far_observer) (to check Bitcoin Core relays the tx)\n+               |   |\n+               |   *-----> SOCKS5 Proxy ---> P2PInterface (self.socks5_server.conf.destinations[i + 1][\"node\"])\n+               |   ...\n+               |\n+               *---------< P2PDataStore (observer_inbound)\n+\"\"\"\n+\n+from test_framework.p2p import (\n+    P2PDataStore,\n+    P2PInterface,\n+    P2P_SERVICES,\n+    P2P_VERSION,\n+)\n+from test_framework.messages import (\n+    CAddress,\n+    CInv,\n+    MSG_WTX,\n+    msg_inv,\n+)\n+from test_framework.socks5 import (\n+    Socks5Configuration,\n+    Socks5Server,\n+)\n+from test_framework.test_framework import (\n+    BitcoinTestFramework,\n+)\n+from test_framework.util import (\n+    MAX_NODES,\n+    assert_equal,\n+    p2p_port,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+)\n+\n+MAX_OUTBOUND_FULL_RELAY_CONNECTIONS = 8\n+MAX_BLOCK_RELAY_ONLY_CONNECTIONS = 2\n+NUM_INITIAL_CONNECTIONS = MAX_OUTBOUND_FULL_RELAY_CONNECTIONS + MAX_BLOCK_RELAY_ONLY_CONNECTIONS\n+NUM_PRIVATE_BROADCAST_PER_TX = 5\n+\n+# Fill addrman with these addresses. Must have enough Tor addresses, so that even\n+# if all 10 default connections are opened to a Tor address (!?) there must be more\n+# for private broadcast.\n+addresses = [\n+    \"1.65.195.98\",\n+    \"2.59.236.56\",\n+    \"2.83.114.20\",\n+    \"2.248.194.16\",\n+    \"5.2.154.6\",\n+    \"5.101.140.30\",\n+    \"5.128.87.126\",\n+    \"5.144.21.49\",\n+    \"5.172.132.104\",\n+    \"5.188.62.18\",\n+    \"5.200.2.180\",\n+    \"8.129.184.255\",\n+    \"8.209.105.138\",\n+    \"12.34.98.148\",\n+    \"14.199.102.151\",\n+    \"18.27.79.17\",\n+    \"18.27.124.231\",\n+    \"18.216.249.151\",\n+    \"23.88.155.58\",\n+    \"23.93.101.158\",\n+    \"[2001:19f0:1000:1db3:5400:4ff:fe56:5a8d]\",\n+    \"[2001:19f0:5:24da:3eec:efff:feb9:f36e]\",\n+    \"[2001:19f0:5:24da::]\",\n+    \"[2001:19f0:5:4535:3eec:efff:feb9:87e4]\",\n+    \"[2001:19f0:5:4535::]\",\n+    \"[2001:1bc0:c1::2000]\",\n+    \"[2001:1c04:4008:6300:8a5f:2678:114b:a660]\",\n+    \"[2001:41d0:203:3739::]\",\n+    \"[2001:41d0:203:8f49::]\",\n+    \"[2001:41d0:203:bb0a::]\",\n+    \"[2001:41d0:2:bf8f::]\",\n+    \"[2001:41d0:303:de8b::]\",\n+    \"[2001:41d0:403:3d61::]\",\n+    \"[2001:41d0:405:9600::]\",\n+    \"[2001:41d0:8:ed7f::1]\",\n+    \"[2001:41d0:a:69a2::1]\",\n+    \"[2001:41f0::62:6974:636f:696e]\",\n+    \"[2001:470:1b62::]\",\n+    \"[2001:470:1f05:43b:2831:8530:7179:5864]\",\n+    \"[2001:470:1f09:b14::11]\",\n+    \"2bqghnldu6mcug4pikzprwhtjjnsyederctvci6klcwzepnjd46ikjyd.onion\",\n+    \"4lr3w2iyyl5u5l6tosizclykf5v3smqroqdn2i4h3kq6pfbbjb2xytad.onion\",\n+    \"5g72ppm3krkorsfopcm2bi7wlv4ohhs4u4mlseymasn7g7zhdcyjpfid.onion\",\n+    \"5sbmcl4m5api5tqafi4gcckrn3y52sz5mskxf3t6iw4bp7erwiptrgqd.onion\",\n+    \"776aegl7tfhg6oiqqy76jnwrwbvcytsx2qegcgh2mjqujll4376ohlid.onion\",\n+    \"77mdte42srl42shdh2mhtjr7nf7dmedqrw6bkcdekhdvmnld6ojyyiad.onion\",\n+    \"azbpsh4arqlm6442wfimy7qr65bmha2zhgjg7wbaji6vvaug53hur2qd.onion\",\n+    \"b64xcbleqmwgq2u46bh4hegnlrzzvxntyzbmucn3zt7cssm7y4ubv3id.onion\",\n+    \"bsqbtcparrfihlwolt4xgjbf4cgqckvrvsfyvy6vhiqrnh4w6ghixoid.onion\",\n+    \"bsqbtctulf2g4jtjsdfgl2ed7qs6zz5wqx27qnyiik7laockryvszqqd.onion\",\n+    \"cwi3ekrwhig47dhhzfenr5hbvckj7fzaojygvazi2lucsenwbzwoyiqd.onion\",\n+    \"devinbtcmwkuitvxl3tfi5of4zau46ymeannkjv6fpnylkgf3q5fa3id.onion\",\n+    \"devinbtctu7uctl7hly2juu3thbgeivfnvw3ckj3phy6nyvpnx66yeyd.onion\",\n+    \"devinbtcyk643iruzfpaxw3on2jket7rbjmwygm42dmdyub3ietrbmid.onion\",\n+    \"dtql5vci4iaml4anmueftqr7bfgzqlauzfy4rc2tfgulldd3ekyijjyd.onion\",\n+    \"emzybtc25oddoa2prol2znpz2axnrg6k77xwgirmhv7igoiucddsxiad.onion\",\n+    \"emzybtc3ewh7zihpkdvuwlgxrhzcxy2p5fvjggp7ngjbxcytxvt4rjid.onion\",\n+    \"emzybtc454ewbviqnmgtgx3rgublsgkk23r4onbhidcv36wremue4kqd.onion\",\n+    \"emzybtc5bnpb2o6gh54oquiox54o4r7yn4a2wiiwzrjonlouaibm2zid.onion\",\n+    \"fpz6r5ppsakkwypjcglz6gcnwt7ytfhxskkfhzu62tnylcknh3eq6pad.onion\",\n+    \"255fhcp6ajvftnyo7bwz3an3t4a4brhopm3bamyh2iu5r3gnr2rq.b32.i2p\",\n+    \"27yrtht5b5bzom2w5ajb27najuqvuydtzb7bavlak25wkufec5mq.b32.i2p\",\n+    \"3gocb7wc4zvbmmebktet7gujccuux4ifk3kqilnxnj5wpdpqx2hq.b32.i2p\",\n+    \"4fcc23wt3hyjk3csfzcdyjz5pcwg5dzhdqgma6bch2qyiakcbboa.b32.i2p\",\n+    \"4osyqeknhx5qf3a73jeimexwclmt42cju6xdp7icja4ixxguu2hq.b32.i2p\",\n+    \"4umsi4nlmgyp4rckosg4vegd2ysljvid47zu7pqsollkaszcbpqq.b32.i2p\",\n+    \"6j2ezegd3e2e2x3o3pox335f5vxfthrrigkdrbgfbdjchm5h4awa.b32.i2p\",\n+    \"6n36ljyr55szci5ygidmxqer64qr24f4qmnymnbvgehz7qinxnla.b32.i2p\",\n+    \"72yjs6mvlby3ky6mgpvvlemmwq5pfcznrzd34jkhclgrishqdxva.b32.i2p\",\n+    \"a5qsnv3maw77mlmmzlcglu6twje6ttctd3fhpbfwcbpmewx6fczq.b32.i2p\",\n+    \"aovep2pco7v2k4rheofrgytbgk23eg22dczpsjqgqtxcqqvmxk6a.b32.i2p\",\n+    \"bitcoi656nll5hu6u7ddzrmzysdtwtnzcnrjd4rfdqbeey7dmn5a.b32.i2p\",\n+    \"brifkruhlkgrj65hffybrjrjqcgdgqs2r7siizb5b2232nruik3a.b32.i2p\",\n+    \"c4gfnttsuwqomiygupdqqqyy5y5emnk5c73hrfvatri67prd7vyq.b32.i2p\",\n+    \"day3hgxyrtwjslt54sikevbhxxs4qzo7d6vi72ipmscqtq3qmijq.b32.i2p\",\n+    \"du5kydummi23bjfp6bd7owsvrijgt7zhvxmz5h5f5spcioeoetwq.b32.i2p\",\n+    \"e55k6wu46rzp4pg5pk5npgbr3zz45bc3ihtzu2xcye5vwnzdy7pq.b32.i2p\",\n+    \"eciohu5nq7vsvwjjc52epskuk75d24iccgzmhbzrwonw6lx4gdva.b32.i2p\",\n+    \"ejlnngarmhqvune74ko7kk55xtgbz5i5ncs4vmnvjpy3l7y63xaa.b32.i2p\",\n+    \"fhzlp3xroabohnmjonu5iqazwhlbbwh5cpujvw2azcu3srqdceja.b32.i2p\",\n+    \"[fc32:17ea:e415:c3bf:9808:149d:b5a2:c9aa]\",\n+    \"[fcc7:be49:ccd1:dc91:3125:f0da:457d:8ce]\",\n+    \"[fcdc:73ae:b1a9:1bf8:d4c2:811:a4c7:c34e]\",\n+]\n+\n+class P2PPrivateBroadcast(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.disable_autoconnect = False\n+        self.num_nodes = 2\n+\n+    def setup_nodes(self):\n+        # Start a SOCKS5 proxy server.\n+        socks5_server_config = Socks5Configuration()\n+        # self.nodes[0] listens on p2p_port(0),\n+        # self.nodes[1] listens on p2p_port(1),\n+        # thus we tell the SOCKS5 server to listen on p2p_port(self.num_nodes (which is 2))\n+        socks5_server_config.addr = (\"127.0.0.1\", p2p_port(self.num_nodes))\n+        socks5_server_config.unauth = True\n+        socks5_server_config.auth = True\n+\n+        self.socks5_server = Socks5Server(socks5_server_config)\n+        self.socks5_server.start()\n+\n+        ports_base = p2p_port(MAX_NODES) + 15000\n+\n+        # Add 2 because one feeler and one extra block relay connections may\n+        # sneak in between the private broadcast connections.\n+        for i in range(NUM_INITIAL_CONNECTIONS + NUM_PRIVATE_BROADCAST_PER_TX + 2):\n+            if i == NUM_INITIAL_CONNECTIONS:\n+                # Instruct the SOCKS5 server to redirect the first private\n+                # broadcast connection from nodes[0] to nodes[1]\n+                self.socks5_server.conf.destinations.append({\n+                    \"to_addr\": \"127.0.0.1\", # nodes[1] listen address\n+                    \"to_port\": p2p_port(1), # nodes[1] listen port\n+                    \"node\": None,\n+                    \"requested_to_addr\": None,\n+                })\n+            else:\n+                # Create a Python P2P listening node and add it to self.socks5_server.conf.destinations[]\n+                listener = P2PInterface()\n+                listener.peer_connect_helper(dstaddr=\"0.0.0.0\", dstport=0, net=self.chain, timeout_factor=self.options.timeout_factor)\n+                listener.peer_connect_send_version(services=P2P_SERVICES)\n+                self.network_thread.listen(\n+                    p2p=listener,\n+                    # Instruct the SOCKS5 server to redirect a connection to this Python P2P listener.\n+                    callback=lambda addr, port: self.socks5_server.conf.destinations.append({\n+                        \"to_addr\": addr,\n+                        \"to_port\": port,\n+                        \"node\": None,\n+                        \"requested_to_addr\": None,\n+                    }),\n+                    addr=\"127.0.0.1\",\n+                    port=ports_base + i)\n+                # Wait until the callback has been called and it has done append().\n+                self.wait_until(lambda: len(self.socks5_server.conf.destinations) == i + 1)\n+\n+                self.socks5_server.conf.destinations[i][\"node\"] = listener\n+\n+        self.extra_args = [\n+            [\n+                \"-peerbloomfilters\", # needed to test replies to MEMPOOL\n+                \"-cjdnsreachable\", # needed to be able to add CJDNS addresses to addrman (otherwise they are unroutable).\n+                \"-privatebroadcast\",\n+                f\"-proxy={socks5_server_config.addr[0]}:{socks5_server_config.addr[1]}\",\n+            ],\n+            [\n+                \"-connect=0\",\n+                f\"-bind=127.0.0.1:{p2p_port(1)}=onion\", # consider all incoming as coming from Tor\n+            ],\n+        ]\n+        super().setup_nodes()\n+\n+    def setup_network(self):\n+        self.setup_nodes()\n+\n+    def run_test(self):\n+        tx_originator = self.nodes[0]\n+\n+        observer_inbound = tx_originator.add_p2p_connection(P2PDataStore())\n+\n+        # Fill tx_originator's addrman.\n+        for addr in addresses:\n+            res = tx_originator.addpeeraddress(address=addr, port=8333, tried=False)\n+            if res[\"success\"]:\n+                self.log.debug(f\"Added {addr} to tx_originator's addrman\")\n+            else:\n+                self.log.debug(f\"Could not add {addr} to tx_originator's addrman (collision?)\")",
      "path": "test/functional/p2p_private_broadcast.py",
      "position": null,
      "original_position": 235,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "413574e81ef4d608b9b0a2079f81a4e90ee2a341",
      "in_reply_to_id": null,
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 413574e81ef4d608b9b0a2079f81a4e90ee2a341: You can use `-test=addrman` to make addrman deterministic.  Running the test several times I realized that sometimes a collision happens, sometimes not.",
      "created_at": "2024-04-01T19:29:12Z",
      "updated_at": "2024-04-01T19:29:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1546756330",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1546756330"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 232,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1548220655",
      "pull_request_review_id": 1974375838,
      "id": 1548220655,
      "node_id": "PRRC_kwDOABII585cR_jv",
      "diff_hunk": "@@ -0,0 +1,311 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test how locally submitted transactions are sent to the network when private broadcast is used.\n+\n+The topology in the test is:\n+\n+Bitcoin Core (tx_originator)\n+               ^   v       The default full-outbound + block-only connections\n+               |   |       (MAX_OUTBOUND_FULL_RELAY_CONNECTIONS + MAX_BLOCK_RELAY_ONLY_CONNECTIONS):\n+               |   |\n+               |   *-----> SOCKS5 Proxy ---> P2PInterface (self.socks5_server.conf.destinations[0][\"node\"])\n+               |   |\n+               |   *-----> SOCKS5 Proxy ---> P2PInterface (self.socks5_server.conf.destinations[1][\"node\"])\n+               |   ...\n+               |   |       The private broadcast TX recipients\n+               |   |       (NUM_PRIVATE_BROADCAST_PER_TX)\n+               |   |       plus maybe some feeler or extra block only connections:\n+               |   |\n+               |   *-----> SOCKS5 Proxy ---> Bitcoin Core (node1) (self.socks5_server.conf.destinations[i][\"node\"] is None)\n+               |   |                          ^\n+               |   |                          *----< P2PInterface (far_observer) (to check Bitcoin Core relays the tx)\n+               |   |\n+               |   *-----> SOCKS5 Proxy ---> P2PInterface (self.socks5_server.conf.destinations[i + 1][\"node\"])\n+               |   ...\n+               |\n+               *---------< P2PDataStore (observer_inbound)\n+\"\"\"\n+\n+from test_framework.p2p import (\n+    P2PDataStore,\n+    P2PInterface,\n+    P2P_SERVICES,\n+    P2P_VERSION,\n+)\n+from test_framework.messages import (\n+    CAddress,\n+    CInv,\n+    MSG_WTX,\n+    msg_inv,\n+)\n+from test_framework.socks5 import (\n+    Socks5Configuration,\n+    Socks5Server,\n+)\n+from test_framework.test_framework import (\n+    BitcoinTestFramework,\n+)\n+from test_framework.util import (\n+    MAX_NODES,\n+    assert_equal,\n+    p2p_port,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+)\n+\n+MAX_OUTBOUND_FULL_RELAY_CONNECTIONS = 8\n+MAX_BLOCK_RELAY_ONLY_CONNECTIONS = 2\n+NUM_INITIAL_CONNECTIONS = MAX_OUTBOUND_FULL_RELAY_CONNECTIONS + MAX_BLOCK_RELAY_ONLY_CONNECTIONS\n+NUM_PRIVATE_BROADCAST_PER_TX = 5\n+\n+# Fill addrman with these addresses. Must have enough Tor addresses, so that even\n+# if all 10 default connections are opened to a Tor address (!?) there must be more\n+# for private broadcast.\n+addresses = [\n+    \"1.65.195.98\",\n+    \"2.59.236.56\",\n+    \"2.83.114.20\",\n+    \"2.248.194.16\",\n+    \"5.2.154.6\",\n+    \"5.101.140.30\",\n+    \"5.128.87.126\",\n+    \"5.144.21.49\",\n+    \"5.172.132.104\",\n+    \"5.188.62.18\",\n+    \"5.200.2.180\",\n+    \"8.129.184.255\",\n+    \"8.209.105.138\",\n+    \"12.34.98.148\",\n+    \"14.199.102.151\",\n+    \"18.27.79.17\",\n+    \"18.27.124.231\",\n+    \"18.216.249.151\",\n+    \"23.88.155.58\",\n+    \"23.93.101.158\",\n+    \"[2001:19f0:1000:1db3:5400:4ff:fe56:5a8d]\",\n+    \"[2001:19f0:5:24da:3eec:efff:feb9:f36e]\",\n+    \"[2001:19f0:5:24da::]\",\n+    \"[2001:19f0:5:4535:3eec:efff:feb9:87e4]\",\n+    \"[2001:19f0:5:4535::]\",\n+    \"[2001:1bc0:c1::2000]\",\n+    \"[2001:1c04:4008:6300:8a5f:2678:114b:a660]\",\n+    \"[2001:41d0:203:3739::]\",\n+    \"[2001:41d0:203:8f49::]\",\n+    \"[2001:41d0:203:bb0a::]\",\n+    \"[2001:41d0:2:bf8f::]\",\n+    \"[2001:41d0:303:de8b::]\",\n+    \"[2001:41d0:403:3d61::]\",\n+    \"[2001:41d0:405:9600::]\",\n+    \"[2001:41d0:8:ed7f::1]\",\n+    \"[2001:41d0:a:69a2::1]\",\n+    \"[2001:41f0::62:6974:636f:696e]\",\n+    \"[2001:470:1b62::]\",\n+    \"[2001:470:1f05:43b:2831:8530:7179:5864]\",\n+    \"[2001:470:1f09:b14::11]\",\n+    \"2bqghnldu6mcug4pikzprwhtjjnsyederctvci6klcwzepnjd46ikjyd.onion\",\n+    \"4lr3w2iyyl5u5l6tosizclykf5v3smqroqdn2i4h3kq6pfbbjb2xytad.onion\",\n+    \"5g72ppm3krkorsfopcm2bi7wlv4ohhs4u4mlseymasn7g7zhdcyjpfid.onion\",\n+    \"5sbmcl4m5api5tqafi4gcckrn3y52sz5mskxf3t6iw4bp7erwiptrgqd.onion\",\n+    \"776aegl7tfhg6oiqqy76jnwrwbvcytsx2qegcgh2mjqujll4376ohlid.onion\",\n+    \"77mdte42srl42shdh2mhtjr7nf7dmedqrw6bkcdekhdvmnld6ojyyiad.onion\",\n+    \"azbpsh4arqlm6442wfimy7qr65bmha2zhgjg7wbaji6vvaug53hur2qd.onion\",\n+    \"b64xcbleqmwgq2u46bh4hegnlrzzvxntyzbmucn3zt7cssm7y4ubv3id.onion\",\n+    \"bsqbtcparrfihlwolt4xgjbf4cgqckvrvsfyvy6vhiqrnh4w6ghixoid.onion\",\n+    \"bsqbtctulf2g4jtjsdfgl2ed7qs6zz5wqx27qnyiik7laockryvszqqd.onion\",\n+    \"cwi3ekrwhig47dhhzfenr5hbvckj7fzaojygvazi2lucsenwbzwoyiqd.onion\",\n+    \"devinbtcmwkuitvxl3tfi5of4zau46ymeannkjv6fpnylkgf3q5fa3id.onion\",\n+    \"devinbtctu7uctl7hly2juu3thbgeivfnvw3ckj3phy6nyvpnx66yeyd.onion\",\n+    \"devinbtcyk643iruzfpaxw3on2jket7rbjmwygm42dmdyub3ietrbmid.onion\",\n+    \"dtql5vci4iaml4anmueftqr7bfgzqlauzfy4rc2tfgulldd3ekyijjyd.onion\",\n+    \"emzybtc25oddoa2prol2znpz2axnrg6k77xwgirmhv7igoiucddsxiad.onion\",\n+    \"emzybtc3ewh7zihpkdvuwlgxrhzcxy2p5fvjggp7ngjbxcytxvt4rjid.onion\",\n+    \"emzybtc454ewbviqnmgtgx3rgublsgkk23r4onbhidcv36wremue4kqd.onion\",\n+    \"emzybtc5bnpb2o6gh54oquiox54o4r7yn4a2wiiwzrjonlouaibm2zid.onion\",\n+    \"fpz6r5ppsakkwypjcglz6gcnwt7ytfhxskkfhzu62tnylcknh3eq6pad.onion\",\n+    \"255fhcp6ajvftnyo7bwz3an3t4a4brhopm3bamyh2iu5r3gnr2rq.b32.i2p\",\n+    \"27yrtht5b5bzom2w5ajb27najuqvuydtzb7bavlak25wkufec5mq.b32.i2p\",\n+    \"3gocb7wc4zvbmmebktet7gujccuux4ifk3kqilnxnj5wpdpqx2hq.b32.i2p\",\n+    \"4fcc23wt3hyjk3csfzcdyjz5pcwg5dzhdqgma6bch2qyiakcbboa.b32.i2p\",\n+    \"4osyqeknhx5qf3a73jeimexwclmt42cju6xdp7icja4ixxguu2hq.b32.i2p\",\n+    \"4umsi4nlmgyp4rckosg4vegd2ysljvid47zu7pqsollkaszcbpqq.b32.i2p\",\n+    \"6j2ezegd3e2e2x3o3pox335f5vxfthrrigkdrbgfbdjchm5h4awa.b32.i2p\",\n+    \"6n36ljyr55szci5ygidmxqer64qr24f4qmnymnbvgehz7qinxnla.b32.i2p\",\n+    \"72yjs6mvlby3ky6mgpvvlemmwq5pfcznrzd34jkhclgrishqdxva.b32.i2p\",\n+    \"a5qsnv3maw77mlmmzlcglu6twje6ttctd3fhpbfwcbpmewx6fczq.b32.i2p\",\n+    \"aovep2pco7v2k4rheofrgytbgk23eg22dczpsjqgqtxcqqvmxk6a.b32.i2p\",\n+    \"bitcoi656nll5hu6u7ddzrmzysdtwtnzcnrjd4rfdqbeey7dmn5a.b32.i2p\",\n+    \"brifkruhlkgrj65hffybrjrjqcgdgqs2r7siizb5b2232nruik3a.b32.i2p\",\n+    \"c4gfnttsuwqomiygupdqqqyy5y5emnk5c73hrfvatri67prd7vyq.b32.i2p\",\n+    \"day3hgxyrtwjslt54sikevbhxxs4qzo7d6vi72ipmscqtq3qmijq.b32.i2p\",\n+    \"du5kydummi23bjfp6bd7owsvrijgt7zhvxmz5h5f5spcioeoetwq.b32.i2p\",\n+    \"e55k6wu46rzp4pg5pk5npgbr3zz45bc3ihtzu2xcye5vwnzdy7pq.b32.i2p\",\n+    \"eciohu5nq7vsvwjjc52epskuk75d24iccgzmhbzrwonw6lx4gdva.b32.i2p\",\n+    \"ejlnngarmhqvune74ko7kk55xtgbz5i5ncs4vmnvjpy3l7y63xaa.b32.i2p\",\n+    \"fhzlp3xroabohnmjonu5iqazwhlbbwh5cpujvw2azcu3srqdceja.b32.i2p\",\n+    \"[fc32:17ea:e415:c3bf:9808:149d:b5a2:c9aa]\",\n+    \"[fcc7:be49:ccd1:dc91:3125:f0da:457d:8ce]\",\n+    \"[fcdc:73ae:b1a9:1bf8:d4c2:811:a4c7:c34e]\",\n+]\n+\n+class P2PPrivateBroadcast(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.disable_autoconnect = False\n+        self.num_nodes = 2\n+\n+    def setup_nodes(self):\n+        # Start a SOCKS5 proxy server.\n+        socks5_server_config = Socks5Configuration()\n+        # self.nodes[0] listens on p2p_port(0),\n+        # self.nodes[1] listens on p2p_port(1),\n+        # thus we tell the SOCKS5 server to listen on p2p_port(self.num_nodes (which is 2))\n+        socks5_server_config.addr = (\"127.0.0.1\", p2p_port(self.num_nodes))\n+        socks5_server_config.unauth = True\n+        socks5_server_config.auth = True\n+\n+        self.socks5_server = Socks5Server(socks5_server_config)\n+        self.socks5_server.start()\n+\n+        ports_base = p2p_port(MAX_NODES) + 15000\n+\n+        # Add 2 because one feeler and one extra block relay connections may\n+        # sneak in between the private broadcast connections.\n+        for i in range(NUM_INITIAL_CONNECTIONS + NUM_PRIVATE_BROADCAST_PER_TX + 2):\n+            if i == NUM_INITIAL_CONNECTIONS:\n+                # Instruct the SOCKS5 server to redirect the first private\n+                # broadcast connection from nodes[0] to nodes[1]\n+                self.socks5_server.conf.destinations.append({\n+                    \"to_addr\": \"127.0.0.1\", # nodes[1] listen address\n+                    \"to_port\": p2p_port(1), # nodes[1] listen port\n+                    \"node\": None,\n+                    \"requested_to_addr\": None,\n+                })\n+            else:\n+                # Create a Python P2P listening node and add it to self.socks5_server.conf.destinations[]\n+                listener = P2PInterface()\n+                listener.peer_connect_helper(dstaddr=\"0.0.0.0\", dstport=0, net=self.chain, timeout_factor=self.options.timeout_factor)\n+                listener.peer_connect_send_version(services=P2P_SERVICES)\n+                self.network_thread.listen(\n+                    p2p=listener,\n+                    # Instruct the SOCKS5 server to redirect a connection to this Python P2P listener.\n+                    callback=lambda addr, port: self.socks5_server.conf.destinations.append({\n+                        \"to_addr\": addr,\n+                        \"to_port\": port,\n+                        \"node\": None,\n+                        \"requested_to_addr\": None,\n+                    }),\n+                    addr=\"127.0.0.1\",\n+                    port=ports_base + i)\n+                # Wait until the callback has been called and it has done append().\n+                self.wait_until(lambda: len(self.socks5_server.conf.destinations) == i + 1)\n+\n+                self.socks5_server.conf.destinations[i][\"node\"] = listener\n+\n+        self.extra_args = [\n+            [\n+                \"-peerbloomfilters\", # needed to test replies to MEMPOOL\n+                \"-cjdnsreachable\", # needed to be able to add CJDNS addresses to addrman (otherwise they are unroutable).\n+                \"-privatebroadcast\",\n+                f\"-proxy={socks5_server_config.addr[0]}:{socks5_server_config.addr[1]}\",\n+            ],\n+            [\n+                \"-connect=0\",\n+                f\"-bind=127.0.0.1:{p2p_port(1)}=onion\", # consider all incoming as coming from Tor\n+            ],\n+        ]\n+        super().setup_nodes()\n+\n+    def setup_network(self):\n+        self.setup_nodes()\n+\n+    def run_test(self):\n+        tx_originator = self.nodes[0]\n+\n+        observer_inbound = tx_originator.add_p2p_connection(P2PDataStore())\n+\n+        # Fill tx_originator's addrman.\n+        for addr in addresses:\n+            res = tx_originator.addpeeraddress(address=addr, port=8333, tried=False)\n+            if res[\"success\"]:\n+                self.log.debug(f\"Added {addr} to tx_originator's addrman\")\n+            else:\n+                self.log.debug(f\"Could not add {addr} to tx_originator's addrman (collision?)\")",
      "path": "test/functional/p2p_private_broadcast.py",
      "position": null,
      "original_position": 235,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "413574e81ef4d608b9b0a2079f81a4e90ee2a341",
      "in_reply_to_id": 1546756330,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2024-04-02T16:39:46Z",
      "updated_at": "2024-04-02T16:39:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1548220655",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1548220655"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 232,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1548540109",
      "pull_request_review_id": 1974917244,
      "id": 1548540109,
      "node_id": "PRRC_kwDOABII585cTNjN",
      "diff_hunk": "@@ -1097,6 +1101,58 @@ class PeerManagerImpl final : public PeerManager\n \n     void AddAddressKnown(Peer& peer, const CAddress& addr) EXCLUSIVE_LOCKS_REQUIRED(g_msgproc_mutex);\n     void PushAddress(Peer& peer, const CAddress& addr) EXCLUSIVE_LOCKS_REQUIRED(g_msgproc_mutex);\n+\n+    /**\n+     * Store a list of transactions to be broadcast privately. Supports the following operations:\n+     * - Add a new transaction\n+     * - Remove a transaction, after it has been seen by the network\n+     * - Mark a broadcast of a transaction (remember when and how many times)\n+     * - Get a transaction for broadcast, the one that has been broadcast less times and least recently",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 28,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "08c017b640a8d928f2b0ac32f1040e4b8372ae5f",
      "in_reply_to_id": null,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n     * - Get a transaction for broadcast, the one that has been broadcast fewer times and least recently\r\n```",
      "created_at": "2024-04-02T19:59:59Z",
      "updated_at": "2024-04-02T21:56:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1548540109",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1548540109"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1110,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1548572949",
      "pull_request_review_id": 1974917244,
      "id": 1548572949,
      "node_id": "PRRC_kwDOABII585cTVkV",
      "diff_hunk": "@@ -1122,6 +1130,72 @@ class PeerManagerImpl final : public PeerManager\n             }\n         }\n \n+        /**\n+         * Get the transaction that has been broadcast less times and least recently.",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 31,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "e03f1b1eb04df0c3deead36d70c014f758e3647f",
      "in_reply_to_id": null,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n         * Get the transaction that has been broadcast fewest times and least recently.\r\n```",
      "created_at": "2024-04-02T20:34:47Z",
      "updated_at": "2024-04-02T21:56:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1548572949",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1548572949"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1134,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1548580964",
      "pull_request_review_id": 1974917244,
      "id": 1548580964,
      "node_id": "PRRC_kwDOABII585cTXhk",
      "diff_hunk": "@@ -1143,15 +1217,41 @@ class PeerManagerImpl final : public PeerManager\n \n         using ByTxid = std::unordered_map<Txid, TxWithPriority, SaltedTxidHasher>;\n         using ByPriority = std::multimap<Priority, Txid>;\n+        using ByNodeId = std::unordered_map<NodeId, Txid>;\n \n         struct Iterators {\n             ByTxid::iterator by_txid;\n             ByPriority::iterator by_priority;\n         };\n \n+        /**\n+         * Get iterators in `m_by_txid` and `m_by_priority` for a given transaction.\n+         */\n+        std::optional<Iterators> Find(const Txid& txid) EXCLUSIVE_LOCKS_REQUIRED(m_mutex)",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 113,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "e03f1b1eb04df0c3deead36d70c014f758e3647f",
      "in_reply_to_id": null,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: This could be `const` method?",
      "created_at": "2024-04-02T20:43:01Z",
      "updated_at": "2024-04-02T21:56:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1548580964",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1548580964"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1264,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1548596412",
      "pull_request_review_id": 1974917244,
      "id": 1548596412,
      "node_id": "PRRC_kwDOABII585cTbS8",
      "diff_hunk": "@@ -1593,26 +1693,53 @@ void PeerManagerImpl::FindNextBlocks(std::vector<const CBlockIndex*>& vBlocks, c\n \n void PeerManagerImpl::PushNodeVersion(CNode& pnode, const Peer& peer)\n {\n-    uint64_t my_services{peer.m_our_services};\n-    const int64_t nTime{count_seconds(GetTime<std::chrono::seconds>())};\n-    uint64_t nonce = pnode.GetLocalNonce();\n-    const int nNodeStartingHeight{m_best_height};\n-    NodeId nodeid = pnode.GetId();\n-    CAddress addr = pnode.addr;\n-\n-    CService addr_you = addr.IsRoutable() && !IsProxy(addr) && addr.IsAddrV1Compatible() ? addr : CService();\n-    uint64_t your_services{addr.nServices};\n-\n-    const bool tx_relay{!RejectIncomingTxs(pnode)};\n-    MakeAndPushMessage(pnode, NetMsgType::VERSION, PROTOCOL_VERSION, my_services, nTime,\n-            your_services, CNetAddr::V1(addr_you), // Together the pre-version-31402 serialization of CAddress \"addrYou\" (without nTime)\n-            my_services, CNetAddr::V1(CService{}), // Together the pre-version-31402 serialization of CAddress \"addrMe\" (without nTime)\n-            nonce, strSubVersion, nNodeStartingHeight, tx_relay);\n-\n+    uint64_t my_services;\n+    int64_t my_time;\n+    uint64_t your_services;\n+    CService your_addr;\n+    std::string my_user_agent;\n+    int my_height;\n+    bool my_tx_relay;\n+    if (pnode.IsPrivateBroadcastConn()) {\n+        my_services = NODE_NONE;\n+        my_time = 0;\n+        your_services = NODE_NONE;\n+        your_addr = CService{};\n+        my_user_agent = \"/pynode:0.0.1/\";\n+        my_height = 0;\n+        my_tx_relay = false;\n+    } else {\n+        CAddress addr{pnode.addr};\n+\n+        my_services = peer.m_our_services;\n+        my_time = count_seconds(GetTime<std::chrono::seconds>());\n+        your_services = addr.nServices;\n+        your_addr = addr.IsRoutable() && !IsProxy(addr) && addr.IsAddrV1Compatible() ? addr : CService{};\n+        my_user_agent = strSubVersion;\n+        my_height = m_best_height;\n+        my_tx_relay = !RejectIncomingTxs(pnode);\n+    }\n+\n+    MakeAndPushMessage(\n+        pnode,\n+        NetMsgType::VERSION,\n+        PROTOCOL_VERSION,\n+        my_services,\n+        my_time,\n+        // your_services + CNetAddr::V1(your_addr) is the pre-version-31402 serialization of your_addr (without nTime)\n+        your_services, CNetAddr::V1(your_addr),\n+        // same, for a dummy address\n+        my_services, CNetAddr::V1(CService{}),\n+        pnode.GetLocalNonce(),\n+        my_user_agent,\n+        my_height,\n+        my_tx_relay);\n+\n+    const NodeId nodeid{pnode.GetId()};\n     if (fLogIPs) {\n-        LogPrint(BCLog::NET, \"send version message: version %d, blocks=%d, them=%s, txrelay=%d, peer=%d\\n\", PROTOCOL_VERSION, nNodeStartingHeight, addr_you.ToStringAddrPort(), tx_relay, nodeid);\n+        LogPrint(BCLog::NET, \"send version message: version %d, blocks=%d, them=%s, txrelay=%d, peer=%d\\n\", PROTOCOL_VERSION, my_height, your_addr.ToStringAddrPort(), my_tx_relay, nodeid);\n     } else {\n-        LogPrint(BCLog::NET, \"send version message: version %d, blocks=%d, txrelay=%d, peer=%d\\n\", PROTOCOL_VERSION, nNodeStartingHeight, tx_relay, nodeid);\n+        LogPrint(BCLog::NET, \"send version message: version %d, blocks=%d, txrelay=%d, peer=%d\\n\", PROTOCOL_VERSION, my_height, my_tx_relay, nodeid);",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 209,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "e03f1b1eb04df0c3deead36d70c014f758e3647f",
      "in_reply_to_id": null,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Since we're touching these lines, maybe update to `LogPrintLevel`?",
      "created_at": "2024-04-02T20:55:59Z",
      "updated_at": "2024-04-02T21:56:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1548596412",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1548596412"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1742,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1551588051",
      "pull_request_review_id": 1979741566,
      "id": 1551588051,
      "node_id": "PRRC_kwDOABII585ce1rT",
      "diff_hunk": "@@ -1143,15 +1217,41 @@ class PeerManagerImpl final : public PeerManager\n \n         using ByTxid = std::unordered_map<Txid, TxWithPriority, SaltedTxidHasher>;\n         using ByPriority = std::multimap<Priority, Txid>;\n+        using ByNodeId = std::unordered_map<NodeId, Txid>;\n \n         struct Iterators {\n             ByTxid::iterator by_txid;\n             ByPriority::iterator by_priority;\n         };\n \n+        /**\n+         * Get iterators in `m_by_txid` and `m_by_priority` for a given transaction.\n+         */\n+        std::optional<Iterators> Find(const Txid& txid) EXCLUSIVE_LOCKS_REQUIRED(m_mutex)",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 113,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "e03f1b1eb04df0c3deead36d70c014f758e3647f",
      "in_reply_to_id": 1548580964,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Indeed the `Find()` method does not modify any of the members. I tried to make it `const`, but it has to return non-const iterators to the members... :(",
      "created_at": "2024-04-04T12:30:10Z",
      "updated_at": "2024-04-04T12:30:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1551588051",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1551588051"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1264,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1551600727",
      "pull_request_review_id": 1979762724,
      "id": 1551600727,
      "node_id": "PRRC_kwDOABII585ce4xX",
      "diff_hunk": "@@ -1097,6 +1101,58 @@ class PeerManagerImpl final : public PeerManager\n \n     void AddAddressKnown(Peer& peer, const CAddress& addr) EXCLUSIVE_LOCKS_REQUIRED(g_msgproc_mutex);\n     void PushAddress(Peer& peer, const CAddress& addr) EXCLUSIVE_LOCKS_REQUIRED(g_msgproc_mutex);\n+\n+    /**\n+     * Store a list of transactions to be broadcast privately. Supports the following operations:\n+     * - Add a new transaction\n+     * - Remove a transaction, after it has been seen by the network\n+     * - Mark a broadcast of a transaction (remember when and how many times)\n+     * - Get a transaction for broadcast, the one that has been broadcast less times and least recently",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 28,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "08c017b640a8d928f2b0ac32f1040e4b8372ae5f",
      "in_reply_to_id": 1548540109,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2024-04-04T12:38:01Z",
      "updated_at": "2024-04-04T12:38:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1551600727",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1551600727"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1110,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1551600883",
      "pull_request_review_id": 1979763009,
      "id": 1551600883,
      "node_id": "PRRC_kwDOABII585ce4zz",
      "diff_hunk": "@@ -1122,6 +1130,72 @@ class PeerManagerImpl final : public PeerManager\n             }\n         }\n \n+        /**\n+         * Get the transaction that has been broadcast less times and least recently.",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 31,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "e03f1b1eb04df0c3deead36d70c014f758e3647f",
      "in_reply_to_id": 1548572949,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2024-04-04T12:38:08Z",
      "updated_at": "2024-04-04T12:38:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1551600883",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1551600883"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1134,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1551601200",
      "pull_request_review_id": 1979763592,
      "id": 1551601200,
      "node_id": "PRRC_kwDOABII585ce44w",
      "diff_hunk": "@@ -1593,26 +1693,53 @@ void PeerManagerImpl::FindNextBlocks(std::vector<const CBlockIndex*>& vBlocks, c\n \n void PeerManagerImpl::PushNodeVersion(CNode& pnode, const Peer& peer)\n {\n-    uint64_t my_services{peer.m_our_services};\n-    const int64_t nTime{count_seconds(GetTime<std::chrono::seconds>())};\n-    uint64_t nonce = pnode.GetLocalNonce();\n-    const int nNodeStartingHeight{m_best_height};\n-    NodeId nodeid = pnode.GetId();\n-    CAddress addr = pnode.addr;\n-\n-    CService addr_you = addr.IsRoutable() && !IsProxy(addr) && addr.IsAddrV1Compatible() ? addr : CService();\n-    uint64_t your_services{addr.nServices};\n-\n-    const bool tx_relay{!RejectIncomingTxs(pnode)};\n-    MakeAndPushMessage(pnode, NetMsgType::VERSION, PROTOCOL_VERSION, my_services, nTime,\n-            your_services, CNetAddr::V1(addr_you), // Together the pre-version-31402 serialization of CAddress \"addrYou\" (without nTime)\n-            my_services, CNetAddr::V1(CService{}), // Together the pre-version-31402 serialization of CAddress \"addrMe\" (without nTime)\n-            nonce, strSubVersion, nNodeStartingHeight, tx_relay);\n-\n+    uint64_t my_services;\n+    int64_t my_time;\n+    uint64_t your_services;\n+    CService your_addr;\n+    std::string my_user_agent;\n+    int my_height;\n+    bool my_tx_relay;\n+    if (pnode.IsPrivateBroadcastConn()) {\n+        my_services = NODE_NONE;\n+        my_time = 0;\n+        your_services = NODE_NONE;\n+        your_addr = CService{};\n+        my_user_agent = \"/pynode:0.0.1/\";\n+        my_height = 0;\n+        my_tx_relay = false;\n+    } else {\n+        CAddress addr{pnode.addr};\n+\n+        my_services = peer.m_our_services;\n+        my_time = count_seconds(GetTime<std::chrono::seconds>());\n+        your_services = addr.nServices;\n+        your_addr = addr.IsRoutable() && !IsProxy(addr) && addr.IsAddrV1Compatible() ? addr : CService{};\n+        my_user_agent = strSubVersion;\n+        my_height = m_best_height;\n+        my_tx_relay = !RejectIncomingTxs(pnode);\n+    }\n+\n+    MakeAndPushMessage(\n+        pnode,\n+        NetMsgType::VERSION,\n+        PROTOCOL_VERSION,\n+        my_services,\n+        my_time,\n+        // your_services + CNetAddr::V1(your_addr) is the pre-version-31402 serialization of your_addr (without nTime)\n+        your_services, CNetAddr::V1(your_addr),\n+        // same, for a dummy address\n+        my_services, CNetAddr::V1(CService{}),\n+        pnode.GetLocalNonce(),\n+        my_user_agent,\n+        my_height,\n+        my_tx_relay);\n+\n+    const NodeId nodeid{pnode.GetId()};\n     if (fLogIPs) {\n-        LogPrint(BCLog::NET, \"send version message: version %d, blocks=%d, them=%s, txrelay=%d, peer=%d\\n\", PROTOCOL_VERSION, nNodeStartingHeight, addr_you.ToStringAddrPort(), tx_relay, nodeid);\n+        LogPrint(BCLog::NET, \"send version message: version %d, blocks=%d, them=%s, txrelay=%d, peer=%d\\n\", PROTOCOL_VERSION, my_height, your_addr.ToStringAddrPort(), my_tx_relay, nodeid);\n     } else {\n-        LogPrint(BCLog::NET, \"send version message: version %d, blocks=%d, txrelay=%d, peer=%d\\n\", PROTOCOL_VERSION, nNodeStartingHeight, tx_relay, nodeid);\n+        LogPrint(BCLog::NET, \"send version message: version %d, blocks=%d, txrelay=%d, peer=%d\\n\", PROTOCOL_VERSION, my_height, my_tx_relay, nodeid);",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 209,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "e03f1b1eb04df0c3deead36d70c014f758e3647f",
      "in_reply_to_id": 1548596412,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2024-04-04T12:38:20Z",
      "updated_at": "2024-04-04T12:38:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1551601200",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1551601200"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1742,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1554905733",
      "pull_request_review_id": 1984991157,
      "id": 1554905733,
      "node_id": "PRRC_kwDOABII585crfqF",
      "diff_hunk": "@@ -2440,6 +2500,11 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n         LogPrintf(\"Fixed seeds are disabled\\n\");\n     }\n \n+    // Private broadcast connections are opened with priority over others, but only half\n+    // of the time to avoid depriving other connection types if private broadcast is\n+    // needed but opening such connections is unsuccessful for some reason.",
      "path": "src/net.cpp",
      "position": 60,
      "original_position": 82,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "fe57027b3ef3164ce3eaeac877edce613782f3ed",
      "in_reply_to_id": null,
      "user": {
        "login": "nothingmuch",
        "id": 14242,
        "node_id": "MDQ6VXNlcjE0MjQy",
        "avatar_url": "https://avatars.githubusercontent.com/u/14242?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nothingmuch",
        "html_url": "https://github.com/nothingmuch",
        "followers_url": "https://api.github.com/users/nothingmuch/followers",
        "following_url": "https://api.github.com/users/nothingmuch/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/nothingmuch/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/nothingmuch/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/nothingmuch/subscriptions",
        "organizations_url": "https://api.github.com/users/nothingmuch/orgs",
        "repos_url": "https://api.github.com/users/nothingmuch/repos",
        "events_url": "https://api.github.com/users/nothingmuch/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/nothingmuch/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "With regards to this comment and:\r\n\r\n> We pick a random Tor (or I2P) peer.\r\n\r\nTo increase success rate and reduce latency, clearnet peers could be also be selected when using Tor, without harming privacy of broadcast...\r\n\r\nClearnet connections only need one Tor circuit, whereas hidden service connections which require two circuits for the connecting peer and one from the accepting peer.\r\n\r\nFurthermore, if SOCKS proxy credentials are reused for the broadcast of a single transaction (but not all transactions in the private broadcast queue), multiple connections could share the same circuit/exit node. This specific optimization does introduce a censorship risk (even if BIP 324 is used [edit: *due*] to the MITM consideration) and there precedent for such malicious exit nodes.\r\n\r\nFrom a privacy standpoint both optimizations would be more or less equivalent to broadcasting through isolated connections to peers with hidden service addresses, since the origin is still protected and being able to link these connections does not aid in deanonymization since these connections all pertain to the same data.\r\n\r\nThe main rationale for these optimizations is that Tor daemon builds circuits sequentially, and does not keep many built circuits in reserve (IIRC 2 unless their construction is explicitly requested through the control socket), so when SOCKS connections are opened with distinct credentials the connection establishment and time to first byte will typically scale linearly in the order that the SOCKS connections are accepted by tor daemon itself, and since building a new circuit can take on the order of seconds.",
      "created_at": "2024-04-07T10:34:05Z",
      "updated_at": "2024-04-08T16:36:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1554905733",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1554905733"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": 2520,
      "original_start_line": 2503,
      "start_side": "RIGHT",
      "line": 2522,
      "original_line": 2522,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1555541188",
      "pull_request_review_id": 1985948537,
      "id": 1555541188,
      "node_id": "PRRC_kwDOABII585ct6zE",
      "diff_hunk": "@@ -0,0 +1,312 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test how locally submitted transactions are sent to the network when private broadcast is used.\n+\n+The topology in the test is:\n+\n+Bitcoin Core (tx_originator)\n+               ^   v       The default full-outbound + block-only connections\n+               |   |       (MAX_OUTBOUND_FULL_RELAY_CONNECTIONS + MAX_BLOCK_RELAY_ONLY_CONNECTIONS):\n+               |   |\n+               |   *-----> SOCKS5 Proxy ---> P2PInterface (self.socks5_server.conf.destinations[0][\"node\"])\n+               |   |\n+               |   *-----> SOCKS5 Proxy ---> P2PInterface (self.socks5_server.conf.destinations[1][\"node\"])\n+               |   ...\n+               |   |       The private broadcast TX recipients\n+               |   |       (NUM_PRIVATE_BROADCAST_PER_TX)\n+               |   |       plus maybe some feeler or extra block only connections:\n+               |   |\n+               |   *-----> SOCKS5 Proxy ---> Bitcoin Core (node1) (self.socks5_server.conf.destinations[i][\"node\"] is None)\n+               |   |                          ^\n+               |   |                          *----< P2PInterface (far_observer) (to check Bitcoin Core relays the tx)\n+               |   |\n+               |   *-----> SOCKS5 Proxy ---> P2PInterface (self.socks5_server.conf.destinations[i + 1][\"node\"])\n+               |   ...\n+               |\n+               *---------< P2PDataStore (observer_inbound)\n+\"\"\"\n+\n+from test_framework.p2p import (\n+    P2PDataStore,\n+    P2PInterface,\n+    P2P_SERVICES,\n+    P2P_VERSION,\n+)\n+from test_framework.messages import (\n+    CAddress,\n+    CInv,\n+    MSG_WTX,\n+    msg_inv,\n+)\n+from test_framework.socks5 import (\n+    Socks5Configuration,\n+    Socks5Server,\n+)\n+from test_framework.test_framework import (\n+    BitcoinTestFramework,\n+)\n+from test_framework.util import (\n+    MAX_NODES,\n+    assert_equal,\n+    p2p_port,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+)\n+\n+MAX_OUTBOUND_FULL_RELAY_CONNECTIONS = 8\n+MAX_BLOCK_RELAY_ONLY_CONNECTIONS = 2\n+NUM_INITIAL_CONNECTIONS = MAX_OUTBOUND_FULL_RELAY_CONNECTIONS + MAX_BLOCK_RELAY_ONLY_CONNECTIONS\n+NUM_PRIVATE_BROADCAST_PER_TX = 5\n+\n+# Fill addrman with these addresses. Must have enough Tor addresses, so that even\n+# if all 10 default connections are opened to a Tor address (!?) there must be more\n+# for private broadcast.\n+addresses = [",
      "path": "test/functional/p2p_private_broadcast.py",
      "position": null,
      "original_position": 68,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "9297437af2c2f45a7b9a12be78fa0e597c54ac79",
      "in_reply_to_id": null,
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 9297437af2c2f45a7b9a12be78fa0e597c54ac79: Since the addrman is deterministic now, you can remove addresses that are conflicting.\r\n\r\n```diff\r\n--- a/test/functional/p2p_private_broadcast.py\r\n+++ b/test/functional/p2p_private_broadcast.py\r\n@@ -118,7 +118,6 @@ addresses = [\r\n     \"bsqbtctulf2g4jtjsdfgl2ed7qs6zz5wqx27qnyiik7laockryvszqqd.onion\",\r\n     \"cwi3ekrwhig47dhhzfenr5hbvckj7fzaojygvazi2lucsenwbzwoyiqd.onion\",\r\n     \"devinbtcmwkuitvxl3tfi5of4zau46ymeannkjv6fpnylkgf3q5fa3id.onion\",\r\n-    \"devinbtctu7uctl7hly2juu3thbgeivfnvw3ckj3phy6nyvpnx66yeyd.onion\",\r\n     \"devinbtcyk643iruzfpaxw3on2jket7rbjmwygm42dmdyub3ietrbmid.onion\",\r\n     \"dtql5vci4iaml4anmueftqr7bfgzqlauzfy4rc2tfgulldd3ekyijjyd.onion\",\r\n     \"emzybtc25oddoa2prol2znpz2axnrg6k77xwgirmhv7igoiucddsxiad.onion\",\r\n```",
      "created_at": "2024-04-08T09:48:36Z",
      "updated_at": "2024-04-08T12:27:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1555541188",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1555541188"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 68,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1555757479",
      "pull_request_review_id": 1986301219,
      "id": 1555757479,
      "node_id": "PRRC_kwDOABII585cuvmn",
      "diff_hunk": "@@ -0,0 +1,312 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test how locally submitted transactions are sent to the network when private broadcast is used.\n+\n+The topology in the test is:\n+\n+Bitcoin Core (tx_originator)\n+               ^   v       The default full-outbound + block-only connections\n+               |   |       (MAX_OUTBOUND_FULL_RELAY_CONNECTIONS + MAX_BLOCK_RELAY_ONLY_CONNECTIONS):\n+               |   |\n+               |   *-----> SOCKS5 Proxy ---> P2PInterface (self.socks5_server.conf.destinations[0][\"node\"])\n+               |   |\n+               |   *-----> SOCKS5 Proxy ---> P2PInterface (self.socks5_server.conf.destinations[1][\"node\"])\n+               |   ...\n+               |   |       The private broadcast TX recipients\n+               |   |       (NUM_PRIVATE_BROADCAST_PER_TX)\n+               |   |       plus maybe some feeler or extra block only connections:\n+               |   |\n+               |   *-----> SOCKS5 Proxy ---> Bitcoin Core (node1) (self.socks5_server.conf.destinations[i][\"node\"] is None)\n+               |   |                          ^\n+               |   |                          *----< P2PInterface (far_observer) (to check Bitcoin Core relays the tx)\n+               |   |\n+               |   *-----> SOCKS5 Proxy ---> P2PInterface (self.socks5_server.conf.destinations[i + 1][\"node\"])\n+               |   ...\n+               |\n+               *---------< P2PDataStore (observer_inbound)\n+\"\"\"\n+\n+from test_framework.p2p import (\n+    P2PDataStore,\n+    P2PInterface,\n+    P2P_SERVICES,\n+    P2P_VERSION,\n+)\n+from test_framework.messages import (\n+    CAddress,\n+    CInv,\n+    MSG_WTX,\n+    msg_inv,\n+)\n+from test_framework.socks5 import (\n+    Socks5Configuration,\n+    Socks5Server,\n+)\n+from test_framework.test_framework import (\n+    BitcoinTestFramework,\n+)\n+from test_framework.util import (\n+    MAX_NODES,\n+    assert_equal,\n+    p2p_port,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+)\n+\n+MAX_OUTBOUND_FULL_RELAY_CONNECTIONS = 8\n+MAX_BLOCK_RELAY_ONLY_CONNECTIONS = 2\n+NUM_INITIAL_CONNECTIONS = MAX_OUTBOUND_FULL_RELAY_CONNECTIONS + MAX_BLOCK_RELAY_ONLY_CONNECTIONS\n+NUM_PRIVATE_BROADCAST_PER_TX = 5\n+\n+# Fill addrman with these addresses. Must have enough Tor addresses, so that even\n+# if all 10 default connections are opened to a Tor address (!?) there must be more\n+# for private broadcast.\n+addresses = [",
      "path": "test/functional/p2p_private_broadcast.py",
      "position": null,
      "original_position": 68,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "9297437af2c2f45a7b9a12be78fa0e597c54ac79",
      "in_reply_to_id": 1555541188,
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Also, maybe we do not need this verification anymore?\r\n```py\r\nif res[\"success\"]:\r\n    self.log.info(f\"Added {addr} to tx_originator's addrman\")\r\nelse:\r\n    self.log.info(f\"Could not add {addr} to tx_originator's addrman (collision?)\")\r\n```",
      "created_at": "2024-04-08T12:37:21Z",
      "updated_at": "2024-04-08T12:37:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1555757479",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1555757479"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 68,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1576618058",
      "pull_request_review_id": 2017849197,
      "id": 1576618058,
      "node_id": "PRRC_kwDOABII585d-UhK",
      "diff_hunk": "@@ -0,0 +1,312 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test how locally submitted transactions are sent to the network when private broadcast is used.\n+\n+The topology in the test is:\n+\n+Bitcoin Core (tx_originator)\n+               ^   v       The default full-outbound + block-only connections\n+               |   |       (MAX_OUTBOUND_FULL_RELAY_CONNECTIONS + MAX_BLOCK_RELAY_ONLY_CONNECTIONS):\n+               |   |\n+               |   *-----> SOCKS5 Proxy ---> P2PInterface (self.socks5_server.conf.destinations[0][\"node\"])\n+               |   |\n+               |   *-----> SOCKS5 Proxy ---> P2PInterface (self.socks5_server.conf.destinations[1][\"node\"])\n+               |   ...\n+               |   |       The private broadcast TX recipients\n+               |   |       (NUM_PRIVATE_BROADCAST_PER_TX)\n+               |   |       plus maybe some feeler or extra block only connections:\n+               |   |\n+               |   *-----> SOCKS5 Proxy ---> Bitcoin Core (node1) (self.socks5_server.conf.destinations[i][\"node\"] is None)\n+               |   |                          ^\n+               |   |                          *----< P2PInterface (far_observer) (to check Bitcoin Core relays the tx)\n+               |   |\n+               |   *-----> SOCKS5 Proxy ---> P2PInterface (self.socks5_server.conf.destinations[i + 1][\"node\"])\n+               |   ...\n+               |\n+               *---------< P2PDataStore (observer_inbound)\n+\"\"\"\n+\n+from test_framework.p2p import (\n+    P2PDataStore,\n+    P2PInterface,\n+    P2P_SERVICES,\n+    P2P_VERSION,\n+)\n+from test_framework.messages import (\n+    CAddress,\n+    CInv,\n+    MSG_WTX,\n+    msg_inv,\n+)\n+from test_framework.socks5 import (\n+    Socks5Configuration,\n+    Socks5Server,\n+)\n+from test_framework.test_framework import (\n+    BitcoinTestFramework,\n+)\n+from test_framework.util import (\n+    MAX_NODES,\n+    assert_equal,\n+    p2p_port,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+)\n+\n+MAX_OUTBOUND_FULL_RELAY_CONNECTIONS = 8\n+MAX_BLOCK_RELAY_ONLY_CONNECTIONS = 2\n+NUM_INITIAL_CONNECTIONS = MAX_OUTBOUND_FULL_RELAY_CONNECTIONS + MAX_BLOCK_RELAY_ONLY_CONNECTIONS\n+NUM_PRIVATE_BROADCAST_PER_TX = 5\n+\n+# Fill addrman with these addresses. Must have enough Tor addresses, so that even\n+# if all 10 default connections are opened to a Tor address (!?) there must be more\n+# for private broadcast.\n+addresses = [",
      "path": "test/functional/p2p_private_broadcast.py",
      "position": null,
      "original_position": 68,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "9297437af2c2f45a7b9a12be78fa0e597c54ac79",
      "in_reply_to_id": 1555541188,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Right, removed the conflicting address and reduced the logging to log only if adding to the addrman fails.",
      "created_at": "2024-04-23T17:22:15Z",
      "updated_at": "2024-04-23T17:22:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1576618058",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1576618058"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 68,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1576619537",
      "pull_request_review_id": 2017851486,
      "id": 1576619537,
      "node_id": "PRRC_kwDOABII585d-U4R",
      "diff_hunk": "@@ -2440,6 +2500,11 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n         LogPrintf(\"Fixed seeds are disabled\\n\");\n     }\n \n+    // Private broadcast connections are opened with priority over others, but only half\n+    // of the time to avoid depriving other connection types if private broadcast is\n+    // needed but opening such connections is unsuccessful for some reason.",
      "path": "src/net.cpp",
      "position": 60,
      "original_position": 82,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "fe57027b3ef3164ce3eaeac877edce613782f3ed",
      "in_reply_to_id": 1554905733,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I added broadcast to IPv4 and IPv6 peers through the Tor proxy. Thanks!",
      "created_at": "2024-04-23T17:23:17Z",
      "updated_at": "2024-04-23T17:23:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1576619537",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1576619537"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": 2520,
      "original_start_line": 2503,
      "start_side": "RIGHT",
      "line": 2522,
      "original_line": 2522,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1578537557",
      "pull_request_review_id": 2020968807,
      "id": 1578537557,
      "node_id": "PRRC_kwDOABII585eFpJV",
      "diff_hunk": "@@ -120,6 +120,12 @@ bool WalletInit::ParameterInteraction() const\n         LogPrintf(\"%s: parameter interaction: -blocksonly=1 -> setting -walletbroadcast=0\\n\", __func__);\n     }\n \n+    if (gArgs.GetBoolArg(\"-privatebroadcast\", DEFAULT_PRIVATE_BROADCAST) &&",
      "path": "src/wallet/init.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "1407b3fa264b096813281a767da3cd3ca80ed096",
      "in_reply_to_id": null,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "have you considered using `SoftSetBoolArg` to set `-walletbroadcast` to 0 if `-privatebroadcast` was chosen?\r\nIt's not the most user-friendly thing to introduce a new command arg that would only work if another arg was also changed from its default.",
      "created_at": "2024-04-24T21:25:09Z",
      "updated_at": "2024-04-25T22:34:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1578537557",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1578537557"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 122,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1579852847",
      "pull_request_review_id": 2020968807,
      "id": 1579852847,
      "node_id": "PRRC_kwDOABII585eKqQv",
      "diff_hunk": "@@ -386,6 +386,27 @@ static CAddress GetBindAddress(const Sock& sock)\n     return addr_bind;\n }\n \n+/**\n+ * Check if private broadcast can be done to clearnet peers and if yes via which proxy.\n+ * If private broadcast connections should not be opened to `net`, then this will return an empty optional.\n+ */\n+static std::optional<Proxy> ProxyForClearnetPrivateBroadcast(Network clearnet)\n+{\n+    if (clearnet != NET_IPV4 && clearnet != NET_IPV6) {\n+        return std::nullopt;\n+    }\n+    Proxy tor_proxy;\n+    const std::string onion_arg{gArgs.GetArg(\"-onion\", \"\")};\n+    if (onion_arg != \"\" && onion_arg == \"0\" && GetProxy(NET_ONION, tor_proxy)) {\n+        // Use the Tor proxy (if provided) for private broadcast connections to clearnet peers.\n+        // Note: we check whether -onion is explicitly used because GetProxy(NET_ONION) may",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 17,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "6b4693ee859d6bddf559a0b32749b1dafe015ef4",
      "in_reply_to_id": null,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think this requires an update to `tor.md`, which currently says:\r\n`-onion=ip:port  Set the proxy server to use for Tor onion services. You do not need to set this if it's the same as -proxy.`\r\nAfter this PR, specifiying it explicitly is necessary if you want to do private broadcast to clearnet peers.",
      "created_at": "2024-04-25T17:12:46Z",
      "updated_at": "2024-04-25T22:34:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1579852847",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1579852847"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 406,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1579854025",
      "pull_request_review_id": 2020968807,
      "id": 1579854025,
      "node_id": "PRRC_kwDOABII585eKqjJ",
      "diff_hunk": "@@ -386,6 +386,27 @@ static CAddress GetBindAddress(const Sock& sock)\n     return addr_bind;\n }\n \n+/**\n+ * Check if private broadcast can be done to clearnet peers and if yes via which proxy.\n+ * If private broadcast connections should not be opened to `net`, then this will return an empty optional.\n+ */\n+static std::optional<Proxy> ProxyForClearnetPrivateBroadcast(Network clearnet)\n+{\n+    if (clearnet != NET_IPV4 && clearnet != NET_IPV6) {\n+        return std::nullopt;\n+    }\n+    Proxy tor_proxy;\n+    const std::string onion_arg{gArgs.GetArg(\"-onion\", \"\")};\n+    if (onion_arg != \"\" && onion_arg == \"0\" && GetProxy(NET_ONION, tor_proxy)) {",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 15,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "6b4693ee859d6bddf559a0b32749b1dafe015ef4",
      "in_reply_to_id": null,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "You probably meant `onion_arg != \"0\"`",
      "created_at": "2024-04-25T17:13:04Z",
      "updated_at": "2024-04-25T22:34:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1579854025",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1579854025"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 400,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1580115581",
      "pull_request_review_id": 2020968807,
      "id": 1580115581,
      "node_id": "PRRC_kwDOABII585eLqZ9",
      "diff_hunk": "@@ -3898,6 +3907,23 @@ bool CConnman::NodeFullyConnected(const CNode* pnode)\n void CConnman::PushMessage(CNode* pnode, CSerializedNetMsg&& msg)\n {\n     AssertLockNotHeld(m_total_bytes_sent_mutex);\n+\n+    if (pnode->IsPrivateBroadcastConn() &&\n+        msg.m_type != NetMsgType::VERSION &&\n+        msg.m_type != NetMsgType::VERACK &&\n+        msg.m_type != NetMsgType::TX &&\n+        msg.m_type != NetMsgType::PING) {\n+        // Ensure private broadcast connections only send the above message types.\n+        // Others are not needed and may degrade privacy.\n+        LogPrintLevel(BCLog::PRIVATE_BROADCAST,",
      "path": "src/net.cpp",
      "position": 372,
      "original_position": 30,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "ae6651d267895342c2794b62bf1f2e6d15867778",
      "in_reply_to_id": null,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It looks like we make sure in `net_processing` to not send any of theses messages, and here we check again. I haven't thought about this long, but can this log be triggered, or could this be an `Assume(false)` instead?",
      "created_at": "2024-04-25T20:55:11Z",
      "updated_at": "2024-04-25T22:34:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1580115581",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1580115581"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3980,
      "original_line": 3980,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1580149990",
      "pull_request_review_id": 2020968807,
      "id": 1580149990,
      "node_id": "PRRC_kwDOABII585eLyzm",
      "diff_hunk": "@@ -1097,6 +1101,58 @@ class PeerManagerImpl final : public PeerManager\n \n     void AddAddressKnown(Peer& peer, const CAddress& addr) EXCLUSIVE_LOCKS_REQUIRED(g_msgproc_mutex);\n     void PushAddress(Peer& peer, const CAddress& addr) EXCLUSIVE_LOCKS_REQUIRED(g_msgproc_mutex);\n+\n+    /**\n+     * Store a list of transactions to be broadcast privately. Supports the following operations:\n+     * - Add a new transaction\n+     * - Remove a transaction, after it has been seen by the network\n+     * - Mark a broadcast of a transaction (remember when and how many times)\n+     * - Get a transaction for broadcast, the one that has been broadcast fewer times and least recently\n+     */\n+    class PrivateBroadcast\n+    {\n+    public:\n+        void Add(const CTransactionRef& tx) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+        {\n+            const Txid& txid = tx->GetHash();\n+            LOCK(m_mutex);\n+            auto [pos, inserted] = m_by_txid.emplace(txid, TxWithPriority{.tx = tx, .priority = Priority{}});\n+            if (inserted) {\n+                m_by_priority.emplace(Priority{}, txid);\n+            }\n+        }\n+\n+    private:\n+        struct Priority {\n+            size_t num_broadcasted{0};\n+            std::chrono::microseconds last_broadcasted{0};\n+\n+            bool operator<(const Priority& other) const\n+            {\n+                if (num_broadcasted < other.num_broadcasted) {\n+                    return true;\n+                }\n+                return last_broadcasted < other.last_broadcasted;\n+            }\n+        };\n+\n+        struct TxWithPriority {\n+            CTransactionRef tx;\n+            Priority priority;\n+        };\n+\n+        using ByTxid = std::unordered_map<Txid, TxWithPriority, SaltedTxidHasher>;\n+        using ByPriority = std::multimap<Priority, Txid>;\n+\n+        struct Iterators {\n+            ByTxid::iterator by_txid;\n+            ByPriority::iterator by_priority;\n+        };\n+\n+        mutable Mutex m_mutex;\n+        ByTxid m_by_txid GUARDED_BY(m_mutex);\n+        ByPriority m_by_priority GUARDED_BY(m_mutex);\n+    } m_tx_for_private_broadcast;",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 73,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "4a5433c3c8681198cfa342f8112e70828fa0ac04",
      "in_reply_to_id": null,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This class is getting pretty large in the end, maybe put it into its own module (similar to `TxReconciliationTracker` or `TxRequestTracker`)",
      "created_at": "2024-04-25T21:20:19Z",
      "updated_at": "2024-04-25T22:34:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1580149990",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1580149990"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1155,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1580200865",
      "pull_request_review_id": 2020968807,
      "id": 1580200865,
      "node_id": "PRRC_kwDOABII585eL_Oh",
      "diff_hunk": "@@ -0,0 +1,309 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test how locally submitted transactions are sent to the network when private broadcast is used.\n+\n+The topology in the test is:\n+\n+Bitcoin Core (tx_originator)\n+               ^   v       The default full-outbound + block-only connections\n+               |   |       (MAX_OUTBOUND_FULL_RELAY_CONNECTIONS + MAX_BLOCK_RELAY_ONLY_CONNECTIONS):\n+               |   |\n+               |   *-----> SOCKS5 Proxy ---> P2PInterface (self.socks5_server.conf.destinations[0][\"node\"])\n+               |   |\n+               |   *-----> SOCKS5 Proxy ---> P2PInterface (self.socks5_server.conf.destinations[1][\"node\"])\n+               |   ...\n+               |   |       The private broadcast TX recipients\n+               |   |       (NUM_PRIVATE_BROADCAST_PER_TX)\n+               |   |       plus maybe some feeler or extra block only connections:\n+               |   |\n+               |   *-----> SOCKS5 Proxy ---> Bitcoin Core (node1) (self.socks5_server.conf.destinations[i][\"node\"] is None)\n+               |   |                          ^\n+               |   |                          *----< P2PInterface (far_observer) (to check Bitcoin Core relays the tx)\n+               |   |\n+               |   *-----> SOCKS5 Proxy ---> P2PInterface (self.socks5_server.conf.destinations[i + 1][\"node\"])\n+               |   ...\n+               |\n+               *---------< P2PDataStore (observer_inbound)\n+\"\"\"\n+\n+from test_framework.p2p import (\n+    P2PDataStore,\n+    P2PInterface,\n+    P2P_SERVICES,\n+    P2P_VERSION,\n+)\n+from test_framework.messages import (\n+    CAddress,\n+    CInv,\n+    MSG_WTX,\n+    msg_inv,\n+)\n+from test_framework.socks5 import (\n+    Socks5Configuration,\n+    Socks5Server,\n+)\n+from test_framework.test_framework import (\n+    BitcoinTestFramework,\n+)\n+from test_framework.util import (\n+    MAX_NODES,\n+    assert_equal,\n+    p2p_port,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+)\n+\n+MAX_OUTBOUND_FULL_RELAY_CONNECTIONS = 8\n+MAX_BLOCK_RELAY_ONLY_CONNECTIONS = 2\n+NUM_INITIAL_CONNECTIONS = MAX_OUTBOUND_FULL_RELAY_CONNECTIONS + MAX_BLOCK_RELAY_ONLY_CONNECTIONS\n+NUM_PRIVATE_BROADCAST_PER_TX = 5\n+\n+# Fill addrman with these addresses. Must have enough Tor addresses, so that even\n+# if all 10 default connections are opened to a Tor address (!?) there must be more\n+# for private broadcast.\n+addresses = [\n+    \"1.65.195.98\",\n+    \"2.59.236.56\",\n+    \"2.83.114.20\",\n+    \"2.248.194.16\",\n+    \"5.2.154.6\",\n+    \"5.101.140.30\",\n+    \"5.128.87.126\",\n+    \"5.144.21.49\",\n+    \"5.172.132.104\",\n+    \"5.188.62.18\",\n+    \"5.200.2.180\",\n+    \"8.129.184.255\",\n+    \"8.209.105.138\",\n+    \"12.34.98.148\",\n+    \"14.199.102.151\",\n+    \"18.27.79.17\",\n+    \"18.27.124.231\",\n+    \"18.216.249.151\",\n+    \"23.88.155.58\",\n+    \"23.93.101.158\",\n+    \"[2001:19f0:1000:1db3:5400:4ff:fe56:5a8d]\",\n+    \"[2001:19f0:5:24da:3eec:efff:feb9:f36e]\",\n+    \"[2001:19f0:5:24da::]\",\n+    \"[2001:19f0:5:4535:3eec:efff:feb9:87e4]\",\n+    \"[2001:19f0:5:4535::]\",\n+    \"[2001:1bc0:c1::2000]\",\n+    \"[2001:1c04:4008:6300:8a5f:2678:114b:a660]\",\n+    \"[2001:41d0:203:3739::]\",\n+    \"[2001:41d0:203:8f49::]\",\n+    \"[2001:41d0:203:bb0a::]\",\n+    \"[2001:41d0:2:bf8f::]\",\n+    \"[2001:41d0:303:de8b::]\",\n+    \"[2001:41d0:403:3d61::]\",\n+    \"[2001:41d0:405:9600::]\",\n+    \"[2001:41d0:8:ed7f::1]\",\n+    \"[2001:41d0:a:69a2::1]\",\n+    \"[2001:41f0::62:6974:636f:696e]\",\n+    \"[2001:470:1b62::]\",\n+    \"[2001:470:1f05:43b:2831:8530:7179:5864]\",\n+    \"[2001:470:1f09:b14::11]\",\n+    \"2bqghnldu6mcug4pikzprwhtjjnsyederctvci6klcwzepnjd46ikjyd.onion\",\n+    \"4lr3w2iyyl5u5l6tosizclykf5v3smqroqdn2i4h3kq6pfbbjb2xytad.onion\",\n+    \"5g72ppm3krkorsfopcm2bi7wlv4ohhs4u4mlseymasn7g7zhdcyjpfid.onion\",\n+    \"5sbmcl4m5api5tqafi4gcckrn3y52sz5mskxf3t6iw4bp7erwiptrgqd.onion\",\n+    \"776aegl7tfhg6oiqqy76jnwrwbvcytsx2qegcgh2mjqujll4376ohlid.onion\",\n+    \"77mdte42srl42shdh2mhtjr7nf7dmedqrw6bkcdekhdvmnld6ojyyiad.onion\",\n+    \"azbpsh4arqlm6442wfimy7qr65bmha2zhgjg7wbaji6vvaug53hur2qd.onion\",\n+    \"b64xcbleqmwgq2u46bh4hegnlrzzvxntyzbmucn3zt7cssm7y4ubv3id.onion\",\n+    \"bsqbtcparrfihlwolt4xgjbf4cgqckvrvsfyvy6vhiqrnh4w6ghixoid.onion\",\n+    \"bsqbtctulf2g4jtjsdfgl2ed7qs6zz5wqx27qnyiik7laockryvszqqd.onion\",\n+    \"cwi3ekrwhig47dhhzfenr5hbvckj7fzaojygvazi2lucsenwbzwoyiqd.onion\",\n+    \"devinbtcmwkuitvxl3tfi5of4zau46ymeannkjv6fpnylkgf3q5fa3id.onion\",\n+    \"devinbtcyk643iruzfpaxw3on2jket7rbjmwygm42dmdyub3ietrbmid.onion\",\n+    \"dtql5vci4iaml4anmueftqr7bfgzqlauzfy4rc2tfgulldd3ekyijjyd.onion\",\n+    \"emzybtc25oddoa2prol2znpz2axnrg6k77xwgirmhv7igoiucddsxiad.onion\",\n+    \"emzybtc3ewh7zihpkdvuwlgxrhzcxy2p5fvjggp7ngjbxcytxvt4rjid.onion\",\n+    \"emzybtc454ewbviqnmgtgx3rgublsgkk23r4onbhidcv36wremue4kqd.onion\",\n+    \"emzybtc5bnpb2o6gh54oquiox54o4r7yn4a2wiiwzrjonlouaibm2zid.onion\",\n+    \"fpz6r5ppsakkwypjcglz6gcnwt7ytfhxskkfhzu62tnylcknh3eq6pad.onion\",\n+    \"255fhcp6ajvftnyo7bwz3an3t4a4brhopm3bamyh2iu5r3gnr2rq.b32.i2p\",\n+    \"27yrtht5b5bzom2w5ajb27najuqvuydtzb7bavlak25wkufec5mq.b32.i2p\",\n+    \"3gocb7wc4zvbmmebktet7gujccuux4ifk3kqilnxnj5wpdpqx2hq.b32.i2p\",\n+    \"4fcc23wt3hyjk3csfzcdyjz5pcwg5dzhdqgma6bch2qyiakcbboa.b32.i2p\",\n+    \"4osyqeknhx5qf3a73jeimexwclmt42cju6xdp7icja4ixxguu2hq.b32.i2p\",\n+    \"4umsi4nlmgyp4rckosg4vegd2ysljvid47zu7pqsollkaszcbpqq.b32.i2p\",\n+    \"6j2ezegd3e2e2x3o3pox335f5vxfthrrigkdrbgfbdjchm5h4awa.b32.i2p\",\n+    \"6n36ljyr55szci5ygidmxqer64qr24f4qmnymnbvgehz7qinxnla.b32.i2p\",\n+    \"72yjs6mvlby3ky6mgpvvlemmwq5pfcznrzd34jkhclgrishqdxva.b32.i2p\",\n+    \"a5qsnv3maw77mlmmzlcglu6twje6ttctd3fhpbfwcbpmewx6fczq.b32.i2p\",\n+    \"aovep2pco7v2k4rheofrgytbgk23eg22dczpsjqgqtxcqqvmxk6a.b32.i2p\",\n+    \"bitcoi656nll5hu6u7ddzrmzysdtwtnzcnrjd4rfdqbeey7dmn5a.b32.i2p\",\n+    \"brifkruhlkgrj65hffybrjrjqcgdgqs2r7siizb5b2232nruik3a.b32.i2p\",\n+    \"c4gfnttsuwqomiygupdqqqyy5y5emnk5c73hrfvatri67prd7vyq.b32.i2p\",\n+    \"day3hgxyrtwjslt54sikevbhxxs4qzo7d6vi72ipmscqtq3qmijq.b32.i2p\",\n+    \"du5kydummi23bjfp6bd7owsvrijgt7zhvxmz5h5f5spcioeoetwq.b32.i2p\",\n+    \"e55k6wu46rzp4pg5pk5npgbr3zz45bc3ihtzu2xcye5vwnzdy7pq.b32.i2p\",\n+    \"eciohu5nq7vsvwjjc52epskuk75d24iccgzmhbzrwonw6lx4gdva.b32.i2p\",\n+    \"ejlnngarmhqvune74ko7kk55xtgbz5i5ncs4vmnvjpy3l7y63xaa.b32.i2p\",\n+    \"fhzlp3xroabohnmjonu5iqazwhlbbwh5cpujvw2azcu3srqdceja.b32.i2p\",\n+    \"[fc32:17ea:e415:c3bf:9808:149d:b5a2:c9aa]\",\n+    \"[fcc7:be49:ccd1:dc91:3125:f0da:457d:8ce]\",\n+    \"[fcdc:73ae:b1a9:1bf8:d4c2:811:a4c7:c34e]\",\n+]\n+\n+class P2PPrivateBroadcast(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.disable_autoconnect = False\n+        self.num_nodes = 2\n+\n+    def setup_nodes(self):\n+        # Start a SOCKS5 proxy server.\n+        socks5_server_config = Socks5Configuration()\n+        # self.nodes[0] listens on p2p_port(0),\n+        # self.nodes[1] listens on p2p_port(1),\n+        # thus we tell the SOCKS5 server to listen on p2p_port(self.num_nodes (which is 2))\n+        socks5_server_config.addr = (\"127.0.0.1\", p2p_port(self.num_nodes))\n+        socks5_server_config.unauth = True\n+        socks5_server_config.auth = True\n+\n+        self.socks5_server = Socks5Server(socks5_server_config)\n+        self.socks5_server.start()\n+\n+        ports_base = p2p_port(MAX_NODES) + 15000\n+\n+        # Add 2 because one feeler and one extra block relay connections may\n+        # sneak in between the private broadcast connections.\n+        for i in range(NUM_INITIAL_CONNECTIONS + NUM_PRIVATE_BROADCAST_PER_TX + 2):\n+            if i == NUM_INITIAL_CONNECTIONS:\n+                # Instruct the SOCKS5 server to redirect the first private\n+                # broadcast connection from nodes[0] to nodes[1]\n+                self.socks5_server.conf.destinations.append({\n+                    \"to_addr\": \"127.0.0.1\", # nodes[1] listen address\n+                    \"to_port\": p2p_port(1), # nodes[1] listen port\n+                    \"node\": None,\n+                    \"requested_to_addr\": None,\n+                })\n+            else:\n+                # Create a Python P2P listening node and add it to self.socks5_server.conf.destinations[]\n+                listener = P2PInterface()\n+                listener.peer_connect_helper(dstaddr=\"0.0.0.0\", dstport=0, net=self.chain, timeout_factor=self.options.timeout_factor)\n+                listener.peer_connect_send_version(services=P2P_SERVICES)\n+                self.network_thread.listen(\n+                    p2p=listener,\n+                    # Instruct the SOCKS5 server to redirect a connection to this Python P2P listener.\n+                    callback=lambda addr, port: self.socks5_server.conf.destinations.append({\n+                        \"to_addr\": addr,\n+                        \"to_port\": port,\n+                        \"node\": None,\n+                        \"requested_to_addr\": None,\n+                    }),\n+                    addr=\"127.0.0.1\",\n+                    port=ports_base + i)\n+                # Wait until the callback has been called and it has done append().\n+                self.wait_until(lambda: len(self.socks5_server.conf.destinations) == i + 1)\n+\n+                self.socks5_server.conf.destinations[i][\"node\"] = listener\n+\n+        self.extra_args = [\n+            [\n+                \"-peerbloomfilters\", # needed to test replies to MEMPOOL",
      "path": "test/functional/p2p_private_broadcast.py",
      "position": null,
      "original_position": 208,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "fd603b8f5c23c171e1cff70a73f5d64d6d74c4f7",
      "in_reply_to_id": null,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't think is needed, `MEMPOOL` is never tested.",
      "created_at": "2024-04-25T22:23:19Z",
      "updated_at": "2024-04-25T22:34:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1580200865",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1580200865"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 208,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1580205599",
      "pull_request_review_id": 2020968807,
      "id": 1580205599,
      "node_id": "PRRC_kwDOABII585eMAYf",
      "diff_hunk": "@@ -91,11 +94,23 @@ static RPCHelpMan sendrawtransaction()\n             std::string err_string;\n             AssertLockNotHeld(cs_main);\n             NodeContext& node = EnsureAnyNodeContext(request.context);\n+            const bool private_broadcast_enabled{gArgs.GetBoolArg(\"-privatebroadcast\", DEFAULT_PRIVATE_BROADCAST)};\n+            if (private_broadcast_enabled &&\n+                !g_reachable_nets.Contains(NET_ONION) &&\n+                !g_reachable_nets.Contains(NET_I2P)) {\n+                throw JSONRPCError(RPC_MISC_ERROR,\n+                                   \"-privatebroadcast is enabled, but none of the Tor or I2P networks is \"",
      "path": "src/rpc/mempool.cpp",
      "position": 47,
      "original_position": 21,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "180e51a723520f530bb675e937eeaabebcc0b0b5",
      "in_reply_to_id": null,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "sendrawtransaction doc should be updated (it already mentions privacy issues).",
      "created_at": "2024-04-25T22:30:44Z",
      "updated_at": "2024-04-25T22:34:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1580205599",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1580205599"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 113,
      "original_line": 113,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1584709863",
      "pull_request_review_id": 2031166535,
      "id": 1584709863,
      "node_id": "PRRC_kwDOABII585edMDn",
      "diff_hunk": "@@ -2883,6 +3013,34 @@ void CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFai\n     }\n }\n \n+void CConnman::PrivateBroadcastAdd(size_t n)\n+{\n+    const size_t before{m_private_broadcast_connections_to_open.fetch_add(n)};\n+\n+    LogPrintLevel(BCLog::PRIVATE_BROADCAST,\n+                  BCLog::Level::Debug,\n+                  \"Request to increment the needed new connections by %d, changed from %d to %d\\n\",\n+                  n,\n+                  before,\n+                  before + n);\n+}\n+\n+void CConnman::PrivateBroadcastSub(size_t n)\n+{\n+    size_t before{m_private_broadcast_connections_to_open.load()};\n+    size_t desired;\n+    do {\n+        desired = before > n ? before - n : 0;\n+    } while (!m_private_broadcast_connections_to_open.compare_exchange_weak(before, desired));",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 261,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "6b4693ee859d6bddf559a0b32749b1dafe015ef4",
      "in_reply_to_id": null,
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 6b4693ee859d6bddf559a0b32749b1dafe015ef4 \"net: implement opening PRIVATE_BROADCAST connections\": Just a question: why using `compare_exchange_weak` instead of `fetch_sub`? ",
      "created_at": "2024-04-30T12:22:03Z",
      "updated_at": "2024-04-30T12:22:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1584709863",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1584709863"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3102,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1586316212",
      "pull_request_review_id": 2033662158,
      "id": 1586316212,
      "node_id": "PRRC_kwDOABII585ejUO0",
      "diff_hunk": "@@ -120,6 +120,12 @@ bool WalletInit::ParameterInteraction() const\n         LogPrintf(\"%s: parameter interaction: -blocksonly=1 -> setting -walletbroadcast=0\\n\", __func__);\n     }\n \n+    if (gArgs.GetBoolArg(\"-privatebroadcast\", DEFAULT_PRIVATE_BROADCAST) &&",
      "path": "src/wallet/init.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "1407b3fa264b096813281a767da3cd3ca80ed096",
      "in_reply_to_id": 1578537557,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, but I did not like the behavior of the wallet \"unexpectedly\" stopping to broadcast its own transactions because `-privatebroadcast` is enabled.\r\n\r\n> It's not the most user-friendly thing to introduce a new command arg that would only work if another arg was also changed from its default.\r\n\r\nYes, I agree. I do not like that either but somewhat prefer it over automatically switching off wallet broadcast. I can imagine GUI users who enable `-privatebroadcast` and still try to send transactions from their wallets and have no clue why they are not being mined.\r\n\r\nLeaving this open to discussion and proposals.",
      "created_at": "2024-05-01T13:46:03Z",
      "updated_at": "2024-05-01T13:46:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1586316212",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1586316212"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 122,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1586317728",
      "pull_request_review_id": 2033664674,
      "id": 1586317728,
      "node_id": "PRRC_kwDOABII585ejUmg",
      "diff_hunk": "@@ -386,6 +386,27 @@ static CAddress GetBindAddress(const Sock& sock)\n     return addr_bind;\n }\n \n+/**\n+ * Check if private broadcast can be done to clearnet peers and if yes via which proxy.\n+ * If private broadcast connections should not be opened to `net`, then this will return an empty optional.\n+ */\n+static std::optional<Proxy> ProxyForClearnetPrivateBroadcast(Network clearnet)\n+{\n+    if (clearnet != NET_IPV4 && clearnet != NET_IPV6) {\n+        return std::nullopt;\n+    }\n+    Proxy tor_proxy;\n+    const std::string onion_arg{gArgs.GetArg(\"-onion\", \"\")};\n+    if (onion_arg != \"\" && onion_arg == \"0\" && GetProxy(NET_ONION, tor_proxy)) {\n+        // Use the Tor proxy (if provided) for private broadcast connections to clearnet peers.\n+        // Note: we check whether -onion is explicitly used because GetProxy(NET_ONION) may",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 17,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "6b4693ee859d6bddf559a0b32749b1dafe015ef4",
      "in_reply_to_id": 1579852847,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Updated.",
      "created_at": "2024-05-01T13:47:33Z",
      "updated_at": "2024-05-01T13:47:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1586317728",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1586317728"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 406,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1586317921",
      "pull_request_review_id": 2033664971,
      "id": 1586317921,
      "node_id": "PRRC_kwDOABII585ejUph",
      "diff_hunk": "@@ -386,6 +386,27 @@ static CAddress GetBindAddress(const Sock& sock)\n     return addr_bind;\n }\n \n+/**\n+ * Check if private broadcast can be done to clearnet peers and if yes via which proxy.\n+ * If private broadcast connections should not be opened to `net`, then this will return an empty optional.\n+ */\n+static std::optional<Proxy> ProxyForClearnetPrivateBroadcast(Network clearnet)\n+{\n+    if (clearnet != NET_IPV4 && clearnet != NET_IPV6) {\n+        return std::nullopt;\n+    }\n+    Proxy tor_proxy;\n+    const std::string onion_arg{gArgs.GetArg(\"-onion\", \"\")};\n+    if (onion_arg != \"\" && onion_arg == \"0\" && GetProxy(NET_ONION, tor_proxy)) {",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 15,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "6b4693ee859d6bddf559a0b32749b1dafe015ef4",
      "in_reply_to_id": 1579854025,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, fixed!",
      "created_at": "2024-05-01T13:47:45Z",
      "updated_at": "2024-05-01T13:47:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1586317921",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1586317921"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 400,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1586318759",
      "pull_request_review_id": 2033666558,
      "id": 1586318759,
      "node_id": "PRRC_kwDOABII585ejU2n",
      "diff_hunk": "@@ -3898,6 +3907,23 @@ bool CConnman::NodeFullyConnected(const CNode* pnode)\n void CConnman::PushMessage(CNode* pnode, CSerializedNetMsg&& msg)\n {\n     AssertLockNotHeld(m_total_bytes_sent_mutex);\n+\n+    if (pnode->IsPrivateBroadcastConn() &&\n+        msg.m_type != NetMsgType::VERSION &&\n+        msg.m_type != NetMsgType::VERACK &&\n+        msg.m_type != NetMsgType::TX &&\n+        msg.m_type != NetMsgType::PING) {\n+        // Ensure private broadcast connections only send the above message types.\n+        // Others are not needed and may degrade privacy.\n+        LogPrintLevel(BCLog::PRIVATE_BROADCAST,",
      "path": "src/net.cpp",
      "position": 372,
      "original_position": 30,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "ae6651d267895342c2794b62bf1f2e6d15867778",
      "in_reply_to_id": 1580115581,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added `Assume(false)` and a comment.",
      "created_at": "2024-05-01T13:48:14Z",
      "updated_at": "2024-05-01T13:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1586318759",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1586318759"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3980,
      "original_line": 3980,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1586319178",
      "pull_request_review_id": 2033667197,
      "id": 1586319178,
      "node_id": "PRRC_kwDOABII585ejU9K",
      "diff_hunk": "@@ -1097,6 +1101,58 @@ class PeerManagerImpl final : public PeerManager\n \n     void AddAddressKnown(Peer& peer, const CAddress& addr) EXCLUSIVE_LOCKS_REQUIRED(g_msgproc_mutex);\n     void PushAddress(Peer& peer, const CAddress& addr) EXCLUSIVE_LOCKS_REQUIRED(g_msgproc_mutex);\n+\n+    /**\n+     * Store a list of transactions to be broadcast privately. Supports the following operations:\n+     * - Add a new transaction\n+     * - Remove a transaction, after it has been seen by the network\n+     * - Mark a broadcast of a transaction (remember when and how many times)\n+     * - Get a transaction for broadcast, the one that has been broadcast fewer times and least recently\n+     */\n+    class PrivateBroadcast\n+    {\n+    public:\n+        void Add(const CTransactionRef& tx) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+        {\n+            const Txid& txid = tx->GetHash();\n+            LOCK(m_mutex);\n+            auto [pos, inserted] = m_by_txid.emplace(txid, TxWithPriority{.tx = tx, .priority = Priority{}});\n+            if (inserted) {\n+                m_by_priority.emplace(Priority{}, txid);\n+            }\n+        }\n+\n+    private:\n+        struct Priority {\n+            size_t num_broadcasted{0};\n+            std::chrono::microseconds last_broadcasted{0};\n+\n+            bool operator<(const Priority& other) const\n+            {\n+                if (num_broadcasted < other.num_broadcasted) {\n+                    return true;\n+                }\n+                return last_broadcasted < other.last_broadcasted;\n+            }\n+        };\n+\n+        struct TxWithPriority {\n+            CTransactionRef tx;\n+            Priority priority;\n+        };\n+\n+        using ByTxid = std::unordered_map<Txid, TxWithPriority, SaltedTxidHasher>;\n+        using ByPriority = std::multimap<Priority, Txid>;\n+\n+        struct Iterators {\n+            ByTxid::iterator by_txid;\n+            ByPriority::iterator by_priority;\n+        };\n+\n+        mutable Mutex m_mutex;\n+        ByTxid m_by_txid GUARDED_BY(m_mutex);\n+        ByPriority m_by_priority GUARDED_BY(m_mutex);\n+    } m_tx_for_private_broadcast;",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 73,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "4a5433c3c8681198cfa342f8112e70828fa0ac04",
      "in_reply_to_id": 1580149990,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, I was thinking the same. Moved away.",
      "created_at": "2024-05-01T13:48:37Z",
      "updated_at": "2024-05-01T13:48:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1586319178",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1586319178"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1155,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1586319383",
      "pull_request_review_id": 2033667535,
      "id": 1586319383,
      "node_id": "PRRC_kwDOABII585ejVAX",
      "diff_hunk": "@@ -0,0 +1,309 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test how locally submitted transactions are sent to the network when private broadcast is used.\n+\n+The topology in the test is:\n+\n+Bitcoin Core (tx_originator)\n+               ^   v       The default full-outbound + block-only connections\n+               |   |       (MAX_OUTBOUND_FULL_RELAY_CONNECTIONS + MAX_BLOCK_RELAY_ONLY_CONNECTIONS):\n+               |   |\n+               |   *-----> SOCKS5 Proxy ---> P2PInterface (self.socks5_server.conf.destinations[0][\"node\"])\n+               |   |\n+               |   *-----> SOCKS5 Proxy ---> P2PInterface (self.socks5_server.conf.destinations[1][\"node\"])\n+               |   ...\n+               |   |       The private broadcast TX recipients\n+               |   |       (NUM_PRIVATE_BROADCAST_PER_TX)\n+               |   |       plus maybe some feeler or extra block only connections:\n+               |   |\n+               |   *-----> SOCKS5 Proxy ---> Bitcoin Core (node1) (self.socks5_server.conf.destinations[i][\"node\"] is None)\n+               |   |                          ^\n+               |   |                          *----< P2PInterface (far_observer) (to check Bitcoin Core relays the tx)\n+               |   |\n+               |   *-----> SOCKS5 Proxy ---> P2PInterface (self.socks5_server.conf.destinations[i + 1][\"node\"])\n+               |   ...\n+               |\n+               *---------< P2PDataStore (observer_inbound)\n+\"\"\"\n+\n+from test_framework.p2p import (\n+    P2PDataStore,\n+    P2PInterface,\n+    P2P_SERVICES,\n+    P2P_VERSION,\n+)\n+from test_framework.messages import (\n+    CAddress,\n+    CInv,\n+    MSG_WTX,\n+    msg_inv,\n+)\n+from test_framework.socks5 import (\n+    Socks5Configuration,\n+    Socks5Server,\n+)\n+from test_framework.test_framework import (\n+    BitcoinTestFramework,\n+)\n+from test_framework.util import (\n+    MAX_NODES,\n+    assert_equal,\n+    p2p_port,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+)\n+\n+MAX_OUTBOUND_FULL_RELAY_CONNECTIONS = 8\n+MAX_BLOCK_RELAY_ONLY_CONNECTIONS = 2\n+NUM_INITIAL_CONNECTIONS = MAX_OUTBOUND_FULL_RELAY_CONNECTIONS + MAX_BLOCK_RELAY_ONLY_CONNECTIONS\n+NUM_PRIVATE_BROADCAST_PER_TX = 5\n+\n+# Fill addrman with these addresses. Must have enough Tor addresses, so that even\n+# if all 10 default connections are opened to a Tor address (!?) there must be more\n+# for private broadcast.\n+addresses = [\n+    \"1.65.195.98\",\n+    \"2.59.236.56\",\n+    \"2.83.114.20\",\n+    \"2.248.194.16\",\n+    \"5.2.154.6\",\n+    \"5.101.140.30\",\n+    \"5.128.87.126\",\n+    \"5.144.21.49\",\n+    \"5.172.132.104\",\n+    \"5.188.62.18\",\n+    \"5.200.2.180\",\n+    \"8.129.184.255\",\n+    \"8.209.105.138\",\n+    \"12.34.98.148\",\n+    \"14.199.102.151\",\n+    \"18.27.79.17\",\n+    \"18.27.124.231\",\n+    \"18.216.249.151\",\n+    \"23.88.155.58\",\n+    \"23.93.101.158\",\n+    \"[2001:19f0:1000:1db3:5400:4ff:fe56:5a8d]\",\n+    \"[2001:19f0:5:24da:3eec:efff:feb9:f36e]\",\n+    \"[2001:19f0:5:24da::]\",\n+    \"[2001:19f0:5:4535:3eec:efff:feb9:87e4]\",\n+    \"[2001:19f0:5:4535::]\",\n+    \"[2001:1bc0:c1::2000]\",\n+    \"[2001:1c04:4008:6300:8a5f:2678:114b:a660]\",\n+    \"[2001:41d0:203:3739::]\",\n+    \"[2001:41d0:203:8f49::]\",\n+    \"[2001:41d0:203:bb0a::]\",\n+    \"[2001:41d0:2:bf8f::]\",\n+    \"[2001:41d0:303:de8b::]\",\n+    \"[2001:41d0:403:3d61::]\",\n+    \"[2001:41d0:405:9600::]\",\n+    \"[2001:41d0:8:ed7f::1]\",\n+    \"[2001:41d0:a:69a2::1]\",\n+    \"[2001:41f0::62:6974:636f:696e]\",\n+    \"[2001:470:1b62::]\",\n+    \"[2001:470:1f05:43b:2831:8530:7179:5864]\",\n+    \"[2001:470:1f09:b14::11]\",\n+    \"2bqghnldu6mcug4pikzprwhtjjnsyederctvci6klcwzepnjd46ikjyd.onion\",\n+    \"4lr3w2iyyl5u5l6tosizclykf5v3smqroqdn2i4h3kq6pfbbjb2xytad.onion\",\n+    \"5g72ppm3krkorsfopcm2bi7wlv4ohhs4u4mlseymasn7g7zhdcyjpfid.onion\",\n+    \"5sbmcl4m5api5tqafi4gcckrn3y52sz5mskxf3t6iw4bp7erwiptrgqd.onion\",\n+    \"776aegl7tfhg6oiqqy76jnwrwbvcytsx2qegcgh2mjqujll4376ohlid.onion\",\n+    \"77mdte42srl42shdh2mhtjr7nf7dmedqrw6bkcdekhdvmnld6ojyyiad.onion\",\n+    \"azbpsh4arqlm6442wfimy7qr65bmha2zhgjg7wbaji6vvaug53hur2qd.onion\",\n+    \"b64xcbleqmwgq2u46bh4hegnlrzzvxntyzbmucn3zt7cssm7y4ubv3id.onion\",\n+    \"bsqbtcparrfihlwolt4xgjbf4cgqckvrvsfyvy6vhiqrnh4w6ghixoid.onion\",\n+    \"bsqbtctulf2g4jtjsdfgl2ed7qs6zz5wqx27qnyiik7laockryvszqqd.onion\",\n+    \"cwi3ekrwhig47dhhzfenr5hbvckj7fzaojygvazi2lucsenwbzwoyiqd.onion\",\n+    \"devinbtcmwkuitvxl3tfi5of4zau46ymeannkjv6fpnylkgf3q5fa3id.onion\",\n+    \"devinbtcyk643iruzfpaxw3on2jket7rbjmwygm42dmdyub3ietrbmid.onion\",\n+    \"dtql5vci4iaml4anmueftqr7bfgzqlauzfy4rc2tfgulldd3ekyijjyd.onion\",\n+    \"emzybtc25oddoa2prol2znpz2axnrg6k77xwgirmhv7igoiucddsxiad.onion\",\n+    \"emzybtc3ewh7zihpkdvuwlgxrhzcxy2p5fvjggp7ngjbxcytxvt4rjid.onion\",\n+    \"emzybtc454ewbviqnmgtgx3rgublsgkk23r4onbhidcv36wremue4kqd.onion\",\n+    \"emzybtc5bnpb2o6gh54oquiox54o4r7yn4a2wiiwzrjonlouaibm2zid.onion\",\n+    \"fpz6r5ppsakkwypjcglz6gcnwt7ytfhxskkfhzu62tnylcknh3eq6pad.onion\",\n+    \"255fhcp6ajvftnyo7bwz3an3t4a4brhopm3bamyh2iu5r3gnr2rq.b32.i2p\",\n+    \"27yrtht5b5bzom2w5ajb27najuqvuydtzb7bavlak25wkufec5mq.b32.i2p\",\n+    \"3gocb7wc4zvbmmebktet7gujccuux4ifk3kqilnxnj5wpdpqx2hq.b32.i2p\",\n+    \"4fcc23wt3hyjk3csfzcdyjz5pcwg5dzhdqgma6bch2qyiakcbboa.b32.i2p\",\n+    \"4osyqeknhx5qf3a73jeimexwclmt42cju6xdp7icja4ixxguu2hq.b32.i2p\",\n+    \"4umsi4nlmgyp4rckosg4vegd2ysljvid47zu7pqsollkaszcbpqq.b32.i2p\",\n+    \"6j2ezegd3e2e2x3o3pox335f5vxfthrrigkdrbgfbdjchm5h4awa.b32.i2p\",\n+    \"6n36ljyr55szci5ygidmxqer64qr24f4qmnymnbvgehz7qinxnla.b32.i2p\",\n+    \"72yjs6mvlby3ky6mgpvvlemmwq5pfcznrzd34jkhclgrishqdxva.b32.i2p\",\n+    \"a5qsnv3maw77mlmmzlcglu6twje6ttctd3fhpbfwcbpmewx6fczq.b32.i2p\",\n+    \"aovep2pco7v2k4rheofrgytbgk23eg22dczpsjqgqtxcqqvmxk6a.b32.i2p\",\n+    \"bitcoi656nll5hu6u7ddzrmzysdtwtnzcnrjd4rfdqbeey7dmn5a.b32.i2p\",\n+    \"brifkruhlkgrj65hffybrjrjqcgdgqs2r7siizb5b2232nruik3a.b32.i2p\",\n+    \"c4gfnttsuwqomiygupdqqqyy5y5emnk5c73hrfvatri67prd7vyq.b32.i2p\",\n+    \"day3hgxyrtwjslt54sikevbhxxs4qzo7d6vi72ipmscqtq3qmijq.b32.i2p\",\n+    \"du5kydummi23bjfp6bd7owsvrijgt7zhvxmz5h5f5spcioeoetwq.b32.i2p\",\n+    \"e55k6wu46rzp4pg5pk5npgbr3zz45bc3ihtzu2xcye5vwnzdy7pq.b32.i2p\",\n+    \"eciohu5nq7vsvwjjc52epskuk75d24iccgzmhbzrwonw6lx4gdva.b32.i2p\",\n+    \"ejlnngarmhqvune74ko7kk55xtgbz5i5ncs4vmnvjpy3l7y63xaa.b32.i2p\",\n+    \"fhzlp3xroabohnmjonu5iqazwhlbbwh5cpujvw2azcu3srqdceja.b32.i2p\",\n+    \"[fc32:17ea:e415:c3bf:9808:149d:b5a2:c9aa]\",\n+    \"[fcc7:be49:ccd1:dc91:3125:f0da:457d:8ce]\",\n+    \"[fcdc:73ae:b1a9:1bf8:d4c2:811:a4c7:c34e]\",\n+]\n+\n+class P2PPrivateBroadcast(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.disable_autoconnect = False\n+        self.num_nodes = 2\n+\n+    def setup_nodes(self):\n+        # Start a SOCKS5 proxy server.\n+        socks5_server_config = Socks5Configuration()\n+        # self.nodes[0] listens on p2p_port(0),\n+        # self.nodes[1] listens on p2p_port(1),\n+        # thus we tell the SOCKS5 server to listen on p2p_port(self.num_nodes (which is 2))\n+        socks5_server_config.addr = (\"127.0.0.1\", p2p_port(self.num_nodes))\n+        socks5_server_config.unauth = True\n+        socks5_server_config.auth = True\n+\n+        self.socks5_server = Socks5Server(socks5_server_config)\n+        self.socks5_server.start()\n+\n+        ports_base = p2p_port(MAX_NODES) + 15000\n+\n+        # Add 2 because one feeler and one extra block relay connections may\n+        # sneak in between the private broadcast connections.\n+        for i in range(NUM_INITIAL_CONNECTIONS + NUM_PRIVATE_BROADCAST_PER_TX + 2):\n+            if i == NUM_INITIAL_CONNECTIONS:\n+                # Instruct the SOCKS5 server to redirect the first private\n+                # broadcast connection from nodes[0] to nodes[1]\n+                self.socks5_server.conf.destinations.append({\n+                    \"to_addr\": \"127.0.0.1\", # nodes[1] listen address\n+                    \"to_port\": p2p_port(1), # nodes[1] listen port\n+                    \"node\": None,\n+                    \"requested_to_addr\": None,\n+                })\n+            else:\n+                # Create a Python P2P listening node and add it to self.socks5_server.conf.destinations[]\n+                listener = P2PInterface()\n+                listener.peer_connect_helper(dstaddr=\"0.0.0.0\", dstport=0, net=self.chain, timeout_factor=self.options.timeout_factor)\n+                listener.peer_connect_send_version(services=P2P_SERVICES)\n+                self.network_thread.listen(\n+                    p2p=listener,\n+                    # Instruct the SOCKS5 server to redirect a connection to this Python P2P listener.\n+                    callback=lambda addr, port: self.socks5_server.conf.destinations.append({\n+                        \"to_addr\": addr,\n+                        \"to_port\": port,\n+                        \"node\": None,\n+                        \"requested_to_addr\": None,\n+                    }),\n+                    addr=\"127.0.0.1\",\n+                    port=ports_base + i)\n+                # Wait until the callback has been called and it has done append().\n+                self.wait_until(lambda: len(self.socks5_server.conf.destinations) == i + 1)\n+\n+                self.socks5_server.conf.destinations[i][\"node\"] = listener\n+\n+        self.extra_args = [\n+            [\n+                \"-peerbloomfilters\", # needed to test replies to MEMPOOL",
      "path": "test/functional/p2p_private_broadcast.py",
      "position": null,
      "original_position": 208,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "fd603b8f5c23c171e1cff70a73f5d64d6d74c4f7",
      "in_reply_to_id": 1580200865,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Removed.",
      "created_at": "2024-05-01T13:48:50Z",
      "updated_at": "2024-05-01T13:48:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1586319383",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1586319383"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 208,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1586319507",
      "pull_request_review_id": 2033667725,
      "id": 1586319507,
      "node_id": "PRRC_kwDOABII585ejVCT",
      "diff_hunk": "@@ -91,11 +94,23 @@ static RPCHelpMan sendrawtransaction()\n             std::string err_string;\n             AssertLockNotHeld(cs_main);\n             NodeContext& node = EnsureAnyNodeContext(request.context);\n+            const bool private_broadcast_enabled{gArgs.GetBoolArg(\"-privatebroadcast\", DEFAULT_PRIVATE_BROADCAST)};\n+            if (private_broadcast_enabled &&\n+                !g_reachable_nets.Contains(NET_ONION) &&\n+                !g_reachable_nets.Contains(NET_I2P)) {\n+                throw JSONRPCError(RPC_MISC_ERROR,\n+                                   \"-privatebroadcast is enabled, but none of the Tor or I2P networks is \"",
      "path": "src/rpc/mempool.cpp",
      "position": 47,
      "original_position": 21,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "180e51a723520f530bb675e937eeaabebcc0b0b5",
      "in_reply_to_id": 1580205599,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Updated.",
      "created_at": "2024-05-01T13:48:58Z",
      "updated_at": "2024-05-01T13:48:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1586319507",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1586319507"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 113,
      "original_line": 113,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1586320176",
      "pull_request_review_id": 2033668893,
      "id": 1586320176,
      "node_id": "PRRC_kwDOABII585ejVMw",
      "diff_hunk": "@@ -2883,6 +3013,34 @@ void CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFai\n     }\n }\n \n+void CConnman::PrivateBroadcastAdd(size_t n)\n+{\n+    const size_t before{m_private_broadcast_connections_to_open.fetch_add(n)};\n+\n+    LogPrintLevel(BCLog::PRIVATE_BROADCAST,\n+                  BCLog::Level::Debug,\n+                  \"Request to increment the needed new connections by %d, changed from %d to %d\\n\",\n+                  n,\n+                  before,\n+                  before + n);\n+}\n+\n+void CConnman::PrivateBroadcastSub(size_t n)\n+{\n+    size_t before{m_private_broadcast_connections_to_open.load()};\n+    size_t desired;\n+    do {\n+        desired = before > n ? before - n : 0;\n+    } while (!m_private_broadcast_connections_to_open.compare_exchange_weak(before, desired));",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 261,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "6b4693ee859d6bddf559a0b32749b1dafe015ef4",
      "in_reply_to_id": 1584709863,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "To avoid negative values. I added a comment in the source code to explain.",
      "created_at": "2024-05-01T13:49:51Z",
      "updated_at": "2024-05-01T13:49:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1586320176",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1586320176"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3102,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1586454646",
      "pull_request_review_id": 2033880606,
      "id": 1586454646,
      "node_id": "PRRC_kwDOABII585ej2B2",
      "diff_hunk": "@@ -3898,6 +3907,23 @@ bool CConnman::NodeFullyConnected(const CNode* pnode)\n void CConnman::PushMessage(CNode* pnode, CSerializedNetMsg&& msg)\n {\n     AssertLockNotHeld(m_total_bytes_sent_mutex);\n+\n+    if (pnode->IsPrivateBroadcastConn() &&\n+        msg.m_type != NetMsgType::VERSION &&\n+        msg.m_type != NetMsgType::VERACK &&\n+        msg.m_type != NetMsgType::TX &&\n+        msg.m_type != NetMsgType::PING) {\n+        // Ensure private broadcast connections only send the above message types.\n+        // Others are not needed and may degrade privacy.\n+        LogPrintLevel(BCLog::PRIVATE_BROADCAST,",
      "path": "src/net.cpp",
      "position": 372,
      "original_position": 30,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "ae6651d267895342c2794b62bf1f2e6d15867778",
      "in_reply_to_id": 1580115581,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This was triggered in the fuzz tests. I could complicate the fuzz tests to avoid sending unwanted messages if the random node happens to be a private broadcast, but `CConnman::PushMessage()` is called from a lot of places including from the RPC and that may change in the future as well. It is somewhat hard to judge that nobody will call `PushMessage()` with an unwanted message. Thus I think it is better to assume that this is the real check here in `CConnman::PushMessage()` and that the one in `PeerManagerImpl::SendMessages()` is an optimization. Removed the `Assume(false)`.",
      "created_at": "2024-05-01T15:59:47Z",
      "updated_at": "2024-05-01T15:59:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1586454646",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1586454646"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3980,
      "original_line": 3980,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1591511159",
      "pull_request_review_id": 2041604763,
      "id": 1591511159,
      "node_id": "PRRC_kwDOABII585e3Ih3",
      "diff_hunk": "@@ -120,6 +120,12 @@ bool WalletInit::ParameterInteraction() const\n         LogPrintf(\"%s: parameter interaction: -blocksonly=1 -> setting -walletbroadcast=0\\n\", __func__);\n     }\n \n+    if (gArgs.GetBoolArg(\"-privatebroadcast\", DEFAULT_PRIVATE_BROADCAST) &&",
      "path": "src/wallet/init.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "1407b3fa264b096813281a767da3cd3ca80ed096",
      "in_reply_to_id": 1578537557,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I was pretty confused about this, maybe because I misunderstood the proposal. By just reading what the help for `-privatebroadcast` I wouldn't assume that transactions made using the wallet won't be broadcast. My understanding was that anything done via the wallet would work as usual, but that transactions sent via `sendrawtransaction` would use the private broadcast mechanism if set.\r\n\r\nI think this should be mentioned in the help of `-privatebroadcast`.",
      "created_at": "2024-05-06T20:18:49Z",
      "updated_at": "2024-05-13T14:57:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1591511159",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1591511159"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 122,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1591513311",
      "pull_request_review_id": 2041604763,
      "id": 1591513311,
      "node_id": "PRRC_kwDOABII585e3JDf",
      "diff_hunk": "@@ -655,11 +656,12 @@ class NetinfoRequestHandler : public BaseRequestHandler\n         \"           \\\"in\\\"  - inbound connections are those initiated by the peer\\n\"\n         \"           \\\"out\\\" - outbound connections are those initiated by us\\n\"\n         \"  type     Type of peer connection\\n\"\n-        \"           \\\"full\\\"   - full relay, the default\\n\"\n-        \"           \\\"block\\\"  - block relay; like full relay but does not relay transactions or addresses\\n\"\n-        \"           \\\"manual\\\" - peer we manually added using RPC addnode or the -addnode/-connect config options\\n\"\n-        \"           \\\"feeler\\\" - short-lived connection for testing addresses\\n\"\n-        \"           \\\"addr\\\"   - address fetch; short-lived connection for requesting addresses\\n\"\n+        \"           \\\"full\\\"      - full relay, the default\\n\"\n+        \"           \\\"block\\\"     - block relay; like full relay but does not relay transactions or addresses\\n\"\n+        \"           \\\"manual\\\"    - peer we manually added using RPC addnode or the -addnode/-connect config options\\n\"\n+        \"           \\\"feeler\\\"    - short-lived connection for testing addresses\\n\"\n+        \"           \\\"addr\\\"      - address fetch; short-lived connection for requesting addresses\\n\"\n+        \"           \\\"privat\\\"    - private broadcast; short-lived connection for broadcasting our transactions\\n\"",
      "path": "src/bitcoin-cli.cpp",
      "position": 22,
      "original_position": 22,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "c7e4d5cb2bf01d9719702e71c8d6264ee670e988",
      "in_reply_to_id": 1545397035,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'd go with priv, but just my opinion",
      "created_at": "2024-05-06T20:21:06Z",
      "updated_at": "2024-05-13T14:57:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1591513311",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1591513311"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 663,
      "original_line": 663,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595556422",
      "pull_request_review_id": 2041604763,
      "id": 1595556422,
      "node_id": "PRRC_kwDOABII585fGkJG",
      "diff_hunk": "@@ -71,6 +71,8 @@ static const int MAX_ADDNODE_CONNECTIONS = 8;\n static const int MAX_BLOCK_RELAY_ONLY_CONNECTIONS = 2;\n /** Maximum number of feeler connections */\n static const int MAX_FEELER_CONNECTIONS = 1;\n+/** Maximum number of private broadcast connections */\n+static constexpr size_t MAX_PRIVATE_BROADCAST_CONNECTIONS{64};",
      "path": "src/net.h",
      "position": 5,
      "original_position": 5,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "0ba30dec085f860c89f4fd8c8a398aa8a13b5ebd",
      "in_reply_to_id": null,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 0ba30dec085f860c89f4fd8c8a398aa8a13b5ebd\r\n\r\nWhat is the rationale for 64? That seems like a lot of connections.",
      "created_at": "2024-05-09T14:48:50Z",
      "updated_at": "2024-05-13T14:57:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1595556422",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595556422"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 75,
      "original_line": 75,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595743723",
      "pull_request_review_id": 2041604763,
      "id": 1595743723,
      "node_id": "PRRC_kwDOABII585fHR3r",
      "diff_hunk": "@@ -386,6 +386,27 @@ static CAddress GetBindAddress(const Sock& sock)\n     return addr_bind;\n }\n \n+/**\n+ * Check if private broadcast can be done to clearnet peers and if yes via which proxy.\n+ * If private broadcast connections should not be opened to `net`, then this will return an empty optional.\n+ */\n+static std::optional<Proxy> ProxyForClearnetPrivateBroadcast(Network clearnet)\n+{\n+    if (clearnet != NET_IPV4 && clearnet != NET_IPV6) {\n+        return std::nullopt;\n+    }\n+    Proxy tor_proxy;\n+    const std::string onion_arg{gArgs.GetArg(\"-onion\", \"\")};\n+    if (onion_arg != \"\" && onion_arg == \"0\" && GetProxy(NET_ONION, tor_proxy)) {\n+        // Use the Tor proxy (if provided) for private broadcast connections to clearnet peers.\n+        // Note: we check whether -onion is explicitly used because GetProxy(NET_ONION) may",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 17,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "6b4693ee859d6bddf559a0b32749b1dafe015ef4",
      "in_reply_to_id": 1579852847,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Is there no better way of checking whether `-proxy` is an actual Tor proxy or just a regular SOCKS5 proxy? It feels like the amount of custom settings that this will require to run will make it hard to use",
      "created_at": "2024-05-09T17:15:24Z",
      "updated_at": "2024-05-13T14:57:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1595743723",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595743723"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 406,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595748248",
      "pull_request_review_id": 2041604763,
      "id": 1595748248,
      "node_id": "PRRC_kwDOABII585fHS-Y",
      "diff_hunk": "@@ -386,6 +386,27 @@ static CAddress GetBindAddress(const Sock& sock)\n     return addr_bind;\n }\n \n+/**\n+ * Check if private broadcast can be done to clearnet peers and if yes via which proxy.",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "0ba30dec085f860c89f4fd8c8a398aa8a13b5ebd",
      "in_reply_to_id": null,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 0ba30dec085f860c89f4fd8c8a398aa8a13b5ebd:\r\n\r\nnit: if yes -> if so",
      "created_at": "2024-05-09T17:17:54Z",
      "updated_at": "2024-05-13T14:57:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1595748248",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595748248"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 390,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595750204",
      "pull_request_review_id": 2041604763,
      "id": 1595750204,
      "node_id": "PRRC_kwDOABII585fHTc8",
      "diff_hunk": "@@ -386,6 +386,27 @@ static CAddress GetBindAddress(const Sock& sock)\n     return addr_bind;\n }\n \n+/**\n+ * Check if private broadcast can be done to clearnet peers and if yes via which proxy.\n+ * If private broadcast connections should not be opened to `net`, then this will return an empty optional.\n+ */\n+static std::optional<Proxy> ProxyForClearnetPrivateBroadcast(Network clearnet)",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 8,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "0ba30dec085f860c89f4fd8c8a398aa8a13b5ebd",
      "in_reply_to_id": null,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 0ba30dec085f860c89f4fd8c8a398aa8a13b5ebd:\r\n\r\nnit: sorry for bikeshedding `clearnet` doesn't seem the best name for this. Maybe `net` or `network`?\r\n\r\n",
      "created_at": "2024-05-09T17:19:45Z",
      "updated_at": "2024-05-13T14:57:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1595750204",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595750204"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 393,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595750802",
      "pull_request_review_id": 2041604763,
      "id": 1595750802,
      "node_id": "PRRC_kwDOABII585fHTmS",
      "diff_hunk": "@@ -386,6 +386,27 @@ static CAddress GetBindAddress(const Sock& sock)\n     return addr_bind;\n }\n \n+/**\n+ * Check if private broadcast can be done to clearnet peers and if yes via which proxy.\n+ * If private broadcast connections should not be opened to `net`, then this will return an empty optional.\n+ */\n+static std::optional<Proxy> ProxyForClearnetPrivateBroadcast(Network clearnet)",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 8,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "0ba30dec085f860c89f4fd8c8a398aa8a13b5ebd",
      "in_reply_to_id": 1595750204,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Also, this is already referenced as `net` in the docs",
      "created_at": "2024-05-09T17:20:08Z",
      "updated_at": "2024-05-13T14:57:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1595750802",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595750802"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 393,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595772136",
      "pull_request_review_id": 2041604763,
      "id": 1595772136,
      "node_id": "PRRC_kwDOABII585fHYzo",
      "diff_hunk": "@@ -456,14 +477,24 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n \n     for (auto& target_addr: connect_to) {\n         if (target_addr.IsValid()) {\n-            const bool use_proxy{GetProxy(target_addr.GetNetwork(), proxy)};\n+            bool use_proxy{GetProxy(addrConnect.GetNetwork(), proxy)};\n+            if (conn_type == ConnectionType::PRIVATE_BROADCAST) {\n+                const auto proxy_opt{ProxyForClearnetPrivateBroadcast(addrConnect.GetNetwork())};\n+                if (proxy_opt.has_value()) {\n+                    use_proxy = true;\n+                    proxy = proxy_opt.value();\n+                }\n+            }",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 40,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "0ba30dec085f860c89f4fd8c8a398aa8a13b5ebd",
      "in_reply_to_id": null,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 0ba30dec085f860c89f4fd8c8a398aa8a13b5ebd\r\n\r\nThe way you are defining `use_proxy` could lead to `proxy_opt` having no value, yet `use_proxy` being `true`\r\n\r\n```suggestion\r\n            bool use_proxy;\r\n            if (conn_type == ConnectionType::PRIVATE_BROADCAST) {\r\n                const auto proxy_opt{ProxyForClearnetPrivateBroadcast(addrConnect.GetNetwork())};\r\n                if (proxy_opt.has_value()) {\r\n                    use_proxy = true;\r\n                    proxy = proxy_opt.value();\r\n                }\r\n            } else {\r\n                use_proxy = GetProxy(addrConnect.GetNetwork(), proxy);\r\n            }\r\n```",
      "created_at": "2024-05-09T17:37:54Z",
      "updated_at": "2024-05-13T14:57:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1595772136",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595772136"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": 480,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 473,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595773620",
      "pull_request_review_id": 2041604763,
      "id": 1595773620,
      "node_id": "PRRC_kwDOABII585fHZK0",
      "diff_hunk": "@@ -456,14 +477,24 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n \n     for (auto& target_addr: connect_to) {\n         if (target_addr.IsValid()) {\n-            const bool use_proxy{GetProxy(target_addr.GetNetwork(), proxy)};\n+            bool use_proxy{GetProxy(addrConnect.GetNetwork(), proxy)};\n+            if (conn_type == ConnectionType::PRIVATE_BROADCAST) {\n+                const auto proxy_opt{ProxyForClearnetPrivateBroadcast(addrConnect.GetNetwork())};\n+                if (proxy_opt.has_value()) {\n+                    use_proxy = true;\n+                    proxy = proxy_opt.value();\n+                }\n+            }",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 40,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "0ba30dec085f860c89f4fd8c8a398aa8a13b5ebd",
      "in_reply_to_id": 1595772136,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`use_proxy` can even be defined right after `proxy` (a few lined above) for simplicity ",
      "created_at": "2024-05-09T17:39:28Z",
      "updated_at": "2024-05-13T14:57:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1595773620",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595773620"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": 480,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 473,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595793107",
      "pull_request_review_id": 2041604763,
      "id": 1595793107,
      "node_id": "PRRC_kwDOABII585fHd7T",
      "diff_hunk": "@@ -456,14 +477,24 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n \n     for (auto& target_addr: connect_to) {\n         if (target_addr.IsValid()) {\n-            const bool use_proxy{GetProxy(target_addr.GetNetwork(), proxy)};\n+            bool use_proxy{GetProxy(addrConnect.GetNetwork(), proxy)};\n+            if (conn_type == ConnectionType::PRIVATE_BROADCAST) {\n+                const auto proxy_opt{ProxyForClearnetPrivateBroadcast(addrConnect.GetNetwork())};\n+                if (proxy_opt.has_value()) {\n+                    use_proxy = true;\n+                    proxy = proxy_opt.value();\n+                }\n+            }\n             bool proxyConnectionFailed = false;\n \n             if (target_addr.IsI2P() && use_proxy) {\n                 i2p::Connection conn;\n                 bool connected{false};\n \n-                if (m_i2p_sam_session) {\n+                // If an I2P SAM session already exists, normally we would re-use it. But in the case of\n+                // private broadcast we force a new transient session. A Connect() using m_i2p_sam_session\n+                // would use our permanent I2P address as a source address.\n+                if (m_i2p_sam_session && conn_type != ConnectionType::PRIVATE_BROADCAST) {",
      "path": "src/net.cpp",
      "position": 42,
      "original_position": 51,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "0ba30dec085f860c89f4fd8c8a398aa8a13b5ebd",
      "in_reply_to_id": null,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 0ba30dec085f860c89f4fd8c8a398aa8a13b5ebd\r\n\r\nI'm confused here. We choose not to use our permanent `m_i2p_sam_session` to avoid linking this to our permanent I2P ID, however, we use a pool of transient I2P sessions (`m_unused_i2p_sessions`) instead. I understand these transient sessions can be reused (or at least that's what I get from the docs of `m_unused_i2p_sessions`). So if the same `(peer, session_id)` pair is picked, the node will know that we created both transactions, wouldn't it?",
      "created_at": "2024-05-09T17:57:15Z",
      "updated_at": "2024-05-13T14:57:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1595793107",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595793107"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 483,
      "original_line": 483,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595819770",
      "pull_request_review_id": 2041604763,
      "id": 1595819770,
      "node_id": "PRRC_kwDOABII585fHkb6",
      "diff_hunk": "@@ -2605,18 +2721,19 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n         bool fFeeler = false;\n         std::optional<Network> preferred_net;\n \n-        // Determine what type of connection to open. Opening\n-        // BLOCK_RELAY connections to addresses from anchors.dat gets the highest\n-        // priority. Then we open OUTBOUND_FULL_RELAY priority until we\n-        // meet our full-relay capacity. Then we open BLOCK_RELAY connection\n-        // until we hit our block-relay-only peer limit.\n-        // GetTryNewOutboundPeer() gets set when a stale tip is detected, so we\n-        // try opening an additional OUTBOUND_FULL_RELAY connection. If none of\n-        // these conditions are met, check to see if it's time to try an extra\n-        // block-relay-only peer (to confirm our tip is current, see below) or the next_feeler\n-        // timer to decide if we should open a FEELER.\n-\n-        if (!m_anchors.empty() && (nOutboundBlockRelay < m_max_outbound_block_relay)) {\n+        // Determine what type of connection to open, in order of priority:\n+        // * PRIVATE_BROADCAST if needed\n+        // * BLOCK_RELAY connections to addresses from anchors.dat until we reach m_max_outbound_block_relay\n+        // * OUTBOUND_FULL_RELAY until we reach m_max_outbound_full_relay\n+        // * BLOCK_RELAY until we reach m_max_outbound_block_relay\n+        // * OUTBOUND_FULL_RELAY if GetTryNewOutboundPeer() is true (a stale tip is detected)\n+        // * BLOCK_RELAY if it's time to try an extra block-relay-only peer (to confirm our tip is current)\n+        // * FEELER if it's time to try a feeler\n+        // * else retry the loop (sleep a bit and start from the top of this list)\n+\n+        if (open_private_broadcast_to.has_value()) {\n+            conn_type = ConnectionType::PRIVATE_BROADCAST;",
      "path": "src/net.cpp",
      "position": 209,
      "original_position": 205,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "0ba30dec085f860c89f4fd8c8a398aa8a13b5ebd",
      "in_reply_to_id": null,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 0ba30dec085f860c89f4fd8c8a398aa8a13b5ebd\r\n\r\nI don't think we should be giving `PRIVATE_BROADCAST` priority over every other type of connection. At the very least, they should go after `BLOCK_RELAY`.\r\n\r\nHaving connections that keep us up to date should be more important than sending out our own stuff",
      "created_at": "2024-05-09T18:21:16Z",
      "updated_at": "2024-05-13T14:57:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1595819770",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595819770"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": 2658,
      "original_start_line": 2734,
      "start_side": "RIGHT",
      "line": 2659,
      "original_line": 2659,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595875212",
      "pull_request_review_id": 2041604763,
      "id": 1595875212,
      "node_id": "PRRC_kwDOABII585fHx-M",
      "diff_hunk": "@@ -2452,6 +2483,72 @@ bool CConnman::MaybePickPreferredNetwork(std::optional<Network>& network)\n     return false;\n }\n \n+/**\n+ * Decide whether to open a private broadcast connection and if yes, to which network.\n+ * @param[in] prev_was_private_broadcast Whether the previous attempt to open a connection\n+ * was an attempt to open a private broadcast connection (successful or not).\n+ * @param[in] num_needed Number of private broadcast connections that need to be opened.",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 63,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "0ba30dec085f860c89f4fd8c8a398aa8a13b5ebd",
      "in_reply_to_id": null,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 0ba30dec085f860c89f4fd8c8a398aa8a13b5ebd\r\n\r\nThis took me a while to grasp. `num_needed` is set to `m_private_broadcast_connections_to_open.load()`, which is only set to anything above 0 **if there are transactions pending to be broadcast**.\r\n\r\nI think it'd be good to clarify this here, to make it clear that we won't try to open a connection of this type if we have no transactions pending ",
      "created_at": "2024-05-09T19:20:07Z",
      "updated_at": "2024-05-13T14:57:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1595875212",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595875212"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2497,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1596830944",
      "pull_request_review_id": 2041604763,
      "id": 1596830944,
      "node_id": "PRRC_kwDOABII585fLbTg",
      "diff_hunk": "@@ -179,6 +180,9 @@ static constexpr size_t MAX_ADDR_PROCESSING_TOKEN_BUCKET{MAX_ADDR_TO_SEND};\n /** The compactblocks version we support. See BIP 152. */\n static constexpr uint64_t CMPCTBLOCKS_VERSION{2};\n ",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 11,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "434a20371e441660147da6d0c6c1832cb0d0073b",
      "in_reply_to_id": null,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 434a20371e441660147da6d0c6c1832cb0d0073b\r\n\r\nnit: remove line break",
      "created_at": "2024-05-10T14:27:46Z",
      "updated_at": "2024-05-13T14:57:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1596830944",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1596830944"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 182,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1596831509",
      "pull_request_review_id": 2041604763,
      "id": 1596831509,
      "node_id": "PRRC_kwDOABII585fLbcV",
      "diff_hunk": "@@ -179,6 +180,9 @@ static constexpr size_t MAX_ADDR_PROCESSING_TOKEN_BUCKET{MAX_ADDR_TO_SEND};\n /** The compactblocks version we support. See BIP 152. */\n static constexpr uint64_t CMPCTBLOCKS_VERSION{2};\n \n+/** For private broadcast, send a transaction to this many peers per one broadcast attempt. */",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 12,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "434a20371e441660147da6d0c6c1832cb0d0073b",
      "in_reply_to_id": null,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 434a20371e441660147da6d0c6c1832cb0d0073b\r\n\r\nnit: per one -> for each",
      "created_at": "2024-05-10T14:28:15Z",
      "updated_at": "2024-05-13T14:57:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1596831509",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1596831509"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 183,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1596833034",
      "pull_request_review_id": 2041604763,
      "id": 1596833034,
      "node_id": "PRRC_kwDOABII585fLb0K",
      "diff_hunk": "@@ -1175,6 +1180,8 @@ class PeerManagerImpl final : public PeerManager\n \n     void AddAddressKnown(Peer& peer, const CAddress& addr) EXCLUSIVE_LOCKS_REQUIRED(g_msgproc_mutex);\n     void PushAddress(Peer& peer, const CAddress& addr) EXCLUSIVE_LOCKS_REQUIRED(g_msgproc_mutex);\n+",
      "path": "src/net_processing.cpp",
      "position": 67,
      "original_position": 30,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "434a20371e441660147da6d0c6c1832cb0d0073b",
      "in_reply_to_id": null,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 434a20371e441660147da6d0c6c1832cb0d0073b\r\n\r\nThis is missing docs",
      "created_at": "2024-05-10T14:29:29Z",
      "updated_at": "2024-05-13T14:57:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1596833034",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1596833034"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1189,
      "original_line": 1189,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1596835091",
      "pull_request_review_id": 2041604763,
      "id": 1596835091,
      "node_id": "PRRC_kwDOABII585fLcUT",
      "diff_hunk": "@@ -2341,6 +2348,19 @@ void PeerManagerImpl::ScheduleTxForBroadcastToAll(const uint256& txid, const uin\n     };\n }\n \n+void PeerManagerImpl::ScheduleTxForPrivateBroadcast(const CTransactionRef& tx)\n+{\n+    m_tx_for_private_broadcast.Add(tx);\n+\n+    LogPrintLevel(BCLog::PRIVATE_BROADCAST,\n+                  BCLog::Level::Debug,\n+                  \"Requesting %d new connections due to txid=%s, wtxid=%s\\n\",",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 45,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "434a20371e441660147da6d0c6c1832cb0d0073b",
      "in_reply_to_id": null,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 434a20371e441660147da6d0c6c1832cb0d0073b\r\n\r\nI don't follow this log. What is the \"due to ...\" trying to convey here?",
      "created_at": "2024-05-10T14:31:13Z",
      "updated_at": "2024-05-13T14:57:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1596835091",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1596835091"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2459,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1596842874",
      "pull_request_review_id": 2041604763,
      "id": 1596842874,
      "node_id": "PRRC_kwDOABII585fLeN6",
      "diff_hunk": "@@ -0,0 +1,55 @@\n+// Copyright (c) 2023-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or https://opensource.org/license/mit/.\n+\n+#ifndef BITCOIN_PRIVATE_BROADCAST_H\n+#define BITCOIN_PRIVATE_BROADCAST_H\n+\n+#include <primitives/transaction.h>\n+#include <sync.h>\n+#include <threadsafety.h>\n+#include <util/hasher.h>\n+\n+#include <chrono>\n+#include <map>\n+#include <unordered_map>\n+\n+/**\n+ * Store a list of transactions to be broadcast privately. Supports the following operations:\n+ * - Add a new transaction\n+ * - Remove a transaction, after it has been seen by the network\n+ * - Mark a broadcast of a transaction (remember when and how many times)\n+ * - Get a transaction for broadcast, the one that has been broadcast fewer times and least recently",
      "path": "src/private_broadcast.h",
      "position": 26,
      "original_position": 22,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "434a20371e441660147da6d0c6c1832cb0d0073b",
      "in_reply_to_id": null,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 434a20371e441660147da6d0c6c1832cb0d0073b\r\n\r\nnit: I don't think these belong to this commit yet",
      "created_at": "2024-05-10T14:37:44Z",
      "updated_at": "2024-05-13T14:57:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1596842874",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1596842874"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": 24,
      "original_start_line": 20,
      "start_side": "RIGHT",
      "line": 26,
      "original_line": 26,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1596847026",
      "pull_request_review_id": 2041604763,
      "id": 1596847026,
      "node_id": "PRRC_kwDOABII585fLfOy",
      "diff_hunk": "@@ -0,0 +1,23 @@\n+// Copyright (c) 2023-present The Bitcoin Core developers",
      "path": "src/private_broadcast.cpp",
      "position": 1,
      "original_position": 1,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "434a20371e441660147da6d0c6c1832cb0d0073b",
      "in_reply_to_id": null,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 434a20371e441660147da6d0c6c1832cb0d0073b\r\n\r\nnit: 2024",
      "created_at": "2024-05-10T14:41:18Z",
      "updated_at": "2024-05-13T14:57:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1596847026",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1596847026"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1596847172",
      "pull_request_review_id": 2041604763,
      "id": 1596847172,
      "node_id": "PRRC_kwDOABII585fLfRE",
      "diff_hunk": "@@ -0,0 +1,55 @@\n+// Copyright (c) 2023-present The Bitcoin Core developers",
      "path": "src/private_broadcast.h",
      "position": 1,
      "original_position": 1,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "434a20371e441660147da6d0c6c1832cb0d0073b",
      "in_reply_to_id": null,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 434a20371e441660147da6d0c6c1832cb0d0073b\r\n\r\nnit: 2024",
      "created_at": "2024-05-10T14:41:25Z",
      "updated_at": "2024-05-13T14:57:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1596847172",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1596847172"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1596937357",
      "pull_request_review_id": 2041604763,
      "id": 1596937357,
      "node_id": "PRRC_kwDOABII585fL1SN",
      "diff_hunk": "@@ -1566,26 +1665,53 @@ void PeerManagerImpl::FindNextBlocks(std::vector<const CBlockIndex*>& vBlocks, c\n \n void PeerManagerImpl::PushNodeVersion(CNode& pnode, const Peer& peer)\n {\n-    uint64_t my_services{peer.m_our_services};\n-    const int64_t nTime{count_seconds(GetTime<std::chrono::seconds>())};\n-    uint64_t nonce = pnode.GetLocalNonce();\n-    const int nNodeStartingHeight{m_best_height};\n-    NodeId nodeid = pnode.GetId();\n-    CAddress addr = pnode.addr;\n-\n-    CService addr_you = addr.IsRoutable() && !IsProxy(addr) && addr.IsAddrV1Compatible() ? addr : CService();\n-    uint64_t your_services{addr.nServices};\n-\n-    const bool tx_relay{!RejectIncomingTxs(pnode)};\n-    MakeAndPushMessage(pnode, NetMsgType::VERSION, PROTOCOL_VERSION, my_services, nTime,\n-            your_services, CNetAddr::V1(addr_you), // Together the pre-version-31402 serialization of CAddress \"addrYou\" (without nTime)\n-            my_services, CNetAddr::V1(CService{}), // Together the pre-version-31402 serialization of CAddress \"addrMe\" (without nTime)\n-            nonce, strSubVersion, nNodeStartingHeight, tx_relay);\n-\n+    uint64_t my_services;\n+    int64_t my_time;\n+    uint64_t your_services;\n+    CService your_addr;\n+    std::string my_user_agent;\n+    int my_height;\n+    bool my_tx_relay;\n+    if (pnode.IsPrivateBroadcastConn()) {\n+        my_services = NODE_NONE;\n+        my_time = 0;\n+        your_services = NODE_NONE;\n+        your_addr = CService{};\n+        my_user_agent = \"/pynode:0.0.1/\";",
      "path": "src/net_processing.cpp",
      "position": 105,
      "original_position": 172,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "07dee91112189be02c6694385de261570725b56b",
      "in_reply_to_id": 1518263617,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think `/pynode:0.0.1/` is as good as any other of the options commented on the linked thread, but having a comment there specifying why this was picked is worth. Any future traveller will be so confuse to see that user agent without context ",
      "created_at": "2024-05-10T16:03:32Z",
      "updated_at": "2024-05-13T14:57:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1596937357",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1596937357"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1644,
      "original_line": 1644,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1596947249",
      "pull_request_review_id": 2041604763,
      "id": 1596947249,
      "node_id": "PRRC_kwDOABII585fL3sx",
      "diff_hunk": "@@ -1622,26 +1630,66 @@ void PeerManagerImpl::FindNextBlocks(std::vector<const CBlockIndex*>& vBlocks, c\n \n void PeerManagerImpl::PushNodeVersion(CNode& pnode, const Peer& peer)\n {\n-    uint64_t my_services{peer.m_our_services};\n-    const int64_t nTime{count_seconds(GetTime<std::chrono::seconds>())};\n-    uint64_t nonce = pnode.GetLocalNonce();\n-    const int nNodeStartingHeight{m_best_height};\n-    NodeId nodeid = pnode.GetId();\n-    CAddress addr = pnode.addr;\n-\n-    CService addr_you = addr.IsRoutable() && !IsProxy(addr) && addr.IsAddrV1Compatible() ? addr : CService();\n-    uint64_t your_services{addr.nServices};\n-\n-    const bool tx_relay{!RejectIncomingTxs(pnode)};\n-    MakeAndPushMessage(pnode, NetMsgType::VERSION, PROTOCOL_VERSION, my_services, nTime,\n-            your_services, CNetAddr::V1(addr_you), // Together the pre-version-31402 serialization of CAddress \"addrYou\" (without nTime)\n-            my_services, CNetAddr::V1(CService{}), // Together the pre-version-31402 serialization of CAddress \"addrMe\" (without nTime)\n-            nonce, strSubVersion, nNodeStartingHeight, tx_relay);\n-\n+    uint64_t my_services;\n+    int64_t my_time;\n+    uint64_t your_services;\n+    CService your_addr;\n+    std::string my_user_agent;\n+    int my_height;\n+    bool my_tx_relay;",
      "path": "src/net_processing.cpp",
      "position": 99,
      "original_position": 52,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "fecab592de8d0994e6d61e454e118d652ffd7b93",
      "in_reply_to_id": null,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In fecab592de8d0994e6d61e454e118d652ffd7b93\r\n\r\nmicro-nit: There is no `your_` counterparty for this, so there's no need to call them `my_`. This is kind of assumed ",
      "created_at": "2024-05-10T16:12:54Z",
      "updated_at": "2024-05-13T14:57:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1596947249",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1596947249"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": 1636,
      "original_start_line": 1637,
      "start_side": "RIGHT",
      "line": 1638,
      "original_line": 1638,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1596957262",
      "pull_request_review_id": 2041604763,
      "id": 1596957262,
      "node_id": "PRRC_kwDOABII585fL6JO",
      "diff_hunk": "@@ -5155,6 +5282,17 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n                     if (ping_time.count() >= 0) {\n                         // Let connman know about this successful ping-pong\n                         pfrom.PongReceived(ping_time);\n+                        if (pfrom.IsPrivateBroadcastConn()) {\n+                            m_tx_for_private_broadcast.BroadcastEnd(pfrom.GetId(), /*confirmed_by_node=*/true);\n+                            LogPrintLevel(\n+                                BCLog::PRIVATE_BROADCAST,\n+                                BCLog::Level::Info,\n+                                \"Got a PONG (probably the transaction will reach the network), \"",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 243,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "fecab592de8d0994e6d61e454e118d652ffd7b93",
      "in_reply_to_id": null,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In fecab592de8d0994e6d61e454e118d652ffd7b93\r\n\r\nnit:\r\n\r\n```suggestion\r\n                                \"Got a PONG (the transaction will probably reach the network), \"\r\n```",
      "created_at": "2024-05-10T16:22:25Z",
      "updated_at": "2024-05-13T14:57:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1596957262",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1596957262"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5290,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1596958082",
      "pull_request_review_id": 2041604763,
      "id": 1596958082,
      "node_id": "PRRC_kwDOABII585fL6WC",
      "diff_hunk": "@@ -1790,6 +1838,17 @@ void PeerManagerImpl::FinalizeNode(const CNode& node)\n         LOCK(m_headers_presync_mutex);\n         m_headers_presync_stats.erase(nodeid);\n     }\n+    // This is done when we get a PONG from the peer. Repeat here too in case we never receive a PONG.\n+    if (node.IsPrivateBroadcastConn() &&\n+        m_tx_for_private_broadcast.BroadcastEnd(nodeid, /*confirmed_by_node=*/false)) {\n+\n+        LogPrintLevel(BCLog::PRIVATE_BROADCAST,\n+                      BCLog::Level::Info,\n+                      \"Never got a PONG (probably the transaction will not \"",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 121,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "fecab592de8d0994e6d61e454e118d652ffd7b93",
      "in_reply_to_id": null,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In fecab592de8d0994e6d61e454e118d652ffd7b93\r\n\r\n```suggestion\r\n                      \"Never got a PONG (the transaction will probably not \"\r\n```",
      "created_at": "2024-05-10T16:23:12Z",
      "updated_at": "2024-05-13T14:57:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1596958082",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1596958082"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1847,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1596988561",
      "pull_request_review_id": 2041604763,
      "id": 1596988561,
      "node_id": "PRRC_kwDOABII585fMByR",
      "diff_hunk": "@@ -26,6 +29,26 @@ class PrivateBroadcast\n public:\n     void Add(const CTransactionRef& tx) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex);\n \n+    /**\n+     * Get the transaction that has been broadcast fewest times and least recently.\n+     */\n+    std::optional<CTransactionRef> GetTxForBroadcast() EXCLUSIVE_LOCKS_REQUIRED(!m_mutex);\n+\n+    /**\n+     * Mark a transaction as pushed to a given node. This is an intermediate state before\n+     * we get a PONG from the node which would confirm that the transaction has been received.\n+     * At the time we get the PONG we need to know which transaction we sent to that node,\n+     * so that we can account how many times we broadcast each transaction.\n+     */\n+    void PushedToNode(const NodeId& nodeid, const Txid& txid) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex);\n+\n+    /**\n+     * Mark the end of a broadcast of a transaction. Either successful by receiving a PONG,\n+     * or unsuccessful by closing the connection to the node without getting PONG.\n+     * @return true if the reference by the given node id was removed\n+     */\n+    bool BroadcastEnd(const NodeId& nodeid, bool confirmed_by_node) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex);",
      "path": "src/private_broadcast.h",
      "position": null,
      "original_position": 39,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "fecab592de8d0994e6d61e454e118d652ffd7b93",
      "in_reply_to_id": null,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In fecab592de8d0994e6d61e454e118d652ffd7b93\r\n\r\n`FinishBroadcast` may sound better",
      "created_at": "2024-05-10T16:49:58Z",
      "updated_at": "2024-05-13T14:57:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1596988561",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1596988561"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 50,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1597007136",
      "pull_request_review_id": 2041604763,
      "id": 1597007136,
      "node_id": "PRRC_kwDOABII585fMGUg",
      "diff_hunk": "@@ -14,10 +15,78 @@ void PrivateBroadcast::Add(const CTransactionRef& tx) EXCLUSIVE_LOCKS_REQUIRED(!\n     }\n }\n \n+std::optional<CTransactionRef> PrivateBroadcast::GetTxForBroadcast() EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+{\n+    LOCK(m_mutex);\n+    if (m_by_priority.empty()) {\n+        return std::nullopt;\n+    }\n+    const Txid& txid = m_by_priority.begin()->second;\n+    auto it = m_by_txid.find(txid);\n+    if (Assume(it != m_by_txid.end())) {\n+        return it->second.tx;\n+    }\n+    m_by_priority.erase(m_by_priority.begin());\n+    return std::nullopt;\n+}\n+\n+void PrivateBroadcast::PushedToNode(const NodeId& nodeid, const Txid& txid) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+{\n+    LOCK(m_mutex);\n+    m_by_nodeid.emplace(nodeid, txid);\n+}\n+\n+bool PrivateBroadcast::BroadcastEnd(const NodeId& nodeid, bool confirmed_by_node) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+{\n+    LOCK(m_mutex);\n+    auto it = m_by_nodeid.find(nodeid);\n+    if (it == m_by_nodeid.end()) {\n+        return false;\n+    }\n+    const Txid txid{it->second};\n+    m_by_nodeid.erase(it);\n+\n+    if (!confirmed_by_node) {\n+        return true;\n+    }\n+\n+    // Update broadcast stats.\n+\n+    auto iters = Find(txid);\n+    if (!iters) {\n+        return true;\n+    }\n+    Priority& priority = iters->by_txid->second.priority;\n+\n+    ++priority.num_broadcasted;\n+    priority.last_broadcasted = GetTime<std::chrono::microseconds>();\n+\n+    m_by_priority.erase(iters->by_priority);\n+    m_by_priority.emplace(priority, iters->by_txid->first);",
      "path": "src/private_broadcast.cpp",
      "position": null,
      "original_position": 59,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "fecab592de8d0994e6d61e454e118d652ffd7b93",
      "in_reply_to_id": null,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In fecab592de8d0994e6d61e454e118d652ffd7b93\r\n\r\nIsn't `iters->by_txid->first` the same as `txid`? It would read way simpler by using the latter",
      "created_at": "2024-05-10T17:08:47Z",
      "updated_at": "2024-05-13T14:57:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1597007136",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1597007136"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 65,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1597010441",
      "pull_request_review_id": 2041604763,
      "id": 1597010441,
      "node_id": "PRRC_kwDOABII585fMHIJ",
      "diff_hunk": "@@ -14,10 +15,78 @@ void PrivateBroadcast::Add(const CTransactionRef& tx) EXCLUSIVE_LOCKS_REQUIRED(!\n     }\n }\n \n+std::optional<CTransactionRef> PrivateBroadcast::GetTxForBroadcast() EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+{\n+    LOCK(m_mutex);\n+    if (m_by_priority.empty()) {\n+        return std::nullopt;\n+    }\n+    const Txid& txid = m_by_priority.begin()->second;\n+    auto it = m_by_txid.find(txid);\n+    if (Assume(it != m_by_txid.end())) {\n+        return it->second.tx;\n+    }\n+    m_by_priority.erase(m_by_priority.begin());\n+    return std::nullopt;\n+}\n+\n+void PrivateBroadcast::PushedToNode(const NodeId& nodeid, const Txid& txid) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+{\n+    LOCK(m_mutex);\n+    m_by_nodeid.emplace(nodeid, txid);\n+}\n+\n+bool PrivateBroadcast::BroadcastEnd(const NodeId& nodeid, bool confirmed_by_node) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+{\n+    LOCK(m_mutex);\n+    auto it = m_by_nodeid.find(nodeid);\n+    if (it == m_by_nodeid.end()) {\n+        return false;\n+    }\n+    const Txid txid{it->second};\n+    m_by_nodeid.erase(it);\n+\n+    if (!confirmed_by_node) {\n+        return true;\n+    }\n+\n+    // Update broadcast stats.\n+\n+    auto iters = Find(txid);\n+    if (!iters) {\n+        return true;\n+    }\n+    Priority& priority = iters->by_txid->second.priority;\n+\n+    ++priority.num_broadcasted;\n+    priority.last_broadcasted = GetTime<std::chrono::microseconds>();\n+\n+    m_by_priority.erase(iters->by_priority);\n+    m_by_priority.emplace(priority, iters->by_txid->first);",
      "path": "src/private_broadcast.cpp",
      "position": null,
      "original_position": 59,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "fecab592de8d0994e6d61e454e118d652ffd7b93",
      "in_reply_to_id": 1597007136,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Also, excuse my lack of cpp proficiency but, is it necessary to delete and re-add the item? Why is not updating `priority` enough (as done in the above two lines)?",
      "created_at": "2024-05-10T17:11:28Z",
      "updated_at": "2024-05-13T14:57:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1597010441",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1597010441"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 65,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1597146275",
      "pull_request_review_id": 2041604763,
      "id": 1597146275,
      "node_id": "PRRC_kwDOABII585fMoSj",
      "diff_hunk": "@@ -4658,6 +4658,21 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         const uint256& hash = peer->m_wtxid_relay ? wtxid : txid;\n         AddKnownTx(*peer, hash);\n \n+        if (auto num_broadcasted = m_tx_for_private_broadcast.Remove(ptx)) {\n+            LogPrintLevel(BCLog::PRIVATE_BROADCAST,\n+                          BCLog::Level::Info,\n+                          \"Received our privately broadcast transaction (txid=%s) from the \"\n+                          \"network from peer=%d%s; stopping private broadcast attempts\\n\",\n+                          txid.ToString(),\n+                          pfrom.GetId(),\n+                          fLogIPs ? strprintf(\", peeraddr=%s\", pfrom.addr.ToStringAddrPort()) : \"\");\n+            if (NUM_PRIVATE_BROADCAST_PER_TX > num_broadcasted.value()) {\n+                // Not all of the initial NUM_PRIVATE_BROADCAST_PER_TX connections were needed.\n+                // Tell CConnman it does not need to start the remaining ones.\n+                m_connman.PrivateBroadcastSub(NUM_PRIVATE_BROADCAST_PER_TX - num_broadcasted.value());",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 15,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "bb697ba5f51f5e31ec472f32682fbb6eb692fa37",
      "in_reply_to_id": null,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In bb697ba5f51f5e31ec472f32682fbb6eb692fa37\r\n\r\nAFAICT this is the only use of `CConnman::PrivateBroadcastSub`, meaning we should be able to simplify the method by unconditionally setting `m_private_broadcast_connections_to_open` to 0",
      "created_at": "2024-05-10T19:28:42Z",
      "updated_at": "2024-05-13T14:57:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1597146275",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1597146275"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4768,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598646404",
      "pull_request_review_id": 2052999547,
      "id": 1598646404,
      "node_id": "PRRC_kwDOABII585fSWiE",
      "diff_hunk": "@@ -1498,6 +1514,7 @@ class CConnman\n     int m_max_outbound_block_relay;\n \n     int m_max_addnode{MAX_ADDNODE_CONNECTIONS};\n+    int m_max_private_broadcast{MAX_PRIVATE_BROADCAST_CONNECTIONS};",
      "path": "src/net.h",
      "position": null,
      "original_position": 34,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "0ba30dec085f860c89f4fd8c8a398aa8a13b5ebd",
      "in_reply_to_id": null,
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 0ba30dec085f860c89f4fd8c8a398aa8a13b5ebd \"net: implement opening PRIVATE_BROADCAST connections\": `m_max_private_broadcast` is not used. ",
      "created_at": "2024-05-13T15:12:30Z",
      "updated_at": "2024-05-13T15:12:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1598646404",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598646404"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1517,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1607031740",
      "pull_request_review_id": 2066636300,
      "id": 1607031740,
      "node_id": "PRRC_kwDOABII585fyVu8",
      "diff_hunk": "@@ -71,6 +71,8 @@ static const int MAX_ADDNODE_CONNECTIONS = 8;\n static const int MAX_BLOCK_RELAY_ONLY_CONNECTIONS = 2;\n /** Maximum number of feeler connections */\n static const int MAX_FEELER_CONNECTIONS = 1;\n+/** Maximum number of private broadcast connections */\n+static constexpr size_t MAX_PRIVATE_BROADCAST_CONNECTIONS{64};",
      "path": "src/net.h",
      "position": 5,
      "original_position": 5,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "0ba30dec085f860c89f4fd8c8a398aa8a13b5ebd",
      "in_reply_to_id": 1595556422,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It could be lower. I picked 64 because I imagine somebody submitting 100s or even 1000s of transactions at the same time. Processing those serially would take a lot of time. Would you suggest another number?",
      "created_at": "2024-05-20T17:06:15Z",
      "updated_at": "2024-05-20T17:06:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1607031740",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1607031740"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 75,
      "original_line": 75,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1607790271",
      "pull_request_review_id": 2067774857,
      "id": 1607790271,
      "node_id": "PRRC_kwDOABII585f1O6_",
      "diff_hunk": "@@ -386,6 +386,27 @@ static CAddress GetBindAddress(const Sock& sock)\n     return addr_bind;\n }\n \n+/**\n+ * Check if private broadcast can be done to clearnet peers and if yes via which proxy.\n+ * If private broadcast connections should not be opened to `net`, then this will return an empty optional.\n+ */\n+static std::optional<Proxy> ProxyForClearnetPrivateBroadcast(Network clearnet)\n+{\n+    if (clearnet != NET_IPV4 && clearnet != NET_IPV6) {\n+        return std::nullopt;\n+    }\n+    Proxy tor_proxy;\n+    const std::string onion_arg{gArgs.GetArg(\"-onion\", \"\")};\n+    if (onion_arg != \"\" && onion_arg == \"0\" && GetProxy(NET_ONION, tor_proxy)) {\n+        // Use the Tor proxy (if provided) for private broadcast connections to clearnet peers.\n+        // Note: we check whether -onion is explicitly used because GetProxy(NET_ONION) may",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 17,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "6b4693ee859d6bddf559a0b32749b1dafe015ef4",
      "in_reply_to_id": 1579852847,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Hmm, maybe we can keep track of whether we have successfully managed to connect to at least one `.onion` address via the `-proxy`, then we can assume that is a Tor proxy? How does that sound?",
      "created_at": "2024-05-21T07:35:05Z",
      "updated_at": "2024-05-22T16:26:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1607790271",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1607790271"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 406,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1608069282",
      "pull_request_review_id": 2068227727,
      "id": 1608069282,
      "node_id": "PRRC_kwDOABII585f2TCi",
      "diff_hunk": "@@ -456,14 +477,24 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n \n     for (auto& target_addr: connect_to) {\n         if (target_addr.IsValid()) {\n-            const bool use_proxy{GetProxy(target_addr.GetNetwork(), proxy)};\n+            bool use_proxy{GetProxy(addrConnect.GetNetwork(), proxy)};\n+            if (conn_type == ConnectionType::PRIVATE_BROADCAST) {\n+                const auto proxy_opt{ProxyForClearnetPrivateBroadcast(addrConnect.GetNetwork())};\n+                if (proxy_opt.has_value()) {\n+                    use_proxy = true;\n+                    proxy = proxy_opt.value();\n+                }\n+            }",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 40,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "0ba30dec085f860c89f4fd8c8a398aa8a13b5ebd",
      "in_reply_to_id": 1595772136,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`proxy_opt` exists only inside the `if`. What matters after this `if` are the values of `use_proxy` and `proxy`. I think your suggestion is equivalent to the current code. I.e.\r\n\r\n```\r\nset use_proxy and proxy (normal)\r\nif (special case)\r\n    replace use_proxy and proxy with special values\r\n```\r\nvs\r\n```\r\nif (special case)\r\n    set use_proxy and proxy to special values\r\nelse\r\n    set use_proxy and proxy (normal)\r\n```\r\n\r\nRight?",
      "created_at": "2024-05-21T10:36:27Z",
      "updated_at": "2024-05-21T10:36:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1608069282",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1608069282"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": 480,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 473,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1608108288",
      "pull_request_review_id": 2068279627,
      "id": 1608108288,
      "node_id": "PRRC_kwDOABII585f2ckA",
      "diff_hunk": "@@ -456,14 +477,24 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n \n     for (auto& target_addr: connect_to) {\n         if (target_addr.IsValid()) {\n-            const bool use_proxy{GetProxy(target_addr.GetNetwork(), proxy)};\n+            bool use_proxy{GetProxy(addrConnect.GetNetwork(), proxy)};\n+            if (conn_type == ConnectionType::PRIVATE_BROADCAST) {\n+                const auto proxy_opt{ProxyForClearnetPrivateBroadcast(addrConnect.GetNetwork())};\n+                if (proxy_opt.has_value()) {\n+                    use_proxy = true;\n+                    proxy = proxy_opt.value();\n+                }\n+            }\n             bool proxyConnectionFailed = false;\n \n             if (target_addr.IsI2P() && use_proxy) {\n                 i2p::Connection conn;\n                 bool connected{false};\n \n-                if (m_i2p_sam_session) {\n+                // If an I2P SAM session already exists, normally we would re-use it. But in the case of\n+                // private broadcast we force a new transient session. A Connect() using m_i2p_sam_session\n+                // would use our permanent I2P address as a source address.\n+                if (m_i2p_sam_session && conn_type != ConnectionType::PRIVATE_BROADCAST) {",
      "path": "src/net.cpp",
      "position": 42,
      "original_position": 51,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "0ba30dec085f860c89f4fd8c8a398aa8a13b5ebd",
      "in_reply_to_id": 1595793107,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The transient sessions are not reused. `m_unused_i2p_sessions` description reads:\r\n\r\n> If connecting to a host fails, then the created session is put to this pool for reuse.\r\n\r\nThe code is this:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/a786fd2041913d82ca90b561de309421bd24e41b/src/net.cpp#L472-L480\r\n\r\nI.e. pop/extract a session from `m_unused_i2p_sessions` and if we cannot connect, then we did not use the session and thus put it back to `m_unused_i2p_sessions`.\r\n\r\nDo you think that the description of `m_unused_i2p_sessions` can be improved? Would you suggest an exact wording?",
      "created_at": "2024-05-21T10:47:32Z",
      "updated_at": "2024-05-21T10:47:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1608108288",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1608108288"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 483,
      "original_line": 483,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1608129277",
      "pull_request_review_id": 2068314643,
      "id": 1608129277,
      "node_id": "PRRC_kwDOABII585f2hr9",
      "diff_hunk": "@@ -2605,18 +2721,19 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n         bool fFeeler = false;\n         std::optional<Network> preferred_net;\n \n-        // Determine what type of connection to open. Opening\n-        // BLOCK_RELAY connections to addresses from anchors.dat gets the highest\n-        // priority. Then we open OUTBOUND_FULL_RELAY priority until we\n-        // meet our full-relay capacity. Then we open BLOCK_RELAY connection\n-        // until we hit our block-relay-only peer limit.\n-        // GetTryNewOutboundPeer() gets set when a stale tip is detected, so we\n-        // try opening an additional OUTBOUND_FULL_RELAY connection. If none of\n-        // these conditions are met, check to see if it's time to try an extra\n-        // block-relay-only peer (to confirm our tip is current, see below) or the next_feeler\n-        // timer to decide if we should open a FEELER.\n-\n-        if (!m_anchors.empty() && (nOutboundBlockRelay < m_max_outbound_block_relay)) {\n+        // Determine what type of connection to open, in order of priority:\n+        // * PRIVATE_BROADCAST if needed\n+        // * BLOCK_RELAY connections to addresses from anchors.dat until we reach m_max_outbound_block_relay\n+        // * OUTBOUND_FULL_RELAY until we reach m_max_outbound_full_relay\n+        // * BLOCK_RELAY until we reach m_max_outbound_block_relay\n+        // * OUTBOUND_FULL_RELAY if GetTryNewOutboundPeer() is true (a stale tip is detected)\n+        // * BLOCK_RELAY if it's time to try an extra block-relay-only peer (to confirm our tip is current)\n+        // * FEELER if it's time to try a feeler\n+        // * else retry the loop (sleep a bit and start from the top of this list)\n+\n+        if (open_private_broadcast_to.has_value()) {\n+            conn_type = ConnectionType::PRIVATE_BROADCAST;",
      "path": "src/net.cpp",
      "position": 209,
      "original_position": 205,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "0ba30dec085f860c89f4fd8c8a398aa8a13b5ebd",
      "in_reply_to_id": 1595819770,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "A few considerations:\r\n\r\n* Private broadcast connections are not blocked on the `semOutbound` grant. They come to this code right away.\r\n\r\n* Even if there is a high demand for private broadcast connections, we would try to open such ones only half of the time in `CConnman::ThreadOpenConnections()` to avoid such starvation of only opening private broadcast and not others for a long time (see how `MaybePickPrivateBroadcastNetwork()` yields to other connection types if we previously opened a private broadcast one).\r\n\r\n* Non-`BLOCK_RELAY` connections keep us up to date as well (with new blocks). I.e blocks could come via inbound, full-outbound, etc.\r\n\r\nGiven the above, I think the current code does not need to be changed.",
      "created_at": "2024-05-21T11:02:10Z",
      "updated_at": "2024-05-21T11:02:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1608129277",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1608129277"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": 2658,
      "original_start_line": 2734,
      "start_side": "RIGHT",
      "line": 2659,
      "original_line": 2659,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1608172001",
      "pull_request_review_id": 2068383787,
      "id": 1608172001,
      "node_id": "PRRC_kwDOABII585f2sHh",
      "diff_hunk": "@@ -2452,6 +2483,72 @@ bool CConnman::MaybePickPreferredNetwork(std::optional<Network>& network)\n     return false;\n }\n \n+/**\n+ * Decide whether to open a private broadcast connection and if yes, to which network.\n+ * @param[in] prev_was_private_broadcast Whether the previous attempt to open a connection\n+ * was an attempt to open a private broadcast connection (successful or not).\n+ * @param[in] num_needed Number of private broadcast connections that need to be opened.",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 63,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "0ba30dec085f860c89f4fd8c8a398aa8a13b5ebd",
      "in_reply_to_id": 1595875212,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added this sentence: \"We try to open a connection of this type only if there are transactions pending, but up to a limit.\"",
      "created_at": "2024-05-21T11:38:42Z",
      "updated_at": "2024-05-21T11:38:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1608172001",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1608172001"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2497,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1608174270",
      "pull_request_review_id": 2068387303,
      "id": 1608174270,
      "node_id": "PRRC_kwDOABII585f2sq-",
      "diff_hunk": "@@ -179,6 +180,9 @@ static constexpr size_t MAX_ADDR_PROCESSING_TOKEN_BUCKET{MAX_ADDR_TO_SEND};\n /** The compactblocks version we support. See BIP 152. */\n static constexpr uint64_t CMPCTBLOCKS_VERSION{2};\n ",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 11,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "434a20371e441660147da6d0c6c1832cb0d0073b",
      "in_reply_to_id": 1596830944,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Removed.",
      "created_at": "2024-05-21T11:40:32Z",
      "updated_at": "2024-05-21T11:40:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1608174270",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1608174270"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 182,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1608176500",
      "pull_request_review_id": 2068391038,
      "id": 1608176500,
      "node_id": "PRRC_kwDOABII585f2tN0",
      "diff_hunk": "@@ -179,6 +180,9 @@ static constexpr size_t MAX_ADDR_PROCESSING_TOKEN_BUCKET{MAX_ADDR_TO_SEND};\n /** The compactblocks version we support. See BIP 152. */\n static constexpr uint64_t CMPCTBLOCKS_VERSION{2};\n \n+/** For private broadcast, send a transaction to this many peers per one broadcast attempt. */",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 12,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "434a20371e441660147da6d0c6c1832cb0d0073b",
      "in_reply_to_id": 1596831509,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2024-05-21T11:42:27Z",
      "updated_at": "2024-05-21T11:42:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1608176500",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1608176500"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 183,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1608179155",
      "pull_request_review_id": 2068395273,
      "id": 1608179155,
      "node_id": "PRRC_kwDOABII585f2t3T",
      "diff_hunk": "@@ -1175,6 +1180,8 @@ class PeerManagerImpl final : public PeerManager\n \n     void AddAddressKnown(Peer& peer, const CAddress& addr) EXCLUSIVE_LOCKS_REQUIRED(g_msgproc_mutex);\n     void PushAddress(Peer& peer, const CAddress& addr) EXCLUSIVE_LOCKS_REQUIRED(g_msgproc_mutex);\n+",
      "path": "src/net_processing.cpp",
      "position": 67,
      "original_position": 30,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "434a20371e441660147da6d0c6c1832cb0d0073b",
      "in_reply_to_id": 1596833034,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added \"A list of transactions to be broadcast privately.\"",
      "created_at": "2024-05-21T11:44:38Z",
      "updated_at": "2024-05-21T11:44:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1608179155",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1608179155"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1189,
      "original_line": 1189,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1608182222",
      "pull_request_review_id": 2068400075,
      "id": 1608182222,
      "node_id": "PRRC_kwDOABII585f2unO",
      "diff_hunk": "@@ -2341,6 +2348,19 @@ void PeerManagerImpl::ScheduleTxForBroadcastToAll(const uint256& txid, const uin\n     };\n }\n \n+void PeerManagerImpl::ScheduleTxForPrivateBroadcast(const CTransactionRef& tx)\n+{\n+    m_tx_for_private_broadcast.Add(tx);\n+\n+    LogPrintLevel(BCLog::PRIVATE_BROADCAST,\n+                  BCLog::Level::Debug,\n+                  \"Requesting %d new connections due to txid=%s, wtxid=%s\\n\",",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 45,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "434a20371e441660147da6d0c6c1832cb0d0073b",
      "in_reply_to_id": 1596835091,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "\"due to\" = \"because of\" = \"because there is a new transaction for broadcast - txid=...\". I am open to suggestions for better wording.",
      "created_at": "2024-05-21T11:47:09Z",
      "updated_at": "2024-05-21T11:47:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1608182222",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1608182222"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2459,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1608191485",
      "pull_request_review_id": 2068414399,
      "id": 1608191485,
      "node_id": "PRRC_kwDOABII585f2w39",
      "diff_hunk": "@@ -0,0 +1,55 @@\n+// Copyright (c) 2023-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or https://opensource.org/license/mit/.\n+\n+#ifndef BITCOIN_PRIVATE_BROADCAST_H\n+#define BITCOIN_PRIVATE_BROADCAST_H\n+\n+#include <primitives/transaction.h>\n+#include <sync.h>\n+#include <threadsafety.h>\n+#include <util/hasher.h>\n+\n+#include <chrono>\n+#include <map>\n+#include <unordered_map>\n+\n+/**\n+ * Store a list of transactions to be broadcast privately. Supports the following operations:\n+ * - Add a new transaction\n+ * - Remove a transaction, after it has been seen by the network\n+ * - Mark a broadcast of a transaction (remember when and how many times)\n+ * - Get a transaction for broadcast, the one that has been broadcast fewer times and least recently",
      "path": "src/private_broadcast.h",
      "position": 26,
      "original_position": 22,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "434a20371e441660147da6d0c6c1832cb0d0073b",
      "in_reply_to_id": 1596842874,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Right! Moved to the corresponding commits.",
      "created_at": "2024-05-21T11:54:33Z",
      "updated_at": "2024-05-21T11:54:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1608191485",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1608191485"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": 24,
      "original_start_line": 20,
      "start_side": "RIGHT",
      "line": 26,
      "original_line": 26,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1608192497",
      "pull_request_review_id": 2068415979,
      "id": 1608192497,
      "node_id": "PRRC_kwDOABII585f2xHx",
      "diff_hunk": "@@ -0,0 +1,23 @@\n+// Copyright (c) 2023-present The Bitcoin Core developers",
      "path": "src/private_broadcast.cpp",
      "position": 1,
      "original_position": 1,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "434a20371e441660147da6d0c6c1832cb0d0073b",
      "in_reply_to_id": 1596847026,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Some of the code was written in 2023",
      "created_at": "2024-05-21T11:55:20Z",
      "updated_at": "2024-05-21T11:55:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1608192497",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1608192497"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1608193117",
      "pull_request_review_id": 2068416937,
      "id": 1608193117,
      "node_id": "PRRC_kwDOABII585f2xRd",
      "diff_hunk": "@@ -0,0 +1,55 @@\n+// Copyright (c) 2023-present The Bitcoin Core developers",
      "path": "src/private_broadcast.h",
      "position": 1,
      "original_position": 1,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "434a20371e441660147da6d0c6c1832cb0d0073b",
      "in_reply_to_id": 1596847172,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Same, some of the code was written in 2023",
      "created_at": "2024-05-21T11:55:49Z",
      "updated_at": "2024-05-21T11:55:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1608193117",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1608193117"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1608200672",
      "pull_request_review_id": 2068429816,
      "id": 1608200672,
      "node_id": "PRRC_kwDOABII585f2zHg",
      "diff_hunk": "@@ -1622,26 +1630,66 @@ void PeerManagerImpl::FindNextBlocks(std::vector<const CBlockIndex*>& vBlocks, c\n \n void PeerManagerImpl::PushNodeVersion(CNode& pnode, const Peer& peer)\n {\n-    uint64_t my_services{peer.m_our_services};\n-    const int64_t nTime{count_seconds(GetTime<std::chrono::seconds>())};\n-    uint64_t nonce = pnode.GetLocalNonce();\n-    const int nNodeStartingHeight{m_best_height};\n-    NodeId nodeid = pnode.GetId();\n-    CAddress addr = pnode.addr;\n-\n-    CService addr_you = addr.IsRoutable() && !IsProxy(addr) && addr.IsAddrV1Compatible() ? addr : CService();\n-    uint64_t your_services{addr.nServices};\n-\n-    const bool tx_relay{!RejectIncomingTxs(pnode)};\n-    MakeAndPushMessage(pnode, NetMsgType::VERSION, PROTOCOL_VERSION, my_services, nTime,\n-            your_services, CNetAddr::V1(addr_you), // Together the pre-version-31402 serialization of CAddress \"addrYou\" (without nTime)\n-            my_services, CNetAddr::V1(CService{}), // Together the pre-version-31402 serialization of CAddress \"addrMe\" (without nTime)\n-            nonce, strSubVersion, nNodeStartingHeight, tx_relay);\n-\n+    uint64_t my_services;\n+    int64_t my_time;\n+    uint64_t your_services;\n+    CService your_addr;\n+    std::string my_user_agent;\n+    int my_height;\n+    bool my_tx_relay;",
      "path": "src/net_processing.cpp",
      "position": 99,
      "original_position": 52,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "fecab592de8d0994e6d61e454e118d652ffd7b93",
      "in_reply_to_id": 1596947249,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I prefixed everything with `my_` or `your_` because otherwise it is unclear whether it is mine or yours. Deducting that without my/yours prefix requires an extra effort.",
      "created_at": "2024-05-21T12:00:52Z",
      "updated_at": "2024-05-21T12:00:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1608200672",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1608200672"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": 1636,
      "original_start_line": 1637,
      "start_side": "RIGHT",
      "line": 1638,
      "original_line": 1638,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1608216424",
      "pull_request_review_id": 2068456409,
      "id": 1608216424,
      "node_id": "PRRC_kwDOABII585f229o",
      "diff_hunk": "@@ -5155,6 +5282,17 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n                     if (ping_time.count() >= 0) {\n                         // Let connman know about this successful ping-pong\n                         pfrom.PongReceived(ping_time);\n+                        if (pfrom.IsPrivateBroadcastConn()) {\n+                            m_tx_for_private_broadcast.BroadcastEnd(pfrom.GetId(), /*confirmed_by_node=*/true);\n+                            LogPrintLevel(\n+                                BCLog::PRIVATE_BROADCAST,\n+                                BCLog::Level::Info,\n+                                \"Got a PONG (probably the transaction will reach the network), \"",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 243,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "fecab592de8d0994e6d61e454e118d652ffd7b93",
      "in_reply_to_id": 1596957262,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2024-05-21T12:09:01Z",
      "updated_at": "2024-05-21T12:09:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1608216424",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1608216424"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5290,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1608216576",
      "pull_request_review_id": 2068456627,
      "id": 1608216576,
      "node_id": "PRRC_kwDOABII585f23AA",
      "diff_hunk": "@@ -1790,6 +1838,17 @@ void PeerManagerImpl::FinalizeNode(const CNode& node)\n         LOCK(m_headers_presync_mutex);\n         m_headers_presync_stats.erase(nodeid);\n     }\n+    // This is done when we get a PONG from the peer. Repeat here too in case we never receive a PONG.\n+    if (node.IsPrivateBroadcastConn() &&\n+        m_tx_for_private_broadcast.BroadcastEnd(nodeid, /*confirmed_by_node=*/false)) {\n+\n+        LogPrintLevel(BCLog::PRIVATE_BROADCAST,\n+                      BCLog::Level::Info,\n+                      \"Never got a PONG (probably the transaction will not \"",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 121,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "fecab592de8d0994e6d61e454e118d652ffd7b93",
      "in_reply_to_id": 1596958082,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2024-05-21T12:09:08Z",
      "updated_at": "2024-05-21T12:09:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1608216576",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1608216576"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1847,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1608218540",
      "pull_request_review_id": 2068459695,
      "id": 1608218540,
      "node_id": "PRRC_kwDOABII585f23es",
      "diff_hunk": "@@ -26,6 +29,26 @@ class PrivateBroadcast\n public:\n     void Add(const CTransactionRef& tx) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex);\n \n+    /**\n+     * Get the transaction that has been broadcast fewest times and least recently.\n+     */\n+    std::optional<CTransactionRef> GetTxForBroadcast() EXCLUSIVE_LOCKS_REQUIRED(!m_mutex);\n+\n+    /**\n+     * Mark a transaction as pushed to a given node. This is an intermediate state before\n+     * we get a PONG from the node which would confirm that the transaction has been received.\n+     * At the time we get the PONG we need to know which transaction we sent to that node,\n+     * so that we can account how many times we broadcast each transaction.\n+     */\n+    void PushedToNode(const NodeId& nodeid, const Txid& txid) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex);\n+\n+    /**\n+     * Mark the end of a broadcast of a transaction. Either successful by receiving a PONG,\n+     * or unsuccessful by closing the connection to the node without getting PONG.\n+     * @return true if the reference by the given node id was removed\n+     */\n+    bool BroadcastEnd(const NodeId& nodeid, bool confirmed_by_node) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex);",
      "path": "src/private_broadcast.h",
      "position": null,
      "original_position": 39,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "fecab592de8d0994e6d61e454e118d652ffd7b93",
      "in_reply_to_id": 1596988561,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Renamed to `FinishBroadcast()`.",
      "created_at": "2024-05-21T12:10:39Z",
      "updated_at": "2024-05-21T12:10:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1608218540",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1608218540"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 50,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1608255803",
      "pull_request_review_id": 2068518702,
      "id": 1608255803,
      "node_id": "PRRC_kwDOABII585f3Ak7",
      "diff_hunk": "@@ -14,10 +15,78 @@ void PrivateBroadcast::Add(const CTransactionRef& tx) EXCLUSIVE_LOCKS_REQUIRED(!\n     }\n }\n \n+std::optional<CTransactionRef> PrivateBroadcast::GetTxForBroadcast() EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+{\n+    LOCK(m_mutex);\n+    if (m_by_priority.empty()) {\n+        return std::nullopt;\n+    }\n+    const Txid& txid = m_by_priority.begin()->second;\n+    auto it = m_by_txid.find(txid);\n+    if (Assume(it != m_by_txid.end())) {\n+        return it->second.tx;\n+    }\n+    m_by_priority.erase(m_by_priority.begin());\n+    return std::nullopt;\n+}\n+\n+void PrivateBroadcast::PushedToNode(const NodeId& nodeid, const Txid& txid) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+{\n+    LOCK(m_mutex);\n+    m_by_nodeid.emplace(nodeid, txid);\n+}\n+\n+bool PrivateBroadcast::BroadcastEnd(const NodeId& nodeid, bool confirmed_by_node) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+{\n+    LOCK(m_mutex);\n+    auto it = m_by_nodeid.find(nodeid);\n+    if (it == m_by_nodeid.end()) {\n+        return false;\n+    }\n+    const Txid txid{it->second};\n+    m_by_nodeid.erase(it);\n+\n+    if (!confirmed_by_node) {\n+        return true;\n+    }\n+\n+    // Update broadcast stats.\n+\n+    auto iters = Find(txid);\n+    if (!iters) {\n+        return true;\n+    }\n+    Priority& priority = iters->by_txid->second.priority;\n+\n+    ++priority.num_broadcasted;\n+    priority.last_broadcasted = GetTime<std::chrono::microseconds>();\n+\n+    m_by_priority.erase(iters->by_priority);\n+    m_by_priority.emplace(priority, iters->by_txid->first);",
      "path": "src/private_broadcast.cpp",
      "position": null,
      "original_position": 59,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "fecab592de8d0994e6d61e454e118d652ffd7b93",
      "in_reply_to_id": 1597007136,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, `iters->by_txid->first` is the same as `txid`, changed it to use `txid` which is shorter.\r\n\r\nIt is necessary to remove and re-add because we have changed the key and C++ maps do not support modifying of the keys. That is, changing the key means that the entry will have to be in another place in the map, so it has to be removed from the old place and added to the new one.",
      "created_at": "2024-05-21T12:38:43Z",
      "updated_at": "2024-05-21T12:38:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1608255803",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1608255803"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 65,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1608284734",
      "pull_request_review_id": 2068564986,
      "id": 1608284734,
      "node_id": "PRRC_kwDOABII585f3Ho-",
      "diff_hunk": "@@ -4658,6 +4658,21 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         const uint256& hash = peer->m_wtxid_relay ? wtxid : txid;\n         AddKnownTx(*peer, hash);\n \n+        if (auto num_broadcasted = m_tx_for_private_broadcast.Remove(ptx)) {\n+            LogPrintLevel(BCLog::PRIVATE_BROADCAST,\n+                          BCLog::Level::Info,\n+                          \"Received our privately broadcast transaction (txid=%s) from the \"\n+                          \"network from peer=%d%s; stopping private broadcast attempts\\n\",\n+                          txid.ToString(),\n+                          pfrom.GetId(),\n+                          fLogIPs ? strprintf(\", peeraddr=%s\", pfrom.addr.ToStringAddrPort()) : \"\");\n+            if (NUM_PRIVATE_BROADCAST_PER_TX > num_broadcasted.value()) {\n+                // Not all of the initial NUM_PRIVATE_BROADCAST_PER_TX connections were needed.\n+                // Tell CConnman it does not need to start the remaining ones.\n+                m_connman.PrivateBroadcastSub(NUM_PRIVATE_BROADCAST_PER_TX - num_broadcasted.value());",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 15,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "bb697ba5f51f5e31ec472f32682fbb6eb692fa37",
      "in_reply_to_id": 1597146275,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, if there is only one transaction submitted for broadcast. But if there is more than one, then `m_private_broadcast_connections_to_open` should not be set to `0`.\r\n\r\nFor example:\r\n* 3 transactions are submitted at approximately the same time: tx1, tx2, tx3.\r\n* NUM_PRIVATE_BROADCAST_PER_TX=5 for each one, so `m_private_broadcast_connections_to_open` is set to 15.\r\n* tx1 is broadcast 2 times, tx2 once and tx3 once, `m_private_broadcast_connections_to_open` is now 15-2-1-1=11.\r\n* tx1 is received back from the network. We come to this code and see that tx1 has been broadcast two times and deduce that the other 5-2=3 we created are not needed and call `PrivateBroadcastSub(3)`. `m_private_broadcast_connections_to_open` should be set to 11-3=8 (4 for tx2 and 4 for tx3), not 0.",
      "created_at": "2024-05-21T12:58:14Z",
      "updated_at": "2024-05-21T12:58:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1608284734",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1608284734"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4768,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1608293544",
      "pull_request_review_id": 2068579532,
      "id": 1608293544,
      "node_id": "PRRC_kwDOABII585f3Jyo",
      "diff_hunk": "@@ -1498,6 +1514,7 @@ class CConnman\n     int m_max_outbound_block_relay;\n \n     int m_max_addnode{MAX_ADDNODE_CONNECTIONS};\n+    int m_max_private_broadcast{MAX_PRIVATE_BROADCAST_CONNECTIONS};",
      "path": "src/net.h",
      "position": null,
      "original_position": 34,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "0ba30dec085f860c89f4fd8c8a398aa8a13b5ebd",
      "in_reply_to_id": 1598646404,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Right! Removed.",
      "created_at": "2024-05-21T13:04:18Z",
      "updated_at": "2024-05-21T13:04:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1608293544",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1608293544"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1517,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1608306032",
      "pull_request_review_id": 2068601743,
      "id": 1608306032,
      "node_id": "PRRC_kwDOABII585f3M1w",
      "diff_hunk": "@@ -655,11 +656,12 @@ class NetinfoRequestHandler : public BaseRequestHandler\n         \"           \\\"in\\\"  - inbound connections are those initiated by the peer\\n\"\n         \"           \\\"out\\\" - outbound connections are those initiated by us\\n\"\n         \"  type     Type of peer connection\\n\"\n-        \"           \\\"full\\\"   - full relay, the default\\n\"\n-        \"           \\\"block\\\"  - block relay; like full relay but does not relay transactions or addresses\\n\"\n-        \"           \\\"manual\\\" - peer we manually added using RPC addnode or the -addnode/-connect config options\\n\"\n-        \"           \\\"feeler\\\" - short-lived connection for testing addresses\\n\"\n-        \"           \\\"addr\\\"   - address fetch; short-lived connection for requesting addresses\\n\"\n+        \"           \\\"full\\\"      - full relay, the default\\n\"\n+        \"           \\\"block\\\"     - block relay; like full relay but does not relay transactions or addresses\\n\"\n+        \"           \\\"manual\\\"    - peer we manually added using RPC addnode or the -addnode/-connect config options\\n\"\n+        \"           \\\"feeler\\\"    - short-lived connection for testing addresses\\n\"\n+        \"           \\\"addr\\\"      - address fetch; short-lived connection for requesting addresses\\n\"\n+        \"           \\\"privat\\\"    - private broadcast; short-lived connection for broadcasting our transactions\\n\"",
      "path": "src/bitcoin-cli.cpp",
      "position": 22,
      "original_position": 22,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "c7e4d5cb2bf01d9719702e71c8d6264ee670e988",
      "in_reply_to_id": 1545397035,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Changed to `\"priv\"`.",
      "created_at": "2024-05-21T13:08:28Z",
      "updated_at": "2024-05-21T13:08:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1608306032",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1608306032"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 663,
      "original_line": 663,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1608308448",
      "pull_request_review_id": 2068605490,
      "id": 1608308448,
      "node_id": "PRRC_kwDOABII585f3Nbg",
      "diff_hunk": "@@ -386,6 +386,27 @@ static CAddress GetBindAddress(const Sock& sock)\n     return addr_bind;\n }\n \n+/**\n+ * Check if private broadcast can be done to clearnet peers and if yes via which proxy.",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "0ba30dec085f860c89f4fd8c8a398aa8a13b5ebd",
      "in_reply_to_id": 1595748248,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2024-05-21T13:09:50Z",
      "updated_at": "2024-05-21T13:09:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1608308448",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1608308448"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 390,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1608310055",
      "pull_request_review_id": 2068608035,
      "id": 1608310055,
      "node_id": "PRRC_kwDOABII585f3N0n",
      "diff_hunk": "@@ -386,6 +386,27 @@ static CAddress GetBindAddress(const Sock& sock)\n     return addr_bind;\n }\n \n+/**\n+ * Check if private broadcast can be done to clearnet peers and if yes via which proxy.\n+ * If private broadcast connections should not be opened to `net`, then this will return an empty optional.\n+ */\n+static std::optional<Proxy> ProxyForClearnetPrivateBroadcast(Network clearnet)",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 8,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "0ba30dec085f860c89f4fd8c8a398aa8a13b5ebd",
      "in_reply_to_id": 1595750204,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I removed the argument to this function and renamed it to `ProxyForIPv4or6PrivateBroadcast()`. It is a bit more simpler now.",
      "created_at": "2024-05-21T13:10:56Z",
      "updated_at": "2024-05-21T13:10:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1608310055",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1608310055"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 393,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1608327017",
      "pull_request_review_id": 2068635557,
      "id": 1608327017,
      "node_id": "PRRC_kwDOABII585f3R9p",
      "diff_hunk": "@@ -1547,6 +1577,12 @@ class CConnman\n      */\n     std::atomic_bool m_start_extra_block_relay_peers{false};\n \n+    /**\n+     * Number of `ConnectionType::PRIVATE_BROADCAST` connections to open.\n+     * Whenever such a connection is opened this is decremented with 1.\n+     */\n+    std::atomic_size_t m_private_broadcast_connections_to_open{0};",
      "path": "src/net.h",
      "position": null,
      "original_position": 87,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "e85cc59badd357219213a6bda985a9fd93910a5c",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "_from the main thread at https://github.com/bitcoin/bitcoin/pull/29415#pullrequestreview-2041604763_\r\n\r\n> The main thing I'm wondering currently is why are we tacking `m_private_broadcast_connections_to_open` loosely? It feels harder to reason about, but I don't see what the benefit of it is.\r\n\r\nThe reason for this is that it is simpler to implement that way (I think, somebody has a simpler proposal?). This is because the connman thread is creating the connections, they are consumed/used by the peerman thread and the requests for new connections can come from yet another (3rd) thread. For example, while connman is creating a new connection which is needed to broadcast a given transaction, that transaction may be successfully broadcast by peerman and received back from the network, rendering the just created new connection by connman unnecessary. This is harmless and I accept it because avoiding it would make things too complicated or slow.\r\n",
      "created_at": "2024-05-21T13:21:58Z",
      "updated_at": "2024-05-21T13:21:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1608327017",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1608327017"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1584,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1610296362",
      "pull_request_review_id": 2071772676,
      "id": 1610296362,
      "node_id": "PRRC_kwDOABII585f-ywq",
      "diff_hunk": "@@ -386,6 +386,27 @@ static CAddress GetBindAddress(const Sock& sock)\n     return addr_bind;\n }\n \n+/**\n+ * Check if private broadcast can be done to clearnet peers and if yes via which proxy.\n+ * If private broadcast connections should not be opened to `net`, then this will return an empty optional.\n+ */\n+static std::optional<Proxy> ProxyForClearnetPrivateBroadcast(Network clearnet)\n+{\n+    if (clearnet != NET_IPV4 && clearnet != NET_IPV6) {\n+        return std::nullopt;\n+    }\n+    Proxy tor_proxy;\n+    const std::string onion_arg{gArgs.GetArg(\"-onion\", \"\")};\n+    if (onion_arg != \"\" && onion_arg == \"0\" && GetProxy(NET_ONION, tor_proxy)) {\n+        // Use the Tor proxy (if provided) for private broadcast connections to clearnet peers.\n+        // Note: we check whether -onion is explicitly used because GetProxy(NET_ONION) may",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 17,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "6b4693ee859d6bddf559a0b32749b1dafe015ef4",
      "in_reply_to_id": 1579852847,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> > Is there no better way of checking whether `-proxy` is an actual Tor proxy or just a regular SOCKS5 proxy?\r\n\r\n> maybe we can keep track of whether we have successfully managed to connect to at least one `.onion` address\r\n\r\nDone in `e85cc59bad...057c79365c`, see https://github.com/bitcoin/bitcoin/pull/29415#issuecomment-2125213533, also dropped the change in `tor.md` because that is not needed anymore.\r\n\r\nLooks better now, thank you!",
      "created_at": "2024-05-22T16:26:14Z",
      "updated_at": "2024-05-22T16:26:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1610296362",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1610296362"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 406,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1655262092",
      "pull_request_review_id": 2142526715,
      "id": 1655262092,
      "node_id": "PRRC_kwDOABII585iqUuM",
      "diff_hunk": "@@ -120,6 +120,12 @@ bool WalletInit::ParameterInteraction() const\n         LogPrintf(\"%s: parameter interaction: -blocksonly=1 -> setting -walletbroadcast=0\\n\", __func__);\n     }\n \n+    if (gArgs.GetBoolArg(\"-privatebroadcast\", DEFAULT_PRIVATE_BROADCAST) &&",
      "path": "src/wallet/init.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "1407b3fa264b096813281a767da3cd3ca80ed096",
      "in_reply_to_id": 1578537557,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I wonder if the option should be renamed `-privaterpcbroadcast` for now, and we can add `-privatewalletbroadcast` later. \r\n\r\nWe also won't be able to prevent users from using their wallet with `sendrawtransaction` anyway. So if the goal here is to prevent accidental privacy leaks from confused users, we might want to consider \"hiding\" the option or restricting it to test networks until wallet integration is complete.",
      "created_at": "2024-06-26T17:19:52Z",
      "updated_at": "2024-06-26T17:19:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1655262092",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1655262092"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 122,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1655351745",
      "pull_request_review_id": 2142672720,
      "id": 1655351745,
      "node_id": "PRRC_kwDOABII585iqqnB",
      "diff_hunk": "@@ -1127,6 +1129,71 @@ class CConnman\n     bool GetUseAddrmanOutgoing() const { return m_use_addrman_outgoing; };\n     void SetNetworkActive(bool active);\n     void OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant&& grant_outbound, const char* strDest, ConnectionType conn_type, bool use_v2transport) EXCLUSIVE_LOCKS_REQUIRED(!m_unused_i2p_sessions_mutex);\n+\n+    /// Group of private broadcast related members.\n+    class PrivateBroadcast\n+    {\n+    public:\n+        /**\n+         * Remember if we ever established at least one outbound connection to a\n+         * Tor peer, including sending and receiving P2P messages. If this is\n+         * true then the Tor proxy indeed works and is a proxy to the Tor network,\n+         * not a misconfigured ordinary SOCKS5 proxy as -proxy or -onion. If that\n+         * is the case, then we assume that connecting to an IPv4 or IPv6 address\n+         * via that proxy will be done trough the Tor network and a Tor exit node.\n+         */\n+        std::atomic_bool m_outbound_tor_ok_at_least_once{false};\n+\n+        /**\n+         * Check if private broadcast can be done to IPv4 or IPv6 peers and if so via which proxy.\n+         * If private broadcast connections should not be opened to IPv4 or IPv6, then this will\n+         * return an empty optional.\n+         */\n+        std::optional<Proxy> ProxyForIPv4or6() const;\n+\n+        /**\n+         * Decide whether to open a private broadcast connection and if yes, to which network.\n+         * We try to open a connection of this type only if there are transactions pending, but\n+         * up to a limit.\n+         * @param[in] prev_was_private_broadcast Whether the previous attempt to open a connection\n+         * was an attempt to open a private broadcast connection (successful or not).\n+         * @param[in] num_opened Number of private broadcast connections that are currently opened.\n+         * @retval !std::nullopt The network to which to open the private broadcast connection.\n+         * @retval std::nullopt Open any other connection (non-private broadcast).\n+         */\n+        std::optional<Network>\n+        ShouldOpen(bool prev_was_private_broadcast, size_t num_opened) const;\n+\n+        /**\n+         * Decrement by `n` the number of new connections of type `ConnectionType::PRIVATE_BROADCAST`\n+         * to be opened by `CConnman::ThreadOpenConnections()`. Will not go negative, for example a\n+         * value of 4 is ok to be decremented by 5 and will result in 0.\n+         * @return the value preceding this operation\n+         */\n+        size_t NumToOpen() const;",
      "path": "src/net.h",
      "position": null,
      "original_position": 54,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "ba75010289f1d9bd3d3a6c635ad18b07cf914041",
      "in_reply_to_id": null,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "ba75010289f1d9bd3d3a6c635ad18b07cf914041\r\n\r\nThis is copy/paste the comment for `NumToOpenSub()` but doesn't apply to this get-only method.\r\n\r\nAlso, the comments for the two following functions are missing `@param[in] n ...` but I don't know how strict you need to be about doxygen comments for everything.",
      "created_at": "2024-06-26T18:31:39Z",
      "updated_at": "2024-06-26T19:49:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1655351745",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1655351745"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": 1167,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1169,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1655358621",
      "pull_request_review_id": 2142672720,
      "id": 1655358621,
      "node_id": "PRRC_kwDOABII585iqsSd",
      "diff_hunk": "@@ -2932,6 +2974,117 @@ void CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFai\n     }\n }\n \n+std::optional<Proxy> CConnman::PrivateBroadcast::ProxyForIPv4or6() const\n+{\n+    if (!m_outbound_tor_ok_at_least_once.load()) {\n+        return std::nullopt;\n+    }\n+    Proxy tor_proxy;\n+    Assume(GetProxy(NET_ONION, tor_proxy));\n+    return tor_proxy;\n+}\n+\n+std::optional<Network>\n+CConnman::PrivateBroadcast::ShouldOpen(bool prev_was_private_broadcast, size_t num_opened) const\n+{\n+    if (prev_was_private_broadcast) {\n+        // Yield to other connection types.\n+        return std::nullopt;\n+    }",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 157,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "ba75010289f1d9bd3d3a6c635ad18b07cf914041",
      "in_reply_to_id": null,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "ba75010289f1d9bd3d3a6c635ad18b07cf914041\r\n\r\nWhy pass this in here instead of just checking it before calling?",
      "created_at": "2024-06-26T18:37:50Z",
      "updated_at": "2024-06-26T19:49:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1655358621",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1655358621"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": 2990,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 3002,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1655402373",
      "pull_request_review_id": 2142672720,
      "id": 1655402373,
      "node_id": "PRRC_kwDOABII585iq2-F",
      "diff_hunk": "@@ -0,0 +1,52 @@\n+// Copyright (c) 2023-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or https://opensource.org/license/mit/.\n+\n+#ifndef BITCOIN_PRIVATE_BROADCAST_H\n+#define BITCOIN_PRIVATE_BROADCAST_H\n+\n+#include <primitives/transaction.h>\n+#include <sync.h>\n+#include <threadsafety.h>\n+#include <util/hasher.h>\n+\n+#include <chrono>\n+#include <map>\n+#include <unordered_map>\n+\n+/**\n+ * Store a list of transactions to be broadcast privately. Supports the following operations:",
      "path": "src/private_broadcast.h",
      "position": 22,
      "original_position": 18,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "cade8e833197a202dbb03c50359396ecd437ac8c",
      "in_reply_to_id": null,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "cade8e833197a202dbb03c50359396ecd437ac8c\r\n\r\n~optional, could use a comment explaining the priority metric. Looks like transactions with fewer broadcasts or older broadcasts are prioritized. A unit test would help make that clear as well.~\r\n\r\nnm, added later",
      "created_at": "2024-06-26T19:15:32Z",
      "updated_at": "2024-06-26T19:50:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1655402373",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1655402373"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 22,
      "original_line": 22,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1655423362",
      "pull_request_review_id": 2142672720,
      "id": 1655423362,
      "node_id": "PRRC_kwDOABII585iq8GC",
      "diff_hunk": "@@ -4133,6 +4248,18 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         return;\n     }\n \n+    if (pfrom.IsPrivateBroadcastConn()) {\n+        if (msg_type != NetMsgType::PONG) {\n+            LogPrintLevel(BCLog::PRIVATE_BROADCAST,\n+                          BCLog::Level::Debug,\n+                          \"Ignoring incoming message '%s', peer=%d%s\\n\",\n+                          msg_type,\n+                          pfrom.GetId(),\n+                          fLogIPs ? strprintf(\", peeraddr=%s\", pfrom.addr.ToStringAddrPort()) : \"\");\n+            return;\n+        }\n+    }\n+",
      "path": "src/net_processing.cpp",
      "position": 514,
      "original_position": 230,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "b81c3cc19ec8055d04b38a72fdfabbfcb2ed2358",
      "in_reply_to_id": null,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "b81c3cc19ec8055d04b38a72fdfabbfcb2ed2358\r\n\r\nWhy isn't this at the top of the super long function (and include `VERACK` also?)",
      "created_at": "2024-06-26T19:36:54Z",
      "updated_at": "2024-06-26T19:49:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1655423362",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1655423362"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": 4280,
      "original_start_line": 4251,
      "start_side": "RIGHT",
      "line": 4291,
      "original_line": 4291,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1655427794",
      "pull_request_review_id": 2142672720,
      "id": 1655427794,
      "node_id": "PRRC_kwDOABII585iq9LS",
      "diff_hunk": "@@ -14,10 +15,79 @@ void PrivateBroadcast::Add(const CTransactionRef& tx) EXCLUSIVE_LOCKS_REQUIRED(!\n     }\n }\n \n+std::optional<CTransactionRef> PrivateBroadcast::GetTxForBroadcast() EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+{\n+    LOCK(m_mutex);\n+    if (m_by_priority.empty()) {\n+        return std::nullopt;\n+    }\n+    const Txid& txid = m_by_priority.begin()->second;\n+    auto it = m_by_txid.find(txid);\n+    if (Assume(it != m_by_txid.end())) {\n+        return it->second.tx;\n+    }\n+    m_by_priority.erase(m_by_priority.begin());",
      "path": "src/private_broadcast.cpp",
      "position": 47,
      "original_position": 23,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "b81c3cc19ec8055d04b38a72fdfabbfcb2ed2358",
      "in_reply_to_id": null,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "b81c3cc19ec8055d04b38a72fdfabbfcb2ed2358\r\n\r\nIs it ok to erase from this map now? What if none of our connections are successful ?",
      "created_at": "2024-06-26T19:41:24Z",
      "updated_at": "2024-06-26T19:49:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1655427794",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1655427794"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 47,
      "original_line": 47,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1655433726",
      "pull_request_review_id": 2142672720,
      "id": 1655433726,
      "node_id": "PRRC_kwDOABII585iq-n-",
      "diff_hunk": "@@ -14,10 +15,79 @@ void PrivateBroadcast::Add(const CTransactionRef& tx) EXCLUSIVE_LOCKS_REQUIRED(!\n     }\n }\n \n+std::optional<CTransactionRef> PrivateBroadcast::GetTxForBroadcast() EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+{\n+    LOCK(m_mutex);\n+    if (m_by_priority.empty()) {\n+        return std::nullopt;\n+    }\n+    const Txid& txid = m_by_priority.begin()->second;\n+    auto it = m_by_txid.find(txid);\n+    if (Assume(it != m_by_txid.end())) {\n+        return it->second.tx;\n+    }\n+    m_by_priority.erase(m_by_priority.begin());\n+    return std::nullopt;\n+}\n+\n+void PrivateBroadcast::PushedToNode(const NodeId& nodeid, const Txid& txid) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+{\n+    LOCK(m_mutex);\n+    m_by_nodeid.emplace(nodeid, txid);\n+}\n+\n+bool PrivateBroadcast::FinishBroadcast(const NodeId& nodeid, bool confirmed_by_node) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+{\n+    LOCK(m_mutex);\n+    auto it = m_by_nodeid.find(nodeid);\n+    if (it == m_by_nodeid.end()) {\n+        return false;\n+    }\n+    const Txid txid{it->second};\n+    m_by_nodeid.erase(it);\n+\n+    if (!confirmed_by_node) {\n+        return true;\n+    }\n+\n+    // Update broadcast stats.\n+\n+    auto iters = Find(txid);\n+    if (!iters) {\n+        return true;\n+    }\n+    Priority& priority = iters->by_txid->second.priority;\n+\n+    ++priority.num_broadcasted;\n+    priority.last_broadcasted = GetTime<std::chrono::microseconds>();",
      "path": "src/private_broadcast.cpp",
      "position": null,
      "original_position": 56,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "b81c3cc19ec8055d04b38a72fdfabbfcb2ed2358",
      "in_reply_to_id": null,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "b81c3cc19ec8055d04b38a72fdfabbfcb2ed2358\r\n\r\nIsn't this `GetTime()` deprecated?\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/7a7e7d189dfe5efa6ab3c644f55f410412163503/src/util/time.h#L95-L100",
      "created_at": "2024-06-26T19:47:45Z",
      "updated_at": "2024-06-26T19:49:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1655433726",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1655433726"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 62,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1657739692",
      "pull_request_review_id": 2146390857,
      "id": 1657739692,
      "node_id": "PRRC_kwDOABII585izxms",
      "diff_hunk": "@@ -4701,6 +4701,21 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         const uint256& hash = peer->m_wtxid_relay ? wtxid : txid;\n         AddKnownTx(*peer, hash);\n \n+        if (auto num_broadcasted = m_tx_for_private_broadcast.Remove(ptx)) {\n+            LogPrintLevel(BCLog::PRIVATE_BROADCAST,\n+                          BCLog::Level::Info,\n+                          \"Received our privately broadcast transaction (txid=%s) from the \"\n+                          \"network from peer=%d%s; stopping private broadcast attempts\\n\",",
      "path": "src/net_processing.cpp",
      "position": 526,
      "original_position": 8,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "3f5a4187a9e5d2bbb65c06c1799155fd7dd0d132",
      "in_reply_to_id": null,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "3f5a4187a9e5d2bbb65c06c1799155fd7dd0d132\r\n\r\nThis made me wonder, if the tx gets confirmed in a block before we get it via relay, will it ever get removed?\r\n\r\nupdate: looks like this will happen in `ReattemptPrivateBroadcast()` when we call `m_chainman.ProcessTransaction()` ?",
      "created_at": "2024-06-27T19:55:10Z",
      "updated_at": "2024-06-28T15:36:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1657739692",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1657739692"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": 4736,
      "original_start_line": 4707,
      "start_side": "RIGHT",
      "line": 4737,
      "original_line": 4737,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1657757991",
      "pull_request_review_id": 2146390857,
      "id": 1657757991,
      "node_id": "PRRC_kwDOABII585iz2En",
      "diff_hunk": "@@ -4701,6 +4701,21 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         const uint256& hash = peer->m_wtxid_relay ? wtxid : txid;\n         AddKnownTx(*peer, hash);\n \n+        if (auto num_broadcasted = m_tx_for_private_broadcast.Remove(ptx)) {\n+            LogPrintLevel(BCLog::PRIVATE_BROADCAST,\n+                          BCLog::Level::Info,\n+                          \"Received our privately broadcast transaction (txid=%s) from the \"\n+                          \"network from peer=%d%s; stopping private broadcast attempts\\n\",\n+                          txid.ToString(),\n+                          pfrom.GetId(),\n+                          fLogIPs ? strprintf(\", peeraddr=%s\", pfrom.addr.ToStringAddrPort()) : \"\");\n+            if (NUM_PRIVATE_BROADCAST_PER_TX > num_broadcasted.value()) {\n+                // Not all of the initial NUM_PRIVATE_BROADCAST_PER_TX connections were needed.\n+                // Tell CConnman it does not need to start the remaining ones.\n+                m_connman.m_private_broadcast.NumToOpenSub(NUM_PRIVATE_BROADCAST_PER_TX - num_broadcasted.value());",
      "path": "src/net_processing.cpp",
      "position": 533,
      "original_position": 15,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "3f5a4187a9e5d2bbb65c06c1799155fd7dd0d132",
      "in_reply_to_id": null,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "3f5a4187a9e5d2bbb65c06c1799155fd7dd0d132\r\n\r\nFeels like this should be part of `Remove()`, which I think highlights some possible confusion between the two `class PrivateBroadcast` you have. One in ConnMan and one in its own unit, used in PeerManager.\r\n\r\nI dunno if there's a cleaner approach available, to ensure that the two objects don't get out of sync? Like instead of `m_num_to_open` in ConnMan, could you refer to the size of the `ByNodeId` map?",
      "created_at": "2024-06-27T20:10:34Z",
      "updated_at": "2024-06-27T20:20:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1657757991",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1657757991"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": 4743,
      "original_start_line": 4714,
      "start_side": "RIGHT",
      "line": 4744,
      "original_line": 4744,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1657760369",
      "pull_request_review_id": 2146390857,
      "id": 1657760369,
      "node_id": "PRRC_kwDOABII585iz2px",
      "diff_hunk": "@@ -15,6 +15,19 @@ void PrivateBroadcast::Add(const CTransactionRef& tx) EXCLUSIVE_LOCKS_REQUIRED(!\n     }\n }\n \n+std::optional<size_t> PrivateBroadcast::Remove(const CTransactionRef& tx) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+{\n+    LOCK(m_mutex);\n+    auto iters = Find(tx->GetHash());\n+    if (!iters) {\n+        return std::nullopt;\n+    }\n+    const size_t num_broadcasted{iters->by_priority->first.num_broadcasted};\n+    m_by_priority.erase(iters->by_priority);\n+    m_by_txid.erase(iters->by_txid);",
      "path": "src/private_broadcast.cpp",
      "position": 32,
      "original_position": 13,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "3f5a4187a9e5d2bbb65c06c1799155fd7dd0d132",
      "in_reply_to_id": null,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "what about `m_by_nodeid`?",
      "created_at": "2024-06-27T20:11:08Z",
      "updated_at": "2024-06-27T20:20:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1657760369",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1657760369"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": 31,
      "original_start_line": 26,
      "start_side": "RIGHT",
      "line": 32,
      "original_line": 32,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1658932157",
      "pull_request_review_id": 2148337702,
      "id": 1658932157,
      "node_id": "PRRC_kwDOABII585i4Uu9",
      "diff_hunk": "@@ -81,6 +81,19 @@ bool PrivateBroadcast::FinishBroadcast(const NodeId& nodeid, bool confirmed_by_n\n     return true;\n }\n \n+std::vector<CTransactionRef> PrivateBroadcast::GetStale() const EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+{\n+    LOCK(m_mutex);\n+    const auto stale_time = GetTime<std::chrono::microseconds>() - 1min;",
      "path": "src/private_broadcast.cpp",
      "position": null,
      "original_position": 7,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "a86785dc29faa2dcff301641e2f823b73089dae2",
      "in_reply_to_id": null,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "a86785dc29faa2dcff301641e2f823b73089dae2\r\n\r\nshould `1min` be defined as a constant in the header file? This is what we consider stale?",
      "created_at": "2024-06-28T15:38:41Z",
      "updated_at": "2024-06-28T17:51:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1658932157",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1658932157"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 87,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1658942976",
      "pull_request_review_id": 2148337702,
      "id": 1658942976,
      "node_id": "PRRC_kwDOABII585i4XYA",
      "diff_hunk": "@@ -93,11 +105,23 @@ static RPCHelpMan sendrawtransaction()\n             std::string err_string;\n             AssertLockNotHeld(cs_main);\n             NodeContext& node = EnsureAnyNodeContext(request.context);\n+            const bool private_broadcast_enabled{gArgs.GetBoolArg(\"-privatebroadcast\", DEFAULT_PRIVATE_BROADCAST)};\n+            if (private_broadcast_enabled &&\n+                !g_reachable_nets.Contains(NET_ONION) &&\n+                !g_reachable_nets.Contains(NET_I2P)) {",
      "path": "src/rpc/mempool.cpp",
      "position": 45,
      "original_position": 44,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "5f49e61ffa576aa6c27de30a7db51d17c4f5c516",
      "in_reply_to_id": null,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "5f49e61ffa576aa6c27de30a7db51d17c4f5c516\r\n\r\nHow could this be condition be different now than when it is checked in init.cpp?",
      "created_at": "2024-06-28T15:46:47Z",
      "updated_at": "2024-06-28T17:51:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1658942976",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1658942976"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": 109,
      "original_start_line": 109,
      "start_side": "RIGHT",
      "line": 111,
      "original_line": 111,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1659087156",
      "pull_request_review_id": 2148337702,
      "id": 1659087156,
      "node_id": "PRRC_kwDOABII585i46k0",
      "diff_hunk": "@@ -217,7 +217,12 @@ def peer_disconnect(self):\n     def connection_made(self, transport):\n         \"\"\"asyncio callback when a connection is opened.\"\"\"\n         assert not self._transport\n-        logger.debug(\"Connected & Listening: %s:%d\" % (self.dstaddr, self.dstport))\n+        info = transport.get_extra_info(\"socket\")\n+        us = info.getsockname()\n+        them = info.getpeername()\n+        logger.debug(f\"Connected: us={us[0]}:{us[1]}, them={them[0]}:{them[1]}\")\n+        self.dstaddr = them[0]\n+        self.dstport = them[1]",
      "path": "test/functional/test_framework/p2p.py",
      "position": 18,
      "original_position": 10,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "0a6797ffb3eb2d45bce1dc68e830efd89ac2a442",
      "in_reply_to_id": null,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "0a6797ffb3eb2d45bce1dc68e830efd89ac2a442\r\n\r\nTeleporting the comment from https://github.com/bitcoin/bitcoin/pull/29420#discussion_r1592701864\r\n\r\nWhy didn't we need to do this on master?\r\n\r\nThe old log message was `Connected & Listening: 127.0.0.1:15689` not `Connected & Listening: 0:0`",
      "created_at": "2024-06-28T17:28:15Z",
      "updated_at": "2024-06-28T17:51:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1659087156",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1659087156"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": 225,
      "original_start_line": 224,
      "start_side": "RIGHT",
      "line": 226,
      "original_line": 226,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1660978352",
      "pull_request_review_id": 2151261412,
      "id": 1660978352,
      "node_id": "PRRC_kwDOABII585jAISw",
      "diff_hunk": "@@ -120,6 +120,12 @@ bool WalletInit::ParameterInteraction() const\n         LogPrintf(\"%s: parameter interaction: -blocksonly=1 -> setting -walletbroadcast=0\\n\", __func__);\n     }\n \n+    if (gArgs.GetBoolArg(\"-privatebroadcast\", DEFAULT_PRIVATE_BROADCAST) &&",
      "path": "src/wallet/init.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "1407b3fa264b096813281a767da3cd3ca80ed096",
      "in_reply_to_id": 1578537557,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I thought about this further and removed the requirement to set `-walletbroadcast=0` when `-privatebroadcast=1`. The description of `-privatebroadcast` begins with\r\n\r\n> Broadcast transactions submitted via sendrawtransaction RPC using short lived connections...\r\n\r\nso it should be clear that this applies to the `sendrawtransaction` RPC. In addition I extended the text with\r\n\r\n> Transactions submitted through the wallet are not affected by this option",
      "created_at": "2024-07-01T12:28:45Z",
      "updated_at": "2024-07-01T12:28:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1660978352",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1660978352"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 122,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1660993146",
      "pull_request_review_id": 2151286672,
      "id": 1660993146,
      "node_id": "PRRC_kwDOABII585jAL56",
      "diff_hunk": "@@ -1127,6 +1129,71 @@ class CConnman\n     bool GetUseAddrmanOutgoing() const { return m_use_addrman_outgoing; };\n     void SetNetworkActive(bool active);\n     void OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant&& grant_outbound, const char* strDest, ConnectionType conn_type, bool use_v2transport) EXCLUSIVE_LOCKS_REQUIRED(!m_unused_i2p_sessions_mutex);\n+\n+    /// Group of private broadcast related members.\n+    class PrivateBroadcast\n+    {\n+    public:\n+        /**\n+         * Remember if we ever established at least one outbound connection to a\n+         * Tor peer, including sending and receiving P2P messages. If this is\n+         * true then the Tor proxy indeed works and is a proxy to the Tor network,\n+         * not a misconfigured ordinary SOCKS5 proxy as -proxy or -onion. If that\n+         * is the case, then we assume that connecting to an IPv4 or IPv6 address\n+         * via that proxy will be done trough the Tor network and a Tor exit node.\n+         */\n+        std::atomic_bool m_outbound_tor_ok_at_least_once{false};\n+\n+        /**\n+         * Check if private broadcast can be done to IPv4 or IPv6 peers and if so via which proxy.\n+         * If private broadcast connections should not be opened to IPv4 or IPv6, then this will\n+         * return an empty optional.\n+         */\n+        std::optional<Proxy> ProxyForIPv4or6() const;\n+\n+        /**\n+         * Decide whether to open a private broadcast connection and if yes, to which network.\n+         * We try to open a connection of this type only if there are transactions pending, but\n+         * up to a limit.\n+         * @param[in] prev_was_private_broadcast Whether the previous attempt to open a connection\n+         * was an attempt to open a private broadcast connection (successful or not).\n+         * @param[in] num_opened Number of private broadcast connections that are currently opened.\n+         * @retval !std::nullopt The network to which to open the private broadcast connection.\n+         * @retval std::nullopt Open any other connection (non-private broadcast).\n+         */\n+        std::optional<Network>\n+        ShouldOpen(bool prev_was_private_broadcast, size_t num_opened) const;\n+\n+        /**\n+         * Decrement by `n` the number of new connections of type `ConnectionType::PRIVATE_BROADCAST`\n+         * to be opened by `CConnman::ThreadOpenConnections()`. Will not go negative, for example a\n+         * value of 4 is ok to be decremented by 5 and will result in 0.\n+         * @return the value preceding this operation\n+         */\n+        size_t NumToOpen() const;",
      "path": "src/net.h",
      "position": null,
      "original_position": 54,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "ba75010289f1d9bd3d3a6c635ad18b07cf914041",
      "in_reply_to_id": 1655351745,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed and added `@param[in]` comments.\r\n\r\nWhat is enforced by clang (not by doxygen) via `-Wdocumentation` is a mismatch in the parameter names - e.g. if there is `@param[in] throughput ...` and the actual parameter is `int thrughput`, then it will give a warning (or error if `-Werror` is used).",
      "created_at": "2024-07-01T12:40:54Z",
      "updated_at": "2024-07-01T12:40:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1660993146",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1660993146"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": 1167,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1169,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1660998055",
      "pull_request_review_id": 2151295387,
      "id": 1660998055,
      "node_id": "PRRC_kwDOABII585jANGn",
      "diff_hunk": "@@ -2932,6 +2974,117 @@ void CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFai\n     }\n }\n \n+std::optional<Proxy> CConnman::PrivateBroadcast::ProxyForIPv4or6() const\n+{\n+    if (!m_outbound_tor_ok_at_least_once.load()) {\n+        return std::nullopt;\n+    }\n+    Proxy tor_proxy;\n+    Assume(GetProxy(NET_ONION, tor_proxy));\n+    return tor_proxy;\n+}\n+\n+std::optional<Network>\n+CConnman::PrivateBroadcast::ShouldOpen(bool prev_was_private_broadcast, size_t num_opened) const\n+{\n+    if (prev_was_private_broadcast) {\n+        // Yield to other connection types.\n+        return std::nullopt;\n+    }",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 157,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "ba75010289f1d9bd3d3a6c635ad18b07cf914041",
      "in_reply_to_id": 1655358621,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Could be either way. If there is more than one caller of this function, then having it here would avoid duplicating the check in every caller, but there is one caller so far.",
      "created_at": "2024-07-01T12:44:33Z",
      "updated_at": "2024-07-01T12:44:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1660998055",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1660998055"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": 2990,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 3002,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1661016997",
      "pull_request_review_id": 2151329216,
      "id": 1661016997,
      "node_id": "PRRC_kwDOABII585jARul",
      "diff_hunk": "@@ -4133,6 +4248,18 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         return;\n     }\n \n+    if (pfrom.IsPrivateBroadcastConn()) {\n+        if (msg_type != NetMsgType::PONG) {\n+            LogPrintLevel(BCLog::PRIVATE_BROADCAST,\n+                          BCLog::Level::Debug,\n+                          \"Ignoring incoming message '%s', peer=%d%s\\n\",\n+                          msg_type,\n+                          pfrom.GetId(),\n+                          fLogIPs ? strprintf(\", peeraddr=%s\", pfrom.addr.ToStringAddrPort()) : \"\");\n+            return;\n+        }\n+    }\n+",
      "path": "src/net_processing.cpp",
      "position": 514,
      "original_position": 230,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "b81c3cc19ec8055d04b38a72fdfabbfcb2ed2358",
      "in_reply_to_id": 1655423362,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Because we want to ignore incoming messages after a successful handshake. Ignoring the `VERACK` would disturb the handshake.",
      "created_at": "2024-07-01T12:58:38Z",
      "updated_at": "2024-07-01T12:58:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1661016997",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1661016997"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": 4280,
      "original_start_line": 4251,
      "start_side": "RIGHT",
      "line": 4291,
      "original_line": 4291,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1661030282",
      "pull_request_review_id": 2151353211,
      "id": 1661030282,
      "node_id": "PRRC_kwDOABII585jAU-K",
      "diff_hunk": "@@ -14,10 +15,79 @@ void PrivateBroadcast::Add(const CTransactionRef& tx) EXCLUSIVE_LOCKS_REQUIRED(!\n     }\n }\n \n+std::optional<CTransactionRef> PrivateBroadcast::GetTxForBroadcast() EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+{\n+    LOCK(m_mutex);\n+    if (m_by_priority.empty()) {\n+        return std::nullopt;\n+    }\n+    const Txid& txid = m_by_priority.begin()->second;\n+    auto it = m_by_txid.find(txid);\n+    if (Assume(it != m_by_txid.end())) {\n+        return it->second.tx;\n+    }\n+    m_by_priority.erase(m_by_priority.begin());",
      "path": "src/private_broadcast.cpp",
      "position": 47,
      "original_position": 23,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "b81c3cc19ec8055d04b38a72fdfabbfcb2ed2358",
      "in_reply_to_id": 1655427794,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Note that this would only be reached if `m_by_priority` contains txid that does not have an entry in `m_by_txid` which is a gross bug in the `PrivateBroadast` class. IIRC this was an assert before but somebody suggested to use `Assume()` instead.",
      "created_at": "2024-07-01T13:09:06Z",
      "updated_at": "2024-07-01T13:09:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1661030282",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1661030282"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 47,
      "original_line": 47,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1661067868",
      "pull_request_review_id": 2151418242,
      "id": 1661067868,
      "node_id": "PRRC_kwDOABII585jAeJc",
      "diff_hunk": "@@ -14,10 +15,79 @@ void PrivateBroadcast::Add(const CTransactionRef& tx) EXCLUSIVE_LOCKS_REQUIRED(!\n     }\n }\n \n+std::optional<CTransactionRef> PrivateBroadcast::GetTxForBroadcast() EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+{\n+    LOCK(m_mutex);\n+    if (m_by_priority.empty()) {\n+        return std::nullopt;\n+    }\n+    const Txid& txid = m_by_priority.begin()->second;\n+    auto it = m_by_txid.find(txid);\n+    if (Assume(it != m_by_txid.end())) {\n+        return it->second.tx;\n+    }\n+    m_by_priority.erase(m_by_priority.begin());\n+    return std::nullopt;\n+}\n+\n+void PrivateBroadcast::PushedToNode(const NodeId& nodeid, const Txid& txid) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+{\n+    LOCK(m_mutex);\n+    m_by_nodeid.emplace(nodeid, txid);\n+}\n+\n+bool PrivateBroadcast::FinishBroadcast(const NodeId& nodeid, bool confirmed_by_node) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+{\n+    LOCK(m_mutex);\n+    auto it = m_by_nodeid.find(nodeid);\n+    if (it == m_by_nodeid.end()) {\n+        return false;\n+    }\n+    const Txid txid{it->second};\n+    m_by_nodeid.erase(it);\n+\n+    if (!confirmed_by_node) {\n+        return true;\n+    }\n+\n+    // Update broadcast stats.\n+\n+    auto iters = Find(txid);\n+    if (!iters) {\n+        return true;\n+    }\n+    Priority& priority = iters->by_txid->second.priority;\n+\n+    ++priority.num_broadcasted;\n+    priority.last_broadcasted = GetTime<std::chrono::microseconds>();",
      "path": "src/private_broadcast.cpp",
      "position": null,
      "original_position": 56,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "b81c3cc19ec8055d04b38a72fdfabbfcb2ed2358",
      "in_reply_to_id": 1655433726,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Replaced with `NodeClock::now()`.",
      "created_at": "2024-07-01T13:34:28Z",
      "updated_at": "2024-07-01T13:34:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1661067868",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1661067868"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 62,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1661325008",
      "pull_request_review_id": 2151847905,
      "id": 1661325008,
      "node_id": "PRRC_kwDOABII585jBc7Q",
      "diff_hunk": "@@ -4701,6 +4701,21 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         const uint256& hash = peer->m_wtxid_relay ? wtxid : txid;\n         AddKnownTx(*peer, hash);\n \n+        if (auto num_broadcasted = m_tx_for_private_broadcast.Remove(ptx)) {\n+            LogPrintLevel(BCLog::PRIVATE_BROADCAST,\n+                          BCLog::Level::Info,\n+                          \"Received our privately broadcast transaction (txid=%s) from the \"\n+                          \"network from peer=%d%s; stopping private broadcast attempts\\n\",",
      "path": "src/net_processing.cpp",
      "position": 526,
      "original_position": 8,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "3f5a4187a9e5d2bbb65c06c1799155fd7dd0d132",
      "in_reply_to_id": 1657739692,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, it will return something other than `MempoolAcceptResult::ResultType::VALID`. Would happen as well if a conflicting transaction is mined in the meantime.",
      "created_at": "2024-07-01T17:01:00Z",
      "updated_at": "2024-07-01T17:01:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1661325008",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1661325008"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": 4736,
      "original_start_line": 4707,
      "start_side": "RIGHT",
      "line": 4737,
      "original_line": 4737,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1661339294",
      "pull_request_review_id": 2151879192,
      "id": 1661339294,
      "node_id": "PRRC_kwDOABII585jBgae",
      "diff_hunk": "@@ -4701,6 +4701,21 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         const uint256& hash = peer->m_wtxid_relay ? wtxid : txid;\n         AddKnownTx(*peer, hash);\n \n+        if (auto num_broadcasted = m_tx_for_private_broadcast.Remove(ptx)) {\n+            LogPrintLevel(BCLog::PRIVATE_BROADCAST,\n+                          BCLog::Level::Info,\n+                          \"Received our privately broadcast transaction (txid=%s) from the \"\n+                          \"network from peer=%d%s; stopping private broadcast attempts\\n\",\n+                          txid.ToString(),\n+                          pfrom.GetId(),\n+                          fLogIPs ? strprintf(\", peeraddr=%s\", pfrom.addr.ToStringAddrPort()) : \"\");\n+            if (NUM_PRIVATE_BROADCAST_PER_TX > num_broadcasted.value()) {\n+                // Not all of the initial NUM_PRIVATE_BROADCAST_PER_TX connections were needed.\n+                // Tell CConnman it does not need to start the remaining ones.\n+                m_connman.m_private_broadcast.NumToOpenSub(NUM_PRIVATE_BROADCAST_PER_TX - num_broadcasted.value());",
      "path": "src/net_processing.cpp",
      "position": 533,
      "original_position": 15,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "3f5a4187a9e5d2bbb65c06c1799155fd7dd0d132",
      "in_reply_to_id": 1657757991,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "There is some layer separation between `net`/`CConnman` and `net_processing`/`PeerManager` which I am trying not to blur too much. The lower `net` level only knows about connections and things like \"I need to open N connections of type X\". It does not know anything about transactions, or P2P messages which are handled by the `net_processing` layer.\r\n\r\nThe constant `NUM_PRIVATE_BROADCAST_PER_TX` (_send a transaction to this many peers_) belongs to the `net_processing` layer. Calling this `NumToOpenSub()` is only done if `Remove()` succeeds and `NUM_PRIVATE_BROADCAST_PER_TX > num_broadcasted.value()` holds. So, no way to do it in `CConnman` because that would mean accessing `NUM_PRIVATE_BROADCAST_PER_TX` from `CConnman`.\r\n\r\n> could you refer to the size of the `ByNodeId` map?\r\n\r\nThat is a \"transaction id mapped by node id\". Couldn't deal with transactions from within `CConnman`.",
      "created_at": "2024-07-01T17:16:58Z",
      "updated_at": "2024-07-01T17:16:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1661339294",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1661339294"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": 4743,
      "original_start_line": 4714,
      "start_side": "RIGHT",
      "line": 4744,
      "original_line": 4744,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1662139846",
      "pull_request_review_id": 2153183459,
      "id": 1662139846,
      "node_id": "PRRC_kwDOABII585jEj3G",
      "diff_hunk": "@@ -15,6 +15,19 @@ void PrivateBroadcast::Add(const CTransactionRef& tx) EXCLUSIVE_LOCKS_REQUIRED(!\n     }\n }\n \n+std::optional<size_t> PrivateBroadcast::Remove(const CTransactionRef& tx) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+{\n+    LOCK(m_mutex);\n+    auto iters = Find(tx->GetHash());\n+    if (!iters) {\n+        return std::nullopt;\n+    }\n+    const size_t num_broadcasted{iters->by_priority->first.num_broadcasted};\n+    m_by_priority.erase(iters->by_priority);\n+    m_by_txid.erase(iters->by_txid);",
      "path": "src/private_broadcast.cpp",
      "position": 32,
      "original_position": 13,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "3f5a4187a9e5d2bbb65c06c1799155fd7dd0d132",
      "in_reply_to_id": 1657760369,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`m_by_nodeid` is managed by `PrivateBroadcast::PushedToNode()` and `PrivateBroadcast::FinishBroadcast()`.",
      "created_at": "2024-07-02T09:04:07Z",
      "updated_at": "2024-07-02T09:04:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1662139846",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1662139846"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": 31,
      "original_start_line": 26,
      "start_side": "RIGHT",
      "line": 32,
      "original_line": 32,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1662227439",
      "pull_request_review_id": 2153324654,
      "id": 1662227439,
      "node_id": "PRRC_kwDOABII585jE5Pv",
      "diff_hunk": "@@ -81,6 +81,19 @@ bool PrivateBroadcast::FinishBroadcast(const NodeId& nodeid, bool confirmed_by_n\n     return true;\n }\n \n+std::vector<CTransactionRef> PrivateBroadcast::GetStale() const EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+{\n+    LOCK(m_mutex);\n+    const auto stale_time = GetTime<std::chrono::microseconds>() - 1min;",
      "path": "src/private_broadcast.cpp",
      "position": null,
      "original_position": 7,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "a86785dc29faa2dcff301641e2f823b73089dae2",
      "in_reply_to_id": 1658932157,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, moved to a constant and added a comment to it. Placed the constant in the `.cpp` file since it is only used in that `.cpp` file, to limit its scope. It is not part of the \"public\" `private_broadcast.h/cpp` interface",
      "created_at": "2024-07-02T09:53:47Z",
      "updated_at": "2024-07-02T09:53:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1662227439",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1662227439"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 87,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1662247336",
      "pull_request_review_id": 2153355154,
      "id": 1662247336,
      "node_id": "PRRC_kwDOABII585jE-Go",
      "diff_hunk": "@@ -93,11 +105,23 @@ static RPCHelpMan sendrawtransaction()\n             std::string err_string;\n             AssertLockNotHeld(cs_main);\n             NodeContext& node = EnsureAnyNodeContext(request.context);\n+            const bool private_broadcast_enabled{gArgs.GetBoolArg(\"-privatebroadcast\", DEFAULT_PRIVATE_BROADCAST)};\n+            if (private_broadcast_enabled &&\n+                !g_reachable_nets.Contains(NET_ONION) &&\n+                !g_reachable_nets.Contains(NET_I2P)) {",
      "path": "src/rpc/mempool.cpp",
      "position": 45,
      "original_position": 44,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "5f49e61ffa576aa6c27de30a7db51d17c4f5c516",
      "in_reply_to_id": 1658942976,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The Tor connectivity could be \"off\" during startup and become \"on\" later at runtime, when we connect to the Tor daemon and it tells us the Tor proxy address. This is why the startup condition is a bit different, it has the `onion_may_become_reachable` variable.",
      "created_at": "2024-07-02T10:05:52Z",
      "updated_at": "2024-07-02T10:05:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1662247336",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1662247336"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": 109,
      "original_start_line": 109,
      "start_side": "RIGHT",
      "line": 111,
      "original_line": 111,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1662271368",
      "pull_request_review_id": 2153394349,
      "id": 1662271368,
      "node_id": "PRRC_kwDOABII585jFD-I",
      "diff_hunk": "@@ -217,7 +217,12 @@ def peer_disconnect(self):\n     def connection_made(self, transport):\n         \"\"\"asyncio callback when a connection is opened.\"\"\"\n         assert not self._transport\n-        logger.debug(\"Connected & Listening: %s:%d\" % (self.dstaddr, self.dstport))\n+        info = transport.get_extra_info(\"socket\")\n+        us = info.getsockname()\n+        them = info.getpeername()\n+        logger.debug(f\"Connected: us={us[0]}:{us[1]}, them={them[0]}:{them[1]}\")\n+        self.dstaddr = them[0]\n+        self.dstport = them[1]",
      "path": "test/functional/test_framework/p2p.py",
      "position": 18,
      "original_position": 10,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "0a6797ffb3eb2d45bce1dc68e830efd89ac2a442",
      "in_reply_to_id": 1659087156,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I [replied](https://github.com/bitcoin/bitcoin/pull/29420#discussion_r1662270745) to that thread to keep the discussion in one place.",
      "created_at": "2024-07-02T10:23:35Z",
      "updated_at": "2024-07-02T10:24:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1662271368",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1662271368"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": 225,
      "original_start_line": 224,
      "start_side": "RIGHT",
      "line": 226,
      "original_line": 226,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1662855604",
      "pull_request_review_id": 2154365549,
      "id": 1662855604,
      "node_id": "PRRC_kwDOABII585jHSm0",
      "diff_hunk": "@@ -0,0 +1,307 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test how locally submitted transactions are sent to the network when private broadcast is used.\n+\n+The topology in the test is:\n+\n+Bitcoin Core (tx_originator)\n+               ^   v       The default full-outbound + block-only connections\n+               |   |       (MAX_OUTBOUND_FULL_RELAY_CONNECTIONS + MAX_BLOCK_RELAY_ONLY_CONNECTIONS):\n+               |   |\n+               |   *-----> SOCKS5 Proxy ---> P2PInterface (self.socks5_server.conf.destinations[0][\"node\"])\n+               |   |\n+               |   *-----> SOCKS5 Proxy ---> P2PInterface (self.socks5_server.conf.destinations[1][\"node\"])\n+               |   ...\n+               |   |       The private broadcast TX recipients\n+               |   |       (NUM_PRIVATE_BROADCAST_PER_TX)\n+               |   |       plus maybe some feeler or extra block only connections:\n+               |   |\n+               |   *-----> SOCKS5 Proxy ---> Bitcoin Core (node1) (self.socks5_server.conf.destinations[i][\"node\"] is None)\n+               |   |                          ^\n+               |   |                          *----< P2PInterface (far_observer) (to check Bitcoin Core relays the tx)\n+               |   |\n+               |   *-----> SOCKS5 Proxy ---> P2PInterface (self.socks5_server.conf.destinations[i + 1][\"node\"])\n+               |   ...\n+               |\n+               *---------< P2PDataStore (observer_inbound)\n+\"\"\"\n+\n+from test_framework.p2p import (\n+    P2PDataStore,\n+    P2PInterface,\n+    P2P_SERVICES,\n+    P2P_VERSION,\n+)\n+from test_framework.messages import (\n+    CAddress,\n+    CInv,\n+    MSG_WTX,\n+    msg_inv,\n+)\n+from test_framework.socks5 import (\n+    Socks5Configuration,\n+    Socks5Server,\n+)\n+from test_framework.test_framework import (\n+    BitcoinTestFramework,\n+)\n+from test_framework.util import (\n+    MAX_NODES,\n+    assert_equal,\n+    p2p_port,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+)\n+\n+MAX_OUTBOUND_FULL_RELAY_CONNECTIONS = 8\n+MAX_BLOCK_RELAY_ONLY_CONNECTIONS = 2\n+NUM_INITIAL_CONNECTIONS = MAX_OUTBOUND_FULL_RELAY_CONNECTIONS + MAX_BLOCK_RELAY_ONLY_CONNECTIONS\n+NUM_PRIVATE_BROADCAST_PER_TX = 5\n+\n+# Fill addrman with these addresses. Must have enough Tor addresses, so that even\n+# if all 10 default connections are opened to a Tor address (!?) there must be more\n+# for private broadcast.\n+addresses = [",
      "path": "test/functional/p2p_private_broadcast.py",
      "position": null,
      "original_position": 68,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "3bd618a91fe3935399d380d254996e4263586c80",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```Suggestion\r\nADDRMAN_ADDRESSES = [\r\n```",
      "created_at": "2024-07-02T16:42:20Z",
      "updated_at": "2024-07-02T19:18:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1662855604",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1662855604"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 68,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1662998546",
      "pull_request_review_id": 2154365549,
      "id": 1662998546,
      "node_id": "PRRC_kwDOABII585jH1gS",
      "diff_hunk": "@@ -0,0 +1,307 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test how locally submitted transactions are sent to the network when private broadcast is used.\n+\n+The topology in the test is:\n+\n+Bitcoin Core (tx_originator)\n+               ^   v       The default full-outbound + block-only connections\n+               |   |       (MAX_OUTBOUND_FULL_RELAY_CONNECTIONS + MAX_BLOCK_RELAY_ONLY_CONNECTIONS):\n+               |   |\n+               |   *-----> SOCKS5 Proxy ---> P2PInterface (self.socks5_server.conf.destinations[0][\"node\"])\n+               |   |\n+               |   *-----> SOCKS5 Proxy ---> P2PInterface (self.socks5_server.conf.destinations[1][\"node\"])\n+               |   ...\n+               |   |       The private broadcast TX recipients\n+               |   |       (NUM_PRIVATE_BROADCAST_PER_TX)\n+               |   |       plus maybe some feeler or extra block only connections:\n+               |   |\n+               |   *-----> SOCKS5 Proxy ---> Bitcoin Core (node1) (self.socks5_server.conf.destinations[i][\"node\"] is None)\n+               |   |                          ^\n+               |   |                          *----< P2PInterface (far_observer) (to check Bitcoin Core relays the tx)\n+               |   |\n+               |   *-----> SOCKS5 Proxy ---> P2PInterface (self.socks5_server.conf.destinations[i + 1][\"node\"])\n+               |   ...\n+               |\n+               *---------< P2PDataStore (observer_inbound)\n+\"\"\"\n+\n+from test_framework.p2p import (\n+    P2PDataStore,\n+    P2PInterface,\n+    P2P_SERVICES,\n+    P2P_VERSION,\n+)\n+from test_framework.messages import (\n+    CAddress,\n+    CInv,\n+    MSG_WTX,\n+    msg_inv,\n+)\n+from test_framework.socks5 import (\n+    Socks5Configuration,\n+    Socks5Server,\n+)\n+from test_framework.test_framework import (\n+    BitcoinTestFramework,\n+)\n+from test_framework.util import (\n+    MAX_NODES,\n+    assert_equal,\n+    p2p_port,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+)\n+\n+MAX_OUTBOUND_FULL_RELAY_CONNECTIONS = 8\n+MAX_BLOCK_RELAY_ONLY_CONNECTIONS = 2\n+NUM_INITIAL_CONNECTIONS = MAX_OUTBOUND_FULL_RELAY_CONNECTIONS + MAX_BLOCK_RELAY_ONLY_CONNECTIONS\n+NUM_PRIVATE_BROADCAST_PER_TX = 5\n+\n+# Fill addrman with these addresses. Must have enough Tor addresses, so that even\n+# if all 10 default connections are opened to a Tor address (!?) there must be more\n+# for private broadcast.\n+addresses = [\n+    \"1.65.195.98\",\n+    \"2.59.236.56\",\n+    \"2.83.114.20\",\n+    \"2.248.194.16\",\n+    \"5.2.154.6\",\n+    \"5.101.140.30\",\n+    \"5.128.87.126\",\n+    \"5.144.21.49\",\n+    \"5.172.132.104\",\n+    \"5.188.62.18\",\n+    \"5.200.2.180\",\n+    \"8.129.184.255\",\n+    \"8.209.105.138\",\n+    \"12.34.98.148\",\n+    \"14.199.102.151\",\n+    \"18.27.79.17\",\n+    \"18.27.124.231\",\n+    \"18.216.249.151\",\n+    \"23.88.155.58\",\n+    \"23.93.101.158\",\n+    \"[2001:19f0:1000:1db3:5400:4ff:fe56:5a8d]\",\n+    \"[2001:19f0:5:24da:3eec:efff:feb9:f36e]\",\n+    \"[2001:19f0:5:24da::]\",\n+    \"[2001:19f0:5:4535:3eec:efff:feb9:87e4]\",\n+    \"[2001:19f0:5:4535::]\",\n+    \"[2001:1bc0:c1::2000]\",\n+    \"[2001:1c04:4008:6300:8a5f:2678:114b:a660]\",\n+    \"[2001:41d0:203:3739::]\",\n+    \"[2001:41d0:203:8f49::]\",\n+    \"[2001:41d0:203:bb0a::]\",\n+    \"[2001:41d0:2:bf8f::]\",\n+    \"[2001:41d0:303:de8b::]\",\n+    \"[2001:41d0:403:3d61::]\",\n+    \"[2001:41d0:405:9600::]\",\n+    \"[2001:41d0:8:ed7f::1]\",\n+    \"[2001:41d0:a:69a2::1]\",\n+    \"[2001:41f0::62:6974:636f:696e]\",\n+    \"[2001:470:1b62::]\",\n+    \"[2001:470:1f05:43b:2831:8530:7179:5864]\",\n+    \"[2001:470:1f09:b14::11]\",\n+    \"2bqghnldu6mcug4pikzprwhtjjnsyederctvci6klcwzepnjd46ikjyd.onion\",\n+    \"4lr3w2iyyl5u5l6tosizclykf5v3smqroqdn2i4h3kq6pfbbjb2xytad.onion\",\n+    \"5g72ppm3krkorsfopcm2bi7wlv4ohhs4u4mlseymasn7g7zhdcyjpfid.onion\",\n+    \"5sbmcl4m5api5tqafi4gcckrn3y52sz5mskxf3t6iw4bp7erwiptrgqd.onion\",\n+    \"776aegl7tfhg6oiqqy76jnwrwbvcytsx2qegcgh2mjqujll4376ohlid.onion\",\n+    \"77mdte42srl42shdh2mhtjr7nf7dmedqrw6bkcdekhdvmnld6ojyyiad.onion\",\n+    \"azbpsh4arqlm6442wfimy7qr65bmha2zhgjg7wbaji6vvaug53hur2qd.onion\",\n+    \"b64xcbleqmwgq2u46bh4hegnlrzzvxntyzbmucn3zt7cssm7y4ubv3id.onion\",\n+    \"bsqbtcparrfihlwolt4xgjbf4cgqckvrvsfyvy6vhiqrnh4w6ghixoid.onion\",\n+    \"bsqbtctulf2g4jtjsdfgl2ed7qs6zz5wqx27qnyiik7laockryvszqqd.onion\",\n+    \"cwi3ekrwhig47dhhzfenr5hbvckj7fzaojygvazi2lucsenwbzwoyiqd.onion\",\n+    \"devinbtcmwkuitvxl3tfi5of4zau46ymeannkjv6fpnylkgf3q5fa3id.onion\",\n+    \"devinbtcyk643iruzfpaxw3on2jket7rbjmwygm42dmdyub3ietrbmid.onion\",\n+    \"dtql5vci4iaml4anmueftqr7bfgzqlauzfy4rc2tfgulldd3ekyijjyd.onion\",\n+    \"emzybtc25oddoa2prol2znpz2axnrg6k77xwgirmhv7igoiucddsxiad.onion\",\n+    \"emzybtc3ewh7zihpkdvuwlgxrhzcxy2p5fvjggp7ngjbxcytxvt4rjid.onion\",\n+    \"emzybtc454ewbviqnmgtgx3rgublsgkk23r4onbhidcv36wremue4kqd.onion\",\n+    \"emzybtc5bnpb2o6gh54oquiox54o4r7yn4a2wiiwzrjonlouaibm2zid.onion\",\n+    \"fpz6r5ppsakkwypjcglz6gcnwt7ytfhxskkfhzu62tnylcknh3eq6pad.onion\",\n+    \"255fhcp6ajvftnyo7bwz3an3t4a4brhopm3bamyh2iu5r3gnr2rq.b32.i2p\",\n+    \"27yrtht5b5bzom2w5ajb27najuqvuydtzb7bavlak25wkufec5mq.b32.i2p\",\n+    \"3gocb7wc4zvbmmebktet7gujccuux4ifk3kqilnxnj5wpdpqx2hq.b32.i2p\",\n+    \"4fcc23wt3hyjk3csfzcdyjz5pcwg5dzhdqgma6bch2qyiakcbboa.b32.i2p\",\n+    \"4osyqeknhx5qf3a73jeimexwclmt42cju6xdp7icja4ixxguu2hq.b32.i2p\",\n+    \"4umsi4nlmgyp4rckosg4vegd2ysljvid47zu7pqsollkaszcbpqq.b32.i2p\",\n+    \"6j2ezegd3e2e2x3o3pox335f5vxfthrrigkdrbgfbdjchm5h4awa.b32.i2p\",\n+    \"6n36ljyr55szci5ygidmxqer64qr24f4qmnymnbvgehz7qinxnla.b32.i2p\",\n+    \"72yjs6mvlby3ky6mgpvvlemmwq5pfcznrzd34jkhclgrishqdxva.b32.i2p\",\n+    \"a5qsnv3maw77mlmmzlcglu6twje6ttctd3fhpbfwcbpmewx6fczq.b32.i2p\",\n+    \"aovep2pco7v2k4rheofrgytbgk23eg22dczpsjqgqtxcqqvmxk6a.b32.i2p\",\n+    \"bitcoi656nll5hu6u7ddzrmzysdtwtnzcnrjd4rfdqbeey7dmn5a.b32.i2p\",\n+    \"brifkruhlkgrj65hffybrjrjqcgdgqs2r7siizb5b2232nruik3a.b32.i2p\",\n+    \"c4gfnttsuwqomiygupdqqqyy5y5emnk5c73hrfvatri67prd7vyq.b32.i2p\",\n+    \"day3hgxyrtwjslt54sikevbhxxs4qzo7d6vi72ipmscqtq3qmijq.b32.i2p\",\n+    \"du5kydummi23bjfp6bd7owsvrijgt7zhvxmz5h5f5spcioeoetwq.b32.i2p\",\n+    \"e55k6wu46rzp4pg5pk5npgbr3zz45bc3ihtzu2xcye5vwnzdy7pq.b32.i2p\",\n+    \"eciohu5nq7vsvwjjc52epskuk75d24iccgzmhbzrwonw6lx4gdva.b32.i2p\",\n+    \"ejlnngarmhqvune74ko7kk55xtgbz5i5ncs4vmnvjpy3l7y63xaa.b32.i2p\",\n+    \"fhzlp3xroabohnmjonu5iqazwhlbbwh5cpujvw2azcu3srqdceja.b32.i2p\",\n+    \"[fc32:17ea:e415:c3bf:9808:149d:b5a2:c9aa]\",\n+    \"[fcc7:be49:ccd1:dc91:3125:f0da:457d:8ce]\",\n+    \"[fcdc:73ae:b1a9:1bf8:d4c2:811:a4c7:c34e]\",\n+]\n+\n+class P2PPrivateBroadcast(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.disable_autoconnect = False\n+        self.num_nodes = 2\n+\n+    def setup_nodes(self):\n+        # Start a SOCKS5 proxy server.\n+        socks5_server_config = Socks5Configuration()\n+        # self.nodes[0] listens on p2p_port(0),\n+        # self.nodes[1] listens on p2p_port(1),\n+        # thus we tell the SOCKS5 server to listen on p2p_port(self.num_nodes (which is 2))\n+        socks5_server_config.addr = (\"127.0.0.1\", p2p_port(self.num_nodes))\n+        socks5_server_config.unauth = True\n+        socks5_server_config.auth = True\n+\n+        self.socks5_server = Socks5Server(socks5_server_config)\n+        self.socks5_server.start()\n+\n+        ports_base = p2p_port(MAX_NODES) + 15000\n+\n+        # Add 2 because one feeler and one extra block relay connections may\n+        # sneak in between the private broadcast connections.\n+        for i in range(NUM_INITIAL_CONNECTIONS + NUM_PRIVATE_BROADCAST_PER_TX + 2):\n+            if i == NUM_INITIAL_CONNECTIONS:\n+                # Instruct the SOCKS5 server to redirect the first private\n+                # broadcast connection from nodes[0] to nodes[1]\n+                self.socks5_server.conf.destinations.append({\n+                    \"to_addr\": \"127.0.0.1\", # nodes[1] listen address\n+                    \"to_port\": p2p_port(1), # nodes[1] listen port\n+                    \"node\": None,\n+                    \"requested_to_addr\": None,\n+                })\n+            else:\n+                # Create a Python P2P listening node and add it to self.socks5_server.conf.destinations[]\n+                listener = P2PInterface()\n+                listener.peer_connect_helper(dstaddr=\"0.0.0.0\", dstport=0, net=self.chain, timeout_factor=self.options.timeout_factor)\n+                listener.peer_connect_send_version(services=P2P_SERVICES)\n+                self.network_thread.listen(\n+                    p2p=listener,\n+                    # Instruct the SOCKS5 server to redirect a connection to this Python P2P listener.\n+                    callback=lambda addr, port: self.socks5_server.conf.destinations.append({\n+                        \"to_addr\": addr,\n+                        \"to_port\": port,\n+                        \"node\": None,\n+                        \"requested_to_addr\": None,\n+                    }),\n+                    addr=\"127.0.0.1\",\n+                    port=ports_base + i)\n+                # Wait until the callback has been called and it has done append().\n+                self.wait_until(lambda: len(self.socks5_server.conf.destinations) == i + 1)\n+\n+                self.socks5_server.conf.destinations[i][\"node\"] = listener\n+\n+        self.extra_args = [\n+            [\n+                \"-cjdnsreachable\", # needed to be able to add CJDNS addresses to addrman (otherwise they are unroutable).\n+                \"-test=addrman\",\n+                \"-privatebroadcast\",\n+                f\"-proxy={socks5_server_config.addr[0]}:{socks5_server_config.addr[1]}\",\n+            ],\n+            [\n+                \"-connect=0\",\n+                f\"-bind=127.0.0.1:{p2p_port(1)}=onion\", # consider all incoming as coming from Tor\n+            ],\n+        ]\n+        super().setup_nodes()\n+\n+    def setup_network(self):\n+        self.setup_nodes()\n+\n+    def run_test(self):\n+        tx_originator = self.nodes[0]\n+\n+        observer_inbound = tx_originator.add_p2p_connection(P2PDataStore())\n+\n+        # Fill tx_originator's addrman.\n+        for addr in addresses:\n+            res = tx_originator.addpeeraddress(address=addr, port=8333, tried=False)\n+            if not res[\"success\"]:\n+                self.log.debug(f\"Could not add {addr} to tx_originator's addrman (collision?)\")\n+\n+        self.wait_until(lambda: self.socks5_server.conf.destinations_used == NUM_INITIAL_CONNECTIONS)\n+\n+        node1 = self.nodes[1]",
      "path": "test/functional/p2p_private_broadcast.py",
      "position": null,
      "original_position": 236,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "3bd618a91fe3935399d380d254996e4263586c80",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "s/node1/tx_receiver/",
      "created_at": "2024-07-02T18:38:42Z",
      "updated_at": "2024-07-02T19:18:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1662998546",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1662998546"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 236,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1663040526",
      "pull_request_review_id": 2154365549,
      "id": 1663040526,
      "node_id": "PRRC_kwDOABII585jH_wO",
      "diff_hunk": "@@ -0,0 +1,307 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test how locally submitted transactions are sent to the network when private broadcast is used.\n+\n+The topology in the test is:\n+\n+Bitcoin Core (tx_originator)\n+               ^   v       The default full-outbound + block-only connections\n+               |   |       (MAX_OUTBOUND_FULL_RELAY_CONNECTIONS + MAX_BLOCK_RELAY_ONLY_CONNECTIONS):\n+               |   |\n+               |   *-----> SOCKS5 Proxy ---> P2PInterface (self.socks5_server.conf.destinations[0][\"node\"])\n+               |   |\n+               |   *-----> SOCKS5 Proxy ---> P2PInterface (self.socks5_server.conf.destinations[1][\"node\"])\n+               |   ...\n+               |   |       The private broadcast TX recipients\n+               |   |       (NUM_PRIVATE_BROADCAST_PER_TX)\n+               |   |       plus maybe some feeler or extra block only connections:\n+               |   |\n+               |   *-----> SOCKS5 Proxy ---> Bitcoin Core (node1) (self.socks5_server.conf.destinations[i][\"node\"] is None)\n+               |   |                          ^\n+               |   |                          *----< P2PInterface (far_observer) (to check Bitcoin Core relays the tx)\n+               |   |\n+               |   *-----> SOCKS5 Proxy ---> P2PInterface (self.socks5_server.conf.destinations[i + 1][\"node\"])\n+               |   ...\n+               |\n+               *---------< P2PDataStore (observer_inbound)\n+\"\"\"\n+\n+from test_framework.p2p import (\n+    P2PDataStore,\n+    P2PInterface,\n+    P2P_SERVICES,\n+    P2P_VERSION,\n+)\n+from test_framework.messages import (\n+    CAddress,\n+    CInv,\n+    MSG_WTX,\n+    msg_inv,\n+)\n+from test_framework.socks5 import (\n+    Socks5Configuration,\n+    Socks5Server,\n+)\n+from test_framework.test_framework import (\n+    BitcoinTestFramework,\n+)\n+from test_framework.util import (\n+    MAX_NODES,\n+    assert_equal,\n+    p2p_port,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+)\n+\n+MAX_OUTBOUND_FULL_RELAY_CONNECTIONS = 8\n+MAX_BLOCK_RELAY_ONLY_CONNECTIONS = 2\n+NUM_INITIAL_CONNECTIONS = MAX_OUTBOUND_FULL_RELAY_CONNECTIONS + MAX_BLOCK_RELAY_ONLY_CONNECTIONS\n+NUM_PRIVATE_BROADCAST_PER_TX = 5\n+\n+# Fill addrman with these addresses. Must have enough Tor addresses, so that even\n+# if all 10 default connections are opened to a Tor address (!?) there must be more\n+# for private broadcast.\n+addresses = [\n+    \"1.65.195.98\",\n+    \"2.59.236.56\",\n+    \"2.83.114.20\",\n+    \"2.248.194.16\",\n+    \"5.2.154.6\",\n+    \"5.101.140.30\",\n+    \"5.128.87.126\",\n+    \"5.144.21.49\",\n+    \"5.172.132.104\",\n+    \"5.188.62.18\",\n+    \"5.200.2.180\",\n+    \"8.129.184.255\",\n+    \"8.209.105.138\",\n+    \"12.34.98.148\",\n+    \"14.199.102.151\",\n+    \"18.27.79.17\",\n+    \"18.27.124.231\",\n+    \"18.216.249.151\",\n+    \"23.88.155.58\",\n+    \"23.93.101.158\",\n+    \"[2001:19f0:1000:1db3:5400:4ff:fe56:5a8d]\",\n+    \"[2001:19f0:5:24da:3eec:efff:feb9:f36e]\",\n+    \"[2001:19f0:5:24da::]\",\n+    \"[2001:19f0:5:4535:3eec:efff:feb9:87e4]\",\n+    \"[2001:19f0:5:4535::]\",\n+    \"[2001:1bc0:c1::2000]\",\n+    \"[2001:1c04:4008:6300:8a5f:2678:114b:a660]\",\n+    \"[2001:41d0:203:3739::]\",\n+    \"[2001:41d0:203:8f49::]\",\n+    \"[2001:41d0:203:bb0a::]\",\n+    \"[2001:41d0:2:bf8f::]\",\n+    \"[2001:41d0:303:de8b::]\",\n+    \"[2001:41d0:403:3d61::]\",\n+    \"[2001:41d0:405:9600::]\",\n+    \"[2001:41d0:8:ed7f::1]\",\n+    \"[2001:41d0:a:69a2::1]\",\n+    \"[2001:41f0::62:6974:636f:696e]\",\n+    \"[2001:470:1b62::]\",\n+    \"[2001:470:1f05:43b:2831:8530:7179:5864]\",\n+    \"[2001:470:1f09:b14::11]\",\n+    \"2bqghnldu6mcug4pikzprwhtjjnsyederctvci6klcwzepnjd46ikjyd.onion\",\n+    \"4lr3w2iyyl5u5l6tosizclykf5v3smqroqdn2i4h3kq6pfbbjb2xytad.onion\",\n+    \"5g72ppm3krkorsfopcm2bi7wlv4ohhs4u4mlseymasn7g7zhdcyjpfid.onion\",\n+    \"5sbmcl4m5api5tqafi4gcckrn3y52sz5mskxf3t6iw4bp7erwiptrgqd.onion\",\n+    \"776aegl7tfhg6oiqqy76jnwrwbvcytsx2qegcgh2mjqujll4376ohlid.onion\",\n+    \"77mdte42srl42shdh2mhtjr7nf7dmedqrw6bkcdekhdvmnld6ojyyiad.onion\",\n+    \"azbpsh4arqlm6442wfimy7qr65bmha2zhgjg7wbaji6vvaug53hur2qd.onion\",\n+    \"b64xcbleqmwgq2u46bh4hegnlrzzvxntyzbmucn3zt7cssm7y4ubv3id.onion\",\n+    \"bsqbtcparrfihlwolt4xgjbf4cgqckvrvsfyvy6vhiqrnh4w6ghixoid.onion\",\n+    \"bsqbtctulf2g4jtjsdfgl2ed7qs6zz5wqx27qnyiik7laockryvszqqd.onion\",\n+    \"cwi3ekrwhig47dhhzfenr5hbvckj7fzaojygvazi2lucsenwbzwoyiqd.onion\",\n+    \"devinbtcmwkuitvxl3tfi5of4zau46ymeannkjv6fpnylkgf3q5fa3id.onion\",\n+    \"devinbtcyk643iruzfpaxw3on2jket7rbjmwygm42dmdyub3ietrbmid.onion\",\n+    \"dtql5vci4iaml4anmueftqr7bfgzqlauzfy4rc2tfgulldd3ekyijjyd.onion\",\n+    \"emzybtc25oddoa2prol2znpz2axnrg6k77xwgirmhv7igoiucddsxiad.onion\",\n+    \"emzybtc3ewh7zihpkdvuwlgxrhzcxy2p5fvjggp7ngjbxcytxvt4rjid.onion\",\n+    \"emzybtc454ewbviqnmgtgx3rgublsgkk23r4onbhidcv36wremue4kqd.onion\",\n+    \"emzybtc5bnpb2o6gh54oquiox54o4r7yn4a2wiiwzrjonlouaibm2zid.onion\",\n+    \"fpz6r5ppsakkwypjcglz6gcnwt7ytfhxskkfhzu62tnylcknh3eq6pad.onion\",\n+    \"255fhcp6ajvftnyo7bwz3an3t4a4brhopm3bamyh2iu5r3gnr2rq.b32.i2p\",\n+    \"27yrtht5b5bzom2w5ajb27najuqvuydtzb7bavlak25wkufec5mq.b32.i2p\",\n+    \"3gocb7wc4zvbmmebktet7gujccuux4ifk3kqilnxnj5wpdpqx2hq.b32.i2p\",\n+    \"4fcc23wt3hyjk3csfzcdyjz5pcwg5dzhdqgma6bch2qyiakcbboa.b32.i2p\",\n+    \"4osyqeknhx5qf3a73jeimexwclmt42cju6xdp7icja4ixxguu2hq.b32.i2p\",\n+    \"4umsi4nlmgyp4rckosg4vegd2ysljvid47zu7pqsollkaszcbpqq.b32.i2p\",\n+    \"6j2ezegd3e2e2x3o3pox335f5vxfthrrigkdrbgfbdjchm5h4awa.b32.i2p\",\n+    \"6n36ljyr55szci5ygidmxqer64qr24f4qmnymnbvgehz7qinxnla.b32.i2p\",\n+    \"72yjs6mvlby3ky6mgpvvlemmwq5pfcznrzd34jkhclgrishqdxva.b32.i2p\",\n+    \"a5qsnv3maw77mlmmzlcglu6twje6ttctd3fhpbfwcbpmewx6fczq.b32.i2p\",\n+    \"aovep2pco7v2k4rheofrgytbgk23eg22dczpsjqgqtxcqqvmxk6a.b32.i2p\",\n+    \"bitcoi656nll5hu6u7ddzrmzysdtwtnzcnrjd4rfdqbeey7dmn5a.b32.i2p\",\n+    \"brifkruhlkgrj65hffybrjrjqcgdgqs2r7siizb5b2232nruik3a.b32.i2p\",\n+    \"c4gfnttsuwqomiygupdqqqyy5y5emnk5c73hrfvatri67prd7vyq.b32.i2p\",\n+    \"day3hgxyrtwjslt54sikevbhxxs4qzo7d6vi72ipmscqtq3qmijq.b32.i2p\",\n+    \"du5kydummi23bjfp6bd7owsvrijgt7zhvxmz5h5f5spcioeoetwq.b32.i2p\",\n+    \"e55k6wu46rzp4pg5pk5npgbr3zz45bc3ihtzu2xcye5vwnzdy7pq.b32.i2p\",\n+    \"eciohu5nq7vsvwjjc52epskuk75d24iccgzmhbzrwonw6lx4gdva.b32.i2p\",\n+    \"ejlnngarmhqvune74ko7kk55xtgbz5i5ncs4vmnvjpy3l7y63xaa.b32.i2p\",\n+    \"fhzlp3xroabohnmjonu5iqazwhlbbwh5cpujvw2azcu3srqdceja.b32.i2p\",\n+    \"[fc32:17ea:e415:c3bf:9808:149d:b5a2:c9aa]\",\n+    \"[fcc7:be49:ccd1:dc91:3125:f0da:457d:8ce]\",\n+    \"[fcdc:73ae:b1a9:1bf8:d4c2:811:a4c7:c34e]\",\n+]\n+\n+class P2PPrivateBroadcast(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.disable_autoconnect = False\n+        self.num_nodes = 2\n+\n+    def setup_nodes(self):\n+        # Start a SOCKS5 proxy server.\n+        socks5_server_config = Socks5Configuration()\n+        # self.nodes[0] listens on p2p_port(0),\n+        # self.nodes[1] listens on p2p_port(1),\n+        # thus we tell the SOCKS5 server to listen on p2p_port(self.num_nodes (which is 2))\n+        socks5_server_config.addr = (\"127.0.0.1\", p2p_port(self.num_nodes))\n+        socks5_server_config.unauth = True\n+        socks5_server_config.auth = True\n+\n+        self.socks5_server = Socks5Server(socks5_server_config)\n+        self.socks5_server.start()\n+\n+        ports_base = p2p_port(MAX_NODES) + 15000\n+\n+        # Add 2 because one feeler and one extra block relay connections may\n+        # sneak in between the private broadcast connections.\n+        for i in range(NUM_INITIAL_CONNECTIONS + NUM_PRIVATE_BROADCAST_PER_TX + 2):\n+            if i == NUM_INITIAL_CONNECTIONS:\n+                # Instruct the SOCKS5 server to redirect the first private\n+                # broadcast connection from nodes[0] to nodes[1]\n+                self.socks5_server.conf.destinations.append({\n+                    \"to_addr\": \"127.0.0.1\", # nodes[1] listen address\n+                    \"to_port\": p2p_port(1), # nodes[1] listen port\n+                    \"node\": None,\n+                    \"requested_to_addr\": None,\n+                })\n+            else:\n+                # Create a Python P2P listening node and add it to self.socks5_server.conf.destinations[]\n+                listener = P2PInterface()\n+                listener.peer_connect_helper(dstaddr=\"0.0.0.0\", dstport=0, net=self.chain, timeout_factor=self.options.timeout_factor)\n+                listener.peer_connect_send_version(services=P2P_SERVICES)\n+                self.network_thread.listen(\n+                    p2p=listener,\n+                    # Instruct the SOCKS5 server to redirect a connection to this Python P2P listener.\n+                    callback=lambda addr, port: self.socks5_server.conf.destinations.append({\n+                        \"to_addr\": addr,\n+                        \"to_port\": port,\n+                        \"node\": None,\n+                        \"requested_to_addr\": None,\n+                    }),\n+                    addr=\"127.0.0.1\",\n+                    port=ports_base + i)\n+                # Wait until the callback has been called and it has done append().\n+                self.wait_until(lambda: len(self.socks5_server.conf.destinations) == i + 1)\n+\n+                self.socks5_server.conf.destinations[i][\"node\"] = listener\n+\n+        self.extra_args = [\n+            [\n+                \"-cjdnsreachable\", # needed to be able to add CJDNS addresses to addrman (otherwise they are unroutable).\n+                \"-test=addrman\",\n+                \"-privatebroadcast\",\n+                f\"-proxy={socks5_server_config.addr[0]}:{socks5_server_config.addr[1]}\",\n+            ],\n+            [\n+                \"-connect=0\",\n+                f\"-bind=127.0.0.1:{p2p_port(1)}=onion\", # consider all incoming as coming from Tor\n+            ],\n+        ]\n+        super().setup_nodes()\n+\n+    def setup_network(self):\n+        self.setup_nodes()\n+\n+    def run_test(self):\n+        tx_originator = self.nodes[0]\n+\n+        observer_inbound = tx_originator.add_p2p_connection(P2PDataStore())\n+\n+        # Fill tx_originator's addrman.\n+        for addr in addresses:\n+            res = tx_originator.addpeeraddress(address=addr, port=8333, tried=False)\n+            if not res[\"success\"]:\n+                self.log.debug(f\"Could not add {addr} to tx_originator's addrman (collision?)\")\n+\n+        self.wait_until(lambda: self.socks5_server.conf.destinations_used == NUM_INITIAL_CONNECTIONS)\n+\n+        node1 = self.nodes[1]\n+        far_observer = node1.add_p2p_connection(P2PInterface())\n+\n+        # The next opened connections should be \"private broadcast\" for sending the transaction.\n+\n+        miniwallet = MiniWallet(tx_originator)\n+        tx = miniwallet.send_self_transfer(from_node=tx_originator)\n+        self.log.info(f\"Created transaction txid={tx['txid']}\")\n+\n+        self.log.debug(f\"Inspecting outbound connection i={NUM_INITIAL_CONNECTIONS}, must be the first private broadcast connection\")\n+        self.wait_until(lambda: len(node1.getrawmempool()) > 0)\n+        far_observer.wait_for_tx(tx[\"txid\"])\n+        self.log.debug(f\"Outbound connection i={NUM_INITIAL_CONNECTIONS}: the private broadcast target received and further relayed the transaction\")\n+\n+        num_private_broadcast_opened = 1 # already 1 connection to node1, confirmed by far_observer getting the tx\n+        for i in range(NUM_INITIAL_CONNECTIONS + 1, len(self.socks5_server.conf.destinations)):\n+            self.log.debug(f\"Inspecting outbound connection i={i}\")\n+            # At this point the connection may not yet have been established (A),\n+            # may be active (B), or may have already been closed (C).\n+            peer = self.socks5_server.conf.destinations[i][\"node\"]\n+            peer.wait_until(lambda: peer.message_count[\"version\"] == 1, check_connected=False)\n+            # Now it is either (B) or (C).\n+            requested_to_addr = self.socks5_server.conf.destinations[i][\"requested_to_addr\"]\n+            if peer.last_message[\"version\"].nServices != 0:\n+                self.log.debug(f\"Outbound connection i={i} to {requested_to_addr} not a private broadcast, ignoring it (maybe feeler or extra block only)\")\n+                continue\n+            self.log.debug(f\"Outbound connection i={i} to {requested_to_addr} must be a private broadcast, checking it\")\n+            peer.wait_for_disconnect()\n+            # Now it is (C).\n+            assert_equal(peer.message_count, {\n+                \"version\": 1,\n+                \"verack\": 1,\n+                \"tx\": 1,\n+                \"ping\": 1\n+            })\n+            dummy_address = CAddress()\n+            dummy_address.nServices = 0\n+            assert_equal(peer.last_message[\"version\"].nVersion, P2P_VERSION)\n+            assert_equal(peer.last_message[\"version\"].nServices, 0)\n+            assert_equal(peer.last_message[\"version\"].nTime, 0)\n+            assert_equal(peer.last_message[\"version\"].addrTo, dummy_address)\n+            assert_equal(peer.last_message[\"version\"].addrFrom, dummy_address)\n+            assert_equal(peer.last_message[\"version\"].strSubVer, \"/pynode:0.0.1/\")\n+            assert_equal(peer.last_message[\"version\"].nStartingHeight, 0)\n+            assert_equal(peer.last_message[\"version\"].relay, 0)\n+            assert_equal(peer.last_message[\"tx\"].tx.rehash(), tx[\"txid\"])\n+            self.log.debug(f\"Outbound connection i={i} is proper private broadcast, test ok\")\n+            num_private_broadcast_opened += 1\n+            if num_private_broadcast_opened == NUM_PRIVATE_BROADCAST_PER_TX:\n+                break\n+        assert_equal(num_private_broadcast_opened, NUM_PRIVATE_BROADCAST_PER_TX)\n+\n+        wtxid_int = int(tx[\"wtxid\"], 16)\n+        inv = CInv(MSG_WTX, wtxid_int)\n+\n+        self.log.info(\"Checking that the transaction is not in the originator node's mempool\")\n+        assert_equal(len(tx_originator.getrawmempool()), 0)\n+\n+        self.log.info(\"Sending INV from an observer and waiting for GETDATA from node\")\n+        observer_inbound.tx_store[wtxid_int] = tx[\"tx\"]\n+        assert \"getdata\" not in observer_inbound.last_message\n+        observer_inbound.send_message(msg_inv([inv]))\n+        observer_inbound.wait_until(lambda: \"getdata\" in observer_inbound.last_message)\n+        self.wait_until(lambda: len(tx_originator.getrawmempool()) > 0)\n+\n+        self.log.info(\"Waiting for normal broadcast to another observer\")\n+        observer_outbound = self.socks5_server.conf.destinations[0][\"node\"]\n+        observer_outbound.wait_for_inv([inv])",
      "path": "test/functional/p2p_private_broadcast.py",
      "position": null,
      "original_position": 303,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "3bd618a91fe3935399d380d254996e4263586c80",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think the test needs coverage for:\r\n\r\n1) retrying broadcasts\r\n2) sending the same tx again via sendrawtransaction\r\n3) sending a different wtxid via sendrawtransaction\r\n4) sending a tx with in-mempool dependencies (both that succeed and fail due to existing/missing parent)\r\n5) rpc failing if it detects `!g_reachable_nets`\r\n6) what happens if there's not enough private connections when first broadcast attempt is tried, but more found later\r\n7) what happens to pending broadcasts on restart of node",
      "created_at": "2024-07-02T19:16:23Z",
      "updated_at": "2024-07-02T19:35:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1663040526",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1663040526"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 303,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1698508719",
      "pull_request_review_id": 2210168984,
      "id": 1698508719,
      "node_id": "PRRC_kwDOABII585lPS-v",
      "diff_hunk": "@@ -0,0 +1,307 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test how locally submitted transactions are sent to the network when private broadcast is used.\n+\n+The topology in the test is:\n+\n+Bitcoin Core (tx_originator)\n+               ^   v       The default full-outbound + block-only connections\n+               |   |       (MAX_OUTBOUND_FULL_RELAY_CONNECTIONS + MAX_BLOCK_RELAY_ONLY_CONNECTIONS):\n+               |   |\n+               |   *-----> SOCKS5 Proxy ---> P2PInterface (self.socks5_server.conf.destinations[0][\"node\"])\n+               |   |\n+               |   *-----> SOCKS5 Proxy ---> P2PInterface (self.socks5_server.conf.destinations[1][\"node\"])\n+               |   ...\n+               |   |       The private broadcast TX recipients\n+               |   |       (NUM_PRIVATE_BROADCAST_PER_TX)\n+               |   |       plus maybe some feeler or extra block only connections:\n+               |   |\n+               |   *-----> SOCKS5 Proxy ---> Bitcoin Core (node1) (self.socks5_server.conf.destinations[i][\"node\"] is None)\n+               |   |                          ^\n+               |   |                          *----< P2PInterface (far_observer) (to check Bitcoin Core relays the tx)\n+               |   |\n+               |   *-----> SOCKS5 Proxy ---> P2PInterface (self.socks5_server.conf.destinations[i + 1][\"node\"])\n+               |   ...\n+               |\n+               *---------< P2PDataStore (observer_inbound)\n+\"\"\"\n+\n+from test_framework.p2p import (\n+    P2PDataStore,\n+    P2PInterface,\n+    P2P_SERVICES,\n+    P2P_VERSION,\n+)\n+from test_framework.messages import (\n+    CAddress,\n+    CInv,\n+    MSG_WTX,\n+    msg_inv,\n+)\n+from test_framework.socks5 import (\n+    Socks5Configuration,\n+    Socks5Server,\n+)\n+from test_framework.test_framework import (\n+    BitcoinTestFramework,\n+)\n+from test_framework.util import (\n+    MAX_NODES,\n+    assert_equal,\n+    p2p_port,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+)\n+\n+MAX_OUTBOUND_FULL_RELAY_CONNECTIONS = 8\n+MAX_BLOCK_RELAY_ONLY_CONNECTIONS = 2\n+NUM_INITIAL_CONNECTIONS = MAX_OUTBOUND_FULL_RELAY_CONNECTIONS + MAX_BLOCK_RELAY_ONLY_CONNECTIONS\n+NUM_PRIVATE_BROADCAST_PER_TX = 5\n+\n+# Fill addrman with these addresses. Must have enough Tor addresses, so that even\n+# if all 10 default connections are opened to a Tor address (!?) there must be more\n+# for private broadcast.\n+addresses = [",
      "path": "test/functional/p2p_private_broadcast.py",
      "position": null,
      "original_position": 68,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "3bd618a91fe3935399d380d254996e4263586c80",
      "in_reply_to_id": 1662855604,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2024-07-31T13:26:04Z",
      "updated_at": "2024-07-31T13:26:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1698508719",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1698508719"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 68,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1698509353",
      "pull_request_review_id": 2210169976,
      "id": 1698509353,
      "node_id": "PRRC_kwDOABII585lPTIp",
      "diff_hunk": "@@ -0,0 +1,307 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test how locally submitted transactions are sent to the network when private broadcast is used.\n+\n+The topology in the test is:\n+\n+Bitcoin Core (tx_originator)\n+               ^   v       The default full-outbound + block-only connections\n+               |   |       (MAX_OUTBOUND_FULL_RELAY_CONNECTIONS + MAX_BLOCK_RELAY_ONLY_CONNECTIONS):\n+               |   |\n+               |   *-----> SOCKS5 Proxy ---> P2PInterface (self.socks5_server.conf.destinations[0][\"node\"])\n+               |   |\n+               |   *-----> SOCKS5 Proxy ---> P2PInterface (self.socks5_server.conf.destinations[1][\"node\"])\n+               |   ...\n+               |   |       The private broadcast TX recipients\n+               |   |       (NUM_PRIVATE_BROADCAST_PER_TX)\n+               |   |       plus maybe some feeler or extra block only connections:\n+               |   |\n+               |   *-----> SOCKS5 Proxy ---> Bitcoin Core (node1) (self.socks5_server.conf.destinations[i][\"node\"] is None)\n+               |   |                          ^\n+               |   |                          *----< P2PInterface (far_observer) (to check Bitcoin Core relays the tx)\n+               |   |\n+               |   *-----> SOCKS5 Proxy ---> P2PInterface (self.socks5_server.conf.destinations[i + 1][\"node\"])\n+               |   ...\n+               |\n+               *---------< P2PDataStore (observer_inbound)\n+\"\"\"\n+\n+from test_framework.p2p import (\n+    P2PDataStore,\n+    P2PInterface,\n+    P2P_SERVICES,\n+    P2P_VERSION,\n+)\n+from test_framework.messages import (\n+    CAddress,\n+    CInv,\n+    MSG_WTX,\n+    msg_inv,\n+)\n+from test_framework.socks5 import (\n+    Socks5Configuration,\n+    Socks5Server,\n+)\n+from test_framework.test_framework import (\n+    BitcoinTestFramework,\n+)\n+from test_framework.util import (\n+    MAX_NODES,\n+    assert_equal,\n+    p2p_port,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+)\n+\n+MAX_OUTBOUND_FULL_RELAY_CONNECTIONS = 8\n+MAX_BLOCK_RELAY_ONLY_CONNECTIONS = 2\n+NUM_INITIAL_CONNECTIONS = MAX_OUTBOUND_FULL_RELAY_CONNECTIONS + MAX_BLOCK_RELAY_ONLY_CONNECTIONS\n+NUM_PRIVATE_BROADCAST_PER_TX = 5\n+\n+# Fill addrman with these addresses. Must have enough Tor addresses, so that even\n+# if all 10 default connections are opened to a Tor address (!?) there must be more\n+# for private broadcast.\n+addresses = [\n+    \"1.65.195.98\",\n+    \"2.59.236.56\",\n+    \"2.83.114.20\",\n+    \"2.248.194.16\",\n+    \"5.2.154.6\",\n+    \"5.101.140.30\",\n+    \"5.128.87.126\",\n+    \"5.144.21.49\",\n+    \"5.172.132.104\",\n+    \"5.188.62.18\",\n+    \"5.200.2.180\",\n+    \"8.129.184.255\",\n+    \"8.209.105.138\",\n+    \"12.34.98.148\",\n+    \"14.199.102.151\",\n+    \"18.27.79.17\",\n+    \"18.27.124.231\",\n+    \"18.216.249.151\",\n+    \"23.88.155.58\",\n+    \"23.93.101.158\",\n+    \"[2001:19f0:1000:1db3:5400:4ff:fe56:5a8d]\",\n+    \"[2001:19f0:5:24da:3eec:efff:feb9:f36e]\",\n+    \"[2001:19f0:5:24da::]\",\n+    \"[2001:19f0:5:4535:3eec:efff:feb9:87e4]\",\n+    \"[2001:19f0:5:4535::]\",\n+    \"[2001:1bc0:c1::2000]\",\n+    \"[2001:1c04:4008:6300:8a5f:2678:114b:a660]\",\n+    \"[2001:41d0:203:3739::]\",\n+    \"[2001:41d0:203:8f49::]\",\n+    \"[2001:41d0:203:bb0a::]\",\n+    \"[2001:41d0:2:bf8f::]\",\n+    \"[2001:41d0:303:de8b::]\",\n+    \"[2001:41d0:403:3d61::]\",\n+    \"[2001:41d0:405:9600::]\",\n+    \"[2001:41d0:8:ed7f::1]\",\n+    \"[2001:41d0:a:69a2::1]\",\n+    \"[2001:41f0::62:6974:636f:696e]\",\n+    \"[2001:470:1b62::]\",\n+    \"[2001:470:1f05:43b:2831:8530:7179:5864]\",\n+    \"[2001:470:1f09:b14::11]\",\n+    \"2bqghnldu6mcug4pikzprwhtjjnsyederctvci6klcwzepnjd46ikjyd.onion\",\n+    \"4lr3w2iyyl5u5l6tosizclykf5v3smqroqdn2i4h3kq6pfbbjb2xytad.onion\",\n+    \"5g72ppm3krkorsfopcm2bi7wlv4ohhs4u4mlseymasn7g7zhdcyjpfid.onion\",\n+    \"5sbmcl4m5api5tqafi4gcckrn3y52sz5mskxf3t6iw4bp7erwiptrgqd.onion\",\n+    \"776aegl7tfhg6oiqqy76jnwrwbvcytsx2qegcgh2mjqujll4376ohlid.onion\",\n+    \"77mdte42srl42shdh2mhtjr7nf7dmedqrw6bkcdekhdvmnld6ojyyiad.onion\",\n+    \"azbpsh4arqlm6442wfimy7qr65bmha2zhgjg7wbaji6vvaug53hur2qd.onion\",\n+    \"b64xcbleqmwgq2u46bh4hegnlrzzvxntyzbmucn3zt7cssm7y4ubv3id.onion\",\n+    \"bsqbtcparrfihlwolt4xgjbf4cgqckvrvsfyvy6vhiqrnh4w6ghixoid.onion\",\n+    \"bsqbtctulf2g4jtjsdfgl2ed7qs6zz5wqx27qnyiik7laockryvszqqd.onion\",\n+    \"cwi3ekrwhig47dhhzfenr5hbvckj7fzaojygvazi2lucsenwbzwoyiqd.onion\",\n+    \"devinbtcmwkuitvxl3tfi5of4zau46ymeannkjv6fpnylkgf3q5fa3id.onion\",\n+    \"devinbtcyk643iruzfpaxw3on2jket7rbjmwygm42dmdyub3ietrbmid.onion\",\n+    \"dtql5vci4iaml4anmueftqr7bfgzqlauzfy4rc2tfgulldd3ekyijjyd.onion\",\n+    \"emzybtc25oddoa2prol2znpz2axnrg6k77xwgirmhv7igoiucddsxiad.onion\",\n+    \"emzybtc3ewh7zihpkdvuwlgxrhzcxy2p5fvjggp7ngjbxcytxvt4rjid.onion\",\n+    \"emzybtc454ewbviqnmgtgx3rgublsgkk23r4onbhidcv36wremue4kqd.onion\",\n+    \"emzybtc5bnpb2o6gh54oquiox54o4r7yn4a2wiiwzrjonlouaibm2zid.onion\",\n+    \"fpz6r5ppsakkwypjcglz6gcnwt7ytfhxskkfhzu62tnylcknh3eq6pad.onion\",\n+    \"255fhcp6ajvftnyo7bwz3an3t4a4brhopm3bamyh2iu5r3gnr2rq.b32.i2p\",\n+    \"27yrtht5b5bzom2w5ajb27najuqvuydtzb7bavlak25wkufec5mq.b32.i2p\",\n+    \"3gocb7wc4zvbmmebktet7gujccuux4ifk3kqilnxnj5wpdpqx2hq.b32.i2p\",\n+    \"4fcc23wt3hyjk3csfzcdyjz5pcwg5dzhdqgma6bch2qyiakcbboa.b32.i2p\",\n+    \"4osyqeknhx5qf3a73jeimexwclmt42cju6xdp7icja4ixxguu2hq.b32.i2p\",\n+    \"4umsi4nlmgyp4rckosg4vegd2ysljvid47zu7pqsollkaszcbpqq.b32.i2p\",\n+    \"6j2ezegd3e2e2x3o3pox335f5vxfthrrigkdrbgfbdjchm5h4awa.b32.i2p\",\n+    \"6n36ljyr55szci5ygidmxqer64qr24f4qmnymnbvgehz7qinxnla.b32.i2p\",\n+    \"72yjs6mvlby3ky6mgpvvlemmwq5pfcznrzd34jkhclgrishqdxva.b32.i2p\",\n+    \"a5qsnv3maw77mlmmzlcglu6twje6ttctd3fhpbfwcbpmewx6fczq.b32.i2p\",\n+    \"aovep2pco7v2k4rheofrgytbgk23eg22dczpsjqgqtxcqqvmxk6a.b32.i2p\",\n+    \"bitcoi656nll5hu6u7ddzrmzysdtwtnzcnrjd4rfdqbeey7dmn5a.b32.i2p\",\n+    \"brifkruhlkgrj65hffybrjrjqcgdgqs2r7siizb5b2232nruik3a.b32.i2p\",\n+    \"c4gfnttsuwqomiygupdqqqyy5y5emnk5c73hrfvatri67prd7vyq.b32.i2p\",\n+    \"day3hgxyrtwjslt54sikevbhxxs4qzo7d6vi72ipmscqtq3qmijq.b32.i2p\",\n+    \"du5kydummi23bjfp6bd7owsvrijgt7zhvxmz5h5f5spcioeoetwq.b32.i2p\",\n+    \"e55k6wu46rzp4pg5pk5npgbr3zz45bc3ihtzu2xcye5vwnzdy7pq.b32.i2p\",\n+    \"eciohu5nq7vsvwjjc52epskuk75d24iccgzmhbzrwonw6lx4gdva.b32.i2p\",\n+    \"ejlnngarmhqvune74ko7kk55xtgbz5i5ncs4vmnvjpy3l7y63xaa.b32.i2p\",\n+    \"fhzlp3xroabohnmjonu5iqazwhlbbwh5cpujvw2azcu3srqdceja.b32.i2p\",\n+    \"[fc32:17ea:e415:c3bf:9808:149d:b5a2:c9aa]\",\n+    \"[fcc7:be49:ccd1:dc91:3125:f0da:457d:8ce]\",\n+    \"[fcdc:73ae:b1a9:1bf8:d4c2:811:a4c7:c34e]\",\n+]\n+\n+class P2PPrivateBroadcast(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.disable_autoconnect = False\n+        self.num_nodes = 2\n+\n+    def setup_nodes(self):\n+        # Start a SOCKS5 proxy server.\n+        socks5_server_config = Socks5Configuration()\n+        # self.nodes[0] listens on p2p_port(0),\n+        # self.nodes[1] listens on p2p_port(1),\n+        # thus we tell the SOCKS5 server to listen on p2p_port(self.num_nodes (which is 2))\n+        socks5_server_config.addr = (\"127.0.0.1\", p2p_port(self.num_nodes))\n+        socks5_server_config.unauth = True\n+        socks5_server_config.auth = True\n+\n+        self.socks5_server = Socks5Server(socks5_server_config)\n+        self.socks5_server.start()\n+\n+        ports_base = p2p_port(MAX_NODES) + 15000\n+\n+        # Add 2 because one feeler and one extra block relay connections may\n+        # sneak in between the private broadcast connections.\n+        for i in range(NUM_INITIAL_CONNECTIONS + NUM_PRIVATE_BROADCAST_PER_TX + 2):\n+            if i == NUM_INITIAL_CONNECTIONS:\n+                # Instruct the SOCKS5 server to redirect the first private\n+                # broadcast connection from nodes[0] to nodes[1]\n+                self.socks5_server.conf.destinations.append({\n+                    \"to_addr\": \"127.0.0.1\", # nodes[1] listen address\n+                    \"to_port\": p2p_port(1), # nodes[1] listen port\n+                    \"node\": None,\n+                    \"requested_to_addr\": None,\n+                })\n+            else:\n+                # Create a Python P2P listening node and add it to self.socks5_server.conf.destinations[]\n+                listener = P2PInterface()\n+                listener.peer_connect_helper(dstaddr=\"0.0.0.0\", dstport=0, net=self.chain, timeout_factor=self.options.timeout_factor)\n+                listener.peer_connect_send_version(services=P2P_SERVICES)\n+                self.network_thread.listen(\n+                    p2p=listener,\n+                    # Instruct the SOCKS5 server to redirect a connection to this Python P2P listener.\n+                    callback=lambda addr, port: self.socks5_server.conf.destinations.append({\n+                        \"to_addr\": addr,\n+                        \"to_port\": port,\n+                        \"node\": None,\n+                        \"requested_to_addr\": None,\n+                    }),\n+                    addr=\"127.0.0.1\",\n+                    port=ports_base + i)\n+                # Wait until the callback has been called and it has done append().\n+                self.wait_until(lambda: len(self.socks5_server.conf.destinations) == i + 1)\n+\n+                self.socks5_server.conf.destinations[i][\"node\"] = listener\n+\n+        self.extra_args = [\n+            [\n+                \"-cjdnsreachable\", # needed to be able to add CJDNS addresses to addrman (otherwise they are unroutable).\n+                \"-test=addrman\",\n+                \"-privatebroadcast\",\n+                f\"-proxy={socks5_server_config.addr[0]}:{socks5_server_config.addr[1]}\",\n+            ],\n+            [\n+                \"-connect=0\",\n+                f\"-bind=127.0.0.1:{p2p_port(1)}=onion\", # consider all incoming as coming from Tor\n+            ],\n+        ]\n+        super().setup_nodes()\n+\n+    def setup_network(self):\n+        self.setup_nodes()\n+\n+    def run_test(self):\n+        tx_originator = self.nodes[0]\n+\n+        observer_inbound = tx_originator.add_p2p_connection(P2PDataStore())\n+\n+        # Fill tx_originator's addrman.\n+        for addr in addresses:\n+            res = tx_originator.addpeeraddress(address=addr, port=8333, tried=False)\n+            if not res[\"success\"]:\n+                self.log.debug(f\"Could not add {addr} to tx_originator's addrman (collision?)\")\n+\n+        self.wait_until(lambda: self.socks5_server.conf.destinations_used == NUM_INITIAL_CONNECTIONS)\n+\n+        node1 = self.nodes[1]",
      "path": "test/functional/p2p_private_broadcast.py",
      "position": null,
      "original_position": 236,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "3bd618a91fe3935399d380d254996e4263586c80",
      "in_reply_to_id": 1662998546,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done, even though there is more than one tx receiver.",
      "created_at": "2024-07-31T13:26:27Z",
      "updated_at": "2024-07-31T13:26:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1698509353",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1698509353"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 236,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1698517255",
      "pull_request_review_id": 2210183207,
      "id": 1698517255,
      "node_id": "PRRC_kwDOABII585lPVEH",
      "diff_hunk": "@@ -0,0 +1,307 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test how locally submitted transactions are sent to the network when private broadcast is used.\n+\n+The topology in the test is:\n+\n+Bitcoin Core (tx_originator)\n+               ^   v       The default full-outbound + block-only connections\n+               |   |       (MAX_OUTBOUND_FULL_RELAY_CONNECTIONS + MAX_BLOCK_RELAY_ONLY_CONNECTIONS):\n+               |   |\n+               |   *-----> SOCKS5 Proxy ---> P2PInterface (self.socks5_server.conf.destinations[0][\"node\"])\n+               |   |\n+               |   *-----> SOCKS5 Proxy ---> P2PInterface (self.socks5_server.conf.destinations[1][\"node\"])\n+               |   ...\n+               |   |       The private broadcast TX recipients\n+               |   |       (NUM_PRIVATE_BROADCAST_PER_TX)\n+               |   |       plus maybe some feeler or extra block only connections:\n+               |   |\n+               |   *-----> SOCKS5 Proxy ---> Bitcoin Core (node1) (self.socks5_server.conf.destinations[i][\"node\"] is None)\n+               |   |                          ^\n+               |   |                          *----< P2PInterface (far_observer) (to check Bitcoin Core relays the tx)\n+               |   |\n+               |   *-----> SOCKS5 Proxy ---> P2PInterface (self.socks5_server.conf.destinations[i + 1][\"node\"])\n+               |   ...\n+               |\n+               *---------< P2PDataStore (observer_inbound)\n+\"\"\"\n+\n+from test_framework.p2p import (\n+    P2PDataStore,\n+    P2PInterface,\n+    P2P_SERVICES,\n+    P2P_VERSION,\n+)\n+from test_framework.messages import (\n+    CAddress,\n+    CInv,\n+    MSG_WTX,\n+    msg_inv,\n+)\n+from test_framework.socks5 import (\n+    Socks5Configuration,\n+    Socks5Server,\n+)\n+from test_framework.test_framework import (\n+    BitcoinTestFramework,\n+)\n+from test_framework.util import (\n+    MAX_NODES,\n+    assert_equal,\n+    p2p_port,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+)\n+\n+MAX_OUTBOUND_FULL_RELAY_CONNECTIONS = 8\n+MAX_BLOCK_RELAY_ONLY_CONNECTIONS = 2\n+NUM_INITIAL_CONNECTIONS = MAX_OUTBOUND_FULL_RELAY_CONNECTIONS + MAX_BLOCK_RELAY_ONLY_CONNECTIONS\n+NUM_PRIVATE_BROADCAST_PER_TX = 5\n+\n+# Fill addrman with these addresses. Must have enough Tor addresses, so that even\n+# if all 10 default connections are opened to a Tor address (!?) there must be more\n+# for private broadcast.\n+addresses = [\n+    \"1.65.195.98\",\n+    \"2.59.236.56\",\n+    \"2.83.114.20\",\n+    \"2.248.194.16\",\n+    \"5.2.154.6\",\n+    \"5.101.140.30\",\n+    \"5.128.87.126\",\n+    \"5.144.21.49\",\n+    \"5.172.132.104\",\n+    \"5.188.62.18\",\n+    \"5.200.2.180\",\n+    \"8.129.184.255\",\n+    \"8.209.105.138\",\n+    \"12.34.98.148\",\n+    \"14.199.102.151\",\n+    \"18.27.79.17\",\n+    \"18.27.124.231\",\n+    \"18.216.249.151\",\n+    \"23.88.155.58\",\n+    \"23.93.101.158\",\n+    \"[2001:19f0:1000:1db3:5400:4ff:fe56:5a8d]\",\n+    \"[2001:19f0:5:24da:3eec:efff:feb9:f36e]\",\n+    \"[2001:19f0:5:24da::]\",\n+    \"[2001:19f0:5:4535:3eec:efff:feb9:87e4]\",\n+    \"[2001:19f0:5:4535::]\",\n+    \"[2001:1bc0:c1::2000]\",\n+    \"[2001:1c04:4008:6300:8a5f:2678:114b:a660]\",\n+    \"[2001:41d0:203:3739::]\",\n+    \"[2001:41d0:203:8f49::]\",\n+    \"[2001:41d0:203:bb0a::]\",\n+    \"[2001:41d0:2:bf8f::]\",\n+    \"[2001:41d0:303:de8b::]\",\n+    \"[2001:41d0:403:3d61::]\",\n+    \"[2001:41d0:405:9600::]\",\n+    \"[2001:41d0:8:ed7f::1]\",\n+    \"[2001:41d0:a:69a2::1]\",\n+    \"[2001:41f0::62:6974:636f:696e]\",\n+    \"[2001:470:1b62::]\",\n+    \"[2001:470:1f05:43b:2831:8530:7179:5864]\",\n+    \"[2001:470:1f09:b14::11]\",\n+    \"2bqghnldu6mcug4pikzprwhtjjnsyederctvci6klcwzepnjd46ikjyd.onion\",\n+    \"4lr3w2iyyl5u5l6tosizclykf5v3smqroqdn2i4h3kq6pfbbjb2xytad.onion\",\n+    \"5g72ppm3krkorsfopcm2bi7wlv4ohhs4u4mlseymasn7g7zhdcyjpfid.onion\",\n+    \"5sbmcl4m5api5tqafi4gcckrn3y52sz5mskxf3t6iw4bp7erwiptrgqd.onion\",\n+    \"776aegl7tfhg6oiqqy76jnwrwbvcytsx2qegcgh2mjqujll4376ohlid.onion\",\n+    \"77mdte42srl42shdh2mhtjr7nf7dmedqrw6bkcdekhdvmnld6ojyyiad.onion\",\n+    \"azbpsh4arqlm6442wfimy7qr65bmha2zhgjg7wbaji6vvaug53hur2qd.onion\",\n+    \"b64xcbleqmwgq2u46bh4hegnlrzzvxntyzbmucn3zt7cssm7y4ubv3id.onion\",\n+    \"bsqbtcparrfihlwolt4xgjbf4cgqckvrvsfyvy6vhiqrnh4w6ghixoid.onion\",\n+    \"bsqbtctulf2g4jtjsdfgl2ed7qs6zz5wqx27qnyiik7laockryvszqqd.onion\",\n+    \"cwi3ekrwhig47dhhzfenr5hbvckj7fzaojygvazi2lucsenwbzwoyiqd.onion\",\n+    \"devinbtcmwkuitvxl3tfi5of4zau46ymeannkjv6fpnylkgf3q5fa3id.onion\",\n+    \"devinbtcyk643iruzfpaxw3on2jket7rbjmwygm42dmdyub3ietrbmid.onion\",\n+    \"dtql5vci4iaml4anmueftqr7bfgzqlauzfy4rc2tfgulldd3ekyijjyd.onion\",\n+    \"emzybtc25oddoa2prol2znpz2axnrg6k77xwgirmhv7igoiucddsxiad.onion\",\n+    \"emzybtc3ewh7zihpkdvuwlgxrhzcxy2p5fvjggp7ngjbxcytxvt4rjid.onion\",\n+    \"emzybtc454ewbviqnmgtgx3rgublsgkk23r4onbhidcv36wremue4kqd.onion\",\n+    \"emzybtc5bnpb2o6gh54oquiox54o4r7yn4a2wiiwzrjonlouaibm2zid.onion\",\n+    \"fpz6r5ppsakkwypjcglz6gcnwt7ytfhxskkfhzu62tnylcknh3eq6pad.onion\",\n+    \"255fhcp6ajvftnyo7bwz3an3t4a4brhopm3bamyh2iu5r3gnr2rq.b32.i2p\",\n+    \"27yrtht5b5bzom2w5ajb27najuqvuydtzb7bavlak25wkufec5mq.b32.i2p\",\n+    \"3gocb7wc4zvbmmebktet7gujccuux4ifk3kqilnxnj5wpdpqx2hq.b32.i2p\",\n+    \"4fcc23wt3hyjk3csfzcdyjz5pcwg5dzhdqgma6bch2qyiakcbboa.b32.i2p\",\n+    \"4osyqeknhx5qf3a73jeimexwclmt42cju6xdp7icja4ixxguu2hq.b32.i2p\",\n+    \"4umsi4nlmgyp4rckosg4vegd2ysljvid47zu7pqsollkaszcbpqq.b32.i2p\",\n+    \"6j2ezegd3e2e2x3o3pox335f5vxfthrrigkdrbgfbdjchm5h4awa.b32.i2p\",\n+    \"6n36ljyr55szci5ygidmxqer64qr24f4qmnymnbvgehz7qinxnla.b32.i2p\",\n+    \"72yjs6mvlby3ky6mgpvvlemmwq5pfcznrzd34jkhclgrishqdxva.b32.i2p\",\n+    \"a5qsnv3maw77mlmmzlcglu6twje6ttctd3fhpbfwcbpmewx6fczq.b32.i2p\",\n+    \"aovep2pco7v2k4rheofrgytbgk23eg22dczpsjqgqtxcqqvmxk6a.b32.i2p\",\n+    \"bitcoi656nll5hu6u7ddzrmzysdtwtnzcnrjd4rfdqbeey7dmn5a.b32.i2p\",\n+    \"brifkruhlkgrj65hffybrjrjqcgdgqs2r7siizb5b2232nruik3a.b32.i2p\",\n+    \"c4gfnttsuwqomiygupdqqqyy5y5emnk5c73hrfvatri67prd7vyq.b32.i2p\",\n+    \"day3hgxyrtwjslt54sikevbhxxs4qzo7d6vi72ipmscqtq3qmijq.b32.i2p\",\n+    \"du5kydummi23bjfp6bd7owsvrijgt7zhvxmz5h5f5spcioeoetwq.b32.i2p\",\n+    \"e55k6wu46rzp4pg5pk5npgbr3zz45bc3ihtzu2xcye5vwnzdy7pq.b32.i2p\",\n+    \"eciohu5nq7vsvwjjc52epskuk75d24iccgzmhbzrwonw6lx4gdva.b32.i2p\",\n+    \"ejlnngarmhqvune74ko7kk55xtgbz5i5ncs4vmnvjpy3l7y63xaa.b32.i2p\",\n+    \"fhzlp3xroabohnmjonu5iqazwhlbbwh5cpujvw2azcu3srqdceja.b32.i2p\",\n+    \"[fc32:17ea:e415:c3bf:9808:149d:b5a2:c9aa]\",\n+    \"[fcc7:be49:ccd1:dc91:3125:f0da:457d:8ce]\",\n+    \"[fcdc:73ae:b1a9:1bf8:d4c2:811:a4c7:c34e]\",\n+]\n+\n+class P2PPrivateBroadcast(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.disable_autoconnect = False\n+        self.num_nodes = 2\n+\n+    def setup_nodes(self):\n+        # Start a SOCKS5 proxy server.\n+        socks5_server_config = Socks5Configuration()\n+        # self.nodes[0] listens on p2p_port(0),\n+        # self.nodes[1] listens on p2p_port(1),\n+        # thus we tell the SOCKS5 server to listen on p2p_port(self.num_nodes (which is 2))\n+        socks5_server_config.addr = (\"127.0.0.1\", p2p_port(self.num_nodes))\n+        socks5_server_config.unauth = True\n+        socks5_server_config.auth = True\n+\n+        self.socks5_server = Socks5Server(socks5_server_config)\n+        self.socks5_server.start()\n+\n+        ports_base = p2p_port(MAX_NODES) + 15000\n+\n+        # Add 2 because one feeler and one extra block relay connections may\n+        # sneak in between the private broadcast connections.\n+        for i in range(NUM_INITIAL_CONNECTIONS + NUM_PRIVATE_BROADCAST_PER_TX + 2):\n+            if i == NUM_INITIAL_CONNECTIONS:\n+                # Instruct the SOCKS5 server to redirect the first private\n+                # broadcast connection from nodes[0] to nodes[1]\n+                self.socks5_server.conf.destinations.append({\n+                    \"to_addr\": \"127.0.0.1\", # nodes[1] listen address\n+                    \"to_port\": p2p_port(1), # nodes[1] listen port\n+                    \"node\": None,\n+                    \"requested_to_addr\": None,\n+                })\n+            else:\n+                # Create a Python P2P listening node and add it to self.socks5_server.conf.destinations[]\n+                listener = P2PInterface()\n+                listener.peer_connect_helper(dstaddr=\"0.0.0.0\", dstport=0, net=self.chain, timeout_factor=self.options.timeout_factor)\n+                listener.peer_connect_send_version(services=P2P_SERVICES)\n+                self.network_thread.listen(\n+                    p2p=listener,\n+                    # Instruct the SOCKS5 server to redirect a connection to this Python P2P listener.\n+                    callback=lambda addr, port: self.socks5_server.conf.destinations.append({\n+                        \"to_addr\": addr,\n+                        \"to_port\": port,\n+                        \"node\": None,\n+                        \"requested_to_addr\": None,\n+                    }),\n+                    addr=\"127.0.0.1\",\n+                    port=ports_base + i)\n+                # Wait until the callback has been called and it has done append().\n+                self.wait_until(lambda: len(self.socks5_server.conf.destinations) == i + 1)\n+\n+                self.socks5_server.conf.destinations[i][\"node\"] = listener\n+\n+        self.extra_args = [\n+            [\n+                \"-cjdnsreachable\", # needed to be able to add CJDNS addresses to addrman (otherwise they are unroutable).\n+                \"-test=addrman\",\n+                \"-privatebroadcast\",\n+                f\"-proxy={socks5_server_config.addr[0]}:{socks5_server_config.addr[1]}\",\n+            ],\n+            [\n+                \"-connect=0\",\n+                f\"-bind=127.0.0.1:{p2p_port(1)}=onion\", # consider all incoming as coming from Tor\n+            ],\n+        ]\n+        super().setup_nodes()\n+\n+    def setup_network(self):\n+        self.setup_nodes()\n+\n+    def run_test(self):\n+        tx_originator = self.nodes[0]\n+\n+        observer_inbound = tx_originator.add_p2p_connection(P2PDataStore())\n+\n+        # Fill tx_originator's addrman.\n+        for addr in addresses:\n+            res = tx_originator.addpeeraddress(address=addr, port=8333, tried=False)\n+            if not res[\"success\"]:\n+                self.log.debug(f\"Could not add {addr} to tx_originator's addrman (collision?)\")\n+\n+        self.wait_until(lambda: self.socks5_server.conf.destinations_used == NUM_INITIAL_CONNECTIONS)\n+\n+        node1 = self.nodes[1]\n+        far_observer = node1.add_p2p_connection(P2PInterface())\n+\n+        # The next opened connections should be \"private broadcast\" for sending the transaction.\n+\n+        miniwallet = MiniWallet(tx_originator)\n+        tx = miniwallet.send_self_transfer(from_node=tx_originator)\n+        self.log.info(f\"Created transaction txid={tx['txid']}\")\n+\n+        self.log.debug(f\"Inspecting outbound connection i={NUM_INITIAL_CONNECTIONS}, must be the first private broadcast connection\")\n+        self.wait_until(lambda: len(node1.getrawmempool()) > 0)\n+        far_observer.wait_for_tx(tx[\"txid\"])\n+        self.log.debug(f\"Outbound connection i={NUM_INITIAL_CONNECTIONS}: the private broadcast target received and further relayed the transaction\")\n+\n+        num_private_broadcast_opened = 1 # already 1 connection to node1, confirmed by far_observer getting the tx\n+        for i in range(NUM_INITIAL_CONNECTIONS + 1, len(self.socks5_server.conf.destinations)):\n+            self.log.debug(f\"Inspecting outbound connection i={i}\")\n+            # At this point the connection may not yet have been established (A),\n+            # may be active (B), or may have already been closed (C).\n+            peer = self.socks5_server.conf.destinations[i][\"node\"]\n+            peer.wait_until(lambda: peer.message_count[\"version\"] == 1, check_connected=False)\n+            # Now it is either (B) or (C).\n+            requested_to_addr = self.socks5_server.conf.destinations[i][\"requested_to_addr\"]\n+            if peer.last_message[\"version\"].nServices != 0:\n+                self.log.debug(f\"Outbound connection i={i} to {requested_to_addr} not a private broadcast, ignoring it (maybe feeler or extra block only)\")\n+                continue\n+            self.log.debug(f\"Outbound connection i={i} to {requested_to_addr} must be a private broadcast, checking it\")\n+            peer.wait_for_disconnect()\n+            # Now it is (C).\n+            assert_equal(peer.message_count, {\n+                \"version\": 1,\n+                \"verack\": 1,\n+                \"tx\": 1,\n+                \"ping\": 1\n+            })\n+            dummy_address = CAddress()\n+            dummy_address.nServices = 0\n+            assert_equal(peer.last_message[\"version\"].nVersion, P2P_VERSION)\n+            assert_equal(peer.last_message[\"version\"].nServices, 0)\n+            assert_equal(peer.last_message[\"version\"].nTime, 0)\n+            assert_equal(peer.last_message[\"version\"].addrTo, dummy_address)\n+            assert_equal(peer.last_message[\"version\"].addrFrom, dummy_address)\n+            assert_equal(peer.last_message[\"version\"].strSubVer, \"/pynode:0.0.1/\")\n+            assert_equal(peer.last_message[\"version\"].nStartingHeight, 0)\n+            assert_equal(peer.last_message[\"version\"].relay, 0)\n+            assert_equal(peer.last_message[\"tx\"].tx.rehash(), tx[\"txid\"])\n+            self.log.debug(f\"Outbound connection i={i} is proper private broadcast, test ok\")\n+            num_private_broadcast_opened += 1\n+            if num_private_broadcast_opened == NUM_PRIVATE_BROADCAST_PER_TX:\n+                break\n+        assert_equal(num_private_broadcast_opened, NUM_PRIVATE_BROADCAST_PER_TX)\n+\n+        wtxid_int = int(tx[\"wtxid\"], 16)\n+        inv = CInv(MSG_WTX, wtxid_int)\n+\n+        self.log.info(\"Checking that the transaction is not in the originator node's mempool\")\n+        assert_equal(len(tx_originator.getrawmempool()), 0)\n+\n+        self.log.info(\"Sending INV from an observer and waiting for GETDATA from node\")\n+        observer_inbound.tx_store[wtxid_int] = tx[\"tx\"]\n+        assert \"getdata\" not in observer_inbound.last_message\n+        observer_inbound.send_message(msg_inv([inv]))\n+        observer_inbound.wait_until(lambda: \"getdata\" in observer_inbound.last_message)\n+        self.wait_until(lambda: len(tx_originator.getrawmempool()) > 0)\n+\n+        self.log.info(\"Waiting for normal broadcast to another observer\")\n+        observer_outbound = self.socks5_server.conf.destinations[0][\"node\"]\n+        observer_outbound.wait_for_inv([inv])",
      "path": "test/functional/p2p_private_broadcast.py",
      "position": null,
      "original_position": 303,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "3bd618a91fe3935399d380d254996e4263586c80",
      "in_reply_to_id": 1663040526,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> I think the test needs coverage for:\r\n\r\nI was stuck at https://github.com/bitcoin/bitcoin/issues/30543, thank you @mzumsande for resolving it!\r\n\r\n>     1. retrying broadcasts\r\n\r\nDone.\r\n\r\n>     2. sending the same tx again via sendrawtransaction\r\n\r\nDone.\r\n\r\n>     3. sending a different wtxid via sendrawtransaction\r\n\r\nDone, but the new tx has garbage witness. Would be nice to add one more test with a valid but different witness.\r\n\r\n>     4. sending a tx with in-mempool dependencies (both that succeed and fail due to existing/missing parent)\r\n\r\nDone, both.\r\n\r\n>     5. rpc failing if it detects `!g_reachable_nets`\r\n\r\nDone.\r\n\r\n>     6. what happens if there's not enough private connections when first broadcast attempt is tried, but more found later\r\n\r\nPrivate broadcast connections are created on demand. When first broadcast attempt is tried they are 0 (I did not add new test).\r\n\r\n>     7. what happens to pending broadcasts on restart of node\r\n\r\nThey are lost. Persistence over restart is not in this PR, but will be in a subsequent one (I did not add new test).",
      "created_at": "2024-07-31T13:31:32Z",
      "updated_at": "2024-07-31T13:31:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1698517255",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1698517255"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 303,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1698661559",
      "pull_request_review_id": 2210418587,
      "id": 1698661559,
      "node_id": "PRRC_kwDOABII585lP4S3",
      "diff_hunk": "@@ -0,0 +1,307 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test how locally submitted transactions are sent to the network when private broadcast is used.\n+\n+The topology in the test is:\n+\n+Bitcoin Core (tx_originator)\n+               ^   v       The default full-outbound + block-only connections\n+               |   |       (MAX_OUTBOUND_FULL_RELAY_CONNECTIONS + MAX_BLOCK_RELAY_ONLY_CONNECTIONS):\n+               |   |\n+               |   *-----> SOCKS5 Proxy ---> P2PInterface (self.socks5_server.conf.destinations[0][\"node\"])\n+               |   |\n+               |   *-----> SOCKS5 Proxy ---> P2PInterface (self.socks5_server.conf.destinations[1][\"node\"])\n+               |   ...\n+               |   |       The private broadcast TX recipients\n+               |   |       (NUM_PRIVATE_BROADCAST_PER_TX)\n+               |   |       plus maybe some feeler or extra block only connections:\n+               |   |\n+               |   *-----> SOCKS5 Proxy ---> Bitcoin Core (node1) (self.socks5_server.conf.destinations[i][\"node\"] is None)\n+               |   |                          ^\n+               |   |                          *----< P2PInterface (far_observer) (to check Bitcoin Core relays the tx)\n+               |   |\n+               |   *-----> SOCKS5 Proxy ---> P2PInterface (self.socks5_server.conf.destinations[i + 1][\"node\"])\n+               |   ...\n+               |\n+               *---------< P2PDataStore (observer_inbound)\n+\"\"\"\n+\n+from test_framework.p2p import (\n+    P2PDataStore,\n+    P2PInterface,\n+    P2P_SERVICES,\n+    P2P_VERSION,\n+)\n+from test_framework.messages import (\n+    CAddress,\n+    CInv,\n+    MSG_WTX,\n+    msg_inv,\n+)\n+from test_framework.socks5 import (\n+    Socks5Configuration,\n+    Socks5Server,\n+)\n+from test_framework.test_framework import (\n+    BitcoinTestFramework,\n+)\n+from test_framework.util import (\n+    MAX_NODES,\n+    assert_equal,\n+    p2p_port,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+)\n+\n+MAX_OUTBOUND_FULL_RELAY_CONNECTIONS = 8\n+MAX_BLOCK_RELAY_ONLY_CONNECTIONS = 2\n+NUM_INITIAL_CONNECTIONS = MAX_OUTBOUND_FULL_RELAY_CONNECTIONS + MAX_BLOCK_RELAY_ONLY_CONNECTIONS\n+NUM_PRIVATE_BROADCAST_PER_TX = 5\n+\n+# Fill addrman with these addresses. Must have enough Tor addresses, so that even\n+# if all 10 default connections are opened to a Tor address (!?) there must be more\n+# for private broadcast.\n+addresses = [\n+    \"1.65.195.98\",\n+    \"2.59.236.56\",\n+    \"2.83.114.20\",\n+    \"2.248.194.16\",\n+    \"5.2.154.6\",\n+    \"5.101.140.30\",\n+    \"5.128.87.126\",\n+    \"5.144.21.49\",\n+    \"5.172.132.104\",\n+    \"5.188.62.18\",\n+    \"5.200.2.180\",\n+    \"8.129.184.255\",\n+    \"8.209.105.138\",\n+    \"12.34.98.148\",\n+    \"14.199.102.151\",\n+    \"18.27.79.17\",\n+    \"18.27.124.231\",\n+    \"18.216.249.151\",\n+    \"23.88.155.58\",\n+    \"23.93.101.158\",\n+    \"[2001:19f0:1000:1db3:5400:4ff:fe56:5a8d]\",\n+    \"[2001:19f0:5:24da:3eec:efff:feb9:f36e]\",\n+    \"[2001:19f0:5:24da::]\",\n+    \"[2001:19f0:5:4535:3eec:efff:feb9:87e4]\",\n+    \"[2001:19f0:5:4535::]\",\n+    \"[2001:1bc0:c1::2000]\",\n+    \"[2001:1c04:4008:6300:8a5f:2678:114b:a660]\",\n+    \"[2001:41d0:203:3739::]\",\n+    \"[2001:41d0:203:8f49::]\",\n+    \"[2001:41d0:203:bb0a::]\",\n+    \"[2001:41d0:2:bf8f::]\",\n+    \"[2001:41d0:303:de8b::]\",\n+    \"[2001:41d0:403:3d61::]\",\n+    \"[2001:41d0:405:9600::]\",\n+    \"[2001:41d0:8:ed7f::1]\",\n+    \"[2001:41d0:a:69a2::1]\",\n+    \"[2001:41f0::62:6974:636f:696e]\",\n+    \"[2001:470:1b62::]\",\n+    \"[2001:470:1f05:43b:2831:8530:7179:5864]\",\n+    \"[2001:470:1f09:b14::11]\",\n+    \"2bqghnldu6mcug4pikzprwhtjjnsyederctvci6klcwzepnjd46ikjyd.onion\",\n+    \"4lr3w2iyyl5u5l6tosizclykf5v3smqroqdn2i4h3kq6pfbbjb2xytad.onion\",\n+    \"5g72ppm3krkorsfopcm2bi7wlv4ohhs4u4mlseymasn7g7zhdcyjpfid.onion\",\n+    \"5sbmcl4m5api5tqafi4gcckrn3y52sz5mskxf3t6iw4bp7erwiptrgqd.onion\",\n+    \"776aegl7tfhg6oiqqy76jnwrwbvcytsx2qegcgh2mjqujll4376ohlid.onion\",\n+    \"77mdte42srl42shdh2mhtjr7nf7dmedqrw6bkcdekhdvmnld6ojyyiad.onion\",\n+    \"azbpsh4arqlm6442wfimy7qr65bmha2zhgjg7wbaji6vvaug53hur2qd.onion\",\n+    \"b64xcbleqmwgq2u46bh4hegnlrzzvxntyzbmucn3zt7cssm7y4ubv3id.onion\",\n+    \"bsqbtcparrfihlwolt4xgjbf4cgqckvrvsfyvy6vhiqrnh4w6ghixoid.onion\",\n+    \"bsqbtctulf2g4jtjsdfgl2ed7qs6zz5wqx27qnyiik7laockryvszqqd.onion\",\n+    \"cwi3ekrwhig47dhhzfenr5hbvckj7fzaojygvazi2lucsenwbzwoyiqd.onion\",\n+    \"devinbtcmwkuitvxl3tfi5of4zau46ymeannkjv6fpnylkgf3q5fa3id.onion\",\n+    \"devinbtcyk643iruzfpaxw3on2jket7rbjmwygm42dmdyub3ietrbmid.onion\",\n+    \"dtql5vci4iaml4anmueftqr7bfgzqlauzfy4rc2tfgulldd3ekyijjyd.onion\",\n+    \"emzybtc25oddoa2prol2znpz2axnrg6k77xwgirmhv7igoiucddsxiad.onion\",\n+    \"emzybtc3ewh7zihpkdvuwlgxrhzcxy2p5fvjggp7ngjbxcytxvt4rjid.onion\",\n+    \"emzybtc454ewbviqnmgtgx3rgublsgkk23r4onbhidcv36wremue4kqd.onion\",\n+    \"emzybtc5bnpb2o6gh54oquiox54o4r7yn4a2wiiwzrjonlouaibm2zid.onion\",\n+    \"fpz6r5ppsakkwypjcglz6gcnwt7ytfhxskkfhzu62tnylcknh3eq6pad.onion\",\n+    \"255fhcp6ajvftnyo7bwz3an3t4a4brhopm3bamyh2iu5r3gnr2rq.b32.i2p\",\n+    \"27yrtht5b5bzom2w5ajb27najuqvuydtzb7bavlak25wkufec5mq.b32.i2p\",\n+    \"3gocb7wc4zvbmmebktet7gujccuux4ifk3kqilnxnj5wpdpqx2hq.b32.i2p\",\n+    \"4fcc23wt3hyjk3csfzcdyjz5pcwg5dzhdqgma6bch2qyiakcbboa.b32.i2p\",\n+    \"4osyqeknhx5qf3a73jeimexwclmt42cju6xdp7icja4ixxguu2hq.b32.i2p\",\n+    \"4umsi4nlmgyp4rckosg4vegd2ysljvid47zu7pqsollkaszcbpqq.b32.i2p\",\n+    \"6j2ezegd3e2e2x3o3pox335f5vxfthrrigkdrbgfbdjchm5h4awa.b32.i2p\",\n+    \"6n36ljyr55szci5ygidmxqer64qr24f4qmnymnbvgehz7qinxnla.b32.i2p\",\n+    \"72yjs6mvlby3ky6mgpvvlemmwq5pfcznrzd34jkhclgrishqdxva.b32.i2p\",\n+    \"a5qsnv3maw77mlmmzlcglu6twje6ttctd3fhpbfwcbpmewx6fczq.b32.i2p\",\n+    \"aovep2pco7v2k4rheofrgytbgk23eg22dczpsjqgqtxcqqvmxk6a.b32.i2p\",\n+    \"bitcoi656nll5hu6u7ddzrmzysdtwtnzcnrjd4rfdqbeey7dmn5a.b32.i2p\",\n+    \"brifkruhlkgrj65hffybrjrjqcgdgqs2r7siizb5b2232nruik3a.b32.i2p\",\n+    \"c4gfnttsuwqomiygupdqqqyy5y5emnk5c73hrfvatri67prd7vyq.b32.i2p\",\n+    \"day3hgxyrtwjslt54sikevbhxxs4qzo7d6vi72ipmscqtq3qmijq.b32.i2p\",\n+    \"du5kydummi23bjfp6bd7owsvrijgt7zhvxmz5h5f5spcioeoetwq.b32.i2p\",\n+    \"e55k6wu46rzp4pg5pk5npgbr3zz45bc3ihtzu2xcye5vwnzdy7pq.b32.i2p\",\n+    \"eciohu5nq7vsvwjjc52epskuk75d24iccgzmhbzrwonw6lx4gdva.b32.i2p\",\n+    \"ejlnngarmhqvune74ko7kk55xtgbz5i5ncs4vmnvjpy3l7y63xaa.b32.i2p\",\n+    \"fhzlp3xroabohnmjonu5iqazwhlbbwh5cpujvw2azcu3srqdceja.b32.i2p\",\n+    \"[fc32:17ea:e415:c3bf:9808:149d:b5a2:c9aa]\",\n+    \"[fcc7:be49:ccd1:dc91:3125:f0da:457d:8ce]\",\n+    \"[fcdc:73ae:b1a9:1bf8:d4c2:811:a4c7:c34e]\",\n+]\n+\n+class P2PPrivateBroadcast(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.disable_autoconnect = False\n+        self.num_nodes = 2\n+\n+    def setup_nodes(self):\n+        # Start a SOCKS5 proxy server.\n+        socks5_server_config = Socks5Configuration()\n+        # self.nodes[0] listens on p2p_port(0),\n+        # self.nodes[1] listens on p2p_port(1),\n+        # thus we tell the SOCKS5 server to listen on p2p_port(self.num_nodes (which is 2))\n+        socks5_server_config.addr = (\"127.0.0.1\", p2p_port(self.num_nodes))\n+        socks5_server_config.unauth = True\n+        socks5_server_config.auth = True\n+\n+        self.socks5_server = Socks5Server(socks5_server_config)\n+        self.socks5_server.start()\n+\n+        ports_base = p2p_port(MAX_NODES) + 15000\n+\n+        # Add 2 because one feeler and one extra block relay connections may\n+        # sneak in between the private broadcast connections.\n+        for i in range(NUM_INITIAL_CONNECTIONS + NUM_PRIVATE_BROADCAST_PER_TX + 2):\n+            if i == NUM_INITIAL_CONNECTIONS:\n+                # Instruct the SOCKS5 server to redirect the first private\n+                # broadcast connection from nodes[0] to nodes[1]\n+                self.socks5_server.conf.destinations.append({\n+                    \"to_addr\": \"127.0.0.1\", # nodes[1] listen address\n+                    \"to_port\": p2p_port(1), # nodes[1] listen port\n+                    \"node\": None,\n+                    \"requested_to_addr\": None,\n+                })\n+            else:\n+                # Create a Python P2P listening node and add it to self.socks5_server.conf.destinations[]\n+                listener = P2PInterface()\n+                listener.peer_connect_helper(dstaddr=\"0.0.0.0\", dstport=0, net=self.chain, timeout_factor=self.options.timeout_factor)\n+                listener.peer_connect_send_version(services=P2P_SERVICES)\n+                self.network_thread.listen(\n+                    p2p=listener,\n+                    # Instruct the SOCKS5 server to redirect a connection to this Python P2P listener.\n+                    callback=lambda addr, port: self.socks5_server.conf.destinations.append({\n+                        \"to_addr\": addr,\n+                        \"to_port\": port,\n+                        \"node\": None,\n+                        \"requested_to_addr\": None,\n+                    }),\n+                    addr=\"127.0.0.1\",\n+                    port=ports_base + i)\n+                # Wait until the callback has been called and it has done append().\n+                self.wait_until(lambda: len(self.socks5_server.conf.destinations) == i + 1)\n+\n+                self.socks5_server.conf.destinations[i][\"node\"] = listener\n+\n+        self.extra_args = [\n+            [\n+                \"-cjdnsreachable\", # needed to be able to add CJDNS addresses to addrman (otherwise they are unroutable).\n+                \"-test=addrman\",\n+                \"-privatebroadcast\",\n+                f\"-proxy={socks5_server_config.addr[0]}:{socks5_server_config.addr[1]}\",\n+            ],\n+            [\n+                \"-connect=0\",\n+                f\"-bind=127.0.0.1:{p2p_port(1)}=onion\", # consider all incoming as coming from Tor\n+            ],\n+        ]\n+        super().setup_nodes()\n+\n+    def setup_network(self):\n+        self.setup_nodes()\n+\n+    def run_test(self):\n+        tx_originator = self.nodes[0]\n+\n+        observer_inbound = tx_originator.add_p2p_connection(P2PDataStore())\n+\n+        # Fill tx_originator's addrman.\n+        for addr in addresses:\n+            res = tx_originator.addpeeraddress(address=addr, port=8333, tried=False)\n+            if not res[\"success\"]:\n+                self.log.debug(f\"Could not add {addr} to tx_originator's addrman (collision?)\")\n+\n+        self.wait_until(lambda: self.socks5_server.conf.destinations_used == NUM_INITIAL_CONNECTIONS)\n+\n+        node1 = self.nodes[1]\n+        far_observer = node1.add_p2p_connection(P2PInterface())\n+\n+        # The next opened connections should be \"private broadcast\" for sending the transaction.\n+\n+        miniwallet = MiniWallet(tx_originator)\n+        tx = miniwallet.send_self_transfer(from_node=tx_originator)\n+        self.log.info(f\"Created transaction txid={tx['txid']}\")\n+\n+        self.log.debug(f\"Inspecting outbound connection i={NUM_INITIAL_CONNECTIONS}, must be the first private broadcast connection\")\n+        self.wait_until(lambda: len(node1.getrawmempool()) > 0)\n+        far_observer.wait_for_tx(tx[\"txid\"])\n+        self.log.debug(f\"Outbound connection i={NUM_INITIAL_CONNECTIONS}: the private broadcast target received and further relayed the transaction\")\n+\n+        num_private_broadcast_opened = 1 # already 1 connection to node1, confirmed by far_observer getting the tx\n+        for i in range(NUM_INITIAL_CONNECTIONS + 1, len(self.socks5_server.conf.destinations)):\n+            self.log.debug(f\"Inspecting outbound connection i={i}\")\n+            # At this point the connection may not yet have been established (A),\n+            # may be active (B), or may have already been closed (C).\n+            peer = self.socks5_server.conf.destinations[i][\"node\"]\n+            peer.wait_until(lambda: peer.message_count[\"version\"] == 1, check_connected=False)\n+            # Now it is either (B) or (C).\n+            requested_to_addr = self.socks5_server.conf.destinations[i][\"requested_to_addr\"]\n+            if peer.last_message[\"version\"].nServices != 0:\n+                self.log.debug(f\"Outbound connection i={i} to {requested_to_addr} not a private broadcast, ignoring it (maybe feeler or extra block only)\")\n+                continue\n+            self.log.debug(f\"Outbound connection i={i} to {requested_to_addr} must be a private broadcast, checking it\")\n+            peer.wait_for_disconnect()\n+            # Now it is (C).\n+            assert_equal(peer.message_count, {\n+                \"version\": 1,\n+                \"verack\": 1,\n+                \"tx\": 1,\n+                \"ping\": 1\n+            })\n+            dummy_address = CAddress()\n+            dummy_address.nServices = 0\n+            assert_equal(peer.last_message[\"version\"].nVersion, P2P_VERSION)\n+            assert_equal(peer.last_message[\"version\"].nServices, 0)\n+            assert_equal(peer.last_message[\"version\"].nTime, 0)\n+            assert_equal(peer.last_message[\"version\"].addrTo, dummy_address)\n+            assert_equal(peer.last_message[\"version\"].addrFrom, dummy_address)\n+            assert_equal(peer.last_message[\"version\"].strSubVer, \"/pynode:0.0.1/\")\n+            assert_equal(peer.last_message[\"version\"].nStartingHeight, 0)\n+            assert_equal(peer.last_message[\"version\"].relay, 0)\n+            assert_equal(peer.last_message[\"tx\"].tx.rehash(), tx[\"txid\"])\n+            self.log.debug(f\"Outbound connection i={i} is proper private broadcast, test ok\")\n+            num_private_broadcast_opened += 1\n+            if num_private_broadcast_opened == NUM_PRIVATE_BROADCAST_PER_TX:\n+                break\n+        assert_equal(num_private_broadcast_opened, NUM_PRIVATE_BROADCAST_PER_TX)\n+\n+        wtxid_int = int(tx[\"wtxid\"], 16)\n+        inv = CInv(MSG_WTX, wtxid_int)\n+\n+        self.log.info(\"Checking that the transaction is not in the originator node's mempool\")\n+        assert_equal(len(tx_originator.getrawmempool()), 0)\n+\n+        self.log.info(\"Sending INV from an observer and waiting for GETDATA from node\")\n+        observer_inbound.tx_store[wtxid_int] = tx[\"tx\"]\n+        assert \"getdata\" not in observer_inbound.last_message\n+        observer_inbound.send_message(msg_inv([inv]))\n+        observer_inbound.wait_until(lambda: \"getdata\" in observer_inbound.last_message)\n+        self.wait_until(lambda: len(tx_originator.getrawmempool()) > 0)\n+\n+        self.log.info(\"Waiting for normal broadcast to another observer\")\n+        observer_outbound = self.socks5_server.conf.destinations[0][\"node\"]\n+        observer_outbound.wait_for_inv([inv])",
      "path": "test/functional/p2p_private_broadcast.py",
      "position": null,
      "original_position": 303,
      "commit_id": "8baf19fb2af5f8c0742ba5ef5007f3e4a632be08",
      "original_commit_id": "3bd618a91fe3935399d380d254996e4263586c80",
      "in_reply_to_id": 1663040526,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "thanks for attending to this laundry list :+1: \r\n\r\n",
      "created_at": "2024-07-31T14:54:18Z",
      "updated_at": "2024-07-31T14:54:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29415#discussion_r1698661559",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1698661559"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 303,
      "side": "RIGHT"
    }
  ]
}