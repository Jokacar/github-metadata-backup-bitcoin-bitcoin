{
  "type": "issue",
  "issue": {
    "id": 2575786142,
    "node_id": "I_kwDOABII586Zh2Ce",
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31062",
    "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
    "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31062/labels%7B/name%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31062/comments",
    "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31062/events",
    "html_url": "https://github.com/bitcoin/bitcoin/issues/31062",
    "number": 31062,
    "state": "open",
    "state_reason": null,
    "title": "Distribute darknet node addresses via DNS seeds using AAAA records",
    "body": "### Please describe the feature you'd like to see added.\r\n\r\nRight now, Bitcoin Core can only receive IPv4 and IPv6 node addresses from DNS seeds. Adding support for darknet addresses would bring the advantages of using DNS seeds (more privacy, faster bootstrapping, etc.) for node discovery to darknet nodes.\r\n\r\n\r\n### Is your feature related to a problem, if so please describe it.\r\n\r\n_No response_\r\n\r\n### Describe the solution you'd like\r\n\r\nBefore TorV2 addresses were deprecated, [Bitcoin Core](https://github.com/bitcoin/bitcoin/blob/5fe6878b5f7c1c97b5c8ae04be9592be73e840c1/src/netaddress.h#L64-L69) and seeds using [sipa's seeder](https://github.com/sipa/bitcoin-seeder/blob/ff482e465ff84ea6fa276d858ccb7ef32e3355d3/netbase.cpp#L535-L543) (and maybe others) supported distributing such addresses by encoding them in AAAA records: Since TorV2 addresses used only 80-bit hashes, they neatly fitted into the 128-bit data field of an AAAA record, leaving plenty of room for a 48bit prefix (from the not publicly routable fc00::/7 subnet) to signal the custom encoding.\r\n\r\nTorV3 and I2p addresses use 256-bits of data, making them too large for single AAAA records. However, such addresses can be serialized using a trimmed BIP155 format (just the net id and address), concatenated, and broken into chunks that fit into AAAA record data fields.\r\n\r\nIn addition to a prefix to signal the custom encoding, correct deserialization requires a sequence number since public resolvers may reorder records.\r\n\r\nTo get a rough estimate for the numbers, consider the following: DNS messages should be at most 512B. The header has a fixed size of 12B. The question section has variable size because it contains the query domain. 30 chars should be sufficient for most seeds, which implies a size of 36B for the question section (32B for the 30 chars, plus 2B each for query type and class). This leaves 464B for the record section. Since AAAA records are 28B each (2B each for name pointer, type, class, length, 4B for TTL, and 128b/16B for data), a DNS reply for regular-length domains can at most contain 16 AAAA records. Hence four bits are required to encode sequence numbers.\r\n\r\nThe publicly unroutable fc00::/7 prefix used in the past uses 7 bits. Extending these by e.g. five more bits for versioning to accommodate for future updates results in a signaling-prefix size of 12 bits, leaving 112 bit (or 14B) for payload:\r\n\r\n```\r\n 0         11 12       15 16                                                       127\r\n+------------+----------+------------------------------------------------------------+\r\n|  Prefix    |   Seq#   |                         Payload                            |\r\n|  (12 bits) | (4 bits) |                        (112 bits)                          |\r\n+------------+----------+------------------------------------------------------------+\r\n```\r\n\r\nAt 16 AAAA records per DNS message, 14B of payload per record and 33B per TorV3/I2P address (net id plus 256-bit data), six TorV3/I2P addresses can be encoded per message.\r\n\r\nCJDNS addresses, which are IPv6 addresses, could be encoded as well; at 17B per address (net id plus 128-bit data), 13 addresses could be encoded per message.\r\n\r\nTo avoid interfering with legacy software, darknet addresses could only be distributed via special subdomains (similar to `x` used for version bits), e.g. `ni`, where `n` stands for network id and `i` for a particular network id specified in BIP155. Example `x9.n4.seed.acme.com.`\r\n\r\nDemo implementation: https://github.com/virtu/darkseed\r\nDemo DNS seed: `dnsseed.21.ninja`\r\n\r\n### Describe any alternatives you've considered\r\n\r\nOriginally, I considered using DNS NULL records, because their data fields allow for an arbitrary amount of binary data, resulting in a much better encoding efficiency than ~50% offered by the proposed AAAA encoding (14B of overhead-including payload per 28B record).\r\n\r\nThis approach, however, has the following shortcomings (as pointed out by [sipa in the forum](https://delvingbitcoin.org/t/hardcoded-seeds-dns-seeds-and-darknet-nodes/1123/6)):\r\n- Depend on external DNS library or extra code to create DNS request with NULL query type\r\n- Public recursive resolvers might not cache DNS NULL records\r\n\r\n### Please leave any additional context\r\n\r\n_No response_",
    "user": {
      "login": "virtu",
      "id": 72414353,
      "node_id": "MDQ6VXNlcjcyNDE0MzUz",
      "avatar_url": "https://avatars.githubusercontent.com/u/72414353?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/virtu",
      "html_url": "https://github.com/virtu",
      "followers_url": "https://api.github.com/users/virtu/followers",
      "following_url": "https://api.github.com/users/virtu/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/virtu/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/virtu/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/virtu/subscriptions",
      "organizations_url": "https://api.github.com/users/virtu/orgs",
      "repos_url": "https://api.github.com/users/virtu/repos",
      "events_url": "https://api.github.com/users/virtu/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/virtu/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 64583,
        "node_id": "MDU6TGFiZWw2NDU4Mw==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Feature",
        "name": "Feature",
        "color": "7cf575",
        "default": false
      }
    ],
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "locked": false,
    "comments": 0,
    "created_at": "2024-10-09T12:27:39Z",
    "updated_at": "2024-10-09T12:37:11Z"
  },
  "events": [
    {
      "event": "labeled",
      "id": 14572117257,
      "node_id": "LE_lADOABII586Zh2CezwAAAANkkN0J",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14572117257",
      "actor": {
        "login": "virtu",
        "id": 72414353,
        "node_id": "MDQ6VXNlcjcyNDE0MzUz",
        "avatar_url": "https://avatars.githubusercontent.com/u/72414353?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/virtu",
        "html_url": "https://github.com/virtu",
        "followers_url": "https://api.github.com/users/virtu/followers",
        "following_url": "https://api.github.com/users/virtu/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/virtu/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/virtu/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/virtu/subscriptions",
        "organizations_url": "https://api.github.com/users/virtu/orgs",
        "repos_url": "https://api.github.com/users/virtu/repos",
        "events_url": "https://api.github.com/users/virtu/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/virtu/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-09T12:27:39Z",
      "label": {
        "name": "Feature",
        "color": "7cf575"
      }
    }
  ]
}