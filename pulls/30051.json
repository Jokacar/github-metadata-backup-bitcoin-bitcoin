{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30051",
    "id": 1855942055,
    "node_id": "PR_kwDOABII585un22n",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/30051",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/30051.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/30051.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30051",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30051/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30051/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30051/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/49057fc4f1e73a14f673c934573d727ae0229779",
    "number": 30051,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "crypto, refactor: add new KeyPair class",
    "user": {
      "login": "josibake",
      "id": 7444140,
      "node_id": "MDQ6VXNlcjc0NDQxNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/josibake",
      "html_url": "https://github.com/josibake",
      "followers_url": "https://api.github.com/users/josibake/followers",
      "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
      "organizations_url": "https://api.github.com/users/josibake/orgs",
      "repos_url": "https://api.github.com/users/josibake/repos",
      "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/josibake/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Broken out from #28201 \r\n\r\n---\r\n\r\nThe wallet returns an untweaked internal key for taproot outputs. If the output commits to a tree of scripts, this key needs to be tweaked with the merkle root. Even if the output does not commit to a tree of scripts, BIP341/342 recommend commiting to a hash of the public key.\r\n\r\nPreviously, this logic for applying the taptweak was implemented in the `CKey::SignSchnorr` method.\r\n\r\nThis PR moves introduces a KeyPair class which wraps a `secp256k1_keypair` type and refactors SignSchnorr to use this new KeyPair. The KeyPair class is created with an optional merkle_root argument and the logic from BIP341 is applied depending on the state of the merkle_root argument.\r\n\r\nThe motivation for this refactor is to be able to use the tap tweak logic outside of signing, e.g. in silent payments when retrieving the private key (see #28201). \r\n\r\nOutside of silent payments, since we almost always convert a `CKey` to a `secp256k1_keypair` when doing anything with taproot keys, it seems generally useful to have a way to model this type in our code base.",
    "labels": [],
    "created_at": "2024-05-06T11:00:17Z",
    "updated_at": "2024-07-21T09:53:55Z",
    "mergeable": true,
    "mergeable_state": "blocked",
    "merge_commit_sha": "5c562ce101601a01c570cd15399190941ee23c95",
    "assignees": [],
    "requested_reviewers": [
      {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "josibake:add-apply-taptweak-method",
      "ref": "add-apply-taptweak-method",
      "sha": "49057fc4f1e73a14f673c934573d727ae0229779",
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 344501009,
        "node_id": "MDEwOlJlcG9zaXRvcnkzNDQ1MDEwMDk=",
        "name": "bitcoin",
        "full_name": "josibake/bitcoin",
        "owner": {
          "login": "josibake",
          "id": 7444140,
          "node_id": "MDQ6VXNlcjc0NDQxNDA=",
          "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/josibake",
          "html_url": "https://github.com/josibake",
          "followers_url": "https://api.github.com/users/josibake/followers",
          "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
          "organizations_url": "https://api.github.com/users/josibake/orgs",
          "repos_url": "https://api.github.com/users/josibake/repos",
          "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/josibake/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/josibake/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/josibake/bitcoin",
        "archive_url": "https://api.github.com/repos/josibake/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/josibake/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/josibake/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/josibake/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/josibake/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/josibake/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/josibake/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/josibake/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/josibake/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/josibake/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/josibake/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/josibake/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/josibake/bitcoin/events",
        "forks_url": "https://api.github.com/repos/josibake/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/josibake/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/josibake/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/josibake/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/josibake/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/josibake/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/josibake/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/josibake/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/josibake/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/josibake/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/josibake/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/josibake/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/josibake/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/josibake/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/josibake/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/josibake/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:josibake/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/josibake/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/josibake/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/josibake/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/josibake/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/josibake/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/josibake/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/josibake/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/josibake/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/josibake/bitcoin/hooks",
        "svn_url": "https://github.com/josibake/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 1,
        "stargazers_count": 0,
        "watchers_count": 0,
        "size": 249339,
        "default_branch": "master",
        "open_issues_count": 1,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2024-07-21T08:53:09Z",
        "created_at": "2021-03-04T14:24:20Z",
        "updated_at": "2024-07-11T14:53:34Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "8d573611575c3fa66f08407aa9b02f91b29a94c3",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 35659,
        "stargazers_count": 77281,
        "watchers_count": 77281,
        "size": 263314,
        "default_branch": "master",
        "open_issues_count": 671,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2024-07-21T08:53:11Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2024-07-21T07:51:51Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30051"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 139,
    "deletions": 20,
    "changed_files": 3,
    "commits": 5,
    "review_comments": 74,
    "comments": 13
  },
  "events": [
    {
      "event": "commented",
      "id": 2095746172,
      "node_id": "IC_kwDOABII58586ox8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2095746172",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-06T11:00:20Z",
      "updated_at": "2024-07-21T03:04:17Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage\nFor detailed information about the code coverage, see the [test coverage report](https://corecheck.dev/bitcoin/bitcoin/pulls/30051).\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| Concept ACK | [paplorinc](https://github.com/bitcoin/bitcoin/pull/30051#pullrequestreview-2190030725) |\n| Stale ACK | [theuni](https://github.com/bitcoin/bitcoin/pull/30051#pullrequestreview-2050642049), [itornaza](https://github.com/bitcoin/bitcoin/pull/30051#pullrequestreview-2186375491) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#29432](https://github.com/bitcoin/bitcoin/pull/29432) (Stratum v2 Template Provider (take 3) by Sjors)\n* [#29295](https://github.com/bitcoin/bitcoin/pull/29295) (CKey: add Serialize and Unserialize by Sjors)\n* [#28241](https://github.com/bitcoin/bitcoin/pull/28241) (Silent payment index (for light wallets and consistency check) by Sjors)\n* [#28201](https://github.com/bitcoin/bitcoin/pull/28201) (Silent Payments: sending by josibake)\n* [#28122](https://github.com/bitcoin/bitcoin/pull/28122) (Silent Payments: Implement BIP352 by josibake)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30051#issuecomment-2095746172",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30051"
    },
    {
      "event": "comment_deleted",
      "id": 12714942745,
      "node_id": "CDE_lADOABII586H706dzwAAAAL13qEZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12714942745",
      "actor": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-06T13:19:13Z"
    },
    {
      "event": "comment_deleted",
      "id": 12714943883,
      "node_id": "CDE_lADOABII586H706dzwAAAAL13qWL",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12714943883",
      "actor": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-06T13:19:18Z"
    },
    {
      "event": "reviewed",
      "id": 2041367317,
      "node_id": "PRR_kwDOABII5855rMsV",
      "url": null,
      "actor": null,
      "commit_id": "e8d1b223e0c618bb08adbae0d51ff8c7151549b6",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "This function feels kinda weird. As it's named `ApplyTapTweak`, I would expect it to modify `*this`. It also takes in a `uint256* merkle_root` but doesn't check for null, a reference would make more sense.\r\n\r\nPerhaps this would make more sense as a static utility function that takes input/output keys?",
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30051#pullrequestreview-2041367317",
      "submitted_at": "2024-05-06T17:59:50Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30051"
    },
    {
      "event": "subscribed",
      "id": 12722226786,
      "node_id": "SE_lADOABII586H706dzwAAAAL2TcZi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12722226786",
      "actor": {
        "login": "tdb3",
        "id": 106488469,
        "node_id": "U_kgDOBljilQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/106488469?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tdb3",
        "html_url": "https://github.com/tdb3",
        "followers_url": "https://api.github.com/users/tdb3/followers",
        "following_url": "https://api.github.com/users/tdb3/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/tdb3/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/tdb3/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/tdb3/subscriptions",
        "organizations_url": "https://api.github.com/users/tdb3/orgs",
        "repos_url": "https://api.github.com/users/tdb3/repos",
        "events_url": "https://api.github.com/users/tdb3/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/tdb3/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-07T01:40:12Z"
    },
    {
      "event": "commented",
      "id": 2097902146,
      "node_id": "IC_kwDOABII5859C3JC",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2097902146",
      "actor": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-07T09:51:01Z",
      "updated_at": "2024-05-07T09:51:01Z",
      "author_association": "MEMBER",
      "body": "> This function feels kinda weird. As it's named `ApplyTapTweak`, I would expect it to modify `*this`. It also takes in a `uint256* merkle_root` but doesn't check for null, a reference would make more sense.\r\n> \r\n> Perhaps this would make more sense as a static utility function that takes input/output keys?\r\n\r\nUtility function might make more sense here: could do a utility function with `secp256k1_keypairs` as in/out args:\r\n\r\n```\r\nint compute_taptweak(secp256k1_keypair in, unsigned char merkle_root, secp256k1_keypair out)\r\n```\r\n\r\nand use that inside `::SignSchnorr`. This means we still only creating one `secp256k1_keypair` when signing. For usage outside of signing, wrap that utility function in a function takes and returns `CKey`s as arguments:\r\n\r\n```\r\nCKey tweaked_key ComputeTapTweak(CKey& internal_key, uint256& merkle_root) {\r\n    // .. do stuff\r\n    compute_taptweak(..);\r\n    return tweaked_key;\r\n```\r\n\r\nWDYT?",
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30051#issuecomment-2097902146",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30051"
    },
    {
      "event": "commented",
      "id": 2098527381,
      "node_id": "IC_kwDOABII5859FPyV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2098527381",
      "actor": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-07T14:21:27Z",
      "updated_at": "2024-05-07T14:21:27Z",
      "author_association": "MEMBER",
      "body": "`ComputeTapTweak` is more like what I had in mind, yes.",
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30051#issuecomment-2098527381",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30051"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12741509247,
      "node_id": "HRFPE_lADOABII586H706dzwAAAAL3dAB_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12741509247",
      "actor": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-08T10:04:20Z"
    },
    {
      "event": "commented",
      "id": 2100225575,
      "node_id": "IC_kwDOABII5859LuYn",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2100225575",
      "actor": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-08T10:05:57Z",
      "updated_at": "2024-05-08T10:05:57Z",
      "author_association": "MEMBER",
      "body": "Updated to use a utility function (instead of a method on `CKey`) per the @theuni 's feedback",
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30051#issuecomment-2100225575",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30051"
    },
    {
      "event": "mentioned",
      "id": 12741529173,
      "node_id": "MEE_lADOABII586H706dzwAAAAL3dE5V",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12741529173",
      "actor": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-08T10:05:58Z"
    },
    {
      "event": "subscribed",
      "id": 12741529193,
      "node_id": "SE_lADOABII586H706dzwAAAAL3dE5p",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12741529193",
      "actor": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-08T10:05:58Z"
    },
    {
      "event": "reviewed",
      "id": 2046154187,
      "node_id": "PRR_kwDOABII58559dXL",
      "url": null,
      "actor": null,
      "commit_id": "6cc72ced115828c60520c2f598795ee7d41275c9",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30051#pullrequestreview-2046154187",
      "submitted_at": "2024-05-08T16:48:49Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30051"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12768720758,
      "node_id": "HRFPE_lADOABII586H706dzwAAAAL5Ezd2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12768720758",
      "actor": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-10T11:34:29Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12768870122,
      "node_id": "HRFPE_lADOABII586H706dzwAAAAL5FX7q",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12768870122",
      "actor": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-10T11:51:46Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12769107313,
      "node_id": "HRFPE_lADOABII586H706dzwAAAAL5GR1x",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12769107313",
      "actor": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-10T12:17:49Z"
    },
    {
      "event": "commented",
      "id": 2104541750,
      "node_id": "IC_kwDOABII5859cMI2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2104541750",
      "actor": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-10T12:41:31Z",
      "updated_at": "2024-05-10T12:41:31Z",
      "author_association": "MEMBER",
      "body": "Updated to use the new `KeyPair` wrapper class (h/t @theuni).",
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30051#issuecomment-2104541750",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30051"
    },
    {
      "event": "mentioned",
      "id": 12769334399,
      "node_id": "MEE_lADOABII586H706dzwAAAAL5HJR_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12769334399",
      "actor": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-10T12:41:33Z"
    },
    {
      "event": "subscribed",
      "id": 12769334412,
      "node_id": "SE_lADOABII586H706dzwAAAAL5HJSM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12769334412",
      "actor": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-10T12:41:33Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12770336692,
      "node_id": "HRFPE_lADOABII586H706dzwAAAAL5K9-0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12770336692",
      "actor": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-10T14:12:59Z"
    },
    {
      "event": "reviewed",
      "id": 2050167463,
      "node_id": "PRR_kwDOABII5856MxKn",
      "url": null,
      "actor": null,
      "commit_id": "8d33daf93871c34c4fbe19f3c6ffa5d337eae144",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "It's weird to see this hooked up but unused. It could also use some simple test vectors.\r\n\r\nMind killing both birds by adding some tests, at least 1 for each `merkle_root` state?",
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30051#pullrequestreview-2050167463",
      "submitted_at": "2024-05-10T14:16:10Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30051"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12771898558,
      "node_id": "HRFPE_lADOABII586H706dzwAAAAL5Q7S-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12771898558",
      "actor": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-10T16:43:53Z"
    },
    {
      "event": "commented",
      "id": 2104921312,
      "node_id": "IC_kwDOABII5859dozg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2104921312",
      "actor": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-10T16:46:14Z",
      "updated_at": "2024-05-10T16:46:14Z",
      "author_association": "MEMBER",
      "body": "@theuni Updated with a comment and added `KeyPair` to the BIP340 test vectors. This does test all possible merkle_root states and ensures everything is 1-to-1 with `XOnlyPubKey::ComputeTapTweakHash` and `CKey::SignSchnorr`",
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30051#issuecomment-2104921312",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30051"
    },
    {
      "event": "mentioned",
      "id": 12771921724,
      "node_id": "MEE_lADOABII586H706dzwAAAAL5RA88",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12771921724",
      "actor": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-10T16:46:15Z"
    },
    {
      "event": "subscribed",
      "id": 12771921735,
      "node_id": "SE_lADOABII586H706dzwAAAAL5RA9H",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12771921735",
      "actor": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-10T16:46:15Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12772360638,
      "node_id": "HRFPE_lADOABII586H706dzwAAAAL5SsG-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12772360638",
      "actor": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-10T17:36:11Z"
    },
    {
      "event": "commented",
      "id": 2105011629,
      "node_id": "IC_kwDOABII5859d-2t",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2105011629",
      "actor": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-10T17:38:37Z",
      "updated_at": "2024-05-10T17:39:11Z",
      "author_association": "MEMBER",
      "body": "Updated to add a move constructor to the KeyPair class. I noticed this was missing while trying to use the new class in #28201 (i.e. creating a std::vector of KeyPairs). @theuni assuming this was just missed, but if not curious if you have any objections to adding a move constructor on KeyPair?\r\n\r\nEDIT: also rebased on master to fix conflicts",
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30051#issuecomment-2105011629",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30051"
    },
    {
      "event": "mentioned",
      "id": 12772381477,
      "node_id": "MEE_lADOABII586H706dzwAAAAL5SxMl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12772381477",
      "actor": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-10T17:38:38Z"
    },
    {
      "event": "subscribed",
      "id": 12772381487,
      "node_id": "SE_lADOABII586H706dzwAAAAL5SxMv",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12772381487",
      "actor": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-10T17:38:38Z"
    },
    {
      "event": "reviewed",
      "id": 2050565640,
      "node_id": "PRR_kwDOABII5856OSYI",
      "url": null,
      "actor": null,
      "commit_id": "c2c5e72ea09f55d40013ce2363f2045affbc76fa",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Mind changing the dumb c-style casts to `reinterpret_cast` so it's clear that they can't be `static_cast`s ?  Sorry, I know that's my code.\r\n\r\nutACK after that.",
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30051#pullrequestreview-2050565640",
      "submitted_at": "2024-05-10T17:43:40Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30051"
    },
    {
      "event": "commented",
      "id": 2105023865,
      "node_id": "IC_kwDOABII5859eB15",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2105023865",
      "actor": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-10T17:48:02Z",
      "updated_at": "2024-05-10T17:48:02Z",
      "author_association": "MEMBER",
      "body": "PR description needs an update too :)",
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30051#issuecomment-2105023865",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30051"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12772503226,
      "node_id": "HRFPE_lADOABII586H706dzwAAAAL5TO66",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12772503226",
      "actor": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-10T17:53:15Z"
    },
    {
      "event": "renamed",
      "id": 12772545930,
      "node_id": "RTE_lADOABII586H706dzwAAAAL5TZWK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12772545930",
      "actor": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-10T17:58:28Z",
      "rename": {
        "from": "crypto, refactor: add method for applying the taptweak",
        "to": "crypto, refactor: add new KeyPair class"
      }
    },
    {
      "event": "commented",
      "id": 2105045459,
      "node_id": "IC_kwDOABII5859eHHT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2105045459",
      "actor": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-10T17:59:18Z",
      "updated_at": "2024-05-10T17:59:18Z",
      "author_association": "MEMBER",
      "body": "@theuni title, description, and dumb c-style casts updated!",
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30051#issuecomment-2105045459",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30051"
    },
    {
      "event": "mentioned",
      "id": 12772552396,
      "node_id": "MEE_lADOABII586H706dzwAAAAL5Ta7M",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12772552396",
      "actor": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-10T17:59:18Z"
    },
    {
      "event": "subscribed",
      "id": 12772552417,
      "node_id": "SE_lADOABII586H706dzwAAAAL5Ta7h",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12772552417",
      "actor": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-10T17:59:19Z"
    },
    {
      "event": "reviewed",
      "id": 2050642049,
      "node_id": "PRR_kwDOABII5856OlCB",
      "url": null,
      "actor": null,
      "commit_id": "bdc2a656c2d2a61d226fde1d1fd4e79664106e18",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "ACK bdc2a656c2d2a61d226fde1d1fd4e79664106e18",
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30051#pullrequestreview-2050642049",
      "submitted_at": "2024-05-10T18:35:37Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30051"
    },
    {
      "event": "reviewed",
      "id": 2051346482,
      "node_id": "PRR_kwDOABII5856RRAy",
      "url": null,
      "actor": null,
      "commit_id": "bdc2a656c2d2a61d226fde1d1fd4e79664106e18",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30051#pullrequestreview-2051346482",
      "submitted_at": "2024-05-12T10:26:52Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30051"
    },
    {
      "event": "reviewed",
      "id": 2169749598,
      "node_id": "PRR_kwDOABII586BU8Be",
      "url": null,
      "actor": null,
      "commit_id": "bdc2a656c2d2a61d226fde1d1fd4e79664106e18",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "body": "tested ACK bdc2a656c2d2a61d226fde1d1fd4e79664106e18\r\n\r\nBuilt from source and run all unit, functional and extended tests and all of them pass. Looked through the code changes and they look great to me. I particularly like the default definition of the move constructors in `KeyPair` since there is a pointer member `m_keydata` in that class, plus the fact that the generation of the copy constructors that are not needed anywhere is suppressed due to the use of the default keyword which I consider an excellent programming practice. One small suggestion about repeating the KeyPair header for your consideration if you ever need to update for other more serious reasons.",
      "user": {
        "login": "itornaza",
        "id": 11520757,
        "node_id": "MDQ6VXNlcjExNTIwNzU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/11520757?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/itornaza",
        "html_url": "https://github.com/itornaza",
        "followers_url": "https://api.github.com/users/itornaza/followers",
        "following_url": "https://api.github.com/users/itornaza/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/itornaza/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/itornaza/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/itornaza/subscriptions",
        "organizations_url": "https://api.github.com/users/itornaza/orgs",
        "repos_url": "https://api.github.com/users/itornaza/repos",
        "events_url": "https://api.github.com/users/itornaza/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/itornaza/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30051#pullrequestreview-2169749598",
      "submitted_at": "2024-07-10T17:03:02Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30051"
    },
    {
      "event": "reviewed",
      "id": 2169947102,
      "node_id": "PRR_kwDOABII586BVsPe",
      "url": null,
      "actor": null,
      "commit_id": "bdc2a656c2d2a61d226fde1d1fd4e79664106e18",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Not yet sure about adding stuff that \"will hopefully used this way one day\".\r\n\r\nRefactoring is welcome, as long as it's easy to review, which is not yet the case here, could you split the change into trivial, focused commits?",
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30051#pullrequestreview-2169947102",
      "submitted_at": "2024-07-10T18:38:27Z",
      "state": "CHANGES_REQUESTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30051"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13525166154,
      "node_id": "HRFPE_lADOABII586H706dzwAAAAMmKahK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13525166154",
      "actor": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-16T18:09:12Z"
    },
    {
      "event": "commented",
      "id": 2231532258,
      "node_id": "IC_kwDOABII586FAnri",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2231532258",
      "actor": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-16T18:19:31Z",
      "updated_at": "2024-07-16T18:23:06Z",
      "author_association": "MEMBER",
      "body": "Updated https://github.com/bitcoin/bitcoin/commit/bdc2a656c2d2a61d226fde1d1fd4e79664106e18 -> https://github.com/bitcoin/bitcoin/commit/5e9f4f41de98c2cdcc74e31fe925b2f5cf9f6aec ([add-apply-taptweak-method-00](https://github.com/josibake/bitcoin/tree/add-apply-taptweak-method-00) -> [add-apply-taptweak-method-01](https://github.com/josibake/bitcoin/tree/add-apply-taptweak-method-01) ([compare](https://github.com/josibake/bitcoin/compare/add-apply-taptweak-method-00..josibake:add-apply-taptweak-method-01))\r\n\r\n* Follows some `CKey` conventions with `MakeKeyPairData`, `ClearKeyPairData`, etc\r\n* Add copy constructors (same as `CKey`) - this is necessary to be able to hold `KeyPair` objects in stl containers, e.g., `std::vector<KeyPair>`\r\n* Breaks up the first commit into smaller, more focused commits to aid review (h/t @paplorinc)\r\n\r\nNot much in terms of logical changes from the previous version, but broken into incremental steps to aid with review. Worth mentioning for reviewers: `[staging]` commits are changes that should not be considered final on their own but are incremental steps to make the overall change easier to review. Each commit is still atomic in that it compiles on its own, but having them in smaller steps like this helps quite a bit in understanding the diffs. However, if reviewers feel this is unnecessary, I'm happy to squash these staging commits back into a single commit.\r\n\r\nThis push also includes a rebase on master, but the [compare](https://github.com/josibake/bitcoin/compare/add-apply-taptweak-method-00..josibake:add-apply-taptweak-method-01) is provided with both the old and new branch rebased on master.\r\n\r\n",
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30051#issuecomment-2231532258",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30051"
    },
    {
      "event": "mentioned",
      "id": 13525268674,
      "node_id": "MEE_lADOABII586H706dzwAAAAMmKzjC",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13525268674",
      "actor": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-16T18:19:32Z"
    },
    {
      "event": "subscribed",
      "id": 13525268688,
      "node_id": "SE_lADOABII586H706dzwAAAAMmKzjQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13525268688",
      "actor": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-16T18:19:32Z"
    },
    {
      "event": "commented",
      "id": 2231544856,
      "node_id": "IC_kwDOABII586FAqwY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2231544856",
      "actor": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-16T18:27:00Z",
      "updated_at": "2024-07-16T18:27:00Z",
      "author_association": "MEMBER",
      "body": "cc @theuni - would appreciate your eyes on this again",
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30051#issuecomment-2231544856",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30051"
    },
    {
      "event": "mentioned",
      "id": 13525346445,
      "node_id": "MEE_lADOABII586H706dzwAAAAMmLGiN",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13525346445",
      "actor": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-16T18:27:01Z"
    },
    {
      "event": "subscribed",
      "id": 13525346461,
      "node_id": "SE_lADOABII586H706dzwAAAAMmLGid",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13525346461",
      "actor": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-16T18:27:01Z"
    },
    {
      "event": "reviewed",
      "id": 2182966578,
      "node_id": "PRR_kwDOABII586CHW0y",
      "url": null,
      "actor": null,
      "commit_id": "5e9f4f41de98c2cdcc74e31fe925b2f5cf9f6aec",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Started reviewing, but got a bit stuck at the first commit, will continue a bit later",
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30051#pullrequestreview-2182966578",
      "submitted_at": "2024-07-17T15:04:59Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30051"
    },
    {
      "event": "reviewed",
      "id": 2183858096,
      "node_id": "PRR_kwDOABII586CKwew",
      "url": null,
      "actor": null,
      "commit_id": "5e9f4f41de98c2cdcc74e31fe925b2f5cf9f6aec",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Very nice separation into commits, left some questions",
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30051#pullrequestreview-2183858096",
      "submitted_at": "2024-07-17T20:15:54Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30051"
    },
    {
      "event": "reviewed",
      "id": 2185359882,
      "node_id": "PRR_kwDOABII586CQfIK",
      "url": null,
      "actor": null,
      "commit_id": "5e9f4f41de98c2cdcc74e31fe925b2f5cf9f6aec",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "user": {
        "login": "itornaza",
        "id": 11520757,
        "node_id": "MDQ6VXNlcjExNTIwNzU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/11520757?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/itornaza",
        "html_url": "https://github.com/itornaza",
        "followers_url": "https://api.github.com/users/itornaza/followers",
        "following_url": "https://api.github.com/users/itornaza/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/itornaza/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/itornaza/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/itornaza/subscriptions",
        "organizations_url": "https://api.github.com/users/itornaza/orgs",
        "repos_url": "https://api.github.com/users/itornaza/repos",
        "events_url": "https://api.github.com/users/itornaza/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/itornaza/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30051#pullrequestreview-2185359882",
      "submitted_at": "2024-07-18T10:19:23Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30051"
    },
    {
      "event": "reviewed",
      "id": 2186375491,
      "node_id": "PRR_kwDOABII586CUXFD",
      "url": null,
      "actor": null,
      "commit_id": "5e9f4f41de98c2cdcc74e31fe925b2f5cf9f6aec",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "body": "re tACK 5e9f4f41de98c2cdcc74e31fe925b2f5cf9f6aec\r\n\r\nThank you for your commit redo in a more granular way. Just a couple of questions really in the discussion above. To be thorough, rebuilt and retested the commit and all tests included the extended suite pass.",
      "user": {
        "login": "itornaza",
        "id": 11520757,
        "node_id": "MDQ6VXNlcjExNTIwNzU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/11520757?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/itornaza",
        "html_url": "https://github.com/itornaza",
        "followers_url": "https://api.github.com/users/itornaza/followers",
        "following_url": "https://api.github.com/users/itornaza/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/itornaza/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/itornaza/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/itornaza/subscriptions",
        "organizations_url": "https://api.github.com/users/itornaza/orgs",
        "repos_url": "https://api.github.com/users/itornaza/repos",
        "events_url": "https://api.github.com/users/itornaza/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/itornaza/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30051#pullrequestreview-2186375491",
      "submitted_at": "2024-07-18T16:35:20Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30051"
    },
    {
      "event": "review_requested",
      "id": 13559562341,
      "node_id": "RRE_lADOABII586H706dzwAAAAMoNoBl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13559562341",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-18T16:35:24Z",
      "requested_reviewer": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13589975816,
      "node_id": "HRFPE_lADOABII586H706dzwAAAAMqBpMI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13589975816",
      "actor": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-20T15:34:51Z"
    },
    {
      "event": "commented",
      "id": 2241187170,
      "node_id": "IC_kwDOABII586Flc1i",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2241187170",
      "actor": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-20T15:39:13Z",
      "updated_at": "2024-07-20T15:39:13Z",
      "author_association": "MEMBER",
      "body": "Updated https://github.com/bitcoin/bitcoin/commit/5e9f4f41de98c2cdcc74e31fe925b2f5cf9f6aec -> https://github.com/bitcoin/bitcoin/commit/5d9a6cf6286f9a7f93527ea76b910537d709a860  ([add-apply-taptweak-method-01](https://github.com/josibake/bitcoin/tree/add-apply-taptweak-method-01) -> [apply-taptweak-method-02](https://github.com/josibake/bitcoin/tree/apply-taptweak-method-02) ([compare](https://github.com/josibake/bitcoin/compare/add-apply-taptweak-method-01..josibake:apply-taptweak-method-02))\r\n\r\n* Fix typos in commit messages, `src/key.h` (h/t @paplorinc)\r\n* Use `IsValid()` instead of `m_keypair ?` (h/t @paplorinc)\r\n\r\nThanks for the re-review @paplorinc and @itornaza!",
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30051#issuecomment-2241187170",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30051"
    },
    {
      "event": "mentioned",
      "id": 13589982346,
      "node_id": "MEE_lADOABII586H706dzwAAAAMqBqyK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13589982346",
      "actor": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-20T15:39:13Z"
    },
    {
      "event": "subscribed",
      "id": 13589982348,
      "node_id": "SE_lADOABII586H706dzwAAAAMqBqyM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13589982348",
      "actor": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-20T15:39:13Z"
    },
    {
      "event": "mentioned",
      "id": 13589982350,
      "node_id": "MEE_lADOABII586H706dzwAAAAMqBqyO",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13589982350",
      "actor": {
        "login": "itornaza",
        "id": 11520757,
        "node_id": "MDQ6VXNlcjExNTIwNzU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/11520757?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/itornaza",
        "html_url": "https://github.com/itornaza",
        "followers_url": "https://api.github.com/users/itornaza/followers",
        "following_url": "https://api.github.com/users/itornaza/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/itornaza/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/itornaza/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/itornaza/subscriptions",
        "organizations_url": "https://api.github.com/users/itornaza/orgs",
        "repos_url": "https://api.github.com/users/itornaza/repos",
        "events_url": "https://api.github.com/users/itornaza/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/itornaza/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-20T15:39:14Z"
    },
    {
      "event": "subscribed",
      "id": 13589982352,
      "node_id": "SE_lADOABII586H706dzwAAAAMqBqyQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13589982352",
      "actor": {
        "login": "itornaza",
        "id": 11520757,
        "node_id": "MDQ6VXNlcjExNTIwNzU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/11520757?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/itornaza",
        "html_url": "https://github.com/itornaza",
        "followers_url": "https://api.github.com/users/itornaza/followers",
        "following_url": "https://api.github.com/users/itornaza/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/itornaza/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/itornaza/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/itornaza/subscriptions",
        "organizations_url": "https://api.github.com/users/itornaza/orgs",
        "repos_url": "https://api.github.com/users/itornaza/repos",
        "events_url": "https://api.github.com/users/itornaza/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/itornaza/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-20T15:39:14Z"
    },
    {
      "event": "reviewed",
      "id": 2190027482,
      "node_id": "PRR_kwDOABII586CiSra",
      "url": null,
      "actor": null,
      "commit_id": "36ecf72a04c9ecb82660fb14a734c155e89e5abd",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30051#pullrequestreview-2190027482",
      "submitted_at": "2024-07-20T17:27:56Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30051"
    },
    {
      "event": "reviewed",
      "id": 2190030725,
      "node_id": "PRR_kwDOABII586CiTeF",
      "url": null,
      "actor": null,
      "commit_id": "5d9a6cf6286f9a7f93527ea76b910537d709a860",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for the fixes!\r\nI'm still not convinced that the lack of short-circuits didn't introduce any change.\r\nPlease prove me wrong, I want to ACK this :)",
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30051#pullrequestreview-2190030725",
      "submitted_at": "2024-07-20T17:38:06Z",
      "state": "CHANGES_REQUESTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30051"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDFjYmY4OTY5M2NmOTFlNmMyM2Q2ZTUzNTQzOWMxNDQ4ZTA3NTg3NzI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1cbf89693cf91e6c23d6e535439c1448e0758772",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/1cbf89693cf91e6c23d6e535439c1448e0758772",
      "tree": {
        "sha": "ff502a51ea9dacf7702cba31f646134f38927cde",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ff502a51ea9dacf7702cba31f646134f38927cde"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree ff502a51ea9dacf7702cba31f646134f38927cde\nparent ff100bb549f21dc0136af9241fd2de6daffb19a2\nauthor josibake <josibake@protonmail.com> 1721139425 +0200\ncommitter josibake <josibake@protonmail.com> 1721550879 +0200\n\nrefactor: replace early returns with GetPubKey()\n\nInstead of getting the public key from the keypair object, get it\ndirectly using `CKey::GetPubKey()`.\n\nThis commit is a staging refactor to simplify the diff for moving the\nmerkle tweaking logic out of this function in a later commit, but also\nmakes this code simpler and more concise.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYWUWuOtu0CiC/Ep6ity1WMTzPWUFAmacyckACgkQity1WMTz\nPWXE7BAArcLAza3F2h79GBvFa/ScEBbaFTpJCZo1jZztUMNH5hDnMr107x05TRSM\nhRfFKyprYA7Dg05m1VbSame0vSGoZbqj9kbza7Kato+QNOpxSzSkmZBUmYkHR8E1\nE5UJ8gF5hn0pUIjw0wNpJxOnaLQ+BeMYmUy45VmmvkoIS275wlXyg6eYPRANYC00\nPiKMxXQjH4Y7zPPayYWNvFfqaq98inH9uq9/ljFr4+K3D7cGl2PKVhi0w2b+RV9p\nGgJn7Ui/4KtP5Me77uP0MKuYvJMTVTLGkKb9LA4g61B6RYyqOq0hKpkr4kc4L87h\nrCv5IV9XO/rbgEGMRc+l5MmiXKS17N3It92hDlzTw89g4yhrsC6bNC/PdNodQcnb\nJ6ZTv4PACSt0h2OCic3cz8d/C3u3j3lenqIZKi4CqNMp6hJFbvMyesXz5P+I8aGS\n30JEuLQE7n4/Je8k669MsKCA67+cX5Db9N+ZfVduFAz0i1z0+VNqarqxTmMqDqtY\n87fyP42MUYMso8HiaQaEQBjbXvCsfrIpiy5tDLiBe1R/p0k9q1ZNa1r6uV2N6w4M\nIDS0G9doVbGbKXsuL07A9VQdyE6Nek0pTBJtJBu1c8x8XgUmqzH5WYvH4LV4xGWc\n26Uhw7BVp2XSlugY7r/bXpgAlo5EAf5yBtj2rx75E7bBaAXJYcA=\n=glZt\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ff100bb549f21dc0136af9241fd2de6daffb19a2",
          "sha": "ff100bb549f21dc0136af9241fd2de6daffb19a2",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/ff100bb549f21dc0136af9241fd2de6daffb19a2"
        }
      ],
      "message": "refactor: replace early returns with GetPubKey()\n\nInstead of getting the public key from the keypair object, get it\ndirectly using `CKey::GetPubKey()`.\n\nThis commit is a staging refactor to simplify the diff for moving the\nmerkle tweaking logic out of this function in a later commit, but also\nmakes this code simpler and more concise.",
      "committer": {
        "name": "josibake",
        "email": "josibake@protonmail.com",
        "date": "2024-07-21T08:34:39Z"
      },
      "author": {
        "name": "josibake",
        "email": "josibake@protonmail.com",
        "date": "2024-07-16T14:17:05Z"
      },
      "sha": "1cbf89693cf91e6c23d6e535439c1448e0758772"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGI2ZTA3NjI2NDQwMGU2NDRiNzQyYzUwZmY5NGI0NjE3NTExZTVmNjU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b6e076264400e644b742c50ff94b4617511e5f65",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/b6e076264400e644b742c50ff94b4617511e5f65",
      "tree": {
        "sha": "874686b761e584744d98676820fd701dfaf1ea0f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/874686b761e584744d98676820fd701dfaf1ea0f"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 874686b761e584744d98676820fd701dfaf1ea0f\nparent 1cbf89693cf91e6c23d6e535439c1448e0758772\nauthor josibake <josibake@protonmail.com> 1721147650 +0200\ncommitter josibake <josibake@protonmail.com> 1721551351 +0200\n\ncrypto: add KeyPair wrapper class\n\nAdd a `KeyPair` class which wraps the `secp256k1_keypair`. This keeps\nthe secret data in secure memory and enables passing the\n`KeyPair` object directly to libsecp256k1 functions expecting a\n`secp256k1_keypair`.\n\nMotivation: when passing `CKeys` for taproot outputs to libsecp256k1 functions,\nthe first step is to create a `secp256k1_keypair` data type and use that\ninstead. This is so the libsecp256k1 function can determine if the key\nneeds to be negated, e.g., when signing.\n\nThis is a bit clunky in that it creates an extra step when using a `CKey`\nfor a taproot output and also involves copying the secret data into a\ntemporary object, which the caller must then take care to cleanse. In\naddition, the logic for applying the merkle_root tweak currently\nonly exists in the `SignSchnorr` function.\n\nIn a later commit, we will add the merkle_root tweaking logic to this\nfunction, which will make the merkle_root logic reusable outside of\nsigning by using the `KeyPair` class directly.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYWUWuOtu0CiC/Ep6ity1WMTzPWUFAmacyhAACgkQity1WMTz\nPWWgixAAy6xfRa3b5ZUy1wsgYwi44SFsfdNuloZ1rGOeM2SICzGqnd23HfXQdFkD\nHMJvuDpQvwsDyGuYVBFKq79W7/zqeXy6Q03+j/RTXM95SuMTqxKTORqxqu9yh5dg\nUAfZbsnqo62fQdrzdOT7aHLqPXtG8Il3WMtZxOcBl7n0Hgyyj+ReLk99a4VkApoQ\n69W+DAT9WmflJNTMOl9QIc1RaEOJrIvUK6GlRxrbg3QBlYCtxM06G1CqVfHGD1jJ\n87vza0EdCD9MHE07UIhDaoTAwnIbIC21aJFUOrU0mWJwguPoG4iXYcUHKu7xCup2\nGjZXSLatW2vkfPmgESNV76m3F533RN5KuAj/ldLjwBSIzGQOsYEYU5p400QKNiD4\nr2uCIJMXHqIuPJ16bd33FFdbHGWK+Et2xaJ8jeEE5wcOTGuptdkCHidIJt4RKyiL\npVtdIN9fDrif1z+t/S4cGy3ISilnUyKKju20PuuxQ6QuLFd0O1dqlA8JayyfOQs9\n6AS5a3+UNk132/wN5IZDTWtFiti7+y2hOjX1MZyLWiK+A+va7VCIMUbDalybxR1W\nyzNT2xZdhTYU9ReneLxf0xTtlt89hLKII1D3LmEKV3uNuL5+2g1jczxwyGoGYFOD\nSEMAgM2qW/J++mrQ8SeRIghailsCLF3Q5U/R0W302pxBn7wiM6A=\n=61Xt\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1cbf89693cf91e6c23d6e535439c1448e0758772",
          "sha": "1cbf89693cf91e6c23d6e535439c1448e0758772",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/1cbf89693cf91e6c23d6e535439c1448e0758772"
        }
      ],
      "message": "crypto: add KeyPair wrapper class\n\nAdd a `KeyPair` class which wraps the `secp256k1_keypair`. This keeps\nthe secret data in secure memory and enables passing the\n`KeyPair` object directly to libsecp256k1 functions expecting a\n`secp256k1_keypair`.\n\nMotivation: when passing `CKeys` for taproot outputs to libsecp256k1 functions,\nthe first step is to create a `secp256k1_keypair` data type and use that\ninstead. This is so the libsecp256k1 function can determine if the key\nneeds to be negated, e.g., when signing.\n\nThis is a bit clunky in that it creates an extra step when using a `CKey`\nfor a taproot output and also involves copying the secret data into a\ntemporary object, which the caller must then take care to cleanse. In\naddition, the logic for applying the merkle_root tweak currently\nonly exists in the `SignSchnorr` function.\n\nIn a later commit, we will add the merkle_root tweaking logic to this\nfunction, which will make the merkle_root logic reusable outside of\nsigning by using the `KeyPair` class directly.",
      "committer": {
        "name": "josibake",
        "email": "josibake@protonmail.com",
        "date": "2024-07-21T08:42:31Z"
      },
      "author": {
        "name": "josibake",
        "email": "josibake@protonmail.com",
        "date": "2024-07-16T16:34:10Z"
      },
      "sha": "b6e076264400e644b742c50ff94b4617511e5f65"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDdiYmIyMTVlNTc1OTcwZTIyN2I1MzY0YTIwNzdkMWFjZGE3OTAyZDM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7bbb215e575970e227b5364a2077d1acda7902d3",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/7bbb215e575970e227b5364a2077d1acda7902d3",
      "tree": {
        "sha": "f8ba2d6f9cce22dff48aa68f4ae900f6166f9591",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f8ba2d6f9cce22dff48aa68f4ae900f6166f9591"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree f8ba2d6f9cce22dff48aa68f4ae900f6166f9591\nparent b6e076264400e644b742c50ff94b4617511e5f65\nauthor josibake <josibake@protonmail.com> 1721147801 +0200\ncommitter josibake <josibake@protonmail.com> 1721551486 +0200\n\n[staging] refactor: use KeyPair in SignSchnorr\n\nUse `KeyPair` instead of creating a `secp256k1_keypair` object. The\nmain change here is creating a `KeyPair` instead of a\n`secp256k1_keypair` and then passing it to the libsec256k1 functions\nusing `reinterpret_cast<secp256k1_keypair*>(keypair)`.\n\nThe variable name `keypair` is used for the reinterpret_cast to simplify the\ndiff in a later commit when all of the logic in SignSchnorr is moved into the\nKeyPair class.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYWUWuOtu0CiC/Ep6ity1WMTzPWUFAmacysgACgkQity1WMTz\nPWV02A/+IbNoWnoGrteTDsyZ8tz0zjy2Cb+EgY7gJIcHEuSOZEoKrFDnKld+YrhQ\nhn5KBCh5Dl9hJtsKPCxNfdLgcnfw8U7aE0H4IGr+2msr3BYpDMm19tXotzYhMuJ4\nADVTb7DPbCArzCZihdysvtUHFtVGT5uLMnhIi1HSpoxqVyVnXKrzMl77YA6L8uT0\nURHBxIqQ92qpNbKAlOaOu15KoAcuUmRci5JCcUmpbJiup2tO9nefL6iX2UIwNccU\nkiVnq1/VBGdec8CwqwzZi8UUlh9IvpEkZ4Sol1NK8bbjXlgIlf95XR0Da3HREy+1\nk8NhdOP4++dB3/kAHTnqZWj8Y2XtsVmvWESUzlCR0ZzYG/cHc4L9gEywROCJsvQC\nRDDjPjxICr92/BH9+AFqILj9+tyvv83YryrgTf76v3TFhKdL+cWBTMg/TDEmhw9W\nLzoGMIlLFgN7d5JrT1UgoBsxc/d8DrdQhvc1gwCWX8A+fT/LLZ19nxlF6P5tFWcf\nO1bgDZuBFv9uPphMdmXexz+LvVBRXtbtxAoCsj9AmrySU0H07se488LPhkkWnDst\nVctCYewHDd4ufUaIp/xExs+/sKY4UeP93AgBvpyHATvup2AGRCL2S7HK7C/X/h5Q\nKJczjtfp/0hLRVGREYivrKE2uQuxgc9WnXwgZypS6ZkibzMM+/Q=\n=6XGC\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b6e076264400e644b742c50ff94b4617511e5f65",
          "sha": "b6e076264400e644b742c50ff94b4617511e5f65",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/b6e076264400e644b742c50ff94b4617511e5f65"
        }
      ],
      "message": "[staging] refactor: use KeyPair in SignSchnorr\n\nUse `KeyPair` instead of creating a `secp256k1_keypair` object. The\nmain change here is creating a `KeyPair` instead of a\n`secp256k1_keypair` and then passing it to the libsec256k1 functions\nusing `reinterpret_cast<secp256k1_keypair*>(keypair)`.\n\nThe variable name `keypair` is used for the reinterpret_cast to simplify the\ndiff in a later commit when all of the logic in SignSchnorr is moved into the\nKeyPair class.",
      "committer": {
        "name": "josibake",
        "email": "josibake@protonmail.com",
        "date": "2024-07-21T08:44:46Z"
      },
      "author": {
        "name": "josibake",
        "email": "josibake@protonmail.com",
        "date": "2024-07-16T16:36:41Z"
      },
      "sha": "7bbb215e575970e227b5364a2077d1acda7902d3"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDhiN2Y0NjBiMWY1ZTdlN2UyMDY3YThlZDA3M2E0Y2IxODM0NjljNzc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8b7f460b1f5e7e7e2067a8ed073a4cb183469c77",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/8b7f460b1f5e7e7e2067a8ed073a4cb183469c77",
      "tree": {
        "sha": "dc82faffa4a0da4f4904aed182d9a31c49d03af7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dc82faffa4a0da4f4904aed182d9a31c49d03af7"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree dc82faffa4a0da4f4904aed182d9a31c49d03af7\nparent 7bbb215e575970e227b5364a2077d1acda7902d3\nauthor josibake <josibake@protonmail.com> 1721150818 +0200\ncommitter josibake <josibake@protonmail.com> 1721551596 +0200\n\nrefactor: move SignSchnorr logic to KeyPair\n\nMove `SignSchnorr` to `KeyPair`. This makes `CKey::SignSchnorr` now\ncompute a `KeyPair` object and then call `KeyPair::SignSchorr`. The\nsigning logic is move-only with the exception of changing\n`keypair.data()` to `my_keypair->data()`, since we now have access to\nthe private member `m_keypair`.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYWUWuOtu0CiC/Ep6ity1WMTzPWUFAmacyv8ACgkQity1WMTz\nPWX2bBAAlFQOPeiKNf7ybV4xowxUZezT7oAVeEmLp1KXYif3GlEv2VyCqUfBCs2m\nrJmq7NPT5r9ZdOj8czjajMcf9+Xb0yabM6Ei8kxmAfHornbX3HxfqYKTBSoRxhQ5\n0dyCOjwAmxipOZdxOcSRD403VyW4d2zRFbx3M+nRtQ+x646eiGKDaYJZVgxfQ/Db\ngWVvnhUvfRKF4SZcnVbhwwW8Gf2GBqELMmGuumWOanTCHk1jOdRZ33npLBncZ08o\ngzcfYlWtE0+J6zwtUlr2RfYEj8L+ISylCRaWBrRgGI30MuiEJulQEkBmQnPMbu/8\ne3HwjE5Bhx4kt8f/HzqYptnDlkYUZMcLGotc5dklaGqAWlNhGY2lkl/OzrJlsPbE\nzHRWJQlM+t+cgbaLkl+9fobUKierx9KNwwuuYFdUofrlG+pcHthtPeLsFoyxnI98\namXolqOffubfokbla8KjXRgHX+d/OxTYlJIL0ReCshbMnd5K/aECdwfuwQJ+ruhq\nZLeZNgGFNhI0vq+Pbr35yVqa82iAra4n+J7bkBjvs74yPpce7uUu0WeY1haPPXPl\nLG8s9dmRIg7U7dQ1hkWvCYDT6MHKCyHaVdUz4GctrV1Ji0YyaDLiqcI4L5U6s81L\nZsZeOiojP/RmWn58m0CqD10Yog8wvt0KbKM4Zn3oJSH19W195cU=\n=HlWM\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7bbb215e575970e227b5364a2077d1acda7902d3",
          "sha": "7bbb215e575970e227b5364a2077d1acda7902d3",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/7bbb215e575970e227b5364a2077d1acda7902d3"
        }
      ],
      "message": "refactor: move SignSchnorr logic to KeyPair\n\nMove `SignSchnorr` to `KeyPair`. This makes `CKey::SignSchnorr` now\ncompute a `KeyPair` object and then call `KeyPair::SignSchorr`. The\nsigning logic is move-only with the exception of changing\n`keypair.data()` to `my_keypair->data()`, since we now have access to\nthe private member `m_keypair`.",
      "committer": {
        "name": "josibake",
        "email": "josibake@protonmail.com",
        "date": "2024-07-21T08:46:36Z"
      },
      "author": {
        "name": "josibake",
        "email": "josibake@protonmail.com",
        "date": "2024-07-16T17:26:58Z"
      },
      "sha": "8b7f460b1f5e7e7e2067a8ed073a4cb183469c77"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDQ5MDU3ZmM0ZjFlNzNhMTRmNjczYzkzNDU3M2Q3MjdhZTAyMjk3Nzk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/49057fc4f1e73a14f673c934573d727ae0229779",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/49057fc4f1e73a14f673c934573d727ae0229779",
      "tree": {
        "sha": "e85032b66c711c7710b6dc2ee5f1de6adb1fed40",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e85032b66c711c7710b6dc2ee5f1de6adb1fed40"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree e85032b66c711c7710b6dc2ee5f1de6adb1fed40\nparent 8b7f460b1f5e7e7e2067a8ed073a4cb183469c77\nauthor josibake <josibake@protonmail.com> 1721144552 +0200\ncommitter josibake <josibake@protonmail.com> 1721551780 +0200\n\ntests: add tests for KeyPair\n\nReuse existing BIP340 tests, as there should be\nno behavior change between the two\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYWUWuOtu0CiC/Ep6ity1WMTzPWUFAmacy6QACgkQity1WMTz\nPWV2PRAAjRSERo85Ms5DNGjBsBFqU/evKtac8G8ANXB80rS/nIKFIw0/JVYH8JwJ\n6Gy6MAsfN5s9MgPV4jlrRKAgY8Egy2Nzpf+qnRPpIH0kogtAJ4wbjxD/KGulhrEM\nO61vntKwpwqeYG69fae7BN9jPugNIXtpSEyr9BRXLwKdK4yMCODH/D8i6IxGT5Gj\nXeeY8PL7dmCAP5vGLB7644eKluyrLEYmApG6owlUucAsEOQqtKdx/fwNYZ4af6zb\nyi1KGnDd0b1MG73Cx7tFpH07xOu/P2muQ3Vb6wyJZZJrK4PkoVOltXMbHqSl0+w2\n8TbixowXsv4WYGXe5i2pqoqWKQ9uTR5nvPz1uJ+SxWqL34Bax92jlSm7Sk2N7/eg\nOC+9gjx6H/7WaqdrdNRCdYA+rM1O7ECRlYgwEKQtjvbUY08SZKCZVPReZTD8G9My\nzcp46YugAa2/apizj6dxXKxuvRuY2tHUbnSiSTCiVoIyd2IFNckp6yVcQd1JYbSz\nHcjBLQaBslQy+NHAn5kLKG1MLLd5d/mNZKN+cEJv06M1v4tpwn/NjOctm3zkr0m6\nPxDJOV3OlU/zbl1xca2r8YIpdsnhzzIzDM8JVvqTA1QgVhQ4hVk1am+EFdO61QO+\nIHZ5hWCCdSv+TDA8vwjF49Jvh71ngWyx0gShyla373dlaiTpSog=\n=MmUf\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8b7f460b1f5e7e7e2067a8ed073a4cb183469c77",
          "sha": "8b7f460b1f5e7e7e2067a8ed073a4cb183469c77",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/8b7f460b1f5e7e7e2067a8ed073a4cb183469c77"
        }
      ],
      "message": "tests: add tests for KeyPair\n\nReuse existing BIP340 tests, as there should be\nno behavior change between the two",
      "committer": {
        "name": "josibake",
        "email": "josibake@protonmail.com",
        "date": "2024-07-21T08:49:40Z"
      },
      "author": {
        "name": "josibake",
        "email": "josibake@protonmail.com",
        "date": "2024-07-16T15:42:32Z"
      },
      "sha": "49057fc4f1e73a14f673c934573d727ae0229779"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13591893194,
      "node_id": "HRFPE_lADOABII586H706dzwAAAAMqI9TK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13591893194",
      "actor": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-21T08:53:11Z"
    },
    {
      "event": "commented",
      "id": 2241534584,
      "node_id": "IC_kwDOABII586Fmxp4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2241534584",
      "actor": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-21T08:59:45Z",
      "updated_at": "2024-07-21T08:59:45Z",
      "author_association": "MEMBER",
      "body": "Update https://github.com/bitcoin/bitcoin/commit/5d9a6cf6286f9a7f93527ea76b910537d709a860 ->  https://github.com/bitcoin/bitcoin/commit/49057fc4f1e73a14f673c934573d727ae0229779 ([apply-taptweak-method-02](https://github.com/josibake/bitcoin/tree/apply-taptweak-method-02) -> [apply-taptweak-method-03](https://github.com/josibake/bitcoin/tree/apply-taptweak-method-03) ([compare](https://github.com/josibake/bitcoin/compare/apply-taptweak-method-02..josibake:apply-taptweak-method-03))\r\n\r\n* Use `CKey::GetPubKey()` instead of extracting and serializing the public key from the keypair object\r\n* Save `reinterpret_cast` as a variable to simplify diff/code (h/t @paplorinc )\r\n\r\nOverall, I think this simplifies things quite a bit. If you look at the internals of `CKey::GetPubKey()`, there are already `asserts` for intermediate libsecp256k1 function calls which make it clear these calls (`_serialize`, for example) are always expected to succeed when using a valid secret key.",
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30051#issuecomment-2241534584",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30051"
    },
    {
      "event": "mentioned",
      "id": 13591911226,
      "node_id": "MEE_lADOABII586H706dzwAAAAMqJBs6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13591911226",
      "actor": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-21T08:59:45Z"
    },
    {
      "event": "subscribed",
      "id": 13591911232,
      "node_id": "SE_lADOABII586H706dzwAAAAMqJBtA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13591911232",
      "actor": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-21T08:59:46Z"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1594325841",
      "pull_request_review_id": 2046154187,
      "id": 1594325841,
      "node_id": "PRRC_kwDOABII585fB3tR",
      "diff_hunk": "@@ -275,20 +275,51 @@ bool CKey::SignCompact(const uint256 &hash, std::vector<unsigned char>& vchSig)\n     return true;\n }\n \n+bool ComputeTapTweak(const CKey& internal_key, const uint256& merkle_root, CKey& tweaked_key)\n+{\n+    secp256k1_keypair keypair;\n+    if (!secp256k1_keypair_create(secp256k1_context_sign, &keypair, UCharCast(internal_key.begin()))) return false;\n+    secp256k1_xonly_pubkey pubkey;\n+    if (!secp256k1_keypair_xonly_pub(secp256k1_context_sign, &pubkey, nullptr, &keypair)) {\n+        memory_cleanse(&keypair, sizeof(keypair));\n+        return false;\n+    }\n+    unsigned char pubkey_bytes[32];\n+    if (!secp256k1_xonly_pubkey_serialize(secp256k1_context_sign, pubkey_bytes, &pubkey)) {\n+        memory_cleanse(&keypair, sizeof(keypair));\n+        return false;\n+    }\n+    uint256 tweak = XOnlyPubKey(pubkey_bytes).ComputeTapTweakHash(merkle_root.IsNull() ? nullptr : &merkle_root);\n+    if (!secp256k1_keypair_xonly_tweak_add(secp256k1_context_static, &keypair, tweak.data())) {\n+        memory_cleanse(&keypair, sizeof(keypair));\n+        return false;\n+    }\n+    unsigned char tweaked_secret_bytes[32];\n+    if (!secp256k1_keypair_sec(secp256k1_context_sign, tweaked_secret_bytes, &keypair)) {\n+        memory_cleanse(&keypair, sizeof(keypair));\n+        return false;\n+    }\n+    tweaked_key.Set(std::begin(tweaked_secret_bytes), std::end(tweaked_secret_bytes), true);\n+    memory_cleanse(&keypair, sizeof(keypair));\n+    memory_cleanse(tweaked_secret_bytes, sizeof(tweaked_secret_bytes));\n+    return tweaked_key.IsValid();\n+}\n+\n bool CKey::SignSchnorr(const uint256& hash, Span<unsigned char> sig, const uint256* merkle_root, const uint256& aux) const\n {\n     assert(sig.size() == 64);\n+    bool ret;\n     secp256k1_keypair keypair;\n-    if (!secp256k1_keypair_create(secp256k1_context_sign, &keypair, UCharCast(begin()))) return false;\n     if (merkle_root) {\n-        secp256k1_xonly_pubkey pubkey;\n-        if (!secp256k1_keypair_xonly_pub(secp256k1_context_sign, &pubkey, nullptr, &keypair)) return false;\n-        unsigned char pubkey_bytes[32];\n-        if (!secp256k1_xonly_pubkey_serialize(secp256k1_context_sign, pubkey_bytes, &pubkey)) return false;\n-        uint256 tweak = XOnlyPubKey(pubkey_bytes).ComputeTapTweakHash(merkle_root->IsNull() ? nullptr : merkle_root);\n-        if (!secp256k1_keypair_xonly_tweak_add(secp256k1_context_static, &keypair, tweak.data())) return false;\n+        CKey tweaked_key;",
      "path": "src/key.cpp",
      "position": null,
      "original_position": 47,
      "commit_id": "49057fc4f1e73a14f673c934573d727ae0229779",
      "original_commit_id": "6cc72ced115828c60520c2f598795ee7d41275c9",
      "in_reply_to_id": null,
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Will anything ever use this key directly? Or will it always just be turned back into a `secp256k1_keypair`? It seems the CKey output is just a wrapper that causes overhead here. I guess for the sake of not exposing `secp256k1_keypair` to the caller?",
      "created_at": "2024-05-08T16:44:21Z",
      "updated_at": "2024-05-08T16:48:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30051#discussion_r1594325841",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1594325841"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30051"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 314,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1594328715",
      "pull_request_review_id": 2046154187,
      "id": 1594328715,
      "node_id": "PRRC_kwDOABII585fB4aL",
      "diff_hunk": "@@ -275,20 +275,51 @@ bool CKey::SignCompact(const uint256 &hash, std::vector<unsigned char>& vchSig)\n     return true;\n }\n \n+bool ComputeTapTweak(const CKey& internal_key, const uint256& merkle_root, CKey& tweaked_key)\n+{\n+    secp256k1_keypair keypair;\n+    if (!secp256k1_keypair_create(secp256k1_context_sign, &keypair, UCharCast(internal_key.begin()))) return false;\n+    secp256k1_xonly_pubkey pubkey;\n+    if (!secp256k1_keypair_xonly_pub(secp256k1_context_sign, &pubkey, nullptr, &keypair)) {\n+        memory_cleanse(&keypair, sizeof(keypair));\n+        return false;\n+    }\n+    unsigned char pubkey_bytes[32];\n+    if (!secp256k1_xonly_pubkey_serialize(secp256k1_context_sign, pubkey_bytes, &pubkey)) {\n+        memory_cleanse(&keypair, sizeof(keypair));\n+        return false;\n+    }\n+    uint256 tweak = XOnlyPubKey(pubkey_bytes).ComputeTapTweakHash(merkle_root.IsNull() ? nullptr : &merkle_root);\n+    if (!secp256k1_keypair_xonly_tweak_add(secp256k1_context_static, &keypair, tweak.data())) {\n+        memory_cleanse(&keypair, sizeof(keypair));\n+        return false;\n+    }\n+    unsigned char tweaked_secret_bytes[32];\n+    if (!secp256k1_keypair_sec(secp256k1_context_sign, tweaked_secret_bytes, &keypair)) {\n+        memory_cleanse(&keypair, sizeof(keypair));\n+        return false;\n+    }\n+    tweaked_key.Set(std::begin(tweaked_secret_bytes), std::end(tweaked_secret_bytes), true);\n+    memory_cleanse(&keypair, sizeof(keypair));\n+    memory_cleanse(tweaked_secret_bytes, sizeof(tweaked_secret_bytes));\n+    return tweaked_key.IsValid();\n+}\n+\n bool CKey::SignSchnorr(const uint256& hash, Span<unsigned char> sig, const uint256* merkle_root, const uint256& aux) const\n {\n     assert(sig.size() == 64);\n+    bool ret;\n     secp256k1_keypair keypair;\n-    if (!secp256k1_keypair_create(secp256k1_context_sign, &keypair, UCharCast(begin()))) return false;\n     if (merkle_root) {\n-        secp256k1_xonly_pubkey pubkey;\n-        if (!secp256k1_keypair_xonly_pub(secp256k1_context_sign, &pubkey, nullptr, &keypair)) return false;\n-        unsigned char pubkey_bytes[32];\n-        if (!secp256k1_xonly_pubkey_serialize(secp256k1_context_sign, pubkey_bytes, &pubkey)) return false;\n-        uint256 tweak = XOnlyPubKey(pubkey_bytes).ComputeTapTweakHash(merkle_root->IsNull() ? nullptr : merkle_root);\n-        if (!secp256k1_keypair_xonly_tweak_add(secp256k1_context_static, &keypair, tweak.data())) return false;\n+        CKey tweaked_key;\n+        if (!ComputeTapTweak(*this, *merkle_root, tweaked_key)) return false;\n+        ret = secp256k1_keypair_create(secp256k1_context_sign, &keypair, UCharCast(tweaked_key.begin()));\n+        tweaked_key = CKey();",
      "path": "src/key.cpp",
      "position": null,
      "original_position": 50,
      "commit_id": "49057fc4f1e73a14f673c934573d727ae0229779",
      "original_commit_id": "6cc72ced115828c60520c2f598795ee7d41275c9",
      "in_reply_to_id": null,
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This is going out of scope anyway, no need?",
      "created_at": "2024-05-08T16:46:56Z",
      "updated_at": "2024-05-08T16:48:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30051#discussion_r1594328715",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1594328715"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30051"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 317,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1594465354",
      "pull_request_review_id": 2046365854,
      "id": 1594465354,
      "node_id": "PRRC_kwDOABII585fCZxK",
      "diff_hunk": "@@ -275,20 +275,51 @@ bool CKey::SignCompact(const uint256 &hash, std::vector<unsigned char>& vchSig)\n     return true;\n }\n \n+bool ComputeTapTweak(const CKey& internal_key, const uint256& merkle_root, CKey& tweaked_key)\n+{\n+    secp256k1_keypair keypair;\n+    if (!secp256k1_keypair_create(secp256k1_context_sign, &keypair, UCharCast(internal_key.begin()))) return false;\n+    secp256k1_xonly_pubkey pubkey;\n+    if (!secp256k1_keypair_xonly_pub(secp256k1_context_sign, &pubkey, nullptr, &keypair)) {\n+        memory_cleanse(&keypair, sizeof(keypair));\n+        return false;\n+    }\n+    unsigned char pubkey_bytes[32];\n+    if (!secp256k1_xonly_pubkey_serialize(secp256k1_context_sign, pubkey_bytes, &pubkey)) {\n+        memory_cleanse(&keypair, sizeof(keypair));\n+        return false;\n+    }\n+    uint256 tweak = XOnlyPubKey(pubkey_bytes).ComputeTapTweakHash(merkle_root.IsNull() ? nullptr : &merkle_root);\n+    if (!secp256k1_keypair_xonly_tweak_add(secp256k1_context_static, &keypair, tweak.data())) {\n+        memory_cleanse(&keypair, sizeof(keypair));\n+        return false;\n+    }\n+    unsigned char tweaked_secret_bytes[32];\n+    if (!secp256k1_keypair_sec(secp256k1_context_sign, tweaked_secret_bytes, &keypair)) {\n+        memory_cleanse(&keypair, sizeof(keypair));\n+        return false;\n+    }\n+    tweaked_key.Set(std::begin(tweaked_secret_bytes), std::end(tweaked_secret_bytes), true);\n+    memory_cleanse(&keypair, sizeof(keypair));\n+    memory_cleanse(tweaked_secret_bytes, sizeof(tweaked_secret_bytes));\n+    return tweaked_key.IsValid();\n+}\n+\n bool CKey::SignSchnorr(const uint256& hash, Span<unsigned char> sig, const uint256* merkle_root, const uint256& aux) const\n {\n     assert(sig.size() == 64);\n+    bool ret;\n     secp256k1_keypair keypair;\n-    if (!secp256k1_keypair_create(secp256k1_context_sign, &keypair, UCharCast(begin()))) return false;\n     if (merkle_root) {\n-        secp256k1_xonly_pubkey pubkey;\n-        if (!secp256k1_keypair_xonly_pub(secp256k1_context_sign, &pubkey, nullptr, &keypair)) return false;\n-        unsigned char pubkey_bytes[32];\n-        if (!secp256k1_xonly_pubkey_serialize(secp256k1_context_sign, pubkey_bytes, &pubkey)) return false;\n-        uint256 tweak = XOnlyPubKey(pubkey_bytes).ComputeTapTweakHash(merkle_root->IsNull() ? nullptr : merkle_root);\n-        if (!secp256k1_keypair_xonly_tweak_add(secp256k1_context_static, &keypair, tweak.data())) return false;\n+        CKey tweaked_key;",
      "path": "src/key.cpp",
      "position": null,
      "original_position": 47,
      "commit_id": "49057fc4f1e73a14f673c934573d727ae0229779",
      "original_commit_id": "6cc72ced115828c60520c2f598795ee7d41275c9",
      "in_reply_to_id": 1594325841,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yep! From the description:\r\n\r\n> The motivation is to be able to use the ::ApplyTapTweak logic outside of signing, e.g. in silent payments when retrieving the private key. Outside of silent payments, having this method would support any future use cases where the tweaked key is needed outside of signing.\r\n\r\nThis commit was broken out of the silent payments sending PR, because there we need the tweaked `CKey`. However, we do eventually turn it back into a `keypair` when passing it to libsecp, so maybe there is an argument for just returning the `keypair`? But passing around libsecp types seemed a bit weird..",
      "created_at": "2024-05-08T18:26:18Z",
      "updated_at": "2024-05-08T18:26:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30051#discussion_r1594465354",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1594465354"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30051"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 314,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1594569600",
      "pull_request_review_id": 2046546616,
      "id": 1594569600,
      "node_id": "PRRC_kwDOABII585fCzOA",
      "diff_hunk": "@@ -275,20 +275,51 @@ bool CKey::SignCompact(const uint256 &hash, std::vector<unsigned char>& vchSig)\n     return true;\n }\n \n+bool ComputeTapTweak(const CKey& internal_key, const uint256& merkle_root, CKey& tweaked_key)\n+{\n+    secp256k1_keypair keypair;\n+    if (!secp256k1_keypair_create(secp256k1_context_sign, &keypair, UCharCast(internal_key.begin()))) return false;\n+    secp256k1_xonly_pubkey pubkey;\n+    if (!secp256k1_keypair_xonly_pub(secp256k1_context_sign, &pubkey, nullptr, &keypair)) {\n+        memory_cleanse(&keypair, sizeof(keypair));\n+        return false;\n+    }\n+    unsigned char pubkey_bytes[32];\n+    if (!secp256k1_xonly_pubkey_serialize(secp256k1_context_sign, pubkey_bytes, &pubkey)) {\n+        memory_cleanse(&keypair, sizeof(keypair));\n+        return false;\n+    }\n+    uint256 tweak = XOnlyPubKey(pubkey_bytes).ComputeTapTweakHash(merkle_root.IsNull() ? nullptr : &merkle_root);\n+    if (!secp256k1_keypair_xonly_tweak_add(secp256k1_context_static, &keypair, tweak.data())) {\n+        memory_cleanse(&keypair, sizeof(keypair));\n+        return false;\n+    }\n+    unsigned char tweaked_secret_bytes[32];\n+    if (!secp256k1_keypair_sec(secp256k1_context_sign, tweaked_secret_bytes, &keypair)) {\n+        memory_cleanse(&keypair, sizeof(keypair));\n+        return false;\n+    }\n+    tweaked_key.Set(std::begin(tweaked_secret_bytes), std::end(tweaked_secret_bytes), true);\n+    memory_cleanse(&keypair, sizeof(keypair));\n+    memory_cleanse(tweaked_secret_bytes, sizeof(tweaked_secret_bytes));\n+    return tweaked_key.IsValid();\n+}\n+\n bool CKey::SignSchnorr(const uint256& hash, Span<unsigned char> sig, const uint256* merkle_root, const uint256& aux) const\n {\n     assert(sig.size() == 64);\n+    bool ret;\n     secp256k1_keypair keypair;\n-    if (!secp256k1_keypair_create(secp256k1_context_sign, &keypair, UCharCast(begin()))) return false;\n     if (merkle_root) {\n-        secp256k1_xonly_pubkey pubkey;\n-        if (!secp256k1_keypair_xonly_pub(secp256k1_context_sign, &pubkey, nullptr, &keypair)) return false;\n-        unsigned char pubkey_bytes[32];\n-        if (!secp256k1_xonly_pubkey_serialize(secp256k1_context_sign, pubkey_bytes, &pubkey)) return false;\n-        uint256 tweak = XOnlyPubKey(pubkey_bytes).ComputeTapTweakHash(merkle_root->IsNull() ? nullptr : merkle_root);\n-        if (!secp256k1_keypair_xonly_tweak_add(secp256k1_context_static, &keypair, tweak.data())) return false;\n+        CKey tweaked_key;",
      "path": "src/key.cpp",
      "position": null,
      "original_position": 47,
      "commit_id": "49057fc4f1e73a14f673c934573d727ae0229779",
      "original_commit_id": "6cc72ced115828c60520c2f598795ee7d41275c9",
      "in_reply_to_id": 1594325841,
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Hmm, if what you need is a wrapped `keypair`, how about creating a wrapped `keypair`? :) https://github.com/theuni/bitcoin/commit/db1d199bf93eae046a62245db8f7782a94f25e9d\r\n\r\n^^ Completely untested. Maybe state via `ApplyTapTweak` is unnecessary as the ctor could just take a pointer to a merkle root instead?",
      "created_at": "2024-05-08T20:08:32Z",
      "updated_at": "2024-05-08T20:28:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30051#discussion_r1594569600",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1594569600"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30051"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 314,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595092731",
      "pull_request_review_id": 2047353278,
      "id": 1595092731,
      "node_id": "PRRC_kwDOABII585fEy77",
      "diff_hunk": "@@ -275,20 +275,51 @@ bool CKey::SignCompact(const uint256 &hash, std::vector<unsigned char>& vchSig)\n     return true;\n }\n \n+bool ComputeTapTweak(const CKey& internal_key, const uint256& merkle_root, CKey& tweaked_key)\n+{\n+    secp256k1_keypair keypair;\n+    if (!secp256k1_keypair_create(secp256k1_context_sign, &keypair, UCharCast(internal_key.begin()))) return false;\n+    secp256k1_xonly_pubkey pubkey;\n+    if (!secp256k1_keypair_xonly_pub(secp256k1_context_sign, &pubkey, nullptr, &keypair)) {\n+        memory_cleanse(&keypair, sizeof(keypair));\n+        return false;\n+    }\n+    unsigned char pubkey_bytes[32];\n+    if (!secp256k1_xonly_pubkey_serialize(secp256k1_context_sign, pubkey_bytes, &pubkey)) {\n+        memory_cleanse(&keypair, sizeof(keypair));\n+        return false;\n+    }\n+    uint256 tweak = XOnlyPubKey(pubkey_bytes).ComputeTapTweakHash(merkle_root.IsNull() ? nullptr : &merkle_root);\n+    if (!secp256k1_keypair_xonly_tweak_add(secp256k1_context_static, &keypair, tweak.data())) {\n+        memory_cleanse(&keypair, sizeof(keypair));\n+        return false;\n+    }\n+    unsigned char tweaked_secret_bytes[32];\n+    if (!secp256k1_keypair_sec(secp256k1_context_sign, tweaked_secret_bytes, &keypair)) {\n+        memory_cleanse(&keypair, sizeof(keypair));\n+        return false;\n+    }\n+    tweaked_key.Set(std::begin(tweaked_secret_bytes), std::end(tweaked_secret_bytes), true);\n+    memory_cleanse(&keypair, sizeof(keypair));\n+    memory_cleanse(tweaked_secret_bytes, sizeof(tweaked_secret_bytes));\n+    return tweaked_key.IsValid();\n+}\n+\n bool CKey::SignSchnorr(const uint256& hash, Span<unsigned char> sig, const uint256* merkle_root, const uint256& aux) const\n {\n     assert(sig.size() == 64);\n+    bool ret;\n     secp256k1_keypair keypair;\n-    if (!secp256k1_keypair_create(secp256k1_context_sign, &keypair, UCharCast(begin()))) return false;\n     if (merkle_root) {\n-        secp256k1_xonly_pubkey pubkey;\n-        if (!secp256k1_keypair_xonly_pub(secp256k1_context_sign, &pubkey, nullptr, &keypair)) return false;\n-        unsigned char pubkey_bytes[32];\n-        if (!secp256k1_xonly_pubkey_serialize(secp256k1_context_sign, pubkey_bytes, &pubkey)) return false;\n-        uint256 tweak = XOnlyPubKey(pubkey_bytes).ComputeTapTweakHash(merkle_root->IsNull() ? nullptr : merkle_root);\n-        if (!secp256k1_keypair_xonly_tweak_add(secp256k1_context_static, &keypair, tweak.data())) return false;\n+        CKey tweaked_key;",
      "path": "src/key.cpp",
      "position": null,
      "original_position": 47,
      "commit_id": "49057fc4f1e73a14f673c934573d727ae0229779",
      "original_commit_id": "6cc72ced115828c60520c2f598795ee7d41275c9",
      "in_reply_to_id": 1594325841,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Nice, thanks for the suggestion! This makes a ton more sense. I think it would be better to have the ctor take a pointer to the merkle root because `ApplyTapTweak` is something that you a) only want to do once over the lifetime of the object and b) will always be applied if a `merkle_root` is present (even if its `merkle_root.IsNull() == true`). I don't think this is actually a use case, but if for whatever reason you did need to do something with the key and then later apply a merkle root tweak, you could just use the `CKey` first and then create a `KeyPair(*this, merkle_root)` with the merkle root when needed. \r\n\r\nAlso, what do you think about something like `KeyPair CKey::ComputeKeyPair(*merkle_root);` method, instead of `KeyPair(CKey, merkle_root)`?\r\n\r\nWill pull this in and test it in #28122 and #28201.",
      "created_at": "2024-05-09T07:46:23Z",
      "updated_at": "2024-05-09T07:46:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30051#discussion_r1595092731",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595092731"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30051"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 314,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595390078",
      "pull_request_review_id": 2047862139,
      "id": 1595390078,
      "node_id": "PRRC_kwDOABII585fF7h-",
      "diff_hunk": "@@ -275,20 +275,51 @@ bool CKey::SignCompact(const uint256 &hash, std::vector<unsigned char>& vchSig)\n     return true;\n }\n \n+bool ComputeTapTweak(const CKey& internal_key, const uint256& merkle_root, CKey& tweaked_key)\n+{\n+    secp256k1_keypair keypair;\n+    if (!secp256k1_keypair_create(secp256k1_context_sign, &keypair, UCharCast(internal_key.begin()))) return false;\n+    secp256k1_xonly_pubkey pubkey;\n+    if (!secp256k1_keypair_xonly_pub(secp256k1_context_sign, &pubkey, nullptr, &keypair)) {\n+        memory_cleanse(&keypair, sizeof(keypair));\n+        return false;\n+    }\n+    unsigned char pubkey_bytes[32];\n+    if (!secp256k1_xonly_pubkey_serialize(secp256k1_context_sign, pubkey_bytes, &pubkey)) {\n+        memory_cleanse(&keypair, sizeof(keypair));\n+        return false;\n+    }\n+    uint256 tweak = XOnlyPubKey(pubkey_bytes).ComputeTapTweakHash(merkle_root.IsNull() ? nullptr : &merkle_root);\n+    if (!secp256k1_keypair_xonly_tweak_add(secp256k1_context_static, &keypair, tweak.data())) {\n+        memory_cleanse(&keypair, sizeof(keypair));\n+        return false;\n+    }\n+    unsigned char tweaked_secret_bytes[32];\n+    if (!secp256k1_keypair_sec(secp256k1_context_sign, tweaked_secret_bytes, &keypair)) {\n+        memory_cleanse(&keypair, sizeof(keypair));\n+        return false;\n+    }\n+    tweaked_key.Set(std::begin(tweaked_secret_bytes), std::end(tweaked_secret_bytes), true);\n+    memory_cleanse(&keypair, sizeof(keypair));\n+    memory_cleanse(tweaked_secret_bytes, sizeof(tweaked_secret_bytes));\n+    return tweaked_key.IsValid();\n+}\n+\n bool CKey::SignSchnorr(const uint256& hash, Span<unsigned char> sig, const uint256* merkle_root, const uint256& aux) const\n {\n     assert(sig.size() == 64);\n+    bool ret;\n     secp256k1_keypair keypair;\n-    if (!secp256k1_keypair_create(secp256k1_context_sign, &keypair, UCharCast(begin()))) return false;\n     if (merkle_root) {\n-        secp256k1_xonly_pubkey pubkey;\n-        if (!secp256k1_keypair_xonly_pub(secp256k1_context_sign, &pubkey, nullptr, &keypair)) return false;\n-        unsigned char pubkey_bytes[32];\n-        if (!secp256k1_xonly_pubkey_serialize(secp256k1_context_sign, pubkey_bytes, &pubkey)) return false;\n-        uint256 tweak = XOnlyPubKey(pubkey_bytes).ComputeTapTweakHash(merkle_root->IsNull() ? nullptr : merkle_root);\n-        if (!secp256k1_keypair_xonly_tweak_add(secp256k1_context_static, &keypair, tweak.data())) return false;\n+        CKey tweaked_key;",
      "path": "src/key.cpp",
      "position": null,
      "original_position": 47,
      "commit_id": "49057fc4f1e73a14f673c934573d727ae0229779",
      "original_commit_id": "6cc72ced115828c60520c2f598795ee7d41275c9",
      "in_reply_to_id": 1594325841,
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Please consider the above a doodle, change it however you'd like. I just wanted to sketch out the concept of a wrapped `keypair`.",
      "created_at": "2024-05-09T12:37:48Z",
      "updated_at": "2024-05-09T12:37:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30051#discussion_r1595390078",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595390078"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30051"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 314,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595408180",
      "pull_request_review_id": 2047891999,
      "id": 1595408180,
      "node_id": "PRRC_kwDOABII585fF_80",
      "diff_hunk": "@@ -275,20 +275,51 @@ bool CKey::SignCompact(const uint256 &hash, std::vector<unsigned char>& vchSig)\n     return true;\n }\n \n+bool ComputeTapTweak(const CKey& internal_key, const uint256& merkle_root, CKey& tweaked_key)\n+{\n+    secp256k1_keypair keypair;\n+    if (!secp256k1_keypair_create(secp256k1_context_sign, &keypair, UCharCast(internal_key.begin()))) return false;\n+    secp256k1_xonly_pubkey pubkey;\n+    if (!secp256k1_keypair_xonly_pub(secp256k1_context_sign, &pubkey, nullptr, &keypair)) {\n+        memory_cleanse(&keypair, sizeof(keypair));\n+        return false;\n+    }\n+    unsigned char pubkey_bytes[32];\n+    if (!secp256k1_xonly_pubkey_serialize(secp256k1_context_sign, pubkey_bytes, &pubkey)) {\n+        memory_cleanse(&keypair, sizeof(keypair));\n+        return false;\n+    }\n+    uint256 tweak = XOnlyPubKey(pubkey_bytes).ComputeTapTweakHash(merkle_root.IsNull() ? nullptr : &merkle_root);\n+    if (!secp256k1_keypair_xonly_tweak_add(secp256k1_context_static, &keypair, tweak.data())) {\n+        memory_cleanse(&keypair, sizeof(keypair));\n+        return false;\n+    }\n+    unsigned char tweaked_secret_bytes[32];\n+    if (!secp256k1_keypair_sec(secp256k1_context_sign, tweaked_secret_bytes, &keypair)) {\n+        memory_cleanse(&keypair, sizeof(keypair));\n+        return false;\n+    }\n+    tweaked_key.Set(std::begin(tweaked_secret_bytes), std::end(tweaked_secret_bytes), true);\n+    memory_cleanse(&keypair, sizeof(keypair));\n+    memory_cleanse(tweaked_secret_bytes, sizeof(tweaked_secret_bytes));\n+    return tweaked_key.IsValid();\n+}\n+\n bool CKey::SignSchnorr(const uint256& hash, Span<unsigned char> sig, const uint256* merkle_root, const uint256& aux) const\n {\n     assert(sig.size() == 64);\n+    bool ret;\n     secp256k1_keypair keypair;\n-    if (!secp256k1_keypair_create(secp256k1_context_sign, &keypair, UCharCast(begin()))) return false;\n     if (merkle_root) {\n-        secp256k1_xonly_pubkey pubkey;\n-        if (!secp256k1_keypair_xonly_pub(secp256k1_context_sign, &pubkey, nullptr, &keypair)) return false;\n-        unsigned char pubkey_bytes[32];\n-        if (!secp256k1_xonly_pubkey_serialize(secp256k1_context_sign, pubkey_bytes, &pubkey)) return false;\n-        uint256 tweak = XOnlyPubKey(pubkey_bytes).ComputeTapTweakHash(merkle_root->IsNull() ? nullptr : merkle_root);\n-        if (!secp256k1_keypair_xonly_tweak_add(secp256k1_context_static, &keypair, tweak.data())) return false;\n+        CKey tweaked_key;",
      "path": "src/key.cpp",
      "position": null,
      "original_position": 47,
      "commit_id": "49057fc4f1e73a14f673c934573d727ae0229779",
      "original_commit_id": "6cc72ced115828c60520c2f598795ee7d41275c9",
      "in_reply_to_id": 1594325841,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yeah, for sure! But thanks, very helpful doodle. Not sure why I was so apprehensive about passing around a keypair, but seeing you write it out helped it click for me.",
      "created_at": "2024-05-09T12:54:23Z",
      "updated_at": "2024-05-09T12:54:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30051#discussion_r1595408180",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595408180"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30051"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 314,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595821023",
      "pull_request_review_id": 2048562521,
      "id": 1595821023,
      "node_id": "PRRC_kwDOABII585fHkvf",
      "diff_hunk": "@@ -275,20 +275,51 @@ bool CKey::SignCompact(const uint256 &hash, std::vector<unsigned char>& vchSig)\n     return true;\n }\n \n+bool ComputeTapTweak(const CKey& internal_key, const uint256& merkle_root, CKey& tweaked_key)\n+{\n+    secp256k1_keypair keypair;\n+    if (!secp256k1_keypair_create(secp256k1_context_sign, &keypair, UCharCast(internal_key.begin()))) return false;\n+    secp256k1_xonly_pubkey pubkey;\n+    if (!secp256k1_keypair_xonly_pub(secp256k1_context_sign, &pubkey, nullptr, &keypair)) {\n+        memory_cleanse(&keypair, sizeof(keypair));\n+        return false;\n+    }\n+    unsigned char pubkey_bytes[32];\n+    if (!secp256k1_xonly_pubkey_serialize(secp256k1_context_sign, pubkey_bytes, &pubkey)) {\n+        memory_cleanse(&keypair, sizeof(keypair));\n+        return false;\n+    }\n+    uint256 tweak = XOnlyPubKey(pubkey_bytes).ComputeTapTweakHash(merkle_root.IsNull() ? nullptr : &merkle_root);\n+    if (!secp256k1_keypair_xonly_tweak_add(secp256k1_context_static, &keypair, tweak.data())) {\n+        memory_cleanse(&keypair, sizeof(keypair));\n+        return false;\n+    }\n+    unsigned char tweaked_secret_bytes[32];\n+    if (!secp256k1_keypair_sec(secp256k1_context_sign, tweaked_secret_bytes, &keypair)) {\n+        memory_cleanse(&keypair, sizeof(keypair));\n+        return false;\n+    }\n+    tweaked_key.Set(std::begin(tweaked_secret_bytes), std::end(tweaked_secret_bytes), true);\n+    memory_cleanse(&keypair, sizeof(keypair));\n+    memory_cleanse(tweaked_secret_bytes, sizeof(tweaked_secret_bytes));\n+    return tweaked_key.IsValid();\n+}\n+\n bool CKey::SignSchnorr(const uint256& hash, Span<unsigned char> sig, const uint256* merkle_root, const uint256& aux) const\n {\n     assert(sig.size() == 64);\n+    bool ret;\n     secp256k1_keypair keypair;\n-    if (!secp256k1_keypair_create(secp256k1_context_sign, &keypair, UCharCast(begin()))) return false;\n     if (merkle_root) {\n-        secp256k1_xonly_pubkey pubkey;\n-        if (!secp256k1_keypair_xonly_pub(secp256k1_context_sign, &pubkey, nullptr, &keypair)) return false;\n-        unsigned char pubkey_bytes[32];\n-        if (!secp256k1_xonly_pubkey_serialize(secp256k1_context_sign, pubkey_bytes, &pubkey)) return false;\n-        uint256 tweak = XOnlyPubKey(pubkey_bytes).ComputeTapTweakHash(merkle_root->IsNull() ? nullptr : merkle_root);\n-        if (!secp256k1_keypair_xonly_tweak_add(secp256k1_context_static, &keypair, tweak.data())) return false;\n+        CKey tweaked_key;",
      "path": "src/key.cpp",
      "position": null,
      "original_position": 47,
      "commit_id": "49057fc4f1e73a14f673c934573d727ae0229779",
      "original_commit_id": "6cc72ced115828c60520c2f598795ee7d41275c9",
      "in_reply_to_id": 1594325841,
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Updated as suggested here: https://github.com/theuni/bitcoin/commits/keypairtaptweak/",
      "created_at": "2024-05-09T18:22:39Z",
      "updated_at": "2024-05-09T18:22:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30051#discussion_r1595821023",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595821023"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30051"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 314,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1596696710",
      "pull_request_review_id": 2049982773,
      "id": 1596696710,
      "node_id": "PRRC_kwDOABII585fK6iG",
      "diff_hunk": "@@ -275,20 +275,51 @@ bool CKey::SignCompact(const uint256 &hash, std::vector<unsigned char>& vchSig)\n     return true;\n }\n \n+bool ComputeTapTweak(const CKey& internal_key, const uint256& merkle_root, CKey& tweaked_key)\n+{\n+    secp256k1_keypair keypair;\n+    if (!secp256k1_keypair_create(secp256k1_context_sign, &keypair, UCharCast(internal_key.begin()))) return false;\n+    secp256k1_xonly_pubkey pubkey;\n+    if (!secp256k1_keypair_xonly_pub(secp256k1_context_sign, &pubkey, nullptr, &keypair)) {\n+        memory_cleanse(&keypair, sizeof(keypair));\n+        return false;\n+    }\n+    unsigned char pubkey_bytes[32];\n+    if (!secp256k1_xonly_pubkey_serialize(secp256k1_context_sign, pubkey_bytes, &pubkey)) {\n+        memory_cleanse(&keypair, sizeof(keypair));\n+        return false;\n+    }\n+    uint256 tweak = XOnlyPubKey(pubkey_bytes).ComputeTapTweakHash(merkle_root.IsNull() ? nullptr : &merkle_root);\n+    if (!secp256k1_keypair_xonly_tweak_add(secp256k1_context_static, &keypair, tweak.data())) {\n+        memory_cleanse(&keypair, sizeof(keypair));\n+        return false;\n+    }\n+    unsigned char tweaked_secret_bytes[32];\n+    if (!secp256k1_keypair_sec(secp256k1_context_sign, tweaked_secret_bytes, &keypair)) {\n+        memory_cleanse(&keypair, sizeof(keypair));\n+        return false;\n+    }\n+    tweaked_key.Set(std::begin(tweaked_secret_bytes), std::end(tweaked_secret_bytes), true);\n+    memory_cleanse(&keypair, sizeof(keypair));\n+    memory_cleanse(tweaked_secret_bytes, sizeof(tweaked_secret_bytes));\n+    return tweaked_key.IsValid();\n+}\n+\n bool CKey::SignSchnorr(const uint256& hash, Span<unsigned char> sig, const uint256* merkle_root, const uint256& aux) const\n {\n     assert(sig.size() == 64);\n+    bool ret;\n     secp256k1_keypair keypair;\n-    if (!secp256k1_keypair_create(secp256k1_context_sign, &keypair, UCharCast(begin()))) return false;\n     if (merkle_root) {\n-        secp256k1_xonly_pubkey pubkey;\n-        if (!secp256k1_keypair_xonly_pub(secp256k1_context_sign, &pubkey, nullptr, &keypair)) return false;\n-        unsigned char pubkey_bytes[32];\n-        if (!secp256k1_xonly_pubkey_serialize(secp256k1_context_sign, pubkey_bytes, &pubkey)) return false;\n-        uint256 tweak = XOnlyPubKey(pubkey_bytes).ComputeTapTweakHash(merkle_root->IsNull() ? nullptr : merkle_root);\n-        if (!secp256k1_keypair_xonly_tweak_add(secp256k1_context_static, &keypair, tweak.data())) return false;\n+        CKey tweaked_key;",
      "path": "src/key.cpp",
      "position": null,
      "original_position": 47,
      "commit_id": "49057fc4f1e73a14f673c934573d727ae0229779",
      "original_commit_id": "6cc72ced115828c60520c2f598795ee7d41275c9",
      "in_reply_to_id": 1594325841,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Awesome, thanks @theuni ! I pulled this commit in and also add a \"simple read only vector like interface\" to the `KeyPair` class (same as `CKey`). Needed for: https://github.com/josibake/bitcoin/blob/33868a74dc7b3403ff38343899c37feb4c88d0c6/src/common/bip352.cpp#L204\r\nI also rebased #28122 on this PR and confirmed everything works with the new `KeyPair` class.",
      "created_at": "2024-05-10T12:33:24Z",
      "updated_at": "2024-05-10T12:46:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30051#discussion_r1596696710",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1596696710"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30051"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 314,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1596806833",
      "pull_request_review_id": 2050167463,
      "id": 1596806833,
      "node_id": "PRRC_kwDOABII585fLVax",
      "diff_hunk": "@@ -203,6 +205,8 @@ class CKey\n     ECDHSecret ComputeBIP324ECDHSecret(const EllSwiftPubKey& their_ellswift,\n                                        const EllSwiftPubKey& our_ellswift,\n                                        bool initiating) const;\n+\n+    KeyPair ComputeKeyPair(const uint256* merkle_root) const;",
      "path": "src/key.h",
      "position": 28,
      "original_position": 14,
      "commit_id": "49057fc4f1e73a14f673c934573d727ae0229779",
      "original_commit_id": "0caa3241b00ee49c7f103c04b6aaad292ec18372",
      "in_reply_to_id": null,
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This could use a comment.",
      "created_at": "2024-05-10T14:11:53Z",
      "updated_at": "2024-05-10T14:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30051#discussion_r1596806833",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1596806833"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30051"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 222,
      "original_line": 222,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1596815685",
      "pull_request_review_id": 2050182032,
      "id": 1596815685,
      "node_id": "PRRC_kwDOABII585fLXlF",
      "diff_hunk": "@@ -275,20 +275,51 @@ bool CKey::SignCompact(const uint256 &hash, std::vector<unsigned char>& vchSig)\n     return true;\n }\n \n+bool ComputeTapTweak(const CKey& internal_key, const uint256& merkle_root, CKey& tweaked_key)\n+{\n+    secp256k1_keypair keypair;\n+    if (!secp256k1_keypair_create(secp256k1_context_sign, &keypair, UCharCast(internal_key.begin()))) return false;\n+    secp256k1_xonly_pubkey pubkey;\n+    if (!secp256k1_keypair_xonly_pub(secp256k1_context_sign, &pubkey, nullptr, &keypair)) {\n+        memory_cleanse(&keypair, sizeof(keypair));\n+        return false;\n+    }\n+    unsigned char pubkey_bytes[32];\n+    if (!secp256k1_xonly_pubkey_serialize(secp256k1_context_sign, pubkey_bytes, &pubkey)) {\n+        memory_cleanse(&keypair, sizeof(keypair));\n+        return false;\n+    }\n+    uint256 tweak = XOnlyPubKey(pubkey_bytes).ComputeTapTweakHash(merkle_root.IsNull() ? nullptr : &merkle_root);\n+    if (!secp256k1_keypair_xonly_tweak_add(secp256k1_context_static, &keypair, tweak.data())) {\n+        memory_cleanse(&keypair, sizeof(keypair));\n+        return false;\n+    }\n+    unsigned char tweaked_secret_bytes[32];\n+    if (!secp256k1_keypair_sec(secp256k1_context_sign, tweaked_secret_bytes, &keypair)) {\n+        memory_cleanse(&keypair, sizeof(keypair));\n+        return false;\n+    }\n+    tweaked_key.Set(std::begin(tweaked_secret_bytes), std::end(tweaked_secret_bytes), true);\n+    memory_cleanse(&keypair, sizeof(keypair));\n+    memory_cleanse(tweaked_secret_bytes, sizeof(tweaked_secret_bytes));\n+    return tweaked_key.IsValid();\n+}\n+\n bool CKey::SignSchnorr(const uint256& hash, Span<unsigned char> sig, const uint256* merkle_root, const uint256& aux) const\n {\n     assert(sig.size() == 64);\n+    bool ret;\n     secp256k1_keypair keypair;\n-    if (!secp256k1_keypair_create(secp256k1_context_sign, &keypair, UCharCast(begin()))) return false;\n     if (merkle_root) {\n-        secp256k1_xonly_pubkey pubkey;\n-        if (!secp256k1_keypair_xonly_pub(secp256k1_context_sign, &pubkey, nullptr, &keypair)) return false;\n-        unsigned char pubkey_bytes[32];\n-        if (!secp256k1_xonly_pubkey_serialize(secp256k1_context_sign, pubkey_bytes, &pubkey)) return false;\n-        uint256 tweak = XOnlyPubKey(pubkey_bytes).ComputeTapTweakHash(merkle_root->IsNull() ? nullptr : merkle_root);\n-        if (!secp256k1_keypair_xonly_tweak_add(secp256k1_context_static, &keypair, tweak.data())) return false;\n+        CKey tweaked_key;",
      "path": "src/key.cpp",
      "position": null,
      "original_position": 47,
      "commit_id": "49057fc4f1e73a14f673c934573d727ae0229779",
      "original_commit_id": "6cc72ced115828c60520c2f598795ee7d41275c9",
      "in_reply_to_id": 1594325841,
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "That looks much better, thanks. Exposing the vector-like interface is a shame, but I don't see any way around it for `secp256k1_silentpayments_sender_create_outputs`.",
      "created_at": "2024-05-10T14:19:26Z",
      "updated_at": "2024-05-10T14:19:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30051#discussion_r1596815685",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1596815685"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30051"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 314,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1596979700",
      "pull_request_review_id": 2050461011,
      "id": 1596979700,
      "node_id": "PRRC_kwDOABII585fL_n0",
      "diff_hunk": "@@ -203,6 +205,8 @@ class CKey\n     ECDHSecret ComputeBIP324ECDHSecret(const EllSwiftPubKey& their_ellswift,\n                                        const EllSwiftPubKey& our_ellswift,\n                                        bool initiating) const;\n+\n+    KeyPair ComputeKeyPair(const uint256* merkle_root) const;",
      "path": "src/key.h",
      "position": 28,
      "original_position": 14,
      "commit_id": "49057fc4f1e73a14f673c934573d727ae0229779",
      "original_commit_id": "0caa3241b00ee49c7f103c04b6aaad292ec18372",
      "in_reply_to_id": 1596806833,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2024-05-10T16:44:18Z",
      "updated_at": "2024-05-10T16:44:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30051#discussion_r1596979700",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1596979700"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30051"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 222,
      "original_line": 222,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1597605164",
      "pull_request_review_id": 2051346482,
      "id": 1597605164,
      "node_id": "PRRC_kwDOABII585fOYUs",
      "diff_hunk": "@@ -327,6 +327,16 @@ BOOST_AUTO_TEST_CASE(bip340_test_vectors)\n         // Verify those signatures for good measure.\n         BOOST_CHECK(pubkey.VerifySchnorr(msg256, sig64));\n \n+        // Repeat the same check, but use the KeyPair directly without any merkle tweak\n+        KeyPair keypair = key.ComputeKeyPair(/*merkle_root=*/nullptr);\n+        CKey keypair_seckey;\n+        BOOST_CHECK(keypair.GetKey(keypair_seckey));",
      "path": "src/test/key_tests.cpp",
      "position": null,
      "original_position": 7,
      "commit_id": "49057fc4f1e73a14f673c934573d727ae0229779",
      "original_commit_id": "bdc2a656c2d2a61d226fde1d1fd4e79664106e18",
      "in_reply_to_id": null,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: BOOST_CHECK_MESSAGE often produces more readable results, but it may be inconvenient to set it up properly. If you think it adds value, it may be helpful to add some debug info as a message in case of likely failures.",
      "created_at": "2024-05-12T10:16:07Z",
      "updated_at": "2024-05-12T10:26:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30051#discussion_r1597605164",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1597605164"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30051"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 333,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1597605647",
      "pull_request_review_id": 2051346482,
      "id": 1597605647,
      "node_id": "PRRC_kwDOABII585fOYcP",
      "diff_hunk": "@@ -236,6 +252,41 @@ struct CExtKey {\n     void SetSeed(Span<const std::byte> seed);\n };\n \n+/** KeyPair\n+ *\n+ *  Wraps a `secp256k1_keypair` type. `merkle_root` is used to optionally perform tweaking of\n+ *  the internal key, as specified in BIP341:\n+ *\n+ *  - If merkle_root == nullptr: no tweaking is done, use the internal key directly (this is\n+ *                               used for signatures in BIP342 script).\n+ *  - If merkle_root->IsNull():  tweak the internal key with H_TapTweak(pubkey) (this is used for\n+ *                               key path spending when no scripts are present).\n+ *  - Otherwise:                 tweak the internal key H_TapTweak(pubkey || *merkle_root)\n+ *                               (this is used for key path spending, with specific\n+ *                               Merkle root of the script tree).\n+ */\n+class KeyPair\n+{\n+public:\n+    KeyPair(KeyPair&&) noexcept = default;\n+    KeyPair& operator=(KeyPair&&) noexcept = default;\n+\n+    friend KeyPair CKey::ComputeKeyPair(const uint256* merkle_root) const;\n+    [[nodiscard]] bool GetKey(CKey& key) const;\n+    [[nodiscard]] bool SignSchnorr(const uint256& hash, Span<unsigned char> sig, const uint256& aux) const;\n+\n+    //! Simple read-only vector-like interface.\n+    unsigned int size() const { return m_keydata ? m_keydata->size() : 0; }\n+    const std::byte* data() const { return m_keydata ? reinterpret_cast<const std::byte*>(m_keydata->data()) : nullptr; }\n+    const std::byte* begin() const { return data(); }\n+    const std::byte* end() const { return data() + size(); }\n+private:\n+    KeyPair(const CKey& key, const uint256* merkle_root);\n+\n+    using KeyType = std::array<unsigned char, 96>;",
      "path": "src/key.h",
      "position": 90,
      "original_position": 65,
      "commit_id": "49057fc4f1e73a14f673c934573d727ae0229779",
      "original_commit_id": "bdc2a656c2d2a61d226fde1d1fd4e79664106e18",
      "in_reply_to_id": null,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: would it make sense to extract the `96` to a const?\r\n```C++\r\nconstexpr size_t SECP256K1_KEYPAIR_SIZE = 96;\r\nusing KeyType = std::array<unsigned char, SECP256K1_KEYPAIR_SIZE>;\r\n```",
      "created_at": "2024-05-12T10:18:42Z",
      "updated_at": "2024-05-12T10:26:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30051#discussion_r1597605647",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1597605647"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30051"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 310,
      "original_line": 310,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598114179",
      "pull_request_review_id": 2052091990,
      "id": 1598114179,
      "node_id": "PRRC_kwDOABII585fQUmD",
      "diff_hunk": "@@ -327,6 +327,16 @@ BOOST_AUTO_TEST_CASE(bip340_test_vectors)\n         // Verify those signatures for good measure.\n         BOOST_CHECK(pubkey.VerifySchnorr(msg256, sig64));\n \n+        // Repeat the same check, but use the KeyPair directly without any merkle tweak\n+        KeyPair keypair = key.ComputeKeyPair(/*merkle_root=*/nullptr);\n+        CKey keypair_seckey;\n+        BOOST_CHECK(keypair.GetKey(keypair_seckey));",
      "path": "src/test/key_tests.cpp",
      "position": null,
      "original_position": 7,
      "commit_id": "49057fc4f1e73a14f673c934573d727ae0229779",
      "original_commit_id": "bdc2a656c2d2a61d226fde1d1fd4e79664106e18",
      "in_reply_to_id": 1597605164,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't think it adds much here? We are using BOOST_CHECK to to ensure the function call succeeds before proceeding, so getting a line number failure for BOOST_CHECK seems sufficient for debugging. Also, if dealing with valid keys, this function should never fail.",
      "created_at": "2024-05-13T08:55:21Z",
      "updated_at": "2024-05-13T08:55:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30051#discussion_r1598114179",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598114179"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30051"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 333,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598119960",
      "pull_request_review_id": 2052101222,
      "id": 1598119960,
      "node_id": "PRRC_kwDOABII585fQWAY",
      "diff_hunk": "@@ -236,6 +252,41 @@ struct CExtKey {\n     void SetSeed(Span<const std::byte> seed);\n };\n \n+/** KeyPair\n+ *\n+ *  Wraps a `secp256k1_keypair` type. `merkle_root` is used to optionally perform tweaking of\n+ *  the internal key, as specified in BIP341:\n+ *\n+ *  - If merkle_root == nullptr: no tweaking is done, use the internal key directly (this is\n+ *                               used for signatures in BIP342 script).\n+ *  - If merkle_root->IsNull():  tweak the internal key with H_TapTweak(pubkey) (this is used for\n+ *                               key path spending when no scripts are present).\n+ *  - Otherwise:                 tweak the internal key H_TapTweak(pubkey || *merkle_root)\n+ *                               (this is used for key path spending, with specific\n+ *                               Merkle root of the script tree).\n+ */\n+class KeyPair\n+{\n+public:\n+    KeyPair(KeyPair&&) noexcept = default;\n+    KeyPair& operator=(KeyPair&&) noexcept = default;\n+\n+    friend KeyPair CKey::ComputeKeyPair(const uint256* merkle_root) const;\n+    [[nodiscard]] bool GetKey(CKey& key) const;\n+    [[nodiscard]] bool SignSchnorr(const uint256& hash, Span<unsigned char> sig, const uint256& aux) const;\n+\n+    //! Simple read-only vector-like interface.\n+    unsigned int size() const { return m_keydata ? m_keydata->size() : 0; }\n+    const std::byte* data() const { return m_keydata ? reinterpret_cast<const std::byte*>(m_keydata->data()) : nullptr; }\n+    const std::byte* begin() const { return data(); }\n+    const std::byte* end() const { return data() + size(); }\n+private:\n+    KeyPair(const CKey& key, const uint256* merkle_root);\n+\n+    using KeyType = std::array<unsigned char, 96>;",
      "path": "src/key.h",
      "position": 90,
      "original_position": 65,
      "commit_id": "49057fc4f1e73a14f673c934573d727ae0229779",
      "original_commit_id": "bdc2a656c2d2a61d226fde1d1fd4e79664106e18",
      "in_reply_to_id": 1597605647,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't really see a benefit. We shouldn't be exposing this value to anything outside the class, so defining a constexpr here seems unnecessarily verbose. ",
      "created_at": "2024-05-13T08:59:33Z",
      "updated_at": "2024-05-13T08:59:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30051#discussion_r1598119960",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598119960"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30051"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 310,
      "original_line": 310,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1672656999",
      "pull_request_review_id": 2169749598,
      "id": 1672656999,
      "node_id": "PRRC_kwDOABII585jsrhn",
      "diff_hunk": "@@ -236,6 +252,41 @@ struct CExtKey {\n     void SetSeed(Span<const std::byte> seed);\n };\n \n+/** KeyPair",
      "path": "src/key.h",
      "position": 36,
      "original_position": 34,
      "commit_id": "49057fc4f1e73a14f673c934573d727ae0229779",
      "original_commit_id": "bdc2a656c2d2a61d226fde1d1fd4e79664106e18",
      "in_reply_to_id": null,
      "user": {
        "login": "itornaza",
        "id": 11520757,
        "node_id": "MDQ6VXNlcjExNTIwNzU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/11520757?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/itornaza",
        "html_url": "https://github.com/itornaza",
        "followers_url": "https://api.github.com/users/itornaza/followers",
        "following_url": "https://api.github.com/users/itornaza/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/itornaza/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/itornaza/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/itornaza/subscriptions",
        "organizations_url": "https://api.github.com/users/itornaza/orgs",
        "repos_url": "https://api.github.com/users/itornaza/repos",
        "events_url": "https://api.github.com/users/itornaza/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/itornaza/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The same header is already and very thoughtfully provided for the following function a few lines above\r\n\r\n`KeyPair ComputeKeyPair(const uint256* merkle_root) const;` \r\n\r\n Maybe here a shorter header would be more appropriate to avoid repeating ourselves and make maintenance easier to handle (at the comment level), like so\r\n\r\n```\r\n/** KeyPair\r\n *\r\n *  Wrapper class for the `secp256k1_keypair` type.\r\n */ \r\n```\r\n",
      "created_at": "2024-07-10T16:53:01Z",
      "updated_at": "2024-07-10T17:04:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30051#discussion_r1672656999",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1672656999"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30051"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 256,
      "original_line": 256,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1672775882",
      "pull_request_review_id": 2169947102,
      "id": 1672775882,
      "node_id": "PRRC_kwDOABII585jtIjK",
      "diff_hunk": "@@ -277,27 +277,7 @@ bool CKey::SignCompact(const uint256 &hash, std::vector<unsigned char>& vchSig)\n \n bool CKey::SignSchnorr(const uint256& hash, Span<unsigned char> sig, const uint256* merkle_root, const uint256& aux) const\n {\n-    assert(sig.size() == 64);",
      "path": "src/key.cpp",
      "position": 4,
      "original_position": 4,
      "commit_id": "49057fc4f1e73a14f673c934573d727ae0229779",
      "original_commit_id": "54b3c73ec50d4c3902049a66bca56438bb4078ba",
      "in_reply_to_id": null,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Moving and modifying the code in the same commit (while many of the changes serve different purposes, mixing low and high-risk changes) makes the review a lot harder since the diff isn't really useful – having separate red and green parts, not really a diff.\r\n\r\nAdditionally, the commit doesn't explain each change separately. For example:\r\n* The exact reason for memory management changes (via `make_secure_unique`) is not explained, nor are the security implications or potential performance impacts discussed.\r\n* It's unclear why `GetKey` is only used in tests. Why not delete it and introduce it in another PR where it's actually needed by production code?\r\n* The fate of `memory_cleanse(&keypair, sizeof(keypair))` is not explained, nor are the implications of its removal or replacement addressed.\r\n\r\nIt would help a lot if a commit did a single thing, such as a rename or cast change, changing a constant, moving implementation over to a new method, introducing a new class, or splitting a method into two methods, etc - where the commit message explains why the change was necessarry.\r\nThis would separate trivial changes from high-risk ones that need extra attention, so we don't have unrelated changes competing for our attention.\r\n\r\nPlease see https://github.com/bitcoin/bitcoin/pull/28280/commits for an example of focused, single-purpose commits that separate low and high-risk changes (e.g., preparatory refactorings from the focus of the PR), making the review a lot easier.\r\n",
      "created_at": "2024-07-10T18:36:33Z",
      "updated_at": "2024-07-10T18:40:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30051#discussion_r1672775882",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1672775882"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30051"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 274,
      "original_line": 274,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1679854604",
      "pull_request_review_id": 2180983178,
      "id": 1679854604,
      "node_id": "PRRC_kwDOABII585kIIwM",
      "diff_hunk": "@@ -277,27 +277,7 @@ bool CKey::SignCompact(const uint256 &hash, std::vector<unsigned char>& vchSig)\n \n bool CKey::SignSchnorr(const uint256& hash, Span<unsigned char> sig, const uint256* merkle_root, const uint256& aux) const\n {\n-    assert(sig.size() == 64);",
      "path": "src/key.cpp",
      "position": 4,
      "original_position": 4,
      "commit_id": "49057fc4f1e73a14f673c934573d727ae0229779",
      "original_commit_id": "54b3c73ec50d4c3902049a66bca56438bb4078ba",
      "in_reply_to_id": 1672775882,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Hey @paplorinc , thanks for taking a look! I agree, the first commit was quite dense. I've broken the first commit into smaller commits to aid with review and tried to include more information in the commit messages as to the motivation for the changes. Per your feedback, I've also removed the `GetKey` method as its not necessary.",
      "created_at": "2024-07-16T18:21:39Z",
      "updated_at": "2024-07-16T18:21:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30051#discussion_r1679854604",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1679854604"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30051"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 274,
      "original_line": 274,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1679873577",
      "pull_request_review_id": 2181004865,
      "id": 1679873577,
      "node_id": "PRRC_kwDOABII585kINYp",
      "diff_hunk": "@@ -236,6 +252,41 @@ struct CExtKey {\n     void SetSeed(Span<const std::byte> seed);\n };\n \n+/** KeyPair",
      "path": "src/key.h",
      "position": 36,
      "original_position": 34,
      "commit_id": "49057fc4f1e73a14f673c934573d727ae0229779",
      "original_commit_id": "bdc2a656c2d2a61d226fde1d1fd4e79664106e18",
      "in_reply_to_id": 1672656999,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Hey @itornaza , thanks for the review! I've incorporated your feedback and moved the comment regarding the merkle root to the `ComputeKeyPair` function and made this comment more specific to the class itself.",
      "created_at": "2024-07-16T18:31:13Z",
      "updated_at": "2024-07-16T18:31:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30051#discussion_r1679873577",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1679873577"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30051"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 256,
      "original_line": 256,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1681077911",
      "pull_request_review_id": 2182966578,
      "id": 1681077911,
      "node_id": "PRRC_kwDOABII585kMzaX",
      "diff_hunk": "@@ -272,21 +272,23 @@ bool CKey::SignCompact(const uint256 &hash, std::vector<unsigned char>& vchSig)\n bool CKey::SignSchnorr(const uint256& hash, Span<unsigned char> sig, const uint256* merkle_root, const uint256& aux) const\n {\n     assert(sig.size() == 64);\n+    bool ret = 1;\n     secp256k1_keypair keypair;\n     if (!secp256k1_keypair_create(secp256k1_context_sign, &keypair, UCharCast(begin()))) return false;\n     if (merkle_root) {\n         secp256k1_xonly_pubkey pubkey;\n-        if (!secp256k1_keypair_xonly_pub(secp256k1_context_sign, &pubkey, nullptr, &keypair)) return false;\n+        ret &= secp256k1_keypair_xonly_pub(secp256k1_context_sign, &pubkey, nullptr, &keypair);\n         unsigned char pubkey_bytes[32];\n-        if (!secp256k1_xonly_pubkey_serialize(secp256k1_context_sign, pubkey_bytes, &pubkey)) return false;\n+        ret &= secp256k1_xonly_pubkey_serialize(secp256k1_context_sign, pubkey_bytes, &pubkey);\n         uint256 tweak = XOnlyPubKey(pubkey_bytes).ComputeTapTweakHash(merkle_root->IsNull() ? nullptr : merkle_root);\n-        if (!secp256k1_keypair_xonly_tweak_add(secp256k1_context_static, &keypair, tweak.data())) return false;\n+        ret &= secp256k1_keypair_xonly_tweak_add(secp256k1_context_static, &keypair, tweak.data());\n     }\n-    bool ret = secp256k1_schnorrsig_sign32(secp256k1_context_sign, sig.data(), hash.data(), &keypair, aux.data());\n+    if (!ret) return false;\n+    ret &= secp256k1_schnorrsig_sign32(secp256k1_context_sign, sig.data(), hash.data(), &keypair, aux.data());",
      "path": "src/key.cpp",
      "position": null,
      "original_position": 20,
      "commit_id": "49057fc4f1e73a14f673c934573d727ae0229779",
      "original_commit_id": "4e8d61e750487f8ff81e3411a014b0a907c5e47d",
      "in_reply_to_id": null,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: it might be simplified to `ret =` - or even `bool ret =` if we narrow the scope of the previous one.",
      "created_at": "2024-07-17T13:40:46Z",
      "updated_at": "2024-07-17T15:04:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30051#discussion_r1681077911",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1681077911"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30051"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 287,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1681187567",
      "pull_request_review_id": 2182966578,
      "id": 1681187567,
      "node_id": "PRRC_kwDOABII585kNOLv",
      "diff_hunk": "@@ -272,21 +272,23 @@ bool CKey::SignCompact(const uint256 &hash, std::vector<unsigned char>& vchSig)\n bool CKey::SignSchnorr(const uint256& hash, Span<unsigned char> sig, const uint256* merkle_root, const uint256& aux) const\n {\n     assert(sig.size() == 64);\n+    bool ret = 1;",
      "path": "src/key.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "49057fc4f1e73a14f673c934573d727ae0229779",
      "original_commit_id": "4e8d61e750487f8ff81e3411a014b0a907c5e47d",
      "in_reply_to_id": null,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: my understanding is that you've chosen this style to mimic the calls in `secp256k1_keypair_xonly_pub` and friends - but maybe it would make sense to migrate to `C++` style here, I couldn't find any other `bool` in `cpp` files where we're assigning ints, like we do in the `C` files, i.e. `bool ret = true` - or rather use it for the first assignment instead.",
      "created_at": "2024-07-17T14:43:46Z",
      "updated_at": "2024-07-17T15:05:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30051#discussion_r1681187567",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1681187567"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30051"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 275,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1681189065",
      "pull_request_review_id": 2182966578,
      "id": 1681189065,
      "node_id": "PRRC_kwDOABII585kNOjJ",
      "diff_hunk": "@@ -272,21 +272,23 @@ bool CKey::SignCompact(const uint256 &hash, std::vector<unsigned char>& vchSig)\n bool CKey::SignSchnorr(const uint256& hash, Span<unsigned char> sig, const uint256* merkle_root, const uint256& aux) const\n {\n     assert(sig.size() == 64);\n+    bool ret = 1;\n     secp256k1_keypair keypair;\n     if (!secp256k1_keypair_create(secp256k1_context_sign, &keypair, UCharCast(begin()))) return false;\n     if (merkle_root) {\n         secp256k1_xonly_pubkey pubkey;\n-        if (!secp256k1_keypair_xonly_pub(secp256k1_context_sign, &pubkey, nullptr, &keypair)) return false;\n+        ret &= secp256k1_keypair_xonly_pub(secp256k1_context_sign, &pubkey, nullptr, &keypair);\n         unsigned char pubkey_bytes[32];\n-        if (!secp256k1_xonly_pubkey_serialize(secp256k1_context_sign, pubkey_bytes, &pubkey)) return false;\n+        ret &= secp256k1_xonly_pubkey_serialize(secp256k1_context_sign, pubkey_bytes, &pubkey);\n         uint256 tweak = XOnlyPubKey(pubkey_bytes).ComputeTapTweakHash(merkle_root->IsNull() ? nullptr : merkle_root);\n-        if (!secp256k1_keypair_xonly_tweak_add(secp256k1_context_static, &keypair, tweak.data())) return false;\n+        ret &= secp256k1_keypair_xonly_tweak_add(secp256k1_context_static, &keypair, tweak.data());\n     }\n-    bool ret = secp256k1_schnorrsig_sign32(secp256k1_context_sign, sig.data(), hash.data(), &keypair, aux.data());\n+    if (!ret) return false;",
      "path": "src/key.cpp",
      "position": null,
      "original_position": 19,
      "commit_id": "49057fc4f1e73a14f673c934573d727ae0229779",
      "original_commit_id": "4e8d61e750487f8ff81e3411a014b0a907c5e47d",
      "in_reply_to_id": null,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> we do not change behavior by exiting early before attempting to sign if there is a failure with the merkle_root logic.\r\n\r\nPreviously, when an error occurred, subsequent calculations weren't performed. \r\nSince `&=` doesn't short-circuit (and even if it did, `pubkey_bytes` would be allocated and `ComputeTapTweakHash` would run even if `secp256k1_keypair_xonly_pub` failed), the methods could be called even though a previous dependency failed.\r\nAre you sure this is just a refactoring and not a behavior change?",
      "created_at": "2024-07-17T14:44:30Z",
      "updated_at": "2024-07-17T15:04:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30051#discussion_r1681189065",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1681189065"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30051"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 286,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1681189987",
      "pull_request_review_id": 2182966578,
      "id": 1681189987,
      "node_id": "PRRC_kwDOABII585kNOxj",
      "diff_hunk": "@@ -272,21 +272,23 @@ bool CKey::SignCompact(const uint256 &hash, std::vector<unsigned char>& vchSig)\n bool CKey::SignSchnorr(const uint256& hash, Span<unsigned char> sig, const uint256* merkle_root, const uint256& aux) const\n {\n     assert(sig.size() == 64);\n+    bool ret = 1;\n     secp256k1_keypair keypair;\n     if (!secp256k1_keypair_create(secp256k1_context_sign, &keypair, UCharCast(begin()))) return false;\n     if (merkle_root) {\n         secp256k1_xonly_pubkey pubkey;\n-        if (!secp256k1_keypair_xonly_pub(secp256k1_context_sign, &pubkey, nullptr, &keypair)) return false;\n+        ret &= secp256k1_keypair_xonly_pub(secp256k1_context_sign, &pubkey, nullptr, &keypair);",
      "path": "src/key.cpp",
      "position": null,
      "original_position": 10,
      "commit_id": "49057fc4f1e73a14f673c934573d727ae0229779",
      "original_commit_id": "4e8d61e750487f8ff81e3411a014b0a907c5e47d",
      "in_reply_to_id": null,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Is there any advantage in reusing `ret`, or could we do `bool ret = secp256k1_keypair_xonly_pub` and return inside the if instead?",
      "created_at": "2024-07-17T14:45:05Z",
      "updated_at": "2024-07-17T15:04:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30051#discussion_r1681189987",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1681189987"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30051"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 280,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1681216935",
      "pull_request_review_id": 2182966578,
      "id": 1681216935,
      "node_id": "PRRC_kwDOABII585kNVWn",
      "diff_hunk": "@@ -272,21 +272,23 @@ bool CKey::SignCompact(const uint256 &hash, std::vector<unsigned char>& vchSig)\n bool CKey::SignSchnorr(const uint256& hash, Span<unsigned char> sig, const uint256* merkle_root, const uint256& aux) const\n {\n     assert(sig.size() == 64);\n+    bool ret = 1;\n     secp256k1_keypair keypair;\n     if (!secp256k1_keypair_create(secp256k1_context_sign, &keypair, UCharCast(begin()))) return false;\n     if (merkle_root) {\n         secp256k1_xonly_pubkey pubkey;\n-        if (!secp256k1_keypair_xonly_pub(secp256k1_context_sign, &pubkey, nullptr, &keypair)) return false;\n+        ret &= secp256k1_keypair_xonly_pub(secp256k1_context_sign, &pubkey, nullptr, &keypair);\n         unsigned char pubkey_bytes[32];\n-        if (!secp256k1_xonly_pubkey_serialize(secp256k1_context_sign, pubkey_bytes, &pubkey)) return false;\n+        ret &= secp256k1_xonly_pubkey_serialize(secp256k1_context_sign, pubkey_bytes, &pubkey);\n         uint256 tweak = XOnlyPubKey(pubkey_bytes).ComputeTapTweakHash(merkle_root->IsNull() ? nullptr : merkle_root);",
      "path": "src/key.cpp",
      "position": null,
      "original_position": 14,
      "commit_id": "49057fc4f1e73a14f673c934573d727ae0229779",
      "original_commit_id": "4e8d61e750487f8ff81e3411a014b0a907c5e47d",
      "in_reply_to_id": null,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "off topic: we might not need a [copy of pubkey_bytes](https://github.com/bitcoin/bitcoin/blob/b946f8a4c51be42e52d63a6d578158c0b2a6b7ed/src/pubkey.cpp#L199) in this case, but I guess that's unrelated to the PR",
      "created_at": "2024-07-17T15:01:06Z",
      "updated_at": "2024-07-20T17:28:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30051#discussion_r1681216935",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1681216935"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30051"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 283,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1681219368",
      "pull_request_review_id": 2182966578,
      "id": 1681219368,
      "node_id": "PRRC_kwDOABII585kNV8o",
      "diff_hunk": "@@ -272,21 +272,23 @@ bool CKey::SignCompact(const uint256 &hash, std::vector<unsigned char>& vchSig)\n bool CKey::SignSchnorr(const uint256& hash, Span<unsigned char> sig, const uint256* merkle_root, const uint256& aux) const\n {\n     assert(sig.size() == 64);\n+    bool ret = 1;\n     secp256k1_keypair keypair;\n     if (!secp256k1_keypair_create(secp256k1_context_sign, &keypair, UCharCast(begin()))) return false;\n     if (merkle_root) {\n         secp256k1_xonly_pubkey pubkey;\n-        if (!secp256k1_keypair_xonly_pub(secp256k1_context_sign, &pubkey, nullptr, &keypair)) return false;\n+        ret &= secp256k1_keypair_xonly_pub(secp256k1_context_sign, &pubkey, nullptr, &keypair);\n         unsigned char pubkey_bytes[32];\n-        if (!secp256k1_xonly_pubkey_serialize(secp256k1_context_sign, pubkey_bytes, &pubkey)) return false;\n+        ret &= secp256k1_xonly_pubkey_serialize(secp256k1_context_sign, pubkey_bytes, &pubkey);\n         uint256 tweak = XOnlyPubKey(pubkey_bytes).ComputeTapTweakHash(merkle_root->IsNull() ? nullptr : merkle_root);\n-        if (!secp256k1_keypair_xonly_tweak_add(secp256k1_context_static, &keypair, tweak.data())) return false;\n+        ret &= secp256k1_keypair_xonly_tweak_add(secp256k1_context_static, &keypair, tweak.data());\n     }\n-    bool ret = secp256k1_schnorrsig_sign32(secp256k1_context_sign, sig.data(), hash.data(), &keypair, aux.data());\n+    if (!ret) return false;\n+    ret &= secp256k1_schnorrsig_sign32(secp256k1_context_sign, sig.data(), hash.data(), &keypair, aux.data());\n     if (ret) {\n         // Additional verification step to prevent using a potentially corrupted signature\n         secp256k1_xonly_pubkey pubkey_verify;\n-        ret = secp256k1_keypair_xonly_pub(secp256k1_context_static, &pubkey_verify, nullptr, &keypair);\n+        ret &= secp256k1_keypair_xonly_pub(secp256k1_context_static, &pubkey_verify, nullptr, &keypair);\n         ret &= secp256k1_schnorrsig_verify(secp256k1_context_static, sig.data(), hash.begin(), 32, &pubkey_verify);\n     }\n     if (!ret) memory_cleanse(sig.data(), sig.size());",
      "path": "src/key.cpp",
      "position": null,
      "original_position": 28,
      "commit_id": "49057fc4f1e73a14f673c934573d727ae0229779",
      "original_commit_id": "4e8d61e750487f8ff81e3411a014b0a907c5e47d",
      "in_reply_to_id": null,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "off topic: I'm out of my depth here, but curious, what's the reason for not needing a cleanup of keypair in the merkle_root branch as well? Was that a bug? Do we have tests for that?",
      "created_at": "2024-07-17T15:02:37Z",
      "updated_at": "2024-07-17T20:16:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30051#discussion_r1681219368",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1681219368"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30051"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 294,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1681222762",
      "pull_request_review_id": 2182966578,
      "id": 1681222762,
      "node_id": "PRRC_kwDOABII585kNWxq",
      "diff_hunk": "",
      "path": "src/key.cpp",
      "position": 1,
      "original_position": 1,
      "commit_id": "5e9f4f41de98c2cdcc74e31fe925b2f5cf9f6aec",
      "original_commit_id": "4e8d61e750487f8ff81e3411a014b0a907c5e47d",
      "in_reply_to_id": null,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: typos in commit message: `Accumlute` and `returning early on the function`",
      "created_at": "2024-07-17T15:04:25Z",
      "updated_at": "2024-07-17T15:04:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30051#discussion_r1681222762",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1681222762"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30051"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1681620128",
      "pull_request_review_id": 2183858096,
      "id": 1681620128,
      "node_id": "PRRC_kwDOABII585kO3yg",
      "diff_hunk": "",
      "path": "src/key.cpp",
      "position": 1,
      "original_position": 1,
      "commit_id": "5e9f4f41de98c2cdcc74e31fe925b2f5cf9f6aec",
      "original_commit_id": "3ca329795ce76be2201a943398cc200dec35b15a",
      "in_reply_to_id": null,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: typo in commit message: `his allows keeps the secret`,`allows for passing`, `the logic for for applying`, `and the finally move`",
      "created_at": "2024-07-17T19:30:38Z",
      "updated_at": "2024-07-17T20:15:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30051#discussion_r1681620128",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1681620128"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30051"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1681626093",
      "pull_request_review_id": 2183858096,
      "id": 1681626093,
      "node_id": "PRRC_kwDOABII585kO5Pt",
      "diff_hunk": "@@ -235,6 +242,64 @@ struct CExtKey {\n     void SetSeed(Span<const std::byte> seed);\n };\n \n+/** KeyPair\n+ *\n+ *  Wraps a `secp256k1_keypair` type, an opaque data structure for holding a secret and public key.\n+ *  This is intended for BIP340 keys and allows us to easily determine if the secret key needs to\n+ *  be negated by checking the parity of the public key. This class primarily intended for passing\n+ *  secret keys to libsecp256k1 functions expecting a `secp256k1_keypair`. For all other cases,\n+ *  CKey should be preferred.\n+ */\n+class KeyPair\n+{\n+public:\n+    KeyPair() noexcept = default;\n+    KeyPair(KeyPair&&) noexcept = default;\n+    KeyPair& operator=(KeyPair&&) noexcept = default;\n+    KeyPair& operator=(const KeyPair& other)\n+    {\n+        if (this != &other) {\n+            if (other.m_keypair) {\n+                MakeKeyPairData();\n+                *m_keypair = *other.m_keypair;\n+            } else {\n+                ClearKeyPairData();\n+            }\n+        }\n+        return *this;\n+    }\n+\n+    KeyPair(const KeyPair& other) { *this = other; }\n+\n+    friend KeyPair CKey::ComputeKeyPair() const;\n+    [[nodiscard]] bool SignSchnorr(const uint256& hash, Span<unsigned char> sig, const uint256& aux) const;\n+\n+    /**\n+     * This method will be made read-only in a later commit.\n+     * It is only read/write here to simplify the diff in the next two commits\n+     */\n+    unsigned char* data() { return m_keypair ? m_keypair->data() : nullptr; }",
      "path": "src/key.h",
      "position": null,
      "original_position": 61,
      "commit_id": "49057fc4f1e73a14f673c934573d727ae0229779",
      "original_commit_id": "3ca329795ce76be2201a943398cc200dec35b15a",
      "in_reply_to_id": null,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: would it make sense to use `IsValid()` here?",
      "created_at": "2024-07-17T19:36:43Z",
      "updated_at": "2024-07-17T20:15:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30051#discussion_r1681626093",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1681626093"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30051"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 281,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1681636478",
      "pull_request_review_id": 2183858096,
      "id": 1681636478,
      "node_id": "PRRC_kwDOABII585kO7x-",
      "diff_hunk": "@@ -273,22 +273,22 @@ bool CKey::SignSchnorr(const uint256& hash, Span<unsigned char> sig, const uint2\n {\n     assert(sig.size() == 64);\n     bool ret = 1;\n-    secp256k1_keypair keypair;\n-    if (!secp256k1_keypair_create(secp256k1_context_sign, &keypair, UCharCast(begin()))) return false;\n+    KeyPair keypair = ComputeKeyPair();\n+    if (!keypair.IsValid()) return false;",
      "path": "src/key.cpp",
      "position": null,
      "original_position": 7,
      "commit_id": "49057fc4f1e73a14f673c934573d727ae0229779",
      "original_commit_id": "21d031e7867ef97c07cee691c115d59b3aebfd19",
      "in_reply_to_id": null,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "maybe it would simplify the diff if we extracted the `keypair.data()` here\r\n```C++\r\n    KeyPair keypair = ComputeKeyPair();\r\n    if (!keypair.IsValid()) return false;\r\n    const secp256k1_keypair *keypairData = reinterpret_cast<const secp256k1_keypair *>(keypair.data());\r\n```",
      "created_at": "2024-07-17T19:45:17Z",
      "updated_at": "2024-07-17T20:16:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30051#discussion_r1681636478",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1681636478"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30051"
        }
      },
      "start_line": null,
      "original_start_line": 276,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 275,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1681648449",
      "pull_request_review_id": 2183858096,
      "id": 1681648449,
      "node_id": "PRRC_kwDOABII585kO-tB",
      "diff_hunk": "@@ -273,22 +273,22 @@ bool CKey::SignSchnorr(const uint256& hash, Span<unsigned char> sig, const uint2\n {\n     assert(sig.size() == 64);\n     bool ret = 1;\n-    secp256k1_keypair keypair;\n-    if (!secp256k1_keypair_create(secp256k1_context_sign, &keypair, UCharCast(begin()))) return false;\n+    KeyPair keypair = ComputeKeyPair();\n+    if (!keypair.IsValid()) return false;\n     if (merkle_root) {\n         secp256k1_xonly_pubkey pubkey;\n-        ret &= secp256k1_keypair_xonly_pub(secp256k1_context_sign, &pubkey, nullptr, &keypair);\n+        ret &= secp256k1_keypair_xonly_pub(secp256k1_context_sign, &pubkey, nullptr, reinterpret_cast<const secp256k1_keypair*>(keypair.data()));\n         unsigned char pubkey_bytes[32];\n         ret &= secp256k1_xonly_pubkey_serialize(secp256k1_context_sign, pubkey_bytes, &pubkey);\n         uint256 tweak = XOnlyPubKey(pubkey_bytes).ComputeTapTweakHash(merkle_root->IsNull() ? nullptr : merkle_root);\n-        ret &= secp256k1_keypair_xonly_tweak_add(secp256k1_context_static, &keypair, tweak.data());\n+        ret &= secp256k1_keypair_xonly_tweak_add(secp256k1_context_static, reinterpret_cast<secp256k1_keypair*>(keypair.data()), tweak.data());",
      "path": "src/key.cpp",
      "position": null,
      "original_position": 16,
      "commit_id": "49057fc4f1e73a14f673c934573d727ae0229779",
      "original_commit_id": "21d031e7867ef97c07cee691c115d59b3aebfd19",
      "in_reply_to_id": null,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Might make the code more uniform (and maybe the diff simpler, if we'd extract it as suggested above) if instead of not making this a const cast, like the rest, we rather added the const to the method's signature:\r\n```patch\r\ndiff --git a/src/secp256k1/include/secp256k1_extrakeys.h b/src/secp256k1/include/secp256k1_extrakeys.h\r\n--- a/src/secp256k1/include/secp256k1_extrakeys.h\t(revision 21d031e7867ef97c07cee691c115d59b3aebfd19)\r\n+++ b/src/secp256k1/include/secp256k1_extrakeys.h\t(date 1721245901582)\r\n@@ -236,7 +236,7 @@\r\n  */\r\n SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_keypair_xonly_tweak_add(\r\n     const secp256k1_context *ctx,\r\n-    secp256k1_keypair *keypair,\r\n+    const secp256k1_keypair *keypair,\r\n     const unsigned char *tweak32\r\n ) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3);\r\n \r\nIndex: src/secp256k1/src/modules/extrakeys/main_impl.h\r\nIDEA additional info:\r\nSubsystem: com.intellij.openapi.diff.impl.patch.CharsetEP\r\n<+>UTF-8\r\n===================================================================\r\ndiff --git a/src/secp256k1/src/modules/extrakeys/main_impl.h b/src/secp256k1/src/modules/extrakeys/main_impl.h\r\n--- a/src/secp256k1/src/modules/extrakeys/main_impl.h\t(revision 21d031e7867ef97c07cee691c115d59b3aebfd19)\r\n+++ b/src/secp256k1/src/modules/extrakeys/main_impl.h\t(date 1721245849520)\r\n@@ -252,7 +252,7 @@\r\n     return 1;\r\n }\r\n \r\n-int secp256k1_keypair_xonly_tweak_add(const secp256k1_context* ctx, secp256k1_keypair *keypair, const unsigned char *tweak32) {\r\n+int secp256k1_keypair_xonly_tweak_add(const secp256k1_context* ctx, const secp256k1_keypair *keypair, const unsigned char *tweak32) {\r\n     secp256k1_ge pk;\r\n     secp256k1_scalar sk;\r\n     int y_parity;\r\n```",
      "created_at": "2024-07-17T19:54:12Z",
      "updated_at": "2024-07-17T20:15:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30051#discussion_r1681648449",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1681648449"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30051"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 284,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1681661927",
      "pull_request_review_id": 2183858096,
      "id": 1681661927,
      "node_id": "PRRC_kwDOABII585kPB_n",
      "diff_hunk": "@@ -207,8 +207,19 @@ class CKey\n     /** Compute a KeyPair\n      *\n      *  Wraps a `secp256k1_keypair` type.\n+     *\n+     *  `merkle_root` is used to optionally perform tweaking of\n+     *  the internal key, as specified in BIP341:\n+     *\n+     *  - If merkle_root == nullptr: no tweaking is done, use the internal key directly (this is\n+     *                               used for signatures in BIP342 script).\n+     *  - If merkle_root->IsNull():  tweak the internal key with H_TapTweak(pubkey) (this is used for\n+     *                               key path spending when no scripts are present).\n+     *  - Otherwise:                 tweak the internal key H_TapTweak(pubkey || *merkle_root)",
      "path": "src/key.h",
      "position": null,
      "original_position": 12,
      "commit_id": "49057fc4f1e73a14f673c934573d727ae0229779",
      "original_commit_id": "82af81b51a84097fd10953d0418aac3c9b78b1c8",
      "in_reply_to_id": null,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n     *  - Otherwise:                 tweak the internal key with H_TapTweak(pubkey || *merkle_root)\r\n```",
      "created_at": "2024-07-17T20:05:09Z",
      "updated_at": "2024-07-17T20:15:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30051#discussion_r1681661927",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1681661927"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30051"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 218,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1681662778",
      "pull_request_review_id": 2183858096,
      "id": 1681662778,
      "node_id": "PRRC_kwDOABII585kPCM6",
      "diff_hunk": "@@ -207,8 +207,19 @@ class CKey\n     /** Compute a KeyPair\n      *\n      *  Wraps a `secp256k1_keypair` type.\n+     *\n+     *  `merkle_root` is used to optionally perform tweaking of\n+     *  the internal key, as specified in BIP341:\n+     *\n+     *  - If merkle_root == nullptr: no tweaking is done, use the internal key directly (this is\n+     *                               used for signatures in BIP342 script).\n+     *  - If merkle_root->IsNull():  tweak the internal key with H_TapTweak(pubkey) (this is used for\n+     *                               key path spending when no scripts are present).\n+     *  - Otherwise:                 tweak the internal key H_TapTweak(pubkey || *merkle_root)\n+     *                               (this is used for key path spending, with specific",
      "path": "src/key.h",
      "position": null,
      "original_position": 13,
      "commit_id": "49057fc4f1e73a14f673c934573d727ae0229779",
      "original_commit_id": "82af81b51a84097fd10953d0418aac3c9b78b1c8",
      "in_reply_to_id": null,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n     *                               (this is used for key path spending with a specific\r\n```",
      "created_at": "2024-07-17T20:05:42Z",
      "updated_at": "2024-07-17T20:15:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30051#discussion_r1681662778",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1681662778"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30051"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 219,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1681668029",
      "pull_request_review_id": 2183858096,
      "id": 1681668029,
      "node_id": "PRRC_kwDOABII585kPDe9",
      "diff_hunk": "@@ -271,20 +285,27 @@ class KeyPair\n \n     KeyPair(const KeyPair& other) { *this = other; }\n \n-    friend KeyPair CKey::ComputeKeyPair() const;\n+    friend KeyPair CKey::ComputeKeyPair(const uint256* merkle_root) const;\n     [[nodiscard]] bool SignSchnorr(const uint256& hash, Span<unsigned char> sig, const uint256& aux) const;\n \n     /**\n-     * This method will be made read-only in a later commit.\n-     * It is only read/write here to simplify the diff in the next two commits\n+     * This is provided as a read-only method for passing a KeyPair object to secp256k1 functions\n+     * expecting a `secp256k1_keypair`. This avoids need to create a `secp256k1_keypair` object and",
      "path": "src/key.h",
      "position": null,
      "original_position": 43,
      "commit_id": "49057fc4f1e73a14f673c934573d727ae0229779",
      "original_commit_id": "82af81b51a84097fd10953d0418aac3c9b78b1c8",
      "in_reply_to_id": null,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n     * expecting a `secp256k1_keypair`. This avoids the need to create a `secp256k1_keypair` object and\r\n ```",
      "created_at": "2024-07-17T20:09:59Z",
      "updated_at": "2024-07-17T20:15:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30051#discussion_r1681668029",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1681668029"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30051"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 293,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1681669713",
      "pull_request_review_id": 2183858096,
      "id": 1681669713,
      "node_id": "PRRC_kwDOABII585kPD5R",
      "diff_hunk": "",
      "path": "src/key.cpp",
      "position": 1,
      "original_position": 1,
      "commit_id": "5e9f4f41de98c2cdcc74e31fe925b2f5cf9f6aec",
      "original_commit_id": "a76cc3650d56f81d2c6fee2259e9f67c88c25557",
      "in_reply_to_id": null,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: typo in commit message: `Instead of calling ... instead invalidate`",
      "created_at": "2024-07-17T20:11:30Z",
      "updated_at": "2024-07-17T20:15:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30051#discussion_r1681669713",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1681669713"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30051"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1681672646",
      "pull_request_review_id": 2183858096,
      "id": 1681672646,
      "node_id": "PRRC_kwDOABII585kPEnG",
      "diff_hunk": "@@ -271,19 +271,11 @@ bool CKey::SignCompact(const uint256 &hash, std::vector<unsigned char>& vchSig)\n \n bool CKey::SignSchnorr(const uint256& hash, Span<unsigned char> sig, const uint256* merkle_root, const uint256& aux) const\n {\n-    assert(sig.size() == 64);\n-    bool ret = 1;\n     KeyPair keypair = ComputeKeyPair(merkle_root);\n     if (!keypair.IsValid()) return false;\n-    ret &= secp256k1_schnorrsig_sign32(secp256k1_context_sign, sig.data(), hash.data(), reinterpret_cast<const secp256k1_keypair*>(keypair.data()), aux.data());\n-    if (ret) {\n-        // Additional verification step to prevent using a potentially corrupted signature\n-        secp256k1_xonly_pubkey pubkey_verify;\n-        ret &= secp256k1_keypair_xonly_pub(secp256k1_context_static, &pubkey_verify, nullptr, reinterpret_cast<const secp256k1_keypair*>(keypair.data()));\n-        ret &= secp256k1_schnorrsig_verify(secp256k1_context_static, sig.data(), hash.begin(), 32, &pubkey_verify);\n-    }\n-    if (!ret) memory_cleanse(sig.data(), sig.size());\n-    memory_cleanse(&keypair, sizeof(keypair));\n+    bool ret = keypair.SignSchnorr(hash, sig, aux);\n+    /* Clear the keypair */\n+    keypair = KeyPair();",
      "path": "src/key.cpp",
      "position": null,
      "original_position": 19,
      "commit_id": "49057fc4f1e73a14f673c934573d727ae0229779",
      "original_commit_id": "a76cc3650d56f81d2c6fee2259e9f67c88c25557",
      "in_reply_to_id": null,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Might be a naive question, but isn't this a behavior change? Does it have any security implications (e.g. could it leave keys in the memory or something)?",
      "created_at": "2024-07-17T20:13:50Z",
      "updated_at": "2024-07-19T06:35:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30051#discussion_r1681672646",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1681672646"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30051"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 278,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1682584021",
      "pull_request_review_id": 2185343165,
      "id": 1682584021,
      "node_id": "PRRC_kwDOABII585kSjHV",
      "diff_hunk": "@@ -271,19 +271,11 @@ bool CKey::SignCompact(const uint256 &hash, std::vector<unsigned char>& vchSig)\n \n bool CKey::SignSchnorr(const uint256& hash, Span<unsigned char> sig, const uint256* merkle_root, const uint256& aux) const\n {\n-    assert(sig.size() == 64);\n-    bool ret = 1;\n     KeyPair keypair = ComputeKeyPair(merkle_root);\n     if (!keypair.IsValid()) return false;\n-    ret &= secp256k1_schnorrsig_sign32(secp256k1_context_sign, sig.data(), hash.data(), reinterpret_cast<const secp256k1_keypair*>(keypair.data()), aux.data());\n-    if (ret) {\n-        // Additional verification step to prevent using a potentially corrupted signature\n-        secp256k1_xonly_pubkey pubkey_verify;\n-        ret &= secp256k1_keypair_xonly_pub(secp256k1_context_static, &pubkey_verify, nullptr, reinterpret_cast<const secp256k1_keypair*>(keypair.data()));\n-        ret &= secp256k1_schnorrsig_verify(secp256k1_context_static, sig.data(), hash.begin(), 32, &pubkey_verify);\n-    }\n-    if (!ret) memory_cleanse(sig.data(), sig.size());\n-    memory_cleanse(&keypair, sizeof(keypair));\n+    bool ret = keypair.SignSchnorr(hash, sig, aux);\n+    /* Clear the keypair */\n+    keypair = KeyPair();",
      "path": "src/key.cpp",
      "position": null,
      "original_position": 19,
      "commit_id": "49057fc4f1e73a14f673c934573d727ae0229779",
      "original_commit_id": "a76cc3650d56f81d2c6fee2259e9f67c88c25557",
      "in_reply_to_id": 1681672646,
      "user": {
        "login": "itornaza",
        "id": 11520757,
        "node_id": "MDQ6VXNlcjExNTIwNzU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/11520757?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/itornaza",
        "html_url": "https://github.com/itornaza",
        "followers_url": "https://api.github.com/users/itornaza/followers",
        "following_url": "https://api.github.com/users/itornaza/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/itornaza/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/itornaza/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/itornaza/subscriptions",
        "organizations_url": "https://api.github.com/users/itornaza/orgs",
        "repos_url": "https://api.github.com/users/itornaza/repos",
        "events_url": "https://api.github.com/users/itornaza/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/itornaza/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I am also wandering how the assignment involving the default constructor will clear the existing keypair data from memory, but I might be naive as well! Since keypair is a local variable in this function shouldn't the KeyPair destructor do the secure erase job anyway at the end of the scope through RAII since m_keypair is a secure_unique_ptr?",
      "created_at": "2024-07-18T10:10:54Z",
      "updated_at": "2024-07-18T16:31:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30051#discussion_r1682584021",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1682584021"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30051"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 278,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1682594351",
      "pull_request_review_id": 2185359882,
      "id": 1682594351,
      "node_id": "PRRC_kwDOABII585kSlov",
      "diff_hunk": "@@ -271,26 +271,11 @@ bool CKey::SignCompact(const uint256 &hash, std::vector<unsigned char>& vchSig)\n \n bool CKey::SignSchnorr(const uint256& hash, Span<unsigned char> sig, const uint256* merkle_root, const uint256& aux) const\n {\n-    assert(sig.size() == 64);\n-    secp256k1_keypair keypair;\n-    if (!secp256k1_keypair_create(secp256k1_context_sign, &keypair, UCharCast(begin()))) return false;\n-    if (merkle_root) {\n-        secp256k1_xonly_pubkey pubkey;\n-        if (!secp256k1_keypair_xonly_pub(secp256k1_context_sign, &pubkey, nullptr, &keypair)) return false;\n-        unsigned char pubkey_bytes[32];\n-        if (!secp256k1_xonly_pubkey_serialize(secp256k1_context_sign, pubkey_bytes, &pubkey)) return false;\n-        uint256 tweak = XOnlyPubKey(pubkey_bytes).ComputeTapTweakHash(merkle_root->IsNull() ? nullptr : merkle_root);\n-        if (!secp256k1_keypair_xonly_tweak_add(secp256k1_context_static, &keypair, tweak.data())) return false;\n-    }\n-    bool ret = secp256k1_schnorrsig_sign32(secp256k1_context_sign, sig.data(), hash.data(), &keypair, aux.data());\n-    if (ret) {\n-        // Additional verification step to prevent using a potentially corrupted signature\n-        secp256k1_xonly_pubkey pubkey_verify;\n-        ret = secp256k1_keypair_xonly_pub(secp256k1_context_static, &pubkey_verify, nullptr, &keypair);\n-        ret &= secp256k1_schnorrsig_verify(secp256k1_context_static, sig.data(), hash.begin(), 32, &pubkey_verify);\n-    }\n-    if (!ret) memory_cleanse(sig.data(), sig.size());\n-    memory_cleanse(&keypair, sizeof(keypair));\n+    KeyPair keypair = ComputeKeyPair(merkle_root);\n+    if (!keypair.IsValid()) return false;",
      "path": "src/key.cpp",
      "position": null,
      "original_position": 25,
      "commit_id": "49057fc4f1e73a14f673c934573d727ae0229779",
      "original_commit_id": "5e9f4f41de98c2cdcc74e31fe925b2f5cf9f6aec",
      "in_reply_to_id": null,
      "user": {
        "login": "itornaza",
        "id": 11520757,
        "node_id": "MDQ6VXNlcjExNTIwNzU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/11520757?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/itornaza",
        "html_url": "https://github.com/itornaza",
        "followers_url": "https://api.github.com/users/itornaza/followers",
        "following_url": "https://api.github.com/users/itornaza/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/itornaza/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/itornaza/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/itornaza/subscriptions",
        "organizations_url": "https://api.github.com/users/itornaza/orgs",
        "repos_url": "https://api.github.com/users/itornaza/repos",
        "events_url": "https://api.github.com/users/itornaza/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/itornaza/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It would be trivial to also erase the `keypair` even if it turns out not to be valid, or would that be paranoid?",
      "created_at": "2024-07-18T10:19:23Z",
      "updated_at": "2024-07-18T10:19:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30051#discussion_r1682594351",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1682594351"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30051"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 275,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1685446875",
      "pull_request_review_id": 2189993144,
      "id": 1685446875,
      "node_id": "PRRC_kwDOABII585kdeDb",
      "diff_hunk": "@@ -272,21 +272,23 @@ bool CKey::SignCompact(const uint256 &hash, std::vector<unsigned char>& vchSig)\n bool CKey::SignSchnorr(const uint256& hash, Span<unsigned char> sig, const uint256* merkle_root, const uint256& aux) const\n {\n     assert(sig.size() == 64);\n+    bool ret = 1;\n     secp256k1_keypair keypair;\n     if (!secp256k1_keypair_create(secp256k1_context_sign, &keypair, UCharCast(begin()))) return false;\n     if (merkle_root) {\n         secp256k1_xonly_pubkey pubkey;\n-        if (!secp256k1_keypair_xonly_pub(secp256k1_context_sign, &pubkey, nullptr, &keypair)) return false;\n+        ret &= secp256k1_keypair_xonly_pub(secp256k1_context_sign, &pubkey, nullptr, &keypair);\n         unsigned char pubkey_bytes[32];\n-        if (!secp256k1_xonly_pubkey_serialize(secp256k1_context_sign, pubkey_bytes, &pubkey)) return false;\n+        ret &= secp256k1_xonly_pubkey_serialize(secp256k1_context_sign, pubkey_bytes, &pubkey);\n         uint256 tweak = XOnlyPubKey(pubkey_bytes).ComputeTapTweakHash(merkle_root->IsNull() ? nullptr : merkle_root);\n-        if (!secp256k1_keypair_xonly_tweak_add(secp256k1_context_static, &keypair, tweak.data())) return false;\n+        ret &= secp256k1_keypair_xonly_tweak_add(secp256k1_context_static, &keypair, tweak.data());\n     }\n-    bool ret = secp256k1_schnorrsig_sign32(secp256k1_context_sign, sig.data(), hash.data(), &keypair, aux.data());\n+    if (!ret) return false;",
      "path": "src/key.cpp",
      "position": null,
      "original_position": 19,
      "commit_id": "49057fc4f1e73a14f673c934573d727ae0229779",
      "original_commit_id": "4e8d61e750487f8ff81e3411a014b0a907c5e47d",
      "in_reply_to_id": 1681189065,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'm fairly confident this is not a behavior change, but could have missed something. \r\n\r\nIf you look at `secp256k1_keypair_xonly_pub`, this will only fail if there was an issue creating the `keypair` object, but this is checked above so we would have already short-circuited. The same is true for `secp256k1_keypair_xonly_pubkey_serialize` (only fails if we can't load the `keypair`, which only fails if the `keypair` is malformed).\r\n\r\n`secp256k1_keypair_xonly_tweak_add` will fail if `tweak32` is greater than the curve order or if the tweak is the negation of the secret key.\r\n\r\nPutting it all together, if we can't create a valid `keypair`, the function will exit (same as before). If we do create a valid `keypair`, then the only error path we can hit is `secp256k1_keypair_xonly_tweak_add` and if we do hit an error here, we exit before attempting to sign (same as before).",
      "created_at": "2024-07-20T14:14:11Z",
      "updated_at": "2024-07-20T14:14:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30051#discussion_r1685446875",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1685446875"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30051"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 286,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1685450966",
      "pull_request_review_id": 2189997653,
      "id": 1685450966,
      "node_id": "PRRC_kwDOABII585kdfDW",
      "diff_hunk": "@@ -272,21 +272,23 @@ bool CKey::SignCompact(const uint256 &hash, std::vector<unsigned char>& vchSig)\n bool CKey::SignSchnorr(const uint256& hash, Span<unsigned char> sig, const uint256* merkle_root, const uint256& aux) const\n {\n     assert(sig.size() == 64);\n+    bool ret = 1;\n     secp256k1_keypair keypair;\n     if (!secp256k1_keypair_create(secp256k1_context_sign, &keypair, UCharCast(begin()))) return false;\n     if (merkle_root) {\n         secp256k1_xonly_pubkey pubkey;\n-        if (!secp256k1_keypair_xonly_pub(secp256k1_context_sign, &pubkey, nullptr, &keypair)) return false;\n+        ret &= secp256k1_keypair_xonly_pub(secp256k1_context_sign, &pubkey, nullptr, &keypair);",
      "path": "src/key.cpp",
      "position": null,
      "original_position": 10,
      "commit_id": "49057fc4f1e73a14f673c934573d727ae0229779",
      "original_commit_id": "4e8d61e750487f8ff81e3411a014b0a907c5e47d",
      "in_reply_to_id": 1681189987,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Personally, I don't see any reason to not reuse `ret` and I think it makes the logic easier to follow vs re-initializing the variable. Regarding returning inside the `if (ret)`, as mentioned in https://github.com/bitcoin/bitcoin/pull/30051#discussion_r1685446875, `keypair_xonly_pub` will only fail if the `keypair` is malformed, so if we've successfully created the keypair this call should never fail. So if `schnorrsig_verify` fails, we check it on the next line and clear the signature data before returning. I find this easier to follow than having a return inside the `if (ret)` block (and we don't gain anything by having an early return inside the `if (ret)` block.",
      "created_at": "2024-07-20T14:20:03Z",
      "updated_at": "2024-07-20T14:20:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30051#discussion_r1685450966",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1685450966"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30051"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 280,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1685454366",
      "pull_request_review_id": 2190000513,
      "id": 1685454366,
      "node_id": "PRRC_kwDOABII585kdf4e",
      "diff_hunk": "@@ -272,21 +272,23 @@ bool CKey::SignCompact(const uint256 &hash, std::vector<unsigned char>& vchSig)\n bool CKey::SignSchnorr(const uint256& hash, Span<unsigned char> sig, const uint256* merkle_root, const uint256& aux) const\n {\n     assert(sig.size() == 64);\n+    bool ret = 1;\n     secp256k1_keypair keypair;\n     if (!secp256k1_keypair_create(secp256k1_context_sign, &keypair, UCharCast(begin()))) return false;\n     if (merkle_root) {\n         secp256k1_xonly_pubkey pubkey;\n-        if (!secp256k1_keypair_xonly_pub(secp256k1_context_sign, &pubkey, nullptr, &keypair)) return false;\n+        ret &= secp256k1_keypair_xonly_pub(secp256k1_context_sign, &pubkey, nullptr, &keypair);\n         unsigned char pubkey_bytes[32];\n-        if (!secp256k1_xonly_pubkey_serialize(secp256k1_context_sign, pubkey_bytes, &pubkey)) return false;\n+        ret &= secp256k1_xonly_pubkey_serialize(secp256k1_context_sign, pubkey_bytes, &pubkey);\n         uint256 tweak = XOnlyPubKey(pubkey_bytes).ComputeTapTweakHash(merkle_root->IsNull() ? nullptr : merkle_root);\n-        if (!secp256k1_keypair_xonly_tweak_add(secp256k1_context_static, &keypair, tweak.data())) return false;\n+        ret &= secp256k1_keypair_xonly_tweak_add(secp256k1_context_static, &keypair, tweak.data());\n     }\n-    bool ret = secp256k1_schnorrsig_sign32(secp256k1_context_sign, sig.data(), hash.data(), &keypair, aux.data());\n+    if (!ret) return false;\n+    ret &= secp256k1_schnorrsig_sign32(secp256k1_context_sign, sig.data(), hash.data(), &keypair, aux.data());\n     if (ret) {\n         // Additional verification step to prevent using a potentially corrupted signature\n         secp256k1_xonly_pubkey pubkey_verify;\n-        ret = secp256k1_keypair_xonly_pub(secp256k1_context_static, &pubkey_verify, nullptr, &keypair);\n+        ret &= secp256k1_keypair_xonly_pub(secp256k1_context_static, &pubkey_verify, nullptr, &keypair);\n         ret &= secp256k1_schnorrsig_verify(secp256k1_context_static, sig.data(), hash.begin(), 32, &pubkey_verify);\n     }\n     if (!ret) memory_cleanse(sig.data(), sig.size());",
      "path": "src/key.cpp",
      "position": null,
      "original_position": 28,
      "commit_id": "49057fc4f1e73a14f673c934573d727ae0229779",
      "original_commit_id": "4e8d61e750487f8ff81e3411a014b0a907c5e47d",
      "in_reply_to_id": 1681219368,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good catch, I think you're right that if `xonly_tweak_add` were to fail (e.g. tweak32 is the negation of the secret key), then we would return without explicitly clearing the keypair variable. That being said, the variable should already be cleared when it goes out of scope, so the explicit `memory_cleanse` is more of a belt and suspenders approach, from what I understand.",
      "created_at": "2024-07-20T14:29:15Z",
      "updated_at": "2024-07-20T14:29:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30051#discussion_r1685454366",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1685454366"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30051"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 294,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1685459510",
      "pull_request_review_id": 2190003973,
      "id": 1685459510,
      "node_id": "PRRC_kwDOABII585kdhI2",
      "diff_hunk": "@@ -273,22 +273,22 @@ bool CKey::SignSchnorr(const uint256& hash, Span<unsigned char> sig, const uint2\n {\n     assert(sig.size() == 64);\n     bool ret = 1;\n-    secp256k1_keypair keypair;\n-    if (!secp256k1_keypair_create(secp256k1_context_sign, &keypair, UCharCast(begin()))) return false;\n+    KeyPair keypair = ComputeKeyPair();\n+    if (!keypair.IsValid()) return false;",
      "path": "src/key.cpp",
      "position": null,
      "original_position": 7,
      "commit_id": "49057fc4f1e73a14f673c934573d727ae0229779",
      "original_commit_id": "21d031e7867ef97c07cee691c115d59b3aebfd19",
      "in_reply_to_id": 1681636478,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Hm, I don't think it makes much of a difference for the diff and makes this particular staging commit more confusing by creating the `KeyPair` object just to pull out the data back out into a `secp256k1_keypair` object. The main advantage of the `KeyPair` wrapper class is that we are keeping the keypair in secure memory, which we would be undoing here by copying it out into a `keypair` object.",
      "created_at": "2024-07-20T14:48:51Z",
      "updated_at": "2024-07-20T14:48:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30051#discussion_r1685459510",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1685459510"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30051"
        }
      },
      "start_line": null,
      "original_start_line": 276,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 275,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1685460212",
      "pull_request_review_id": 2190004255,
      "id": 1685460212,
      "node_id": "PRRC_kwDOABII585kdhT0",
      "diff_hunk": "@@ -273,22 +273,22 @@ bool CKey::SignSchnorr(const uint256& hash, Span<unsigned char> sig, const uint2\n {\n     assert(sig.size() == 64);\n     bool ret = 1;\n-    secp256k1_keypair keypair;\n-    if (!secp256k1_keypair_create(secp256k1_context_sign, &keypair, UCharCast(begin()))) return false;\n+    KeyPair keypair = ComputeKeyPair();\n+    if (!keypair.IsValid()) return false;\n     if (merkle_root) {\n         secp256k1_xonly_pubkey pubkey;\n-        ret &= secp256k1_keypair_xonly_pub(secp256k1_context_sign, &pubkey, nullptr, &keypair);\n+        ret &= secp256k1_keypair_xonly_pub(secp256k1_context_sign, &pubkey, nullptr, reinterpret_cast<const secp256k1_keypair*>(keypair.data()));\n         unsigned char pubkey_bytes[32];\n         ret &= secp256k1_xonly_pubkey_serialize(secp256k1_context_sign, pubkey_bytes, &pubkey);\n         uint256 tweak = XOnlyPubKey(pubkey_bytes).ComputeTapTweakHash(merkle_root->IsNull() ? nullptr : merkle_root);\n-        ret &= secp256k1_keypair_xonly_tweak_add(secp256k1_context_static, &keypair, tweak.data());\n+        ret &= secp256k1_keypair_xonly_tweak_add(secp256k1_context_static, reinterpret_cast<secp256k1_keypair*>(keypair.data()), tweak.data());",
      "path": "src/key.cpp",
      "position": null,
      "original_position": 16,
      "commit_id": "49057fc4f1e73a14f673c934573d727ae0229779",
      "original_commit_id": "21d031e7867ef97c07cee691c115d59b3aebfd19",
      "in_reply_to_id": 1681648449,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`secp256k1_keypair_xonly_tweak_add` modifies the `keypair` object with `tweak32`, so it can't be const. More generally, libsecp256k1 is a dependency of Bitcoin Core, so we shouldn't ever be modifying `secp256k1_` functions in our code base (despite us pulling it in as a subtree).",
      "created_at": "2024-07-20T14:51:36Z",
      "updated_at": "2024-07-20T14:51:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30051#discussion_r1685460212",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1685460212"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30051"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 284,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1685462749",
      "pull_request_review_id": 2190005505,
      "id": 1685462749,
      "node_id": "PRRC_kwDOABII585kdh7d",
      "diff_hunk": "@@ -271,26 +271,11 @@ bool CKey::SignCompact(const uint256 &hash, std::vector<unsigned char>& vchSig)\n \n bool CKey::SignSchnorr(const uint256& hash, Span<unsigned char> sig, const uint256* merkle_root, const uint256& aux) const\n {\n-    assert(sig.size() == 64);\n-    secp256k1_keypair keypair;\n-    if (!secp256k1_keypair_create(secp256k1_context_sign, &keypair, UCharCast(begin()))) return false;\n-    if (merkle_root) {\n-        secp256k1_xonly_pubkey pubkey;\n-        if (!secp256k1_keypair_xonly_pub(secp256k1_context_sign, &pubkey, nullptr, &keypair)) return false;\n-        unsigned char pubkey_bytes[32];\n-        if (!secp256k1_xonly_pubkey_serialize(secp256k1_context_sign, pubkey_bytes, &pubkey)) return false;\n-        uint256 tweak = XOnlyPubKey(pubkey_bytes).ComputeTapTweakHash(merkle_root->IsNull() ? nullptr : merkle_root);\n-        if (!secp256k1_keypair_xonly_tweak_add(secp256k1_context_static, &keypair, tweak.data())) return false;\n-    }\n-    bool ret = secp256k1_schnorrsig_sign32(secp256k1_context_sign, sig.data(), hash.data(), &keypair, aux.data());\n-    if (ret) {\n-        // Additional verification step to prevent using a potentially corrupted signature\n-        secp256k1_xonly_pubkey pubkey_verify;\n-        ret = secp256k1_keypair_xonly_pub(secp256k1_context_static, &pubkey_verify, nullptr, &keypair);\n-        ret &= secp256k1_schnorrsig_verify(secp256k1_context_static, sig.data(), hash.begin(), 32, &pubkey_verify);\n-    }\n-    if (!ret) memory_cleanse(sig.data(), sig.size());\n-    memory_cleanse(&keypair, sizeof(keypair));\n+    KeyPair keypair = ComputeKeyPair(merkle_root);\n+    if (!keypair.IsValid()) return false;",
      "path": "src/key.cpp",
      "position": null,
      "original_position": 25,
      "commit_id": "49057fc4f1e73a14f673c934573d727ae0229779",
      "original_commit_id": "5e9f4f41de98c2cdcc74e31fe925b2f5cf9f6aec",
      "in_reply_to_id": 1682594351,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`IsValid()` returns false when `m_keypair` data is a nullptr, which effectively means the key data was never created or has been cleared (see `src/support/allocators/secure.h`)",
      "created_at": "2024-07-20T15:01:10Z",
      "updated_at": "2024-07-20T15:01:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30051#discussion_r1685462749",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1685462749"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30051"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 275,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1685467250",
      "pull_request_review_id": 2190007895,
      "id": 1685467250,
      "node_id": "PRRC_kwDOABII585kdjBy",
      "diff_hunk": "@@ -271,19 +271,11 @@ bool CKey::SignCompact(const uint256 &hash, std::vector<unsigned char>& vchSig)\n \n bool CKey::SignSchnorr(const uint256& hash, Span<unsigned char> sig, const uint256* merkle_root, const uint256& aux) const\n {\n-    assert(sig.size() == 64);\n-    bool ret = 1;\n     KeyPair keypair = ComputeKeyPair(merkle_root);\n     if (!keypair.IsValid()) return false;\n-    ret &= secp256k1_schnorrsig_sign32(secp256k1_context_sign, sig.data(), hash.data(), reinterpret_cast<const secp256k1_keypair*>(keypair.data()), aux.data());\n-    if (ret) {\n-        // Additional verification step to prevent using a potentially corrupted signature\n-        secp256k1_xonly_pubkey pubkey_verify;\n-        ret &= secp256k1_keypair_xonly_pub(secp256k1_context_static, &pubkey_verify, nullptr, reinterpret_cast<const secp256k1_keypair*>(keypair.data()));\n-        ret &= secp256k1_schnorrsig_verify(secp256k1_context_static, sig.data(), hash.begin(), 32, &pubkey_verify);\n-    }\n-    if (!ret) memory_cleanse(sig.data(), sig.size());\n-    memory_cleanse(&keypair, sizeof(keypair));\n+    bool ret = keypair.SignSchnorr(hash, sig, aux);\n+    /* Clear the keypair */\n+    keypair = KeyPair();",
      "path": "src/key.cpp",
      "position": null,
      "original_position": 19,
      "commit_id": "49057fc4f1e73a14f673c934573d727ae0229779",
      "original_commit_id": "a76cc3650d56f81d2c6fee2259e9f67c88c25557",
      "in_reply_to_id": 1681672646,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> Since keypair is a local variable in this function shouldn't the KeyPair destructor do the secure erase job anyway at the end of the scope through RAII since m_keypair is a secure_unique_ptr\r\n\r\nCorrect, which should happen regardless of whether or not we explicitly clear the key data with `keypair = KeyPair();`. Having `keypair = KeyPair()` a belt and suspenders by explicitly clearing the variable. This is because if we create a `KeyPair` object with the default constructor, there is no call to `MakeKeyPairData`, hence `m_keypair` is empty. When we assign this default constructed `KeyPair` to `keypair`, it calls `ClearKeyPairData` on `keypair`, which resets it. The assignment operator was copied from `CKey` and you can see an example of the same pattern used here: https://github.com/bitcoin/bitcoin/blob/5e9f4f41de98c2cdcc74e31fe925b2f5cf9f6aec/src/bip324.cpp#L66-L70",
      "created_at": "2024-07-20T15:18:00Z",
      "updated_at": "2024-07-20T15:18:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30051#discussion_r1685467250",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1685467250"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30051"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 278,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1685473421",
      "pull_request_review_id": 2190011265,
      "id": 1685473421,
      "node_id": "PRRC_kwDOABII585kdkiN",
      "diff_hunk": "",
      "path": "src/key.cpp",
      "position": 1,
      "original_position": 1,
      "commit_id": "5e9f4f41de98c2cdcc74e31fe925b2f5cf9f6aec",
      "original_commit_id": "a76cc3650d56f81d2c6fee2259e9f67c88c25557",
      "in_reply_to_id": 1681669713,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed.",
      "created_at": "2024-07-20T15:39:38Z",
      "updated_at": "2024-07-20T15:39:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30051#discussion_r1685473421",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1685473421"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30051"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1685473484",
      "pull_request_review_id": 2190011309,
      "id": 1685473484,
      "node_id": "PRRC_kwDOABII585kdkjM",
      "diff_hunk": "@@ -271,20 +285,27 @@ class KeyPair\n \n     KeyPair(const KeyPair& other) { *this = other; }\n \n-    friend KeyPair CKey::ComputeKeyPair() const;\n+    friend KeyPair CKey::ComputeKeyPair(const uint256* merkle_root) const;\n     [[nodiscard]] bool SignSchnorr(const uint256& hash, Span<unsigned char> sig, const uint256& aux) const;\n \n     /**\n-     * This method will be made read-only in a later commit.\n-     * It is only read/write here to simplify the diff in the next two commits\n+     * This is provided as a read-only method for passing a KeyPair object to secp256k1 functions\n+     * expecting a `secp256k1_keypair`. This avoids need to create a `secp256k1_keypair` object and",
      "path": "src/key.h",
      "position": null,
      "original_position": 43,
      "commit_id": "49057fc4f1e73a14f673c934573d727ae0229779",
      "original_commit_id": "82af81b51a84097fd10953d0418aac3c9b78b1c8",
      "in_reply_to_id": 1681668029,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed.",
      "created_at": "2024-07-20T15:39:47Z",
      "updated_at": "2024-07-20T15:39:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30051#discussion_r1685473484",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1685473484"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30051"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 293,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1685473548",
      "pull_request_review_id": 2190011332,
      "id": 1685473548,
      "node_id": "PRRC_kwDOABII585kdkkM",
      "diff_hunk": "@@ -207,8 +207,19 @@ class CKey\n     /** Compute a KeyPair\n      *\n      *  Wraps a `secp256k1_keypair` type.\n+     *\n+     *  `merkle_root` is used to optionally perform tweaking of\n+     *  the internal key, as specified in BIP341:\n+     *\n+     *  - If merkle_root == nullptr: no tweaking is done, use the internal key directly (this is\n+     *                               used for signatures in BIP342 script).\n+     *  - If merkle_root->IsNull():  tweak the internal key with H_TapTweak(pubkey) (this is used for\n+     *                               key path spending when no scripts are present).\n+     *  - Otherwise:                 tweak the internal key H_TapTweak(pubkey || *merkle_root)\n+     *                               (this is used for key path spending, with specific",
      "path": "src/key.h",
      "position": null,
      "original_position": 13,
      "commit_id": "49057fc4f1e73a14f673c934573d727ae0229779",
      "original_commit_id": "82af81b51a84097fd10953d0418aac3c9b78b1c8",
      "in_reply_to_id": 1681662778,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed.",
      "created_at": "2024-07-20T15:40:00Z",
      "updated_at": "2024-07-20T15:40:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30051#discussion_r1685473548",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1685473548"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30051"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 219,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1685473582",
      "pull_request_review_id": 2190011351,
      "id": 1685473582,
      "node_id": "PRRC_kwDOABII585kdkku",
      "diff_hunk": "@@ -207,8 +207,19 @@ class CKey\n     /** Compute a KeyPair\n      *\n      *  Wraps a `secp256k1_keypair` type.\n+     *\n+     *  `merkle_root` is used to optionally perform tweaking of\n+     *  the internal key, as specified in BIP341:\n+     *\n+     *  - If merkle_root == nullptr: no tweaking is done, use the internal key directly (this is\n+     *                               used for signatures in BIP342 script).\n+     *  - If merkle_root->IsNull():  tweak the internal key with H_TapTweak(pubkey) (this is used for\n+     *                               key path spending when no scripts are present).\n+     *  - Otherwise:                 tweak the internal key H_TapTweak(pubkey || *merkle_root)",
      "path": "src/key.h",
      "position": null,
      "original_position": 12,
      "commit_id": "49057fc4f1e73a14f673c934573d727ae0229779",
      "original_commit_id": "82af81b51a84097fd10953d0418aac3c9b78b1c8",
      "in_reply_to_id": 1681661927,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed.",
      "created_at": "2024-07-20T15:40:07Z",
      "updated_at": "2024-07-20T15:40:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30051#discussion_r1685473582",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1685473582"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30051"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 218,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1685473725",
      "pull_request_review_id": 2190011440,
      "id": 1685473725,
      "node_id": "PRRC_kwDOABII585kdkm9",
      "diff_hunk": "@@ -235,6 +242,64 @@ struct CExtKey {\n     void SetSeed(Span<const std::byte> seed);\n };\n \n+/** KeyPair\n+ *\n+ *  Wraps a `secp256k1_keypair` type, an opaque data structure for holding a secret and public key.\n+ *  This is intended for BIP340 keys and allows us to easily determine if the secret key needs to\n+ *  be negated by checking the parity of the public key. This class primarily intended for passing\n+ *  secret keys to libsecp256k1 functions expecting a `secp256k1_keypair`. For all other cases,\n+ *  CKey should be preferred.\n+ */\n+class KeyPair\n+{\n+public:\n+    KeyPair() noexcept = default;\n+    KeyPair(KeyPair&&) noexcept = default;\n+    KeyPair& operator=(KeyPair&&) noexcept = default;\n+    KeyPair& operator=(const KeyPair& other)\n+    {\n+        if (this != &other) {\n+            if (other.m_keypair) {\n+                MakeKeyPairData();\n+                *m_keypair = *other.m_keypair;\n+            } else {\n+                ClearKeyPairData();\n+            }\n+        }\n+        return *this;\n+    }\n+\n+    KeyPair(const KeyPair& other) { *this = other; }\n+\n+    friend KeyPair CKey::ComputeKeyPair() const;\n+    [[nodiscard]] bool SignSchnorr(const uint256& hash, Span<unsigned char> sig, const uint256& aux) const;\n+\n+    /**\n+     * This method will be made read-only in a later commit.\n+     * It is only read/write here to simplify the diff in the next two commits\n+     */\n+    unsigned char* data() { return m_keypair ? m_keypair->data() : nullptr; }",
      "path": "src/key.h",
      "position": null,
      "original_position": 61,
      "commit_id": "49057fc4f1e73a14f673c934573d727ae0229779",
      "original_commit_id": "3ca329795ce76be2201a943398cc200dec35b15a",
      "in_reply_to_id": 1681626093,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Agree, I think `IsValid` makes this more readable, updated.",
      "created_at": "2024-07-20T15:40:33Z",
      "updated_at": "2024-07-20T15:40:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30051#discussion_r1685473725",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1685473725"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30051"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 281,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1685473790",
      "pull_request_review_id": 2190011479,
      "id": 1685473790,
      "node_id": "PRRC_kwDOABII585kdkn-",
      "diff_hunk": "",
      "path": "src/key.cpp",
      "position": 1,
      "original_position": 1,
      "commit_id": "5e9f4f41de98c2cdcc74e31fe925b2f5cf9f6aec",
      "original_commit_id": "3ca329795ce76be2201a943398cc200dec35b15a",
      "in_reply_to_id": 1681620128,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed.",
      "created_at": "2024-07-20T15:40:43Z",
      "updated_at": "2024-07-20T15:40:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30051#discussion_r1685473790",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1685473790"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30051"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1685473927",
      "pull_request_review_id": 2190011508,
      "id": 1685473927,
      "node_id": "PRRC_kwDOABII585kdkqH",
      "diff_hunk": "",
      "path": "src/key.cpp",
      "position": 1,
      "original_position": 1,
      "commit_id": "5e9f4f41de98c2cdcc74e31fe925b2f5cf9f6aec",
      "original_commit_id": "4e8d61e750487f8ff81e3411a014b0a907c5e47d",
      "in_reply_to_id": 1681222762,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed.",
      "created_at": "2024-07-20T15:40:54Z",
      "updated_at": "2024-07-20T15:40:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30051#discussion_r1685473927",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1685473927"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30051"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1685474212",
      "pull_request_review_id": 2190011669,
      "id": 1685474212,
      "node_id": "PRRC_kwDOABII585kdkuk",
      "diff_hunk": "@@ -272,21 +272,23 @@ bool CKey::SignCompact(const uint256 &hash, std::vector<unsigned char>& vchSig)\n bool CKey::SignSchnorr(const uint256& hash, Span<unsigned char> sig, const uint256* merkle_root, const uint256& aux) const\n {\n     assert(sig.size() == 64);\n+    bool ret = 1;",
      "path": "src/key.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "49057fc4f1e73a14f673c934573d727ae0229779",
      "original_commit_id": "4e8d61e750487f8ff81e3411a014b0a907c5e47d",
      "in_reply_to_id": 1681187567,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Agree, more readable to have this as `bool ret = true;`, updated.",
      "created_at": "2024-07-20T15:42:17Z",
      "updated_at": "2024-07-20T15:42:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30051#discussion_r1685474212",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1685474212"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30051"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 275,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1685475299",
      "pull_request_review_id": 2190012425,
      "id": 1685475299,
      "node_id": "PRRC_kwDOABII585kdk_j",
      "diff_hunk": "@@ -272,21 +272,23 @@ bool CKey::SignCompact(const uint256 &hash, std::vector<unsigned char>& vchSig)\n bool CKey::SignSchnorr(const uint256& hash, Span<unsigned char> sig, const uint256* merkle_root, const uint256& aux) const\n {\n     assert(sig.size() == 64);\n+    bool ret = 1;\n     secp256k1_keypair keypair;\n     if (!secp256k1_keypair_create(secp256k1_context_sign, &keypair, UCharCast(begin()))) return false;\n     if (merkle_root) {\n         secp256k1_xonly_pubkey pubkey;\n-        if (!secp256k1_keypair_xonly_pub(secp256k1_context_sign, &pubkey, nullptr, &keypair)) return false;\n+        ret &= secp256k1_keypair_xonly_pub(secp256k1_context_sign, &pubkey, nullptr, &keypair);\n         unsigned char pubkey_bytes[32];\n-        if (!secp256k1_xonly_pubkey_serialize(secp256k1_context_sign, pubkey_bytes, &pubkey)) return false;\n+        ret &= secp256k1_xonly_pubkey_serialize(secp256k1_context_sign, pubkey_bytes, &pubkey);\n         uint256 tweak = XOnlyPubKey(pubkey_bytes).ComputeTapTweakHash(merkle_root->IsNull() ? nullptr : merkle_root);\n-        if (!secp256k1_keypair_xonly_tweak_add(secp256k1_context_static, &keypair, tweak.data())) return false;\n+        ret &= secp256k1_keypair_xonly_tweak_add(secp256k1_context_static, &keypair, tweak.data());\n     }\n-    bool ret = secp256k1_schnorrsig_sign32(secp256k1_context_sign, sig.data(), hash.data(), &keypair, aux.data());\n+    if (!ret) return false;\n+    ret &= secp256k1_schnorrsig_sign32(secp256k1_context_sign, sig.data(), hash.data(), &keypair, aux.data());",
      "path": "src/key.cpp",
      "position": null,
      "original_position": 20,
      "commit_id": "49057fc4f1e73a14f673c934573d727ae0229779",
      "original_commit_id": "4e8d61e750487f8ff81e3411a014b0a907c5e47d",
      "in_reply_to_id": 1681077911,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Unless there is a functional disadvantage to having it this way, I prefer this for readability as it makes it more clear (to me, anyways) that we are accumulating the return values from the various secp256k1 function calls in the `ret` variable.",
      "created_at": "2024-07-20T15:46:55Z",
      "updated_at": "2024-07-20T15:46:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30051#discussion_r1685475299",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1685475299"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30051"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 287,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1685505233",
      "pull_request_review_id": 2190025749,
      "id": 1685505233,
      "node_id": "PRRC_kwDOABII585kdsTR",
      "diff_hunk": "@@ -272,21 +272,23 @@ bool CKey::SignCompact(const uint256 &hash, std::vector<unsigned char>& vchSig)\n bool CKey::SignSchnorr(const uint256& hash, Span<unsigned char> sig, const uint256* merkle_root, const uint256& aux) const\n {\n     assert(sig.size() == 64);\n+    bool ret = 1;\n     secp256k1_keypair keypair;\n     if (!secp256k1_keypair_create(secp256k1_context_sign, &keypair, UCharCast(begin()))) return false;\n     if (merkle_root) {\n         secp256k1_xonly_pubkey pubkey;\n-        if (!secp256k1_keypair_xonly_pub(secp256k1_context_sign, &pubkey, nullptr, &keypair)) return false;\n+        ret &= secp256k1_keypair_xonly_pub(secp256k1_context_sign, &pubkey, nullptr, &keypair);\n         unsigned char pubkey_bytes[32];\n-        if (!secp256k1_xonly_pubkey_serialize(secp256k1_context_sign, pubkey_bytes, &pubkey)) return false;\n+        ret &= secp256k1_xonly_pubkey_serialize(secp256k1_context_sign, pubkey_bytes, &pubkey);\n         uint256 tweak = XOnlyPubKey(pubkey_bytes).ComputeTapTweakHash(merkle_root->IsNull() ? nullptr : merkle_root);\n-        if (!secp256k1_keypair_xonly_tweak_add(secp256k1_context_static, &keypair, tweak.data())) return false;\n+        ret &= secp256k1_keypair_xonly_tweak_add(secp256k1_context_static, &keypair, tweak.data());\n     }\n-    bool ret = secp256k1_schnorrsig_sign32(secp256k1_context_sign, sig.data(), hash.data(), &keypair, aux.data());\n+    if (!ret) return false;\n+    ret &= secp256k1_schnorrsig_sign32(secp256k1_context_sign, sig.data(), hash.data(), &keypair, aux.data());",
      "path": "src/key.cpp",
      "position": null,
      "original_position": 20,
      "commit_id": "49057fc4f1e73a14f673c934573d727ae0229779",
      "original_commit_id": "4e8d61e750487f8ff81e3411a014b0a907c5e47d",
      "in_reply_to_id": 1681077911,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "it's narrowing the scope, what would be the reason for reusing a variable and widening its scope?\r\nIf you feel strongly about it, I don't particularly mind either way.",
      "created_at": "2024-07-20T17:14:58Z",
      "updated_at": "2024-07-20T17:14:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30051#discussion_r1685505233",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1685505233"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30051"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 287,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1685506662",
      "pull_request_review_id": 2190027482,
      "id": 1685506662,
      "node_id": "PRRC_kwDOABII585kdspm",
      "diff_hunk": "@@ -272,21 +272,23 @@ bool CKey::SignCompact(const uint256 &hash, std::vector<unsigned char>& vchSig)\n bool CKey::SignSchnorr(const uint256& hash, Span<unsigned char> sig, const uint256* merkle_root, const uint256& aux) const\n {\n     assert(sig.size() == 64);\n+    bool ret = true;",
      "path": "src/key.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "49057fc4f1e73a14f673c934573d727ae0229779",
      "original_commit_id": "36ecf72a04c9ecb82660fb14a734c155e89e5abd",
      "in_reply_to_id": null,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: we could move this down, after the first early return, since it's not needed before that",
      "created_at": "2024-07-20T17:25:28Z",
      "updated_at": "2024-07-20T17:27:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30051#discussion_r1685506662",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1685506662"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30051"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 275,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1685507018",
      "pull_request_review_id": 2190027482,
      "id": 1685507018,
      "node_id": "PRRC_kwDOABII585kdsvK",
      "diff_hunk": "@@ -272,21 +272,23 @@ bool CKey::SignCompact(const uint256 &hash, std::vector<unsigned char>& vchSig)\n bool CKey::SignSchnorr(const uint256& hash, Span<unsigned char> sig, const uint256* merkle_root, const uint256& aux) const\n {\n     assert(sig.size() == 64);\n+    bool ret = 1;\n     secp256k1_keypair keypair;\n     if (!secp256k1_keypair_create(secp256k1_context_sign, &keypair, UCharCast(begin()))) return false;\n     if (merkle_root) {\n         secp256k1_xonly_pubkey pubkey;\n-        if (!secp256k1_keypair_xonly_pub(secp256k1_context_sign, &pubkey, nullptr, &keypair)) return false;\n+        ret &= secp256k1_keypair_xonly_pub(secp256k1_context_sign, &pubkey, nullptr, &keypair);\n         unsigned char pubkey_bytes[32];\n-        if (!secp256k1_xonly_pubkey_serialize(secp256k1_context_sign, pubkey_bytes, &pubkey)) return false;\n+        ret &= secp256k1_xonly_pubkey_serialize(secp256k1_context_sign, pubkey_bytes, &pubkey);\n         uint256 tweak = XOnlyPubKey(pubkey_bytes).ComputeTapTweakHash(merkle_root->IsNull() ? nullptr : merkle_root);\n-        if (!secp256k1_keypair_xonly_tweak_add(secp256k1_context_static, &keypair, tweak.data())) return false;\n+        ret &= secp256k1_keypair_xonly_tweak_add(secp256k1_context_static, &keypair, tweak.data());\n     }\n-    bool ret = secp256k1_schnorrsig_sign32(secp256k1_context_sign, sig.data(), hash.data(), &keypair, aux.data());\n+    if (!ret) return false;",
      "path": "src/key.cpp",
      "position": null,
      "original_position": 19,
      "commit_id": "49057fc4f1e73a14f673c934573d727ae0229779",
      "original_commit_id": "4e8d61e750487f8ff81e3411a014b0a907c5e47d",
      "in_reply_to_id": 1681189065,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Your version always executes all steps (e.g. computes `XOnlyPubKey(pubkey_bytes).ComputeTapTweakHash(merkle_root->IsNull() ? nullptr : merkle_root);` even after `secp256k1_keypair_load` wasn't successful, right? Previously this method wasn't executed, so at best it's a performance difference, at worst we're hoping that each method handles this error properly (which wasn't necessary before, since the first method guarded them).",
      "created_at": "2024-07-20T17:27:56Z",
      "updated_at": "2024-07-20T17:27:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30051#discussion_r1685507018",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1685507018"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30051"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 286,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1685507979",
      "pull_request_review_id": 2190029337,
      "id": 1685507979,
      "node_id": "PRRC_kwDOABII585kds-L",
      "diff_hunk": "@@ -273,22 +273,22 @@ bool CKey::SignSchnorr(const uint256& hash, Span<unsigned char> sig, const uint2\n {\n     assert(sig.size() == 64);\n     bool ret = 1;\n-    secp256k1_keypair keypair;\n-    if (!secp256k1_keypair_create(secp256k1_context_sign, &keypair, UCharCast(begin()))) return false;\n+    KeyPair keypair = ComputeKeyPair();\n+    if (!keypair.IsValid()) return false;",
      "path": "src/key.cpp",
      "position": null,
      "original_position": 7,
      "commit_id": "49057fc4f1e73a14f673c934573d727ae0229779",
      "original_commit_id": "21d031e7867ef97c07cee691c115d59b3aebfd19",
      "in_reply_to_id": 1681636478,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "there's a lot of ugly duplication because of all the `reinterpret_cast` changes. Wouldn't it make sense to extract those and simplify the function and the diff?",
      "created_at": "2024-07-20T17:34:02Z",
      "updated_at": "2024-07-20T17:34:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30051#discussion_r1685507979",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1685507979"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30051"
        }
      },
      "start_line": null,
      "original_start_line": 276,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 275,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1685508729",
      "pull_request_review_id": 2190030463,
      "id": 1685508729,
      "node_id": "PRRC_kwDOABII585kdtJ5",
      "diff_hunk": "@@ -273,22 +273,22 @@ bool CKey::SignSchnorr(const uint256& hash, Span<unsigned char> sig, const uint2\n {\n     assert(sig.size() == 64);\n     bool ret = 1;\n-    secp256k1_keypair keypair;\n-    if (!secp256k1_keypair_create(secp256k1_context_sign, &keypair, UCharCast(begin()))) return false;\n+    KeyPair keypair = ComputeKeyPair();\n+    if (!keypair.IsValid()) return false;\n     if (merkle_root) {\n         secp256k1_xonly_pubkey pubkey;\n-        ret &= secp256k1_keypair_xonly_pub(secp256k1_context_sign, &pubkey, nullptr, &keypair);\n+        ret &= secp256k1_keypair_xonly_pub(secp256k1_context_sign, &pubkey, nullptr, reinterpret_cast<const secp256k1_keypair*>(keypair.data()));\n         unsigned char pubkey_bytes[32];\n         ret &= secp256k1_xonly_pubkey_serialize(secp256k1_context_sign, pubkey_bytes, &pubkey);\n         uint256 tweak = XOnlyPubKey(pubkey_bytes).ComputeTapTweakHash(merkle_root->IsNull() ? nullptr : merkle_root);\n-        ret &= secp256k1_keypair_xonly_tweak_add(secp256k1_context_static, &keypair, tweak.data());\n+        ret &= secp256k1_keypair_xonly_tweak_add(secp256k1_context_static, reinterpret_cast<secp256k1_keypair*>(keypair.data()), tweak.data());",
      "path": "src/key.cpp",
      "position": null,
      "original_position": 16,
      "commit_id": "49057fc4f1e73a14f673c934573d727ae0229779",
      "original_commit_id": "21d031e7867ef97c07cee691c115d59b3aebfd19",
      "in_reply_to_id": 1681648449,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "right, I thought that `make` would catch that, not sure why it allowed a `memset` on a const (most be C vs C++ boundary, I guess).",
      "created_at": "2024-07-20T17:35:51Z",
      "updated_at": "2024-07-20T17:35:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30051#discussion_r1685508729",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1685508729"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30051"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 284,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1685512256",
      "pull_request_review_id": 2190034898,
      "id": 1685512256,
      "node_id": "PRRC_kwDOABII585kduBA",
      "diff_hunk": "@@ -273,22 +273,22 @@ bool CKey::SignSchnorr(const uint256& hash, Span<unsigned char> sig, const uint2\n {\n     assert(sig.size() == 64);\n     bool ret = 1;\n-    secp256k1_keypair keypair;\n-    if (!secp256k1_keypair_create(secp256k1_context_sign, &keypair, UCharCast(begin()))) return false;\n+    KeyPair keypair = ComputeKeyPair();\n+    if (!keypair.IsValid()) return false;\n     if (merkle_root) {\n         secp256k1_xonly_pubkey pubkey;\n-        ret &= secp256k1_keypair_xonly_pub(secp256k1_context_sign, &pubkey, nullptr, &keypair);\n+        ret &= secp256k1_keypair_xonly_pub(secp256k1_context_sign, &pubkey, nullptr, reinterpret_cast<const secp256k1_keypair*>(keypair.data()));\n         unsigned char pubkey_bytes[32];\n         ret &= secp256k1_xonly_pubkey_serialize(secp256k1_context_sign, pubkey_bytes, &pubkey);\n         uint256 tweak = XOnlyPubKey(pubkey_bytes).ComputeTapTweakHash(merkle_root->IsNull() ? nullptr : merkle_root);\n-        ret &= secp256k1_keypair_xonly_tweak_add(secp256k1_context_static, &keypair, tweak.data());\n+        ret &= secp256k1_keypair_xonly_tweak_add(secp256k1_context_static, reinterpret_cast<secp256k1_keypair*>(keypair.data()), tweak.data());",
      "path": "src/key.cpp",
      "position": null,
      "original_position": 16,
      "commit_id": "49057fc4f1e73a14f673c934573d727ae0229779",
      "original_commit_id": "21d031e7867ef97c07cee691c115d59b3aebfd19",
      "in_reply_to_id": 1681648449,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "That is surprising. I applied your patch directly in `bitcoin-core/secp256k1` and did get a warning:\r\n\r\n```\r\nsrc/modules/extrakeys/main_impl.h:266:12: warning: passing argument 1 of ‘memset’ discards ‘const’ qualifier from pointer target type [-Wdiscarded-qualifiers]\r\n  266 |     memset(keypair, 0, sizeof(*keypair));\r\n      |            ^~~~~~~\r\nIn file included from src/ecmult_impl.h:10,\r\n                 from src/secp256k1.c:30:\r\n/usr/include/string.h:61:28: note: expected ‘void *’ but argument is of type ‘const secp256k1_keypair *’\r\n   61 | extern void *memset (void *__s, int __c, size_t __n) __THROW __nonnull ((1));\r\n      |                      ~~~~~~^~~\r\nsrc/modules/extrakeys/main_impl.h:278:32: warning: passing argument 1 of ‘secp256k1_keypair_save’ discards ‘const’ qualifier from pointer target type [-Wdiscarded-qualifiers]\r\n  278 |         secp256k1_keypair_save(keypair, &sk, &pk);\r\n      |                                ^~~~~~~\r\nsrc/modules/extrakeys/main_impl.h:156:55: note: expected ‘secp256k1_keypair *’ but argument is of type ‘const secp256k1_keypair *’\r\n  156 | static void secp256k1_keypair_save(secp256k1_keypair *keypair, const secp256k1_scalar *sk, secp256k1_ge *pk) {\r\n```\r\n\r\nwhich is good, but I would have also expected it to fail to compile :thinking: ",
      "created_at": "2024-07-20T18:01:55Z",
      "updated_at": "2024-07-20T18:01:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30051#discussion_r1685512256",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1685512256"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30051"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 284,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1685519477",
      "pull_request_review_id": 2190043088,
      "id": 1685519477,
      "node_id": "PRRC_kwDOABII585kdvx1",
      "diff_hunk": "@@ -272,21 +272,23 @@ bool CKey::SignCompact(const uint256 &hash, std::vector<unsigned char>& vchSig)\n bool CKey::SignSchnorr(const uint256& hash, Span<unsigned char> sig, const uint256* merkle_root, const uint256& aux) const\n {\n     assert(sig.size() == 64);\n+    bool ret = 1;\n     secp256k1_keypair keypair;\n     if (!secp256k1_keypair_create(secp256k1_context_sign, &keypair, UCharCast(begin()))) return false;\n     if (merkle_root) {\n         secp256k1_xonly_pubkey pubkey;\n-        if (!secp256k1_keypair_xonly_pub(secp256k1_context_sign, &pubkey, nullptr, &keypair)) return false;\n+        ret &= secp256k1_keypair_xonly_pub(secp256k1_context_sign, &pubkey, nullptr, &keypair);\n         unsigned char pubkey_bytes[32];\n-        if (!secp256k1_xonly_pubkey_serialize(secp256k1_context_sign, pubkey_bytes, &pubkey)) return false;\n+        ret &= secp256k1_xonly_pubkey_serialize(secp256k1_context_sign, pubkey_bytes, &pubkey);\n         uint256 tweak = XOnlyPubKey(pubkey_bytes).ComputeTapTweakHash(merkle_root->IsNull() ? nullptr : merkle_root);\n-        if (!secp256k1_keypair_xonly_tweak_add(secp256k1_context_static, &keypair, tweak.data())) return false;\n+        ret &= secp256k1_keypair_xonly_tweak_add(secp256k1_context_static, &keypair, tweak.data());\n     }\n-    bool ret = secp256k1_schnorrsig_sign32(secp256k1_context_sign, sig.data(), hash.data(), &keypair, aux.data());\n+    if (!ret) return false;",
      "path": "src/key.cpp",
      "position": null,
      "original_position": 19,
      "commit_id": "49057fc4f1e73a14f673c934573d727ae0229779",
      "original_commit_id": "4e8d61e750487f8ff81e3411a014b0a907c5e47d",
      "in_reply_to_id": 1681189065,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Right, my point is there is no way to call `CKey::SignSchnorr` such that `_keypair_create` will succeed but `_xonly_pub` or `_serialize` will fail. Annoyingly, this means in the old version we have branches in the code that we cannot test (easy to prove me wrong if you have a test case :wink:). Hence, I stand by the statement this is not a behavior change and we are merely disagreeing over code aesthetics.\r\n\r\nI think you make a good point that _future_ changes to libsecp256k1 could change this (although, I'd argue if we can create a keypair object but cannot extract and serialize the pubkey portion something is seriously broken), so I can add back the early returns. However, I'll reiterate that I find it to be a bit smelly when we have if branches in the code we cannot test.",
      "created_at": "2024-07-20T18:59:34Z",
      "updated_at": "2024-07-20T18:59:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30051#discussion_r1685519477",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1685519477"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30051"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 286,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1685520450",
      "pull_request_review_id": 2190044139,
      "id": 1685520450,
      "node_id": "PRRC_kwDOABII585kdwBC",
      "diff_hunk": "@@ -273,22 +273,22 @@ bool CKey::SignSchnorr(const uint256& hash, Span<unsigned char> sig, const uint2\n {\n     assert(sig.size() == 64);\n     bool ret = 1;\n-    secp256k1_keypair keypair;\n-    if (!secp256k1_keypair_create(secp256k1_context_sign, &keypair, UCharCast(begin()))) return false;\n+    KeyPair keypair = ComputeKeyPair();\n+    if (!keypair.IsValid()) return false;",
      "path": "src/key.cpp",
      "position": null,
      "original_position": 7,
      "commit_id": "49057fc4f1e73a14f673c934573d727ae0229779",
      "original_commit_id": "21d031e7867ef97c07cee691c115d59b3aebfd19",
      "in_reply_to_id": 1681636478,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Or maybe introduce a casting helper like https://github.com/bitcoin/bitcoin/blob/master/src/span.h#L295",
      "created_at": "2024-07-20T19:09:24Z",
      "updated_at": "2024-07-20T19:09:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30051#discussion_r1685520450",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1685520450"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30051"
        }
      },
      "start_line": null,
      "original_start_line": 276,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 275,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1685520827",
      "pull_request_review_id": 2190044447,
      "id": 1685520827,
      "node_id": "PRRC_kwDOABII585kdwG7",
      "diff_hunk": "@@ -272,21 +272,23 @@ bool CKey::SignCompact(const uint256 &hash, std::vector<unsigned char>& vchSig)\n bool CKey::SignSchnorr(const uint256& hash, Span<unsigned char> sig, const uint256* merkle_root, const uint256& aux) const\n {\n     assert(sig.size() == 64);\n+    bool ret = 1;\n     secp256k1_keypair keypair;\n     if (!secp256k1_keypair_create(secp256k1_context_sign, &keypair, UCharCast(begin()))) return false;\n     if (merkle_root) {\n         secp256k1_xonly_pubkey pubkey;\n-        if (!secp256k1_keypair_xonly_pub(secp256k1_context_sign, &pubkey, nullptr, &keypair)) return false;\n+        ret &= secp256k1_keypair_xonly_pub(secp256k1_context_sign, &pubkey, nullptr, &keypair);\n         unsigned char pubkey_bytes[32];\n-        if (!secp256k1_xonly_pubkey_serialize(secp256k1_context_sign, pubkey_bytes, &pubkey)) return false;\n+        ret &= secp256k1_xonly_pubkey_serialize(secp256k1_context_sign, pubkey_bytes, &pubkey);\n         uint256 tweak = XOnlyPubKey(pubkey_bytes).ComputeTapTweakHash(merkle_root->IsNull() ? nullptr : merkle_root);\n-        if (!secp256k1_keypair_xonly_tweak_add(secp256k1_context_static, &keypair, tweak.data())) return false;\n+        ret &= secp256k1_keypair_xonly_tweak_add(secp256k1_context_static, &keypair, tweak.data());\n     }\n-    bool ret = secp256k1_schnorrsig_sign32(secp256k1_context_sign, sig.data(), hash.data(), &keypair, aux.data());\n+    if (!ret) return false;",
      "path": "src/key.cpp",
      "position": null,
      "original_position": 19,
      "commit_id": "49057fc4f1e73a14f673c934573d727ae0229779",
      "original_commit_id": "4e8d61e750487f8ff81e3411a014b0a907c5e47d",
      "in_reply_to_id": 1681189065,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Do you agree that computations are done now, that would have been avoided previously? It might return the same value, but it does different calculations than before.\r\n\r\n> it to be a bit smelly when we have if branches in the code we cannot test.\r\n\r\nabsolutely, but I don't yet see how avoiding short-circuiting helps with the testing - but exploding it into multiple methods certainly did!",
      "created_at": "2024-07-20T19:12:03Z",
      "updated_at": "2024-07-20T19:12:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30051#discussion_r1685520827",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1685520827"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30051"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 286,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1685522043",
      "pull_request_review_id": 2190045658,
      "id": 1685522043,
      "node_id": "PRRC_kwDOABII585kdwZ7",
      "diff_hunk": "@@ -273,22 +273,22 @@ bool CKey::SignSchnorr(const uint256& hash, Span<unsigned char> sig, const uint2\n {\n     assert(sig.size() == 64);\n     bool ret = 1;\n-    secp256k1_keypair keypair;\n-    if (!secp256k1_keypair_create(secp256k1_context_sign, &keypair, UCharCast(begin()))) return false;\n+    KeyPair keypair = ComputeKeyPair();\n+    if (!keypair.IsValid()) return false;",
      "path": "src/key.cpp",
      "position": null,
      "original_position": 7,
      "commit_id": "49057fc4f1e73a14f673c934573d727ae0229779",
      "original_commit_id": "21d031e7867ef97c07cee691c115d59b3aebfd19",
      "in_reply_to_id": 1681636478,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ah, sorry, I misunderstood your suggestion as \"extract\" (copy) the data out into a variable but you're suggesting saving the pointer as a variable. I think this would simplify the diff a lot, will give it a shot.\r\n\r\nThe only thing I don't like here is needing to pass it as non-const to two functions and const to the other two, but I think its okay to pass a non-const object to a function with const in the signature? ",
      "created_at": "2024-07-20T19:20:45Z",
      "updated_at": "2024-07-20T19:20:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30051#discussion_r1685522043",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1685522043"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30051"
        }
      },
      "start_line": null,
      "original_start_line": 276,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 275,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1685527164",
      "pull_request_review_id": 2190052448,
      "id": 1685527164,
      "node_id": "PRRC_kwDOABII585kdxp8",
      "diff_hunk": "@@ -273,22 +273,22 @@ bool CKey::SignSchnorr(const uint256& hash, Span<unsigned char> sig, const uint2\n {\n     assert(sig.size() == 64);\n     bool ret = 1;\n-    secp256k1_keypair keypair;\n-    if (!secp256k1_keypair_create(secp256k1_context_sign, &keypair, UCharCast(begin()))) return false;\n+    KeyPair keypair = ComputeKeyPair();\n+    if (!keypair.IsValid()) return false;",
      "path": "src/key.cpp",
      "position": null,
      "original_position": 7,
      "commit_id": "49057fc4f1e73a14f673c934573d727ae0229779",
      "original_commit_id": "21d031e7867ef97c07cee691c115d59b3aebfd19",
      "in_reply_to_id": 1681636478,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "if you end up using similar casting helper methods, the const part won't matter anymore, right?",
      "created_at": "2024-07-20T19:51:27Z",
      "updated_at": "2024-07-20T19:51:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30051#discussion_r1685527164",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1685527164"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30051"
        }
      },
      "start_line": null,
      "original_start_line": 276,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 275,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1685528003",
      "pull_request_review_id": 2190053143,
      "id": 1685528003,
      "node_id": "PRRC_kwDOABII585kdx3D",
      "diff_hunk": "@@ -272,21 +272,23 @@ bool CKey::SignCompact(const uint256 &hash, std::vector<unsigned char>& vchSig)\n bool CKey::SignSchnorr(const uint256& hash, Span<unsigned char> sig, const uint256* merkle_root, const uint256& aux) const\n {\n     assert(sig.size() == 64);\n+    bool ret = 1;\n     secp256k1_keypair keypair;\n     if (!secp256k1_keypair_create(secp256k1_context_sign, &keypair, UCharCast(begin()))) return false;\n     if (merkle_root) {\n         secp256k1_xonly_pubkey pubkey;\n-        if (!secp256k1_keypair_xonly_pub(secp256k1_context_sign, &pubkey, nullptr, &keypair)) return false;\n+        ret &= secp256k1_keypair_xonly_pub(secp256k1_context_sign, &pubkey, nullptr, &keypair);\n         unsigned char pubkey_bytes[32];\n-        if (!secp256k1_xonly_pubkey_serialize(secp256k1_context_sign, pubkey_bytes, &pubkey)) return false;\n+        ret &= secp256k1_xonly_pubkey_serialize(secp256k1_context_sign, pubkey_bytes, &pubkey);\n         uint256 tweak = XOnlyPubKey(pubkey_bytes).ComputeTapTweakHash(merkle_root->IsNull() ? nullptr : merkle_root);\n-        if (!secp256k1_keypair_xonly_tweak_add(secp256k1_context_static, &keypair, tweak.data())) return false;\n+        ret &= secp256k1_keypair_xonly_tweak_add(secp256k1_context_static, &keypair, tweak.data());\n     }\n-    bool ret = secp256k1_schnorrsig_sign32(secp256k1_context_sign, sig.data(), hash.data(), &keypair, aux.data());\n+    if (!ret) return false;",
      "path": "src/key.cpp",
      "position": null,
      "original_position": 19,
      "commit_id": "49057fc4f1e73a14f673c934573d727ae0229779",
      "original_commit_id": "4e8d61e750487f8ff81e3411a014b0a907c5e47d",
      "in_reply_to_id": 1681189065,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> Do you agree that computations are done now, that would have been avoided previously?\r\n\r\nNo, this is the part I am disagreeing with. As I explained in the first message, there is no way for `_xonly_pub` or `_serialize` to fail if `keypair_create` succeeds. If `_create`, `_xonly_pub`, and `_serialize` succeed, then `XOnlyPubKey(pubkey_bytes).ComputeTapTweakHash(merkle_root->IsNull() ? nullptr : merkle_root);` is computed. After that, `_xonly_tweak_add` will be called. `_xonly_tweak_add` can fail if tweak32 is greater than the curve order or if it is the negation of the private key that was used to create `keypair`. If this function fails, `CKey::SignSchnorr` will exit before attempting to sign, which is the same behavior in the old version and the new version.\r\n\r\n> absolutely, but I don't yet see how avoiding short-circuiting helps with the testing\r\n\r\nIt helps by removing dead branches from the code. I'd be much happier to keep it broken out into multiple if branches if we had test cases to exercise the if branches. But if we have if branches that can realistically never be hit, I think it makes the code overly complicated. In this case, we end up with a more complicated function in the hopes of preventing an unnecessary call to `ComputeTapTweakHash`, which realistically will never happen and hardly seems worth it given this is a relatively cheap operation (and one without side effects).",
      "created_at": "2024-07-20T19:57:52Z",
      "updated_at": "2024-07-20T19:57:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30051#discussion_r1685528003",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1685528003"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30051"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 286,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1685530015",
      "pull_request_review_id": 2190055046,
      "id": 1685530015,
      "node_id": "PRRC_kwDOABII585kdyWf",
      "diff_hunk": "@@ -272,21 +272,23 @@ bool CKey::SignCompact(const uint256 &hash, std::vector<unsigned char>& vchSig)\n bool CKey::SignSchnorr(const uint256& hash, Span<unsigned char> sig, const uint256* merkle_root, const uint256& aux) const\n {\n     assert(sig.size() == 64);\n+    bool ret = 1;\n     secp256k1_keypair keypair;\n     if (!secp256k1_keypair_create(secp256k1_context_sign, &keypair, UCharCast(begin()))) return false;\n     if (merkle_root) {\n         secp256k1_xonly_pubkey pubkey;\n-        if (!secp256k1_keypair_xonly_pub(secp256k1_context_sign, &pubkey, nullptr, &keypair)) return false;\n+        ret &= secp256k1_keypair_xonly_pub(secp256k1_context_sign, &pubkey, nullptr, &keypair);\n         unsigned char pubkey_bytes[32];\n-        if (!secp256k1_xonly_pubkey_serialize(secp256k1_context_sign, pubkey_bytes, &pubkey)) return false;\n+        ret &= secp256k1_xonly_pubkey_serialize(secp256k1_context_sign, pubkey_bytes, &pubkey);\n         uint256 tweak = XOnlyPubKey(pubkey_bytes).ComputeTapTweakHash(merkle_root->IsNull() ? nullptr : merkle_root);\n-        if (!secp256k1_keypair_xonly_tweak_add(secp256k1_context_static, &keypair, tweak.data())) return false;\n+        ret &= secp256k1_keypair_xonly_tweak_add(secp256k1_context_static, &keypair, tweak.data());\n     }\n-    bool ret = secp256k1_schnorrsig_sign32(secp256k1_context_sign, sig.data(), hash.data(), &keypair, aux.data());\n+    if (!ret) return false;",
      "path": "src/key.cpp",
      "position": null,
      "original_position": 19,
      "commit_id": "49057fc4f1e73a14f673c934573d727ae0229779",
      "original_commit_id": "4e8d61e750487f8ff81e3411a014b0a907c5e47d",
      "in_reply_to_id": 1681189065,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> there is no way for _xonly_pub or _serialize to fail if keypair_create succeeds\r\n\r\nI wish it were as clear in the code as it was before the change.\r\nI'll review it more thoroughly tomorrow.\r\nIf you can make the code more explicit by replacing confusing `ret &=` code with asserts where certain values can only be true, that would be helpful (if that's what you're stating).",
      "created_at": "2024-07-20T20:16:21Z",
      "updated_at": "2024-07-20T20:19:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30051#discussion_r1685530015",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1685530015"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30051"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 286,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1685690725",
      "pull_request_review_id": 2190281744,
      "id": 1685690725,
      "node_id": "PRRC_kwDOABII585keZll",
      "diff_hunk": "@@ -272,21 +272,23 @@ bool CKey::SignCompact(const uint256 &hash, std::vector<unsigned char>& vchSig)\n bool CKey::SignSchnorr(const uint256& hash, Span<unsigned char> sig, const uint256* merkle_root, const uint256& aux) const\n {\n     assert(sig.size() == 64);\n+    bool ret = 1;\n     secp256k1_keypair keypair;\n     if (!secp256k1_keypair_create(secp256k1_context_sign, &keypair, UCharCast(begin()))) return false;\n     if (merkle_root) {\n         secp256k1_xonly_pubkey pubkey;\n-        if (!secp256k1_keypair_xonly_pub(secp256k1_context_sign, &pubkey, nullptr, &keypair)) return false;\n+        ret &= secp256k1_keypair_xonly_pub(secp256k1_context_sign, &pubkey, nullptr, &keypair);\n         unsigned char pubkey_bytes[32];\n-        if (!secp256k1_xonly_pubkey_serialize(secp256k1_context_sign, pubkey_bytes, &pubkey)) return false;\n+        ret &= secp256k1_xonly_pubkey_serialize(secp256k1_context_sign, pubkey_bytes, &pubkey);\n         uint256 tweak = XOnlyPubKey(pubkey_bytes).ComputeTapTweakHash(merkle_root->IsNull() ? nullptr : merkle_root);\n-        if (!secp256k1_keypair_xonly_tweak_add(secp256k1_context_static, &keypair, tweak.data())) return false;\n+        ret &= secp256k1_keypair_xonly_tweak_add(secp256k1_context_static, &keypair, tweak.data());\n     }\n-    bool ret = secp256k1_schnorrsig_sign32(secp256k1_context_sign, sig.data(), hash.data(), &keypair, aux.data());\n+    if (!ret) return false;",
      "path": "src/key.cpp",
      "position": null,
      "original_position": 19,
      "commit_id": "49057fc4f1e73a14f673c934573d727ae0229779",
      "original_commit_id": "4e8d61e750487f8ff81e3411a014b0a907c5e47d",
      "in_reply_to_id": 1681189065,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Spent some time thinking about this and realised the main issue here is we start with a valid secret key, create a keypair (which generates the public key in the process), and then extract the public key from the keypair and serialise it. Instead, we can just get the public key directly from the secret key via `CKey::GetPubKey`. This makes the original code more clear, eliminates the unnecessary if branches and makes the diff _much_ simpler.\r\n\r\nIf you look into `GetPubKey` you can see it’s calling the same libsecp256k1 functions to generate the public key, but asserting true for the serialisation and removes the unnecessary load steps. \r\n\r\n",
      "created_at": "2024-07-21T09:09:59Z",
      "updated_at": "2024-07-21T09:09:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30051#discussion_r1685690725",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1685690725"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30051"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 286,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1685690873",
      "pull_request_review_id": 2190281884,
      "id": 1685690873,
      "node_id": "PRRC_kwDOABII585keZn5",
      "diff_hunk": "@@ -272,21 +272,23 @@ bool CKey::SignCompact(const uint256 &hash, std::vector<unsigned char>& vchSig)\n bool CKey::SignSchnorr(const uint256& hash, Span<unsigned char> sig, const uint256* merkle_root, const uint256& aux) const\n {\n     assert(sig.size() == 64);\n+    bool ret = 1;\n     secp256k1_keypair keypair;\n     if (!secp256k1_keypair_create(secp256k1_context_sign, &keypair, UCharCast(begin()))) return false;\n     if (merkle_root) {\n         secp256k1_xonly_pubkey pubkey;\n-        if (!secp256k1_keypair_xonly_pub(secp256k1_context_sign, &pubkey, nullptr, &keypair)) return false;\n+        ret &= secp256k1_keypair_xonly_pub(secp256k1_context_sign, &pubkey, nullptr, &keypair);",
      "path": "src/key.cpp",
      "position": null,
      "original_position": 10,
      "commit_id": "49057fc4f1e73a14f673c934573d727ae0229779",
      "original_commit_id": "4e8d61e750487f8ff81e3411a014b0a907c5e47d",
      "in_reply_to_id": 1681189987,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Resolving since this is no longer relevant.",
      "created_at": "2024-07-21T09:10:51Z",
      "updated_at": "2024-07-21T09:10:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30051#discussion_r1685690873",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1685690873"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30051"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 280,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1685691416",
      "pull_request_review_id": 2190282366,
      "id": 1685691416,
      "node_id": "PRRC_kwDOABII585keZwY",
      "diff_hunk": "@@ -273,22 +273,22 @@ bool CKey::SignSchnorr(const uint256& hash, Span<unsigned char> sig, const uint2\n {\n     assert(sig.size() == 64);\n     bool ret = 1;\n-    secp256k1_keypair keypair;\n-    if (!secp256k1_keypair_create(secp256k1_context_sign, &keypair, UCharCast(begin()))) return false;\n+    KeyPair keypair = ComputeKeyPair();\n+    if (!keypair.IsValid()) return false;",
      "path": "src/key.cpp",
      "position": null,
      "original_position": 7,
      "commit_id": "49057fc4f1e73a14f673c934573d727ae0229779",
      "original_commit_id": "21d031e7867ef97c07cee691c115d59b3aebfd19",
      "in_reply_to_id": 1681636478,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Took your suggestion of saving the pointer in a variable. I’m not sure about a cast helper, mainly because I don’t want to put `secp256k1_keypair` into a header file, so seems better to just have people use reinterpret cast wherever KeyPair is being used.",
      "created_at": "2024-07-21T09:14:17Z",
      "updated_at": "2024-07-21T09:14:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30051#discussion_r1685691416",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1685691416"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30051"
        }
      },
      "start_line": null,
      "original_start_line": 276,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 275,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1685691767",
      "pull_request_review_id": 2190282733,
      "id": 1685691767,
      "node_id": "PRRC_kwDOABII585keZ13",
      "diff_hunk": "@@ -272,21 +272,23 @@ bool CKey::SignCompact(const uint256 &hash, std::vector<unsigned char>& vchSig)\n bool CKey::SignSchnorr(const uint256& hash, Span<unsigned char> sig, const uint256* merkle_root, const uint256& aux) const\n {\n     assert(sig.size() == 64);\n+    bool ret = true;",
      "path": "src/key.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "49057fc4f1e73a14f673c934573d727ae0229779",
      "original_commit_id": "36ecf72a04c9ecb82660fb14a734c155e89e5abd",
      "in_reply_to_id": 1685506662,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Removed all of the instances of initialisation the bool outside of a function call.",
      "created_at": "2024-07-21T09:16:38Z",
      "updated_at": "2024-07-21T09:16:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30051#discussion_r1685691767",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1685691767"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30051"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 275,
      "side": "RIGHT"
    }
  ]
}