{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528",
    "id": 303613254,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MzAzNjEzMjU0",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16528",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/16528.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/16528.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16528",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16528/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/223588b1bbc63dc57098bbd0baa48635e0cc0b82",
    "number": 16528,
    "state": "closed",
    "locked": true,
    "maintainer_can_modify": false,
    "title": "Native Descriptor Wallets using DescriptorScriptPubKeyMan",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Introducing the wallet of the glorious future (again): native descriptor wallets. With native descriptor wallets, addresses are generated from descriptors. Instead of generating keys and deriving addresses from keys, addresses come from the scriptPubKeys produced by a descriptor. Native descriptor wallets will be optional for now and can only be created by using `createwallet`.\r\n\r\nDescriptor wallets will store descriptors, master keys from the descriptor, and descriptor cache entries. Keys are derived from descriptors on the fly. In order to allow choosing different address types, 6 descriptors are needed for normal use. There is a pair of primary and change descriptors for each of the 3 address types. With the default keypool size of 1000, each descriptor has 1000 scriptPubKeys and descriptor cache entries pregenerated. This has a side effect of making wallets large since 6000 pubkeys are written to the wallet by default, instead of the current 2000. scriptPubKeys are kept only in memory and are generated every time a descriptor is loaded. By default, we use the standard BIP 44, 49, 84 derivation paths with an external and internal derivation chain for each.\r\n\r\nDescriptors can also be imported with a new `importdescriptors` RPC.\r\n\r\nNative descriptor wallets use the `ScriptPubKeyMan` interface introduced in #16341 to add a `DescriptorScriptPubKeyMan`. This defines a different IsMine which uses the simpler model of \"does this scriptPubKey exist in this wallet\". Furthermore, `DescriptorScriptPubKeyMan` does not have watchonly, so with native descriptor wallets, it is not possible to have a wallet with both watchonly and non-watchonly things. Rather a wallet with `disable_private_keys` needs to be used for watchonly things.\r\n\r\nA `--descriptor` option was added to some tests (`wallet_basic.py`, `wallet_encryption.py`, `wallet_keypool.py`, `wallet_keypool_topup.py`, and `wallet_labels.py`) to allow for these tests to use descriptor wallets. Additionally, several RPCs are disabled for descriptor wallets (`importprivkey`, `importpubkey`, `importaddress`, `importmulti`, `addmultisigaddress`, `dumpprivkey`, `dumpwallet`, `importwallet`, and `sethdseed`).",
    "labels": [
      {
        "id": 149424,
        "node_id": "MDU6TGFiZWwxNDk0MjQ=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
        "name": "Wallet",
        "color": "08a781",
        "default": false
      },
      {
        "id": 1482182044,
        "node_id": "MDU6TGFiZWwxNDgyMTgyMDQ0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Descriptors",
        "name": "Descriptors",
        "description": "",
        "color": "e9f76c",
        "default": false
      }
    ],
    "active_lock_reason": "resolved",
    "created_at": "2019-08-02T02:01:39Z",
    "updated_at": "2022-08-18T17:14:14Z",
    "closed_at": "2020-04-27T00:25:02Z",
    "mergeable_state": "unknown",
    "merged_at": "2020-04-27T00:25:02Z",
    "merge_commit_sha": "eef90c14ed0f559e3f6e187341009270b84f45cb",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "head": {
      "label": "achow101:wallet-of-the-glorious-future",
      "ref": "wallet-of-the-glorious-future",
      "sha": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 45006379,
        "node_id": "MDEwOlJlcG9zaXRvcnk0NTAwNjM3OQ==",
        "name": "bitcoin",
        "full_name": "achow101/bitcoin",
        "owner": {
          "login": "achow101",
          "id": 3782274,
          "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
          "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/achow101",
          "html_url": "https://github.com/achow101",
          "followers_url": "https://api.github.com/users/achow101/followers",
          "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
          "organizations_url": "https://api.github.com/users/achow101/orgs",
          "repos_url": "https://api.github.com/users/achow101/repos",
          "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/achow101/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/achow101/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/achow101/bitcoin",
        "archive_url": "https://api.github.com/repos/achow101/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/achow101/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/achow101/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/achow101/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/achow101/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/achow101/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/achow101/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/achow101/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/achow101/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/achow101/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/achow101/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/achow101/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/achow101/bitcoin/events",
        "forks_url": "https://api.github.com/repos/achow101/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/achow101/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/achow101/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/achow101/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/achow101/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/achow101/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/achow101/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/achow101/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/achow101/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/achow101/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/achow101/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/achow101/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/achow101/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/achow101/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/achow101/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/achow101/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:achow101/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/achow101/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/achow101/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/achow101/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/achow101/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/achow101/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/achow101/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/achow101/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/achow101/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/achow101/bitcoin/hooks",
        "svn_url": "https://github.com/achow101/bitcoin",
        "homepage": "https://bitcoin.org/en/download",
        "language": "C++",
        "forks_count": 9,
        "stargazers_count": 35,
        "watchers_count": 35,
        "size": 243676,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-08-02T17:46:57Z",
        "created_at": "2015-10-27T00:20:28Z",
        "updated_at": "2023-07-28T14:25:30Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "64139803f1225dab26197a20314109d37fa87d5f",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 35475,
        "stargazers_count": 70608,
        "watchers_count": 70608,
        "size": 236222,
        "default_branch": "master",
        "open_issues_count": 672,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-08-02T19:06:37Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-08-02T18:21:18Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 2802,
    "deletions": 335,
    "changed_files": 40,
    "commits": 43,
    "review_comments": 268,
    "comments": 69
  },
  "events": [
    {
      "event": "labeled",
      "id": 2528304730,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDI1MjgzMDQ3MzA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2528304730",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-02T02:02:19Z",
      "label": {
        "name": "Wallet",
        "color": "08a781"
      }
    },
    {
      "event": "added_to_project",
      "id": 2528305130,
      "node_id": "MDE5OkFkZGVkVG9Qcm9qZWN0RXZlbnQyNTI4MzA1MTMw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2528305130",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-02T02:02:41Z",
      "project_card": {
        "id": 24709840,
        "url": "https://api.github.com/projects/columns/cards/24709840",
        "project_id": 2806533,
        "project_url": "https://api.github.com/projects/2806533",
        "column_name": "PRs"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2528309740,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjUyODMwOTc0MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2528309740",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-02T02:06:33Z"
    },
    {
      "event": "commented",
      "id": 517532927,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUxNzUzMjkyNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/517532927",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-02T03:23:20Z",
      "updated_at": "2020-04-27T00:46:26Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18774 (test: added test for upgradewallet RPC by brakmic)\n* #18727 (test: Add CreateWalletFromFile test by ryanofsky)\n* #18699 (wallet: Avoid translating RPC errors by MarcoFalke)\n* #18654 (rpc: separate bumpfee's psbt creation function into psbtbumpfee by achow101)\n* #18618 (gui: Drop RecentRequestsTableModel dependency to WalletModel by promag)\n* #18617 (test: add factor option to adjust test timeouts by brakmic)\n* #18608 (refactor: Remove CAddressBookData::destdata by ryanofsky)\n* #18570 (rpc: return block hash & height in getbalances, gettransaction & getwalletinfo JSONs by brakmic)\n* #18479 (RPC: Show fee in results for signrawtransaction* for segwit inputs by luke-jr)\n* #18244 (rpc: fundrawtransaction and walletcreatefundedpsbt respect locks even with manual coin selection by Sjors)\n* #17977 ([WIP] Implement BIP 340-342 validation (Schnorr/taproot/tapscript) by sipa)\n* #17877 (qt, refactor: Make enums in BitcoinUnits class scoped by hebasto)\n* #16463 ([BIP 174] Implement serialization support for GLOBAL_XPUB field. by achow101)\n* #16432 (qt: Add privacy to the Overview page by hebasto)\n* #16224 (gui: Bilingual GUI error messages by hebasto)\n* #11413 ([wallet] [rpc] sendtoaddress/sendmany: Add explicit feerate option by kallewoof)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-517532927",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16528"
    },
    {
      "event": "commented",
      "id": 517533269,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUxNzUzMzI2OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/517533269",
      "actor": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-02T03:25:19Z",
      "updated_at": "2019-08-02T03:25:19Z",
      "author_association": "CONTRIBUTOR",
      "body": "Strong Concept ACK, this should be much nicer now it is preceded by the rework.",
      "user": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-517533269",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16528"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2529979646,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjUyOTk3OTY0Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2529979646",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-02T15:12:20Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2530170743,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjUzMDE3MDc0Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2530170743",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-02T16:23:19Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-02T18:40:42Z",
      "updated_at": "2019-08-02T18:40:42Z",
      "source": {
        "issue": {
          "id": 389333803,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MjM3MzQ1NDg1",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14912",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14912/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14912/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14912/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/14912",
          "number": 14912,
          "state": "closed",
          "state_reason": null,
          "title": "[WIP] External signer support (e.g. hardware wallet)",
          "body": "This PR lets `bitcoind` to call an arbitrary command `-signer=<cmd>`, e.g. a hardware wallet driver,  where it can fetch public keys, ask to display an address, and sign a PSBT.\r\n\r\nIt's design to work with https://github.com/bitcoin-core/HWI, which supports multiple hardware wallets. Any command with the same arguments and return values will work. It simplifies the manual procedure described [here](https://github.com/bitcoin-core/HWI/blob/master/docs/bitcoin-core-usage.md).\r\n\r\nUsage is documented in [doc/external-signer.md](\r\nhttps://github.com/Sjors/bitcoin/blob/2018/11/rpc-signer/doc/external-signer.md), which also describes what protocol a different signer binary should conform to.\r\n\r\nIt adds the following RPC methods:\r\n* `enumeratesigners`: asks <cmd> for a list of signers (e.g. devices) and their master key fingerprint\r\n* `signerfetchkeys` (needs https://github.com/bitcoin-core/HWI/pull/137): asks <cmd> for descriptors and then fills the keypool (no private keys)\r\n* `signerdisplayaddress <address>`:  asks <cmd> to display an address\r\n* `signerprocesspsbt <psbt>` to send the `<psbt>` to `<cmd>` to sign and wait for the result\r\n\r\nUsage TL&DR:\r\n* clone HWI repo somewhere and launch `bitcoind -signer=../HWI/hwi.py`\r\n* create wallet without private keys: `bitcoin-cli createwallet hww true`\r\n* list hardware devices: `bitcoin-cli enumeratesigners`\r\n* fetch keys from hardware device into the wallet: `bitcoin-cli -rpcwallet=hww signerfetchkeys`\r\n* display address on device, sign transaction: see [doc/external-signer.md](\r\nhttps://github.com/Sjors/bitcoin/blob/2018/11/rpc-signer/doc/external-signer.md)\r\n\r\nFor easier review, this builds on the following PRs:\r\n* #15382: add runCommandParseJSON\r\n* #15590 Descriptor: add GetAddressType() and IsSegwit()\r\n\r\nPotentially useful followups:\r\n- #15876: signer send and bumpfee conveniance methods \r\n- #16528: descriptor based wallets (to preserve BIP44/49/84 compatibility with mixed address types)\r\n- (automatically) verify (a subset of) keys on the device after import, through message signing",
          "user": {
            "login": "Sjors",
            "id": 10217,
            "node_id": "MDQ6VXNlcjEwMjE3",
            "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Sjors",
            "html_url": "https://github.com/Sjors",
            "followers_url": "https://api.github.com/users/Sjors/followers",
            "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
            "organizations_url": "https://api.github.com/users/Sjors/orgs",
            "repos_url": "https://api.github.com/users/Sjors/repos",
            "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/Sjors/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "comments": 22,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14912",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/14912",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/14912.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/14912.patch"
          },
          "closed_at": "2019-08-04T21:43:57Z",
          "created_at": "2018-12-10T14:46:02Z",
          "updated_at": "2020-12-08T10:03:45Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2530663803,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjUzMDY2MzgwMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2530663803",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-02T20:03:17Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2531006055,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjUzMTAwNjA1NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2531006055",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-02T23:41:57Z"
    },
    {
      "event": "commented",
      "id": 517905778,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUxNzkwNTc3OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/517905778",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-03T08:23:16Z",
      "updated_at": "2019-08-03T09:40:27Z",
      "author_association": "MEMBER",
      "body": "Approach ACK. It looks pretty straight forward and thanks to The Box feels cleaner than the previous attempt. \r\n\r\nI suggest that, after a bit more progress on #16341, we review this in parallel. That ensures that we don't mess up the division of labour between `ScriptPubKeyMan` and its subclasses.\r\n\r\nAlso concept ACK on using BIP44/49/84 for new descriptor wallets. That may need some discussion, because it means individual addresses are no longer hardened.\r\n\r\nSome issues I found perusing the commits:\r\n* when you restart bitcoind and load a (watch-only) wallet the keypool is empty and `getnewaddress` no longer works\r\n* `importdescriptors` should no longer require a `range` argument (~also I would prefer a singular RPC~ nvm that makes rescan slow)\r\n* when calling `getnewaddress` with an address type for which the wallet misses a descriptor, it returns a blank `error message:` \r\n* can you give each ScriptPubKeyManager it's own file?\r\n* deleting `GetMetadata` and `Upgrade` inside `Introduce WalletDescriptor`; should have its own commit?\r\n* `ScriptPubKeyMap` could be introduced in `Implement IsMine` instead of the earlier commit. Would it make sense to move this into the Descriptor class? How are infinite range descriptors handled, expanded and cached `keypoolsize` items at a time?\r\n* Am I reading this wrong or is `SetupGeneration` creating a fresh seed for each descriptor?\r\n* I'm not a fan of determining the output type in an indirect manner by expanding the descriptor `Optional<OutputType> out_script_type = DetermineOutputType(scripts_temp[0], out_keys);`; that information is already encoded in the descriptor. Shameless plug for #15590.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-517905778",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16528"
    },
    {
      "event": "labeled",
      "id": 2531599121,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDI1MzE1OTkxMjE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2531599121",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-04T05:14:37Z",
      "label": {
        "name": "Descriptors",
        "color": "e9f76c"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-04T21:42:31Z",
      "updated_at": "2019-08-04T21:42:31Z",
      "source": {
        "issue": {
          "id": 476597057,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MzA0MDk3NTEw",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16546",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16546/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16546/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16546/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/16546",
          "number": 16546,
          "state": "closed",
          "state_reason": null,
          "title": "External signer support - Wallet Box edition",
          "body": "Big picture overview in [this gist](https://gist.github.com/Sjors/29d06728c685e6182828c1ce9b74483d).\r\n\r\nThis PR lets `bitcoind` call an arbitrary command `-signer=<cmd>`, e.g. a hardware wallet driver,  where it can fetch public keys, ask to display an address, and sign a transaction (using PSBT under the hood).\r\n\r\nIt's design to work with https://github.com/bitcoin-core/HWI, which supports multiple hardware wallets. Any command with the same arguments and return values will work. It simplifies the manual procedure described [here](https://github.com/bitcoin-core/HWI/blob/master/docs/bitcoin-core-usage.md).\r\n\r\nUsage is documented in [doc/external-signer.md](\r\nhttps://github.com/Sjors/bitcoin/blob/2019/08/hww-box2/doc/external-signer.md), which also describes what protocol a different signer binary should conform to.\r\n\r\nUse `--enable-external-signer` to opt in, requires Boost::Process:\r\n\r\n```\r\nOptions used to compile and link:\r\n  with wallet     = yes\r\n  with gui / qt   = no\r\n  external signer = yes\r\n```\r\n\r\nIt adds the following RPC methods:\r\n* `enumeratesigners`: asks <cmd> for a list of signers (e.g. devices) and their master key fingerprint\r\n* `signerdisplayaddress <address>`:  asks <cmd> to display an address\r\n\r\nIt enhances the following RPC methods:\r\n* `createwallet`: takes an additional `external_signer` argument and fetches keys from device\r\n* `send`: automatically sends transaction to device and waits \r\n\r\nUsage TL&DR:\r\n* clone HWI repo somewhere and launch `bitcoind -signer=../HWI/hwi.py`\r\n* check if you can see your hardware device: `bitcoin-cli enumeratesigners`\r\n* create wallet and auto import keys `bitcoin-cli createwallet \"hww\" true true \"\" true true true`\r\n* display address on device: `bitcoin-cli signerdisplayaddress ...`\r\n* to spend, use `send` RPC and approve transaction on device\r\n\r\nPrerequisites:\r\n- [x] #21127 load wallet flags before everything else\r\n- [x] #21182 remove mostly pointless BOOST_PROCESS macro\r\n\r\nPotentially useful followups:\r\n- GUI support: bitcoin-core/gui#4\r\n- bumpfee support\r\n- (automatically) verify (a subset of) keys on the device after import, through message signing",
          "user": {
            "login": "Sjors",
            "id": 10217,
            "node_id": "MDQ6VXNlcjEwMjE3",
            "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Sjors",
            "html_url": "https://github.com/Sjors",
            "followers_url": "https://api.github.com/users/Sjors/followers",
            "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
            "organizations_url": "https://api.github.com/users/Sjors/orgs",
            "repos_url": "https://api.github.com/users/Sjors/repos",
            "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/Sjors/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            },
            {
              "id": 62963516,
              "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
              "name": "Tests",
              "color": "d4c5f9",
              "default": false
            },
            {
              "id": 98279177,
              "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
              "name": "RPC/REST/ZMQ",
              "color": "0052cc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "milestone": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/47",
            "html_url": "https://github.com/bitcoin/bitcoin/milestone/47",
            "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/47/labels",
            "id": 5347322,
            "node_id": "MDk6TWlsZXN0b25lNTM0NzMyMg==",
            "number": 47,
            "state": "closed",
            "title": "22.0",
            "description": "",
            "creator": {
              "login": "MarcoFalke",
              "id": 6399679,
              "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
              "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/MarcoFalke",
              "html_url": "https://github.com/MarcoFalke",
              "followers_url": "https://api.github.com/users/MarcoFalke/followers",
              "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
              "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
              "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
              "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
              "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
              "repos_url": "https://api.github.com/users/MarcoFalke/repos",
              "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
              "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
              "type": "User",
              "site_admin": false
            },
            "open_issues": 0,
            "closed_issues": 124,
            "created_at": "2020-04-25T00:14:49Z",
            "updated_at": "2021-09-14T07:16:53Z",
            "closed_at": "2021-09-09T12:47:52Z"
          },
          "locked": true,
          "comments": 38,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16546",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/16546",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/16546.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/16546.patch"
          },
          "closed_at": "2021-02-23T16:57:10Z",
          "created_at": "2019-08-04T21:42:31Z",
          "updated_at": "2021-06-11T05:32:48Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 520460635,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUyMDQ2MDYzNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/520460635",
      "actor": {
        "login": "hugohn",
        "id": 4769925,
        "node_id": "MDQ6VXNlcjQ3Njk5MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4769925?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hugohn",
        "html_url": "https://github.com/hugohn",
        "followers_url": "https://api.github.com/users/hugohn/followers",
        "following_url": "https://api.github.com/users/hugohn/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hugohn/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hugohn/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hugohn/subscriptions",
        "organizations_url": "https://api.github.com/users/hugohn/orgs",
        "repos_url": "https://api.github.com/users/hugohn/repos",
        "events_url": "https://api.github.com/users/hugohn/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hugohn/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-12T14:57:46Z",
      "updated_at": "2019-08-12T14:59:13Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK.\r\n\r\n@achow101 I just noticed that both the existing `deriveaddressses` & `importmulti` commands treat descriptor `[range_start, range_end]` as inclusive, which is consistent with the common understanding of the notation `[]`. Should we update the new `importdescriptors` command to do the same (make range_end inclusive)?\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/master/src/rpc/misc.cpp#L215\r\nhttps://github.com/bitcoin/bitcoin/blob/master/src/wallet/rpcdump.cpp#L1122",
      "user": {
        "login": "hugohn",
        "id": 4769925,
        "node_id": "MDQ6VXNlcjQ3Njk5MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4769925?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hugohn",
        "html_url": "https://github.com/hugohn",
        "followers_url": "https://api.github.com/users/hugohn/followers",
        "following_url": "https://api.github.com/users/hugohn/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hugohn/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hugohn/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hugohn/subscriptions",
        "organizations_url": "https://api.github.com/users/hugohn/orgs",
        "repos_url": "https://api.github.com/users/hugohn/repos",
        "events_url": "https://api.github.com/users/hugohn/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hugohn/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-520460635",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16528"
    },
    {
      "event": "mentioned",
      "id": 2550495714,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjU1MDQ5NTcxNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2550495714",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-12T14:57:46Z"
    },
    {
      "event": "subscribed",
      "id": 2550495716,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI1NTA0OTU3MTY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2550495716",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-12T14:57:46Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2550760996,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjU1MDc2MDk5Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2550760996",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-12T16:19:49Z"
    },
    {
      "event": "commented",
      "id": 520494128,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUyMDQ5NDEyOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/520494128",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-12T16:20:19Z",
      "updated_at": "2019-08-12T16:20:19Z",
      "author_association": "MEMBER",
      "body": "> Should we update the new `importdescriptors` command to do the same (make range_end inclusive)?\r\n\r\nI guess so. Latest pushed should do that.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-520494128",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16528"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2558134315,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjU1ODEzNDMxNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2558134315",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-14T22:57:11Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-16T19:43:00Z",
      "updated_at": "2019-08-16T19:43:00Z",
      "source": {
        "issue": {
          "id": 481752461,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MzA4MTkxMjY5",
          "url": "https://api.github.com/repos/ChaincodeResidency/bitcoin/issues/20",
          "repository_url": "https://api.github.com/repos/ChaincodeResidency/bitcoin",
          "labels_url": "https://api.github.com/repos/ChaincodeResidency/bitcoin/issues/20/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/ChaincodeResidency/bitcoin/issues/20/comments",
          "events_url": "https://api.github.com/repos/ChaincodeResidency/bitcoin/issues/20/events",
          "html_url": "https://github.com/ChaincodeResidency/bitcoin/pull/20",
          "number": 20,
          "state": "open",
          "state_reason": null,
          "title": "Add Taproot descriptors",
          "body": "Hi,\r\nThis is part of the code i've been working on as part of the residency,\r\nAdding output descriptors to sipa's taproot branch.\r\n\r\nStill missing some more unit tests and a bunch of functional tests (thinking of writing some descriptor generator for the tests)\r\n\r\n\r\nAny kind of review is more than welcome as this PR can't be opened directly to core anytime soon (at the very least taproot should be merged if not even activated)\r\n\r\nIn general the descriptors look something like this:\r\n`tap(INTERNAL_KEY, {pk(KEY1),{{pk(KEY3),pk(KEY3)},pkh(KEY2)}})`\r\n\r\nConcrete example:\r\n```\r\ntap(KwXyp3nhG2ezACSj4fj1fSPVXeArbcGhbj7QSJ3Ka9tkQrE18gPH,{pk(L47CwsA9469CtukSyzC3QM3X4Gdqa5VE116C8WYzdx4BwW13bXZ8),pkh(L2tcd8jiG6j66M2GLCXDmwqsJTJW9NhGopovksyaFwQxz3gkFjxk)})\r\n\r\ntap(031e34802508ce0bbabb71935832c92129c6df82143a924d731c43362495111319,{pk(023e93f827793706dffdca946b64842f69c336c8dd78f32d716ee7e77dfe119418),pkh(02e72a44840fccb573427d9a65d7ff137a1d83df576cfdfaad2f6ebdf56c3c24d5)})\r\n```\r\n\r\n\r\nP.S. Currently this **does not** support signing as adding signing support now will require a lot of changes to wallet format(saving merkle paths etc.) which will be way way easier with #16528 (native descriptors) so i'll wait for that to get merged.",
          "user": {
            "login": "elichai",
            "id": 2167860,
            "node_id": "MDQ6VXNlcjIxNjc4NjA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/elichai",
            "html_url": "https://github.com/elichai",
            "followers_url": "https://api.github.com/users/elichai/followers",
            "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
            "organizations_url": "https://api.github.com/users/elichai/orgs",
            "repos_url": "https://api.github.com/users/elichai/repos",
            "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/elichai/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 1,
          "pull_request": {
            "url": "https://api.github.com/repos/ChaincodeResidency/bitcoin/pulls/20",
            "html_url": "https://github.com/ChaincodeResidency/bitcoin/pull/20",
            "diff_url": "https://github.com/ChaincodeResidency/bitcoin/pull/20.diff",
            "patch_url": "https://github.com/ChaincodeResidency/bitcoin/pull/20.patch"
          },
          "created_at": "2019-08-16T19:27:14Z",
          "updated_at": "2019-11-04T20:07:47Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2607901911,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjYwNzkwMTkxMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2607901911",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-04T17:50:54Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2607903207,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjYwNzkwMzIwNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2607903207",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-04T17:51:20Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2607993667,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjYwNzk5MzY2Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2607993667",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-04T18:19:20Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-04T20:11:26Z",
      "updated_at": "2019-09-04T20:11:26Z",
      "source": {
        "issue": {
          "id": 489371370,
          "node_id": "MDU6SXNzdWU0ODkzNzEzNzA=",
          "url": "https://api.github.com/repos/justinmoon/junction/issues/21",
          "repository_url": "https://api.github.com/repos/justinmoon/junction",
          "labels_url": "https://api.github.com/repos/justinmoon/junction/issues/21/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/justinmoon/junction/issues/21/comments",
          "events_url": "https://api.github.com/repos/justinmoon/junction/issues/21/events",
          "html_url": "https://github.com/justinmoon/junction/issues/21",
          "number": 21,
          "state": "open",
          "state_reason": null,
          "title": "Native descriptor wallets",
          "body": "I just tried Junction with @achow101's native descriptor wallet (in testnet!) PR: https://github.com/bitcoin/bitcoin/pull/16528\r\n\r\nWorks like a charm. In particular, try `getaddressinfo` on the multisig address and notice Bitcoin Core knows the full descriptor!\r\n\r\nIf you like, you can also try my PR which adds better signer support to the RPC: https://github.com/bitcoin/bitcoin/pull/16546\r\n\r\nIt involves launching bitcoind with `-signer`. You then create a wallet with the `externalsigner` flag true and it will Just Works(tm). Send also just works(tm). Except not with multisig... Suggestions are welcome, what should the RPC look like?",
          "user": {
            "login": "Sjors",
            "id": 10217,
            "node_id": "MDQ6VXNlcjEwMjE3",
            "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Sjors",
            "html_url": "https://github.com/Sjors",
            "followers_url": "https://api.github.com/users/Sjors/followers",
            "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
            "organizations_url": "https://api.github.com/users/Sjors/orgs",
            "repos_url": "https://api.github.com/users/Sjors/repos",
            "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/Sjors/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "NONE",
          "locked": false,
          "comments": 7,
          "created_at": "2019-09-04T20:11:26Z",
          "updated_at": "2019-09-05T17:45:43Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2608741068,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjYwODc0MTA2OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2608741068",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-04T22:54:37Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-16T17:19:58Z",
      "updated_at": "2019-09-16T17:19:58Z",
      "source": {
        "issue": {
          "id": 476978200,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MzA0Mzk2Nzg2",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16549",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16549/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16549/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16549/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/16549",
          "number": 16549,
          "state": "closed",
          "state_reason": null,
          "title": "UI external signer support (e.g. hardware wallet)",
          "body": "Big picture overview in [this gist](https://gist.github.com/Sjors/29d06728c685e6182828c1ce9b74483d).\r\n\r\nThis PR adds GUI support for external signers. It consists of 7 commits on top of #16546 (RPC).\r\n\r\nThe UX isn't amazing - especially the blocking calls - but it works.\r\n\r\nFirst we adds a GUI setting for the signer script (e.g. path to HWI):\r\n\r\n<img width=\"625\" alt=\"Schermafbeelding 2019-08-05 om 19 32 59\" src=\"https://user-images.githubusercontent.com/10217/62483415-e1ff1680-b7b7-11e9-97ca-8d2ce54ca1cb.png\">\r\n\r\nThen we add an external signer checkbox to the wallet creation dialog:\r\n\r\n<img width=\"374\" alt=\"Schermafbeelding 2019-11-07 om 19 17 23\" src=\"https://user-images.githubusercontent.com/10217/68416387-b57ee000-0194-11ea-9730-127d60273008.png\">\r\n\r\nIt's checked by default if HWI detects a device. It also grabs the name. It then creates a fresh wallet and imports the keys.\r\n\r\nYou can verify an address on the device (blocking...):\r\n<img width=\"673\" alt=\"Schermafbeelding 2019-08-05 om 19 29 22\" src=\"https://user-images.githubusercontent.com/10217/62483560-43bf8080-b7b8-11e9-9902-8a036116dc4b.png\">\r\n\r\nSending, including coin selection, Just Works(tm) as long the device is present. It's a bit weird though: the device will prompt for signing first and the QT confirmation dialog appears after.\r\n\r\nExternal signer support is enabled by default when the GUI is configured and Boost::Process is present.",
          "user": {
            "login": "Sjors",
            "id": 10217,
            "node_id": "MDQ6VXNlcjEwMjE3",
            "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Sjors",
            "html_url": "https://github.com/Sjors",
            "followers_url": "https://api.github.com/users/Sjors/followers",
            "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
            "organizations_url": "https://api.github.com/users/Sjors/orgs",
            "repos_url": "https://api.github.com/users/Sjors/repos",
            "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/Sjors/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135946,
              "node_id": "MDU6TGFiZWwxMzU5NDY=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/GUI",
              "name": "GUI",
              "color": "02d7e1",
              "default": false
            },
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            },
            {
              "id": 98279177,
              "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
              "name": "RPC/REST/ZMQ",
              "color": "0052cc",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 11,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16549",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/16549",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/16549.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/16549.patch"
          },
          "closed_at": "2020-06-18T18:13:06Z",
          "created_at": "2019-08-05T17:38:26Z",
          "updated_at": "2022-08-16T17:20:17Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2641663327,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjY0MTY2MzMyNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2641663327",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-17T23:51:59Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2642037696,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjY0MjAzNzY5Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2642037696",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-18T03:38:56Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-26T08:45:09Z",
      "updated_at": "2019-09-26T08:45:09Z",
      "source": {
        "issue": {
          "id": 498458323,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MzIxMzg1NzE0",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16966",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16966/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16966/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16966/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/16966",
          "number": 16966,
          "state": "closed",
          "state_reason": null,
          "title": "ui: make send a wizard ",
          "body": "Implements #16954 for the current functionality + #16944 (`gui: create PSBT with watch-only wallet`). This PR splits the send screen into three tabs, like a wizard.\r\n\r\nThis frees up UI real estate where we can add support for PSBT, hardware wallets and education.\r\n\r\nI renamed `SendCoinsDialog` to `SendCompose` and `SendConfirmationDialog` to `SendSign`for clarity, which ended up (trivially) touching lots of `src/qt/locale/bitcoin_##.ts` files. This is contained in two move-only commits.\r\n\r\n**Tab 1: Draft**\r\n\r\n<img width=\"926\" alt=\"Schermafbeelding 2019-09-26 om 15 59 16\" src=\"https://user-images.githubusercontent.com/10217/65695736-606d8b80-e078-11e9-84d9-fe2d37f932e8.png\">\r\n\r\nSame as the current send screen: enter destination, do coin selection, set fee etc. This can be split further in future PRs for a less cluttered experience, e.g. one tab for coin selection (if enabled), one for destination(s) and one for fees. Having a separate tab for fees also provides an entry point for RBF, which currently doesn't let the user pick an amount. \r\n\r\n**Tab 2: Sign**\r\n\r\nThis asks to unlock the wallet if needed.\r\n\r\n<img width=\"931\" alt=\"Schermafbeelding 2019-09-26 om 16 14 42\" src=\"https://user-images.githubusercontent.com/10217/65695992-c9ed9a00-e078-11e9-9ee7-4d60d0499049.png\">\r\n\r\nDisplay transaction details like the current popup does. \r\n\r\n<img width=\"933\" alt=\"Schermafbeelding 2019-09-26 om 15 59 35\" src=\"https://user-images.githubusercontent.com/10217/65695773-6fecd480-e078-11e9-95fa-498f844c5eb1.png\">\r\n\r\nEdit jumps back to Draft. Send jumps to Finish, unless something goes wrong.\r\n\r\nBump fee jumps straight to this tab:\r\n<img width=\"855\" alt=\"sign\" src=\"https://user-images.githubusercontent.com/10217/65713022-89057d80-e098-11e9-80d5-0a2abdde0871.png\">\r\n\r\nFor watch-only wallets it displays the same text as #16944.\r\n\r\n**Tab 3: Finish**\r\n\r\n<img width=\"932\" alt=\"Schermafbeelding 2019-09-26 om 16 08 21\" src=\"https://user-images.githubusercontent.com/10217/65695799-7b400000-e078-11e9-967a-7581f15ecdd5.png\">\r\n\r\nThis is where the actual broadcast takes place, or where the PSBT is copied to the clipboard. In a followup we can add support for saving the PSBT to disk, or for copying a signed transaction hex to clipboard if the user wants to broadcast that elsewhere. \r\n\r\nBump fee shows both the previous and new transaction index:\r\n<img width=\"847\" alt=\"sent\" src=\"https://user-images.githubusercontent.com/10217/65713060-9c184d80-e098-11e9-879a-f10822d4ad2b.png\">\r\n\r\nThe manual \"Show\" button has the nice side-effect of fixing #16875 / #16876 in two out of three places. \r\n\r\n---\r\n\r\nTodo:\r\n- [ ] clean up WalletModelTransaction and CoinControl object passing mess\r\n- [x] restore test\r\n\r\nFollowups:\r\n* add PSBT export to Sign tab (extract from gwillen's branch https://github.com/gwillen/bitcoin/tree/feature-offline-v2, i.e. redo #16944)\r\n* add Load PSBT menu option, jump to Broadcast tab if complete, otherwise to Sign tab\r\n* list connected hardware wallets in Sign tab (redo #16549 \r\n* split fee selection into its own tab\r\n* allow custom RBF amounts: bump fee should jump to fee selection tab \r\n",
          "user": {
            "login": "Sjors",
            "id": 10217,
            "node_id": "MDQ6VXNlcjEwMjE3",
            "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Sjors",
            "html_url": "https://github.com/Sjors",
            "followers_url": "https://api.github.com/users/Sjors/followers",
            "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
            "organizations_url": "https://api.github.com/users/Sjors/orgs",
            "repos_url": "https://api.github.com/users/Sjors/repos",
            "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/Sjors/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135946,
              "node_id": "MDU6TGFiZWwxMzU5NDY=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/GUI",
              "name": "GUI",
              "color": "02d7e1",
              "default": false
            },
            {
              "id": 61889416,
              "node_id": "MDU6TGFiZWw2MTg4OTQxNg==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Build%20system",
              "name": "Build system",
              "color": "5319e7",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 22,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16966",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/16966",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/16966.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/16966.patch"
          },
          "closed_at": "2019-11-19T10:54:01Z",
          "created_at": "2019-09-25T18:43:12Z",
          "updated_at": "2022-02-15T11:04:12Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-09T15:58:48Z",
      "updated_at": "2019-10-09T15:58:48Z",
      "source": {
        "issue": {
          "id": 464441403,
          "node_id": "MDExOlB1bGxSZXF1ZXN0Mjk0NzE4ODM5",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16341",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16341/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16341/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16341/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/16341",
          "number": 16341,
          "state": "closed",
          "state_reason": null,
          "title": "Introduce ScriptPubKeyMan interface and use it for key and script management (aka wallet boxes)",
          "body": "Introducing the `ScriptPubKeyMan` (short for ScriptPubKeyManager) for managing scriptPubKeys and their associated scripts and keys. This functionality is moved over from `CWallet`. Instead, `CWallet` will have a pointer to a `ScriptPubKeyMan` for every possible address type, internal and external. It will fetch the correct `ScriptPubKeyMan` as necessary. When fetching new addresses, it chooses the `ScriptPubKeyMan` based on address type and whether it is change. For signing, it takes the script and asks each `ScriptPubKeyMan` for whether that `ScriptPubKeyMan` considers that script `IsMine`, whether it has that script, or whether it is able to produce a signature for it. If so, the `ScriptPubKeyMan` will provide a `SigningProvider` to the caller which will use that in order to sign.\r\n\r\nThere is currently one `ScriptPubKeyMan` - the `LegacyScriptPubKeyMan`. Each `CWallet` will have only one `LegacyScriptPubKeyMan` with the pointers for all of the address types and change pointing to this `LegacyScriptPubKeyMan`. It is created when the wallet is loaded and all keys and metadata are loaded into it instead of `CWallet`. The `LegacyScriptPubKeyMan` is primarily made up of all of the key and script management that used to be in `CWallet`. For convenience, `CWallet` has a `GetLegacyScriptPubKeyMan` which will return the `LegacyScriptPubKeyMan` or a `nullptr` if it does not have one (not yet implemented, but callers will check for the `nullptr`). For purposes of signing, `LegacyScriptPubKeyMan`'s `GetSigningProvider` will return itself rather than a separate `SigningProvider`. This will be different for future `ScriptPubKeyMan`s.\r\n\r\nThe `LegacyScriptPubKeyMan` will also handle the importing and exporting of keys and scripts instead of `CWallet`. As such, a number of RPCs have been limited to work only if a `LegacyScriptPubKeyMan` can be retrieved from the wallet. These RPCs are `sethdseed`, `addmultisigaddress`, `importaddress`, `importprivkey`, `importpubkey`, `importmulti`, `dumpprivkey`, and `dumpwallet`. Other RPCs which relied on the wallet for scripts and keys have been modified in order to take the `SigningProvider` retrieved from the `ScriptPubKeyMan` for a given script.\r\n\r\nOverall, these changes should not effect how everything actually works and the user should experience no difference between having this change and not having it. As such, no functional tests were changed, and the only unit tests changed were those that were directly accessing `CWallet` functions that have been removed.\r\n\r\nThis PR is the last step in the [Wallet Structure Changes](https://github.com/bitcoin-core/bitcoin-devwiki/wiki/Wallet-Class-Structure-Changes).\r\n\r\nThe commits are organized as follows:\r\n* Miscellaneous changes that don't necessarily make sense outside of this PR\r\n  * Move wallet enums to walletutil.h\r\n  * List output types in an array in order to be iterated over\r\n  * Always try to sign for all pubkeys in multisig\r\n* Interface definitions and miscellaneous changes in preparation for `ScriptPubKeyMan` integration\r\n  * Introduce both ScriptPubKeyMan as an interface and LegacyScriptPubKeyMan as a dummy class\r\n  * Add LegacyScriptPubKeyMan to CWallet\r\n  * Add function callbacks for wallet flags and versions and wallet database\r\n  * Fetch the SigningProvider for a script from the wallet\r\n  * Fetch the ScriptPubKeyMan for given output type and internal-ness, or a given script, or ScriptPubKeyMan id\r\n* Implementation of `LegacyScriptPubKeyMan` by copying existing code from `CWallet`. These will pass all tests and do not affect `CWallet`\r\n  * Implement GetSigningProvider in LegacyScriptPubKeyMan\r\n  * Implement function to connect ScriptPubKeyMan's NotifyCanGetAddessesChanged and NotifyWatchOnlyChanged to CWallet's\r\n  * Implement IsLocked and IsCrypted in LegacyScriptPubKeyMan\r\n  * Implement LoadCryptedKey and AddCryptedKey in LegacyScriptPubKeyMan\r\n  * Implement UpdateTimeFirstKey, and GetTimeFirstKey in LegacyScriptPubKeyMan\r\n  * Implement AddWatchOnly, RemoveWatchOnly, HaveWatchOnly, and LoadWatchOnly in LegacyScriptPubKeyMan\r\n  * Implement AddKeyPubKey and LoadKey in LegacyScriptPubKeyMan\r\n  * Implement WalletLogPrintf in LegacyScriptPubKeyMan\r\n  * Implement SetHDCHain, and IsHDEnabled in LegacyScriptPubKeyMan\r\n  * Implement LoadCScript in LegacyScriptPubKeyMan\r\n  * Implement LoadKeyMetadata and LoadScriptMetadata in LegacyScriptPubKeyMan\r\n  * Implement GetKey, HaveKey, and GetPubKey in LegacyScriptPubKeyMan\r\n  * Implement GenerateNewKey in LegacyScriptPubKeyMan\r\n  * Implement LoadKeyPool in LegacyScriptPubKeyMan\r\n  * Implement GetOldestKeyPoolTime, KeypoolCountExternalKeys, and GetKeypoolSize in LegacyScriptPubKeyMan\r\n  * Implement CanGetAddresses, CanGenerateKeys, and HavePrivateKeys in LegacyScriptPubKeyMan\r\n  * Implement GenerateNewSeed, DeriveNewSeed, and SetHDSeed for LegacyScriptPubKeyMan\r\n  * Implement TopUpKeypool, TopUp, and NewKeyPool in LegacyScriptPubKeyMan\r\n  * Implement ReturnAddress, and KeepKey in LegacyScriptPubKeyMan\r\n  * Implement GetNewAddress, and GetReservedAddress in LegacyScriptPubKeyMan\r\n  * Implement MarkUnusedAddresses in LegacyScriptPubKeyMan\r\n  * Implement IsMine in LegacyScriptPubKeyMan\r\n  * Implement UpgradeKeyMetaData, SetupGeneration, IsFirstRun, Upgrade, RewriteDB in LegacyScriptPubKeyMan\r\n  * Implement Unlock, Lock, and Encrypt and LegacyScriptPubKeyMan\r\n  * Implement ImporScripts, ImportPrivKeys, ImportPubKeys, and ImportScriptPubKeys in LegacyScriptPubKeyMan\r\n  * Implement GetMetadata in LegacyScriptPubKeyMan\r\n  * Implement GetKeyOrigin in LegacyScriptPubKeyMan\r\n  * Implement actually loading everything into LegacyScriptPubKeyMan\r\n  * Implement CanProvide in LegacyScriptPubKeyMan\r\n* Replacing `CWallet` functions and RPC things with calls to `ScriptPubKeyMan` or `LegacyScriptPubKeyMan`. These will compile but are not expected to pass tests hence the `[ci skip]`.\r\n  * [ci skip] Remove CWallet from IsMine and have CWallet always use ScriptPubKeyMan's IsMine\r\n  * [ci skip] moveonly: move ismine stuff to be a module of LegacyScriptPubKeyMan\r\n  * [ci skip] Have GetNewAddress, GetNewChangeAddress, and ReserveAddress use ScriptPubKeyMan\r\n  * [ci skip] Mark used addresses in ScriptPubKeyMan\r\n  * [ci skip] Call UpgradeKeyMetaData for each ScriptPubKeyMan\r\n  * [ci skip] Sign using SigningProvider from ScriptPubKeyMan when signing within CWallet\r\n  * [ci skip] Do not allow import*, dump*, and addmultisigaddress RPCs when wallet is not backed by LegacyScriptPubKeyMan\r\n  * [ci skip] Change Imports to use LegacyScriptPubKeyMan Imports\r\n  * [ci skip] Use SigningProviders and ScriptPubKeyMans in listunspent, signmessage, signrawtransactionwithwallet, and getaddressinfo\r\n  * [ci skip] Use LegacyScriptPubKeyMan in addmultisigaddress and sethdseed\r\n  * [ci skip] Use LegacyScriptPubKeyMan for hdseedid in getwalletinfo\r\n  * [ci skip] Change KeypoolCountExternal and GetKeypoolSize to get aggregate sizes from ScriptPubKeyMans\r\n  * [ci skip] Have IsHDEnabled fetch from ScriptPubKeyMans\r\n  * [ci skip] Fetch oldest keypool time from ScriptPubKeyMans\r\n  * [ci skip] have TopUpKeyPool call TopUp in each ScriptPubKeyMan\r\n  * [ci skip] Have EncryptWallet, Lock, and Unlock call their respective functions in ScriptPubKeyMans\r\n  * [ci skip] Use LegacyScriptPubKeyMan throughout psbt_wallet_tests\r\n  * [ci skip] Use LegacyScriptPubKeyMan throughout wallettool\r\n  * [ci skip] Use ScriptPubKeyMans' Setup and Upgrade functions when loading or creating a wallet\r\n  * [ci skip] Define first run as having no ScriptPubKeyMans\r\n  * [ci skip] Use RewriteDB action when DB needs rewrite\r\n  * [ci skip] Use GetTimeFirstKey instead of nTimeFirstKey\r\n  * [ci skip] Use LegacyScriptPubKeyMan for in wallet_tests\r\n  * [ci skip] Use LegacyScriptPubKeyMan in dumpprivkey and dumpwallet\r\n  * [ci skip] Change CanGetAddresses to fetch from ScriptPubKeyMan\r\n  * [ci skip] Fetch the correct SigningProvider for signing PSBTs\r\n  * [ci skip] Use LegacyScriptPubKeyMan in test util\r\n  * [ci skip] Use LegacyScriptPubKeyMan in some parts of getbalances and createwallet\r\n  * [ci skip] Have getPubKey and getPrivKey use SigningProvider\r\n  * [ci skip] Use LegacyScriptPubKeyMan in benchmarks involving the wallet\r\n  * [ci skip] Store p2sh scripts in AddAndGetDestinationForScript\r\n* Tying everything together and removing the `CWallet` functions.\r\n  * Remove unused functions and switch CWallet to use ScriptPubKeyMan",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            },
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 35,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/16341",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/16341.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/16341.patch"
          },
          "closed_at": "2019-10-25T21:09:34Z",
          "created_at": "2019-07-05T03:01:15Z",
          "updated_at": "2022-02-15T10:58:54Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2701417768,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjcwMTQxNzc2OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2701417768",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-10T05:57:46Z"
    },
    {
      "event": "commented",
      "id": 540675668,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU0MDY3NTY2OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/540675668",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-10T16:50:45Z",
      "updated_at": "2019-10-10T16:50:45Z",
      "author_association": "MEMBER",
      "body": "Due to your latest change upstream, this now complains: `scriptpubkeyman.h:516:10: warning: 'CheckDecryptionKey' overrides a member function but is not marked 'override' `",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-540675668",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16528"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2703872092,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjcwMzg3MjA5Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2703872092",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-10T19:13:09Z"
    },
    {
      "event": "commented",
      "id": 540736034,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU0MDczNjAzNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/540736034",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-10T19:13:24Z",
      "updated_at": "2019-10-10T19:13:24Z",
      "author_association": "MEMBER",
      "body": "Fixed the warning.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-540736034",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16528"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2712058739,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjcxMjA1ODczOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2712058739",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-14T23:02:12Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2715714181,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjcxNTcxNDE4MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2715714181",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-15T23:02:38Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2744560786,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mjc0NDU2MDc4Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2744560786",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-25T15:15:37Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2745900380,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mjc0NTkwMDM4MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2745900380",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-26T06:14:19Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-29T09:01:26Z",
      "updated_at": "2019-10-29T09:01:26Z",
      "source": {
        "issue": {
          "id": 356746959,
          "node_id": "MDU6SXNzdWUzNTY3NDY5NTk=",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14145",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14145/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14145/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14145/events",
          "html_url": "https://github.com/bitcoin/bitcoin/issues/14145",
          "number": 14145,
          "state": "closed",
          "state_reason": "completed",
          "title": "Hardware wallet support",
          "body": "Potential benefits of using hardware wallets in combination with Bitcoin Core:\r\n* privacy: all or most hardware wallets rely on a backend to fetch balance and history\r\n* less vendor-specific code to trust, including much of their dependencies (e.g. hardware wallet software often uses ElectronJS and the whole Javascript kitchen sink)\r\n* potentially safer coin storage for Bitcoin Core users than just a `wallet.dat` file\r\n\r\nCurrent easy to use alternatives:\r\n* use the official wallet that goes with the device\r\n* use a different wallet (e.g. Electrum)\r\n\r\nCurrent advanced alternatives:\r\n* [Electrum Personal Server](https://github.com/chris-belcher/electrum-personal-server)\r\n* WIP by @instagibbs: https://github.com/bitcoin/bitcoin/compare/master...instagibbs:external_sign_10\r\n* #14019, #14021, and #14075 by @achow101, guide: https://gist.github.com/achow101/a9cf757d45df56753fae9d65db4d6e1d\r\n\r\nProbably out of scope:\r\n* hardware drivers; i.e. there will always be some binary from manufacturer that the user needs to install and trust\r\n* UI changes more complex than \"Please approve the transaction on your device\"\r\n\r\nPotential ingredients:\r\n* drivers:\r\n  * https://github.com/achow101/HWI: combines various hardware drivers into a consistent API. Uses Python, perhaps rewrite in C++? Drivers from e.g. Ledger and Trezor also in Python though.\r\n  * https://github.com/signal11/hidapi: multi-platform USB/Bluetooth driver written in C++: could perhaps be added to depends to minimize the amount of vendor-specific code users need to trust?\r\n  * perhaps the above is too much detail, and we should just specify a list of function calls that the wallet can make to the driver?\r\n* [BIP-174](https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki) partially signed transactions are now supported\r\n* [output descriptors](https://github.com/bitcoin/bitcoin/pull/14096)\r\n* [wallet flags](#9662) (e.g. watch-only)\r\n* dynamic wallet loading and creation\r\n\r\nPrevious issues discussing this:\r\n* #10112 (initially about Yubikey, but more broad)\r\n* #8218 (initially about Trezor, but also more broad)\r\n\r\n---\r\nI imagine a UX like this:\r\n\r\n1.  User installs hardware driver\r\n2. User starts Bitcoin Core and inserts hardware wallet\r\n3. Core detects this driver and checks device id against all loaded wallets\r\n3a. If no wallet is found, add menu entry \"Create wallet with device X\"\r\n3b. Core asks device for account xpub `m/49'/0'` (or whatever user enters)\r\n3c. Derive keys (driver provides output descriptor for change and receive addresses, e.g. `/0/*` and `/1/*`)\r\n3d. Mark wallet as watch-only and store the device id.\r\n3e. Ask driver if this is an existing or fresh wallet, rescan if needed\r\n4. When user makes a transaction and wallet has a device id, check with driver that device is inserted, then ask device to sign transaction\r\n\r\nWhat seems to be missing is some sort of reverse-RPC, where the Bitcoin Core can take initiative, e.g. asking the device \"give me an xpub\", or \"sign this\". Perhaps drivers can symlink a standardized RPC at  `$bitcoin_datadir/hardware/device-id`?",
          "user": {
            "login": "Sjors",
            "id": 10217,
            "node_id": "MDQ6VXNlcjEwMjE3",
            "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Sjors",
            "html_url": "https://github.com/Sjors",
            "followers_url": "https://api.github.com/users/Sjors/followers",
            "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
            "organizations_url": "https://api.github.com/users/Sjors/orgs",
            "repos_url": "https://api.github.com/users/Sjors/repos",
            "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/Sjors/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 64583,
              "node_id": "MDU6TGFiZWw2NDU4Mw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Feature",
              "name": "Feature",
              "color": "7cf575",
              "default": false
            },
            {
              "id": 64584,
              "node_id": "MDU6TGFiZWw2NDU4NA==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Brainstorming",
              "name": "Brainstorming",
              "color": "ebd775",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 14,
          "closed_at": "2021-06-25T11:50:10Z",
          "created_at": "2018-09-04T10:25:26Z",
          "updated_at": "2022-08-18T18:36:26Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2753303418,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mjc1MzMwMzQxOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2753303418",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-29T18:23:21Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2753439025,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mjc1MzQzOTAyNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2753439025",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-29T19:04:56Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2769005646,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mjc2OTAwNTY0Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2769005646",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-04T19:51:39Z"
    },
    {
      "event": "commented",
      "id": 549780152,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU0OTc4MDE1Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/549780152",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-05T11:18:08Z",
      "updated_at": "2019-11-07T15:38:27Z",
      "author_association": "MEMBER",
      "body": "Rescanning is broken for (some?) descriptor wallets, both when importing descriptors and when calling `rescanblockchain`. It does detect new transactions. Example:\r\n\r\n```\r\n# Drop coins on a random address in the default wallet\r\nbitcoin-cli -regtest -rpcwallet=\"\" generatetoaddress 101 `bitcoin-cli -regtest -rpcwallet=\"\" getnewaddress`\r\nsrc/bitcoin-cli -regtest createwallet T false true \"\" true true\r\nsrc/bitcoin-cli -regtest -rpcwallet=T importdescriptors '[{\"desc\": \"wpkh([00000001/84h/1h/0h]tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/0/*)#slxu8rmv\", \"timestamp\": 0, \"range\": [0,1], \"internal\": false, \"active\": true}]'\r\nbitcoin-cli -regtest -rpcwallet=T getnewaddress\r\nbitcoin-cli -regtest -rpcwallet=T getaddressinfo bcrt1qm90ugl4d48jv8n6e5t9ln6t9zlpm5th68x4f8g\r\nsrc/bitcoin-cli -regtest -rpcwallet=\"\" sendtoaddress bcrt1qm90ugl4d48jv8n6e5t9ln6t9zlpm5th68x4f8g 1\r\nbitcoin-cli -regtest -rpcwallet=\"\" generatetoaddress 1 `bitcoin-cli -regtest -rpcwallet=\"\" getnewaddress`\r\nbitcoin-cli -regtest -rpcwallet=T listunspent 0 9999999 '[]' true\r\n```\r\n\r\nThe last command should show the UTXO.\r\n\r\nCreate another wallet and repeat the `importdescriptors` call. UTXO won't show up:\r\n\r\n```\r\nsrc/bitcoin-cli -regtest createwallet T2 false true \"\" true true\r\nsrc/bitcoin-cli -regtest -rpcwallet=T2 importdescriptors '[{\"desc\": \"wpkh([00000001/84h/1h/0h]tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/0/*)#slxu8rmv\", \"timestamp\": 0, \"range\": [0,1], \"internal\": false, \"active\": true}]'\r\nbitcoin-cli -regtest -rpcwallet=T2 listunspent 0 9999999 '[]' true\r\n```\r\n\r\nWhen you send it new coins, those do show up.\r\n\r\nAlso note the address is incorrectly marked as `ischange` (but the derivation is correct). Might be unrelated though; the wallet determines IsChange() by checking if it's in the address book (yuck).\r\n\r\nUpdate: I can no longer reproduce this (d7ca9abe4b817913852abbd48082bde64df8e9d9)",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-549780152",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16528"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2777297155,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mjc3NzI5NzE1NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2777297155",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-06T23:54:47Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2777590536,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mjc3NzU5MDUzNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2777590536",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-07T02:52:42Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2777742751,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mjc3Nzc0Mjc1MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2777742751",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-07T04:36:29Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2777854283,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mjc3Nzg1NDI4Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2777854283",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-07T05:51:58Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-18T12:55:38Z",
      "updated_at": "2019-11-18T12:55:38Z",
      "source": {
        "issue": {
          "id": 524350721,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MzQyMTQxMjIz",
          "url": "https://api.github.com/repos/Coldcard/firmware/issues/32",
          "repository_url": "https://api.github.com/repos/Coldcard/firmware",
          "labels_url": "https://api.github.com/repos/Coldcard/firmware/issues/32/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/Coldcard/firmware/issues/32/comments",
          "events_url": "https://api.github.com/repos/Coldcard/firmware/issues/32/events",
          "html_url": "https://github.com/Coldcard/firmware/pull/32",
          "number": 32,
          "state": "closed",
          "state_reason": null,
          "title": "Add Bitcoin Core descriptor export",
          "body": "This PR may have broken some tests; I can clean that up later, after initial feedback.\r\n\r\nBitcoin Core 0.18 a later added support for [output descriptors](https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md) and watch-only wallets. This makes it much easier import keys from Coldcard. In fact, it's what [HWI](https://github.com/bitcoin-core/HWI) uses internally.\r\n\r\nThis PR allows air gapped import of public keys, by adding a new menu item: \r\n<img width=\"265\" alt=\"Schermafbeelding 2019-11-18 om 13 49 03\" src=\"https://user-images.githubusercontent.com/10217/69053673-372f0300-0a0a-11ea-8db2-e30459c2068e.png\">\r\n\r\nThis produces a text file with a command, that can be copy-pasted to import public keys into Bitcoin Core. This is the same command HWI produces in the [setup step](https://github.com/bitcoin-core/HWI/blob/master/docs/bitcoin-core-usage.md#setup), but doesn't require an USB connection.\r\n\r\n```\r\n# Bitcoin Core Wallet Import File\r\n\r\nhttps://github.com/Coldcard/firmware/blob/master/docs/bitcoin-core-usage.md\r\n\r\n## For wallet with master key fingerprint: 0f056943\r\n\r\nWallet operates on blockchain: Bitcoin Testnet\r\n\r\n## IMPORTANT WARNING\r\n\r\nDo **not** deposit to any address in this file unless you have a working\r\nwallet system that is ready to handle the funds at that address!\r\n\r\n## Bitcoin Core RPC\r\n\r\nThe following command can be entered after opening Window -> Console in Bitcoin Core,\r\nor using bitcoin-cli:\r\n\r\nimportmulti '[{\"range\": [0, 1000], \"timestamp\": \"now\", \"keypool\": true, \"watchonly\": true, \"desc\": \"wpkh([0f056943/84h/1h/0h]tpubDC7jGaaSE66Pn4dgtbAAstde4bCyhSUs4r3P8WhMVvPByvcRrzrwqSvpF9Ghx83Z1LfVugGRrSBko5UEKELCz9HoMv5qKmGq3fqnnbS5E9r/0/*)#erexmnep\", \"internal\": false}, {\"range\": [0, 1000], \"timestamp\": \"now\", \"keypool\": true, \"watchonly\": true, \"desc\": \"wpkh([0f056943/84h/1h/0h]tpubDC7jGaaSE66Pn4dgtbAAstde4bCyhSUs4r3P8WhMVvPByvcRrzrwqSvpF9Ghx83Z1LfVugGRrSBko5UEKELCz9HoMv5qKmGq3fqnnbS5E9r/1/*)#ghu8xxfe\", \"internal\": true}]'\r\n\r\n```\r\n\r\nThis RP also adds more detailed Bitcoin Core instructions. It removes previous instructions that imo are too complicated and error prone. However I can add them back if needed, e.g. under an \"older versions\" heading.\r\n\r\nLike Wasabi this only supports bech32 addresses. Mixing and matching P2SH and bech32 addresses in Bitcoin Core currently breaks compatiliity with BIP59 / BIP84. Future [descriptor wallets](https://github.com/bitcoin/bitcoin/pull/16528) will be able to mix and match safely, if anyone still uses P2SH wrapped SegWit by then.\r\n\r\nTo add PSBT loading and saving support to Bitcoin Core GUI, please review: https://github.com/bitcoin/bitcoin/pull/17509. Until then, PSBT support is command-line only and uses the JSON instead of binary format. I added a link to HWI documentation for how to sign transactions.",
          "user": {
            "login": "Sjors",
            "id": 10217,
            "node_id": "MDQ6VXNlcjEwMjE3",
            "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Sjors",
            "html_url": "https://github.com/Sjors",
            "followers_url": "https://api.github.com/users/Sjors/followers",
            "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
            "organizations_url": "https://api.github.com/users/Sjors/orgs",
            "repos_url": "https://api.github.com/users/Sjors/repos",
            "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/Sjors/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 10,
          "pull_request": {
            "url": "https://api.github.com/repos/Coldcard/firmware/pulls/32",
            "html_url": "https://github.com/Coldcard/firmware/pull/32",
            "diff_url": "https://github.com/Coldcard/firmware/pull/32.diff",
            "patch_url": "https://github.com/Coldcard/firmware/pull/32.patch"
          },
          "closed_at": "2019-11-20T16:03:55Z",
          "created_at": "2019-11-18T12:55:38Z",
          "updated_at": "2019-11-25T16:17:05Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2862717949,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mjg2MjcxNzk0OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2862717949",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-12-06T20:50:46Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2882003945,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mjg4MjAwMzk0NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2882003945",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-12-13T16:59:07Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-06T05:04:54Z",
      "updated_at": "2020-01-06T05:04:54Z",
      "source": {
        "issue": {
          "id": 545540886,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MzU5MzkxNjQ3",
          "url": "https://api.github.com/repos/Sjors/bitcoin/issues/13",
          "repository_url": "https://api.github.com/repos/Sjors/bitcoin",
          "labels_url": "https://api.github.com/repos/Sjors/bitcoin/issues/13/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/Sjors/bitcoin/issues/13/comments",
          "events_url": "https://api.github.com/repos/Sjors/bitcoin/issues/13/events",
          "html_url": "https://github.com/Sjors/bitcoin/pull/13",
          "number": 13,
          "state": "closed",
          "state_reason": null,
          "title": "Descriptor wallet + PSBT GUI support",
          "body": "This is part of the [NthKey tutorial](https://nthkey.com/tutorial) and is not a real pull request. It combines the following:\r\n\r\n* [PR 16528 ](https://github.com/bitcoin/bitcoin/pull/16528): Native Descriptor Wallets\r\n* [PR 17509](https://github.com/bitcoin/bitcoin/pull/17509): gui: save and load PSBT \r\n* [PR 18027](https://github.com/bitcoin/bitcoin/pull/18027): gui: PSBT operations dialog\r\n* [PR 17879](https://github.com/bitcoin/bitcoin/pull/17879): gui: uncheck encrypt by default when creating wallet\r\n* make descriptor wallets the default",
          "user": {
            "login": "Sjors",
            "id": 10217,
            "node_id": "MDQ6VXNlcjEwMjE3",
            "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Sjors",
            "html_url": "https://github.com/Sjors",
            "followers_url": "https://api.github.com/users/Sjors/followers",
            "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
            "organizations_url": "https://api.github.com/users/Sjors/orgs",
            "repos_url": "https://api.github.com/users/Sjors/repos",
            "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/Sjors/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "OWNER",
          "locked": false,
          "comments": 0,
          "pull_request": {
            "url": "https://api.github.com/repos/Sjors/bitcoin/pulls/13",
            "html_url": "https://github.com/Sjors/bitcoin/pull/13",
            "diff_url": "https://github.com/Sjors/bitcoin/pull/13.diff",
            "patch_url": "https://github.com/Sjors/bitcoin/pull/13.patch"
          },
          "closed_at": "2020-11-25T17:08:10Z",
          "created_at": "2020-01-06T05:04:54Z",
          "updated_at": "2020-11-25T17:08:10Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2925249515,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjkyNTI0OTUxNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2925249515",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-06T19:10:45Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2925343817,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjkyNTM0MzgxNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2925343817",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-06T19:41:26Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2959042907,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mjk1OTA0MjkwNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2959042907",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-17T18:12:02Z"
    },
    {
      "event": "commented",
      "id": 576394411,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU3NjM5NDQxMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/576394411",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-20T18:53:16Z",
      "updated_at": "2020-01-21T19:05:34Z",
      "author_association": "MEMBER",
      "body": "I wrote a test to check `sortedmulti()` origins: https://github.com/Sjors/bitcoin/commit/04610844704aee8fb7cd6f94167a767f5473d281\r\n\r\nUnfortunately this test passes, so I can't reproduce the bug I was chasing just yet. I was seeing an origin-pubkey mismatch for sortedmulti() descriptors.\r\n\r\n_Update: fairly certain I was chasing a ghost. Hopefully the tests are useful._",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-576394411",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16528"
    },
    {
      "event": "commented",
      "id": 576816376,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU3NjgxNjM3Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/576816376",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-21T18:29:41Z",
      "updated_at": "2020-01-21T18:29:41Z",
      "author_association": "MEMBER",
      "body": "I could not replicate any bugs with `sortedmulti` descriptors.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-576816376",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16528"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2991984843,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mjk5MTk4NDg0Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2991984843",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-30T04:59:29Z"
    },
    {
      "event": "ready_for_review",
      "id": 2991984944,
      "node_id": "MDE5OlJlYWR5Rm9yUmV2aWV3RXZlbnQyOTkxOTg0OTQ0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2991984944",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-30T04:59:33Z"
    },
    {
      "event": "renamed",
      "id": 2991985873,
      "node_id": "MDE3OlJlbmFtZWRUaXRsZUV2ZW50Mjk5MTk4NTg3Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2991985873",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-30T05:00:12Z",
      "rename": {
        "from": "[WIP] Native Descriptor Wallets (take 2)",
        "to": "Native Descriptor Wallets using DescriptorScriptPubKeyMan"
      }
    },
    {
      "event": "commented",
      "id": 580083947,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU4MDA4Mzk0Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/580083947",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-30T05:00:25Z",
      "updated_at": "2020-01-30T05:00:25Z",
      "author_association": "MEMBER",
      "body": "Rebased onto master, now ready for review.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-580083947",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16528"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2992250844,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mjk5MjI1MDg0NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2992250844",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-30T07:30:41Z"
    },
    {
      "event": "commented",
      "id": 580233543,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU4MDIzMzU0Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/580233543",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-30T12:38:42Z",
      "updated_at": "2020-01-30T14:26:54Z",
      "author_association": "MEMBER",
      "body": "Concept and approach re-ACK\r\n\r\nI rebased my HWI support PRs on top of this:  #16546 (RPC) and #16549 (GUI).\r\n\r\nThe first commit could go to an independent PR:\r\n* `Output a descriptor in createmultisig`\r\n\r\nAnd a few that could be done before this PR, just to get the number of commits down a bit :-)\r\n* ~`Introduce SetType function to tell ScriptPubKeyMans the type and internal-ness of it`~ (empty for legacy)\r\n* `Change wallet_encryption.py to use signmessage instead of dumpprivkey`\r\n* d3819b681f766a17deef4650bd6297178924f04b  `Change GetMetadata to use unique_ptr<CKeyMetadata>`\r\n* c80e25d8743d7e5bfe866d32bf394cf55166bde5  `Add a function to determine the `OutputType` of a scriptPubKey` (`DetermineOutputType` should be contrasted to getting this information directly from the descriptor like in #15590)\r\n* 0fc666f32ff8472215e05e85dd609901a02dc3ae  `Add IsLegacy to CWallet so that the GUI knows whether to show watchonly`\r\n\r\nSome of my [earlier comments](https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-517905778) are still relevant:\r\n* I'm ambivalent about using BIP44/49/84 for new descriptor wallets. Downside is that individual addresses are no longer hardened. Upside is that this many other wallets use this standard and we could even consider BIP39 backup at some point (#17748). Perhaps `createwallet` (and the GUI) could make the use of BIP44/49/84 optional.\r\n* `importdescriptors` should no longer require a range argument\r\n* `importdescriptor` could be a singular RPC (less tedious when used manually). It could drop the `timestamp` argument in favor of just calling `rescanblockchain` after import.\r\n\r\nI think we should split `scriptpubkeyman.{h,cpp}` into `scriptpubkeyman.{h,cpp}` , `legacy_scriptpubkeyman.{h,cpp}`  and `descriptor_scriptpubkeyman.{h,cpp}` (although meh because it creates large diff, but maybe better to get it over with).",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-580233543",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16528"
    },
    {
      "event": "reviewed",
      "id": 350837022,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwODM3MDIy",
      "url": null,
      "actor": null,
      "commit_id": "dd92677895de134c77b318cf7e27e2471a10842c",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "I reviewed the first ~5 commits until e40a833c3bffb0cf723357238eb809398e3e5237 `Create LegacyScriptPubKeyMan when not a descriptor wallet`, but started to run into compiler issues, so will continue later. Found one nit too:",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#pullrequestreview-350837022",
      "submitted_at": "2020-01-30T14:42:15Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
    },
    {
      "event": "added_to_project",
      "id": 2994558202,
      "node_id": "MDE5OkFkZGVkVG9Qcm9qZWN0RXZlbnQyOTk0NTU4MjAy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2994558202",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-30T19:08:36Z",
      "project_card": {
        "id": 32395865,
        "url": "https://api.github.com/projects/columns/cards/32395865",
        "project_id": 481835,
        "project_url": "https://api.github.com/projects/481835",
        "column_name": "Blockers"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-30T21:56:05Z",
      "updated_at": "2020-01-30T21:56:05Z",
      "source": {
        "issue": {
          "id": 557779722,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MzY5MzA4OTM1",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18032",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18032/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18032/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18032/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/18032",
          "number": 18032,
          "state": "closed",
          "state_reason": null,
          "title": "rpc: Output a descriptor in createmultisig and addmultisigaddress",
          "body": "Give a descriptor from `createmultisig` and `addmultisigaddress`.\r\n\r\nExtracted from #16528 with `addmultisgaddress` and tests added.",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            },
            {
              "id": 98279177,
              "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
              "name": "RPC/REST/ZMQ",
              "color": "0052cc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 6,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18032",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/18032",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/18032.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/18032.patch"
          },
          "closed_at": "2020-02-09T12:58:46Z",
          "created_at": "2020-01-30T21:56:05Z",
          "updated_at": "2022-02-15T10:26:52Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2995167312,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mjk5NTE2NzMxMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2995167312",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-30T22:32:02Z"
    },
    {
      "event": "commented",
      "id": 580494041,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU4MDQ5NDA0MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/580494041",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-30T22:34:14Z",
      "updated_at": "2020-01-30T22:40:09Z",
      "author_association": "MEMBER",
      "body": "Moved `Output a descriptor in createmultisig` to it's own PR and dropped it from here since it isn't actually used in descriptor wallets.\r\n\r\nI will investigate breaking out the other commits.\r\n\r\n>     * I'm ambivalent about using BIP44/49/84 for new descriptor wallets. Downside is that individual addresses are no longer hardened. Upside is that this many other wallets use this standard and we could even consider BIP39 backup at some point (#17748). Perhaps `createwallet` (and the GUI) could make the use of BIP44/49/84 optional.\r\n\r\nAFAICT, the reasoning for using exclusively hardened derivation is because we could export private keys with `dumpprivkey` and that has issues. But since that is disabled for descriptor wallets, I think it's fine.\r\n\r\n>     * `importdescriptors` should no longer require a range argument\r\n\r\nWhy?\r\n\r\n>     * `importdescriptor` could be a singular RPC (less tedious when used manually). It could drop the `timestamp` argument in favor of just calling `rescanblockchain` after import.\r\n\r\nI suppose, but I don't really want there to be multiple commands that do fundamentally the same thing.\r\n\r\n> I think we should split `scriptpubkeyman.{h,cpp}` into `scriptpubkeyman.{h,cpp}` , `legacy_scriptpubkeyman.{h,cpp}` and `descriptor_scriptpubkeyman.{h,cpp}` (although meh because it creates large diff, but maybe better to get it over with).\r\n\r\nMeh.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-580494041",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16528"
    },
    {
      "event": "closed",
      "id": 2995173686,
      "node_id": "MDExOkNsb3NlZEV2ZW50Mjk5NTE3MzY4Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2995173686",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-30T22:34:34Z"
    },
    {
      "event": "reopened",
      "id": 2995173856,
      "node_id": "MDEzOlJlb3BlbmVkRXZlbnQyOTk1MTczODU2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2995173856",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-30T22:34:38Z"
    },
    {
      "event": "commented",
      "id": 580679648,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU4MDY3OTY0OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/580679648",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-31T10:35:08Z",
      "updated_at": "2020-01-31T16:25:58Z",
      "author_association": "MEMBER",
      "body": "Descriptors can be expanded indefinitely, so why specify a (mandatory) range on import? It might make sense as an optional field to set a boundary, e.g. if you know the external signing device has a range limit.\r\n\r\n> AFAICT, the reasoning for using exclusively hardened derivation is because we could export private keys with dumpprivkey and that has issues. But since that is disabled for descriptor wallets, I think it's fine.\r\n\r\nI'm not familiar with the history. Another reason could be that if one private key is compromised in a side-channel attack, the other keys are still safe. But that assumes such a side-channel attack, couldn't also compromise the master key. Or perhaps a (horrible) bug in the signing code causes a private key to leak on chain. Or someone wants to reenable `dumpprivkey` again to redeem some fork coin. Using `m/{0,1,2}'/{0,1}'/k` by default and making BIP44/49/84 opt-in (in a followup) seems less of change from status quo.\r\n\r\n> I don't really want there to be multiple commands that do fundamentally the same thing.\r\n\r\nDo you mean having similar commands (`importmulti` and `importdescriptors`) with different options? I like consistency, as do developers who want a simple path to switch their integration over to descriptor wallets. But I also like the rare opportunity to clean up the RPC. And when people have to copy-paste some magic to import keys from a hardware wallet, this new syntax looks less intimidating. Though ideally that shouldn't be needed at all.  \r\n\r\n\r\nThe [AppVeyor failure](https://ci.appveyor.com/project/DrahtBot/bitcoin/builds/30473125#L4131) might be legit `wallet_importdescriptors.py` encounters `JSONRPCException: bad-txns-inputs-missingorspent (-25)`, albeit odd.\r\n\r\nIn f83fde4e8e13a254083e9433dfa770a8b52b1053 `Create LegacyScriptPubKeyMan when not a descriptor wallet` you're also introducing `class WalletDescriptor`; that was supposed to be a separate commit?\r\n\r\nYou're serialising the descriptor as a string (in `WalletDescriptor`). That's fine with me, I'd rather not delay this work, and we can change the serialisation later. However there's been some [mailinglist discussion](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-December/017529.html) about serialising descriptors into something that's easier to copy/paste and put in a QR code. Maybe that's worth working out in a separate PR and then to use that for the wallet as well. Added a an issue for it #18043.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-580679648",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16528"
    },
    {
      "event": "reviewed",
      "id": 351628547,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxNjI4NTQ3",
      "url": null,
      "actor": null,
      "commit_id": "ee6980be437c09df6044a5ced7caa91410453027",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Code reviewed the first 15 commits up to fd995af379b73b63b78b276b5b8f31d39b2d2b67, looks pretty good.\r\n\r\n_Regarding private key serialisation:_\r\n\r\nIn d6f0c337f5bbf935cd93ed3884f5c10bcaa5d493 `Implement loading of keys for DescriptorScriptPubKeyMan` the comment `// hash pubkey/privkey to accelerate wallet load`, is explained elsewhere:\r\n\r\n```\r\n            // Old wallets store keys as DBKeys::KEY [pubkey] => [privkey]\r\n            // ... which was slow for wallets with lots of keys, because the public key is re-derived from the private key\r\n            // using EC operations as a checksum.\r\n            // Newer wallets store keys as DBKeys::KEY [pubkey] => [privkey][hash(pubkey,privkey)], which is much faster while\r\n            // remaining backwards-compatible.\r\n```\r\n\r\nThere's no need to be backwards-compatible. I haven't thought about this scheme deeply, but can we improve it?\r\n\r\nDo we want to use a descriptor cache for all private keys, like we do public keys? And then checksum the entire cache instead of individual keys?\r\n\r\nFor descriptors without hardened derivation, should we refrain from storing private keys at all? (including for encrypted wallets, since we can derive from seed after decryption)\r\n\r\n_Update_: see IRC wallet meeting log of today, I tripped over the name here; these are apparently master keys.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#pullrequestreview-351628547",
      "submitted_at": "2020-01-31T18:11:10Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
    },
    {
      "event": "commented",
      "id": 580888293,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU4MDg4ODI5Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/580888293",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-31T19:59:45Z",
      "updated_at": "2020-01-31T19:59:45Z",
      "author_association": "CONTRIBUTOR",
      "body": "Related 31 January wallet meeting discussion:\r\nhttp://www.erisian.com.au/meetbot/bitcoin-core-dev/2020/bitcoin-core-dev.2020-01-31-19.00.log.html",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-580888293",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16528"
    },
    {
      "event": "labeled",
      "id": 3007710046,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDMwMDc3MTAwNDY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3007710046",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-02-04T21:08:12Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "referenced",
      "id": 3020575549,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMwMjA1NzU1NDk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3020575549",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "75fb37ce68289eb7e00e2ccdd2ef7f9271332545",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/75fb37ce68289eb7e00e2ccdd2ef7f9271332545",
      "created_at": "2020-02-09T12:58:38Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3027729781,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzAyNzcyOTc4MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3027729781",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-02-11T18:34:58Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-02-11T18:55:10Z",
      "updated_at": "2020-02-11T18:55:10Z",
      "source": {
        "issue": {
          "id": 562984928,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MzczNDc5NTA5",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18115",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18115/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18115/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18115/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/18115",
          "number": 18115,
          "state": "closed",
          "state_reason": null,
          "title": "wallet: Pass in transactions and messages for signing instead of exporting the private keys",
          "body": "Following #17261, the way to sign transactions, PSBTs, and messages was to use `GetSigningProvider()` and get a `SigningProvider` containing the private keys. However this may not be feasible for future `ScriptPubKeyMan`s, such as for hardware wallets. Instead of exporting a `SigningProvider` containing private keys, we need to pass these things into the `ScriptPubKeyMan` (via `CWallet`) so that they can do whatever is needed internally to sign them. This is largely a refactor as the logic of processing transactions, PSBTs, and messages for is moved into `LegacyScriptPubKeyMan` and `CWallet` instead of being handled by the caller (e.g. `signrawtransaction`).\r\n\r\nTo help with this, I've refactored the 3(!) implementations of a `SignTransaction()` function into one generic one. This function will be called by `signrawtransactionwithkey` and `LegacyScriptPubKeyMan::SignTransaction()`. `CWallet::CreateTransaction()` is changed to call `CWallet::SignTransaction()` which in turn, calls `LegacyScriptPubKeyMan::SignTransaction()`. Other `ScriptPubKeyMan`s may implement `SignTransaction()` differently.\r\n\r\n`FillPSBT()` is moved to be a member function of `CWallet` and the `psbtwallet.cpp/h` files removed. It is further split so that `CWallet` handles filling the UTXOs while the `ScriptPubKeyMan` handles adding keys, derivation paths, scripts, and signatures. In the end `LegacyScriptPubKeyMan::FillPSBT` still calls `SignPSBTInput`, but the `SigningProvider` is internal to `LegacyScriptPubKeyMan`. Other `ScriptPubKeyMan`s may do something different.\r\n\r\nA new `SignMessage()` function is added to both `CWallet` and `ScriptPubKeyMan`. Instead of having the caller (i.e. `signmessage` or the sign message dialog) get the private key, hash the message, and sign, `ScriptPubKeyMan` will now handle that (`CWallet` passes through to the `ScriptPubKeyMan`s as it does for many functions). This signing code is thus consolidated into `LegacyScriptPubKeyMan::SignMessage()`, though other `ScriptPubKeyMan`s may implement it differently. Additionally, a `SigningError` enum is introduced for the different errors that we expect to see from `SignMessage()`.\r\n\r\nLastly, `GetSigningProvider()` is renamed to `GetPublicSigningProvider()`. It will now only provide pubkeys, key origins, and scripts. `LegacySigningProvider` has it's `GetKey` and `HaveKey` functions changed to only return false. Future implementations should return `HidingSigningProvider`s where private keys are hidden.\r\n\r\nOther things like `dumpprivkey` and `dumpwallet` are not changed because they directly need and access the `LegacyScriptPubKeyMan` so are not relevant to future changes.",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 21,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18115",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/18115",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/18115.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/18115.patch"
          },
          "closed_at": "2020-03-09T20:02:53Z",
          "created_at": "2020-02-11T05:23:22Z",
          "updated_at": "2022-02-15T10:27:50Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "unlabeled",
      "id": 3027868762,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MzAyNzg2ODc2Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3027868762",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-02-11T19:16:10Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-02-11T19:26:33Z",
      "updated_at": "2020-02-11T19:26:33Z",
      "source": {
        "issue": {
          "id": 557833678,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MzY5MzUwNjk0",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18034",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18034/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18034/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18034/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/18034",
          "number": 18034,
          "state": "closed",
          "state_reason": null,
          "title": "Get the OutputType for a descriptor",
          "body": "Adds a `GetOutputType()` method to get the OutputType of a descriptor. Some descriptors don't have a determinate OutputType, so we actually use an `Optional<OutputType>`. For descriptors with indeterminate OutputType, we return `nullopt`.\r\n\r\n`addr()` and `raw()` use OutputTypes as determined by the CTxDestination they have. For simplicity, `ScriptHash` destinations are `LEGACY` even though they could be `P2SH_SEGWIT`.\r\n`combo()`, `pk()`, and `multi()` are `nullopt` as they either don't have an OutputType or they have multiple. `DescriptorImpl` defaults to `nullopt`.\r\n`pkh()` is `LEGACY` as expected\r\n`wpkh()` and `wsh()` are `BECH32` as expected.\r\n`sh()` checks whether the sub-descriptor is `BECH32`. If so, it is `P2SH_SEGWIT`. Otherwise it is `LEGACY`.\r\n\r\nThe descriptor tests are updated to check the OutputType too.",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 1482182044,
              "node_id": "MDU6TGFiZWwxNDgyMTgyMDQ0",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Descriptors",
              "name": "Descriptors",
              "description": "",
              "color": "e9f76c",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 9,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18034",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/18034",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/18034.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/18034.patch"
          },
          "closed_at": "2020-02-21T19:03:30Z",
          "created_at": "2020-01-31T00:12:10Z",
          "updated_at": "2022-02-15T10:41:34Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3027934081,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzAyNzkzNDA4MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3027934081",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-02-11T19:35:54Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-02-11T20:18:20Z",
      "updated_at": "2020-02-11T20:18:20Z",
      "source": {
        "issue": {
          "id": 545466197,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MzU5MzM1OTg0",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17877",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17877/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17877/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17877/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/17877",
          "number": 17877,
          "state": "closed",
          "state_reason": null,
          "title": "qt, refactor: Make BitcoinUnits::Unit a scoped enum",
          "body": "Since Qt 5.5 there are [means](https://doc.qt.io/qt-5/qobject.html#Q_ENUM) to register an enum type with the meta-object system (such enum still lacks an ability to interact with [`QSettings::setValue()`](https://doc.qt.io/qt-5/qsettings.html#setValue) and [`QSettings::value()`](https://doc.qt.io/qt-5/qsettings.html#value) without defined stream operators).\r\n\r\nIn order to reduce global namespace polluting and to force strong type checking, this PR:\r\n- makes `BitcoinUnits::SeparatorStyle` a scoped enum (done in https://github.com/bitcoin-core/gui/pull/3)\r\n- makes `BitcoinUnits::Unit` a scoped enum (`typedef BitcoinUnits::Unit BitcoinUnit;`)\r\n- cleans `BitcoinUnits` class and its functions\r\n- does not change behavior",
          "user": {
            "login": "hebasto",
            "id": 32963518,
            "node_id": "MDQ6VXNlcjMyOTYzNTE4",
            "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hebasto",
            "html_url": "https://github.com/hebasto",
            "followers_url": "https://api.github.com/users/hebasto/followers",
            "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
            "organizations_url": "https://api.github.com/users/hebasto/orgs",
            "repos_url": "https://api.github.com/users/hebasto/repos",
            "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/hebasto/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135946,
              "node_id": "MDU6TGFiZWwxMzU5NDY=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/GUI",
              "name": "GUI",
              "color": "02d7e1",
              "default": false
            },
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 28,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17877",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/17877",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/17877.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/17877.patch"
          },
          "closed_at": "2020-08-14T06:47:13Z",
          "created_at": "2020-01-05T21:01:32Z",
          "updated_at": "2022-02-15T10:34:56Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-02-11T20:56:34Z",
      "updated_at": "2020-02-11T20:56:34Z",
      "source": {
        "issue": {
          "id": 533620700,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MzQ5NjYzMjAx",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17681",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17681/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17681/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17681/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/17681",
          "number": 17681,
          "state": "closed",
          "state_reason": null,
          "title": "wallet: Keep inactive seeds after sethdseed and derive keys from them as needed",
          "body": "Largely implements the suggestion from https://github.com/bitcoin/bitcoin/pull/17484#issuecomment-560845316.\r\n\r\nAfter `sethdseed` is called, the CHDChain for the old seed is kept in the wallet. It is kept on the file as a new `inactivehdseed` record and in memory in a map `m_inactive_hd_seeds`. In `LegacyScriptPubKeyMan::MarkUnusedAddresses` we check each used key's metadata for whether it was derived from an inactive seed. If it is, we then check to see how many keys after that key were derived from the inactive seed. If that number does not match the keypool parameter, we derive more keys from the inactive seed until it does match. This way we won't miss transactions belonging to keys outside of the range of the keypool initially.\r\n\r\nThe indexes and internal-ness of a key is gotten by checking it's key origin data.\r\n\r\nBecause of this change, we no longer need to wait for IBD to finish before `sethdseed` can work so that check is also removed.\r\n\r\nA test case for this is added as well which fails on master.",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            },
            {
              "id": 1648013533,
              "node_id": "MDU6TGFiZWwxNjQ4MDEzNTMz",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Review%20club",
              "name": "Review club",
              "description": "",
              "color": "0052cc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 20,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/17681",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/17681.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/17681.patch"
          },
          "closed_at": "2020-05-22T01:49:53Z",
          "created_at": "2019-12-05T21:54:08Z",
          "updated_at": "2022-02-15T11:15:12Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3028284527,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzAyODI4NDUyNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3028284527",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-02-11T21:25:33Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-02-11T22:27:54Z",
      "updated_at": "2020-02-11T22:27:54Z",
      "source": {
        "issue": {
          "id": 484825566,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MzEwNjE1MTY3",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16710",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16710/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16710/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16710/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/16710",
          "number": 16710,
          "state": "closed",
          "state_reason": null,
          "title": "build: Enable -Wsuggest-override if available",
          "body": "From GCC [docs](https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Warning-Options.html):\r\n> `-Wsuggest-override`\r\n> Warn about overriding virtual functions that are not marked with the override keyword.\r\n\r\n~This PR is based on #16722 (the first commit).~ See: https://github.com/bitcoin/bitcoin/pull/16722#issuecomment-584111086",
          "user": {
            "login": "hebasto",
            "id": 32963518,
            "node_id": "MDQ6VXNlcjMyOTYzNTE4",
            "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hebasto",
            "html_url": "https://github.com/hebasto",
            "followers_url": "https://api.github.com/users/hebasto/followers",
            "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
            "organizations_url": "https://api.github.com/users/hebasto/orgs",
            "repos_url": "https://api.github.com/users/hebasto/repos",
            "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/hebasto/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135946,
              "node_id": "MDU6TGFiZWwxMzU5NDY=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/GUI",
              "name": "GUI",
              "color": "02d7e1",
              "default": false
            },
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 50,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16710",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/16710",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/16710.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/16710.patch"
          },
          "closed_at": "2020-05-13T07:20:42Z",
          "created_at": "2019-08-24T14:32:12Z",
          "updated_at": "2022-02-15T10:30:56Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-02-11T22:39:44Z",
      "updated_at": "2020-02-11T22:39:44Z",
      "source": {
        "issue": {
          "id": 471508809,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MzAwMTQ1MzQ1",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16440",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16440/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16440/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16440/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/16440",
          "number": 16440,
          "state": "closed",
          "state_reason": null,
          "title": "BIP-322: Generic signed message format",
          "body": "This PR implements [BIP-322](https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki), for the single proof (no multiple addresses simultaneously) single signer (no multisig addresses) case.\r\n\r\nUI (CLI/QT) are restricted to the single proof case, but the underlying code (`script/proof.h`) supports multiple proofs.\r\n\r\nRecommend `?w=1` / `-w` to avoid whitespace spam.\r\n\r\nThere is a related PR #16653 that includes the sign/verify components of this and the signet PR (#16411).",
          "user": {
            "login": "kallewoof",
            "id": 250224,
            "node_id": "MDQ6VXNlcjI1MDIyNA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/kallewoof",
            "html_url": "https://github.com/kallewoof",
            "followers_url": "https://api.github.com/users/kallewoof/followers",
            "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
            "organizations_url": "https://api.github.com/users/kallewoof/orgs",
            "repos_url": "https://api.github.com/users/kallewoof/repos",
            "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/kallewoof/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 64583,
              "node_id": "MDU6TGFiZWw2NDU4Mw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Feature",
              "name": "Feature",
              "color": "7cf575",
              "default": false
            },
            {
              "id": 135946,
              "node_id": "MDU6TGFiZWwxMzU5NDY=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/GUI",
              "name": "GUI",
              "color": "02d7e1",
              "default": false
            },
            {
              "id": 98279177,
              "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
              "name": "RPC/REST/ZMQ",
              "color": "0052cc",
              "default": false
            },
            {
              "id": 192202000,
              "node_id": "MDU6TGFiZWwxOTIyMDIwMDA=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Consensus",
              "name": "Consensus",
              "color": "009800",
              "default": false
            },
            {
              "id": 241832923,
              "node_id": "MDU6TGFiZWwyNDE4MzI5MjM=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Utils/log/libs",
              "name": "Utils/log/libs",
              "description": "",
              "color": "5319e7",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 39,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16440",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/16440",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/16440.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/16440.patch"
          },
          "closed_at": "2020-03-25T06:36:25Z",
          "created_at": "2019-07-23T06:29:13Z",
          "updated_at": "2022-02-15T10:42:08Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-02-11T22:41:56Z",
      "updated_at": "2020-02-11T22:41:56Z",
      "source": {
        "issue": {
          "id": 470954897,
          "node_id": "MDExOlB1bGxSZXF1ZXN0Mjk5NzY1MzM5",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16432",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16432/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16432/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16432/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/16432",
          "number": 16432,
          "state": "closed",
          "state_reason": null,
          "title": "qt: Add privacy to the Overview page",
          "body": "This PR allows to hide/reveal values on the Overviewpage by checking/unchecking Menu->Settings-> Mask Values\r\n\r\nCloses #16407 \r\n\r\nPrivacy mode is OFF (the default behavior):\r\n![Screenshot from 2020-01-02 15-08-28](https://user-images.githubusercontent.com/32963518/71669074-28ab6980-2d74-11ea-8e54-4973aa307192.png)\r\n\r\nPrivacy mode is ON:\r\n![Screenshot from 2020-01-02 15-10-23 cropped](https://user-images.githubusercontent.com/32963518/71669082-2d701d80-2d74-11ea-9df5-d4acc4982dbe.png)",
          "user": {
            "login": "hebasto",
            "id": 32963518,
            "node_id": "MDQ6VXNlcjMyOTYzNTE4",
            "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hebasto",
            "html_url": "https://github.com/hebasto",
            "followers_url": "https://api.github.com/users/hebasto/followers",
            "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
            "organizations_url": "https://api.github.com/users/hebasto/orgs",
            "repos_url": "https://api.github.com/users/hebasto/repos",
            "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/hebasto/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 64583,
              "node_id": "MDU6TGFiZWw2NDU4Mw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Feature",
              "name": "Feature",
              "color": "7cf575",
              "default": false
            },
            {
              "id": 135946,
              "node_id": "MDU6TGFiZWwxMzU5NDY=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/GUI",
              "name": "GUI",
              "color": "02d7e1",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 66,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16432",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/16432",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/16432.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/16432.patch"
          },
          "closed_at": "2020-05-29T06:57:05Z",
          "created_at": "2019-07-22T08:13:36Z",
          "updated_at": "2022-08-12T00:41:37Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-02-11T22:46:02Z",
      "updated_at": "2020-02-11T22:46:02Z",
      "source": {
        "issue": {
          "id": 465981953,
          "node_id": "MDExOlB1bGxSZXF1ZXN0Mjk1OTE2OTY0",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16365",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16365/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16365/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16365/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/16365",
          "number": 16365,
          "state": "closed",
          "state_reason": null,
          "title": "Log RPC parameters (arguments) if -debug=rpcparams",
          "body": "When a developer is examining `debug.log` (or client terminal output), it's often useful to know which RPCs have been submitted to the client; this can be enabled with the `-debug=rpc` configuration option. But this prints only the method name. This PR adds `-debug=rpcparams` to enable the logging of each RPC's parameters (arguments). The parameters of certain RPCs are keys or passwords; these should not be logged.",
          "user": {
            "login": "LarryRuane",
            "id": 8321330,
            "node_id": "MDQ6VXNlcjgzMjEzMzA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/LarryRuane",
            "html_url": "https://github.com/LarryRuane",
            "followers_url": "https://api.github.com/users/LarryRuane/followers",
            "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
            "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
            "repos_url": "https://api.github.com/users/LarryRuane/repos",
            "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 64583,
              "node_id": "MDU6TGFiZWw2NDU4Mw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Feature",
              "name": "Feature",
              "color": "7cf575",
              "default": false
            },
            {
              "id": 98279177,
              "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
              "name": "RPC/REST/ZMQ",
              "color": "0052cc",
              "default": false
            },
            {
              "id": 241832923,
              "node_id": "MDU6TGFiZWwyNDE4MzI5MjM=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Utils/log/libs",
              "name": "Utils/log/libs",
              "description": "",
              "color": "5319e7",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 18,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16365",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/16365",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/16365.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/16365.patch"
          },
          "closed_at": "2022-12-06T10:45:03Z",
          "created_at": "2019-07-09T20:58:19Z",
          "updated_at": "2022-12-06T10:45:04Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-02-11T22:48:20Z",
      "updated_at": "2020-02-11T22:48:20Z",
      "source": {
        "issue": {
          "id": 456922680,
          "node_id": "MDExOlB1bGxSZXF1ZXN0Mjg4ODM2Nzg4",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16224",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16224/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16224/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16224/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/16224",
          "number": 16224,
          "state": "closed",
          "state_reason": null,
          "title": "gui: Bilingual GUI error messages",
          "body": "This is an alternative to #15340 (it works with the `Chain` interface; see: https://github.com/bitcoin/bitcoin/pull/15340#issuecomment-502674004).\r\nRefs:\r\n- #16218 (partial fix)\r\n- https://github.com/bitcoin/bitcoin/pull/15894#issuecomment-487947077\r\n\r\nThis PR:\r\n- makes GUI error messages bilingual: user's native language + untranslated (i.e. English)\r\n- insures that only untranslated messages are written to the debug log file and to `stderr` (that is not the case on master).\r\n\r\nIf a translated string is unavailable only an English string appears to a user.\r\n\r\nHere are some **examples** (updated):\r\n\r\n![Screenshot from 2020-04-24 17-08-37](https://user-images.githubusercontent.com/32963518/80222043-e2458780-864e-11ea-83fc-197b7121dba5.png)\r\n\r\n![Screenshot from 2020-04-24 17-12-17](https://user-images.githubusercontent.com/32963518/80222051-e5407800-864e-11ea-92f7-dfef1144becd.png)\r\n\r\n* `qt5ct: using qt5ct plugin` message is my local environment specific; please ignore it.\r\n\r\n---\r\n\r\nNote for reviewers: `InitWarning()` is out of this PR scope.",
          "user": {
            "login": "hebasto",
            "id": 32963518,
            "node_id": "MDQ6VXNlcjMyOTYzNTE4",
            "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hebasto",
            "html_url": "https://github.com/hebasto",
            "followers_url": "https://api.github.com/users/hebasto/followers",
            "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
            "organizations_url": "https://api.github.com/users/hebasto/orgs",
            "repos_url": "https://api.github.com/users/hebasto/repos",
            "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/hebasto/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 64583,
              "node_id": "MDU6TGFiZWw2NDU4Mw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Feature",
              "name": "Feature",
              "color": "7cf575",
              "default": false
            },
            {
              "id": 135946,
              "node_id": "MDU6TGFiZWwxMzU5NDY=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/GUI",
              "name": "GUI",
              "color": "02d7e1",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "milestone": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/45",
            "html_url": "https://github.com/bitcoin/bitcoin/milestone/45",
            "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/45/labels",
            "id": 4914019,
            "node_id": "MDk6TWlsZXN0b25lNDkxNDAxOQ==",
            "number": 45,
            "state": "closed",
            "title": "0.21.0",
            "description": "",
            "creator": {
              "login": "laanwj",
              "id": 126646,
              "node_id": "MDQ6VXNlcjEyNjY0Ng==",
              "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/laanwj",
              "html_url": "https://github.com/laanwj",
              "followers_url": "https://api.github.com/users/laanwj/followers",
              "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
              "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
              "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
              "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
              "organizations_url": "https://api.github.com/users/laanwj/orgs",
              "repos_url": "https://api.github.com/users/laanwj/repos",
              "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
              "received_events_url": "https://api.github.com/users/laanwj/received_events",
              "type": "User",
              "site_admin": false
            },
            "open_issues": 0,
            "closed_issues": 132,
            "created_at": "2019-12-09T08:39:58Z",
            "updated_at": "2021-01-15T19:50:53Z",
            "closed_at": "2021-01-15T19:50:53Z"
          },
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 84,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16224",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/16224",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/16224.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/16224.patch"
          },
          "closed_at": "2020-05-08T16:20:40Z",
          "created_at": "2019-06-17T13:02:55Z",
          "updated_at": "2022-08-16T17:02:03Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-02-12T00:12:59Z",
      "updated_at": "2020-02-12T00:12:59Z",
      "source": {
        "issue": {
          "id": 261209314,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MTQzNTY2ODkx",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11413",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11413/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11413/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11413/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/11413",
          "number": 11413,
          "state": "closed",
          "state_reason": null,
          "title": "[wallet] [rpc] sendtoaddress/sendmany: Add explicit feerate option",
          "body": "This lets users pick their own fees when using `sendtoaddress`/`sendmany` if they prefer this over the estimators.",
          "user": {
            "login": "kallewoof",
            "id": 250224,
            "node_id": "MDQ6VXNlcjI1MDIyNA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/kallewoof",
            "html_url": "https://github.com/kallewoof",
            "followers_url": "https://api.github.com/users/kallewoof/followers",
            "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
            "organizations_url": "https://api.github.com/users/kallewoof/orgs",
            "repos_url": "https://api.github.com/users/kallewoof/repos",
            "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/kallewoof/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 64583,
              "node_id": "MDU6TGFiZWw2NDU4Mw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Feature",
              "name": "Feature",
              "color": "7cf575",
              "default": false
            },
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            },
            {
              "id": 98279177,
              "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
              "name": "RPC/REST/ZMQ",
              "color": "0052cc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 79,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11413",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/11413",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/11413.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/11413.patch"
          },
          "closed_at": "2020-06-25T17:56:14Z",
          "created_at": "2017-09-28T06:44:23Z",
          "updated_at": "2022-02-15T10:48:18Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3028834610,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzAyODgzNDYxMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3028834610",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-02-12T00:36:41Z"
    },
    {
      "event": "commented",
      "id": 584946241,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU4NDk0NjI0MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/584946241",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-02-12T00:37:35Z",
      "updated_at": "2020-02-12T00:37:35Z",
      "author_association": "MEMBER",
      "body": "I've rebased this on top of #18115 and #18034. I'll start addressing other issues tomorrow.\r\n\r\nI believe I've fixed the random failure of `wallet_importdescriptors.py` as well.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-584946241",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16528"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-02-12T03:10:23Z",
      "updated_at": "2020-02-12T03:10:23Z",
      "source": {
        "issue": {
          "id": 557309258,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MzY4OTIxOTI5",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18027",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18027/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18027/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18027/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/18027",
          "number": 18027,
          "state": "closed",
          "state_reason": null,
          "title": "\"PSBT Operations\" dialog",
          "body": "Add a \"PSBT Operations\" dialog, reached from the \"Load PSBT...\" menu item, giving options to sign or broadcast the loaded PSBT as appropriate, as well as copying the result to the clipboard or saving it to a file.\r\n\r\nThis is based on Sjors' #17509, and depends on that PR going in first. (It effectively replaces the small \"load PSBT\" dialog from that PR with a more feature-rich one.)\r\n\r\nSome notes:\r\n* The way I display status information is maybe unusual (a status bar, rather than messageboxes.) I think it's helpful to have the information in it be persistent rather than transitory. But if people dislike it, I would probably move the \"current state of the transaction\" info to the top line of the main label, and the \"what action just happened, and did it succeed\" info into a messagebox.\r\n* I don't really know much about the translation/localization stuff. I put tr() in all the places it seemed like it ought to go. I did not attempt to translate the result of TransactionErrorString (which is shared by GUI and non-GUI code); I don't know if that's correct, but it matches the \"error messages in logs should be googleable in English\" heuristic. I don't know whether there are things I should be doing to reduce translator effort (like minimizing the total number of distinct message strings I use, or something.)\r\n* I don't really know how (if?) automated testing is applied to GUI code. I can make a list of PSBTs exercising all the codepaths for manual testing, if that's the right approach. Input appreciated.\r\n\r\n",
          "user": {
            "login": "gwillen",
            "id": 458997,
            "node_id": "MDQ6VXNlcjQ1ODk5Nw==",
            "avatar_url": "https://avatars.githubusercontent.com/u/458997?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gwillen",
            "html_url": "https://github.com/gwillen",
            "followers_url": "https://api.github.com/users/gwillen/followers",
            "following_url": "https://api.github.com/users/gwillen/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/gwillen/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/gwillen/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/gwillen/subscriptions",
            "organizations_url": "https://api.github.com/users/gwillen/orgs",
            "repos_url": "https://api.github.com/users/gwillen/repos",
            "events_url": "https://api.github.com/users/gwillen/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/gwillen/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 64583,
              "node_id": "MDU6TGFiZWw2NDU4Mw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Feature",
              "name": "Feature",
              "color": "7cf575",
              "default": false
            },
            {
              "id": 135946,
              "node_id": "MDU6TGFiZWwxMzU5NDY=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/GUI",
              "name": "GUI",
              "color": "02d7e1",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 45,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18027",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/18027",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/18027.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/18027.patch"
          },
          "closed_at": "2020-06-21T10:59:04Z",
          "created_at": "2020-01-30T07:16:37Z",
          "updated_at": "2022-02-15T10:45:58Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-02-12T03:47:37Z",
      "updated_at": "2020-02-12T03:47:37Z",
      "source": {
        "issue": {
          "id": 550511454,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MzYzNDA1NzI5",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17938",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17938/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17938/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17938/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/17938",
          "number": 17938,
          "state": "closed",
          "state_reason": null,
          "title": "Disallow automatic conversion between disparate hash types",
          "body": "This bases the script/standard hash types, TxDestination-related and CScriptID on a base template which does not silently convert the underlying `uintN` type.\r\n\r\nInspired by and built on #17924. Commits are small and focused to ease review.\r\n\r\nNote some of these changes may be relative to existing bugs of the same sort as #17924. See particularly \"Convert CPubKey to WitnessV0KeyHash directly\" and \"Remove an apparently unnecessary conversion\".",
          "user": {
            "login": "Empact",
            "id": 5470,
            "node_id": "MDQ6VXNlcjU0NzA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Empact",
            "html_url": "https://github.com/Empact",
            "followers_url": "https://api.github.com/users/Empact/followers",
            "following_url": "https://api.github.com/users/Empact/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/Empact/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/Empact/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
            "organizations_url": "https://api.github.com/users/Empact/orgs",
            "repos_url": "https://api.github.com/users/Empact/repos",
            "events_url": "https://api.github.com/users/Empact/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/Empact/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            },
            {
              "id": 98279177,
              "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
              "name": "RPC/REST/ZMQ",
              "color": "0052cc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 18,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17938",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/17938",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/17938.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/17938.patch"
          },
          "closed_at": "2020-06-21T08:29:05Z",
          "created_at": "2020-01-16T00:53:52Z",
          "updated_at": "2022-08-18T18:20:18Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-02-12T04:57:19Z",
      "updated_at": "2020-02-12T04:57:19Z",
      "source": {
        "issue": {
          "id": 527723171,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MzQ0OTI0ODY5",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17577",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17577/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17577/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17577/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/17577",
          "number": 17577,
          "state": "closed",
          "state_reason": null,
          "title": "refactor: deduplicate the message sign/verify code",
          "body": "The message signing and verifying logic was replicated in a few places\r\nin the code. Consolidate in a newly introduced `MessageSign()` and\r\n`MessageVerify()` and add unit tests for them.\r\n",
          "user": {
            "login": "vasild",
            "id": 266751,
            "node_id": "MDQ6VXNlcjI2Njc1MQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vasild",
            "html_url": "https://github.com/vasild",
            "followers_url": "https://api.github.com/users/vasild/followers",
            "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
            "organizations_url": "https://api.github.com/users/vasild/orgs",
            "repos_url": "https://api.github.com/users/vasild/repos",
            "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/vasild/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 18,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17577",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/17577",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/17577.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/17577.patch"
          },
          "closed_at": "2020-02-25T10:30:59Z",
          "created_at": "2019-11-24T16:35:09Z",
          "updated_at": "2022-02-15T10:27:21Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-02-12T05:30:41Z",
      "updated_at": "2020-02-12T05:30:41Z",
      "source": {
        "issue": {
          "id": 512817712,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MzMyNzU0ODQw",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17264",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17264/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17264/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17264/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/17264",
          "number": 17264,
          "state": "closed",
          "state_reason": null,
          "title": "rpc: set default bip32derivs to true for psbt methods",
          "body": "In https://github.com/bitcoin/bitcoin/pull/13557#pullrequestreview-135905054 I recommended not including bip32 deriviation by default in PSBTs:\r\n\r\n> _Bit of a privacy issue_: let's say person A and B are about to spend from a multisig address, sending everything to person A. Person A gives their address to person B, their wallet wallet creates a PSBT, but doesn't sign it. Wallet A then calls `walletprocesspsbt` which signs it and _spontaneously adds the master_fingerprint and bip32 path_. Same issue with `walletcreatefundedpsbt`.\r\n> \r\n> Adding `bip32_derivs` should probably be opt-in.\r\n\r\nIn practice I find this default quite annoying because I forget it and end up with a confused hardware wallet.\r\n\r\nMore importantly, in the multisig example I provided, it's actually essential for the other side to know the derivation details (in addition to an xpub). This allows them to check that change is going to an address you can still co-sign for (because the spending policy is unchanged except for an index).",
          "user": {
            "login": "Sjors",
            "id": 10217,
            "node_id": "MDQ6VXNlcjEwMjE3",
            "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Sjors",
            "html_url": "https://github.com/Sjors",
            "followers_url": "https://api.github.com/users/Sjors/followers",
            "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
            "organizations_url": "https://api.github.com/users/Sjors/orgs",
            "repos_url": "https://api.github.com/users/Sjors/repos",
            "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/Sjors/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 98279177,
              "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
              "name": "RPC/REST/ZMQ",
              "color": "0052cc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 10,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17264",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/17264",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/17264.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/17264.patch"
          },
          "closed_at": "2020-02-25T10:52:14Z",
          "created_at": "2019-10-26T10:10:01Z",
          "updated_at": "2022-08-16T17:06:05Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-02-12T05:34:39Z",
      "updated_at": "2020-02-12T05:34:39Z",
      "source": {
        "issue": {
          "id": 510304768,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MzMwNzAyNTU0",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17211",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17211/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17211/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17211/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/17211",
          "number": 17211,
          "state": "closed",
          "state_reason": null,
          "title": "Allow fundrawtransaction and walletcreatefundedpsbt to take external inputs",
          "body": "Currently `fundrawtransaction` and `walletcreatefundedpsbt` both do not allow external inputs as the wallet does not have the information necessary to estimate their fees.\r\n\r\nThis PR adds an additional argument to both those RPCs which allows the user to specify solving data. This way, the wallet can use that solving data to estimate the size of those inputs. The solving data can be public keys, scripts, or descriptors.",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            },
            {
              "id": 98279177,
              "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
              "name": "RPC/REST/ZMQ",
              "color": "0052cc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "comments": 19,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17211",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/17211",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/17211.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/17211.patch"
          },
          "closed_at": "2021-10-04T09:08:48Z",
          "created_at": "2019-10-21T21:29:04Z",
          "updated_at": "2022-10-30T19:10:34Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-02-12T05:56:00Z",
      "updated_at": "2020-02-12T05:56:00Z",
      "source": {
        "issue": {
          "id": 495459245,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MzE5MDAzNzcz",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16910",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16910/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16910/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16910/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/16910",
          "number": 16910,
          "state": "closed",
          "state_reason": null,
          "title": "wallet: reduce loading time by using unordered maps",
          "body": "For large wallets with many transactions and keys, inserting and fetching from a `std::map` can have a performance impact. Since we largely do not rely on the sorting properties of `std::map`, we can use `std::unordered_map` instead which is a hash table and insertion and retrieval are constant time. We also use `std::unordered_multimap` for some things that were `std::multimap`.\r\n\r\nThe changed maps are:\r\n* `mapWallet`: Map of all transactions\r\n* `mapTxSpends`: Map of outpoints to the txids of the txs that spent them\r\n*`mapKeyMetadata`: Map of key metadata\r\n*`mapScriptMetadata`: Map of script metadata\r\n*`mapKeys`: Map of private keys\r\n*`mapCryptedKeys`: Map of encrypted private keys\r\n*`mapWatchKeys`: Set of watch only keys.\r\n*`setWatchOnly`: Set of watch only scripts (std::unordered_set, not a map)\r\n\r\nChange `mapWallet` and `mapTxSpends` did require a few other changes and thus they are in their own commits. Additionally, the GUI relied on getting transactions from the wallet in a sorted order which unordered_map does not provide, so the commit \"Change getWalletTxs to return a set instead of a vector\" is needed in order to put all of the txs into a std::set (which is ordered) instead of a vector in order to retain the same behavior.\r\n\r\n`mapTxSpends` also relied on the sorted order to have some quick lookups, but these were changed to just do normal lookups over the same thing. It should be just as fast, or even faster, since std::unordered_map is a hash table.\r\n\r\nThe hash function used for these unordered maps and sets is SipHash, using the SipHash module that we already have. `SaltedTxidHasher` and `SaltedOutPointHasher` were moved from their original locations in utxo set and validation code in order to also be used from the wallet. Additionally `SaltedIDHasher` was added to hash uint160s (i.e. `CKeyID` and `CScriptID`) and `SaltedScriptHasher` was added to hash `CScript`s.\r\n\r\nI did some becnhmarks with a large wallet I created on regtest using [this script](https://gist.github.com/achow101/f24309bba501cc08c9a3a3d55fa6eec6). This wallet is 169 MB in size with 117035 transactions and 103264 keys. It took ~20 secs to load on master, and ~18 secs with this change. So this change reduces wallet loading time by ~10%.",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            },
            {
              "id": 97470796,
              "node_id": "MDU6TGFiZWw5NzQ3MDc5Ng==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/UTXO%20Db%20and%20Indexes",
              "name": "UTXO Db and Indexes",
              "color": "fbca04",
              "default": false
            },
            {
              "id": 164208572,
              "node_id": "MDU6TGFiZWwxNjQyMDg1NzI=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Mempool",
              "name": "Mempool",
              "color": "fef2c0",
              "default": false
            },
            {
              "id": 326918230,
              "node_id": "MDU6TGFiZWwzMjY5MTgyMzA=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Resource%20usage",
              "name": "Resource usage",
              "color": "981023",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 11,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16910",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/16910",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/16910.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/16910.patch"
          },
          "closed_at": "2020-08-10T16:00:01Z",
          "created_at": "2019-09-18T21:16:12Z",
          "updated_at": "2022-02-15T10:46:55Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-02-12T07:57:00Z",
      "updated_at": "2020-02-12T07:57:00Z",
      "source": {
        "issue": {
          "id": 312265928,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MTgwMTM2Mjky",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12911",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12911/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12911/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12911/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/12911",
          "number": 12911,
          "state": "closed",
          "state_reason": null,
          "title": "wallet: Show fee in results for signrawtransaction* for segwit inputs",
          "body": "This adds a \"fee\" field to the resulting JSON for `signrawtransaction*` so a user can double check the fee they're paying before sending a transaction. The field is only shown in cases where the input amounts are all known ⇔ are all segwit inputs.\r\n\r\n```\r\n$ ./bitcoin-cli -regtest signrawtransactionwithwallet 0200000001901c16d5ac11824ca64c9c9dbe925c83fc1af9872bb23bbc9c6cd25419e2f69c0000000000feffffff0210b2d0df0000000017a914d9214ccd777e5cce540d38c3466c2cb5545339c5874031354a0000000017a914bee793caf793996dc9f617a5ad04ec2b87c6f9538700000000\r\n{\r\n  \"hex\": \"0200000001901c16d5ac11824ca64c9c9dbe925c83fc1af9872bb23bbc9c6cd25419e2f69c00000000494830450221008fd0d0cfd16a06f282e720129351f2756f416b916f7a0a3be8d5db0c7db107af022028dafae6ec7d30882efe101c16b5f3893254bf5385664eddadf0d3f6e479381c01feffffff0210b2d0df0000000017a914d9214ccd777e5cce540d38c3466c2cb5545339c5874031354a0000000017a914bee793caf793996dc9f617a5ad04ec2b87c6f9538700000000\",\r\n  \"complete\": true,\r\n  \"fee\": 0.00003760,\r\n  \"feerate\": 0.00020000\r\n}\r\n```\r\n\r\n* [x] Re-write tests.",
          "user": {
            "login": "kallewoof",
            "id": 250224,
            "node_id": "MDQ6VXNlcjI1MDIyNA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/kallewoof",
            "html_url": "https://github.com/kallewoof",
            "followers_url": "https://api.github.com/users/kallewoof/followers",
            "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
            "organizations_url": "https://api.github.com/users/kallewoof/orgs",
            "repos_url": "https://api.github.com/users/kallewoof/repos",
            "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/kallewoof/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 98279177,
              "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
              "name": "RPC/REST/ZMQ",
              "color": "0052cc",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 23,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12911",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/12911",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/12911.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/12911.patch"
          },
          "closed_at": "2020-03-10T01:52:46Z",
          "created_at": "2018-04-08T02:55:01Z",
          "updated_at": "2022-02-15T10:27:59Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3032047989,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzAzMjA0Nzk4OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3032047989",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-02-12T18:59:28Z"
    },
    {
      "event": "removed_from_project",
      "id": 3036155130,
      "node_id": "MDIzOlJlbW92ZWRGcm9tUHJvamVjdEV2ZW50MzAzNjE1NTEzMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3036155130",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-02-13T19:08:56Z",
      "project_card": {
        "id": 32395865,
        "url": "https://api.github.com/projects/columns/cards/32395865",
        "project_id": 481835,
        "project_url": "https://api.github.com/projects/481835",
        "column_name": "Blockers"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-02-13T20:20:45Z",
      "updated_at": "2020-02-13T20:20:45Z",
      "source": {
        "issue": {
          "id": 564928115,
          "node_id": "MDU6SXNzdWU1NjQ5MjgxMTU=",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18142",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18142/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18142/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18142/events",
          "html_url": "https://github.com/bitcoin/bitcoin/issues/18142",
          "number": 18142,
          "state": "closed",
          "state_reason": "completed",
          "title": "Coordinate multi-sig wallet",
          "body": "Multiple people, or even just one person with multiple devices, want to setup a multi-sig wallet. The end result is a [descriptor wallet](https://github.com/bitcoin/bitcoin/pull/16528), perhaps [miniscript enhanced](https://github.com/bitcoin/bitcoin/pull/16800).\r\n\r\nProblem: how do you coordinate this setup? See Electrum thread about the same issue: https://github.com/spesmilo/electrum/issues/5715\r\n\r\nBonus points: it should also work with a protocol like MuSig that requires more than one round of communication.\r\n\r\n## Current situation\r\n\r\nI made a [tutorial and screencast](https://nthkey.com/tutorial) of a setup flow, in this case using two signers: a ColdCard  and an iOs app that I'm working on. It's based on the flow ColdCard uses to setup a multisig between two of their devices. [Specter wallet](https://github.com/cryptoadvance) uses a similar flow and the same file format, last time I checked.\r\n\r\nThe general idea there is for each cosigner to export a (JSON) file with information about their public keys, and for the other signers to import that. Derivation paths are standardised (see also #16895). All participating devices will derive the same addresses; the user just needs to enter the (same) threshold on all devices.\r\n\r\nThe above is pretty easy to implement.\r\n\r\n## Flexible signer policies\r\n\r\nThe above approach requires everyone to contribute a single key. Individual participants can't do fancy stuff like having their own internal multisig setup or some backup key after a timeout. Yet this could be very useful, e.g. imagine a user with two hardware wallets who wants to use an external service provider as the third key. That service provider may have some super fancy setup, but they don't want to ship custom software to the user, let alone merge their special sauce into Bitcoin Core. What if you could use the Green Address service, but with your favourite orange QT wallet?\r\n\r\nA more flexible setup could use miniscript, where each participant provides a policy language snippet they want to use. These are then aggregated with `thresh(M, policy1, policy2, ... policyN)`. The result is then compiled by a coordinator (one of the participants) and shared with the others. Each participant could use a simple public key, or some super convoluted scheme. The cool thing about miniscript if that each participant can verify, without understanding the policy of the others, that they indeed control 1/Nth.\r\n\r\nIIUC the plan is to [combine](https://github.com/bitcoin/bitcoin/pull/16800) the powers of miniscript and output descriptors, and eventually add that to the wallet. Hopefully this allows for putting xpubs and origin info in both the policy language and the miniscript itself.\r\n\r\nThere is no current plan to add the policy language to miniscript compiler to Bitcoin Core, but we can start with a naive concatenation of participant miniscripts. Also AFAIK existing hardware wallets don't support anything other than plain OP_CHECKMULTISIG (`thresh_m(2, xpub1, xpub2, xpub3))` anyway.\r\n\r\nIn other words, we would use future proof syntax like the policy language, but in practice \"compile\" only to trivial, non-optimized, miniscript(s) that match what we can already do with descriptors.\r\n\r\n## Wallet composer file?\r\n\r\nWhat I have in mind is to (wait for someone else to) design a (binary) format, perhaps similar to PSBT, to compose a wallet interactively.\r\n\r\nIt would start with a coordinator. They populate the file with the \"shape\" of the wallet (YAML for illustrative purposes): \r\n\r\n```yaml\r\n- descriptor: null\r\n- policy: thresh(2, participant_1, participant_2, participant_3))\r\n- participant_1:\r\n   - policy: null\r\n- participant_2:\r\n   - policy: null\r\n- participant_3:\r\n   - policy: null\r\n```\r\n\r\nThen the first participant, probably the coordinator, fills in their details. They can also list their (advanced) capabilities, e.g. if they're able to decompile miniscript or only understand very basic policies.\r\n\r\n```yaml\r\n- descriptor: null\r\n- policy: thresh(2, participant_1, participant_2, participant_3))\r\n- participant_1:\r\n   - policy: c:pk([00000000]/m/48h/0h/0h/2h/xpub_1/{0,1}/*)\r\n   - can_decompile_miniscript: false\r\n- participant_2:\r\n   - policy: null\r\n- participant_3:\r\n   - policy: null\r\n```\r\n\r\nThe file is then passed to participants 2 and 3. Participant 3 will have all the info it needs to construct a final descriptor (set), and it can prompt the user to \"commit\" to that wallet:\r\n\r\n```yaml\r\n- descriptor: multi(2, [00000000]/m/48h/0h/0h/2h/xpub_1/{0,1}/*, ......)\r\n- policy: ...\r\netc...\r\n```\r\n\r\n(`{0,1}` is a fake descriptor syntax; for now you need a separate receive and change descriptor)\r\n\r\nEach participant needs to \"commit\" to the wallet, in the sense of storing it in their memory. This lets them display receive addresses, and it lets them check the change address before signing a transaction.\r\n\r\nIt then passes it to the other participants. If the devices all have screens, the user can now compare the first receive address as a sanity check.\r\n\r\nBitcoin Core should be able to import this a watch-only descriptor wallet (or maybe it has one of the keys).\r\n\r\nIf any of the devices isn't smart / powerful enough to figure out the descriptor, then it needs to go back to the coordinator first. Conversely you could start with a round where each participant announces their capabilities (support for lock times, if they can decompile miniscript and understand their role in the top policy, taproot support, resource limits, etc). A coordinator can then propose a top level policy based on that.\r\n\r\nAdditional fields can be added e.g. to include nonces for a musig pubkey generation ritual. Also additional fields could contain friendly names for the participants.\r\n\r\nIdeally the whole thing is small enough to copy-paste or put in a QR code (e.g. bech32-ish encoded).",
          "user": {
            "login": "Sjors",
            "id": 10217,
            "node_id": "MDQ6VXNlcjEwMjE3",
            "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Sjors",
            "html_url": "https://github.com/Sjors",
            "followers_url": "https://api.github.com/users/Sjors/followers",
            "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
            "organizations_url": "https://api.github.com/users/Sjors/orgs",
            "repos_url": "https://api.github.com/users/Sjors/repos",
            "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/Sjors/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 64583,
              "node_id": "MDU6TGFiZWw2NDU4Mw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Feature",
              "name": "Feature",
              "color": "7cf575",
              "default": false
            },
            {
              "id": 64584,
              "node_id": "MDU6TGFiZWw2NDU4NA==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Brainstorming",
              "name": "Brainstorming",
              "color": "ebd775",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 41,
          "closed_at": "2022-09-06T13:28:17Z",
          "created_at": "2020-02-13T20:20:45Z",
          "updated_at": "2022-09-06T19:28:46Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3037119511,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzAzNzExOTUxMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3037119511",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-02-14T01:23:17Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-02-14T08:14:56Z",
      "updated_at": "2020-02-14T08:14:56Z",
      "source": {
        "issue": {
          "id": 559359094,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MzcwNTQyNTU1",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18064",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18064/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18064/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18064/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/18064",
          "number": 18064,
          "state": "closed",
          "state_reason": null,
          "title": "gui: Drop WalletModel dependency to RecentRequestsTableModel",
          "body": "This PR moves the `RecentRequestsTableModel` instancing to where it's needed which in turn breaks the circular dependency between `WalletModel` and `RecentRequestsTableModel`.",
          "user": {
            "login": "promag",
            "id": 3534524,
            "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/promag",
            "html_url": "https://github.com/promag",
            "followers_url": "https://api.github.com/users/promag/followers",
            "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
            "organizations_url": "https://api.github.com/users/promag/orgs",
            "repos_url": "https://api.github.com/users/promag/repos",
            "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/promag/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135946,
              "node_id": "MDU6TGFiZWwxMzU5NDY=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/GUI",
              "name": "GUI",
              "color": "02d7e1",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 9,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18064",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/18064",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/18064.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/18064.patch"
          },
          "closed_at": "2020-04-13T09:31:55Z",
          "created_at": "2020-02-03T21:58:05Z",
          "updated_at": "2022-02-15T10:42:38Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-02-14T08:34:19Z",
      "updated_at": "2020-02-14T08:34:19Z",
      "source": {
        "issue": {
          "id": 551555200,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MzY0MjU2MDYy",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17953",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17953/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17953/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17953/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/17953",
          "number": 17953,
          "state": "closed",
          "state_reason": null,
          "title": "refactor: Abstract boost::variant out",
          "body": "Hi,\r\nThis introduces a level of abstractions for `boost::variant` such that when we switch to C++17 we can drop in `std::variant` instead and everything should work modulo the visitors.\r\n\r\nThe reason I went for a class and not a typedef/using like with `Optional` is because I want to add the `get` function so \"users\" won't need to still include `boost/variant/get.hpp` and because I wanted to make it more explicit when `get` is throwing and when not (by splitting to `get` and `get_if` like stl does).\r\n\r\n~I also replaced the generic `boost/variant.hpp` with `boost/variant/get.hpp` and `boost/variant/variant.hpp` which are just 2 out of the 7 headers in `boost/variant.hpp`(https://www.boost.org/doc/libs/1_71_0/boost/variant.hpp)~ (Had to remove this since it broke a build, not sure if it's because a specific boost version or a clang version https://travis-ci.org/bitcoin/bitcoin/jobs/638552502)\r\n\r\n",
          "user": {
            "login": "elichai",
            "id": 2167860,
            "node_id": "MDQ6VXNlcjIxNjc4NjA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/elichai",
            "html_url": "https://github.com/elichai",
            "followers_url": "https://api.github.com/users/elichai/followers",
            "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
            "organizations_url": "https://api.github.com/users/elichai/orgs",
            "repos_url": "https://api.github.com/users/elichai/repos",
            "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/elichai/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 10,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17953",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/17953",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/17953.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/17953.patch"
          },
          "closed_at": "2020-05-14T06:46:14Z",
          "created_at": "2020-01-17T18:01:51Z",
          "updated_at": "2022-02-15T11:03:32Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-02-14T08:54:18Z",
      "updated_at": "2020-02-14T08:54:18Z",
      "source": {
        "issue": {
          "id": 542999223,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MzU3MzM1OTU5",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17809",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17809/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17809/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17809/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/17809",
          "number": 17809,
          "state": "closed",
          "state_reason": null,
          "title": "rpc: Auto-format RPCResult",
          "body": "This enforces most syntax rules of the RPCResult at compile time (or some at run time during unit and functional tests)\r\n\r\nApart from normalizing the syntax, by separating stylistic formatting from the structure, we could in theory directly generate the html for e.g. https://bitcoincore.org/en/doc/0.19.0/rpc/wallet/importmulti/",
          "user": {
            "login": "MarcoFalke",
            "id": 6399679,
            "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/MarcoFalke",
            "html_url": "https://github.com/MarcoFalke",
            "followers_url": "https://api.github.com/users/MarcoFalke/followers",
            "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
            "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
            "repos_url": "https://api.github.com/users/MarcoFalke/repos",
            "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 148216,
              "node_id": "MDU6TGFiZWwxNDgyMTY=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Docs",
              "name": "Docs",
              "color": "02d7e1",
              "default": false
            },
            {
              "id": 98279177,
              "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
              "name": "RPC/REST/ZMQ",
              "color": "0052cc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 12,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17809",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/17809",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/17809.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/17809.patch"
          },
          "closed_at": "2020-03-04T13:18:30Z",
          "created_at": "2019-12-27T21:43:38Z",
          "updated_at": "2022-02-15T10:58:15Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3039748812,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzAzOTc0ODgxMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3039748812",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-02-14T18:42:41Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3040000700,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzA0MDAwMDcwMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3040000700",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-02-14T20:15:37Z"
    },
    {
      "event": "commented",
      "id": 586456127,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU4NjQ1NjEyNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/586456127",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-02-14T20:16:39Z",
      "updated_at": "2020-02-14T20:16:39Z",
      "author_association": "MEMBER",
      "body": "I've removed the requirement for `range` in `importdescriptors`. It will give a warning and use the default keypool range.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-586456127",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16528"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-02-17T03:53:09Z",
      "updated_at": "2020-02-17T03:53:09Z",
      "source": {
        "issue": {
          "id": 565980229,
          "node_id": "MDExOlB1bGxSZXF1ZXN0Mzc1ODgwMjEw",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18163",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18163/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18163/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18163/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/18163",
          "number": 18163,
          "state": "closed",
          "state_reason": null,
          "title": "descriptors: Use xpub at last hardened step if possible",
          "body": "When a descriptor contains a private key and has hardened derivation steps, derive the xpub at the last hardened step and convert the derivation into origin info. So the result is that a `BIP32PubkeyProvider` containing a `xprv` with hardened derivation steps and ending with unhardened derivation becomes a `OriginPubkeyProvider` with those hardened derivation steps as the origin info and a new `BIP32PubkeyProvider` containing the `xpub` and the unhardened derivation steps.\r\n\r\nFor example:\r\n`wpkh(xprv..../0'/0'/*)` becomes `wpkh([d34db33f/0'/0']xpub.../*)`\r\n\r\nIf the descriptor has only hardened steps, it is not modified.\r\n\r\nThis change allows descriptor wallets to derive from such descriptors without needing to be unlocked.",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 1482182044,
              "node_id": "MDU6TGFiZWwxNDgyMTgyMDQ0",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Descriptors",
              "name": "Descriptors",
              "description": "",
              "color": "e9f76c",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 11,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18163",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/18163",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/18163.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/18163.patch"
          },
          "closed_at": "2020-02-26T17:37:07Z",
          "created_at": "2020-02-16T22:16:54Z",
          "updated_at": "2022-02-15T10:28:59Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-02-17T07:04:40Z",
      "updated_at": "2020-02-17T07:04:40Z",
      "source": {
        "issue": {
          "id": 521121143,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MzM5NTYzNjgy",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17443",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17443/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17443/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17443/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/17443",
          "number": 17443,
          "state": "closed",
          "state_reason": null,
          "title": "Drop checkFinalTx and use Median Time Past to check finality of wallet transactions",
          "body": "Replace `Chain::checkFinalTx` by `CheckFinalWalletTx` by caching best block median time past which is following BIP113 rule than time-locked transactions have nLockTime set to less than the median time of the previous block they're contained in.\r\n\r\nFix misuage of CheckFinalTx, which was called with default flags\r\nargument by implementation of Chain::checkFinal, triggering\r\nfinality evaluation based on GetAdjustedTime instead of consensus\r\nand standard rules of BIP 113.\r\n\r\nI think it should have been set at same time than d1c3762, to align wallet checks on the mempool ones.",
          "user": {
            "login": "ariard",
            "id": 23310655,
            "node_id": "MDQ6VXNlcjIzMzEwNjU1",
            "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ariard",
            "html_url": "https://github.com/ariard",
            "followers_url": "https://api.github.com/users/ariard/followers",
            "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
            "organizations_url": "https://api.github.com/users/ariard/orgs",
            "repos_url": "https://api.github.com/users/ariard/repos",
            "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/ariard/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "comments": 15,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17443",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/17443",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/17443.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/17443.patch"
          },
          "closed_at": "2022-03-21T13:22:33Z",
          "created_at": "2019-11-11T18:37:52Z",
          "updated_at": "2023-04-03T14:41:31Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-02-17T12:18:43Z",
      "updated_at": "2020-02-17T12:18:43Z",
      "source": {
        "issue": {
          "id": 565959611,
          "node_id": "MDExOlB1bGxSZXF1ZXN0Mzc1ODY1MTc2",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18162",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18162/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18162/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18162/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/18162",
          "number": 18162,
          "state": "closed",
          "state_reason": null,
          "title": "util: Avoid potential uninitialized read in FormatISO8601DateTime(int64_t) by checking gmtime_s/gmtime_r return value",
          "body": "Avoid potential uninitialized read in `FormatISO8601DateTime(int64_t)` by checking `gmtime_s`/`gmtime_r` return value.\r\n\r\nBefore this patch `FormatISO8601DateTime(67768036191676800)` resulted in:\r\n\r\n```\r\n==5930== Conditional jump or move depends on uninitialised value(s)\r\n==5930==    at 0x4F44C0A: std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_int<long>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, long) const (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.25)\r\n==5930==    by 0x4F511A4: std::ostream& std::ostream::_M_insert<long>(long) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.25)\r\n==5930==    by 0x4037C3: void tinyformat::formatValue<int>(std::ostream&, char const*, char const*, int, int const&) (tinyformat.h:358)\r\n==5930==    by 0x403725: void tinyformat::detail::FormatArg::formatImpl<int>(std::ostream&, char const*, char const*, int, void const*) (tinyformat.h:543)\r\n==5930==    by 0x402E02: tinyformat::detail::FormatArg::format(std::ostream&, char const*, char const*, int) const (tinyformat.h:528)\r\n==5930==    by 0x401B16: tinyformat::detail::formatImpl(std::ostream&, char const*, tinyformat::detail::FormatArg const*, int) (tinyformat.h:907)\r\n==5930==    by 0x4017AE: tinyformat::vformat(std::ostream&, char const*, tinyformat::FormatList const&) (tinyformat.h:1054)\r\n==5930==    by 0x401765: void tinyformat::format<int, int, int, int, int, int>(std::ostream&, char const*, int const&, int const&, int const&, int const&, int const&, int const&) (tinyformat.h:1064)\r\n==5930==    by 0x401656: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > tinyformat::format<int, int, int, int, int, int>(char const*, int const&, int const&, int const&, int const&, int const&, int const&) (tinyformat.h:1073)\r\n==5930==    by 0x4014CC: FormatISO8601DateTime[abi:cxx11](long) (…)\r\n```\r\n\r\nThe same goes for other very large positive and negative arguments.\r\n\r\nFix by simply checking the `gmtime_s`/`gmtime_r` return value :)",
          "user": {
            "login": "practicalswift",
            "id": 7826565,
            "node_id": "MDQ6VXNlcjc4MjY1NjU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/practicalswift",
            "html_url": "https://github.com/practicalswift",
            "followers_url": "https://api.github.com/users/practicalswift/followers",
            "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
            "organizations_url": "https://api.github.com/users/practicalswift/orgs",
            "repos_url": "https://api.github.com/users/practicalswift/repos",
            "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/practicalswift/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 241832923,
              "node_id": "MDU6TGFiZWwyNDE4MzI5MjM=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Utils/log/libs",
              "name": "Utils/log/libs",
              "description": "",
              "color": "5319e7",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 9,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18162",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/18162",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/18162.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/18162.patch"
          },
          "closed_at": "2020-02-25T02:06:57Z",
          "created_at": "2020-02-16T19:55:09Z",
          "updated_at": "2022-08-18T18:35:22Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "referenced",
      "id": 3045780320,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMwNDU3ODAzMjA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3045780320",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "c71c4483284bf1fe73cad71eb55d0089e7f1d50c",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/c71c4483284bf1fe73cad71eb55d0089e7f1d50c",
      "created_at": "2020-02-18T05:54:09Z"
    },
    {
      "event": "reviewed",
      "id": 361155493,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYxMTU1NDkz",
      "url": null,
      "actor": null,
      "commit_id": "91d4efc84283743ef26e58526269731909286777",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#pullrequestreview-361155493",
      "submitted_at": "2020-02-19T14:30:01Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3053888074,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzA1Mzg4ODA3NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3053888074",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-02-20T00:10:15Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "ysangkok",
        "id": 284023,
        "node_id": "MDQ6VXNlcjI4NDAyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/284023?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ysangkok",
        "html_url": "https://github.com/ysangkok",
        "followers_url": "https://api.github.com/users/ysangkok/followers",
        "following_url": "https://api.github.com/users/ysangkok/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ysangkok/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ysangkok/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ysangkok/subscriptions",
        "organizations_url": "https://api.github.com/users/ysangkok/orgs",
        "repos_url": "https://api.github.com/users/ysangkok/repos",
        "events_url": "https://api.github.com/users/ysangkok/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ysangkok/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-02-21T16:13:59Z",
      "updated_at": "2020-02-21T16:13:59Z",
      "source": {
        "issue": {
          "id": 430074362,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MjY4MDYxMzYz",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15764",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15764/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15764/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15764/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/15764",
          "number": 15764,
          "state": "closed",
          "state_reason": null,
          "title": "Native descriptor wallets",
          "body": "Introducing the wallet of the glorious future: native descriptor wallets. With native descriptor wallet, addresses are generated from descriptors. Instead of generating keys and deriving addresses from keys, addresses come from the scriptPubKeys produced by a descriptor.\r\n\r\nDescriptor wallets will now store only keys, keymetadata, and descriptors. Keys are derived from descriptors but those keys are also stored in order to make signing work faster and be less complicated. In order to allow choosing different address types, 6 descriptors are needed for normal use. There is a pair of primary and change descriptors for each of the 3 address types. With the default keypool size of 1000, each descriptor has 1000 keys and scriptPubKeys pregenerated. This has a side effect of making wallets very large since 6000 keys are generated by default, instead of the current 2000. This can probably be improved in the future as we probably don't need so many addresses for each address type.\r\n\r\nDescriptors can also be imported with a new `importdescriptor` RPC.\r\n\r\nNative descriptor wallets also redefines how ismine and watchonly work. Ismine is changing to the simpler model of \"does this scriptPubKey exist in this wallet\". To facilitate this, all of the scriptPubKeys for all of the descriptors are computed on wallet loading. A scriptPubKey is considered `ISMINE_SPENDABLE` if it appears in the set of scriptPubKeys for the wallet. Because of this ismine change, watchonly is also redefined. A wallet can no longer contains watchonly things and non-watchonly things. Instead wallets are either watchonly (by having private keys disabled) or not. There is no mixing of watchonly and non-watchonly in a wallet. Some tests that relied on watchonly behavior had to be removed (i.e. part of `feature_segwit.py`)\r\n\r\nAdditionally several RPCs related to importing and dumping data from a wallet are incompatible with descriptor wallets. These RPCs (`addmultisigaddress`, `importaddress`, `importpubkey`, `importmulti`, `importprivkey`, and `dumpprivkey`) are disabled for normal use.\r\n\r\n***\r\n\r\nThis PR is built on #15741 for batched writing to the wallet so `TopUpKeyPool` works faster, and on #15761 for upgrading wallets with a RPC.",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135946,
              "node_id": "MDU6TGFiZWwxMzU5NDY=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/GUI",
              "name": "GUI",
              "color": "02d7e1",
              "default": false
            },
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            },
            {
              "id": 62963516,
              "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
              "name": "Tests",
              "color": "d4c5f9",
              "default": false
            },
            {
              "id": 98279177,
              "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
              "name": "RPC/REST/ZMQ",
              "color": "0052cc",
              "default": false
            },
            {
              "id": 241832923,
              "node_id": "MDU6TGFiZWwyNDE4MzI5MjM=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Utils/log/libs",
              "name": "Utils/log/libs",
              "description": "",
              "color": "5319e7",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 22,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15764",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/15764",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/15764.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/15764.patch"
          },
          "closed_at": "2019-06-18T21:41:54Z",
          "created_at": "2019-04-06T20:38:03Z",
          "updated_at": "2022-02-15T10:41:32Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3061648452,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzA2MTY0ODQ1Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3061648452",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-02-21T19:28:40Z"
    },
    {
      "event": "commented",
      "id": 590362243,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU5MDM2MjI0Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/590362243",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-02-24T14:57:32Z",
      "updated_at": "2020-02-24T17:41:00Z",
      "author_association": "MEMBER",
      "body": "We should make `IsChange` check for derivation path for descriptor wallets and not the ad-hoc \"is this address in my address book\", which we have to support for legacy wallets forever.\r\n\r\nedit: nevermind, not derivation path, just whether or not it's in `m_internal_spk_mans` or not",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-590362243",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16528"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-02-24T20:52:02Z",
      "updated_at": "2020-02-24T20:52:02Z",
      "source": {
        "issue": {
          "id": 570071539,
          "node_id": "MDExOlB1bGxSZXF1ZXN0Mzc5MTY2MTg1",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18202",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18202/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18202/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18202/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/18202",
          "number": 18202,
          "state": "closed",
          "state_reason": null,
          "title": "refactor: consolidate sendmany and sendtoaddress code ",
          "body": "I consolidated code between these two RPC calls, since `sendtoaddress` is essentially `sendmany` with 1 destination.\r\n\r\nUnless I overlooked something, the only behaviour change is that some `sendtoaddress` error codes changed from `-4` to `-6`. The release note mentions this.\r\n\r\nSalvaged from #18201.",
          "user": {
            "login": "Sjors",
            "id": 10217,
            "node_id": "MDQ6VXNlcjEwMjE3",
            "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Sjors",
            "html_url": "https://github.com/Sjors",
            "followers_url": "https://api.github.com/users/Sjors/followers",
            "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
            "organizations_url": "https://api.github.com/users/Sjors/orgs",
            "repos_url": "https://api.github.com/users/Sjors/repos",
            "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/Sjors/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            },
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            },
            {
              "id": 98279177,
              "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
              "name": "RPC/REST/ZMQ",
              "color": "0052cc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 12,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18202",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/18202",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/18202.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/18202.patch"
          },
          "closed_at": "2020-07-12T02:44:04Z",
          "created_at": "2020-02-24T19:13:09Z",
          "updated_at": "2022-02-15T10:33:43Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-02-25T04:46:22Z",
      "updated_at": "2020-02-25T04:46:22Z",
      "source": {
        "issue": {
          "id": 467428350,
          "node_id": "MDExOlB1bGxSZXF1ZXN0Mjk3MDgyNjkz",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16378",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16378/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16378/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16378/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/16378",
          "number": 16378,
          "state": "closed",
          "state_reason": null,
          "title": "The ultimate send RPC",
          "body": "`walletcreatefundedpsbt` has some interesting features that `sendtoaddress` and `sendmany` don't have:\r\n* manual coin selection\r\n* outputting a PSBT (it was controversial to add this, see #18201)\r\n* create a transaction without adding to wallet (which leads to broadcasting, unless `-walletbroadcast=0`)\r\n\r\nAt the same time `walletcreatefundedpsbt` can't broadcast a transaction, which is inconvenient for simple use cases.\r\n\r\nThis PR introduces a new `send` RPC method which creates a PSBT, signs it if possible and adds it to the wallet by default. If it can't sign all inputs, it outputs a PSBT. If `add_to_wallet` is set to `false` it will return the transaction in both PSBT and hex format.\r\n\r\nBecause it uses a PSBT internally, it will much easier to add hardware wallet support to this method (see #16546).\r\n\r\nFor `bitcoin-cli` users, it tries to keep the simplest use case easy to use:\r\n\r\n```sh\r\nbitcoin-cli -regtest send '{\"ADDRESS\": 0.1}' 1 sat/b\r\n```\r\n\r\nThis paves the way for deprecating `sendtoaddress` and `sendmany` though there's no rush. The only missing feature compared to these older methods is adding labels to a destination address.\r\n\r\nDepends on:\r\n- [x] #16377 (`[rpc] don't automatically append inputs in walletcreatefundedpsbt`)\r\n- [x] #11413 (`[wallet] [rpc] sendtoaddress/sendmany: Add explicit feerate option`)\r\n- [x] #18244 (`[rpc] have lockUnspents also lock manually selected coins`)",
          "user": {
            "login": "Sjors",
            "id": 10217,
            "node_id": "MDQ6VXNlcjEwMjE3",
            "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Sjors",
            "html_url": "https://github.com/Sjors",
            "followers_url": "https://api.github.com/users/Sjors/followers",
            "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
            "organizations_url": "https://api.github.com/users/Sjors/orgs",
            "repos_url": "https://api.github.com/users/Sjors/repos",
            "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/Sjors/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            },
            {
              "id": 98279177,
              "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
              "name": "RPC/REST/ZMQ",
              "color": "0052cc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 13,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/16378",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/16378.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/16378.patch"
          },
          "closed_at": "2020-09-15T02:51:54Z",
          "created_at": "2019-07-12T13:56:59Z",
          "updated_at": "2022-02-15T10:47:39Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "labeled",
      "id": 3069031143,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDMwNjkwMzExNDM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3069031143",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-02-25T11:19:19Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3070523369,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzA3MDUyMzM2OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3070523369",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-02-25T18:37:40Z"
    },
    {
      "event": "unlabeled",
      "id": 3070726835,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MzA3MDcyNjgzNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3070726835",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-02-25T19:38:03Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3070730114,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzA3MDczMDExNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3070730114",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-02-25T19:38:54Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-02-26T04:55:37Z",
      "updated_at": "2020-02-26T04:55:37Z",
      "source": {
        "issue": {
          "id": 217385623,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MTEyODQ2NDMx",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10102",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10102/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10102/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10102/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/10102",
          "number": 10102,
          "state": "open",
          "state_reason": null,
          "title": "Multiprocess bitcoin",
          "body": "This PR is part of the [process separation project](https://github.com/bitcoin/bitcoin/projects/10).\r\n\r\n---\r\n\r\nThis PR adds an `--enable-multiprocess` configure option which builds new `bitcoin-node`, `bitcoin-wallet`, and `bitcoin-gui` executables with relevant functionality isolated into different processes. See [doc/design/multiprocess.md](https://github.com/ryanofsky/bitcoin/tree/pr/ipc/doc/design/multiprocess.md) for usage details and future plans.\r\n\r\nThe change is implemented by adding a new [`Init`](https://github.com/ryanofsky/bitcoin/blob/pr/ipc/src/interfaces/init.h) interface that spawns new wallet and node subprocesses that can be controlled over a [socketpair](http://man7.org/linux/man-pages/man2/socketpair.2.html) by calling [`Node`](https://github.com/ryanofsky/bitcoin/blob/pr/ipc/src/interfaces/node.h), [`Wallet`](https://github.com/ryanofsky/bitcoin/blob/pr/ipc/src/interfaces/wallet.h), and [`ChainClient`](https://github.com/ryanofsky/bitcoin/blob/pr/ipc/src/interfaces/chain.h) methods. When running with split processes, you can see the IPC messages going back and forth in `-debug=1` output. Followup PR's #19460 and #19461 add `-ipcbind` and `-ipcconnect` options that allow more flexibility in how processes are connected.\r\n\r\nThe IPC protocol used is Cap'n Proto, but this could be swapped out for another protocol. Cap'n Proto types and libraries are only accessed in the [src/ipc/capnp/](https://github.com/ryanofsky/bitcoin/tree/pr/ipc/src/ipc/capnp) directory, and not in any public headers or other parts of bitcoin code.\r\n\r\n---\r\n\r\nSlides from a presentation describing this change are available on [google drive](https://docs.google.com/presentation/d/1AeJ-7gD-dItUgs5yH-HoEzLvXaEWe_2ZiGUUxYIXcws/edit). Demo code used in the presentation was from an older version this PR (tag [ipc.21](https://github.com/ryanofsky/bitcoin/releases/tag/pr%2Fipc.21), [commits](https://github.com/ryanofsky/bitcoin/compare/master...pr/ipc.21)).\r\n",
          "user": {
            "login": "ryanofsky",
            "id": 7133040,
            "node_id": "MDQ6VXNlcjcxMzMwNDA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ryanofsky",
            "html_url": "https://github.com/ryanofsky",
            "followers_url": "https://api.github.com/users/ryanofsky/followers",
            "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
            "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
            "repos_url": "https://api.github.com/users/ryanofsky/repos",
            "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135946,
              "node_id": "MDU6TGFiZWwxMzU5NDY=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/GUI",
              "name": "GUI",
              "color": "02d7e1",
              "default": false
            },
            {
              "id": 98279177,
              "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
              "name": "RPC/REST/ZMQ",
              "color": "0052cc",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 78,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10102",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/10102",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/10102.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/10102.patch"
          },
          "created_at": "2017-03-27T21:48:26Z",
          "updated_at": "2023-06-21T07:40:44Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3076082929,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzA3NjA4MjkyOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3076082929",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-02-27T01:46:44Z"
    },
    {
      "event": "commented",
      "id": 591735331,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU5MTczNTMzMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/591735331",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-02-27T01:46:57Z",
      "updated_at": "2020-02-27T01:46:57Z",
      "author_association": "MEMBER",
      "body": "I've added #18204 into this now",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-591735331",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16528"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3076123984,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzA3NjEyMzk4NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3076123984",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-02-27T02:11:37Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-02-27T09:15:39Z",
      "updated_at": "2020-02-27T09:15:39Z",
      "source": {
        "issue": {
          "id": 472990954,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MzAxMjQ1Njc1",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16463",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16463/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16463/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16463/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/16463",
          "number": 16463,
          "state": "closed",
          "state_reason": null,
          "title": "[BIP 174] Implement serialization support for GLOBAL_XPUB field.",
          "body": "https://github.com/bitcoin/bips/pull/784 added a new global field `GLOBAL_XPUB` to BIP 174. This PR adds support for (de)serializing this field and displaying it in `decodepsbt`.",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 64583,
              "node_id": "MDU6TGFiZWw2NDU4Mw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Feature",
              "name": "Feature",
              "color": "7cf575",
              "default": false
            },
            {
              "id": 62963516,
              "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
              "name": "Tests",
              "color": "d4c5f9",
              "default": false
            },
            {
              "id": 98279177,
              "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
              "name": "RPC/REST/ZMQ",
              "color": "0052cc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 2,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16463",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/16463",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/16463.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/16463.patch"
          },
          "closed_at": "2021-01-25T22:07:24Z",
          "created_at": "2019-07-25T17:45:37Z",
          "updated_at": "2022-08-16T17:03:15Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-02-27T09:25:16Z",
      "updated_at": "2020-02-27T09:25:16Z",
      "source": {
        "issue": {
          "id": 449607312,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MjgzMTAwNzk0",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16116",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16116/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16116/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16116/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/16116",
          "number": 16116,
          "state": "closed",
          "state_reason": null,
          "title": "Avoid unnecessary signing provider copies on descriptor expansion",
          "body": "Currently descriptor expansion unnecessarily copies the signing provider\r\ndata once per expansion. Avoid this work by making it a member of the\r\nclass and doing the merge in-place.\r\n\r\nCurrent master https://github.com/Empact/bitcoin/commit/604606d4e5e5a12976fd752e6e6c80c0e9ad6aac  \r\n`ExpandDescriptor, 5, 6, 1.22676, 0.0392286, 0.0428134, 0.0403623`\r\nThis PR https://github.com/bitcoin/bitcoin/pull/16116/commits/7748ecf90126cc388cd35af101f8aebef719a98b  \r\n`ExpandDescriptor, 5, 6, 1.02993, 0.0333122, 0.0353901, 0.0343695`\r\n\r\nNote a ranged descriptor is expanded 1000x by default, and the descriptor string I used is from the test suite. https://github.com/bitcoin/bitcoin/blob/c7cfd20a77ce57d200b3b9e5e0dfb0d63818abdc/src/test/descriptor_tests.cpp#L210\r\n",
          "user": {
            "login": "Empact",
            "id": 5470,
            "node_id": "MDQ6VXNlcjU0NzA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Empact",
            "html_url": "https://github.com/Empact",
            "followers_url": "https://api.github.com/users/Empact/followers",
            "following_url": "https://api.github.com/users/Empact/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/Empact/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/Empact/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
            "organizations_url": "https://api.github.com/users/Empact/orgs",
            "repos_url": "https://api.github.com/users/Empact/repos",
            "events_url": "https://api.github.com/users/Empact/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/Empact/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 10,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16116",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/16116",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/16116.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/16116.patch"
          },
          "closed_at": "2022-01-05T08:42:52Z",
          "created_at": "2019-05-29T05:39:26Z",
          "updated_at": "2022-08-05T09:37:52Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 591904329,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU5MTkwNDMyOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/591904329",
      "actor": {
        "login": "hugohn",
        "id": 4769925,
        "node_id": "MDQ6VXNlcjQ3Njk5MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4769925?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hugohn",
        "html_url": "https://github.com/hugohn",
        "followers_url": "https://api.github.com/users/hugohn/followers",
        "following_url": "https://api.github.com/users/hugohn/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hugohn/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hugohn/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hugohn/subscriptions",
        "organizations_url": "https://api.github.com/users/hugohn/orgs",
        "repos_url": "https://api.github.com/users/hugohn/repos",
        "events_url": "https://api.github.com/users/hugohn/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hugohn/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-02-27T10:46:37Z",
      "updated_at": "2020-02-27T10:48:07Z",
      "author_association": "CONTRIBUTOR",
      "body": "Not exactly related but I got a crash due to an assert() failing when I create a native descriptor wallet with `avoid_reuse=true` (5th parameter)\r\n\r\n`./bitcoin-cli -testnet createwallet test_wallet true true \"\" true true`\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/652ffb49f1fdd9be804990e9e350fd8f647ceb81/src/wallet/wallet.cpp#L754",
      "user": {
        "login": "hugohn",
        "id": 4769925,
        "node_id": "MDQ6VXNlcjQ3Njk5MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4769925?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hugohn",
        "html_url": "https://github.com/hugohn",
        "followers_url": "https://api.github.com/users/hugohn/followers",
        "following_url": "https://api.github.com/users/hugohn/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hugohn/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hugohn/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hugohn/subscriptions",
        "organizations_url": "https://api.github.com/users/hugohn/orgs",
        "repos_url": "https://api.github.com/users/hugohn/repos",
        "events_url": "https://api.github.com/users/hugohn/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hugohn/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-591904329",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16528"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-02-27T18:26:48Z",
      "updated_at": "2020-02-27T18:26:48Z",
      "source": {
        "issue": {
          "id": 570228643,
          "node_id": "MDExOlB1bGxSZXF1ZXN0Mzc5Mjk4ODQ5",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18204",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18204/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18204/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18204/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/18204",
          "number": 18204,
          "state": "closed",
          "state_reason": null,
          "title": "descriptors: improve descriptor cache and cache xpubs",
          "body": "Improves the descriptor cache by changing it from a `std::vector<unsigned char>` to a newly introduced `DescriptorCache` class. Instead of serializing pubkeys and whatever else we would want to cache in a way that may not be backwards compatible, we instead create a `DescriptorCache` object and populate it. This object contains only an xpub cache. Since the only `PubkeyProvider` that used the cache is the `BIP32PubkeyProvider` we just have it store the xpubs instead of the pubkeys. This allows us to have both the parent xpub and the child xpubs in the same container. The map is keyed by `KeyOriginInfo`.\r\n\r\nSine we are caching `CExtPubKey`s in `DescriptorCache`, `BIP32PubKeyProviders` can use the cached parent xpubs to derive the children if unhardened derivation is used in the last step. This also means that we can still derive the keys for a `BIP32PubkeyProvider` that has hardened derivation steps. When combined with descriptor wallets, this should allow us to be able to import a descriptor with an `xprv` and hardened steps and still be able to derive from it. In that sense, this is an alternative to #18163\r\n\r\nTo test that this works, the tests have been updated to do an additional `Expand` at the `i + 1` position. This expansion is not cached. We then do an `ExpandFromCache` at `i + 1` and use the cache that was produced by the expansion at `i`. This way, we won't have the child xpubs for `i + 1` but we will have the parent xpubs. So this checks whether the parent xpubs are being stored and can be used to derive the child keys. Descriptors that have a hardened last step are skipped for this part of the test because that will always require private keys.",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 1482182044,
              "node_id": "MDU6TGFiZWwxNDgyMTgyMDQ0",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Descriptors",
              "name": "Descriptors",
              "description": "",
              "color": "e9f76c",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 16,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18204",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/18204",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/18204.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/18204.patch"
          },
          "closed_at": "2020-03-13T21:45:30Z",
          "created_at": "2020-02-25T00:20:41Z",
          "updated_at": "2022-02-15T10:42:06Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3079200877,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzA3OTIwMDg3Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3079200877",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-02-27T19:33:39Z"
    },
    {
      "event": "commented",
      "id": 592141441,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU5MjE0MTQ0MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/592141441",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-02-27T19:40:25Z",
      "updated_at": "2020-02-27T19:40:25Z",
      "author_association": "MEMBER",
      "body": "> Not exactly related but I got a crash due to an assert() failing when I create a native descriptor wallet with `avoid_reuse=true` (5th parameter)\r\n> \r\n> `./bitcoin-cli -testnet createwallet test_wallet true true \"\" true true`\r\n\r\nI can't replicate this.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-592141441",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16528"
    },
    {
      "event": "commented",
      "id": 592304787,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU5MjMwNDc4Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/592304787",
      "actor": {
        "login": "hugohn",
        "id": 4769925,
        "node_id": "MDQ6VXNlcjQ3Njk5MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4769925?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hugohn",
        "html_url": "https://github.com/hugohn",
        "followers_url": "https://api.github.com/users/hugohn/followers",
        "following_url": "https://api.github.com/users/hugohn/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hugohn/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hugohn/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hugohn/subscriptions",
        "organizations_url": "https://api.github.com/users/hugohn/orgs",
        "repos_url": "https://api.github.com/users/hugohn/repos",
        "events_url": "https://api.github.com/users/hugohn/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hugohn/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-02-28T04:14:33Z",
      "updated_at": "2020-02-28T04:14:33Z",
      "author_association": "CONTRIBUTOR",
      "body": "hmm I synced to tip and now couldn't reproduce either...\r\n\r\nFWIW, it crashed after restarting `bitcoind` with `-testnet -wallet=test_wallet`, not when I created the wallet. Will report if reproducible.",
      "user": {
        "login": "hugohn",
        "id": 4769925,
        "node_id": "MDQ6VXNlcjQ3Njk5MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4769925?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hugohn",
        "html_url": "https://github.com/hugohn",
        "followers_url": "https://api.github.com/users/hugohn/followers",
        "following_url": "https://api.github.com/users/hugohn/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hugohn/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hugohn/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hugohn/subscriptions",
        "organizations_url": "https://api.github.com/users/hugohn/orgs",
        "repos_url": "https://api.github.com/users/hugohn/repos",
        "events_url": "https://api.github.com/users/hugohn/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hugohn/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-592304787",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16528"
    },
    {
      "event": "reviewed",
      "id": 366359661,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2MzU5NjYx",
      "url": null,
      "actor": null,
      "commit_id": "1b4fd1424f6160195d6d28072d8793b666db007d",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#pullrequestreview-366359661",
      "submitted_at": "2020-02-28T12:22:40Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
    },
    {
      "event": "reviewed",
      "id": 366362548,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2MzYyNTQ4",
      "url": null,
      "actor": null,
      "commit_id": "1b4fd1424f6160195d6d28072d8793b666db007d",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#pullrequestreview-366362548",
      "submitted_at": "2020-02-28T12:28:25Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3083442638,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzA4MzQ0MjYzOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3083442638",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-02-28T20:34:55Z"
    },
    {
      "event": "reviewed",
      "id": 366593454,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2NTkzNDU0",
      "url": null,
      "actor": null,
      "commit_id": "4d7998695f6aca2d19e3b78834b7079b50e1f8a1",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Reviewed up to 51012bb297c589bbca59024acb64a59cf9283918 \"Add IsSingleType to Descriptors\"\r\n\r\nwill keep going later",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#pullrequestreview-366593454",
      "submitted_at": "2020-02-28T20:47:46Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3083946317,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzA4Mzk0NjMxNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3083946317",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-02-29T00:20:41Z"
    },
    {
      "event": "reviewed",
      "id": 366787922,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2Nzg3OTIy",
      "url": null,
      "actor": null,
      "commit_id": "8f282ebaf0ddd120f5fa0f9d0a1b2b46f7ac5b40",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Some comments while I was looking at this during #18204 review.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#pullrequestreview-366787922",
      "submitted_at": "2020-02-29T10:19:06Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-02T11:04:49Z",
      "updated_at": "2020-03-02T11:04:49Z",
      "source": {
        "issue": {
          "id": 573783676,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MzgyMjI4NTQy",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18239",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18239/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18239/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18239/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/18239",
          "number": 18239,
          "state": "closed",
          "state_reason": null,
          "title": "wip: gui: Refactor to drop client and wallet models setters",
          "body": "This change makes the code simpler as the client and wallet models are set in the constructor and are constant.\r\n\r\nBased on #18064, only bbb33d6.\r\n\r\nThis does't change behavior.",
          "user": {
            "login": "promag",
            "id": 3534524,
            "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/promag",
            "html_url": "https://github.com/promag",
            "followers_url": "https://api.github.com/users/promag/followers",
            "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
            "organizations_url": "https://api.github.com/users/promag/orgs",
            "repos_url": "https://api.github.com/users/promag/repos",
            "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/promag/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135946,
              "node_id": "MDU6TGFiZWwxMzU5NDY=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/GUI",
              "name": "GUI",
              "color": "02d7e1",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 4,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18239",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/18239",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/18239.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/18239.patch"
          },
          "closed_at": "2020-07-09T12:30:41Z",
          "created_at": "2020-03-02T07:56:45Z",
          "updated_at": "2022-02-15T10:33:18Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3089341908,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzA4OTM0MTkwOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3089341908",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-02T19:31:03Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3089352500,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzA4OTM1MjUwMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3089352500",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-02T19:34:08Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3093279327,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzA5MzI3OTMyNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3093279327",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-03T18:06:11Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3098513022,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzA5ODUxMzAyMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3098513022",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-04T21:01:42Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-06T16:45:41Z",
      "updated_at": "2020-03-06T16:45:41Z",
      "source": {
        "issue": {
          "id": 576970804,
          "node_id": "MDExOlB1bGxSZXF1ZXN0Mzg0ODUzMTEy",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18278",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18278/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18278/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18278/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/18278",
          "number": 18278,
          "state": "closed",
          "state_reason": null,
          "title": "interfaces: Describe and follow some code conventions",
          "body": "This PR is part of the [process separation project](https://github.com/bitcoin/bitcoin/projects/10).\r\n\r\nThis PR doesn't change behavior at all, it just cleans up code in [`src/interfaces`](https://github.com/bitcoin/bitcoin/tree/master/src/interfaces) to simplify #10102, and [documents](https://github.com/ryanofsky/bitcoin/blob/pr/ipc-conv/doc/developer-notes.md#internal-interface-guidelines) coding conventions there better",
          "user": {
            "login": "ryanofsky",
            "id": 7133040,
            "node_id": "MDQ6VXNlcjcxMzMwNDA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ryanofsky",
            "html_url": "https://github.com/ryanofsky",
            "followers_url": "https://api.github.com/users/ryanofsky/followers",
            "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
            "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
            "repos_url": "https://api.github.com/users/ryanofsky/repos",
            "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 8,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18278",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/18278",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/18278.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/18278.patch"
          },
          "closed_at": "2020-03-23T20:39:17Z",
          "created_at": "2020-03-06T14:34:39Z",
          "updated_at": "2022-02-15T10:42:06Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3108526873,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzEwODUyNjg3Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3108526873",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-08T16:17:09Z"
    },
    {
      "event": "labeled",
      "id": 3112449095,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDMxMTI0NDkwOTU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3112449095",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-09T21:20:48Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3112863131,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzExMjg2MzEzMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3112863131",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-10T00:45:09Z"
    },
    {
      "event": "unlabeled",
      "id": 3112933219,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MzExMjkzMzIxOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3112933219",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-10T01:29:36Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3128759913,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzEyODc1OTkxMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3128759913",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-14T00:55:36Z"
    },
    {
      "event": "commented",
      "id": 599723688,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU5OTcyMzY4OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/599723688",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-16T19:37:01Z",
      "updated_at": "2020-03-16T19:37:01Z",
      "author_association": "MEMBER",
      "body": "Rebased following #18204 merge, so this is ready for review.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-599723688",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16528"
    },
    {
      "event": "added_to_project",
      "id": 3146901314,
      "node_id": "MDE5OkFkZGVkVG9Qcm9qZWN0RXZlbnQzMTQ2OTAxMzE0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3146901314",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-19T19:06:16Z",
      "project_card": {
        "id": 34855732,
        "url": "https://api.github.com/projects/columns/cards/34855732",
        "project_id": 481835,
        "project_url": "https://api.github.com/projects/481835",
        "column_name": "Blockers"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-21T07:38:21Z",
      "updated_at": "2020-03-21T07:38:21Z",
      "source": {
        "issue": {
          "id": 553203106,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MzY1NTc1Nzcx",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17977",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17977/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17977/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17977/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/17977",
          "number": 17977,
          "state": "closed",
          "state_reason": null,
          "title": "Implement BIP 340-342 validation (Schnorr/taproot/tapscript)",
          "body": "This is an implementation of the Schnorr/taproot consensus rules proposed by BIPs [340](https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki), [341](https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki), and [342](https://github.com/bitcoin/bips/blob/master/bip-0342.mediawiki).\r\n\r\nIt consists of:\r\n* Addition of Schnorr signatures and 32-byte pubkey support to libsecp256k1 subtree (https://github.com/bitcoin-core/secp256k1/pull/558 PR 558), following BIP [340](https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki).\r\n* The taproot validation specified in BIP [341](https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki).\r\n* Script validation under taproot (aka tapscript), specified in BIP [342](https://github.com/bitcoin/bips/blob/master/bip-0342.mediawiki).\r\n* Addition of signing logic for Schnorr/Taproot to the Python test framework, and tests for the above.\r\n\r\nThis does not include any wallet support.\r\n\r\nRelated PRs and PRs that were extracted from this and submitted separately: #18002 #16902 #18388 #18401 #18422 #18675 #19228\r\n\r\nDependencies:\r\n* [x] Merge BIP340 support in libsecp256k1\r\n* [x] Update libsecp256k1 subtree in master (#19944)\r\n\r\nTODO:\r\n* [x] Tests for pre-activation (verify that consensus behavior doesn't change until flag is enabled)\r\n* [ ] Extract small & fast BIP341/BIP342 test vectors with good coverage out of the programmatic & slow feature_taproot.py test\r\n",
          "user": {
            "login": "sipa",
            "id": 548488,
            "node_id": "MDQ6VXNlcjU0ODQ4OA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sipa",
            "html_url": "https://github.com/sipa",
            "followers_url": "https://api.github.com/users/sipa/followers",
            "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
            "organizations_url": "https://api.github.com/users/sipa/orgs",
            "repos_url": "https://api.github.com/users/sipa/repos",
            "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/sipa/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 192202000,
              "node_id": "MDU6TGFiZWwxOTIyMDIwMDA=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Consensus",
              "name": "Consensus",
              "color": "009800",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 59,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17977",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/17977",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/17977.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/17977.patch"
          },
          "closed_at": "2020-09-14T04:28:01Z",
          "created_at": "2020-01-21T23:14:40Z",
          "updated_at": "2022-02-15T11:00:41Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "labeled",
      "id": 3157294996,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDMxNTcyOTQ5OTY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3157294996",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-23T22:03:18Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3161567780,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzE2MTU2Nzc4MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3161567780",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-24T21:07:14Z"
    },
    {
      "event": "unlabeled",
      "id": 3161856774,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MzE2MTg1Njc3NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3161856774",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-24T22:56:40Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 378766395,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4NzY2Mzk1",
      "url": null,
      "actor": null,
      "commit_id": "10d744735666fb6e9e1dbe44a2112434daebfee9",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "reviewed to \"Implement GetNewDestination for DescriptorScriptPubKeyMan\" then lost focus",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#pullrequestreview-378766395",
      "submitted_at": "2020-03-25T15:33:20Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-25T16:04:52Z",
      "updated_at": "2020-03-25T16:04:52Z",
      "source": {
        "issue": {
          "id": 581753448,
          "node_id": "MDExOlB1bGxSZXF1ZXN0Mzg4NzY5NzUw",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18354",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18354/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18354/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18354/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/18354",
          "number": 18354,
          "state": "closed",
          "state_reason": null,
          "title": "Use shared pointers only in validation interface",
          "body": "This pull request fully replace #18279 it fix 3 issues with wallet\r\n1. Crash in wallet destructor while it tries to delete mutex while it's hold by notification thread\r\n2. Crash in notification disconnect due to notification callback is set to nullptr before unregister interface is done\r\n3. Ensure unregister interface has no more background callbacks before returning to notification disconnect",
          "user": {
            "login": "bvbfan",
            "id": 8323581,
            "node_id": "MDQ6VXNlcjgzMjM1ODE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8323581?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bvbfan",
            "html_url": "https://github.com/bvbfan",
            "followers_url": "https://api.github.com/users/bvbfan/followers",
            "following_url": "https://api.github.com/users/bvbfan/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/bvbfan/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/bvbfan/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/bvbfan/subscriptions",
            "organizations_url": "https://api.github.com/users/bvbfan/orgs",
            "repos_url": "https://api.github.com/users/bvbfan/repos",
            "events_url": "https://api.github.com/users/bvbfan/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/bvbfan/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 64585,
              "node_id": "MDU6TGFiZWw2NDU4NQ==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Bug",
              "name": "Bug",
              "color": "FBBAAB",
              "default": false
            },
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            },
            {
              "id": 118379652,
              "node_id": "MDU6TGFiZWwxMTgzNzk2NTI=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Validation",
              "name": "Validation",
              "color": "6060aa",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": true,
          "comments": 20,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18354",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/18354",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/18354.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/18354.patch"
          },
          "closed_at": "2022-02-22T10:56:18Z",
          "created_at": "2020-03-15T17:27:23Z",
          "updated_at": "2023-02-22T10:14:10Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3165657543,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzE2NTY1NzU0Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3165657543",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-25T20:31:15Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3165708082,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzE2NTcwODA4Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3165708082",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-25T20:46:23Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3165713365,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzE2NTcxMzM2NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3165713365",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-25T20:47:59Z"
    },
    {
      "event": "commented",
      "id": 604475820,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYwNDQ3NTgyMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/604475820",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-26T14:52:37Z",
      "updated_at": "2020-03-26T14:52:37Z",
      "author_association": "MEMBER",
      "body": "all changes until `\"Implement GetNewDestination for DescriptorScriptPubKeyMan\"` 0b4b742dd57b6413617368b013350b5397711f9f look correct.",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-604475820",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16528"
    },
    {
      "event": "reviewed",
      "id": 382152176,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyMTUyMTc2",
      "url": null,
      "actor": null,
      "commit_id": "8da5fdc34ae68fe3ae81b9fc889f4f2a8718fc6e",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "reviewed through:\r\n```\r\ncommit d40617bf4c69d10bf9714ab1f653fc5b740dbf63\r\nAuthor: Andrew Chow <achow101-github@achow101.com>\r\nDate:   Wed Aug 14 14:25:53 2019 -0400\r\n\r\n    Add IsLegacy to CWallet so that the GUI knows whether to show watchonly\r\n```",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#pullrequestreview-382152176",
      "submitted_at": "2020-03-26T17:16:12Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3169435552,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzE2OTQzNTU1Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3169435552",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-26T17:59:45Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3169468345,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzE2OTQ2ODM0NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3169468345",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-26T18:08:47Z"
    },
    {
      "event": "commented",
      "id": 604624259,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYwNDYyNDI1OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/604624259",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-26T19:00:42Z",
      "updated_at": "2020-03-26T19:00:42Z",
      "author_association": "MEMBER",
      "body": "changes through `Add IsLegacy to CWallet so that the GUI knows whether to show watchonly` https://github.com/bitcoin/bitcoin/pull/16528/commits/1687d1a1681fc1f6cfaa23a48ea99aa0b07acb4a look correct",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-604624259",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16528"
    },
    {
      "event": "reviewed",
      "id": 382872546,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyODcyNTQ2",
      "url": null,
      "actor": null,
      "commit_id": "7d1c6bbeb057c18da62201267efc2b675f142da3",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Finished review through:\r\n\r\n```\r\nommit a03a8cbd1f42636834263135e904900cc808d346 (HEAD -> wallet-of-the-glor)\r\nAuthor: Andrew Chow <achow101-github@achow101.com>\r\nDate:   Thu Feb 13 21:06:29 2020 -0500\r\n\r\n    Return error when no ScriptPubKeyMan is available for specified type\r\n    \r\n    When a CWallet doesn't have a ScriptPubKeyMan for the requested type\r\n    in GetNewDestination, give a meaningful error. Also handle this in\r\n    Qt which did not do anything with errors.\r\n```\r\n\r\nLooking pretty good so far. My least confident part of review is the encrypted wallet portions, so I don't vouch for those parts.\r\n\r\nI still think we should fix `IsChange()` detection by recording the internal-ness directly in each spkm wallet record to allow for better detection of change on wallet restoration without the user just having to `getnewaddress` a bunch before it sees on-chain funds. Seems really confusing for a user to import an existing HWW-based BIP44/49/84 descriptor, sync, then have all of its funds in \"change\".\r\n\r\nthat-and-comments-below-otherwise-utACK https://github.com/bitcoin/bitcoin/pull/16528/commits/a03a8cbd1f42636834263135e904900cc808d346",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#pullrequestreview-382872546",
      "submitted_at": "2020-03-27T15:16:35Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
    },
    {
      "event": "reviewed",
      "id": 382966268,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyOTY2MjY4",
      "url": null,
      "actor": null,
      "commit_id": "a03a8cbd1f42636834263135e904900cc808d346",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#pullrequestreview-382966268",
      "submitted_at": "2020-03-27T15:32:19Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
    },
    {
      "event": "reviewed",
      "id": 382979745,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyOTc5NzQ1",
      "url": null,
      "actor": null,
      "commit_id": "a03a8cbd1f42636834263135e904900cc808d346",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#pullrequestreview-382979745",
      "submitted_at": "2020-03-27T15:47:38Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
    },
    {
      "event": "reviewed",
      "id": 382982687,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyOTgyNjg3",
      "url": null,
      "actor": null,
      "commit_id": "a03a8cbd1f42636834263135e904900cc808d346",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#pullrequestreview-382982687",
      "submitted_at": "2020-03-27T15:50:48Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
    },
    {
      "event": "reviewed",
      "id": 383071782,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzMDcxNzgy",
      "url": null,
      "actor": null,
      "commit_id": "f0a15b8aa1f2cc5c91162b747170faa452944d9b",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Did a light to moderate review for a03a8cbd1f42636834263135e904900cc808d346, it's looking pretty good. Lots of commits, but they're mostly short and focussed. I like how we get lots of tests for free with `--descriptors` in `test_runner.py`, but I'd like to see more direct coverage of wallet (de)serialisation code.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#pullrequestreview-383071782",
      "submitted_at": "2020-03-27T19:44:44Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3174111405,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzE3NDExMTQwNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3174111405",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-27T21:11:43Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3174357457,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzE3NDM1NzQ1Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3174357457",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-27T23:11:24Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-28T03:57:03Z",
      "updated_at": "2020-03-28T03:57:03Z",
      "source": {
        "issue": {
          "id": 497358266,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MzIwNTA1OTA4",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16946",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16946/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16946/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16946/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/16946",
          "number": 16946,
          "state": "closed",
          "state_reason": null,
          "title": "wallet: include a checksum of encrypted private keys",
          "body": "Adds a checksum to the encrypted key record in the wallet database so that encrypted keys can be checked for corruption on wallet loading, in the same way that unencrypted keys are. This allows for us to skip the full decryption of keys upon the first unlocking of the wallet in that session as any key corruption will have already been detected. The checksum is just the double SHA256 of the encrypted key and it is appended to the record after the encrypted key itself.\r\n\r\nThis is backwards compatible as old wallets will be able to read the encrypted key and ignore that there is more data in the stream. Additionally, old wallets will be upgraded upon their first unlocking (so that key decryption is checked before we commit to a checksum of the encrypted key) and a wallet flag set indicating that. The presence of the wallet flag lets us skip the full decryption as if `fDecryptionThoroughlyChecked` were true.\r\n\r\nThis does mean that the first time an old wallet is unlocked in a new version will take much longer, but subsequent unlocks will be instantaneous. Furthermore, corruption will be detected upon loading rather than on trying to send so wallet corruption will be detected sooner.\r\n\r\nFixes #12423",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 64583,
              "node_id": "MDU6TGFiZWw2NDU4Mw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Feature",
              "name": "Feature",
              "color": "7cf575",
              "default": false
            },
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "milestone": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/45",
            "html_url": "https://github.com/bitcoin/bitcoin/milestone/45",
            "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/45/labels",
            "id": 4914019,
            "node_id": "MDk6TWlsZXN0b25lNDkxNDAxOQ==",
            "number": 45,
            "state": "closed",
            "title": "0.21.0",
            "description": "",
            "creator": {
              "login": "laanwj",
              "id": 126646,
              "node_id": "MDQ6VXNlcjEyNjY0Ng==",
              "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/laanwj",
              "html_url": "https://github.com/laanwj",
              "followers_url": "https://api.github.com/users/laanwj/followers",
              "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
              "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
              "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
              "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
              "organizations_url": "https://api.github.com/users/laanwj/orgs",
              "repos_url": "https://api.github.com/users/laanwj/repos",
              "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
              "received_events_url": "https://api.github.com/users/laanwj/received_events",
              "type": "User",
              "site_admin": false
            },
            "open_issues": 0,
            "closed_issues": 132,
            "created_at": "2019-12-09T08:39:58Z",
            "updated_at": "2021-01-15T19:50:53Z",
            "closed_at": "2021-01-15T19:50:53Z"
          },
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 11,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16946",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/16946",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/16946.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/16946.patch"
          },
          "closed_at": "2020-05-21T18:51:54Z",
          "created_at": "2019-09-23T22:24:10Z",
          "updated_at": "2022-02-15T10:31:19Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "reviewed",
      "id": 383332087,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzMzMyMDg3",
      "url": null,
      "actor": null,
      "commit_id": "d034592cf87d5ac8cea02c0edd4d50134be88c87",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "ACK changes, modulo assert change",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#pullrequestreview-383332087",
      "submitted_at": "2020-03-28T17:27:57Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
    },
    {
      "event": "commented",
      "id": 605492768,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYwNTQ5Mjc2OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/605492768",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-28T17:29:04Z",
      "updated_at": "2020-03-28T17:29:04Z",
      "author_association": "MEMBER",
      "body": "looks like unit test is failing sometimes:\r\n```\r\nwallet/test/wallet_tests.cpp(651): error: in \"wallet_tests/wallet_descriptor_test\": exception \"std::ios_base::failure\" raised as expected: validation on the raised exception through predicate \"malformed_descriptor\"\r\n```",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-605492768",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16528"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3175329286,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzE3NTMyOTI4Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3175329286",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-28T21:04:44Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3175331359,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzE3NTMzMTM1OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3175331359",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-28T21:07:50Z"
    },
    {
      "event": "commented",
      "id": 605520140,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYwNTUyMDE0MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/605520140",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-28T21:12:12Z",
      "updated_at": "2020-03-28T21:12:12Z",
      "author_association": "MEMBER",
      "body": "> looks like unit test is failing sometimes:\r\n> \r\n> ```\r\n> wallet/test/wallet_tests.cpp(651): error: in \"wallet_tests/wallet_descriptor_test\": exception \"std::ios_base::failure\" raised as expected: validation on the raised exception through predicate \"malformed_descriptor\"\r\n> ```\r\n\r\nNot seeing this fail at anytime.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-605520140",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16528"
    },
    {
      "event": "commented",
      "id": 605536631,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYwNTUzNjYzMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/605536631",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-29T00:09:36Z",
      "updated_at": "2020-03-29T00:09:36Z",
      "author_association": "MEMBER",
      "body": "It was from Travis run at the time of my review.\n\nOn Sat, Mar 28, 2020, 5:12 PM Andrew Chow <notifications@github.com> wrote:\n\n> looks like unit test is failing sometimes:\n>\n> wallet/test/wallet_tests.cpp(651): error: in \"wallet_tests/wallet_descriptor_test\": exception \"std::ios_base::failure\" raised as expected: validation on the raised exception through predicate \"malformed_descriptor\"\n>\n> Not seeing this fail at anytime.\n>\n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-605520140>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/ABMAFUZF5UVTJSWLGQKWUKLRJZR3ZANCNFSM4IIZW2TA>\n> .\n>\n",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-605536631",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16528"
    },
    {
      "event": "commented",
      "id": 606000696,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYwNjAwMDY5Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/606000696",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-30T13:31:40Z",
      "updated_at": "2020-03-30T13:31:40Z",
      "author_association": "MEMBER",
      "body": "re-ACK https://github.com/bitcoin/bitcoin/pull/16528/commits/54be087eebdfefb70c018f67476f2160ae8ca29b\r\n\r\nonly assert cleanup and additional suggested tests",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-606000696",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16528"
    },
    {
      "event": "commented",
      "id": 606001866,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYwNjAwMTg2Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/606001866",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-30T13:33:47Z",
      "updated_at": "2020-03-30T13:39:25Z",
      "author_association": "MEMBER",
      "body": "~~direct link to unit test failure: https://travis-ci.org/github/bitcoin/bitcoin/jobs/668186151#L4252~~\r\n\r\nhmm, that's an expected error, I'm not sure why Travis is complaining actually",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-606001866",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16528"
    },
    {
      "event": "commented",
      "id": 606025615,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYwNjAyNTYxNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/606025615",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-30T14:15:02Z",
      "updated_at": "2020-03-30T15:41:47Z",
      "author_association": "MEMBER",
      "body": "I restarted job 4 and 13 as well as AppVeyor; they all fail again.\r\n\r\nI get the same error on macOS:\r\n```\r\nwallet/test/wallet_tests.cpp:651: error: in \"wallet_tests/wallet_descriptor_test\": exception \"std::ios_base::failure\" raised as expected: validation on the raised exception through predicate \"malformed_descriptor\"\r\n```",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-606025615",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16528"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3179550916,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzE3OTU1MDkxNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3179550916",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-30T16:49:49Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3179562355,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzE3OTU2MjM1NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3179562355",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-30T16:52:31Z"
    },
    {
      "event": "commented",
      "id": 606116845,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYwNjExNjg0NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/606116845",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-30T16:53:02Z",
      "updated_at": "2020-03-30T16:53:02Z",
      "author_association": "MEMBER",
      "body": "Rebased this on master to see if that fixes the travis failures. Also added a change to that test to make it less restrictive so hopefully it passes now.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-606116845",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16528"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3179881148,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzE3OTg4MTE0OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3179881148",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-30T18:18:13Z"
    },
    {
      "event": "reviewed",
      "id": 384635173,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0NjM1MTcz",
      "url": null,
      "actor": null,
      "commit_id": "3f5e0bfc5dc2ea37223c1e5820c66a5ce11d6b81",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "f2c3e36 is getting close\r\n\r\nWhen you create a descriptor wallet with `avoid_reuse` and then call `listunspent`, it calls `IsSpentKey()` which asserts the presence of a legacy SPKM. In fact, it even crashed for me when using `importdescriptors` with bech32 keys from HWI.\r\n\r\nCreating a PSBT in the GUI now crashes (without reuse flag):\r\n\r\n```\r\nAssertion failed: (expanded), function GetSigningProvider, file wallet/scriptpubkeyman.cpp, line 1907.\r\n```\r\n\r\nWhen I create a watch-only wallet, the log shows `External scriptPubKey Manager for output type 0 does not exist`, several times for each combination. Would be nice if that can be avoided.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#pullrequestreview-384635173",
      "submitted_at": "2020-03-31T13:02:29Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
    },
    {
      "event": "commented",
      "id": 606623230,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYwNjYyMzIzMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/606623230",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-31T13:21:42Z",
      "updated_at": "2020-03-31T13:21:42Z",
      "author_association": "MEMBER",
      "body": "> IsSpentKey()\r\n\r\nRight, there is even a TODO for descriptor wallets in the function. It's a good time to get rid of that TODO.",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-606623230",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16528"
    },
    {
      "event": "reviewed",
      "id": 384739739,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0NzM5NzM5",
      "url": null,
      "actor": null,
      "commit_id": "f2c3e36479d6265b60d7d1682c704f9302a7457c",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#pullrequestreview-384739739",
      "submitted_at": "2020-03-31T13:37:11Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3184878213,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzE4NDg3ODIxMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3184878213",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-31T19:41:38Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3184893749,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzE4NDg5Mzc0OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3184893749",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-31T19:45:58Z"
    },
    {
      "event": "commented",
      "id": 606836269,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYwNjgzNjI2OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/606836269",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-31T19:46:23Z",
      "updated_at": "2020-03-31T19:46:23Z",
      "author_association": "MEMBER",
      "body": "Fixed the `IsSpentKey()` issue.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-606836269",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16528"
    },
    {
      "event": "reviewed",
      "id": 385050375,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1MDUwMzc1",
      "url": null,
      "actor": null,
      "commit_id": "3da39d72a8b8919ad57693cad71c993d1e115463",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "reACK https://github.com/bitcoin/bitcoin/pull/16528/commits/a608207a2c343d70a30e4534783200c8a429ab27",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#pullrequestreview-385050375",
      "submitted_at": "2020-03-31T19:48:09Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3184986890,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzE4NDk4Njg5MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3184986890",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-31T20:12:35Z"
    },
    {
      "event": "commented",
      "id": 606878414,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYwNjg3ODQxNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/606878414",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-31T21:12:49Z",
      "updated_at": "2020-03-31T21:12:49Z",
      "author_association": "MEMBER",
      "body": "reACK https://github.com/bitcoin/bitcoin/pull/16528/commits/7ea9f0fb848e3ccc69e05b4c1bad465e73bc1963",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-606878414",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16528"
    },
    {
      "event": "reviewed",
      "id": 385745845,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1NzQ1ODQ1",
      "url": null,
      "actor": null,
      "commit_id": "1dd95d7e91fb31ee97cff2aa0f1ccfd820e78e1e",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "ACK 7ea9f0fb848e3ccc69e05b4c1bad465e73bc1963. Added food for thought about if we should store account level xpubs.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#pullrequestreview-385745845",
      "submitted_at": "2020-04-01T16:44:31Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3189627282,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzE4OTYyNzI4Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3189627282",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-01T20:49:07Z"
    },
    {
      "event": "commented",
      "id": 607482620,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYwNzQ4MjYyMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/607482620",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-01T20:49:35Z",
      "updated_at": "2020-04-01T20:49:35Z",
      "author_association": "MEMBER",
      "body": "Turns out `IsSpentKey` was not fully fixed. I've added an additional check for `HavePrivateKeys` before trying to do `ExpandPrivate`.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-607482620",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16528"
    },
    {
      "event": "commented",
      "id": 607520569,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYwNzUyMDU2OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/607520569",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-01T22:26:22Z",
      "updated_at": "2020-04-01T22:26:22Z",
      "author_association": "MEMBER",
      "body": "So I've just realized that existing multisig workflows are completely non-functional under descriptor wallets. If you make a multisig that includes a key that a descriptor wallet has, it won't be able to sign that multisig. This is because the multisig script does not match any of the scripts produced by the descriptors so none of the `DescriptorScriptPubKeyMan`s return true for `CanProvide` and therefore do not attempt to sign. Furthermore, private keys cannot currently be exported, and we currently require all private keys to be present to import a descriptor with private keys. So you couldn't even create a descriptor containing your private key(s) and import that.\r\n\r\nOne possible solution is to simply have every `ScriptPubKeyMan` sign always, regardless of `CanProvide`. But this runs into the whole key mutation thing we are trying to avoid. It would then be possible to have a key for one address type be able to sign for a different address type for the same key. At least the wallet would not be watching for such a mutation. But I suppose the whole multisig thing is effectively abusing mutating keys like that.\r\n\r\nAny other suggestions?",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-607520569",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16528"
    },
    {
      "event": "commented",
      "id": 607557463,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYwNzU1NzQ2Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/607557463",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-02T00:38:49Z",
      "updated_at": "2020-04-02T00:38:49Z",
      "author_association": "MEMBER",
      "body": "from IRC:\r\n\r\n```\r\n<instagibbs> It seems like a very reasonable use-case to support.\r\n<instagibbs> Core-generated key being in a multisig :)\r\n<achow101> my original thoughts about the multisig stuff would be you have 2 wallets, one generated normally, and another watch only one for the multisig. so you then use psbt and multiwallet\r\n<instagibbs> what's the hold-up on export? feature creep?\r\n<achow101> security questions about unhardened derivation\r\n<instagibbs> oh im overthinking, use-case is supported, *if* you can get the account-level xpub\r\n<instagibbs> i can't recall what your PR supports\r\n<achow101> currently no exports at all whatoever\r\n<instagibbs> ok so I think public descriptor export is a thing we'd want to support\r\nachow101> yeah\r\n<achow101> that'll be next\r\n```",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-607557463",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16528"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3190205166,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzE5MDIwNTE2Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3190205166",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-02T01:11:27Z"
    },
    {
      "event": "commented",
      "id": 607565518,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYwNzU2NTUxOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/607565518",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-02T01:11:43Z",
      "updated_at": "2020-04-02T01:11:43Z",
      "author_association": "MEMBER",
      "body": "I've changed it to try signing with all `ScriptPubKeyMan`s.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-607565518",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16528"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-02T06:16:25Z",
      "updated_at": "2020-04-02T06:16:25Z",
      "source": {
        "issue": {
          "id": 590768140,
          "node_id": "MDExOlB1bGxSZXF1ZXN0Mzk2MDQ5Mjk0",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18479",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18479/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18479/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18479/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/18479",
          "number": 18479,
          "state": "closed",
          "state_reason": null,
          "title": "RPC: Show fee in results for signrawtransaction* for segwit inputs",
          "body": "Rebase of #12911\r\n\r\n> This adds a \"fee\" field to the resulting JSON for `signrawtransaction*` so a user can double check the fee they're paying before sending a transaction. The field is only shown in cases where the input amounts are all known ⇔ are all segwit inputs.\r\n> \r\n> ```\r\n> $ ./bitcoin-cli -regtest signrawtransactionwithwallet 0200000001901c16d5ac11824ca64c9c9dbe925c83fc1af9872bb23bbc9c6cd25419e2f69c0000000000feffffff0210b2d0df0000000017a914d9214ccd777e5cce540d38c3466c2cb5545339c5874031354a0000000017a914bee793caf793996dc9f617a5ad04ec2b87c6f9538700000000\r\n> {\r\n>   \"hex\": \"0200000001901c16d5ac11824ca64c9c9dbe925c83fc1af9872bb23bbc9c6cd25419e2f69c00000000494830450221008fd0d0cfd16a06f282e720129351f2756f416b916f7a0a3be8d5db0c7db107af022028dafae6ec7d30882efe101c16b5f3893254bf5385664eddadf0d3f6e479381c01feffffff0210b2d0df0000000017a914d9214ccd777e5cce540d38c3466c2cb5545339c5874031354a0000000017a914bee793caf793996dc9f617a5ad04ec2b87c6f9538700000000\",\r\n>   \"complete\": true,\r\n>   \"fee\": 0.00003760,\r\n>   \"feerate\": 0.00020000\r\n> }\r\n> ```",
          "user": {
            "login": "luke-jr",
            "id": 1095675,
            "node_id": "MDQ6VXNlcjEwOTU2NzU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/luke-jr",
            "html_url": "https://github.com/luke-jr",
            "followers_url": "https://api.github.com/users/luke-jr/followers",
            "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
            "organizations_url": "https://api.github.com/users/luke-jr/orgs",
            "repos_url": "https://api.github.com/users/luke-jr/repos",
            "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/luke-jr/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 98279177,
              "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
              "name": "RPC/REST/ZMQ",
              "color": "0052cc",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 5,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18479",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/18479",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/18479.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/18479.patch"
          },
          "closed_at": "2021-07-07T00:50:06Z",
          "created_at": "2020-03-31T03:49:51Z",
          "updated_at": "2022-08-16T17:25:08Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 607706100,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYwNzcwNjEwMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/607706100",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-02T08:40:04Z",
      "updated_at": "2020-04-02T08:40:04Z",
      "author_association": "MEMBER",
      "body": "> One possible solution is to simply have every ScriptPubKeyMan sign always, regardless of CanProvide. But this runs into the whole key mutation thing we are trying to avoid. It would then be possible to have a key for one address type be able to sign for a different address type for the same key. At least the wallet would not be watching for such a mutation. But I suppose the whole multisig thing is effectively abusing mutating keys like that.\r\n\r\nI'm not a fan of this. I think a wallet should only sign for scripts that derive from its descriptors. Let's just support exporting account level xpubs for the multisig use case. We can later add a convenience RPC that, given external xpub(s), produces a multisig with itself and imports those descriptors.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-607706100",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16528"
    },
    {
      "event": "commented",
      "id": 607830177,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYwNzgzMDE3Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/607830177",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-02T12:57:58Z",
      "updated_at": "2020-04-02T12:57:58Z",
      "author_association": "MEMBER",
      "body": "@Sjors I think signing eagerly is fine provided it doesn't somehow expand \"is mine\" definition in any way or otherwise include ways to trick the user.",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-607830177",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16528"
    },
    {
      "event": "mentioned",
      "id": 3192074926,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzE5MjA3NDkyNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3192074926",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-02T12:57:58Z"
    },
    {
      "event": "subscribed",
      "id": 3192074930,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMxOTIwNzQ5MzA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3192074930",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-02T12:57:58Z"
    },
    {
      "event": "commented",
      "id": 607840538,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYwNzg0MDUzOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/607840538",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-02T13:16:39Z",
      "updated_at": "2020-04-02T13:16:39Z",
      "author_association": "MEMBER",
      "body": "reACK https://github.com/bitcoin/bitcoin/pull/16528/commits/4fac5c2b382135a86e4c66c05a2abdd912174a50\r\n\r\nthe \"attempt signing with all\" changes actually make the code easier to read as well",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-607840538",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16528"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3194657552,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzE5NDY1NzU1Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3194657552",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-03T03:03:28Z"
    },
    {
      "event": "commented",
      "id": 608207218,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYwODIwNzIxOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/608207218",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-03T03:19:15Z",
      "updated_at": "2020-04-03T04:27:59Z",
      "author_association": "MEMBER",
      "body": "I've made hopefully that last major change to this. I had to fix `FillPSBT` because the earlier change wasn't actually signing multisig PSBTs either. The change for that is that we are also going to hold in memory all of the pubkeys that were produced during descriptor expansion. This is done during `SetCache` and `TopUp` when the descriptor is expanded. `GetSigningProvider` is modified and overloaded to also accept a pubkey. This is so that the descriptor can be expanded at the correct index for a given pubkey, regardless of the scripts that pubkey was attached too.\r\n\r\nThis now allows `FillPSBT` to use the pubkeys given in the the `hd_keypaths` to get a `SigningProvider` with private keys in order to sign the PSBT.\r\n\r\nThe other big change that I made was to the tests. I've changed how the tests are being setup so that the whole thing can be more generic and be slightly easier and cleaner to update additional tests to work with descriptor wallets. I've also enabled `--descriptors` for `wallet_avoidreuse.py`, `rpc_createmultisig.py`, `wallet_hd.py`, and `rpc_psbt.py`. These additional tests should cover the bugs that we have found so far (guess how I've found a couple of them). Additionally, to make these tests work, I've `RPCOverloadWrapper` which wraps the RPC and overloads the `importprivkey`, `importaddress`, `importpubkey`, and `addmultisigaddress` RPCs. This works for both cli and `AuthServiceProxy`. For non-descriptor wallets, we use the actual RPC commands. For descriptor wallets, it turns the RPC arguments into something that works with `importdescriptors`. It's similar to what we did to the `generate` RPC in `test_node.py`.\r\n\r\nI've replaced a few instances of `dumpprivkey` with `ECKey` from `test_framework/key.py` which can generate a private key. So we use this along with a few new functions to convert that into WIF to do some of the things that `dumpprivkey` was being used for.\r\n\r\nTo avoid code churn in test cases themselves, I've modified `setup_nodes` in `test_framework.py` to create the wallets using `createwallet`. So nodes will always start initially with `-nowallet` and have any specific wallets added via `createwallet`. This gives us the ability to create a default wallet that is a descriptor wallet so we don't need to put things to choose/create the correct descriptor wallet throughout the tests. This particular change also fixes a bug(?) in our wallet creation code that wasn't allowing the creation of a default wallet (wallet with the empty string as the name) when a default wallet didn't already exist.\r\n\r\n***\r\n\r\nI'll continue to investigate the remaining tests and trying to get them to work with descriptor wallets. The goal is to get all of them to pass so that descriptor wallets can become the default wallet type. This will help this PR as it will uncover bugs as already done. But I think most of those issues have already been identified.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-608207218",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16528"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3194682768,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzE5NDY4Mjc2OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3194682768",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-03T03:20:00Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3194733247,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzE5NDczMzI0Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3194733247",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-03T03:52:38Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3194786593,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzE5NDc4NjU5Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3194786593",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-03T04:27:02Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3194819835,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzE5NDgxOTgzNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3194819835",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-03T04:46:35Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-03T11:12:46Z",
      "updated_at": "2020-04-03T11:12:46Z",
      "source": {
        "issue": {
          "id": 574131041,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MzgyNTEzMDI4",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18244",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18244/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18244/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18244/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/18244",
          "number": 18244,
          "state": "closed",
          "state_reason": null,
          "title": "rpc: fundrawtransaction and walletcreatefundedpsbt also lock manually selected coins",
          "body": "When using `fundrawtransaction` and `walletcreatefundedpsbt` with `lockUnspents`, it would only lock automatically selected coins, not manually selected coins. That doesn't make much sense to me if the goal is to prevent accidentally double-spending yourself before you broadcast a transaction.\r\n\r\nNote that when  creating a transaction, manually selected coins are automatic \"unlocked\" (or more accurately: the lock is ignored). Earlier versions of this PR introduced an error when a locked coin is manually selected, but this idea was abandoned after some discussion. An application that uses this RPC should either rely on automatic coin selection (with `lockUnspents`) or handle lock concurrency itself with manual coin selection. In particular it needs to make sure to avoid/pause calls with automatic coin selection between calling `lockunspent` and the subsequent spending RPC.    \r\n\r\nSee #7518 for historical background.\r\n",
          "user": {
            "login": "Sjors",
            "id": 10217,
            "node_id": "MDQ6VXNlcjEwMjE3",
            "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Sjors",
            "html_url": "https://github.com/Sjors",
            "followers_url": "https://api.github.com/users/Sjors/followers",
            "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
            "organizations_url": "https://api.github.com/users/Sjors/orgs",
            "repos_url": "https://api.github.com/users/Sjors/repos",
            "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/Sjors/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            },
            {
              "id": 98279177,
              "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
              "name": "RPC/REST/ZMQ",
              "color": "0052cc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 15,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18244",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/18244",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/18244.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/18244.patch"
          },
          "closed_at": "2020-08-31T11:33:07Z",
          "created_at": "2020-03-02T17:31:00Z",
          "updated_at": "2022-02-15T10:47:22Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-03T11:28:53Z",
      "updated_at": "2020-04-03T11:28:53Z",
      "source": {
        "issue": {
          "id": 569014255,
          "node_id": "MDExOlB1bGxSZXF1ZXN0Mzc4MzMxMzY2",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18189",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18189/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18189/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18189/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/18189",
          "number": 18189,
          "state": "closed",
          "state_reason": null,
          "title": "Add error handling to all boost filesystem functions",
          "body": "All boost filesystem functions should be handled using error code to prevent random crashes caused by inaccesible files or directories. Increment in iterator should use separate error code variable because it have to be handled specifically to prevent infinite loop in diving to inaccessible directories.\r\n\r\nTo prevent coding errors in future the lint test is added to check if error code parameters are present.\r\n\r\nPrevious conversation about issue in #18095\r\n",
          "user": {
            "login": "uhliksk",
            "id": 37454226,
            "node_id": "MDQ6VXNlcjM3NDU0MjI2",
            "avatar_url": "https://avatars.githubusercontent.com/u/37454226?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/uhliksk",
            "html_url": "https://github.com/uhliksk",
            "followers_url": "https://api.github.com/users/uhliksk/followers",
            "following_url": "https://api.github.com/users/uhliksk/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/uhliksk/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/uhliksk/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/uhliksk/subscriptions",
            "organizations_url": "https://api.github.com/users/uhliksk/orgs",
            "repos_url": "https://api.github.com/users/uhliksk/repos",
            "events_url": "https://api.github.com/users/uhliksk/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/uhliksk/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            },
            {
              "id": 241832923,
              "node_id": "MDU6TGFiZWwyNDE4MzI5MjM=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Utils/log/libs",
              "name": "Utils/log/libs",
              "description": "",
              "color": "5319e7",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "NONE",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 5,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18189",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/18189",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/18189.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/18189.patch"
          },
          "closed_at": "2020-07-26T05:09:18Z",
          "created_at": "2020-02-21T15:14:03Z",
          "updated_at": "2022-02-15T10:34:08Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 608411217,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYwODQxMTIxNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/608411217",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-03T12:40:55Z",
      "updated_at": "2020-04-03T12:40:55Z",
      "author_association": "MEMBER",
      "body": "Another issue I have with \"blindly\" signing something for which you don't have an exact descriptor, is that change detection doesn't work.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-608411217",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16528"
    },
    {
      "event": "commented",
      "id": 608537544,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYwODUzNzU0NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/608537544",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-03T16:29:08Z",
      "updated_at": "2020-04-03T16:31:02Z",
      "author_association": "MEMBER",
      "body": "> I'm not a fan of this. I think a wallet should only sign for scripts that derive from its descriptors. Let's just support exporting account level xpubs for the multisig use case. We can later add a convenience RPC that, given external xpub(s), produces a multisig with itself and imports those descriptors.\r\n\r\nExporting xpubs doesn't help with signing. The crux of this issue is that we only use the private keys of the `ScriptPubKeyMan` for the particular `scriptPubKey` that is being signed. So even if you imported a multisig descriptor into a wallet that has some private keys for it, we still wouldn't be able to sign because that particular descriptor doesn't have the private keys for signing.\r\n\r\n> Another issue I have with \"blindly\" signing something for which you don't have an exact descriptor, is that change detection doesn't work.\r\n\r\nI don't think change detection matters here. We already don't do change detection when doing signing with the RPCs. Changing how this signing works does not affect IsMine at all. And I don't think this has an effect on hardware wallets either.\r\n\r\n***\r\n\r\nAn alternative solution would be to have a `SigningProvider` at the wallet level which is shared by all `ScriptPubKeyMan`s. But this is a much larger change and becomes way more complicated with deriving keys on the fly from descriptors as we want to do now.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-608537544",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16528"
    },
    {
      "event": "commented",
      "id": 608580172,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYwODU4MDE3Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/608580172",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-03T17:58:24Z",
      "updated_at": "2020-04-03T17:58:24Z",
      "author_association": "MEMBER",
      "body": "I guess it doesn't matter too much.\r\n\r\n>  even if you imported a multisig descriptor into a wallet that has some private keys for it, we still wouldn't be able to sign because that particular descriptor doesn't have the private keys for signing\r\n\r\nThat's a good point. What about signing everything that's `IsMine`? Alternatively, a boolean that opts into this more broad signing behaviour.\r\n\r\n> We already don't do change detection when doing signing with the RPCs.\r\n\r\nTrue, and we don't really know what a user intended when there's multiple outputs. We could add a  `walletanalyzepsbt` feature for that later.\r\n\r\nFor the GUI, I suppose we can add a change address safety feature on top of #18027, when loading a PSBT.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-608580172",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16528"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-05T19:37:23Z",
      "updated_at": "2020-04-05T19:37:23Z",
      "source": {
        "issue": {
          "id": 594528722,
          "node_id": "MDExOlB1bGxSZXF1ZXN0Mzk5MTQ0NzY5",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18531",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18531/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18531/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18531/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/18531",
          "number": 18531,
          "state": "closed",
          "state_reason": null,
          "title": "rpc: remove deprecated CRPCCommand constructor",
          "body": "Remove the CRPCCommand arguments, now that they are asserted to be equal and thus redundant\r\n\r\n### Future work\r\n\r\n> Here or follow up, makes sense to also assert type of returned UniValue?\r\n\r\nSure, but let's not get ahead of ourselves. I am going to submit any further works as follow-ups, including:\r\n\r\n* Removing all python regex linters on the args, now that RPCMan can be used to generate any output, including the cli.cpp table\r\n* Auto-formatting and sanity checking the RPCExamples with RPCMan\r\n* Checking passed-in json in self-check. Removing redundant checks\r\n* Checking returned json against documentation to avoid regressions or false documentation\r\n* Compile the RPC documentation at compile-time to ensure it doesn't change at runtime and is completely static\r\n\r\n### Bugs found\r\n\r\n* The assert identified issue #18607 \r\n* The changes itself fixed bug #19250 ",
          "user": {
            "login": "MarcoFalke",
            "id": 6399679,
            "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/MarcoFalke",
            "html_url": "https://github.com/MarcoFalke",
            "followers_url": "https://api.github.com/users/MarcoFalke/followers",
            "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
            "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
            "repos_url": "https://api.github.com/users/MarcoFalke/repos",
            "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            },
            {
              "id": 98279177,
              "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
              "name": "RPC/REST/ZMQ",
              "color": "0052cc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 9,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18531",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/18531",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/18531.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/18531.patch"
          },
          "closed_at": "2020-11-19T13:20:21Z",
          "created_at": "2020-04-05T15:58:34Z",
          "updated_at": "2022-02-15T10:48:48Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "reviewed",
      "id": 388230497,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4MjMwNDk3",
      "url": null,
      "actor": null,
      "commit_id": "e75d67d237241c094f425a999a38e00b5fbba635",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "tACK https://github.com/bitcoin/bitcoin/pull/16528/commits/e75d67d237241c094f425a999a38e00b5fbba635 the logic changes but I have *not reviewed the latest test changes* and it appears they're failing in some cases. Going to defer diving into those until things seem more stable.\r\n\r\nThe specific logic fixes to support multisig PSBT will also need regression tests.",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#pullrequestreview-388230497",
      "submitted_at": "2020-04-06T13:20:12Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3206202167,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzIwNjIwMjE2Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3206202167",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-06T16:30:02Z"
    },
    {
      "event": "commented",
      "id": 609899991,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYwOTg5OTk5MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/609899991",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-06T16:30:15Z",
      "updated_at": "2020-04-06T16:30:15Z",
      "author_association": "MEMBER",
      "body": "The travis failures should be fixed. I'm not sure what's wrong with appveyor, but it seems to be unrelated.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-609899991",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16528"
    },
    {
      "event": "commented",
      "id": 609901316,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYwOTkwMTMxNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/609901316",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-06T16:32:48Z",
      "updated_at": "2020-04-06T16:32:48Z",
      "author_association": "MEMBER",
      "body": "reACK https://github.com/bitcoin/bitcoin/pull/16528/commits/7fee7cd034b9c38244a6e284bd3c719482b01a46 with comment changes requested. Still need to review tests top to bottom once things settle.",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-609901316",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16528"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3211143197,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzIxMTE0MzE5Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3211143197",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-07T18:40:29Z"
    },
    {
      "event": "commented",
      "id": 610555013,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYxMDU1NTAxMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/610555013",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-07T18:41:26Z",
      "updated_at": "2020-04-07T18:41:26Z",
      "author_association": "MEMBER",
      "body": "Made a few more test framework changes, particularly to have `createwallet` make wallets based on the startup options unless overridden. This avoids having to put `descriptors=self.options.descriptors` in every `createwallet` call. Also changed `wallet_importdescriptors.py` to not rely on `dumpprivkey`.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-610555013",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16528"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3220357121,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzIyMDM1NzEyMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3220357121",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-10T00:03:15Z"
    },
    {
      "event": "commented",
      "id": 611810309,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYxMTgxMDMwOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/611810309",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-10T00:05:27Z",
      "updated_at": "2020-04-10T00:05:27Z",
      "author_association": "MEMBER",
      "body": "I've changed `importdescriptors` to allow importing descriptors that have some but not all private keys. A test has also been added for this. Since this change requires `ExpandPrivate` to expand all the way, The commit that changed `ExpandPrivate` to return a bool has been dropped.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-611810309",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16528"
    },
    {
      "event": "commented",
      "id": 611938384,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYxMTkzODM4NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/611938384",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-10T08:33:21Z",
      "updated_at": "2020-04-10T08:33:21Z",
      "author_association": "CONTRIBUTOR",
      "body": "Writeup at https://gist.github.com/achow101/94d889715afd49181f8efdca1f9faa25 is fantastic. Really helpful to me, and probably others who want to catch up with this. Better than anything else I've read because it focuses more on _why_ than _what_ of the design.\r\n\r\nWould be good to link to from project https://github.com/bitcoin/bitcoin/projects/12 and maybe move to the dev wiki",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-611938384",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16528"
    },
    {
      "event": "commented",
      "id": 612028267,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYxMjAyODI2Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/612028267",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-10T13:28:19Z",
      "updated_at": "2020-04-10T13:28:19Z",
      "author_association": "MEMBER",
      "body": "> I've changed importdescriptors to allow importing descriptors that have some but not all private keys.\r\n\r\nSo this is going to make certain actions strange, due to the various places we use `IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)` to trigger PSBT vs \"sign and send\" type behavior:\r\n\r\n1) bumpfee: Instead of returning a PSBT, it will attempt to sign and send the transaction, and fail\r\n2) QT: Flow I think will let you click \"send\" and whatnot, and it will simply fail to sign the transaction. User won't be able to craft a PSBT from the GUI.\r\n\r\nI think in the ideal case any wallet where the user cannot fully sign would take the current `IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)` style behavior which hands the user a (partially signed)PSBT to sign elsewhere.\r\n\r\n@ryanofsky notes in your document a similar strategy I suggested of allowing the \"I expect to be able to fully sign for this descriptor\"-ness in the descriptor record itself.",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-612028267",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16528"
    },
    {
      "event": "mentioned",
      "id": 3221851354,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzIyMTg1MTM1NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3221851354",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-10T13:28:19Z"
    },
    {
      "event": "subscribed",
      "id": 3221851358,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMyMjE4NTEzNTg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3221851358",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-10T13:28:19Z"
    },
    {
      "event": "commented",
      "id": 612083154,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYxMjA4MzE1NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/612083154",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-10T15:35:18Z",
      "updated_at": "2020-04-10T15:35:18Z",
      "author_association": "CONTRIBUTOR",
      "body": "> So this is going to make certain actions strange, due to the various places we use `IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)` to trigger PSBT vs \"sign and send\" type behavior:\r\n\r\nThis is just an uninformed opinion, but it would seem less surprising to me for the \"Disable Private Keys\" option you see creating a wallet to just be a safeguard against unintentionally generating and importing private keys, and not something signing/psbt code would look at directly.\r\n",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-612083154",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16528"
    },
    {
      "event": "commented",
      "id": 612130632,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYxMjEzMDYzMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/612130632",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-10T17:21:31Z",
      "updated_at": "2020-04-10T17:23:07Z",
      "author_association": "MEMBER",
      "body": "> > I've changed importdescriptors to allow importing descriptors that have some but not all private keys.\r\n> \r\n> So this is going to make certain actions strange, due to the various places we use `IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)` to trigger PSBT vs \"sign and send\" type behavior:\r\n> \r\n>     1. bumpfee: Instead of returning a PSBT, it will attempt to sign and send the transaction, and fail\r\n> \r\n>     2. QT: Flow I think will let you click \"send\" and whatnot, and it will simply fail to sign the transaction. User won't be able to craft a PSBT from the GUI.\r\n> \r\n> \r\n> I think in the ideal case any wallet where the user cannot fully sign would take the current `IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)` style behavior which hands the user a (partially signed)PSBT to sign elsewhere.\r\n\r\nInstead of branching on `IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)`, wouldn't it be better to just always make a PSBT, try to sign it, and if it does fully sign, then return the txid, otherwise return the PSBT? I think that would be more robust.\r\n\r\nDon't existing multisigs have the same problem anyways? If you do `addmultisigaddress` and one of the keys is yours, it wouldn't be able to sign either.\r\n\r\n> @ryanofsky notes in your document a similar strategy I suggested of allowing the \"I expect to be able to fully sign for this descriptor\"-ness in the descriptor record itself.\r\n\r\nThis strategy still results in a mixed wallet which, as mentioned before, has issues and is what I'm trying to avoid. But I'm also not sure how that would help with the issues you mentioned above or if it's actually useful to do that.\r\n\r\n",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-612130632",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16528"
    },
    {
      "event": "mentioned",
      "id": 3222520494,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzIyMjUyMDQ5NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3222520494",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-10T17:21:31Z"
    },
    {
      "event": "subscribed",
      "id": 3222520497,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMyMjI1MjA0OTc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3222520497",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-10T17:21:31Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3222711289,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzIyMjcxMTI4OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3222711289",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-10T18:32:14Z"
    },
    {
      "event": "commented",
      "id": 612160983,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYxMjE2MDk4Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/612160983",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-10T18:35:22Z",
      "updated_at": "2020-04-10T18:35:22Z",
      "author_association": "MEMBER",
      "body": "Since descriptor wallets is still experimental and not the default, I'm find with some of the weird, less supported, use/edge cases not entirely working. These will need to be fixed in the future, but I would like to at least get the basic functionality in. Especially when those cases require more significant concentrated thought, e.g. at a CoreDev event where we can all sit around a whiteboard and talk for a few hours.\r\n\r\nI've pushed a change that will add a warning if not all private keys are provided. It will let users know that there could be unexpected errors by doing such an import. Also, hopefully I fixed travis.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-612160983",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16528"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3222746842,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzIyMjc0Njg0Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3222746842",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-10T18:46:12Z"
    },
    {
      "event": "commented",
      "id": 612186478,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYxMjE4NjQ3OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/612186478",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-10T19:39:08Z",
      "updated_at": "2020-04-10T19:39:08Z",
      "author_association": "MEMBER",
      "body": "On IRC, @sipa points out that we can just use separate RPCs and buttons for bumpfee, PSBT GUI, and whatever else is switching on `WALLET_FLAG_DISABLE_PRIVATE_KEYS` instead of having functions that change their behavior based on that flag.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-612186478",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16528"
    },
    {
      "event": "mentioned",
      "id": 3222882892,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzIyMjg4Mjg5Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3222882892",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-10T19:39:08Z"
    },
    {
      "event": "subscribed",
      "id": 3222882895,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMyMjI4ODI4OTU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3222882895",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-10T19:39:08Z"
    },
    {
      "event": "reviewed",
      "id": 391689544,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxNjg5NTQ0",
      "url": null,
      "actor": null,
      "commit_id": "a7a814fb59e05423611ff96f9494eaed85cc289c",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Code review ACK d42a6edd89a313ee25683226a9aa573087de1223\r\n\r\nMy comments are all in the nit category I also tested earlier builds with some multisig stuff but will redo those as soon as possible since they did not have the most recent changes. Will also review the IRC discussion of the last two days, most of my review effort was done before those took place.",
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#pullrequestreview-391689544",
      "submitted_at": "2020-04-10T23:05:13Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-11T04:19:21Z",
      "updated_at": "2020-04-11T04:19:21Z",
      "source": {
        "issue": {
          "id": 596929197,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NDAxMTM1MjYy",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18570",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18570/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18570/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18570/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/18570",
          "number": 18570,
          "state": "closed",
          "state_reason": null,
          "title": "rpc: return block hash & height in getbalances, gettransaction & getwalletinfo JSONs",
          "body": "This PR expands the JSONs returned from **getbalances**, **gettransaction** and **getwalletinfo** RPCs by adding a new property: **lastprocessedblock** that contains the **hash** and **height** of the block.\r\n\r\n* getbalances\r\n```shell\r\n./src/bitcoin-cli -regtest getbalances\r\n{\r\n  \"mine\": {\r\n    \"trusted\": 14284.37500000,\r\n    \"untrusted_pending\": 0.00000000,\r\n    \"immature\": 254.68750000\r\n  },\r\n  \"lastprocessedblock\": {\r\n   \"hash\": \"5ba7e8b9a9e6aed88b4641257ef13ecaace1211688f5b5fec99cad36e1650e5d\",\r\n   \"height\": 786\r\n  }\r\n}\r\n```\r\n* gettransaction\r\n```shell\r\n./src/bitcoin-cli -regtest gettransaction fa3fd022eaccd003d93a02f31848fc34d81e4e07a9a2e7690e49f92c8c1004cb\r\n [...snip...]\r\n  \"lastprocessedblock\": {\r\n    \"hash\": \"592d87f3f7ff48ddf1ae07dcd0003de9e484c0df00be3b78a9681c84d607e030\",\r\n    \"height\": 796\r\n  }\r\n}\r\n```\r\n* getwalletinfo\r\n```shell\r\n./src/bitcoin-cli -regtest getwalletinfo\r\n{\r\n  \"walletname\": \"\",\r\n  \"walletversion\": 169900,\r\n  \"balance\": 14315.62500000,\r\n  [...snip...]\r\n  \"lastprocessedblock\": {\r\n       \"hash\": \"592d87f3f7ff48ddf1ae07dcd0003de9e484c0df00be3b78a9681c84d607e030\",\r\n       \"height\": 796\r\n    }\r\n}\r\n```\r\n\r\nChanges:\r\n\r\n* Introduced a new wallet function `GetLastBlockHash` to return `m_last_block_processed `\r\n* Introduced helper function `AppendLastProcessedBlock` to insert JSON objects\r\n* Introduced static RPCResult variable `RESULT_LAST_PROCESSED_BLOCK` for JSON reuse\r\n* Added tests in `tests/functional/wallet_balance.py`\r\n* Added release-notes-18570.md\r\n\r\nThe motivation for this PR can be found here https://github.com/bitcoin/bitcoin/issues/18567\r\n\r\nThe idea to make `lastprocessedblock` an object that contains both hash and height is from **vasild**. Originally, only the hash was shown.\r\n\r\nFixes https://github.com/bitcoin/bitcoin/issues/18567",
          "user": {
            "login": "brakmic",
            "id": 56779,
            "node_id": "MDQ6VXNlcjU2Nzc5",
            "avatar_url": "https://avatars.githubusercontent.com/u/56779?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/brakmic",
            "html_url": "https://github.com/brakmic",
            "followers_url": "https://api.github.com/users/brakmic/followers",
            "following_url": "https://api.github.com/users/brakmic/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/brakmic/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/brakmic/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/brakmic/subscriptions",
            "organizations_url": "https://api.github.com/users/brakmic/orgs",
            "repos_url": "https://api.github.com/users/brakmic/repos",
            "events_url": "https://api.github.com/users/brakmic/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/brakmic/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 98279177,
              "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
              "name": "RPC/REST/ZMQ",
              "color": "0052cc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "milestone": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/45",
            "html_url": "https://github.com/bitcoin/bitcoin/milestone/45",
            "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/45/labels",
            "id": 4914019,
            "node_id": "MDk6TWlsZXN0b25lNDkxNDAxOQ==",
            "number": 45,
            "state": "closed",
            "title": "0.21.0",
            "description": "",
            "creator": {
              "login": "laanwj",
              "id": 126646,
              "node_id": "MDQ6VXNlcjEyNjY0Ng==",
              "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/laanwj",
              "html_url": "https://github.com/laanwj",
              "followers_url": "https://api.github.com/users/laanwj/followers",
              "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
              "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
              "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
              "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
              "organizations_url": "https://api.github.com/users/laanwj/orgs",
              "repos_url": "https://api.github.com/users/laanwj/repos",
              "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
              "received_events_url": "https://api.github.com/users/laanwj/received_events",
              "type": "User",
              "site_admin": false
            },
            "open_issues": 0,
            "closed_issues": 132,
            "created_at": "2019-12-09T08:39:58Z",
            "updated_at": "2021-01-15T19:50:53Z",
            "closed_at": "2021-01-15T19:50:53Z"
          },
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 38,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18570",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/18570",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/18570.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/18570.patch"
          },
          "closed_at": "2020-05-10T19:58:02Z",
          "created_at": "2020-04-08T23:49:52Z",
          "updated_at": "2022-09-14T17:24:07Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-11T19:36:46Z",
      "updated_at": "2020-04-11T19:36:46Z",
      "source": {
        "issue": {
          "id": 597467133,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NDAxNTc0NTkz",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18576",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18576/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18576/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18576/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/18576",
          "number": 18576,
          "state": "closed",
          "state_reason": null,
          "title": "test: use unittest for test_framework unit testing",
          "body": "Proposal for unit testing on test_framework functions:\r\n1. Use the python `unittest` library. Don't use test_framework to test itself.\r\n2. Put the tests inside the same file as the functions they are testing.\r\n3. Call the tests from `test_runner.py`. To include more Test Framework tests, add the filename to the list `TEST_FRAMEWORK_MODULES`. Don't add new files or change the list of accepted script prefixes.\r\n\r\nMakes these changes for `bn2vch` (followup to [this comment](https://github.com/bitcoin/bitcoin/pull/18378#pullrequestreview-377271264)).",
          "user": {
            "login": "glozow",
            "id": 25183001,
            "node_id": "MDQ6VXNlcjI1MTgzMDAx",
            "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/glozow",
            "html_url": "https://github.com/glozow",
            "followers_url": "https://api.github.com/users/glozow/followers",
            "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
            "organizations_url": "https://api.github.com/users/glozow/orgs",
            "repos_url": "https://api.github.com/users/glozow/repos",
            "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/glozow/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 62963516,
              "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
              "name": "Tests",
              "color": "d4c5f9",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 8,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18576",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/18576",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/18576.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/18576.patch"
          },
          "closed_at": "2020-04-30T13:32:00Z",
          "created_at": "2020-04-09T18:20:17Z",
          "updated_at": "2022-02-15T11:15:09Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-12T22:08:45Z",
      "updated_at": "2020-04-12T22:08:45Z",
      "source": {
        "issue": {
          "id": 598539958,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NDAyMzc2NzUz",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18608",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18608/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18608/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18608/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/18608",
          "number": 18608,
          "state": "closed",
          "state_reason": null,
          "title": "refactor: Remove CAddressBookData::destdata",
          "body": "This PR is replaced by #27224 (because of a permissions issue it was closed and locked and couldn't be reopened)\r\n\r\n---\r\n\r\n**This is based on #21353.** The non-base commits are:\r\n\r\n- [`7a05b1dee2f` refactor: Remove CAddressBookData::destdata](https://github.com/bitcoin/bitcoin/pull/18608/commits/7a05b1dee2fa68b32bfb19e273fb55a5b3836a3e)\r\n\r\n---\r\n\r\nThis is cleanup that doesn't change external behavior.\r\n\r\n- Removes awkward `StringMap` intermediate representation\r\n- Deals with receive request \"rr\" keys in walletdb.cpp instead of all over qt, wallet, and interfaces code\r\n- Deals with destination \"used\" keys in walletdb.cpp instead of all over wallet code\r\n- Adds test coverage\r\n- Reduces code (+85/-138 lines)\r\n- Reduces memory usage\r\n\r\nThis PR doesn't change externally observable behavior. Internally, only change in behavior is that EraseDestData deletes directly from database because the `StringMap` is gone. This is more direct and efficient because it uses a single btree lookup and scan instead of multiple lookups\r\n\r\nMotivation for this cleanup is making changes like #18550, #18192, #13756 easier to reason about and less likely to result in unintended behavior and bugs\r\n\r\n<!--\r\n*** Please remove the following help text before submitting: ***\r\n\r\nPull requests without a rationale and clear improvement may be closed\r\nimmediately.\r\n-->\r\n\r\n<!--\r\nPlease provide clear motivation for your patch and explain how it improves\r\nBitcoin Core user experience or Bitcoin Core developer experience\r\nsignificantly:\r\n\r\n* Any test improvements or new tests that improve coverage are always welcome.\r\n* All other changes should have accompanying unit tests (see `src/test/`) or\r\n  functional tests (see `test/`). Contributors should note which tests cover\r\n  modified code. If no tests exist for a region of modified code, new tests\r\n  should accompany the change.\r\n* Bug fixes are most welcome when they come with steps to reproduce or an\r\n  explanation of the potential issue as well as reasoning for the way the bug\r\n  was fixed.\r\n* Features are welcome, but might be rejected due to design or scope issues.\r\n  If a feature is based on a lot of dependencies, contributors should first\r\n  consider building the system outside of Bitcoin Core, if possible.\r\n* Refactoring changes are only accepted if they are required for a feature or\r\n  bug fix or otherwise improve developer experience significantly. For example,\r\n  most \"code style\" refactoring changes require a thorough explanation why they\r\n  are useful, what downsides they have and why they *significantly* improve\r\n  developer experience or avoid serious programming bugs. Note that code style\r\n  is often a subjective matter. Unless they are explicitly mentioned to be\r\n  preferred in the [developer notes](/doc/developer-notes.md), stylistic code\r\n  changes are usually rejected.\r\n-->\r\n\r\n<!--\r\nBitcoin Core has a thorough review process and even the most trivial change\r\nneeds to pass a lot of eyes and requires non-zero or even substantial time\r\neffort to review. There is a huge lack of active reviewers on the project, so\r\npatches often sit for a long time.\r\n-->\r\n",
          "user": {
            "login": "ryanofsky",
            "id": 7133040,
            "node_id": "MDQ6VXNlcjcxMzMwNDA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ryanofsky",
            "html_url": "https://github.com/ryanofsky",
            "followers_url": "https://api.github.com/users/ryanofsky/followers",
            "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
            "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
            "repos_url": "https://api.github.com/users/ryanofsky/repos",
            "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            },
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 9,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18608",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/18608",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/18608.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/18608.patch"
          },
          "closed_at": "2021-03-03T20:13:11Z",
          "created_at": "2020-04-12T18:05:22Z",
          "updated_at": "2023-03-27T18:41:52Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-13T16:38:36Z",
      "updated_at": "2020-04-13T16:38:36Z",
      "source": {
        "issue": {
          "id": 598783519,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NDAyNTYxMDY3",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18618",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18618/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18618/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18618/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/18618",
          "number": 18618,
          "state": "closed",
          "state_reason": null,
          "title": "gui: Drop RecentRequestsTableModel dependency to WalletModel",
          "body": "",
          "user": {
            "login": "promag",
            "id": 3534524,
            "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/promag",
            "html_url": "https://github.com/promag",
            "followers_url": "https://api.github.com/users/promag/followers",
            "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
            "organizations_url": "https://api.github.com/users/promag/orgs",
            "repos_url": "https://api.github.com/users/promag/repos",
            "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/promag/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135946,
              "node_id": "MDU6TGFiZWwxMzU5NDY=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/GUI",
              "name": "GUI",
              "color": "02d7e1",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 5,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18618",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/18618",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/18618.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/18618.patch"
          },
          "closed_at": "2020-07-09T13:08:02Z",
          "created_at": "2020-04-13T09:30:30Z",
          "updated_at": "2022-02-15T10:59:35Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-13T16:39:21Z",
      "updated_at": "2020-04-13T16:39:21Z",
      "source": {
        "issue": {
          "id": 598764001,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NDAyNTQ1Mjkx",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18617",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18617/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18617/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18617/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/18617",
          "number": 18617,
          "state": "closed",
          "state_reason": null,
          "title": "test: add factor option to adjust test timeouts",
          "body": "This PR adds a new option **factor** that can be used to adjust timeouts in various functional tests.\r\nSeveral timeouts and functions from `authproxy`, `mininode`, `test_node` and `util` have been adapted to use this option. The factor-option definition is located in `test_framework.py`.\r\n\r\nFixes https://github.com/bitcoin/bitcoin/issues/18266\r\nAlso Fixes https://github.com/bitcoin/bitcoin/issues/18834",
          "user": {
            "login": "brakmic",
            "id": 56779,
            "node_id": "MDQ6VXNlcjU2Nzc5",
            "avatar_url": "https://avatars.githubusercontent.com/u/56779?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/brakmic",
            "html_url": "https://github.com/brakmic",
            "followers_url": "https://api.github.com/users/brakmic/followers",
            "following_url": "https://api.github.com/users/brakmic/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/brakmic/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/brakmic/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/brakmic/subscriptions",
            "organizations_url": "https://api.github.com/users/brakmic/orgs",
            "repos_url": "https://api.github.com/users/brakmic/repos",
            "events_url": "https://api.github.com/users/brakmic/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/brakmic/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 62963516,
              "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
              "name": "Tests",
              "color": "d4c5f9",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 5,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18617",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/18617",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/18617.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/18617.patch"
          },
          "closed_at": "2020-05-03T13:00:26Z",
          "created_at": "2020-04-13T08:52:50Z",
          "updated_at": "2022-02-15T10:45:06Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-13T22:18:58Z",
      "updated_at": "2020-04-13T22:18:58Z",
      "source": {
        "issue": {
          "id": 599123090,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NDAyODMwNTgz",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18627",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18627/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18627/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18627/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/18627",
          "number": 18627,
          "state": "closed",
          "state_reason": null,
          "title": "rpc: gui: Don't change behavior based on private keys disabled, instead add new buttons/rpcs/menu items",
          "body": "Instead of changing some actions' behavior based on `IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)`, make separate things that work with no private keys. In particular, instead of having `bumpfee` give out a psbt when there are no private keys, add a `psbtbumpfee` RPC that always gives out a psbt and just have `bumpfee` be disabled when there are no private keys. This is mirrored in the GUI bumpfee menu items. Additionally, instead of changing the `Send` button to `Create Unsigned` when there are no private keys, just always have a `Create Unsigned` button and disable `Send` when there are no private keys. To deal with `bumpfee` already doing the mutated behavior thing, that behavior is hidden behind a `-deprecatedrpc=bumpfee` option.\r\n\r\nTo make the GUI stuff easier to follow, test, and review, this is being based on #17509",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135946,
              "node_id": "MDU6TGFiZWwxMzU5NDY=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/GUI",
              "name": "GUI",
              "color": "02d7e1",
              "default": false
            },
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            },
            {
              "id": 62963516,
              "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
              "name": "Tests",
              "color": "d4c5f9",
              "default": false
            },
            {
              "id": 98279177,
              "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
              "name": "RPC/REST/ZMQ",
              "color": "0052cc",
              "default": false
            },
            {
              "id": 241832923,
              "node_id": "MDU6TGFiZWwyNDE4MzI5MjM=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Utils/log/libs",
              "name": "Utils/log/libs",
              "description": "",
              "color": "5319e7",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 5,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18627",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/18627",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/18627.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/18627.patch"
          },
          "closed_at": "2020-04-15T19:00:44Z",
          "created_at": "2020-04-13T20:40:12Z",
          "updated_at": "2022-02-15T10:29:22Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-15T14:32:29Z",
      "updated_at": "2020-04-15T14:32:29Z",
      "source": {
        "issue": {
          "id": 600164307,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NDAzNjUyMzc2",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18647",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18647/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18647/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18647/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/18647",
          "number": 18647,
          "state": "closed",
          "state_reason": null,
          "title": "rpc: remove g_rpc_node & g_rpc_chain",
          "body": "This PR removes the global **g_rpc_node** and **g_rpc_chain** pointers from RPC functions and other sources & headers. Instead, a NodeContext const reference, and in some cases a NodeContext pointer, is being forwarded to respective actor callbacks.\r\n\r\nAlso, this way we avoid changing the **JSONRPCRequest** that, imo, should remain a plain *message transfer object* without any knowledge about its environment. I consider the idea of having a **void pointer** member of **JSONRPCRequest** problematic because it defeats the compiler type checking. In a way, a globally available, but at least *typed*, pointer would still be better than a *void* pointer, in my opinion.\r\n\r\nPreviously, an RPC function signature looked like this:\r\n\r\n```cpp\r\nstatic UniValue getpeerinfo(const JSONRPCRequest& request)\r\n```\r\n\r\nThis PR changes it to this:\r\n\r\n```cpp\r\nstatic UniValue getpeerinfo(const JSONRPCRequest& request, const NodeContext& node)\r\n```\r\n\r\nFor example, a function that previously used **g_rpc_node** like this: \r\n\r\n```cpp\r\nif(!g_rpc_node->connman)\r\n   throw JSONRPCError(RPC_CLIENT_P2P_DISABLED...[snip]...\r\n```\r\n\r\nwould get the same object this way:\r\n\r\n```cpp\r\nif (!node.connman)\r\n                throw JSONRPCError(RPC_CLIENT_P2P_DISABLED,...[snip]...\r\n```\r\n\r\nThe same applies to former **g_rpc_chain** where functions like *loadwallet* don't need it anymore:\r\n\r\n```cpp\r\nLoadWallet(*node.chain, location, error, warning);\r\n```\r\n\r\nThis all is made possible by taking the NodeContext into the tableRPC object at init:\r\n\r\n```cpp\r\n/* Register RPC commands regardless of -server setting so they will be\r\n     * available in the GUI RPC console even if external calls are disabled.\r\n     */\r\n    RegisterAllCoreRPCCommands(tableRPC);\r\n    for (const auto& client : node.chain_clients) {\r\n        client->registerRpcs();\r\n    }\r\n    tableRPC.addNodeContext(&node);    <=== RPC's are available, now take NodeContext to forward it later to them.\r\n```\r\n\r\nEach time an RPC is being called, *tableRPC* will forward the *NodeContext* argument:\r\n\r\n```cpp\r\nstatic bool ExecuteCommand(const CRPCCommand& command, const JSONRPCRequest& request, UniValue& result, bool last_handler, const NodeContext& node)\r\n{\r\n    try\r\n    {\r\n        RPCCommandExecution execution(request.strMethod);\r\n        // Execute, convert arguments to array if necessary\r\n        if (request.params.isObject()) {\r\n            return command.actor(transformNamedArguments(request, command.argNames), result, last_handler, node);\r\n        } else {\r\n            return command.actor(request, result, last_handler, node);\r\n```\r\n\r\nFixes https://github.com/bitcoin/bitcoin/issues/17548  ",
          "user": {
            "login": "brakmic",
            "id": 56779,
            "node_id": "MDQ6VXNlcjU2Nzc5",
            "avatar_url": "https://avatars.githubusercontent.com/u/56779?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/brakmic",
            "html_url": "https://github.com/brakmic",
            "followers_url": "https://api.github.com/users/brakmic/followers",
            "following_url": "https://api.github.com/users/brakmic/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/brakmic/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/brakmic/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/brakmic/subscriptions",
            "organizations_url": "https://api.github.com/users/brakmic/orgs",
            "repos_url": "https://api.github.com/users/brakmic/repos",
            "events_url": "https://api.github.com/users/brakmic/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/brakmic/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 98279177,
              "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
              "name": "RPC/REST/ZMQ",
              "color": "0052cc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 12,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18647",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/18647",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/18647.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/18647.patch"
          },
          "closed_at": "2020-04-22T16:49:03Z",
          "created_at": "2020-04-15T09:42:50Z",
          "updated_at": "2022-02-15T10:42:53Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-15T23:56:32Z",
      "updated_at": "2020-04-15T23:56:32Z",
      "source": {
        "issue": {
          "id": 600515756,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NDAzOTMwNTQ3",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18654",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18654/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18654/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18654/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/18654",
          "number": 18654,
          "state": "closed",
          "state_reason": null,
          "title": "rpc: separate bumpfee's psbt creation function into psbtbumpfee",
          "body": "Adds a new RPC `psbtbumpfee` which always creates a psbt. `bumpfee` will then only be able to create and broadcast fee bumping transactions instead of changing its behavior based on `IsWalletSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)`.\r\n\r\nSplit from #18627",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            },
            {
              "id": 98279177,
              "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
              "name": "RPC/REST/ZMQ",
              "color": "0052cc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 17,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18654",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/18654",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/18654.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/18654.patch"
          },
          "closed_at": "2020-08-13T00:22:34Z",
          "created_at": "2020-04-15T18:52:46Z",
          "updated_at": "2022-02-15T11:00:09Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 615463409,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYxNTQ2MzQwOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/615463409",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-17T21:05:59Z",
      "updated_at": "2020-04-17T21:05:59Z",
      "author_association": "CONTRIBUTOR",
      "body": "tACK d42a6edd89a313ee25683226a9aa573087de1223\r\n\r\nI have manually created a normal descriptor wallet with a private key and a watch-only wallet for multisig descriptor and tested basic functionalities like sending, receiving and info calls. Also ran all automated tests locally.\r\n\r\nRegarding the latest discussion about the current limitations: I think this can be merged as is but I would suggest adding a warning to `createwallet` which mentions current limitations around exports and differences to legacy wallets like unhardened derivation. That is probably not the right way to use the warnings, I think, but it makes it much harder to miss this information.\r\n\r\n",
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-615463409",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16528"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-18T22:16:47Z",
      "updated_at": "2020-04-18T22:16:47Z",
      "source": {
        "issue": {
          "id": 602516887,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NDA1NTM3MTUz",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18699",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18699/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18699/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18699/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/18699",
          "number": 18699,
          "state": "closed",
          "state_reason": null,
          "title": "wallet: Avoid translating RPC errors",
          "body": "Common errors and warnings should be translated when displayed in the\r\nGUI, but not translated when displayed elsewhere. The wallet method\r\n`CreateWalletFromFile` does not know its caller, so this commit changes it\r\nto return a `bilingual_str` to the caller.\r\n\r\nFixes #17072",
          "user": {
            "login": "MarcoFalke",
            "id": 6399679,
            "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/MarcoFalke",
            "html_url": "https://github.com/MarcoFalke",
            "followers_url": "https://api.github.com/users/MarcoFalke/followers",
            "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
            "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
            "repos_url": "https://api.github.com/users/MarcoFalke/repos",
            "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 24,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18699",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/18699",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/18699.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/18699.patch"
          },
          "closed_at": "2020-05-04T14:29:48Z",
          "created_at": "2020-04-18T18:04:59Z",
          "updated_at": "2022-02-15T10:44:23Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3249647686,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzI0OTY0NzY4Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3249647686",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-20T00:09:14Z"
    },
    {
      "event": "commented",
      "id": 617382554,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYxNzM4MjU1NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/617382554",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-21T19:59:32Z",
      "updated_at": "2020-04-21T19:59:32Z",
      "author_association": "CONTRIBUTOR",
      "body": "Re-ACK 837aba9a3680922acbf383df37485d53790b19ae\r\n\r\nOnly changes were addressing my nit comments. Not sure why the build is failing, I don't see the error locally.",
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-617382554",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16528"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3257917754,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzI1NzkxNzc1NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3257917754",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-21T21:10:37Z"
    },
    {
      "event": "commented",
      "id": 617416081,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYxNzQxNjA4MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/617416081",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-21T21:10:53Z",
      "updated_at": "2020-04-21T21:10:53Z",
      "author_association": "MEMBER",
      "body": "> Only changes were addressing my nit comments. Not sure why the build is failing, I don't see the error locally.\r\n\r\nLooks like there's a hidden conflict with master. I've rebased this and fixed the issues.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-617416081",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16528"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3257920788,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzI1NzkyMDc4OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3257920788",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-21T21:11:37Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-22T00:42:21Z",
      "updated_at": "2020-04-22T00:42:21Z",
      "source": {
        "issue": {
          "id": 604244622,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NDA2ODc1MDcw",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18727",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18727/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18727/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18727/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/18727",
          "number": 18727,
          "state": "closed",
          "state_reason": null,
          "title": "test: Add CreateWalletFromFile test",
          "body": "Add unit test calling CreateWalletFromFile, which isn't currently called from other unit tests, with some basic checks to make sure it rescans and registers for notifications correctly.\r\n\r\nMotivation for this change was to try to write a test that would fail without the early `handleNotifications` call in ef8c6ca60767cac589d98ca57ee33179608ccda8 from https://github.com/bitcoin/bitcoin/pull/16426, but succeed with it:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/ef8c6ca60767cac589d98ca57ee33179608ccda8/src/wallet/wallet.cpp#L3978-L3986\r\n\r\nHowever, writing a full test for the race condition that call prevents isn't possible without the locking changes from #16426. So this PR just adds as much test coverage as is possible now.\r\n\r\nThis new test is also useful for https://github.com/bitcoin/bitcoin/pull/15719, since it detects the stale notifications.transactionAddedToMempool notifications that PR eliminates.",
          "user": {
            "login": "ryanofsky",
            "id": 7133040,
            "node_id": "MDQ6VXNlcjcxMzMwNDA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ryanofsky",
            "html_url": "https://github.com/ryanofsky",
            "followers_url": "https://api.github.com/users/ryanofsky/followers",
            "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
            "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
            "repos_url": "https://api.github.com/users/ryanofsky/repos",
            "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            },
            {
              "id": 62963516,
              "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
              "name": "Tests",
              "color": "d4c5f9",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 10,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18727",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/18727",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/18727.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/18727.patch"
          },
          "closed_at": "2020-04-29T19:25:04Z",
          "created_at": "2020-04-21T19:54:23Z",
          "updated_at": "2022-02-15T10:44:10Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 617841418,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYxNzg0MTQxOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/617841418",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-22T15:14:35Z",
      "updated_at": "2020-04-22T15:14:35Z",
      "author_association": "CONTRIBUTOR",
      "body": "re-ACK 4c841356c2296cc011bcd678ba71ccba28129a67\r\n\r\nOnly code-changes since last review were small fixups in `wallet/rpcdump.cpp` and `test/functional/wallet_keypool.py`.",
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-617841418",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16528"
    },
    {
      "event": "reviewed",
      "id": 398562629,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4NTYyNjI5",
      "url": null,
      "actor": null,
      "commit_id": "4c841356c2296cc011bcd678ba71ccba28129a67",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "WIP review, LGTM up to b642c6b5e6971c and builds/tests look reliable.",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#pullrequestreview-398562629",
      "submitted_at": "2020-04-22T21:27:29Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
    },
    {
      "event": "reviewed",
      "id": 398487187,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4NDg3MTg3",
      "url": null,
      "actor": null,
      "commit_id": "b4c6a40ac46459a679dabbb84b168101e6cd6c5f",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "re-tACK 4c84135. Tested by rebasing #16549, importing keys from a hardware wallet, performing a rescan and spending. I like the `RPCOverloadWrapper`.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#pullrequestreview-398487187",
      "submitted_at": "2020-04-22T21:30:20Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3262625192,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzI2MjYyNTE5Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3262625192",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-22T22:05:43Z"
    },
    {
      "event": "commented",
      "id": 618234765,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYxODIzNDc2NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/618234765",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-23T07:37:14Z",
      "updated_at": "2020-04-23T15:29:56Z",
      "author_association": "MEMBER",
      "body": "In ed01138 locally the following test fails on macOS:\r\n\r\n```\r\n test/functional/wallet_balance.py --descriptors\r\n2020-04-23T07:36:07.090000Z TestFramework (INFO): Initializing test directory /var/folders/h6/qrb4j9vn6530kp7j4ymj934h0000gn/T/bitcoin_func_test_5klxvr5f\r\n2020-04-23T07:36:09.863000Z TestFramework (ERROR): JSONRPC error\r\nTraceback (most recent call last):\r\n  File \"/Users/sjors/dev/bitcoin-desc/test/functional/test_framework/test_framework.py\", line 112, in main\r\n    self.run_test()\r\n  File \"test/functional/wallet_balance.py\", line 62, in run_test\r\n    self.nodes[0].importaddress(ADDRESS_WATCHONLY)\r\n  File \"/Users/sjors/dev/bitcoin-desc/test/functional/test_framework/test_node.py\", line 714, in importaddress\r\n    raise JSONRPCException(res['error'])\r\ntest_framework.authproxy.JSONRPCException: Cannot import descriptor without private keys to a wallet with private keys enabled (-4)\r\n```\r\n\r\nIn case you need to change anything, it would be great if you can rebase, so I resolve a conflict between #17509 and #16549.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-618234765",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16528"
    },
    {
      "event": "reviewed",
      "id": 398879068,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4ODc5MDY4",
      "url": null,
      "actor": null,
      "commit_id": "ed0113820b498f1e904ca9a0b1205708a6f68dca",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Reviewed up to \"Implement GetSolvingProvider for DescriptorScriptPubKeyMan\" so far, a bit more than halfway through. While reviewing, built with gcc and with clang and ran all tests several times on Debian... all green.",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#pullrequestreview-398879068",
      "submitted_at": "2020-04-23T12:59:20Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
    },
    {
      "event": "reviewed",
      "id": 399106189,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5MTA2MTg5",
      "url": null,
      "actor": null,
      "commit_id": "ed0113820b498f1e904ca9a0b1205708a6f68dca",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#pullrequestreview-399106189",
      "submitted_at": "2020-04-23T13:42:34Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
    },
    {
      "event": "reviewed",
      "id": 399115594,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5MTE1NTk0",
      "url": null,
      "actor": null,
      "commit_id": "ed0113820b498f1e904ca9a0b1205708a6f68dca",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#pullrequestreview-399115594",
      "submitted_at": "2020-04-23T13:51:00Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
    },
    {
      "event": "reviewed",
      "id": 399157105,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5MTU3MTA1",
      "url": null,
      "actor": null,
      "commit_id": "ed0113820b498f1e904ca9a0b1205708a6f68dca",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#pullrequestreview-399157105",
      "submitted_at": "2020-04-23T14:30:35Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
    },
    {
      "event": "reviewed",
      "id": 399163577,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5MTYzNTc3",
      "url": null,
      "actor": null,
      "commit_id": "ed0113820b498f1e904ca9a0b1205708a6f68dca",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#pullrequestreview-399163577",
      "submitted_at": "2020-04-23T14:36:53Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
    },
    {
      "event": "reviewed",
      "id": 399185480,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5MTg1NDgw",
      "url": null,
      "actor": null,
      "commit_id": "ed0113820b498f1e904ca9a0b1205708a6f68dca",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#pullrequestreview-399185480",
      "submitted_at": "2020-04-23T14:57:50Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
    },
    {
      "event": "reviewed",
      "id": 399221172,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5MjIxMTcy",
      "url": null,
      "actor": null,
      "commit_id": "ed0113820b498f1e904ca9a0b1205708a6f68dca",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#pullrequestreview-399221172",
      "submitted_at": "2020-04-23T15:33:09Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
    },
    {
      "event": "commented",
      "id": 618497348,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYxODQ5NzM0OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/618497348",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-23T16:22:45Z",
      "updated_at": "2020-04-23T16:25:59Z",
      "author_association": "CONTRIBUTOR",
      "body": "Code review ACK ed0113820b498f1e904ca9a0b1205708a6f68dca\r\n\r\nNo blockers from what I could see. Good work on the tests. Feel free to ignore the nit comments; I don't mind re-reviewing the diff if you retouch. Built/ran tests several times on Debian with no warnings or failures.",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-618497348",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16528"
    },
    {
      "event": "commented",
      "id": 618532813,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYxODUzMjgxMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/618532813",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-23T17:24:59Z",
      "updated_at": "2020-04-23T17:24:59Z",
      "author_association": "MEMBER",
      "body": "> In ed01138 locally the following test fails on macOS:\r\n\r\nThat's intended. Not all tests have been reworked to work with descriptor wallets. `wallet_balance.py` is one of those tests that need some modifications.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-618532813",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16528"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNjYyMDMwMmM3MTNjYWU2NWVlOGU0ZmY5MzAyZTRjODhlMmExMjg1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/06620302c713cae65ee8e4ff9302e4c88e2a1285",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/06620302c713cae65ee8e4ff9302e4c88e2a1285",
      "tree": {
        "sha": "cff394a3dc60646f97fe353b27f451b7b9689bb1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cff394a3dc60646f97fe353b27f451b7b9689bb1"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/64139803f1225dab26197a20314109d37fa87d5f",
          "sha": "64139803f1225dab26197a20314109d37fa87d5f",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/64139803f1225dab26197a20314109d37fa87d5f"
        }
      ],
      "message": "Introduce SetType function to tell ScriptPubKeyMans the type and internal-ness of it",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-23T17:25:50Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-16T17:34:35Z"
      },
      "sha": "06620302c713cae65ee8e4ff9302e4c88e2a1285"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YjgxMTlhZjUzZWUyZmRiNGM0YjViMjRiNGU2NTBjMGRjM2JkMjdj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6b8119af53ee2fdb4c4b5b24b4e650c0dc3bd27c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/6b8119af53ee2fdb4c4b5b24b4e650c0dc3bd27c",
      "tree": {
        "sha": "77804988b25a32ed98c7fc4f07cd10a2a8b4cd31",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/77804988b25a32ed98c7fc4f07cd10a2a8b4cd31"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/06620302c713cae65ee8e4ff9302e4c88e2a1285",
          "sha": "06620302c713cae65ee8e4ff9302e4c88e2a1285",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/06620302c713cae65ee8e4ff9302e4c88e2a1285"
        }
      ],
      "message": "Introduce DescriptorScriptPubKeyMan as a dummy class",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-23T17:25:50Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-05T22:16:48Z"
      },
      "sha": "6b8119af53ee2fdb4c4b5b24b4e650c0dc3bd27c"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NmFjY2M3M2YwNjdjN2M5NTk0NmU5OTMyNjQ1ZGQ4MjFlZjY3ZjYz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/96accc73f067c7c95946e9932645dd821ef67f63",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/96accc73f067c7c95946e9932645dd821ef67f63",
      "tree": {
        "sha": "0de1bb879946d071d96da5228c87c100c5da7813",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0de1bb879946d071d96da5228c87c100c5da7813"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6b8119af53ee2fdb4c4b5b24b4e650c0dc3bd27c",
          "sha": "6b8119af53ee2fdb4c4b5b24b4e650c0dc3bd27c",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/6b8119af53ee2fdb4c4b5b24b4e650c0dc3bd27c"
        }
      ],
      "message": "Add WALLET_FLAG_DESCRIPTORS",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-23T17:25:50Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-06T02:32:59Z"
      },
      "sha": "96accc73f067c7c95946e9932645dd821ef67f63"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZWFjMTU3YzlkYzE0MTU0NmI0NWUwNmJhOWMyZTY0MWFkODYwODNm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aeac157c9dc141546b45e06ba9c2e641ad86083f",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/aeac157c9dc141546b45e06ba9c2e641ad86083f",
      "tree": {
        "sha": "89b5cdcd9485c718f488f264677b2ba5c38154d0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/89b5cdcd9485c718f488f264677b2ba5c38154d0"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/96accc73f067c7c95946e9932645dd821ef67f63",
          "sha": "96accc73f067c7c95946e9932645dd821ef67f63",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/96accc73f067c7c95946e9932645dd821ef67f63"
        }
      ],
      "message": "Return nullptr from GetLegacyScriptPubKeyMan if descriptor wallet",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-23T17:25:50Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-08T15:21:31Z"
      },
      "sha": "aeac157c9dc141546b45e06ba9c2e641ad86083f"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YjEzY2QzZmE4NTRkZmFlYjllMjY5YmZmM2Q2N2NhY2MwZTViNWRj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6b13cd3fa854dfaeb9e269bff3d67cacc0e5b5dc",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/6b13cd3fa854dfaeb9e269bff3d67cacc0e5b5dc",
      "tree": {
        "sha": "93c0fc541faeed6bb7adfe87049935b38aa12205",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/93c0fc541faeed6bb7adfe87049935b38aa12205"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aeac157c9dc141546b45e06ba9c2e641ad86083f",
          "sha": "aeac157c9dc141546b45e06ba9c2e641ad86083f",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/aeac157c9dc141546b45e06ba9c2e641ad86083f"
        }
      ],
      "message": "Create LegacyScriptPubKeyMan when not a descriptor wallet",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-23T17:25:50Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-17T21:54:15Z"
      },
      "sha": "6b13cd3fa854dfaeb9e269bff3d67cacc0e5b5dc"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMTk0YTdmODhhYzFhMzI5OTdiMzkwYjRmMTg4YzRiNmE0YWYwNGE1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3194a7f88ac1a32997b390b4f188c4b6a4af04a5",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/3194a7f88ac1a32997b390b4f188c4b6a4af04a5",
      "tree": {
        "sha": "b8c163a9609353485383ab25606910b6971e2152",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b8c163a9609353485383ab25606910b6971e2152"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6b13cd3fa854dfaeb9e269bff3d67cacc0e5b5dc",
          "sha": "6b13cd3fa854dfaeb9e269bff3d67cacc0e5b5dc",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/6b13cd3fa854dfaeb9e269bff3d67cacc0e5b5dc"
        }
      ],
      "message": "Introduce WalletDescriptor class\n\nWalletDescriptor is a Descriptor with other wallet metadata",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-23T17:25:50Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-02-29T00:14:12Z"
      },
      "sha": "3194a7f88ac1a32997b390b4f188c4b6a4af04a5"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkODEzMjY2OWUxMGMxZGI5YWUwYzJlYTBkM2Y4MjJkN2QyZjAxMzQ1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d8132669e10c1db9ae0c2ea0d3f822d7d2f01345",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/d8132669e10c1db9ae0c2ea0d3f822d7d2f01345",
      "tree": {
        "sha": "9ef8fd0c9c0b4f164fe997cf909aeb455d51d9a4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9ef8fd0c9c0b4f164fe997cf909aeb455d51d9a4"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3194a7f88ac1a32997b390b4f188c4b6a4af04a5",
          "sha": "3194a7f88ac1a32997b390b4f188c4b6a4af04a5",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/3194a7f88ac1a32997b390b4f188c4b6a4af04a5"
        }
      ],
      "message": "Add a lock cs_desc_man for DescriptorScriptPubKeyMan",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-23T17:25:50Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-05T22:33:35Z"
      },
      "sha": "d8132669e10c1db9ae0c2ea0d3f822d7d2f01345"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MzRkZTAzMDBjZGU1N2NhM2Y2NjJmYjdhYTViMWJkYWVkNjhiYzhm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/834de0300cde57ca3f662fb7aa5b1bdaed68bc8f",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/834de0300cde57ca3f662fb7aa5b1bdaed68bc8f",
      "tree": {
        "sha": "89d4eb03068961fd7191f70715ce7cd014217ce7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/89d4eb03068961fd7191f70715ce7cd014217ce7"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d8132669e10c1db9ae0c2ea0d3f822d7d2f01345",
          "sha": "d8132669e10c1db9ae0c2ea0d3f822d7d2f01345",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/d8132669e10c1db9ae0c2ea0d3f822d7d2f01345"
        }
      ],
      "message": "Store WalletDescriptor in DescriptorScriptPubKeyMan",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-23T17:25:50Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-08T19:34:37Z"
      },
      "sha": "834de0300cde57ca3f662fb7aa5b1bdaed68bc8f"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3OGY4YTkyOTEwZDM0MjQ3ZmE1ZDA0MzY4MzM4YzU5OGQ5OTA4MjY3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/78f8a92910d34247fa5d04368338c598d9908267",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/78f8a92910d34247fa5d04368338c598d9908267",
      "tree": {
        "sha": "d357f03efc4736b9ad2adc1f19f19875764b01f5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d357f03efc4736b9ad2adc1f19f19875764b01f5"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/834de0300cde57ca3f662fb7aa5b1bdaed68bc8f",
          "sha": "834de0300cde57ca3f662fb7aa5b1bdaed68bc8f",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/834de0300cde57ca3f662fb7aa5b1bdaed68bc8f"
        }
      ],
      "message": "Implement SetType in DescriptorScriptPubKeyMan",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-23T17:25:50Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-16T17:50:32Z"
      },
      "sha": "78f8a92910d34247fa5d04368338c598d9908267"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3266180333,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzI2NjE4MDMzMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3266180333",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-23T17:58:54Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYjcxNzdhZjhjMTU5YWJiY2MyMDlmMmNhYWZjZDQ1ZDU0YzE4MWM1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/db7177af8c159abbcc209f2caafcd45d54c181c5",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/db7177af8c159abbcc209f2caafcd45d54c181c5",
      "tree": {
        "sha": "d9f7d1f8b2aafc4026e32c3786d757b646f38b37",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d9f7d1f8b2aafc4026e32c3786d757b646f38b37"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/78f8a92910d34247fa5d04368338c598d9908267",
          "sha": "78f8a92910d34247fa5d04368338c598d9908267",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/78f8a92910d34247fa5d04368338c598d9908267"
        }
      ],
      "message": "Add LoadDescriptorScriptPubKeyMan and SetActiveScriptPubKeyMan to CWallet",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-23T17:59:42Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-08T19:41:31Z"
      },
      "sha": "db7177af8c159abbcc209f2caafcd45d54c181c5"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZGI3Y2E3NjVjOGZiMmM3MWRkNmY3YzRmMjlhZDcwZTY4ZmYxNzIw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2db7ca765c8fb2c71dd6f7c4f29ad70e68ff1720",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/2db7ca765c8fb2c71dd6f7c4f29ad70e68ff1720",
      "tree": {
        "sha": "389dafe912b25bf40a3db918936c725736d25d13",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/389dafe912b25bf40a3db918936c725736d25d13"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/db7177af8c159abbcc209f2caafcd45d54c181c5",
          "sha": "db7177af8c159abbcc209f2caafcd45d54c181c5",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/db7177af8c159abbcc209f2caafcd45d54c181c5"
        }
      ],
      "message": "Implement IsMine for DescriptorScriptPubKeyMan\n\nAdds a set of scriptPubKeys that DescriptorScriptPubKeyMan tracks.\nIf the given script is in that set, it is considered ISMINE_SPENDABLE",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-23T17:59:48Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-05T22:33:55Z"
      },
      "sha": "2db7ca765c8fb2c71dd6f7c4f29ad70e68ff1720"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NDExMjJkNGMxYTYyY2VkM2U5NmQxNmQ2N2Y0ZWViM2E2NTIyZDk5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/741122d4c1a62ced3e96d16d67f4eeb3a6522d99",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/741122d4c1a62ced3e96d16d67f4eeb3a6522d99",
      "tree": {
        "sha": "c8d59701d55bb1537255be73df37ac70e3a81707",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c8d59701d55bb1537255be73df37ac70e3a81707"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2db7ca765c8fb2c71dd6f7c4f29ad70e68ff1720",
          "sha": "2db7ca765c8fb2c71dd6f7c4f29ad70e68ff1720",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/2db7ca765c8fb2c71dd6f7c4f29ad70e68ff1720"
        }
      ],
      "message": "Implement MarkUnusedAddresses in DescriptorScriptPubKeyMan",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-23T17:59:48Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-08T20:25:10Z"
      },
      "sha": "741122d4c1a62ced3e96d16d67f4eeb3a6522d99"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYzJmOWUxMTc4YzhlMzhjMGE1Y2EwNjNmZTgxYWRhYzhmOTE2MzQ4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ec2f9e1178c8e38c0a5ca063fe81adac8f916348",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/ec2f9e1178c8e38c0a5ca063fe81adac8f916348",
      "tree": {
        "sha": "f4c22c6985f5133c8d0f48c939fc2789e69a9ddc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f4c22c6985f5133c8d0f48c939fc2789e69a9ddc"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/741122d4c1a62ced3e96d16d67f4eeb3a6522d99",
          "sha": "741122d4c1a62ced3e96d16d67f4eeb3a6522d99",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/741122d4c1a62ced3e96d16d67f4eeb3a6522d99"
        }
      ],
      "message": "Implement IsHDEnabled in DescriptorScriptPubKeyMan",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-23T17:59:48Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-08T21:05:05Z"
      },
      "sha": "ec2f9e1178c8e38c0a5ca063fe81adac8f916348"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NmM0NmFlYmI3OTQzZTFlMmU5Njc1NWU5NGRjNmMxOTc5MjBiZjc1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/46c46aebb7943e1e2e96755e94dc6c197920bf75",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/46c46aebb7943e1e2e96755e94dc6c197920bf75",
      "tree": {
        "sha": "ef3f8806f36cf99f22ae20b28ee0309e10bf6b72",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ef3f8806f36cf99f22ae20b28ee0309e10bf6b72"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ec2f9e1178c8e38c0a5ca063fe81adac8f916348",
          "sha": "ec2f9e1178c8e38c0a5ca063fe81adac8f916348",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/ec2f9e1178c8e38c0a5ca063fe81adac8f916348"
        }
      ],
      "message": "Implement GetID for DescriptorScriptPubKeyMan",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-23T17:59:48Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-08T21:28:17Z"
      },
      "sha": "46c46aebb7943e1e2e96755e94dc6c197920bf75"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMzYzZTlmY2FhNDFiNjhiZjExMTUzZjU5MWI5NWYyZDQxZmY5YTFh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2363e9fcaa41b68bf11153f591b95f2d41ff9a1a",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/2363e9fcaa41b68bf11153f591b95f2d41ff9a1a",
      "tree": {
        "sha": "a80a259a16f04f5fe0898b0a329917368863b0cd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a80a259a16f04f5fe0898b0a329917368863b0cd"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/46c46aebb7943e1e2e96755e94dc6c197920bf75",
          "sha": "46c46aebb7943e1e2e96755e94dc6c197920bf75",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/46c46aebb7943e1e2e96755e94dc6c197920bf75"
        }
      ],
      "message": "Load the descriptor cache from the wallet file",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-23T17:59:48Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-09T17:40:34Z"
      },
      "sha": "2363e9fcaa41b68bf11153f591b95f2d41ff9a1a"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NTNmZWIzZDI3MjRmNTM5OGRkNDg5OTBjNDk1N2ExOTMxM2QyYzhj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/953feb3d2724f5398dd48990c4957a19313d2c8c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/953feb3d2724f5398dd48990c4957a19313d2c8c",
      "tree": {
        "sha": "5111473bc3650d2fc51eb4a7118e090dac6c706d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5111473bc3650d2fc51eb4a7118e090dac6c706d"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2363e9fcaa41b68bf11153f591b95f2d41ff9a1a",
          "sha": "2363e9fcaa41b68bf11153f591b95f2d41ff9a1a",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/2363e9fcaa41b68bf11153f591b95f2d41ff9a1a"
        }
      ],
      "message": "Implement loading of keys for DescriptorScriptPubKeyMan",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-23T17:59:48Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-09T22:23:51Z"
      },
      "sha": "953feb3d2724f5398dd48990c4957a19313d2c8c"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMWVjM2U0ZjE5NDg3YjRiMTAwZjgwYWQwMmVhYzA2M2M1NzE3Nzdk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d1ec3e4f19487b4b100f80ad02eac063c571777d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/d1ec3e4f19487b4b100f80ad02eac063c571777d",
      "tree": {
        "sha": "aa12af29a1c3534c8cdadaa95407373b7428461f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/aa12af29a1c3534c8cdadaa95407373b7428461f"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/953feb3d2724f5398dd48990c4957a19313d2c8c",
          "sha": "953feb3d2724f5398dd48990c4957a19313d2c8c",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/953feb3d2724f5398dd48990c4957a19313d2c8c"
        }
      ],
      "message": "Add IsSingleType to Descriptors\n\nIsSingleType will return whether the descriptor will give one or multiple scriptPubKeys",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-23T17:59:48Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-10T21:21:19Z"
      },
      "sha": "d1ec3e4f19487b4b100f80ad02eac063c571777d"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0Y2I5YjY5YmUwMzFlMWRjNjVkODk2NDc5NDc4MWIzNDdmZDk0OGY1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4cb9b69be031e1dc65d8964794781b347fd948f5",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/4cb9b69be031e1dc65d8964794781b347fd948f5",
      "tree": {
        "sha": "d8d3eef84d7e236aa175892e8e357f2436432ed9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d8d3eef84d7e236aa175892e8e357f2436432ed9"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d1ec3e4f19487b4b100f80ad02eac063c571777d",
          "sha": "d1ec3e4f19487b4b100f80ad02eac063c571777d",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/d1ec3e4f19487b4b100f80ad02eac063c571777d"
        }
      ],
      "message": "Implement several simple functions in DescriptorScriptPubKeyMan\n\nImplements a bunch of one liners: UpgradeKeyMetadata, IsFirstRun, HavePrivateKeys,\nKeypoolCountExternalKeys, GetKeypoolSize, GetTimeFirstKey, CanGetAddresses,\nRewriteDB",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-23T17:59:48Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-09T23:34:39Z"
      },
      "sha": "4cb9b69be031e1dc65d8964794781b347fd948f5"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NmRmYjk5NzY4ZTdkMDNhM2NmNTUyODEyZDViNDFjZWFlYmMwNmJl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/46dfb99768e7d03a3cf552812d5b41ceaebc06be",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/46dfb99768e7d03a3cf552812d5b41ceaebc06be",
      "tree": {
        "sha": "8d0eabe1d57db6680ed436df27d43ebadfeda365",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8d0eabe1d57db6680ed436df27d43ebadfeda365"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4cb9b69be031e1dc65d8964794781b347fd948f5",
          "sha": "4cb9b69be031e1dc65d8964794781b347fd948f5",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/4cb9b69be031e1dc65d8964794781b347fd948f5"
        }
      ],
      "message": "Implement writing descriptorkeys, descriptorckeys, and descriptors to wallet file",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-23T17:59:48Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-10T20:02:43Z"
      },
      "sha": "46dfb99768e7d03a3cf552812d5b41ceaebc06be"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMDE0ODg2YTM0MjUwOGY3YzhkODAzMjNlZWU5YTVmMzE0ZWFmOTRj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e014886a342508f7c8d80323eee9a5f314eaf94c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/e014886a342508f7c8d80323eee9a5f314eaf94c",
      "tree": {
        "sha": "ebdd39e5cabd2f4ac0daee2b29d44b6393bb3402",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ebdd39e5cabd2f4ac0daee2b29d44b6393bb3402"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/46dfb99768e7d03a3cf552812d5b41ceaebc06be",
          "sha": "46dfb99768e7d03a3cf552812d5b41ceaebc06be",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/46dfb99768e7d03a3cf552812d5b41ceaebc06be"
        }
      ],
      "message": "Implement SetupGeneration for DescriptorScriptPubKeyMan",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-23T17:59:48Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-10T20:03:17Z"
      },
      "sha": "e014886a342508f7c8d80323eee9a5f314eaf94c"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1OGM3NjUxODIxYjBlZWZmMGE5OWRjNjFkNzhkMmU5ZTA3OTg2NTgw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/58c7651821b0eeff0a99dc61d78d2e9e07986580",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/58c7651821b0eeff0a99dc61d78d2e9e07986580",
      "tree": {
        "sha": "623281d3496a9da9009b2bc796f29b36c82966c5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/623281d3496a9da9009b2bc796f29b36c82966c5"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e014886a342508f7c8d80323eee9a5f314eaf94c",
          "sha": "e014886a342508f7c8d80323eee9a5f314eaf94c",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/e014886a342508f7c8d80323eee9a5f314eaf94c"
        }
      ],
      "message": "Implement TopUp in DescriptorScriptPubKeyMan",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-23T17:59:48Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-10T20:38:12Z"
      },
      "sha": "58c7651821b0eeff0a99dc61d78d2e9e07986580"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZmRkMDczNDg2OWEyMjIxN2MxNTg1OGQ3YTc2ZDBkYWNjMmViYzg2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bfdd0734869a22217c15858d7a76d0dacc2ebc86",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/bfdd0734869a22217c15858d7a76d0dacc2ebc86",
      "tree": {
        "sha": "51ea29710df578bbb9078a595b4d3e83bd0b6f98",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/51ea29710df578bbb9078a595b4d3e83bd0b6f98"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/58c7651821b0eeff0a99dc61d78d2e9e07986580",
          "sha": "58c7651821b0eeff0a99dc61d78d2e9e07986580",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/58c7651821b0eeff0a99dc61d78d2e9e07986580"
        }
      ],
      "message": "Implement GetNewDestination for DescriptorScriptPubKeyMan",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-23T17:59:48Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-10T22:01:40Z"
      },
      "sha": "bfdd0734869a22217c15858d7a76d0dacc2ebc86"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNzc1ZjdjN2ZkMGI5MDk0ZmNiZWVlNmJhOTIyMDZkNWJiYjE5MTY0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a775f7c7fd0b9094fcbeee6ba92206d5bbb19164",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/a775f7c7fd0b9094fcbeee6ba92206d5bbb19164",
      "tree": {
        "sha": "947a0a55eed888f71ad7c8ed21ea247e60609907",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/947a0a55eed888f71ad7c8ed21ea247e60609907"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bfdd0734869a22217c15858d7a76d0dacc2ebc86",
          "sha": "bfdd0734869a22217c15858d7a76d0dacc2ebc86",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/bfdd0734869a22217c15858d7a76d0dacc2ebc86"
        }
      ],
      "message": "Implement Unlock and Encrypt in DescriptorScriptPubKeyMan",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-23T17:59:48Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-11T18:32:05Z"
      },
      "sha": "a775f7c7fd0b9094fcbeee6ba92206d5bbb19164"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmODY2OTU3OTc5YzIzY2VmZDQxZWZhOWRhZTllNTNiOTE3NzgxOGRj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f866957979c23cefd41efa9dae9e53b9177818dc",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/f866957979c23cefd41efa9dae9e53b9177818dc",
      "tree": {
        "sha": "d217aa492eefc231c82549e13b1d3fff0c4599eb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d217aa492eefc231c82549e13b1d3fff0c4599eb"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a775f7c7fd0b9094fcbeee6ba92206d5bbb19164",
          "sha": "a775f7c7fd0b9094fcbeee6ba92206d5bbb19164",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/a775f7c7fd0b9094fcbeee6ba92206d5bbb19164"
        }
      ],
      "message": "Implement GetReservedDestination in DescriptorScriptPubKeyMan",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-23T17:59:48Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-11T19:54:07Z"
      },
      "sha": "f866957979c23cefd41efa9dae9e53b9177818dc"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ODZiNTdhOWE2YjRiMTJhNzhmNzkyNzg1YjYzYTVhMTc0M2JjZTBj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/586b57a9a6b4b12a78f792785b63a5a1743bce0c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/586b57a9a6b4b12a78f792785b63a5a1743bce0c",
      "tree": {
        "sha": "9f739a60610a81ffd2093c0f23f59119396103c6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9f739a60610a81ffd2093c0f23f59119396103c6"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f866957979c23cefd41efa9dae9e53b9177818dc",
          "sha": "f866957979c23cefd41efa9dae9e53b9177818dc",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/f866957979c23cefd41efa9dae9e53b9177818dc"
        }
      ],
      "message": "Implement ReturnDestination in DescriptorScriptPubKeyMan",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-23T17:59:48Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-11T18:44:53Z"
      },
      "sha": "586b57a9a6b4b12a78f792785b63a5a1743bce0c"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMWNhNWZlYjRhZDY2OGEzZTFhZTU0M2QwYWRkZDVmNDgzZjFhODhm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f1ca5feb4ad668a3e1ae543d0addd5f483f1a88f",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/f1ca5feb4ad668a3e1ae543d0addd5f483f1a88f",
      "tree": {
        "sha": "4d2ec3da6f88bb8111a1ba1290955fa57eb69d27",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4d2ec3da6f88bb8111a1ba1290955fa57eb69d27"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/586b57a9a6b4b12a78f792785b63a5a1743bce0c",
          "sha": "586b57a9a6b4b12a78f792785b63a5a1743bce0c",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/586b57a9a6b4b12a78f792785b63a5a1743bce0c"
        }
      ],
      "message": "Implement GetKeypoolOldestTime and only display it if greater than 0",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-23T17:59:48Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-11T20:14:17Z"
      },
      "sha": "f1ca5feb4ad668a3e1ae543d0addd5f483f1a88f"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNTBjOGRkZDQxOTBmMjBiZjBkZWJkNDEwMzQ4YjczNDA4ZWMzMTQz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d50c8ddd4190f20bf0debd410348b73408ec3143",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/d50c8ddd4190f20bf0debd410348b73408ec3143",
      "tree": {
        "sha": "a97870c738a5022c493119208dc7c2c51c1dcfc8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a97870c738a5022c493119208dc7c2c51c1dcfc8"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f1ca5feb4ad668a3e1ae543d0addd5f483f1a88f",
          "sha": "f1ca5feb4ad668a3e1ae543d0addd5f483f1a88f",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/f1ca5feb4ad668a3e1ae543d0addd5f483f1a88f"
        }
      ],
      "message": "Implement GetSolvingProvider for DescriptorScriptPubKeyMan\n\nInternally, a GetSigningProvider function is introduced which allows for\nsome private keys to be optionally included. This can be called with a\nscript as the argument (i.e. a scriptPubKey from our wallet when we are\nsigning) or with a pubkey. In order to know what index to expand the\nprivate keys for that pubkey, we need to also cache all of the pubkeys\ninvolved when we expand the descriptor. So SetCache and TopUp are\nupdated to do this too.",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-23T17:59:48Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-11T20:41:25Z"
      },
      "sha": "d50c8ddd4190f20bf0debd410348b73408ec3143"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZGU3YzlmYTM4Nzc1YTgxZDUzYWMwNDg0ZmE5Yzk4MDc2YTBjN2Qx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bde7c9fa38775a81d53ac0484fa9c98076a0c7d1",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/bde7c9fa38775a81d53ac0484fa9c98076a0c7d1",
      "tree": {
        "sha": "b17856967ae018b7c09bdcf83165db02b1898da7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b17856967ae018b7c09bdcf83165db02b1898da7"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d50c8ddd4190f20bf0debd410348b73408ec3143",
          "sha": "d50c8ddd4190f20bf0debd410348b73408ec3143",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/d50c8ddd4190f20bf0debd410348b73408ec3143"
        }
      ],
      "message": "Implement SignTransaction in DescriptorScriptPubKeyMan",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-23T17:59:48Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-02-11T22:10:25Z"
      },
      "sha": "bde7c9fa38775a81d53ac0484fa9c98076a0c7d1"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NGI0OTc4YzAyMTAyMTcxNzc1Yzc3YTQ1ZjZlYzE5ODkzMGYwYTg4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/84b4978c02102171775c77a45f6ec198930f0a88",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/84b4978c02102171775c77a45f6ec198930f0a88",
      "tree": {
        "sha": "d66ab622b0731029ca0d4c5b0395421a4d438291",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d66ab622b0731029ca0d4c5b0395421a4d438291"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bde7c9fa38775a81d53ac0484fa9c98076a0c7d1",
          "sha": "bde7c9fa38775a81d53ac0484fa9c98076a0c7d1",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/bde7c9fa38775a81d53ac0484fa9c98076a0c7d1"
        }
      ],
      "message": "Implement SignMessage for descriptor wallets",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-23T17:59:48Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-02-11T22:36:44Z"
      },
      "sha": "84b4978c02102171775c77a45f6ec198930f0a88"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MmE5NTQwZGY5NmZmZGI5NGYwMzliOWMxNGVhYWNkYzdkOTYxMTk2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/72a9540df96ffdb94f039b9c14eaacdc7d961196",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/72a9540df96ffdb94f039b9c14eaacdc7d961196",
      "tree": {
        "sha": "38f57b328f20663c5550b2912e95dc27110d7203",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/38f57b328f20663c5550b2912e95dc27110d7203"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/84b4978c02102171775c77a45f6ec198930f0a88",
          "sha": "84b4978c02102171775c77a45f6ec198930f0a88",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/84b4978c02102171775c77a45f6ec198930f0a88"
        }
      ],
      "message": "Implement FillPSBT in DescriptorScriptPubKeyMan\n\nFillPSBT will add our own scripts to the PSBT if those inputs are ours.\nIf an input also lists pubkeys that we happen to know the private keys\nfor, we will sign those inputs too.",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-23T17:59:48Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-02-11T22:39:43Z"
      },
      "sha": "72a9540df96ffdb94f039b9c14eaacdc7d961196"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4Yjk2MDNiZDBiNDQzZTJmNzk4NGViNzJiZjJlMjFjZjAyYWYwYmNi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8b9603bd0b443e2f7984eb72bf2e21cf02af0bcb",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/8b9603bd0b443e2f7984eb72bf2e21cf02af0bcb",
      "tree": {
        "sha": "23d675917d739aa53e18578fab0aed6996d19472",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/23d675917d739aa53e18578fab0aed6996d19472"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/72a9540df96ffdb94f039b9c14eaacdc7d961196",
          "sha": "72a9540df96ffdb94f039b9c14eaacdc7d961196",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/72a9540df96ffdb94f039b9c14eaacdc7d961196"
        }
      ],
      "message": "Change GetMetadata to use unique_ptr<CKeyMetadata>",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-23T17:59:48Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-11-07T01:55:34Z"
      },
      "sha": "8b9603bd0b443e2f7984eb72bf2e21cf02af0bcb"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNzEzYmFhNzVhNjIzMzVhYjljMGVlZDllZjc2YTk1YmZlYzMwNjY4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b713baa75a62335ab9c0eed9ef76a95bfec30668",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/b713baa75a62335ab9c0eed9ef76a95bfec30668",
      "tree": {
        "sha": "ad1bb8395bf73a020e29e9c0d74253d6952faeda",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ad1bb8395bf73a020e29e9c0d74253d6952faeda"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8b9603bd0b443e2f7984eb72bf2e21cf02af0bcb",
          "sha": "8b9603bd0b443e2f7984eb72bf2e21cf02af0bcb",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/8b9603bd0b443e2f7984eb72bf2e21cf02af0bcb"
        }
      ],
      "message": "Implement GetMetadata in DescriptorScriptPubKeyMan",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-23T17:59:48Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-11-07T02:20:39Z"
      },
      "sha": "b713baa75a62335ab9c0eed9ef76a95bfec30668"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MmFlMDJiMTY1NjgxOWY0YmQ1MDIzYjg5NTU0NDdlMWQ0ZWE4Njky",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/82ae02b1656819f4bd5023b8955447e1d4ea8692",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/82ae02b1656819f4bd5023b8955447e1d4ea8692",
      "tree": {
        "sha": "3b408d54d4b68c86e4bc44748c965ea9a773704e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3b408d54d4b68c86e4bc44748c965ea9a773704e"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b713baa75a62335ab9c0eed9ef76a95bfec30668",
          "sha": "b713baa75a62335ab9c0eed9ef76a95bfec30668",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/b713baa75a62335ab9c0eed9ef76a95bfec30668"
        }
      ],
      "message": "Be able to create new wallets with DescriptorScriptPubKeyMans as backing",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-23T17:59:48Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-11T22:21:21Z"
      },
      "sha": "82ae02b1656819f4bd5023b8955447e1d4ea8692"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxY2I0MmIyMmIxMWMyN2U2NDQ2MmFmYzI1YTk0YjJmYzUwYmZhMTEz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1cb42b22b11c27e64462afc25a94b2fc50bfa113",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/1cb42b22b11c27e64462afc25a94b2fc50bfa113",
      "tree": {
        "sha": "a67cbb5b85ec15aee7fe50ac7a086916e75c4745",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a67cbb5b85ec15aee7fe50ac7a086916e75c4745"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/82ae02b1656819f4bd5023b8955447e1d4ea8692",
          "sha": "82ae02b1656819f4bd5023b8955447e1d4ea8692",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/82ae02b1656819f4bd5023b8955447e1d4ea8692"
        }
      ],
      "message": "Generate new descriptors when encrypting",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-23T17:59:48Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-16T19:22:08Z"
      },
      "sha": "1cb42b22b11c27e64462afc25a94b2fc50bfa113"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZTI0YTk0NDk0MDAxOTE4NWVmZWJjYzVkODVlYWM0NThlZDI2MDE2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ce24a944940019185efebcc5d85eac458ed26016",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/ce24a944940019185efebcc5d85eac458ed26016",
      "tree": {
        "sha": "82772b6c25fcecd552f51703f4a68326ff7326d5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/82772b6c25fcecd552f51703f4a68326ff7326d5"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1cb42b22b11c27e64462afc25a94b2fc50bfa113",
          "sha": "1cb42b22b11c27e64462afc25a94b2fc50bfa113",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/1cb42b22b11c27e64462afc25a94b2fc50bfa113"
        }
      ],
      "message": "Add IsLegacy to CWallet so that the GUI knows whether to show watchonly",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-23T17:59:48Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-08-14T18:25:53Z"
      },
      "sha": "ce24a944940019185efebcc5d85eac458ed26016"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMTkzZWE4ODlkZGI1M2Q5YTVjNDc2NDc5NjY2ODFkNTI1ZTM4MzY4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f193ea889ddb53d9a5c47647966681d525e38368",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/f193ea889ddb53d9a5c47647966681d525e38368",
      "tree": {
        "sha": "6f552b8ff48b64dfa33b06ab756a8531b1148c18",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6f552b8ff48b64dfa33b06ab756a8531b1148c18"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ce24a944940019185efebcc5d85eac458ed26016",
          "sha": "ce24a944940019185efebcc5d85eac458ed26016",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/ce24a944940019185efebcc5d85eac458ed26016"
        }
      ],
      "message": "add importdescriptors RPC and tests for native descriptor wallets\n\nCo-authored-by: Andrew Chow <achow101-github@achow101.com>",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-23T17:59:48Z"
      },
      "author": {
        "name": "Hugo Nguyen",
        "email": "hugh.hn@gmail.com",
        "date": "2019-08-01T22:08:47Z"
      },
      "sha": "f193ea889ddb53d9a5c47647966681d525e38368"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMzQ2ZTE0ODMxNDg5ZjljOGY1M2EwOGY5ZGZlZDYxZDU1ZDUzYzZm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1346e14831489f9c8f53a08f9dfed61d55d53c6f",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/1346e14831489f9c8f53a08f9dfed61d55d53c6f",
      "tree": {
        "sha": "9d206cabeff9973970421d3c5818c9677d92ac81",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9d206cabeff9973970421d3c5818c9677d92ac81"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f193ea889ddb53d9a5c47647966681d525e38368",
          "sha": "f193ea889ddb53d9a5c47647966681d525e38368",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/f193ea889ddb53d9a5c47647966681d525e38368"
        }
      ],
      "message": "Functional tests for descriptor wallets",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-23T17:59:48Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-15T20:12:04Z"
      },
      "sha": "1346e14831489f9c8f53a08f9dfed61d55d53c6f"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzozODhiYTk0MjMxZjJmMTBhMGJlNzUxYzU2MmNkZDQ2NTA1MTBhOTBh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/388ba94231f2f10a0be751c562cdd4650510a90a",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/388ba94231f2f10a0be751c562cdd4650510a90a",
      "tree": {
        "sha": "7d0aae07dc8512eb756440a93da0dba2a5013985",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7d0aae07dc8512eb756440a93da0dba2a5013985"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1346e14831489f9c8f53a08f9dfed61d55d53c6f",
          "sha": "1346e14831489f9c8f53a08f9dfed61d55d53c6f",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/1346e14831489f9c8f53a08f9dfed61d55d53c6f"
        }
      ],
      "message": "Change wallet_encryption.py to use signmessage instead of dumpprivkey",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-23T17:59:48Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-22T18:47:17Z"
      },
      "sha": "388ba94231f2f10a0be751c562cdd4650510a90a"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYzE5ZmRkMmEyZmQ1Mzk0ZmNmYTc1YjJiYTg0YWIyMjc3Y2JkYWJm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3c19fdd2a2fd5394fcfa75b2ba84ab2277cbdabf",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/3c19fdd2a2fd5394fcfa75b2ba84ab2277cbdabf",
      "tree": {
        "sha": "d6aa7b17c0c110b6cfe9cc9fbc771a2078568a04",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d6aa7b17c0c110b6cfe9cc9fbc771a2078568a04"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/388ba94231f2f10a0be751c562cdd4650510a90a",
          "sha": "388ba94231f2f10a0be751c562cdd4650510a90a",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/388ba94231f2f10a0be751c562cdd4650510a90a"
        }
      ],
      "message": "Return error when no ScriptPubKeyMan is available for specified type\n\nWhen a CWallet doesn't have a ScriptPubKeyMan for the requested type\nin GetNewDestination, give a meaningful error. Also handle this in\nQt which did not do anything with errors.",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-23T17:59:48Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-02-14T02:06:29Z"
      },
      "sha": "3c19fdd2a2fd5394fcfa75b2ba84ab2277cbdabf"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ODZlMGQ3NWY1ZmVhMjQyMTE5MGFhNDgxMjc3N2Q4OWY2ODk2MmNj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/886e0d75f5fea2421190aa4812777d89f68962cc",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/886e0d75f5fea2421190aa4812777d89f68962cc",
      "tree": {
        "sha": "ab86269efef2243335ea56e57257ae3c838ae48e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ab86269efef2243335ea56e57257ae3c838ae48e"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3c19fdd2a2fd5394fcfa75b2ba84ab2277cbdabf",
          "sha": "3c19fdd2a2fd5394fcfa75b2ba84ab2277cbdabf",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/3c19fdd2a2fd5394fcfa75b2ba84ab2277cbdabf"
        }
      ],
      "message": "Implement CWallet::IsSpentKey for non-LegacySPKMans",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-23T17:59:48Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-03-31T19:30:04Z"
      },
      "sha": "886e0d75f5fea2421190aa4812777d89f68962cc"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZjA2MDYyODU5MGZhYjg3ZDczZjI3OGU3NDRkNzBlZjJkNWQ4MWRi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cf060628590fab87d73f278e744d70ef2d5d81db",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/cf060628590fab87d73f278e744d70ef2d5d81db",
      "tree": {
        "sha": "dc3bfdf261571580b79a467d1f22b5498dcf69db",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dc3bfdf261571580b79a467d1f22b5498dcf69db"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/886e0d75f5fea2421190aa4812777d89f68962cc",
          "sha": "886e0d75f5fea2421190aa4812777d89f68962cc",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/886e0d75f5fea2421190aa4812777d89f68962cc"
        }
      ],
      "message": "Correctly check for default wallet",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-23T17:59:48Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-03T01:13:02Z"
      },
      "sha": "cf060628590fab87d73f278e744d70ef2d5d81db"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NjlmN2FiMzBhZWI0ZDdmYmQ1NjNjNTM1YjU1NDY3YThhMDQzMGNm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/869f7ab30aeb4d7fbd563c535b55467a8a0430cf",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/869f7ab30aeb4d7fbd563c535b55467a8a0430cf",
      "tree": {
        "sha": "3c6122dd0783cfab49496496162029d92d81a33e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3c6122dd0783cfab49496496162029d92d81a33e"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cf060628590fab87d73f278e744d70ef2d5d81db",
          "sha": "cf060628590fab87d73f278e744d70ef2d5d81db",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/cf060628590fab87d73f278e744d70ef2d5d81db"
        }
      ],
      "message": "tests: Add RPCOverloadWrapper which overloads some disabled RPCs\n\nRPCOverloadWrapper overloads some deprecated or disabled RPCs with\nan implementation using other RPCs to avoid having a ton of code churn\naround replacing those RPCs.",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-23T17:59:48Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-02T22:09:15Z"
      },
      "sha": "869f7ab30aeb4d7fbd563c535b55467a8a0430cf"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMjM1ODhiMWJiYzYzZGM1NzA5OGJiZDBiYWE0ODYzNWUwY2MwYjgy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "tree": {
        "sha": "8e4d450e70699c56a5c9c1547a30f5022e62bba8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8e4d450e70699c56a5c9c1547a30f5022e62bba8"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/869f7ab30aeb4d7fbd563c535b55467a8a0430cf",
          "sha": "869f7ab30aeb4d7fbd563c535b55467a8a0430cf",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/869f7ab30aeb4d7fbd563c535b55467a8a0430cf"
        }
      ],
      "message": "Add a --descriptors option to various tests\n\nAdds a --descriptors option globally to the test framework. This will\nmake the test create and use descriptor wallets. However some tests may\nnot work with this.\n\nSome tests are modified to work with --descriptors and run with that\noption in test_runer:\n* wallet_basic.py\n* wallet_encryption.py\n* wallet_keypool.py\n* wallet_keypool_topup.py\n* wallet_labels.py\n* wallet_avoidreuse.py",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-23T17:59:48Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-16T19:33:35Z"
      },
      "sha": "223588b1bbc63dc57098bbd0baa48635e0cc0b82"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3266185953,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzI2NjE4NTk1Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3266185953",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-23T18:00:16Z"
    },
    {
      "event": "commented",
      "id": 618555157,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYxODU1NTE1Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/618555157",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-23T18:01:56Z",
      "updated_at": "2020-04-23T18:01:56Z",
      "author_association": "MEMBER",
      "body": "Addressed @jonatack's comments and rebased as requested by @Sjors ",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-618555157",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16528"
    },
    {
      "event": "mentioned",
      "id": 3266193708,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzI2NjE5MzcwOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3266193708",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-23T18:01:56Z"
    },
    {
      "event": "subscribed",
      "id": 3266193711,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMyNjYxOTM3MTE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3266193711",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-23T18:01:56Z"
    },
    {
      "event": "mentioned",
      "id": 3266193716,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzI2NjE5MzcxNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3266193716",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-23T18:01:56Z"
    },
    {
      "event": "subscribed",
      "id": 3266193718,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMyNjYxOTM3MTg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3266193718",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-23T18:01:56Z"
    },
    {
      "event": "commented",
      "id": 618586971,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYxODU4Njk3MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/618586971",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-23T18:48:25Z",
      "updated_at": "2020-04-23T18:48:25Z",
      "author_association": "MEMBER",
      "body": "utACK 223588b1bbc63dc57098bbd0baa48635e0cc0b82 (rebased, nits addressed)\r\n\r\n> That's intended. Not all tests have been reworked to work with descriptor wallets. `wallet_balance.py` is one of those tests that need some modifications.\r\n\r\nI might be seeing two different issues. When I run the full test suite that particular test sometimes fails with `[node 0] bitcoind exited with status 1 during initialization`, but not every time, and it also happens with other tests, including non-wallet ones. And given that Travis macOS passes, I think it's unrelated to this PR and maybe a (new) dev setup problem.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-618586971",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16528"
    },
    {
      "event": "commented",
      "id": 618685814,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYxODY4NTgxNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/618685814",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-23T21:38:39Z",
      "updated_at": "2020-04-23T21:38:39Z",
      "author_association": "CONTRIBUTOR",
      "body": "Code review re-ACK 223588b1bbc63dc57098bbd0baa48635e0cc0b82.\r\n\r\nRebuilt, re-ran all tests, bitcoind and a few `importdescriptors` rpc commands as a sanity check. I did not test the GUI changes yet.",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-618685814",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16528"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-24T12:16:52Z",
      "updated_at": "2020-04-24T12:16:52Z",
      "source": {
        "issue": {
          "id": 606270315,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NDA4NTE2MzU2",
          "url": "https://api.github.com/repos/chaincodelabs/seminars/issues/16",
          "repository_url": "https://api.github.com/repos/chaincodelabs/seminars",
          "labels_url": "https://api.github.com/repos/chaincodelabs/seminars/issues/16/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/chaincodelabs/seminars/issues/16/comments",
          "events_url": "https://api.github.com/repos/chaincodelabs/seminars/issues/16/events",
          "html_url": "https://github.com/chaincodelabs/seminars/pull/16",
          "number": 16,
          "state": "closed",
          "state_reason": null,
          "title": "wallet-psbt: add native descriptor wallets",
          "body": "This PR proposes to add a recent practical update by Andrew Chow. Reading time and tag TBC. I found it helpful for reviewing PRs like [Bitcoin Core PR16528](https://github.com/bitcoin/bitcoin/pull/16528). Endorsement by Russ here: https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-611938384\r\n",
          "user": {
            "login": "jonatack",
            "id": 2415484,
            "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jonatack",
            "html_url": "https://github.com/jonatack",
            "followers_url": "https://api.github.com/users/jonatack/followers",
            "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
            "organizations_url": "https://api.github.com/users/jonatack/orgs",
            "repos_url": "https://api.github.com/users/jonatack/repos",
            "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/jonatack/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 1,
          "pull_request": {
            "url": "https://api.github.com/repos/chaincodelabs/seminars/pulls/16",
            "html_url": "https://github.com/chaincodelabs/seminars/pull/16",
            "diff_url": "https://github.com/chaincodelabs/seminars/pull/16.diff",
            "patch_url": "https://github.com/chaincodelabs/seminars/pull/16.patch"
          },
          "closed_at": "2020-04-25T13:10:53Z",
          "created_at": "2020-04-24T12:16:52Z",
          "updated_at": "2020-04-25T23:26:52Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 619082907,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYxOTA4MjkwNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/619082907",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-24T15:32:02Z",
      "updated_at": "2020-04-24T15:32:02Z",
      "author_association": "CONTRIBUTOR",
      "body": "re-ACK 223588b1bbc63dc57098bbd0baa48635e0cc0b82\r\n\r\nChanges were only rebase and addressing nits. FWIW, I did not see any failures from `wallet_balance.py`.",
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-619082907",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16528"
    },
    {
      "event": "commented",
      "id": 619202090,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYxOTIwMjA5MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/619202090",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-24T19:32:47Z",
      "updated_at": "2020-04-24T19:33:57Z",
      "author_association": "MEMBER",
      "body": "light re-ACK 223588b\r\n\r\nRead carefully through the descriptor-specific tests one more time, as well as the discussion since my last review. Admittedly a light re-review. Some more advanced use-cases may require additional tooling later and that's ok.",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-619202090",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16528"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-26T19:38:34Z",
      "updated_at": "2020-04-26T19:38:34Z",
      "source": {
        "issue": {
          "id": 607050372,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NDA5MTExMTQ1",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18774",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18774/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18774/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18774/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/18774",
          "number": 18774,
          "state": "closed",
          "state_reason": null,
          "title": "test: added test for upgradewallet RPC",
          "body": "This PR adds tests for the newly merged *upgradewallet* RPC. \r\n\r\nAdditionally, it expands `test_framework/util.py` by adding the function `adjust_bitcoin_conf_for_pre_17` to support nodes that don't parse configuration sections. \r\n\r\nThis test uses two older node versions, v0.15.2 and v0.16.3, to create older wallet versions to be used by `upgradewallet`.\r\n\r\nFixes https://github.com/bitcoin/bitcoin/issues/18767",
          "user": {
            "login": "brakmic",
            "id": 56779,
            "node_id": "MDQ6VXNlcjU2Nzc5",
            "avatar_url": "https://avatars.githubusercontent.com/u/56779?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/brakmic",
            "html_url": "https://github.com/brakmic",
            "followers_url": "https://api.github.com/users/brakmic/followers",
            "following_url": "https://api.github.com/users/brakmic/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/brakmic/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/brakmic/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/brakmic/subscriptions",
            "organizations_url": "https://api.github.com/users/brakmic/orgs",
            "repos_url": "https://api.github.com/users/brakmic/repos",
            "events_url": "https://api.github.com/users/brakmic/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/brakmic/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 62963516,
              "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
              "name": "Tests",
              "color": "d4c5f9",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 3,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18774",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/18774",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/18774.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/18774.patch"
          },
          "closed_at": "2020-04-29T15:10:14Z",
          "created_at": "2020-04-26T16:18:39Z",
          "updated_at": "2022-02-15T10:58:45Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "reviewed",
      "id": 400499477,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwNDk5NDc3",
      "url": null,
      "actor": null,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Code review ACK 223588b1bbc63dc57098bbd0baa48635e0cc0b82\r\n\r\nOnly lightly looked at the functional tests, but the actual code looks great. Thanks for carrying this through achow101. Great to have this in so early in the 0.21 release cycle too.",
      "user": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#pullrequestreview-400499477",
      "submitted_at": "2020-04-26T23:41:58Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
    },
    {
      "event": "merged",
      "id": 3273547342,
      "node_id": "MDExOk1lcmdlZEV2ZW50MzI3MzU0NzM0Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3273547342",
      "actor": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "eef90c14ed0f559e3f6e187341009270b84f45cb",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eef90c14ed0f559e3f6e187341009270b84f45cb",
      "created_at": "2020-04-27T00:25:02Z"
    },
    {
      "event": "closed",
      "id": 3273547347,
      "node_id": "MDExOkNsb3NlZEV2ZW50MzI3MzU0NzM0Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3273547347",
      "actor": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-27T00:25:02Z"
    },
    {
      "event": "removed_from_project",
      "id": 3273548739,
      "node_id": "MDIzOlJlbW92ZWRGcm9tUHJvamVjdEV2ZW50MzI3MzU0ODczOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3273548739",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-27T00:26:26Z",
      "project_card": {
        "id": 34855732,
        "url": "https://api.github.com/projects/columns/cards/34855732",
        "project_id": 481835,
        "project_url": "https://api.github.com/projects/481835",
        "column_name": "Blockers"
      }
    },
    {
      "event": "moved_columns_in_project",
      "id": 3273552077,
      "node_id": "MDI2Ok1vdmVkQ29sdW1uc0luUHJvamVjdEV2ZW50MzI3MzU1MjA3Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3273552077",
      "actor": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-27T00:29:42Z",
      "project_card": {
        "id": 24709840,
        "url": "https://api.github.com/projects/columns/cards/24709840",
        "project_id": 2806533,
        "project_url": "https://api.github.com/projects/2806533",
        "column_name": "Done",
        "previous_column_name": "PRs"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-27T00:48:10Z",
      "updated_at": "2020-04-27T00:48:10Z",
      "source": {
        "issue": {
          "id": 606569533,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NDA4NzU0NDE3",
          "url": "https://api.github.com/repos/bitcoinops/bitcoinops.github.io/issues/394",
          "repository_url": "https://api.github.com/repos/bitcoinops/bitcoinops.github.io",
          "labels_url": "https://api.github.com/repos/bitcoinops/bitcoinops.github.io/issues/394/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoinops/bitcoinops.github.io/issues/394/comments",
          "events_url": "https://api.github.com/repos/bitcoinops/bitcoinops.github.io/issues/394/events",
          "html_url": "https://github.com/bitcoinops/bitcoinops.github.io/pull/394",
          "number": 394,
          "state": "closed",
          "state_reason": null,
          "title": "Newsletter 95 (2020-04-29)",
          "body": "- [x] Action items, news, release, and any additional commits @harding \r\n- [x] Add author info to Suredbits post and perhaps make some small edits to be reviewed by them @harding \r\n- [x] StackExchange section @bitschmidty \r\n- [x] `Bitcoin Core #15761` @adamjonas \r\n- [x] `Bitcoin Core #17509` @dongcarl ",
          "user": {
            "login": "harding",
            "id": 61096,
            "node_id": "MDQ6VXNlcjYxMDk2",
            "avatar_url": "https://avatars.githubusercontent.com/u/61096?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/harding",
            "html_url": "https://github.com/harding",
            "followers_url": "https://api.github.com/users/harding/followers",
            "following_url": "https://api.github.com/users/harding/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/harding/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/harding/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/harding/subscriptions",
            "organizations_url": "https://api.github.com/users/harding/orgs",
            "repos_url": "https://api.github.com/users/harding/repos",
            "events_url": "https://api.github.com/users/harding/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/harding/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 3,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoinops/bitcoinops.github.io/pulls/394",
            "html_url": "https://github.com/bitcoinops/bitcoinops.github.io/pull/394",
            "diff_url": "https://github.com/bitcoinops/bitcoinops.github.io/pull/394.diff",
            "patch_url": "https://github.com/bitcoinops/bitcoinops.github.io/pull/394.patch"
          },
          "closed_at": "2020-04-29T10:23:12Z",
          "created_at": "2020-04-24T20:37:43Z",
          "updated_at": "2020-04-29T10:45:22Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "referenced",
      "id": 3273752607,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMyNzM3NTI2MDc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3273752607",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "46ed584a4ab66b8304f71b2cfd558f01ef732832",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/46ed584a4ab66b8304f71b2cfd558f01ef732832",
      "created_at": "2020-04-27T02:49:11Z"
    },
    {
      "event": "referenced",
      "id": 3274855275,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMyNzQ4NTUyNzU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3274855275",
      "actor": {
        "login": "domob1812",
        "id": 4943644,
        "node_id": "MDQ6VXNlcjQ5NDM2NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4943644?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/domob1812",
        "html_url": "https://github.com/domob1812",
        "followers_url": "https://api.github.com/users/domob1812/followers",
        "following_url": "https://api.github.com/users/domob1812/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/domob1812/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/domob1812/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/domob1812/subscriptions",
        "organizations_url": "https://api.github.com/users/domob1812/orgs",
        "repos_url": "https://api.github.com/users/domob1812/repos",
        "events_url": "https://api.github.com/users/domob1812/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/domob1812/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "03bd0d852767c4fe5cdb3243842116091691037b",
      "commit_url": "https://api.github.com/repos/domob1812/namecoin-core/commits/03bd0d852767c4fe5cdb3243842116091691037b",
      "created_at": "2020-04-27T09:30:19Z"
    },
    {
      "event": "referenced",
      "id": 3274935560,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMyNzQ5MzU1NjA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3274935560",
      "actor": {
        "login": "domob1812",
        "id": 4943644,
        "node_id": "MDQ6VXNlcjQ5NDM2NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4943644?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/domob1812",
        "html_url": "https://github.com/domob1812",
        "followers_url": "https://api.github.com/users/domob1812/followers",
        "following_url": "https://api.github.com/users/domob1812/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/domob1812/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/domob1812/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/domob1812/subscriptions",
        "organizations_url": "https://api.github.com/users/domob1812/orgs",
        "repos_url": "https://api.github.com/users/domob1812/repos",
        "events_url": "https://api.github.com/users/domob1812/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/domob1812/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "16a50a80b0dc6669bc04ea70d9bead28cce99501",
      "commit_url": "https://api.github.com/repos/domob1812/namecoin-core/commits/16a50a80b0dc6669bc04ea70d9bead28cce99501",
      "created_at": "2020-04-27T09:49:41Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "domob1812",
        "id": 4943644,
        "node_id": "MDQ6VXNlcjQ5NDM2NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4943644?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/domob1812",
        "html_url": "https://github.com/domob1812",
        "followers_url": "https://api.github.com/users/domob1812/followers",
        "following_url": "https://api.github.com/users/domob1812/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/domob1812/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/domob1812/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/domob1812/subscriptions",
        "organizations_url": "https://api.github.com/users/domob1812/orgs",
        "repos_url": "https://api.github.com/users/domob1812/repos",
        "events_url": "https://api.github.com/users/domob1812/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/domob1812/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-27T10:10:55Z",
      "updated_at": "2020-04-27T10:10:55Z",
      "source": {
        "issue": {
          "id": 607418319,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NDA5Mzk1NDU0",
          "url": "https://api.github.com/repos/satoshilabs/slips/issues/921",
          "repository_url": "https://api.github.com/repos/satoshilabs/slips",
          "labels_url": "https://api.github.com/repos/satoshilabs/slips/issues/921/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/satoshilabs/slips/issues/921/comments",
          "events_url": "https://api.github.com/repos/satoshilabs/slips/issues/921/events",
          "html_url": "https://github.com/satoshilabs/slips/pull/921",
          "number": 921,
          "state": "closed",
          "state_reason": null,
          "title": "Register SLIP-44 coin type for CHI.",
          "body": "CHI is the native coin of the [Xaya network](https://xaya.io/).  We have an [Electrum-based wallet](https://github.com/xaya/electrum-chi) based on BIP-44, as well as a [Bitcoin-Core-based wallet](https://github.com/xaya/xaya) which uses BIP-44/49/84 as well since the introduction of [descriptor wallets](https://github.com/bitcoin/bitcoin/pull/16528).  Thus we need a coin type.",
          "user": {
            "login": "domob1812",
            "id": 4943644,
            "node_id": "MDQ6VXNlcjQ5NDM2NDQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4943644?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/domob1812",
            "html_url": "https://github.com/domob1812",
            "followers_url": "https://api.github.com/users/domob1812/followers",
            "following_url": "https://api.github.com/users/domob1812/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/domob1812/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/domob1812/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/domob1812/subscriptions",
            "organizations_url": "https://api.github.com/users/domob1812/orgs",
            "repos_url": "https://api.github.com/users/domob1812/repos",
            "events_url": "https://api.github.com/users/domob1812/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/domob1812/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 0,
          "pull_request": {
            "url": "https://api.github.com/repos/satoshilabs/slips/pulls/921",
            "html_url": "https://github.com/satoshilabs/slips/pull/921",
            "diff_url": "https://github.com/satoshilabs/slips/pull/921.diff",
            "patch_url": "https://github.com/satoshilabs/slips/pull/921.patch"
          },
          "closed_at": "2020-04-27T10:22:13Z",
          "created_at": "2020-04-27T10:10:55Z",
          "updated_at": "2020-04-27T11:07:57Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-27T14:29:48Z",
      "updated_at": "2020-04-27T14:29:48Z",
      "source": {
        "issue": {
          "id": 607597606,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NDA5NTM5MTQy",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18782",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18782/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18782/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18782/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/18782",
          "number": 18782,
          "state": "closed",
          "state_reason": null,
          "title": "wallet: Make sure no DescriptorScriptPubKeyMan or WalletDescriptor members are left uninitialized after construction",
          "body": "This is a small folllow-up to #16528 (\"Native Descriptor Wallets using DescriptorScriptPubKeyMan\") which was merged in to `master` a couple of hours ago.\r\n\r\nMake sure no `DescriptorScriptPubKeyMan` or `WalletDescriptor` members are left uninitialized after construction.\r\n\r\nBefore this change `bool m_internal` was left uninitialized when using the `DescriptorScriptPubKeyMan(WalletStorage&, WalletDescriptor&)` ctor.\r\n\r\nThe same goes for the now initialized integers which were left uninitialized when using the `WalletDescriptor()` ctor.",
          "user": {
            "login": "practicalswift",
            "id": 7826565,
            "node_id": "MDQ6VXNlcjc4MjY1NjU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/practicalswift",
            "html_url": "https://github.com/practicalswift",
            "followers_url": "https://api.github.com/users/practicalswift/followers",
            "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
            "organizations_url": "https://api.github.com/users/practicalswift/orgs",
            "repos_url": "https://api.github.com/users/practicalswift/repos",
            "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/practicalswift/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 11,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18782",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/18782",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/18782.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/18782.patch"
          },
          "closed_at": "2020-05-05T03:56:31Z",
          "created_at": "2020-04-27T14:29:48Z",
          "updated_at": "2022-08-16T17:19:27Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 620024560,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYyMDAyNDU2MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/620024560",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-27T14:31:32Z",
      "updated_at": "2020-04-27T14:31:32Z",
      "author_association": "CONTRIBUTOR",
      "body": "People interested in this recently merged PR might be interested in reviewing the small follow-up PR #18782 (\"wallet: Make sure no DescriptorScriptPubKeyMan or WalletDescriptor members are left uninitialized after construction\") :)",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-620024560",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16528"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-27T19:51:09Z",
      "updated_at": "2020-04-27T19:51:09Z",
      "source": {
        "issue": {
          "id": 607809166,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NDA5NzEwODY4",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18787",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18787/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18787/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18787/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/18787",
          "number": 18787,
          "state": "closed",
          "state_reason": null,
          "title": "wallet: descriptor wallet release notes and cleanups",
          "body": "Some docs and cleanup following #16528.\r\n\r\n* Added release notes to explain a bit of motivation for descriptor wallets, what was changed, and how users will be effected by it. Also mentions the caveats regarding multsigs and watchonly that we have discussed on IRC.\r\n* Adds a warning to `createwallet` that descriptor wallets are experimental.\r\n* Removed unused `SetCrypted` as suggestioned: https://github.com/bitcoin/bitcoin/pull/16528#discussion_r415300916\r\n* Removed `m_address_type` as mentioned in https://github.com/bitcoin/bitcoin/pull/18782#issuecomment-620167077",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 8,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18787",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/18787",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/18787.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/18787.patch"
          },
          "closed_at": "2020-05-22T02:22:53Z",
          "created_at": "2020-04-27T19:51:08Z",
          "updated_at": "2022-02-15T10:59:00Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-27T19:57:57Z",
      "updated_at": "2020-04-27T19:57:57Z",
      "source": {
        "issue": {
          "id": 607813119,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NDA5NzE0MDg2",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18788",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18788/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18788/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18788/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/18788",
          "number": 18788,
          "state": "closed",
          "state_reason": null,
          "title": "tests: Update more tests to work with descriptor wallets",
          "body": "I went through all the tests and checked whether they passed with descriptor wallets. This partially informed some changes in #16528. Some tests needed changes to work with descriptor wallets. These were primarily due to import and watchonly behavior. There are some tests and test cases that only test legacy wallet behavior so those tests won't be run with descriptor wallets.\r\n\r\nThis PR updates more tests to have to the `--descriptors` switch in `test_runner.py`. Additionally a mutually exclusive `--legacy-wallet` option has been added to force legacy wallets. This does nothing currently but will be useful in the future when descriptor wallets are the default. For the tests that rely on legacy wallet behavior, this option is being set so that we don't forget in the future. Those tests are `feature_segwit.py`, `wallet_watchonly.py`, `wallet_implicitsegwit.py`, `wallet_import_with_label.py`, and `wallet_import_with_label.py`.\r\n\r\nIf you invert the `--descriptors`/`--legacy-wallet` default so that descriptor wallets are the default, all tests (besides the legacy wallet specific ones) will pass.",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 62963516,
              "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
              "name": "Tests",
              "color": "d4c5f9",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "milestone": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/45",
            "html_url": "https://github.com/bitcoin/bitcoin/milestone/45",
            "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/45/labels",
            "id": 4914019,
            "node_id": "MDk6TWlsZXN0b25lNDkxNDAxOQ==",
            "number": 45,
            "state": "closed",
            "title": "0.21.0",
            "description": "",
            "creator": {
              "login": "laanwj",
              "id": 126646,
              "node_id": "MDQ6VXNlcjEyNjY0Ng==",
              "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/laanwj",
              "html_url": "https://github.com/laanwj",
              "followers_url": "https://api.github.com/users/laanwj/followers",
              "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
              "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
              "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
              "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
              "organizations_url": "https://api.github.com/users/laanwj/orgs",
              "repos_url": "https://api.github.com/users/laanwj/repos",
              "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
              "received_events_url": "https://api.github.com/users/laanwj/received_events",
              "type": "User",
              "site_admin": false
            },
            "open_issues": 0,
            "closed_issues": 132,
            "created_at": "2019-12-09T08:39:58Z",
            "updated_at": "2021-01-15T19:50:53Z",
            "closed_at": "2021-01-15T19:50:53Z"
          },
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 18,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18788",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/18788",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/18788.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/18788.patch"
          },
          "closed_at": "2020-11-02T17:52:38Z",
          "created_at": "2020-04-27T19:57:57Z",
          "updated_at": "2022-02-15T10:48:33Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "referenced",
      "id": 3302502219,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMzMDI1MDIyMTk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3302502219",
      "actor": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "ec79b5f86b22ad8f77c736f9bb76c2e4d7faeaa4",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec79b5f86b22ad8f77c736f9bb76c2e4d7faeaa4",
      "created_at": "2020-05-05T03:56:18Z"
    },
    {
      "event": "referenced",
      "id": 3304467220,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMzMDQ0NjcyMjA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3304467220",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "31e63beaae2e8efcee42c162bce33df270272caf",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/31e63beaae2e8efcee42c162bce33df270272caf",
      "created_at": "2020-05-05T14:21:41Z"
    },
    {
      "event": "referenced",
      "id": 3362984303,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMzNjI5ODQzMDM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3362984303",
      "actor": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "df303ceb650521dc7b1ba91e0eea383c387a5860",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df303ceb650521dc7b1ba91e0eea383c387a5860",
      "created_at": "2020-05-22T02:22:30Z"
    },
    {
      "event": "referenced",
      "id": 3363325174,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMzNjMzMjUxNzQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3363325174",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "5c5677cfefeaeb9cba7dcef6a1e4934c1f664e86",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/5c5677cfefeaeb9cba7dcef6a1e4934c1f664e86",
      "created_at": "2020-05-22T05:44:32Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "AdamISZ",
        "id": 4278257,
        "node_id": "MDQ6VXNlcjQyNzgyNTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4278257?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/AdamISZ",
        "html_url": "https://github.com/AdamISZ",
        "followers_url": "https://api.github.com/users/AdamISZ/followers",
        "following_url": "https://api.github.com/users/AdamISZ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/AdamISZ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/AdamISZ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/AdamISZ/subscriptions",
        "organizations_url": "https://api.github.com/users/AdamISZ/orgs",
        "repos_url": "https://api.github.com/users/AdamISZ/repos",
        "events_url": "https://api.github.com/users/AdamISZ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/AdamISZ/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-26T15:24:03Z",
      "updated_at": "2020-07-26T15:24:03Z",
      "source": {
        "issue": {
          "id": 659740002,
          "node_id": "MDU6SXNzdWU2NTk3NDAwMDI=",
          "url": "https://api.github.com/repos/JoinMarket-Org/joinmarket-clientserver/issues/639",
          "repository_url": "https://api.github.com/repos/JoinMarket-Org/joinmarket-clientserver",
          "labels_url": "https://api.github.com/repos/JoinMarket-Org/joinmarket-clientserver/issues/639/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/JoinMarket-Org/joinmarket-clientserver/issues/639/comments",
          "events_url": "https://api.github.com/repos/JoinMarket-Org/joinmarket-clientserver/issues/639/events",
          "html_url": "https://github.com/JoinMarket-Org/joinmarket-clientserver/issues/639",
          "number": 639,
          "state": "closed",
          "state_reason": "completed",
          "title": "JoinMarketQt Wallet > Export keys is broken",
          "body": "In current master after pressing \"Export\" button it gives error:\r\n\r\n![image](https://user-images.githubusercontent.com/4500994/87838435-c2b1aa00-c89f-11ea-9f27-b861c67b22eb.png)\r\n\r\nThat doesn't happen in v0.6.3.1 with the same wallet.\r\n\r\nBut I'm not sure it works as expected even there, as I haven't used it before.\r\n\r\nIt just outputs some single random address from wallet with a privkey and then after pressing \"Export\" button saves it to hardcoded .json file in datadir. Shouldn't it export a lot of addresses / keys?",
          "user": {
            "login": "kristapsk",
            "id": 4500994,
            "node_id": "MDQ6VXNlcjQ1MDA5OTQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4500994?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/kristapsk",
            "html_url": "https://github.com/kristapsk",
            "followers_url": "https://api.github.com/users/kristapsk/followers",
            "following_url": "https://api.github.com/users/kristapsk/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/kristapsk/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/kristapsk/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/kristapsk/subscriptions",
            "organizations_url": "https://api.github.com/users/kristapsk/orgs",
            "repos_url": "https://api.github.com/users/kristapsk/repos",
            "events_url": "https://api.github.com/users/kristapsk/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/kristapsk/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 486873885,
              "node_id": "MDU6TGFiZWw0ODY4NzM4ODU=",
              "url": "https://api.github.com/repos/JoinMarket-Org/joinmarket-clientserver/labels/bug",
              "name": "bug",
              "color": "ee0701",
              "default": true
            },
            {
              "id": 512351188,
              "node_id": "MDU6TGFiZWw1MTIzNTExODg=",
              "url": "https://api.github.com/repos/JoinMarket-Org/joinmarket-clientserver/labels/Joinmarket-Qt",
              "name": "Joinmarket-Qt",
              "color": "fbca04",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 7,
          "closed_at": "2020-07-28T20:49:23Z",
          "created_at": "2020-07-17T23:40:39Z",
          "updated_at": "2020-07-28T20:49:23Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-16T22:37:11Z",
      "updated_at": "2020-08-16T22:37:11Z",
      "source": {
        "issue": {
          "id": 679840447,
          "node_id": "MDU6SXNzdWU2Nzk4NDA0NDc=",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19737",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19737/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19737/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19737/events",
          "html_url": "https://github.com/bitcoin/bitcoin/issues/19737",
          "number": 19737,
          "state": "closed",
          "state_reason": "completed",
          "title": "signrawtransactionwithwallet fails to sign non-wallet inputs (0.20 only; before/after already fixed)",
          "body": "#17204 introduced a test that uses `signrawtransactionwithwallet` to sign a non-wallet input (providing the necessary solution as a param).\r\n\r\nAt least 0.20 didn't allow this. Bisect reveals that the behaviour change was in bde7c9fa38775a81d53ac0484fa9c98076a0c7d1 (part of #16528, descriptor wallets).\r\n\r\nIs this change intended behaviour, or a bug?",
          "user": {
            "login": "luke-jr",
            "id": 1095675,
            "node_id": "MDQ6VXNlcjEwOTU2NzU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/luke-jr",
            "html_url": "https://github.com/luke-jr",
            "followers_url": "https://api.github.com/users/luke-jr/followers",
            "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
            "organizations_url": "https://api.github.com/users/luke-jr/orgs",
            "repos_url": "https://api.github.com/users/luke-jr/repos",
            "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/luke-jr/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 64585,
              "node_id": "MDU6TGFiZWw2NDU4NQ==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Bug",
              "name": "Bug",
              "color": "FBBAAB",
              "default": false
            },
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 2,
          "closed_at": "2020-12-11T07:39:31Z",
          "created_at": "2020-08-16T22:37:11Z",
          "updated_at": "2022-02-15T10:49:33Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "Bosch-0",
        "id": 55287964,
        "node_id": "MDQ6VXNlcjU1Mjg3OTY0",
        "avatar_url": "https://avatars.githubusercontent.com/u/55287964?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Bosch-0",
        "html_url": "https://github.com/Bosch-0",
        "followers_url": "https://api.github.com/users/Bosch-0/followers",
        "following_url": "https://api.github.com/users/Bosch-0/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Bosch-0/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Bosch-0/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Bosch-0/subscriptions",
        "organizations_url": "https://api.github.com/users/Bosch-0/orgs",
        "repos_url": "https://api.github.com/users/Bosch-0/repos",
        "events_url": "https://api.github.com/users/Bosch-0/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Bosch-0/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-04T06:14:00Z",
      "updated_at": "2020-09-04T06:14:00Z",
      "source": {
        "issue": {
          "id": 692768241,
          "node_id": "MDU6SXNzdWU2OTI3NjgyNDE=",
          "url": "https://api.github.com/repos/unchained-capital/caravan/issues/177",
          "repository_url": "https://api.github.com/repos/unchained-capital/caravan",
          "labels_url": "https://api.github.com/repos/unchained-capital/caravan/issues/177/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/unchained-capital/caravan/issues/177/comments",
          "events_url": "https://api.github.com/repos/unchained-capital/caravan/issues/177/events",
          "html_url": "https://github.com/unchained-capital/caravan/issues/177",
          "number": 177,
          "state": "open",
          "state_reason": null,
          "title": "Option to have native descriptor wallets",
          "body": "<!--- Provide a general summary of the issue in the Title above -->\r\n\r\n## I'm submitting a…\r\n\r\n<!-- Check one of the following options -->\r\n\r\n* [ ] Regression (a behavior that used to work and stopped working in a new release)\r\n* [ ] Bug report <!-- Please search GitHub for a similar issue or PR before submitting -->\r\n* [X] Feature request\r\n* [ ] Documentation issue or request\r\n* [ ] Support request\r\n\r\n## Expected Behavior\r\n\r\nOption to have native descriptor wallets instead of current xpub / derivation path format. No wallets are currently using descriptors AFAIK it would be good to see caravan as one of the first to use this feature. It would make wallet backs more failproof / lead to a overall better UX. \r\n\r\nThese could be used as an optional feature at first but eventually these types of wallets should be pushed for as the standard for wallet backups. \r\n\r\nhttps://github.com/bitcoin/bitcoin/pull/16528\r\n[Video explaining Native Descriptor Wallets ](https://www.youtube.com/watch?v=xC25NzIjzog)\r\n\r\n\r\n",
          "user": {
            "login": "Bosch-0",
            "id": 55287964,
            "node_id": "MDQ6VXNlcjU1Mjg3OTY0",
            "avatar_url": "https://avatars.githubusercontent.com/u/55287964?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Bosch-0",
            "html_url": "https://github.com/Bosch-0",
            "followers_url": "https://api.github.com/users/Bosch-0/followers",
            "following_url": "https://api.github.com/users/Bosch-0/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/Bosch-0/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/Bosch-0/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/Bosch-0/subscriptions",
            "organizations_url": "https://api.github.com/users/Bosch-0/orgs",
            "repos_url": "https://api.github.com/users/Bosch-0/repos",
            "events_url": "https://api.github.com/users/Bosch-0/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/Bosch-0/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "NONE",
          "locked": false,
          "comments": 0,
          "created_at": "2020-09-04T06:14:00Z",
          "updated_at": "2020-09-04T06:14:00Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "referenced",
      "id": 3949365616,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM5NDkzNjU2MTY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3949365616",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "ef4c7c4e0bf26d2cde5a85a60c7d865d50fd37ec",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef4c7c4e0bf26d2cde5a85a60c7d865d50fd37ec",
      "created_at": "2020-11-02T17:51:20Z"
    },
    {
      "event": "referenced",
      "id": 3980858716,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM5ODA4NTg3MTY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3980858716",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "a6e65a2c6e6344c614dbacadedba61be7d6f624e",
      "commit_url": "https://api.github.com/repos/syscoin-core/syscoin/commits/a6e65a2c6e6344c614dbacadedba61be7d6f624e",
      "created_at": "2020-11-10T20:39:49Z"
    },
    {
      "event": "referenced",
      "id": 3996742994,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM5OTY3NDI5OTQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3996742994",
      "actor": {
        "login": "jasonbcox",
        "id": 602513,
        "node_id": "MDQ6VXNlcjYwMjUxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/602513?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jasonbcox",
        "html_url": "https://github.com/jasonbcox",
        "followers_url": "https://api.github.com/users/jasonbcox/followers",
        "following_url": "https://api.github.com/users/jasonbcox/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jasonbcox/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jasonbcox/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jasonbcox/subscriptions",
        "organizations_url": "https://api.github.com/users/jasonbcox/orgs",
        "repos_url": "https://api.github.com/users/jasonbcox/repos",
        "events_url": "https://api.github.com/users/jasonbcox/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jasonbcox/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "1d9ce974373b4002698ef2cdd9af52b66d2a2987",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/1d9ce974373b4002698ef2cdd9af52b66d2a2987",
      "created_at": "2020-11-14T20:34:12Z"
    },
    {
      "event": "referenced",
      "id": 3996757475,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM5OTY3NTc0NzU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3996757475",
      "actor": {
        "login": "jasonbcox",
        "id": 602513,
        "node_id": "MDQ6VXNlcjYwMjUxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/602513?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jasonbcox",
        "html_url": "https://github.com/jasonbcox",
        "followers_url": "https://api.github.com/users/jasonbcox/followers",
        "following_url": "https://api.github.com/users/jasonbcox/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jasonbcox/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jasonbcox/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jasonbcox/subscriptions",
        "organizations_url": "https://api.github.com/users/jasonbcox/orgs",
        "repos_url": "https://api.github.com/users/jasonbcox/repos",
        "events_url": "https://api.github.com/users/jasonbcox/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jasonbcox/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "ec3e0eb46de9d752e45de1c78cf9d3251997984c",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/ec3e0eb46de9d752e45de1c78cf9d3251997984c",
      "created_at": "2020-11-14T20:55:43Z"
    },
    {
      "event": "referenced",
      "id": 3996759450,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM5OTY3NTk0NTA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3996759450",
      "actor": {
        "login": "jasonbcox",
        "id": 602513,
        "node_id": "MDQ6VXNlcjYwMjUxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/602513?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jasonbcox",
        "html_url": "https://github.com/jasonbcox",
        "followers_url": "https://api.github.com/users/jasonbcox/followers",
        "following_url": "https://api.github.com/users/jasonbcox/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jasonbcox/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jasonbcox/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jasonbcox/subscriptions",
        "organizations_url": "https://api.github.com/users/jasonbcox/orgs",
        "repos_url": "https://api.github.com/users/jasonbcox/repos",
        "events_url": "https://api.github.com/users/jasonbcox/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jasonbcox/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "8df16fce7c96885a64772b4f401de7e9d5ee72db",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/8df16fce7c96885a64772b4f401de7e9d5ee72db",
      "created_at": "2020-11-14T20:58:48Z"
    },
    {
      "event": "referenced",
      "id": 3996759451,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM5OTY3NTk0NTE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3996759451",
      "actor": {
        "login": "jasonbcox",
        "id": 602513,
        "node_id": "MDQ6VXNlcjYwMjUxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/602513?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jasonbcox",
        "html_url": "https://github.com/jasonbcox",
        "followers_url": "https://api.github.com/users/jasonbcox/followers",
        "following_url": "https://api.github.com/users/jasonbcox/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jasonbcox/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jasonbcox/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jasonbcox/subscriptions",
        "organizations_url": "https://api.github.com/users/jasonbcox/orgs",
        "repos_url": "https://api.github.com/users/jasonbcox/repos",
        "events_url": "https://api.github.com/users/jasonbcox/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jasonbcox/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "e9201a674f1e9c461cbd5f13931fa0ecf4504c82",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/e9201a674f1e9c461cbd5f13931fa0ecf4504c82",
      "created_at": "2020-11-14T20:58:48Z"
    },
    {
      "event": "referenced",
      "id": 3996761353,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM5OTY3NjEzNTM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3996761353",
      "actor": {
        "login": "jasonbcox",
        "id": 602513,
        "node_id": "MDQ6VXNlcjYwMjUxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/602513?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jasonbcox",
        "html_url": "https://github.com/jasonbcox",
        "followers_url": "https://api.github.com/users/jasonbcox/followers",
        "following_url": "https://api.github.com/users/jasonbcox/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jasonbcox/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jasonbcox/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jasonbcox/subscriptions",
        "organizations_url": "https://api.github.com/users/jasonbcox/orgs",
        "repos_url": "https://api.github.com/users/jasonbcox/repos",
        "events_url": "https://api.github.com/users/jasonbcox/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jasonbcox/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "f71ec45eb0bee9420962a14a497fb69e402af184",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/f71ec45eb0bee9420962a14a497fb69e402af184",
      "created_at": "2020-11-14T21:01:47Z"
    },
    {
      "event": "referenced",
      "id": 3996829912,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM5OTY4Mjk5MTI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3996829912",
      "actor": {
        "login": "jasonbcox",
        "id": 602513,
        "node_id": "MDQ6VXNlcjYwMjUxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/602513?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jasonbcox",
        "html_url": "https://github.com/jasonbcox",
        "followers_url": "https://api.github.com/users/jasonbcox/followers",
        "following_url": "https://api.github.com/users/jasonbcox/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jasonbcox/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jasonbcox/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jasonbcox/subscriptions",
        "organizations_url": "https://api.github.com/users/jasonbcox/orgs",
        "repos_url": "https://api.github.com/users/jasonbcox/repos",
        "events_url": "https://api.github.com/users/jasonbcox/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jasonbcox/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "9549dd30e3ea65008ddd8d485e724bd3bd3a75a2",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/9549dd30e3ea65008ddd8d485e724bd3bd3a75a2",
      "created_at": "2020-11-14T22:52:54Z"
    },
    {
      "event": "referenced",
      "id": 3996831666,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM5OTY4MzE2NjY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3996831666",
      "actor": {
        "login": "jasonbcox",
        "id": 602513,
        "node_id": "MDQ6VXNlcjYwMjUxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/602513?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jasonbcox",
        "html_url": "https://github.com/jasonbcox",
        "followers_url": "https://api.github.com/users/jasonbcox/followers",
        "following_url": "https://api.github.com/users/jasonbcox/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jasonbcox/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jasonbcox/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jasonbcox/subscriptions",
        "organizations_url": "https://api.github.com/users/jasonbcox/orgs",
        "repos_url": "https://api.github.com/users/jasonbcox/repos",
        "events_url": "https://api.github.com/users/jasonbcox/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jasonbcox/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "58e5c16a1edf4cb55493bd39f76dae9dab9c4d70",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/58e5c16a1edf4cb55493bd39f76dae9dab9c4d70",
      "created_at": "2020-11-14T22:56:08Z"
    },
    {
      "event": "referenced",
      "id": 3996834654,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM5OTY4MzQ2NTQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3996834654",
      "actor": {
        "login": "jasonbcox",
        "id": 602513,
        "node_id": "MDQ6VXNlcjYwMjUxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/602513?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jasonbcox",
        "html_url": "https://github.com/jasonbcox",
        "followers_url": "https://api.github.com/users/jasonbcox/followers",
        "following_url": "https://api.github.com/users/jasonbcox/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jasonbcox/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jasonbcox/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jasonbcox/subscriptions",
        "organizations_url": "https://api.github.com/users/jasonbcox/orgs",
        "repos_url": "https://api.github.com/users/jasonbcox/repos",
        "events_url": "https://api.github.com/users/jasonbcox/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jasonbcox/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "3f54b658373385b086ce0c3a0e020351f124fac6",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/3f54b658373385b086ce0c3a0e020351f124fac6",
      "created_at": "2020-11-14T23:01:32Z"
    },
    {
      "event": "referenced",
      "id": 3996836623,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM5OTY4MzY2MjM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3996836623",
      "actor": {
        "login": "jasonbcox",
        "id": 602513,
        "node_id": "MDQ6VXNlcjYwMjUxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/602513?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jasonbcox",
        "html_url": "https://github.com/jasonbcox",
        "followers_url": "https://api.github.com/users/jasonbcox/followers",
        "following_url": "https://api.github.com/users/jasonbcox/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jasonbcox/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jasonbcox/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jasonbcox/subscriptions",
        "organizations_url": "https://api.github.com/users/jasonbcox/orgs",
        "repos_url": "https://api.github.com/users/jasonbcox/repos",
        "events_url": "https://api.github.com/users/jasonbcox/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jasonbcox/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "fa34b26b0851cb7c82faf56925ba4db4c43ebdb6",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/fa34b26b0851cb7c82faf56925ba4db4c43ebdb6",
      "created_at": "2020-11-14T23:04:51Z"
    },
    {
      "event": "referenced",
      "id": 3996884752,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM5OTY4ODQ3NTI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3996884752",
      "actor": {
        "login": "deadalnix",
        "id": 854121,
        "node_id": "MDQ6VXNlcjg1NDEyMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/854121?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/deadalnix",
        "html_url": "https://github.com/deadalnix",
        "followers_url": "https://api.github.com/users/deadalnix/followers",
        "following_url": "https://api.github.com/users/deadalnix/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/deadalnix/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/deadalnix/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/deadalnix/subscriptions",
        "organizations_url": "https://api.github.com/users/deadalnix/orgs",
        "repos_url": "https://api.github.com/users/deadalnix/repos",
        "events_url": "https://api.github.com/users/deadalnix/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/deadalnix/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "8d87af1d95e358ccbcb8b9e58771f0c792016b9f",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/8d87af1d95e358ccbcb8b9e58771f0c792016b9f",
      "created_at": "2020-11-15T00:35:07Z"
    },
    {
      "event": "referenced",
      "id": 3996894475,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM5OTY4OTQ0NzU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3996894475",
      "actor": {
        "login": "jasonbcox",
        "id": 602513,
        "node_id": "MDQ6VXNlcjYwMjUxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/602513?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jasonbcox",
        "html_url": "https://github.com/jasonbcox",
        "followers_url": "https://api.github.com/users/jasonbcox/followers",
        "following_url": "https://api.github.com/users/jasonbcox/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jasonbcox/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jasonbcox/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jasonbcox/subscriptions",
        "organizations_url": "https://api.github.com/users/jasonbcox/orgs",
        "repos_url": "https://api.github.com/users/jasonbcox/repos",
        "events_url": "https://api.github.com/users/jasonbcox/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jasonbcox/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "26d8378ff2a506ac63df6713067b3655ed55cde6",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/26d8378ff2a506ac63df6713067b3655ed55cde6",
      "created_at": "2020-11-15T00:54:16Z"
    },
    {
      "event": "referenced",
      "id": 3996894477,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM5OTY4OTQ0Nzc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3996894477",
      "actor": {
        "login": "jasonbcox",
        "id": 602513,
        "node_id": "MDQ6VXNlcjYwMjUxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/602513?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jasonbcox",
        "html_url": "https://github.com/jasonbcox",
        "followers_url": "https://api.github.com/users/jasonbcox/followers",
        "following_url": "https://api.github.com/users/jasonbcox/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jasonbcox/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jasonbcox/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jasonbcox/subscriptions",
        "organizations_url": "https://api.github.com/users/jasonbcox/orgs",
        "repos_url": "https://api.github.com/users/jasonbcox/repos",
        "events_url": "https://api.github.com/users/jasonbcox/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jasonbcox/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "519c2188002cf69437ef50040ce99facd44cbc52",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/519c2188002cf69437ef50040ce99facd44cbc52",
      "created_at": "2020-11-15T00:54:16Z"
    },
    {
      "event": "referenced",
      "id": 3996894479,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM5OTY4OTQ0Nzk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3996894479",
      "actor": {
        "login": "jasonbcox",
        "id": 602513,
        "node_id": "MDQ6VXNlcjYwMjUxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/602513?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jasonbcox",
        "html_url": "https://github.com/jasonbcox",
        "followers_url": "https://api.github.com/users/jasonbcox/followers",
        "following_url": "https://api.github.com/users/jasonbcox/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jasonbcox/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jasonbcox/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jasonbcox/subscriptions",
        "organizations_url": "https://api.github.com/users/jasonbcox/orgs",
        "repos_url": "https://api.github.com/users/jasonbcox/repos",
        "events_url": "https://api.github.com/users/jasonbcox/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jasonbcox/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "3c1c535e9545cb756a81384d495d66db26bdda2e",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/3c1c535e9545cb756a81384d495d66db26bdda2e",
      "created_at": "2020-11-15T00:54:16Z"
    },
    {
      "event": "referenced",
      "id": 3996894482,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM5OTY4OTQ0ODI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3996894482",
      "actor": {
        "login": "jasonbcox",
        "id": 602513,
        "node_id": "MDQ6VXNlcjYwMjUxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/602513?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jasonbcox",
        "html_url": "https://github.com/jasonbcox",
        "followers_url": "https://api.github.com/users/jasonbcox/followers",
        "following_url": "https://api.github.com/users/jasonbcox/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jasonbcox/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jasonbcox/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jasonbcox/subscriptions",
        "organizations_url": "https://api.github.com/users/jasonbcox/orgs",
        "repos_url": "https://api.github.com/users/jasonbcox/repos",
        "events_url": "https://api.github.com/users/jasonbcox/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jasonbcox/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "bdb10f67a26de10fa2b3341791dabdd3facaead0",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/bdb10f67a26de10fa2b3341791dabdd3facaead0",
      "created_at": "2020-11-15T00:54:16Z"
    },
    {
      "event": "referenced",
      "id": 3996896166,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM5OTY4OTYxNjY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3996896166",
      "actor": {
        "login": "jasonbcox",
        "id": 602513,
        "node_id": "MDQ6VXNlcjYwMjUxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/602513?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jasonbcox",
        "html_url": "https://github.com/jasonbcox",
        "followers_url": "https://api.github.com/users/jasonbcox/followers",
        "following_url": "https://api.github.com/users/jasonbcox/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jasonbcox/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jasonbcox/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jasonbcox/subscriptions",
        "organizations_url": "https://api.github.com/users/jasonbcox/orgs",
        "repos_url": "https://api.github.com/users/jasonbcox/repos",
        "events_url": "https://api.github.com/users/jasonbcox/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jasonbcox/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "d15b9f5026f8f9ea69cdc3bdd21ae05ade06129a",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/d15b9f5026f8f9ea69cdc3bdd21ae05ade06129a",
      "created_at": "2020-11-15T00:57:56Z"
    },
    {
      "event": "referenced",
      "id": 3996896167,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM5OTY4OTYxNjc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3996896167",
      "actor": {
        "login": "jasonbcox",
        "id": 602513,
        "node_id": "MDQ6VXNlcjYwMjUxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/602513?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jasonbcox",
        "html_url": "https://github.com/jasonbcox",
        "followers_url": "https://api.github.com/users/jasonbcox/followers",
        "following_url": "https://api.github.com/users/jasonbcox/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jasonbcox/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jasonbcox/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jasonbcox/subscriptions",
        "organizations_url": "https://api.github.com/users/jasonbcox/orgs",
        "repos_url": "https://api.github.com/users/jasonbcox/repos",
        "events_url": "https://api.github.com/users/jasonbcox/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jasonbcox/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "a493b3bce9d691d600b84958946d14e40b83b54a",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/a493b3bce9d691d600b84958946d14e40b83b54a",
      "created_at": "2020-11-15T00:57:56Z"
    },
    {
      "event": "referenced",
      "id": 3996897639,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM5OTY4OTc2Mzk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3996897639",
      "actor": {
        "login": "jasonbcox",
        "id": 602513,
        "node_id": "MDQ6VXNlcjYwMjUxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/602513?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jasonbcox",
        "html_url": "https://github.com/jasonbcox",
        "followers_url": "https://api.github.com/users/jasonbcox/followers",
        "following_url": "https://api.github.com/users/jasonbcox/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jasonbcox/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jasonbcox/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jasonbcox/subscriptions",
        "organizations_url": "https://api.github.com/users/jasonbcox/orgs",
        "repos_url": "https://api.github.com/users/jasonbcox/repos",
        "events_url": "https://api.github.com/users/jasonbcox/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jasonbcox/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "479c54739f926726c7e90939aff81990e86f7a10",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/479c54739f926726c7e90939aff81990e86f7a10",
      "created_at": "2020-11-15T01:00:56Z"
    },
    {
      "event": "referenced",
      "id": 3996925410,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM5OTY5MjU0MTA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3996925410",
      "actor": {
        "login": "jasonbcox",
        "id": 602513,
        "node_id": "MDQ6VXNlcjYwMjUxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/602513?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jasonbcox",
        "html_url": "https://github.com/jasonbcox",
        "followers_url": "https://api.github.com/users/jasonbcox/followers",
        "following_url": "https://api.github.com/users/jasonbcox/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jasonbcox/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jasonbcox/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jasonbcox/subscriptions",
        "organizations_url": "https://api.github.com/users/jasonbcox/orgs",
        "repos_url": "https://api.github.com/users/jasonbcox/repos",
        "events_url": "https://api.github.com/users/jasonbcox/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jasonbcox/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "1227eefb4e4c62cbb4ebd92db9243b3d299444da",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/1227eefb4e4c62cbb4ebd92db9243b3d299444da",
      "created_at": "2020-11-15T01:58:10Z"
    },
    {
      "event": "referenced",
      "id": 3996925415,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM5OTY5MjU0MTU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3996925415",
      "actor": {
        "login": "jasonbcox",
        "id": 602513,
        "node_id": "MDQ6VXNlcjYwMjUxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/602513?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jasonbcox",
        "html_url": "https://github.com/jasonbcox",
        "followers_url": "https://api.github.com/users/jasonbcox/followers",
        "following_url": "https://api.github.com/users/jasonbcox/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jasonbcox/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jasonbcox/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jasonbcox/subscriptions",
        "organizations_url": "https://api.github.com/users/jasonbcox/orgs",
        "repos_url": "https://api.github.com/users/jasonbcox/repos",
        "events_url": "https://api.github.com/users/jasonbcox/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jasonbcox/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "8810118223625bb478bf958d9ceb8fdcd09c1a79",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/8810118223625bb478bf958d9ceb8fdcd09c1a79",
      "created_at": "2020-11-15T01:58:10Z"
    },
    {
      "event": "referenced",
      "id": 4001111169,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQwMDExMTExNjk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4001111169",
      "actor": {
        "login": "jasonbcox",
        "id": 602513,
        "node_id": "MDQ6VXNlcjYwMjUxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/602513?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jasonbcox",
        "html_url": "https://github.com/jasonbcox",
        "followers_url": "https://api.github.com/users/jasonbcox/followers",
        "following_url": "https://api.github.com/users/jasonbcox/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jasonbcox/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jasonbcox/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jasonbcox/subscriptions",
        "organizations_url": "https://api.github.com/users/jasonbcox/orgs",
        "repos_url": "https://api.github.com/users/jasonbcox/repos",
        "events_url": "https://api.github.com/users/jasonbcox/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jasonbcox/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "20931601ca6d35d52c26ec6845d5239f7c2498dc",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/20931601ca6d35d52c26ec6845d5239f7c2498dc",
      "created_at": "2020-11-16T16:11:01Z"
    },
    {
      "event": "referenced",
      "id": 4002264224,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQwMDIyNjQyMjQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4002264224",
      "actor": {
        "login": "jasonbcox",
        "id": 602513,
        "node_id": "MDQ6VXNlcjYwMjUxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/602513?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jasonbcox",
        "html_url": "https://github.com/jasonbcox",
        "followers_url": "https://api.github.com/users/jasonbcox/followers",
        "following_url": "https://api.github.com/users/jasonbcox/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jasonbcox/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jasonbcox/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jasonbcox/subscriptions",
        "organizations_url": "https://api.github.com/users/jasonbcox/orgs",
        "repos_url": "https://api.github.com/users/jasonbcox/repos",
        "events_url": "https://api.github.com/users/jasonbcox/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jasonbcox/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "1031d71bffdc7bca23aa702212f33d1085e58602",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/1031d71bffdc7bca23aa702212f33d1085e58602",
      "created_at": "2020-11-16T20:44:18Z"
    },
    {
      "event": "referenced",
      "id": 4002264232,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQwMDIyNjQyMzI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4002264232",
      "actor": {
        "login": "jasonbcox",
        "id": 602513,
        "node_id": "MDQ6VXNlcjYwMjUxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/602513?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jasonbcox",
        "html_url": "https://github.com/jasonbcox",
        "followers_url": "https://api.github.com/users/jasonbcox/followers",
        "following_url": "https://api.github.com/users/jasonbcox/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jasonbcox/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jasonbcox/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jasonbcox/subscriptions",
        "organizations_url": "https://api.github.com/users/jasonbcox/orgs",
        "repos_url": "https://api.github.com/users/jasonbcox/repos",
        "events_url": "https://api.github.com/users/jasonbcox/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jasonbcox/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "1390ead60fa8d89c29e66b073c68d4c5747c6df3",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/1390ead60fa8d89c29e66b073c68d4c5747c6df3",
      "created_at": "2020-11-16T20:44:18Z"
    },
    {
      "event": "referenced",
      "id": 4003212944,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQwMDMyMTI5NDQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4003212944",
      "actor": {
        "login": "jasonbcox",
        "id": 602513,
        "node_id": "MDQ6VXNlcjYwMjUxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/602513?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jasonbcox",
        "html_url": "https://github.com/jasonbcox",
        "followers_url": "https://api.github.com/users/jasonbcox/followers",
        "following_url": "https://api.github.com/users/jasonbcox/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jasonbcox/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jasonbcox/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jasonbcox/subscriptions",
        "organizations_url": "https://api.github.com/users/jasonbcox/orgs",
        "repos_url": "https://api.github.com/users/jasonbcox/repos",
        "events_url": "https://api.github.com/users/jasonbcox/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jasonbcox/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "8f3b9050ec7bff7b05b253bb8d8b259d6fbd35f5",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/8f3b9050ec7bff7b05b253bb8d8b259d6fbd35f5",
      "created_at": "2020-11-17T01:58:45Z"
    },
    {
      "event": "referenced",
      "id": 4003212946,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQwMDMyMTI5NDY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4003212946",
      "actor": {
        "login": "jasonbcox",
        "id": 602513,
        "node_id": "MDQ6VXNlcjYwMjUxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/602513?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jasonbcox",
        "html_url": "https://github.com/jasonbcox",
        "followers_url": "https://api.github.com/users/jasonbcox/followers",
        "following_url": "https://api.github.com/users/jasonbcox/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jasonbcox/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jasonbcox/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jasonbcox/subscriptions",
        "organizations_url": "https://api.github.com/users/jasonbcox/orgs",
        "repos_url": "https://api.github.com/users/jasonbcox/repos",
        "events_url": "https://api.github.com/users/jasonbcox/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jasonbcox/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "370080ae4a3a84fe4131b9adce9474c2327da124",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/370080ae4a3a84fe4131b9adce9474c2327da124",
      "created_at": "2020-11-17T01:58:45Z"
    },
    {
      "event": "referenced",
      "id": 4003220141,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQwMDMyMjAxNDE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4003220141",
      "actor": {
        "login": "jasonbcox",
        "id": 602513,
        "node_id": "MDQ6VXNlcjYwMjUxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/602513?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jasonbcox",
        "html_url": "https://github.com/jasonbcox",
        "followers_url": "https://api.github.com/users/jasonbcox/followers",
        "following_url": "https://api.github.com/users/jasonbcox/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jasonbcox/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jasonbcox/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jasonbcox/subscriptions",
        "organizations_url": "https://api.github.com/users/jasonbcox/orgs",
        "repos_url": "https://api.github.com/users/jasonbcox/repos",
        "events_url": "https://api.github.com/users/jasonbcox/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jasonbcox/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "39b171eb1f29f65bfc08af2415b1d67093d3dbb3",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/39b171eb1f29f65bfc08af2415b1d67093d3dbb3",
      "created_at": "2020-11-17T02:01:48Z"
    },
    {
      "event": "referenced",
      "id": 4012892750,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQwMTI4OTI3NTA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4012892750",
      "actor": {
        "login": "jasonbcox",
        "id": 602513,
        "node_id": "MDQ6VXNlcjYwMjUxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/602513?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jasonbcox",
        "html_url": "https://github.com/jasonbcox",
        "followers_url": "https://api.github.com/users/jasonbcox/followers",
        "following_url": "https://api.github.com/users/jasonbcox/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jasonbcox/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jasonbcox/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jasonbcox/subscriptions",
        "organizations_url": "https://api.github.com/users/jasonbcox/orgs",
        "repos_url": "https://api.github.com/users/jasonbcox/repos",
        "events_url": "https://api.github.com/users/jasonbcox/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jasonbcox/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "c3e6f224b76eb5dbbfc2b6776864163e013de205",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/c3e6f224b76eb5dbbfc2b6776864163e013de205",
      "created_at": "2020-11-18T21:43:52Z"
    },
    {
      "event": "referenced",
      "id": 4012898643,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQwMTI4OTg2NDM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4012898643",
      "actor": {
        "login": "jasonbcox",
        "id": 602513,
        "node_id": "MDQ6VXNlcjYwMjUxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/602513?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jasonbcox",
        "html_url": "https://github.com/jasonbcox",
        "followers_url": "https://api.github.com/users/jasonbcox/followers",
        "following_url": "https://api.github.com/users/jasonbcox/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jasonbcox/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jasonbcox/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jasonbcox/subscriptions",
        "organizations_url": "https://api.github.com/users/jasonbcox/orgs",
        "repos_url": "https://api.github.com/users/jasonbcox/repos",
        "events_url": "https://api.github.com/users/jasonbcox/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jasonbcox/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "d9256979b0ff932bee047a96da113bc85d047826",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/d9256979b0ff932bee047a96da113bc85d047826",
      "created_at": "2020-11-18T21:45:26Z"
    },
    {
      "event": "referenced",
      "id": 4013062642,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQwMTMwNjI2NDI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4013062642",
      "actor": {
        "login": "jasonbcox",
        "id": 602513,
        "node_id": "MDQ6VXNlcjYwMjUxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/602513?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jasonbcox",
        "html_url": "https://github.com/jasonbcox",
        "followers_url": "https://api.github.com/users/jasonbcox/followers",
        "following_url": "https://api.github.com/users/jasonbcox/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jasonbcox/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jasonbcox/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jasonbcox/subscriptions",
        "organizations_url": "https://api.github.com/users/jasonbcox/orgs",
        "repos_url": "https://api.github.com/users/jasonbcox/repos",
        "events_url": "https://api.github.com/users/jasonbcox/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jasonbcox/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "79aee7021f5ac13269c715d6b3b2240d48116ac1",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/79aee7021f5ac13269c715d6b3b2240d48116ac1",
      "created_at": "2020-11-18T22:28:32Z"
    },
    {
      "event": "referenced",
      "id": 4013156061,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQwMTMxNTYwNjE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4013156061",
      "actor": {
        "login": "jasonbcox",
        "id": 602513,
        "node_id": "MDQ6VXNlcjYwMjUxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/602513?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jasonbcox",
        "html_url": "https://github.com/jasonbcox",
        "followers_url": "https://api.github.com/users/jasonbcox/followers",
        "following_url": "https://api.github.com/users/jasonbcox/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jasonbcox/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jasonbcox/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jasonbcox/subscriptions",
        "organizations_url": "https://api.github.com/users/jasonbcox/orgs",
        "repos_url": "https://api.github.com/users/jasonbcox/repos",
        "events_url": "https://api.github.com/users/jasonbcox/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jasonbcox/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "52063277f89e9857fa12913b8c79ea9f4d08e31c",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/52063277f89e9857fa12913b8c79ea9f4d08e31c",
      "created_at": "2020-11-18T22:55:56Z"
    },
    {
      "event": "referenced",
      "id": 4015842284,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQwMTU4NDIyODQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4015842284",
      "actor": {
        "login": "jasonbcox",
        "id": 602513,
        "node_id": "MDQ6VXNlcjYwMjUxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/602513?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jasonbcox",
        "html_url": "https://github.com/jasonbcox",
        "followers_url": "https://api.github.com/users/jasonbcox/followers",
        "following_url": "https://api.github.com/users/jasonbcox/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jasonbcox/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jasonbcox/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jasonbcox/subscriptions",
        "organizations_url": "https://api.github.com/users/jasonbcox/orgs",
        "repos_url": "https://api.github.com/users/jasonbcox/repos",
        "events_url": "https://api.github.com/users/jasonbcox/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jasonbcox/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "69c82b89f1e511e04d398814bccc8a71f848f295",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/69c82b89f1e511e04d398814bccc8a71f848f295",
      "created_at": "2020-11-19T13:28:47Z"
    },
    {
      "event": "referenced",
      "id": 4015885685,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQwMTU4ODU2ODU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4015885685",
      "actor": {
        "login": "jasonbcox",
        "id": 602513,
        "node_id": "MDQ6VXNlcjYwMjUxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/602513?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jasonbcox",
        "html_url": "https://github.com/jasonbcox",
        "followers_url": "https://api.github.com/users/jasonbcox/followers",
        "following_url": "https://api.github.com/users/jasonbcox/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jasonbcox/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jasonbcox/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jasonbcox/subscriptions",
        "organizations_url": "https://api.github.com/users/jasonbcox/orgs",
        "repos_url": "https://api.github.com/users/jasonbcox/repos",
        "events_url": "https://api.github.com/users/jasonbcox/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jasonbcox/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "f18cf5b36037cb05ba5c00d897e225fece145d1e",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/f18cf5b36037cb05ba5c00d897e225fece145d1e",
      "created_at": "2020-11-19T13:38:56Z"
    },
    {
      "event": "referenced",
      "id": 4015914930,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQwMTU5MTQ5MzA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4015914930",
      "actor": {
        "login": "jasonbcox",
        "id": 602513,
        "node_id": "MDQ6VXNlcjYwMjUxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/602513?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jasonbcox",
        "html_url": "https://github.com/jasonbcox",
        "followers_url": "https://api.github.com/users/jasonbcox/followers",
        "following_url": "https://api.github.com/users/jasonbcox/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jasonbcox/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jasonbcox/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jasonbcox/subscriptions",
        "organizations_url": "https://api.github.com/users/jasonbcox/orgs",
        "repos_url": "https://api.github.com/users/jasonbcox/repos",
        "events_url": "https://api.github.com/users/jasonbcox/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jasonbcox/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "0fcd2b0ffae7df936e57a13342c117959bd48b03",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/0fcd2b0ffae7df936e57a13342c117959bd48b03",
      "created_at": "2020-11-19T13:44:15Z"
    },
    {
      "event": "referenced",
      "id": 4015939956,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQwMTU5Mzk5NTY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4015939956",
      "actor": {
        "login": "jasonbcox",
        "id": 602513,
        "node_id": "MDQ6VXNlcjYwMjUxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/602513?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jasonbcox",
        "html_url": "https://github.com/jasonbcox",
        "followers_url": "https://api.github.com/users/jasonbcox/followers",
        "following_url": "https://api.github.com/users/jasonbcox/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jasonbcox/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jasonbcox/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jasonbcox/subscriptions",
        "organizations_url": "https://api.github.com/users/jasonbcox/orgs",
        "repos_url": "https://api.github.com/users/jasonbcox/repos",
        "events_url": "https://api.github.com/users/jasonbcox/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jasonbcox/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "2ab0aaff663c22a04d89fd083b19e3790a2ae3a5",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/2ab0aaff663c22a04d89fd083b19e3790a2ae3a5",
      "created_at": "2020-11-19T13:49:39Z"
    },
    {
      "event": "referenced",
      "id": 4015967554,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQwMTU5Njc1NTQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4015967554",
      "actor": {
        "login": "jasonbcox",
        "id": 602513,
        "node_id": "MDQ6VXNlcjYwMjUxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/602513?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jasonbcox",
        "html_url": "https://github.com/jasonbcox",
        "followers_url": "https://api.github.com/users/jasonbcox/followers",
        "following_url": "https://api.github.com/users/jasonbcox/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jasonbcox/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jasonbcox/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jasonbcox/subscriptions",
        "organizations_url": "https://api.github.com/users/jasonbcox/orgs",
        "repos_url": "https://api.github.com/users/jasonbcox/repos",
        "events_url": "https://api.github.com/users/jasonbcox/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jasonbcox/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "73cf12785f48d54242e89701bd786d28208ca586",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/73cf12785f48d54242e89701bd786d28208ca586",
      "created_at": "2020-11-19T13:55:24Z"
    },
    {
      "event": "referenced",
      "id": 4016001422,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQwMTYwMDE0MjI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4016001422",
      "actor": {
        "login": "jasonbcox",
        "id": 602513,
        "node_id": "MDQ6VXNlcjYwMjUxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/602513?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jasonbcox",
        "html_url": "https://github.com/jasonbcox",
        "followers_url": "https://api.github.com/users/jasonbcox/followers",
        "following_url": "https://api.github.com/users/jasonbcox/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jasonbcox/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jasonbcox/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jasonbcox/subscriptions",
        "organizations_url": "https://api.github.com/users/jasonbcox/orgs",
        "repos_url": "https://api.github.com/users/jasonbcox/repos",
        "events_url": "https://api.github.com/users/jasonbcox/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jasonbcox/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "36c78200690b0ac3db2224698b9ace60478a747b",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/36c78200690b0ac3db2224698b9ace60478a747b",
      "created_at": "2020-11-19T14:01:50Z"
    },
    {
      "event": "referenced",
      "id": 4017729918,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQwMTc3Mjk5MTg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4017729918",
      "actor": {
        "login": "deadalnix",
        "id": 854121,
        "node_id": "MDQ6VXNlcjg1NDEyMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/854121?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/deadalnix",
        "html_url": "https://github.com/deadalnix",
        "followers_url": "https://api.github.com/users/deadalnix/followers",
        "following_url": "https://api.github.com/users/deadalnix/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/deadalnix/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/deadalnix/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/deadalnix/subscriptions",
        "organizations_url": "https://api.github.com/users/deadalnix/orgs",
        "repos_url": "https://api.github.com/users/deadalnix/repos",
        "events_url": "https://api.github.com/users/deadalnix/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/deadalnix/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "8b377d31cd2acf90762da3024ea94e8c320594c4",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/8b377d31cd2acf90762da3024ea94e8c320594c4",
      "created_at": "2020-11-19T20:20:08Z"
    },
    {
      "event": "referenced",
      "id": 4017751793,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQwMTc3NTE3OTM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4017751793",
      "actor": {
        "login": "jasonbcox",
        "id": 602513,
        "node_id": "MDQ6VXNlcjYwMjUxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/602513?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jasonbcox",
        "html_url": "https://github.com/jasonbcox",
        "followers_url": "https://api.github.com/users/jasonbcox/followers",
        "following_url": "https://api.github.com/users/jasonbcox/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jasonbcox/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jasonbcox/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jasonbcox/subscriptions",
        "organizations_url": "https://api.github.com/users/jasonbcox/orgs",
        "repos_url": "https://api.github.com/users/jasonbcox/repos",
        "events_url": "https://api.github.com/users/jasonbcox/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jasonbcox/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "a58b36f37fc195aee897ad7ceaca1e112cccbc0e",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/a58b36f37fc195aee897ad7ceaca1e112cccbc0e",
      "created_at": "2020-11-19T20:26:13Z"
    },
    {
      "event": "referenced",
      "id": 4017815777,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQwMTc4MTU3Nzc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4017815777",
      "actor": {
        "login": "jasonbcox",
        "id": 602513,
        "node_id": "MDQ6VXNlcjYwMjUxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/602513?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jasonbcox",
        "html_url": "https://github.com/jasonbcox",
        "followers_url": "https://api.github.com/users/jasonbcox/followers",
        "following_url": "https://api.github.com/users/jasonbcox/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jasonbcox/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jasonbcox/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jasonbcox/subscriptions",
        "organizations_url": "https://api.github.com/users/jasonbcox/orgs",
        "repos_url": "https://api.github.com/users/jasonbcox/repos",
        "events_url": "https://api.github.com/users/jasonbcox/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jasonbcox/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "f53059d18e7c61afd6f0b9ea02d2d24b8a4a03c1",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/f53059d18e7c61afd6f0b9ea02d2d24b8a4a03c1",
      "created_at": "2020-11-19T20:42:46Z"
    },
    {
      "event": "referenced",
      "id": 4023993610,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQwMjM5OTM2MTA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4023993610",
      "actor": {
        "login": "jasonbcox",
        "id": 602513,
        "node_id": "MDQ6VXNlcjYwMjUxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/602513?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jasonbcox",
        "html_url": "https://github.com/jasonbcox",
        "followers_url": "https://api.github.com/users/jasonbcox/followers",
        "following_url": "https://api.github.com/users/jasonbcox/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jasonbcox/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jasonbcox/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jasonbcox/subscriptions",
        "organizations_url": "https://api.github.com/users/jasonbcox/orgs",
        "repos_url": "https://api.github.com/users/jasonbcox/repos",
        "events_url": "https://api.github.com/users/jasonbcox/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jasonbcox/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "ecaa314bf7e728a5261e45d96e13f06c1ee8f1d3",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/ecaa314bf7e728a5261e45d96e13f06c1ee8f1d3",
      "created_at": "2020-11-21T16:27:21Z"
    },
    {
      "event": "referenced",
      "id": 4024004279,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQwMjQwMDQyNzk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4024004279",
      "actor": {
        "login": "jasonbcox",
        "id": 602513,
        "node_id": "MDQ6VXNlcjYwMjUxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/602513?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jasonbcox",
        "html_url": "https://github.com/jasonbcox",
        "followers_url": "https://api.github.com/users/jasonbcox/followers",
        "following_url": "https://api.github.com/users/jasonbcox/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jasonbcox/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jasonbcox/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jasonbcox/subscriptions",
        "organizations_url": "https://api.github.com/users/jasonbcox/orgs",
        "repos_url": "https://api.github.com/users/jasonbcox/repos",
        "events_url": "https://api.github.com/users/jasonbcox/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jasonbcox/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "c321c8ac8909b89ecc7a039e7a5b1ce8407ea6de",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/c321c8ac8909b89ecc7a039e7a5b1ce8407ea6de",
      "created_at": "2020-11-21T16:41:09Z"
    },
    {
      "event": "referenced",
      "id": 4027963262,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQwMjc5NjMyNjI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4027963262",
      "actor": {
        "login": "jasonbcox",
        "id": 602513,
        "node_id": "MDQ6VXNlcjYwMjUxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/602513?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jasonbcox",
        "html_url": "https://github.com/jasonbcox",
        "followers_url": "https://api.github.com/users/jasonbcox/followers",
        "following_url": "https://api.github.com/users/jasonbcox/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jasonbcox/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jasonbcox/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jasonbcox/subscriptions",
        "organizations_url": "https://api.github.com/users/jasonbcox/orgs",
        "repos_url": "https://api.github.com/users/jasonbcox/repos",
        "events_url": "https://api.github.com/users/jasonbcox/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jasonbcox/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "f24e79e45b2ac4f1fb0b708527ff199b3df3a624",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/f24e79e45b2ac4f1fb0b708527ff199b3df3a624",
      "created_at": "2020-11-23T14:34:34Z"
    },
    {
      "event": "referenced",
      "id": 4171146364,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQxNzExNDYzNjQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4171146364",
      "actor": {
        "login": "Mengerian",
        "id": 22730787,
        "node_id": "MDQ6VXNlcjIyNzMwNzg3",
        "avatar_url": "https://avatars.githubusercontent.com/u/22730787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Mengerian",
        "html_url": "https://github.com/Mengerian",
        "followers_url": "https://api.github.com/users/Mengerian/followers",
        "following_url": "https://api.github.com/users/Mengerian/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Mengerian/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Mengerian/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Mengerian/subscriptions",
        "organizations_url": "https://api.github.com/users/Mengerian/orgs",
        "repos_url": "https://api.github.com/users/Mengerian/repos",
        "events_url": "https://api.github.com/users/Mengerian/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Mengerian/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "2cfbab661db65e4c3a67ec4293b824106d8f3df5",
      "commit_url": "https://api.github.com/repos/Mengerian/bitcoin-abc/commits/2cfbab661db65e4c3a67ec4293b824106d8f3df5",
      "created_at": "2021-01-05T17:55:38Z"
    },
    {
      "event": "referenced",
      "id": 4256655123,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQyNTY2NTUxMjM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4256655123",
      "actor": {
        "login": "Fabcien",
        "id": 44533924,
        "node_id": "MDQ6VXNlcjQ0NTMzOTI0",
        "avatar_url": "https://avatars.githubusercontent.com/u/44533924?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fabcien",
        "html_url": "https://github.com/Fabcien",
        "followers_url": "https://api.github.com/users/Fabcien/followers",
        "following_url": "https://api.github.com/users/Fabcien/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fabcien/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fabcien/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fabcien/subscriptions",
        "organizations_url": "https://api.github.com/users/Fabcien/orgs",
        "repos_url": "https://api.github.com/users/Fabcien/repos",
        "events_url": "https://api.github.com/users/Fabcien/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fabcien/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "b740449f358f6c8e6d6d822f264af6dfebf16f30",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/b740449f358f6c8e6d6d822f264af6dfebf16f30",
      "created_at": "2021-01-27T16:01:51Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-01T12:48:46Z",
      "updated_at": "2021-02-01T12:48:46Z",
      "source": {
        "issue": {
          "id": 796481921,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NTYzNjU2NTI0",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21028",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21028/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21028/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21028/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/21028",
          "number": 21028,
          "state": "closed",
          "state_reason": null,
          "title": "doc/bips: Add BIPs 43, 44, 49, and 84",
          "body": "If you don't like what they say, please suggest alternatives ;)",
          "user": {
            "login": "luke-jr",
            "id": 1095675,
            "node_id": "MDQ6VXNlcjEwOTU2NzU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/luke-jr",
            "html_url": "https://github.com/luke-jr",
            "followers_url": "https://api.github.com/users/luke-jr/followers",
            "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
            "organizations_url": "https://api.github.com/users/luke-jr/orgs",
            "repos_url": "https://api.github.com/users/luke-jr/repos",
            "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/luke-jr/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 148216,
              "node_id": "MDU6TGFiZWwxNDgyMTY=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Docs",
              "name": "Docs",
              "color": "02d7e1",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 9,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21028",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/21028",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/21028.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/21028.patch"
          },
          "closed_at": "2021-02-13T17:37:22Z",
          "created_at": "2021-01-29T00:36:49Z",
          "updated_at": "2022-08-16T17:04:24Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "referenced",
      "id": 5409100425,
      "node_id": "REFE_lADOABII584cXpjBzwAAAAFCaFKJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5409100425",
      "actor": {
        "login": "Fabcien",
        "id": 44533924,
        "node_id": "MDQ6VXNlcjQ0NTMzOTI0",
        "avatar_url": "https://avatars.githubusercontent.com/u/44533924?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fabcien",
        "html_url": "https://github.com/Fabcien",
        "followers_url": "https://api.github.com/users/Fabcien/followers",
        "following_url": "https://api.github.com/users/Fabcien/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fabcien/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fabcien/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fabcien/subscriptions",
        "organizations_url": "https://api.github.com/users/Fabcien/orgs",
        "repos_url": "https://api.github.com/users/Fabcien/repos",
        "events_url": "https://api.github.com/users/Fabcien/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fabcien/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "e854278f6db0f0da7b9186c6bf729e4b0c2ffcd5",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/e854278f6db0f0da7b9186c6bf729e4b0c2ffcd5",
      "created_at": "2021-10-05T08:41:59Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-06T18:55:04Z",
      "updated_at": "2021-10-06T18:55:04Z",
      "source": {
        "issue": {
          "id": 722711719,
          "node_id": "MDU6SXNzdWU3MjI3MTE3MTk=",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20160",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20160/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20160/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20160/events",
          "html_url": "https://github.com/bitcoin/bitcoin/issues/20160",
          "number": 20160,
          "state": "open",
          "state_reason": null,
          "title": "Proposed Timeline for Legacy Wallet and BDB removal",
          "body": "Here is a proposed timeline for the move from legacy wallets to descriptor wallets, and at the same time, bdb to sqlite, culminating with the removal of both legacy wallets and bdb. Even though the wallet type and the wallet storage format are orthogonal to each other, as noted in #19077, I would like to tie them together for the sake of simplicity when it comes to how we make new wallets and the migration of one type to another.\r\n\r\nThe 4 combinations of type and format are: legacy-bdb, legacy-sqlite, descriptor-bdb, and descriptor-sqlite. While all 4 types will be supported, we will primarily deal with legacy-bdb and descriptor-sqlite. Setting `descriptors=True` in `createwallet` (or checking the Descriptors option in the GUI) will always make a descriptor-sqlite. Setting that to `False` will always make a legacy-bdb.\r\n\r\n- [x] 0.21 (late 2020)\r\n  - [x] Initial release of descriptor type and sqlite format. (#16528, #19077)\r\n  - [x] Descriptor type is experimental with a warning as such (#16528)\r\n  - [x] Only legacy-bdb and descriptor-sqlite will be created (#19077)\r\n- [x] 22.0 (mid 2021)\r\n  - [x] Implement descriptor exports (#20226)\r\n  - [x] Legacy type remains default (no pr needed)\r\n  - [x] Introduce `dump` and `createfromdump` wallet tool commands with an additional `-format` option to specify the wallet type (#19137)\r\n    * Users may use `dump` and then `createfromdump` in order to make legacy-sqlite from legacy-bdb\r\n    * Users may use `dump` and then `createfromdump` in order to make descriptor-bdb from descriptor-sqlite\r\n  - [x] If a wallet specified in conf or command line doesn't exist, don't make a wallet and instead warn (#15454)\r\n- [x] 23.0 (early 2022)\r\n  - [x] Change descriptor type to non-experimental (#23002)\r\n  - [x] Change `createwallet` `descriptors` default to `True` (#23002)\r\n  - [x] Change wallet tool `create` `-descriptors` default to `True` (#23002)\r\n- [x] 24.0 (late 2022)\r\n  - [x] Introduce `migratewallet` command to migrate a legacy-bdb to descriptor-sqlite (#19602)\r\n  - [x] For newly created legacy-bdb wallets, warn that they are deprecated and will soon be unsupported (#24505)\r\n- [ ] 26.0 (late 2023)\r\n  - [ ] Reimplement legacy-bdb to descriptor-sqlite migration (maybe as a separate command or in the wallet tool) to be independent of `LegacyScriptPubKeyMan` and BDB (#26596)\r\n  - [ ] For `dump`, implement an independent BDB file loader (this should probably be shared with the previous) (#26606)\r\n  - [x] When loading legacy-bdb, descriptor-bdb, or legacy-sqlite wallets, warn that the legacy type and bdb format will soon be unsupported, as applicable. (#27869)\r\n- [ ] 27.0 (early 2024)\r\n  - [ ] Stop creating new legacy-bdb wallets (not yet started)\r\n  - [ ] Make the loading warning louder (not yet started)\r\n- [ ] 28.0 (late 2024)\r\n  - [ ] Stop loading legacy-bdb, descriptor-bdb, legacy-sqlite wallet entirely. Inform users how to migrate (not yet started)\r\n  - [ ] Remove `LegacyScriptPubKeyMan` except for the independent migration stuff (not yet started)\r\n  - [ ] Remove BDB except for independent loading for migration stuff (not yet started)\r\n\r\nThe migration code will probably be around for a long time/forever.\r\n\r\nNote that we expect users who go through the effort to make a legacy-sqlite or descriptor-bdb wallet to suck it up and deal with the consequences of doing something that isn't really supported. Such users should be able to figure out for themselves how to migrate their wallets. (Maybe `migratewallet` can migrate legacy-sqlite to descriptor-sqlite. bdb to sqlite is way easier than legacy to descriptor).",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 64583,
              "node_id": "MDU6TGFiZWw2NDU4Mw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Feature",
              "name": "Feature",
              "color": "7cf575",
              "default": false
            },
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "milestone": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/60",
            "html_url": "https://github.com/bitcoin/bitcoin/milestone/60",
            "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/60/labels",
            "id": 9286970,
            "node_id": "MI_kwDOABII584AjbU6",
            "number": 60,
            "state": "open",
            "title": "26.0",
            "description": "",
            "creator": {
              "login": "fanquake",
              "id": 863730,
              "node_id": "MDQ6VXNlcjg2MzczMA==",
              "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/fanquake",
              "html_url": "https://github.com/fanquake",
              "followers_url": "https://api.github.com/users/fanquake/followers",
              "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
              "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
              "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
              "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
              "organizations_url": "https://api.github.com/users/fanquake/orgs",
              "repos_url": "https://api.github.com/users/fanquake/repos",
              "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
              "received_events_url": "https://api.github.com/users/fanquake/received_events",
              "type": "User",
              "site_admin": false
            },
            "open_issues": 7,
            "closed_issues": 23,
            "created_at": "2023-04-15T11:36:05Z",
            "updated_at": "2023-08-01T16:50:00Z"
          },
          "locked": false,
          "comments": 35,
          "created_at": "2020-10-15T22:17:41Z",
          "updated_at": "2023-07-06T10:08:14Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "referenced",
      "id": 5954792332,
      "node_id": "REFE_lADOABII584cXpjBzwAAAAFi7uuM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5954792332",
      "actor": {
        "login": "Fabcien",
        "id": 44533924,
        "node_id": "MDQ6VXNlcjQ0NTMzOTI0",
        "avatar_url": "https://avatars.githubusercontent.com/u/44533924?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fabcien",
        "html_url": "https://github.com/Fabcien",
        "followers_url": "https://api.github.com/users/Fabcien/followers",
        "following_url": "https://api.github.com/users/Fabcien/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fabcien/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fabcien/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fabcien/subscriptions",
        "organizations_url": "https://api.github.com/users/Fabcien/orgs",
        "repos_url": "https://api.github.com/users/Fabcien/repos",
        "events_url": "https://api.github.com/users/Fabcien/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fabcien/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "63f2f3ea1cec59a3d2de33dec749de10e84636e9",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/63f2f3ea1cec59a3d2de33dec749de10e84636e9",
      "created_at": "2022-01-26T07:29:13Z"
    },
    {
      "event": "referenced",
      "id": 7198638162,
      "node_id": "REFE_lADOABII584cXpjBzwAAAAGtEoBS",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7198638162",
      "actor": {
        "login": "PiRK",
        "id": 419570,
        "node_id": "MDQ6VXNlcjQxOTU3MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/419570?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/PiRK",
        "html_url": "https://github.com/PiRK",
        "followers_url": "https://api.github.com/users/PiRK/followers",
        "following_url": "https://api.github.com/users/PiRK/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/PiRK/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/PiRK/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/PiRK/subscriptions",
        "organizations_url": "https://api.github.com/users/PiRK/orgs",
        "repos_url": "https://api.github.com/users/PiRK/repos",
        "events_url": "https://api.github.com/users/PiRK/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/PiRK/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "09bb4d91b9d6a100c698004e538934abdf87d745",
      "commit_url": "https://api.github.com/repos/PiRK/lotusd/commits/09bb4d91b9d6a100c698004e538934abdf87d745",
      "created_at": "2022-08-16T16:09:11Z"
    },
    {
      "event": "locked",
      "id": 7216132599,
      "node_id": "LOE_lADOABII584cXpjBzwAAAAGuHXH3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7216132599",
      "actor": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-18T17:14:14Z",
      "lock_reason": "resolved"
    },
    {
      "event": "subscribed",
      "id": 7547094747,
      "node_id": "SE_lADOABII584cXpjBzwAAAAHB14bb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7547094747",
      "actor": {
        "login": "Leylimahmud",
        "id": 99537361,
        "node_id": "U_kgDOBe7R0Q",
        "avatar_url": "https://avatars.githubusercontent.com/u/99537361?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Leylimahmud",
        "html_url": "https://github.com/Leylimahmud",
        "followers_url": "https://api.github.com/users/Leylimahmud/followers",
        "following_url": "https://api.github.com/users/Leylimahmud/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Leylimahmud/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Leylimahmud/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Leylimahmud/subscriptions",
        "organizations_url": "https://api.github.com/users/Leylimahmud/orgs",
        "repos_url": "https://api.github.com/users/Leylimahmud/repos",
        "events_url": "https://api.github.com/users/Leylimahmud/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Leylimahmud/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-10-07T23:52:42Z"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372959221",
      "pull_request_review_id": 350837022,
      "id": 372959221,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjk1OTIyMQ==",
      "diff_hunk": "@@ -83,6 +83,7 @@ static UniValue createmultisig(const JSONRPCRequest& request)\n             \"{\\n\"\n             \"  \\\"address\\\":\\\"multisigaddress\\\",  (string) The value of the new multisig address.\\n\"\n             \"  \\\"redeemScript\\\":\\\"script\\\"       (string) The string value of the hex-encoded redemption script.\\n\"\n+            \"  \\\"descriptor\\\":\\\"descriptor\\\"     (string) The descriptor for the P2SH address for this multisig\\n\"",
      "path": "src/rpc/misc.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "dd92677895de134c77b318cf7e27e2471a10842c",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Whether it's P2SH depends on `address_type`, so maybe just say \"The descriptor for this multisig address\\\"",
      "created_at": "2020-01-30T13:53:17Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r372959221",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372959221"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 86,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372983424",
      "pull_request_review_id": 350837022,
      "id": 372983424,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjk4MzQyNA==",
      "diff_hunk": "@@ -1486,11 +1486,6 @@ bool DescriptorScriptPubKeyMan::CanGetAddresses(bool internal)\n     return false;\n }\n \n-bool DescriptorScriptPubKeyMan::Upgrade(int prev_version, std::string& error)",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "e40a833c3bffb0cf723357238eb809398e3e5237",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In  e40a833c3bffb0cf723357238eb809398e3e5237 `Create LegacyScriptPubKeyMan when not a descriptor wallet`: accidentally dropping `Upgrade()`?",
      "created_at": "2020-01-30T14:34:32Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r372983424",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372983424"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1489,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372985994",
      "pull_request_review_id": 350837022,
      "id": 372985994,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjk4NTk5NA==",
      "diff_hunk": "@@ -467,4 +468,52 @@ class LegacySigningProvider : public SigningProvider\n     bool GetKeyOrigin(const CKeyID& keyid, KeyOriginInfo& info) const override { return m_spk_man.GetKeyOrigin(keyid, info); }\n };\n \n+class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n+{\n+public:\n+    using ScriptPubKeyMan::ScriptPubKeyMan;\n+\n+    bool GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error) override;\n+    isminetype IsMine(const CScript& script) const override;\n+\n+    bool CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys = false) override;\n+    bool Encrypt(const CKeyingMaterial& master_key, WalletBatch* batch) override;\n+\n+    bool GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool) override;\n+    void KeepDestination(int64_t index) override;",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": null,
      "original_position": 24,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "3f6cbc5bb16f8a021bbe88d998b12698205aaeac",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The new dummy class in 3f6cbc5bb16f8a021bbe88d998b12698205aaeac introduces several compiler problems (rebase slippage?), e.g:\r\n```\r\n./wallet/scriptpubkeyman.h:483:41: error: non-virtual member function marked 'override' hides virtual member function\r\n    void KeepDestination(int64_t index) override;\r\n```",
      "created_at": "2020-01-30T14:38:58Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r372985994",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372985994"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 483,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/373229817",
      "pull_request_review_id": 351188746,
      "id": 373229817,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIyOTgxNw==",
      "diff_hunk": "@@ -83,6 +83,7 @@ static UniValue createmultisig(const JSONRPCRequest& request)\n             \"{\\n\"\n             \"  \\\"address\\\":\\\"multisigaddress\\\",  (string) The value of the new multisig address.\\n\"\n             \"  \\\"redeemScript\\\":\\\"script\\\"       (string) The string value of the hex-encoded redemption script.\\n\"\n+            \"  \\\"descriptor\\\":\\\"descriptor\\\"     (string) The descriptor for the P2SH address for this multisig\\n\"",
      "path": "src/rpc/misc.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "dd92677895de134c77b318cf7e27e2471a10842c",
      "in_reply_to_id": 372959221,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Dropped the commit, but fixed in the separate PR for descriptors in `createmultisig`",
      "created_at": "2020-01-30T22:32:23Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r373229817",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/373229817"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 86,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/373229896",
      "pull_request_review_id": 351188848,
      "id": 373229896,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIyOTg5Ng==",
      "diff_hunk": "@@ -1486,11 +1486,6 @@ bool DescriptorScriptPubKeyMan::CanGetAddresses(bool internal)\n     return false;\n }\n \n-bool DescriptorScriptPubKeyMan::Upgrade(int prev_version, std::string& error)",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "e40a833c3bffb0cf723357238eb809398e3e5237",
      "in_reply_to_id": 372983424,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It should be dropped, but not in that commit. Moved it to the dummy class definition.",
      "created_at": "2020-01-30T22:32:38Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r373229896",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/373229896"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1489,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/373230082",
      "pull_request_review_id": 351189052,
      "id": 373230082,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIzMDA4Mg==",
      "diff_hunk": "@@ -467,4 +468,52 @@ class LegacySigningProvider : public SigningProvider\n     bool GetKeyOrigin(const CKeyID& keyid, KeyOriginInfo& info) const override { return m_spk_man.GetKeyOrigin(keyid, info); }\n };\n \n+class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n+{\n+public:\n+    using ScriptPubKeyMan::ScriptPubKeyMan;\n+\n+    bool GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error) override;\n+    isminetype IsMine(const CScript& script) const override;\n+\n+    bool CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys = false) override;\n+    bool Encrypt(const CKeyingMaterial& master_key, WalletBatch* batch) override;\n+\n+    bool GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool) override;\n+    void KeepDestination(int64_t index) override;",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": null,
      "original_position": 24,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "3f6cbc5bb16f8a021bbe88d998b12698205aaeac",
      "in_reply_to_id": 372985994,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Since this gets dropped later, dropped this at the dummy class definition.",
      "created_at": "2020-01-30T22:33:04Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r373230082",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/373230082"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 483,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/373572192",
      "pull_request_review_id": 351628547,
      "id": 373572192,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU3MjE5Mg==",
      "diff_hunk": "@@ -467,4 +468,49 @@ class LegacySigningProvider : public SigningProvider\n     bool GetKeyOrigin(const CKeyID& keyid, KeyOriginInfo& info) const override { return m_spk_man.GetKeyOrigin(keyid, info); }\n };\n \n+class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n+{\n+public:\n+    using ScriptPubKeyMan::ScriptPubKeyMan;",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": null,
      "original_position": 15,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "ee6980be437c09df6044a5ced7caa91410453027",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In ee6980be437c09df6044a5ced7caa91410453027 `Introduce DescriptorScriptPubKeyMan as a dummy class`: this line (`using ScriptPubKeyMan::ScriptPubKeyMan;`) is dropped in 7af1a569567a595dc26c33075632f406c4ff0904.",
      "created_at": "2020-01-31T16:36:24Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r373572192",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/373572192"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 474,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/373574359",
      "pull_request_review_id": 351628547,
      "id": 373574359,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU3NDM1OQ==",
      "diff_hunk": "@@ -60,8 +60,10 @@ extern const std::string CRYPTED_KEY;\n extern const std::string CSCRIPT;\n extern const std::string DEFAULTKEY;\n extern const std::string DESTDATA;\n+extern const std::string EXTERNALSPK;",
      "path": "src/wallet/walletdb.h",
      "position": null,
      "original_position": 4,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "7af1a569567a595dc26c33075632f406c4ff0904",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: these are added, but not used, in 7af1a569567a595dc26c33075632f406c4ff0904 `Store WalletDescriptor in DescriptorScriptPubKeyMan` which seems out of the blue. b784a150b23e10ee794d1d2616a0df5c0f317fef seems a better place.",
      "created_at": "2020-01-31T16:40:55Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r373574359",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/373574359"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 64,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/373579192",
      "pull_request_review_id": 351628547,
      "id": 373579192,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU3OTE5Mg==",
      "diff_hunk": "@@ -470,8 +470,17 @@ class LegacySigningProvider : public SigningProvider\n \n class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n {\n+private:\n+    WalletDescriptor descriptor GUARDED_BY(cs_desc_man);\n+\n+    using ScriptPubKeyMap = std::map<CScript, uint32_t>; // Map of scripts to descriptor range index",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": null,
      "original_position": 7,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "7af1a569567a595dc26c33075632f406c4ff0904",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 7af1a569567a595dc26c33075632f406c4ff0904: `ScriptPubKeyMap`'s `uint32_t` changes to `int32_t` in e7e62209a176a00a03657e6fe8fd221bf2821bf5",
      "created_at": "2020-01-31T16:50:47Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r373579192",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/373579192"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 476,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/373612485",
      "pull_request_review_id": 351628547,
      "id": 373612485,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYxMjQ4NQ==",
      "diff_hunk": "@@ -467,4 +468,49 @@ class LegacySigningProvider : public SigningProvider\n     bool GetKeyOrigin(const CKeyID& keyid, KeyOriginInfo& info) const override { return m_spk_man.GetKeyOrigin(keyid, info); }\n };\n \n+class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n+{\n+public:\n+    using ScriptPubKeyMan::ScriptPubKeyMan;\n+\n+    bool GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error) override;\n+    isminetype IsMine(const CScript& script) const override;\n+\n+    bool CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys = false) override;\n+    bool Encrypt(const CKeyingMaterial& master_key, WalletBatch* batch) override;\n+\n+    bool GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool) override;\n+    void ReturnDestination(int64_t index, bool internal, const CTxDestination& addr) override;\n+\n+    bool TopUp(unsigned int size = 0) override;\n+\n+    void MarkUnusedAddresses(const CScript& script) override;\n+\n+    bool IsHDEnabled() const override;\n+\n+    bool SetupGeneration(bool force = false) override;\n+\n+    bool HavePrivateKeys() const override;\n+\n+    void RewriteDB() override;",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": null,
      "original_position": 36,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "ee6980be437c09df6044a5ced7caa91410453027",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "ee6980be437c09df6044a5ced7caa91410453027:  `void RewriteDB() override;` is dropped in fd995af379b73b63b78b276b5b8f31d39b2d2b67",
      "created_at": "2020-01-31T18:09:19Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r373612485",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/373612485"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 495,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/377827327",
      "pull_request_review_id": 356903809,
      "id": 377827327,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgyNzMyNw==",
      "diff_hunk": "@@ -467,4 +468,49 @@ class LegacySigningProvider : public SigningProvider\n     bool GetKeyOrigin(const CKeyID& keyid, KeyOriginInfo& info) const override { return m_spk_man.GetKeyOrigin(keyid, info); }\n };\n \n+class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n+{\n+public:\n+    using ScriptPubKeyMan::ScriptPubKeyMan;",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": null,
      "original_position": 15,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "ee6980be437c09df6044a5ced7caa91410453027",
      "in_reply_to_id": 373572192,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "That's intentional. The `using ScriptPubKeyMan::ScriptPubKeyMan;` is needed to use the default `ScriptPubKeyMan` constructor until we add a custom one for `DescriptorScriptPubKeyMan`.",
      "created_at": "2020-02-11T18:47:09Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r377827327",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/377827327"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 474,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/377853944",
      "pull_request_review_id": 356937290,
      "id": 377853944,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg1Mzk0NA==",
      "diff_hunk": "@@ -60,8 +60,10 @@ extern const std::string CRYPTED_KEY;\n extern const std::string CSCRIPT;\n extern const std::string DEFAULTKEY;\n extern const std::string DESTDATA;\n+extern const std::string EXTERNALSPK;",
      "path": "src/wallet/walletdb.h",
      "position": null,
      "original_position": 4,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "7af1a569567a595dc26c33075632f406c4ff0904",
      "in_reply_to_id": 373574359,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Moved",
      "created_at": "2020-02-11T19:35:49Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r377853944",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/377853944"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 64,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/377854006",
      "pull_request_review_id": 356937361,
      "id": 377854006,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg1NDAwNg==",
      "diff_hunk": "@@ -470,8 +470,17 @@ class LegacySigningProvider : public SigningProvider\n \n class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n {\n+private:\n+    WalletDescriptor descriptor GUARDED_BY(cs_desc_man);\n+\n+    using ScriptPubKeyMap = std::map<CScript, uint32_t>; // Map of scripts to descriptor range index",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": null,
      "original_position": 7,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "7af1a569567a595dc26c33075632f406c4ff0904",
      "in_reply_to_id": 373579192,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Changed",
      "created_at": "2020-02-11T19:35:55Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r377854006",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/377854006"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 476,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/377854045",
      "pull_request_review_id": 356937407,
      "id": 377854045,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg1NDA0NQ==",
      "diff_hunk": "@@ -467,4 +468,49 @@ class LegacySigningProvider : public SigningProvider\n     bool GetKeyOrigin(const CKeyID& keyid, KeyOriginInfo& info) const override { return m_spk_man.GetKeyOrigin(keyid, info); }\n };\n \n+class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n+{\n+public:\n+    using ScriptPubKeyMan::ScriptPubKeyMan;\n+\n+    bool GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error) override;\n+    isminetype IsMine(const CScript& script) const override;\n+\n+    bool CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys = false) override;\n+    bool Encrypt(const CKeyingMaterial& master_key, WalletBatch* batch) override;\n+\n+    bool GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool) override;\n+    void ReturnDestination(int64_t index, bool internal, const CTxDestination& addr) override;\n+\n+    bool TopUp(unsigned int size = 0) override;\n+\n+    void MarkUnusedAddresses(const CScript& script) override;\n+\n+    bool IsHDEnabled() const override;\n+\n+    bool SetupGeneration(bool force = false) override;\n+\n+    bool HavePrivateKeys() const override;\n+\n+    void RewriteDB() override;",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": null,
      "original_position": 36,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "ee6980be437c09df6044a5ced7caa91410453027",
      "in_reply_to_id": 373612485,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Dropped",
      "created_at": "2020-02-11T19:36:00Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r377854045",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/377854045"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 495,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/381325869",
      "pull_request_review_id": 361155493,
      "id": 381325869,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTMyNTg2OQ==",
      "diff_hunk": "@@ -1426,3 +1488,623 @@ std::set<CKeyID> LegacyScriptPubKeyMan::GetKeys() const\n     }\n     return set_address;\n }\n+\n+void LegacyScriptPubKeyMan::SetType(OutputType type, bool internal) {}\n+\n+bool DescriptorScriptPubKeyMan::GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error)\n+{\n+    if (!CanGetAddresses(internal)) {\n+        error = \"No private keys available\";\n+        return false;\n+    }\n+    {\n+        LOCK(cs_desc_man);\n+        if (descriptor.descriptor->IsSingleType() && type != address_type) {\n+            throw std::runtime_error(std::string(__func__) + \": Types are inconsistent\");\n+        }\n+\n+        TopUp();\n+\n+        // Get the scriptPubKey from the descriptor\n+        FlatSigningProvider out_keys;\n+        std::vector<CScript> scripts_temp;\n+        if (descriptor.cache.size() <= (unsigned int)(descriptor.next_index - descriptor.range_start) && !TopUp(1)) {\n+            // We can't generate anymore keys\n+            error = \"Error: Keypool ran out, please call keypoolrefill first\";\n+            return false;\n+        }\n+        descriptor.descriptor->ExpandFromCache(descriptor.next_index, descriptor.cache[descriptor.next_index - descriptor.range_start], scripts_temp, out_keys);\n+\n+        if (descriptor.descriptor->IsSingleType()) {\n+            Optional<OutputType> out_script_type = descriptor.descriptor->GetOutputType();\n+            if (out_script_type && out_script_type == type) {\n+                ExtractDestination(scripts_temp[0], dest);\n+            } else {\n+                throw std::runtime_error(std::string(__func__) + \": Types are inconsistent. Stored type does not match type of newly generated address\");\n+            }\n+        } else {\n+            // This is a combo descriptor which should not be an active descriptor\n+            assert(false);\n+        }\n+        descriptor.next_index++;\n+        WalletBatch(m_storage.GetDatabase()).WriteDescriptor(GetID(), descriptor);\n+        return true;\n+    }\n+}\n+\n+isminetype DescriptorScriptPubKeyMan::IsMine(const CScript& script) const\n+{\n+    LOCK(cs_desc_man);\n+    if (m_map_script_pub_keys.count(script) > 0) {\n+        return ISMINE_SPENDABLE;\n+    }\n+    return ISMINE_NO;\n+}\n+\n+bool DescriptorScriptPubKeyMan::CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys)\n+{\n+    {\n+        LOCK(cs_desc_man);\n+        if (!m_map_keys.empty())\n+            return false;\n+\n+        bool keyPass = m_map_crypted_keys.empty(); // Always pass when there are no encrypted keys\n+        bool keyFail = false;\n+        CryptedKeyMap::const_iterator mi = m_map_crypted_keys.begin();\n+        for (; mi != m_map_crypted_keys.end(); ++mi)\n+        {\n+            const CPubKey &pubkey = (*mi).second.first;\n+            const std::vector<unsigned char> &crypted_secret = (*mi).second.second;\n+            CKey key;\n+            if (!DecryptKey(master_key, crypted_secret, pubkey, key))\n+            {\n+                keyFail = true;\n+                break;\n+            }\n+            keyPass = true;\n+            if (m_decryption_thoroughly_checked)\n+                break;\n+        }\n+        if (keyPass && keyFail)\n+        {\n+            LogPrintf(\"The wallet is probably corrupted: Some keys decrypt but not all.\\n\");\n+            throw std::runtime_error(\"Error unlocking wallet: some keys decrypt but not all. Your wallet file may be corrupt.\");\n+        }\n+        if (keyFail || (!keyPass && !accept_no_keys))\n+            return false;\n+        m_decryption_thoroughly_checked = true;\n+    }\n+    return true;\n+}\n+\n+bool DescriptorScriptPubKeyMan::Encrypt(const CKeyingMaterial& master_key, WalletBatch* batch)\n+{\n+    LOCK(cs_desc_man);\n+    if (!m_map_crypted_keys.empty()) {\n+        return false;\n+    }\n+\n+    for (const KeyMap::value_type& key_in : m_map_keys)\n+    {\n+        const CKey &key = key_in.second;\n+        CPubKey pubkey = key.GetPubKey();\n+        CKeyingMaterial secret(key.begin(), key.end());\n+        std::vector<unsigned char> crypted_secret;\n+        if (!EncryptSecret(master_key, secret, pubkey.GetHash(), crypted_secret)) {\n+            return false;\n+        }\n+        m_map_crypted_keys[pubkey.GetID()] = make_pair(pubkey, crypted_secret);\n+        batch->WriteCryptedDescriptorKey(GetID(), pubkey, crypted_secret);\n+    }\n+    m_map_keys.clear();\n+    return true;\n+}\n+\n+bool DescriptorScriptPubKeyMan::GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool)\n+{\n+    LOCK(cs_desc_man);\n+    std::string error;\n+    bool result = GetNewDestination(type, address, error);\n+    index = descriptor.next_index - 1;\n+    return result;\n+}\n+\n+void DescriptorScriptPubKeyMan::ReturnDestination(int64_t index, bool internal, const CTxDestination& addr)\n+{\n+    LOCK(cs_desc_man);\n+    // Only return when the index was the most recent\n+    if (descriptor.next_index - 1 == index) {\n+        descriptor.next_index--;\n+    }\n+    WalletBatch(m_storage.GetDatabase()).WriteDescriptor(GetID(), descriptor);\n+    NotifyCanGetAddressesChanged();\n+}\n+\n+std::map<CKeyID, CKey> DescriptorScriptPubKeyMan::GetKeys() const\n+{\n+    AssertLockHeld(cs_desc_man);\n+    if (m_storage.HasEncryptionKeys() && !m_storage.IsLocked()) {\n+        KeyMap keys;\n+        for (auto key_pair : m_map_crypted_keys) {\n+            const CPubKey& pubkey = key_pair.second.first;\n+            const std::vector<unsigned char>& crypted_secret = key_pair.second.second;\n+            CKey key;\n+            DecryptKey(m_storage.GetEncryptionKey(), crypted_secret, pubkey, key);\n+            keys[pubkey.GetID()] = key;\n+        }\n+        return keys;\n+    }\n+    return m_map_keys;\n+}\n+\n+bool DescriptorScriptPubKeyMan::TopUp(unsigned int size)\n+{\n+    LOCK(cs_desc_man);\n+    unsigned int target_size;\n+    if (size > 0)\n+        target_size = size;\n+    else\n+        target_size = std::max(gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 0);\n+\n+    // Make sure we have everything between range_start and range_end\n+    int32_t range_size = descriptor.range_end - descriptor.range_start;\n+    int32_t highest_cached_index = descriptor.range_start + descriptor.cache.size();\n+    int32_t to_fill = std::max(range_size - (int)descriptor.cache.size(), 0);\n+\n+    // Fill up the rest of the pool\n+    int missing_pool = std::max(std::max((int)target_size, 1) - (descriptor.range_end - descriptor.next_index), 0);\n+    to_fill += missing_pool;\n+\n+    // If the descriptor is not ranged, we actually just want to fill the first cache item\n+    if (!descriptor.descriptor->IsRange()) {\n+        to_fill = descriptor.cache.size() == 0 ? 1 : 0;\n+        missing_pool = 0;\n+        descriptor.range_end = 1;\n+        descriptor.range_start = 0;\n+    }\n+\n+    FlatSigningProvider provider;\n+    provider.keys = GetKeys();\n+\n+    WalletBatch batch(m_storage.GetDatabase());\n+    uint256 id = GetID();\n+    for (int32_t i = highest_cached_index; i < highest_cached_index + to_fill; ++i) {\n+        FlatSigningProvider out_keys;\n+        std::vector<CScript> scripts_temp;\n+        std::vector<unsigned char> cache;\n+        if (!descriptor.descriptor->Expand(i, provider, scripts_temp, out_keys, &cache)) return false;\n+        // Add all of the scriptPubKeys to the scriptPubKey set\n+        for (const CScript& script : scripts_temp) {\n+            m_map_script_pub_keys[script] = i;\n+        }\n+        // Write the cache\n+        if (!batch.WriteDescriptorCache(id, i, cache)) {\n+            throw std::runtime_error(std::string(__func__) + \": writing cache item failed\");\n+        }\n+        descriptor.cache.push_back(std::move(cache));\n+    }\n+    descriptor.range_end += missing_pool;\n+    batch.WriteDescriptor(GetID(), descriptor);\n+\n+    // By this point, the cache size should be the size of the entire range\n+    assert((uint32_t)descriptor.range_end - (uint32_t)descriptor.range_start == descriptor.cache.size());\n+\n+    NotifyCanGetAddressesChanged();\n+    return true;\n+}\n+\n+bool DescriptorScriptPubKeyMan::ClearDescriptorCache() {\n+    LOCK(cs_desc_man);\n+    WalletBatch batch(m_storage.GetDatabase());\n+    uint256 id = GetID();\n+    int32_t highest_cached_index = descriptor.range_start + descriptor.cache.size();\n+    for (uint32_t i = highest_cached_index; i < (uint32_t)highest_cached_index + descriptor.cache.size(); ++i) {\n+        if (!batch.EraseDescriptorCache(id, i)) {\n+            throw std::runtime_error(std::string(__func__) + \": removing cache item failed\");\n+        }\n+    }\n+    descriptor.cache.clear();\n+\n+    return true;\n+}\n+\n+void DescriptorScriptPubKeyMan::MarkUnusedAddresses(const CScript& script)\n+{\n+    LOCK(cs_desc_man);\n+    if (IsMine(script)) {\n+        int32_t index = m_map_script_pub_keys[script];\n+        if (index >= descriptor.next_index) {\n+            WalletLogPrintf(\"%s: Detected a used keypool item, mark all keypool items up to this item as used\\n\", __func__);\n+            descriptor.next_index = index + 1;\n+        }\n+        if (!TopUp()) {\n+            WalletLogPrintf(\"%s: Topping up keypool failed (locked wallet)\\n\", __func__);\n+        }\n+    }\n+}\n+\n+void DescriptorScriptPubKeyMan::AddDescriptorKey(const CKey& key, const CPubKey &pubkey)\n+{\n+    LOCK(cs_desc_man);\n+    WalletBatch batch(m_storage.GetDatabase());\n+    if (!AddDescriptorKeyWithDB(batch, key, pubkey)) {\n+        throw std::runtime_error(std::string(__func__) + \": writing descriptor private key failed\");\n+    }\n+}\n+\n+bool DescriptorScriptPubKeyMan::AddDescriptorKeyWithDB(WalletBatch& batch, const CKey& key, const CPubKey &pubkey)\n+{\n+    AssertLockHeld(cs_desc_man);\n+    assert(!m_storage.IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS));\n+\n+    if (m_storage.HasEncryptionKeys()) {\n+        if (m_storage.IsLocked()) {\n+            return false;\n+        }\n+\n+        std::vector<unsigned char> crypted_secret;\n+        CKeyingMaterial secret(key.begin(), key.end());\n+        if (!EncryptSecret(m_storage.GetEncryptionKey(), secret, pubkey.GetHash(), crypted_secret)) {\n+            return false;\n+        }\n+\n+        m_map_crypted_keys[pubkey.GetID()] = make_pair(pubkey, crypted_secret);\n+        batch.WriteCryptedDescriptorKey(GetID(), pubkey, crypted_secret);\n+        return true;\n+    } else {\n+        m_map_keys[pubkey.GetID()] = key;\n+        return batch.WriteDescriptorKey(GetID(), pubkey, key.GetPrivKey());\n+    }\n+}\n+\n+bool DescriptorScriptPubKeyMan::SetupDescriptorGeneration(const CExtKey& master_key)\n+{\n+    LOCK(cs_desc_man);\n+    assert(m_storage.IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS));\n+\n+    // Ignore when there is already a descriptor\n+    if (descriptor.descriptor) {\n+        return false;\n+    }\n+\n+    int64_t creation_time = GetTime();\n+\n+    CPubKey master_pubkey = master_key.key.GetPubKey();\n+    assert(master_key.key.VerifyPubKey(master_pubkey));\n+\n+    // Get the fingerprint\n+    CKeyID master_id = master_key.key.GetPubKey().GetID();\n+    std::string fingerprint = HexStr(master_id.begin(), master_id.begin() + 4);\n+\n+    // Add the seed to the wallet\n+    std::string desc_prefix;\n+    std::string desc_suffix = \"/*)\";\n+    CExtKey d1;\n+    switch (address_type) {\n+    case OutputType::LEGACY: {\n+        master_key.Derive(d1, BIP32_HARDENED_KEY_LIMIT + 44);\n+        desc_prefix = \"pkh([\" + fingerprint + \"/44'\";\n+        break;\n+    }\n+    case OutputType::P2SH_SEGWIT: {\n+        master_key.Derive(d1, BIP32_HARDENED_KEY_LIMIT + 49);\n+        desc_prefix = \"sh(wpkh([\" + fingerprint + \"/49'\";\n+        desc_suffix += \")\";\n+        break;\n+    }\n+    case OutputType::BECH32: {\n+        master_key.Derive(d1, BIP32_HARDENED_KEY_LIMIT + 84);\n+        desc_prefix = \"wpkh([\" + fingerprint + \"/84'\";\n+        break;\n+    }\n+    default: assert(false);\n+    }\n+\n+    // Mainnet derives at 0',testnet and regtest derive at 1'\n+    CExtKey d2;\n+    if (Params().IsTestChain()) {\n+        d1.Derive(d2, BIP32_HARDENED_KEY_LIMIT + 1);\n+        desc_prefix += \"/1'\";\n+    } else {\n+        d1.Derive(d2, BIP32_HARDENED_KEY_LIMIT + 0);\n+        desc_prefix += \"/0'\";\n+    }\n+    // 3rd level is always 0'\n+    CExtKey d3;\n+    d2.Derive(d3, BIP32_HARDENED_KEY_LIMIT + 0);\n+    std::string xpub = EncodeExtPubKey(d3.Neuter());\n+\n+    // Build descriptor string\n+    std::string internal_path = internal ? \"/1\" : \"/0\";\n+    std::string desc_str = desc_prefix + \"/0']\" + xpub + internal_path + desc_suffix;\n+\n+    // Make the descriptor\n+    FlatSigningProvider keys;\n+    std::string error;\n+    std::unique_ptr<Descriptor> desc = Parse(desc_str, keys, error, false);\n+    WalletDescriptor w_desc(std::move(desc), creation_time, 0, 0, 0);\n+    descriptor = w_desc;\n+\n+    // Store the master private key, derived intermediate key, and descriptor\n+    WalletBatch batch(m_storage.GetDatabase());\n+    if (!AddDescriptorKeyWithDB(batch, master_key.key, master_key.key.GetPubKey())) {\n+        throw std::runtime_error(std::string(__func__) + \": writing descriptor master rivate key failed\");\n+    }\n+    if (!AddDescriptorKeyWithDB(batch, d3.key, d3.key.GetPubKey())) {\n+        throw std::runtime_error(std::string(__func__) + \": writing descriptor intermediate private key failed\");\n+    }\n+    if (!batch.WriteDescriptor(GetID(), descriptor)) {\n+        throw std::runtime_error(std::string(__func__) + \": writing descriptor failed\");\n+    }\n+\n+    // TopUp\n+    TopUp();\n+\n+    m_storage.UnsetBlankWalletFlag(batch);\n+    return true;\n+}\n+\n+bool DescriptorScriptPubKeyMan::IsHDEnabled() const\n+{\n+    LOCK(cs_desc_man);\n+    return descriptor.descriptor->IsRange();\n+}\n+\n+bool DescriptorScriptPubKeyMan::CanGetAddresses(bool internal)\n+{\n+    LOCK(cs_desc_man);\n+    return HavePrivateKeys() || descriptor.next_index < descriptor.range_end;\n+}\n+\n+bool DescriptorScriptPubKeyMan::HavePrivateKeys() const\n+{\n+    LOCK(cs_desc_man);\n+    return m_map_keys.size() > 0 || m_map_crypted_keys.size() > 0;\n+}\n+\n+int64_t DescriptorScriptPubKeyMan::GetOldestKeyPoolTime()\n+{\n+    return 0;\n+}\n+\n+size_t DescriptorScriptPubKeyMan::KeypoolCountExternalKeys()\n+{\n+    if (internal) {\n+        return 0;\n+    }\n+    return GetKeyPoolSize();\n+}\n+\n+unsigned int DescriptorScriptPubKeyMan::GetKeyPoolSize() const\n+{\n+    LOCK(cs_desc_man);\n+    return descriptor.range_end - descriptor.next_index;\n+}\n+\n+int64_t DescriptorScriptPubKeyMan::GetTimeFirstKey() const\n+{\n+    LOCK(cs_desc_man);\n+    return descriptor.creation_time;\n+}\n+\n+std::unique_ptr<FlatSigningProvider> DescriptorScriptPubKeyMan::GetSigningProvider(const CScript& script, bool include_private) const\n+{\n+    LOCK(cs_desc_man);\n+\n+    // Find the index of the script\n+    auto it = m_map_script_pub_keys.find(script);\n+    if (it == m_map_script_pub_keys.end()) {\n+        return nullptr;\n+    }\n+    int32_t index = it->second;\n+\n+    // Get the scripts, keys, and key origins for this script\n+    std::unique_ptr<FlatSigningProvider> out_keys = MakeUnique<FlatSigningProvider>();\n+    std::vector<CScript> scripts_temp;\n+    if (!descriptor.descriptor->ExpandFromCache(index, descriptor.cache[index - descriptor.range_start], scripts_temp, *out_keys)) return nullptr;\n+\n+    if (include_private) {\n+        FlatSigningProvider master_provider;\n+        master_provider.keys = GetKeys();\n+        descriptor.descriptor->ExpandPrivate(index, master_provider, *out_keys);\n+    }\n+\n+    return std::move(out_keys);\n+}\n+\n+std::unique_ptr<SigningProvider> DescriptorScriptPubKeyMan::GetSolvingProvider(const CScript& script) const\n+{\n+    return GetSigningProvider(script, false);\n+}\n+\n+bool DescriptorScriptPubKeyMan::CanProvide(const CScript& script, SignatureData& sigdata)\n+{\n+    return IsMine(script);\n+}\n+\n+bool DescriptorScriptPubKeyMan::SignTransaction(CMutableTransaction& tx, const std::map<COutPoint, Coin>& coins, int sighash, std::map<int, std::string>& input_errors) const\n+{\n+    std::unique_ptr<FlatSigningProvider> keys = MakeUnique<FlatSigningProvider>();\n+    for (const auto& coin_pair : coins) {\n+        std::unique_ptr<FlatSigningProvider> coin_keys = std::move(GetSigningProvider(coin_pair.second.out.scriptPubKey, true));\n+        if (!coin_keys) {\n+            continue;\n+        }\n+        *keys = Merge(*keys, *coin_keys);\n+    }\n+\n+    return ::SignTransaction(tx, keys.get(), coins, sighash, input_errors);\n+}\n+\n+SigningResult DescriptorScriptPubKeyMan::SignMessage(const std::string& message, const PKHash& pkhash, std::string& str_sig) const\n+{\n+    std::unique_ptr<FlatSigningProvider> keys = std::move(GetSigningProvider(GetScriptForDestination(pkhash), true));\n+    if (!keys) {\n+        return SigningResult::PRIVATE_KEY_NOT_AVAILABLE;\n+    }\n+\n+    CKeyID key_id(pkhash);\n+    CKey key;\n+    if (!keys->GetKey(key_id, key)) {\n+        return SigningResult::PRIVATE_KEY_NOT_AVAILABLE;\n+    }\n+\n+    if (!MessageSign(key, message, str_sig)) {\n+        return SigningResult::SIGNING_FAILED;\n+    }\n+    return SigningResult::OK;\n+}\n+\n+TransactionError DescriptorScriptPubKeyMan::FillPSBT(PartiallySignedTransaction& psbtx, int sighash_type, bool sign, bool bip32derivs) const\n+{\n+    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+        const CTxIn& txin = psbtx.tx->vin[i];\n+        PSBTInput& input = psbtx.inputs.at(i);\n+\n+        if (PSBTInputSigned(input)) {\n+            continue;\n+        }\n+\n+        // Verify input looks sane. This will check that we have at most one uxto, witness or non-witness.\n+        if (!input.IsSane()) {\n+            return TransactionError::INVALID_PSBT;\n+        }\n+\n+        // Get the Sighash type\n+        if (sign && input.sighash_type > 0 && input.sighash_type != sighash_type) {\n+            return TransactionError::SIGHASH_MISMATCH;\n+        }\n+\n+        // Get the scriptPubKey to know which SigningProvider to use\n+        CScript script;\n+        if (!input.witness_utxo.IsNull()) {\n+            script = input.witness_utxo.scriptPubKey;\n+        } else if (input.non_witness_utxo) {\n+            if (txin.prevout.n >= input.non_witness_utxo->vout.size()) {\n+                return TransactionError::MISSING_INPUTS;\n+            }\n+            script = input.non_witness_utxo->vout[txin.prevout.n].scriptPubKey;\n+        } else {\n+            // There's no UTXO so we can just skip this now\n+            continue;\n+        }\n+        SignatureData sigdata;\n+        input.FillSignatureData(sigdata);\n+\n+        std::unique_ptr<FlatSigningProvider> keys = GetSigningProvider(script, true);\n+        if (!keys) {\n+            continue;\n+        }\n+\n+        SignPSBTInput(HidingSigningProvider(keys.get(), !sign, !bip32derivs), psbtx, i, sighash_type);\n+    }\n+\n+    // Fill in the bip32 keypaths and redeemscripts for the outputs so that hardware wallets can identify change\n+    for (unsigned int i = 0; i < psbtx.tx->vout.size(); ++i) {\n+        std::unique_ptr<FlatSigningProvider> keys = GetSigningProvider(psbtx.tx->vout.at(i).scriptPubKey, true);",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 621,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "91d4efc84283743ef26e58526269731909286777",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Should this be `GetSolvingProvider` for watch-only wallets? I'm having difficulty getting bip32 keys added to the PSBT while trying to rebase #16546 , see https://github.com/Sjors/bitcoin/commit/8660421cba60de3dd5ab76c8f285bce1f0b4327b\r\n(maybe I should try less of a hack and actually make that subclass...)",
      "created_at": "2020-02-19T14:30:00Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r381325869",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/381325869"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2004,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/381372422",
      "pull_request_review_id": 361216880,
      "id": 381372422,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM3MjQyMg==",
      "diff_hunk": "@@ -1426,3 +1488,623 @@ std::set<CKeyID> LegacyScriptPubKeyMan::GetKeys() const\n     }\n     return set_address;\n }\n+\n+void LegacyScriptPubKeyMan::SetType(OutputType type, bool internal) {}\n+\n+bool DescriptorScriptPubKeyMan::GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error)\n+{\n+    if (!CanGetAddresses(internal)) {\n+        error = \"No private keys available\";\n+        return false;\n+    }\n+    {\n+        LOCK(cs_desc_man);\n+        if (descriptor.descriptor->IsSingleType() && type != address_type) {\n+            throw std::runtime_error(std::string(__func__) + \": Types are inconsistent\");\n+        }\n+\n+        TopUp();\n+\n+        // Get the scriptPubKey from the descriptor\n+        FlatSigningProvider out_keys;\n+        std::vector<CScript> scripts_temp;\n+        if (descriptor.cache.size() <= (unsigned int)(descriptor.next_index - descriptor.range_start) && !TopUp(1)) {\n+            // We can't generate anymore keys\n+            error = \"Error: Keypool ran out, please call keypoolrefill first\";\n+            return false;\n+        }\n+        descriptor.descriptor->ExpandFromCache(descriptor.next_index, descriptor.cache[descriptor.next_index - descriptor.range_start], scripts_temp, out_keys);\n+\n+        if (descriptor.descriptor->IsSingleType()) {\n+            Optional<OutputType> out_script_type = descriptor.descriptor->GetOutputType();\n+            if (out_script_type && out_script_type == type) {\n+                ExtractDestination(scripts_temp[0], dest);\n+            } else {\n+                throw std::runtime_error(std::string(__func__) + \": Types are inconsistent. Stored type does not match type of newly generated address\");\n+            }\n+        } else {\n+            // This is a combo descriptor which should not be an active descriptor\n+            assert(false);\n+        }\n+        descriptor.next_index++;\n+        WalletBatch(m_storage.GetDatabase()).WriteDescriptor(GetID(), descriptor);\n+        return true;\n+    }\n+}\n+\n+isminetype DescriptorScriptPubKeyMan::IsMine(const CScript& script) const\n+{\n+    LOCK(cs_desc_man);\n+    if (m_map_script_pub_keys.count(script) > 0) {\n+        return ISMINE_SPENDABLE;\n+    }\n+    return ISMINE_NO;\n+}\n+\n+bool DescriptorScriptPubKeyMan::CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys)\n+{\n+    {\n+        LOCK(cs_desc_man);\n+        if (!m_map_keys.empty())\n+            return false;\n+\n+        bool keyPass = m_map_crypted_keys.empty(); // Always pass when there are no encrypted keys\n+        bool keyFail = false;\n+        CryptedKeyMap::const_iterator mi = m_map_crypted_keys.begin();\n+        for (; mi != m_map_crypted_keys.end(); ++mi)\n+        {\n+            const CPubKey &pubkey = (*mi).second.first;\n+            const std::vector<unsigned char> &crypted_secret = (*mi).second.second;\n+            CKey key;\n+            if (!DecryptKey(master_key, crypted_secret, pubkey, key))\n+            {\n+                keyFail = true;\n+                break;\n+            }\n+            keyPass = true;\n+            if (m_decryption_thoroughly_checked)\n+                break;\n+        }\n+        if (keyPass && keyFail)\n+        {\n+            LogPrintf(\"The wallet is probably corrupted: Some keys decrypt but not all.\\n\");\n+            throw std::runtime_error(\"Error unlocking wallet: some keys decrypt but not all. Your wallet file may be corrupt.\");\n+        }\n+        if (keyFail || (!keyPass && !accept_no_keys))\n+            return false;\n+        m_decryption_thoroughly_checked = true;\n+    }\n+    return true;\n+}\n+\n+bool DescriptorScriptPubKeyMan::Encrypt(const CKeyingMaterial& master_key, WalletBatch* batch)\n+{\n+    LOCK(cs_desc_man);\n+    if (!m_map_crypted_keys.empty()) {\n+        return false;\n+    }\n+\n+    for (const KeyMap::value_type& key_in : m_map_keys)\n+    {\n+        const CKey &key = key_in.second;\n+        CPubKey pubkey = key.GetPubKey();\n+        CKeyingMaterial secret(key.begin(), key.end());\n+        std::vector<unsigned char> crypted_secret;\n+        if (!EncryptSecret(master_key, secret, pubkey.GetHash(), crypted_secret)) {\n+            return false;\n+        }\n+        m_map_crypted_keys[pubkey.GetID()] = make_pair(pubkey, crypted_secret);\n+        batch->WriteCryptedDescriptorKey(GetID(), pubkey, crypted_secret);\n+    }\n+    m_map_keys.clear();\n+    return true;\n+}\n+\n+bool DescriptorScriptPubKeyMan::GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool)\n+{\n+    LOCK(cs_desc_man);\n+    std::string error;\n+    bool result = GetNewDestination(type, address, error);\n+    index = descriptor.next_index - 1;\n+    return result;\n+}\n+\n+void DescriptorScriptPubKeyMan::ReturnDestination(int64_t index, bool internal, const CTxDestination& addr)\n+{\n+    LOCK(cs_desc_man);\n+    // Only return when the index was the most recent\n+    if (descriptor.next_index - 1 == index) {\n+        descriptor.next_index--;\n+    }\n+    WalletBatch(m_storage.GetDatabase()).WriteDescriptor(GetID(), descriptor);\n+    NotifyCanGetAddressesChanged();\n+}\n+\n+std::map<CKeyID, CKey> DescriptorScriptPubKeyMan::GetKeys() const\n+{\n+    AssertLockHeld(cs_desc_man);\n+    if (m_storage.HasEncryptionKeys() && !m_storage.IsLocked()) {\n+        KeyMap keys;\n+        for (auto key_pair : m_map_crypted_keys) {\n+            const CPubKey& pubkey = key_pair.second.first;\n+            const std::vector<unsigned char>& crypted_secret = key_pair.second.second;\n+            CKey key;\n+            DecryptKey(m_storage.GetEncryptionKey(), crypted_secret, pubkey, key);\n+            keys[pubkey.GetID()] = key;\n+        }\n+        return keys;\n+    }\n+    return m_map_keys;\n+}\n+\n+bool DescriptorScriptPubKeyMan::TopUp(unsigned int size)\n+{\n+    LOCK(cs_desc_man);\n+    unsigned int target_size;\n+    if (size > 0)\n+        target_size = size;\n+    else\n+        target_size = std::max(gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 0);\n+\n+    // Make sure we have everything between range_start and range_end\n+    int32_t range_size = descriptor.range_end - descriptor.range_start;\n+    int32_t highest_cached_index = descriptor.range_start + descriptor.cache.size();\n+    int32_t to_fill = std::max(range_size - (int)descriptor.cache.size(), 0);\n+\n+    // Fill up the rest of the pool\n+    int missing_pool = std::max(std::max((int)target_size, 1) - (descriptor.range_end - descriptor.next_index), 0);\n+    to_fill += missing_pool;\n+\n+    // If the descriptor is not ranged, we actually just want to fill the first cache item\n+    if (!descriptor.descriptor->IsRange()) {\n+        to_fill = descriptor.cache.size() == 0 ? 1 : 0;\n+        missing_pool = 0;\n+        descriptor.range_end = 1;\n+        descriptor.range_start = 0;\n+    }\n+\n+    FlatSigningProvider provider;\n+    provider.keys = GetKeys();\n+\n+    WalletBatch batch(m_storage.GetDatabase());\n+    uint256 id = GetID();\n+    for (int32_t i = highest_cached_index; i < highest_cached_index + to_fill; ++i) {\n+        FlatSigningProvider out_keys;\n+        std::vector<CScript> scripts_temp;\n+        std::vector<unsigned char> cache;\n+        if (!descriptor.descriptor->Expand(i, provider, scripts_temp, out_keys, &cache)) return false;\n+        // Add all of the scriptPubKeys to the scriptPubKey set\n+        for (const CScript& script : scripts_temp) {\n+            m_map_script_pub_keys[script] = i;\n+        }\n+        // Write the cache\n+        if (!batch.WriteDescriptorCache(id, i, cache)) {\n+            throw std::runtime_error(std::string(__func__) + \": writing cache item failed\");\n+        }\n+        descriptor.cache.push_back(std::move(cache));\n+    }\n+    descriptor.range_end += missing_pool;\n+    batch.WriteDescriptor(GetID(), descriptor);\n+\n+    // By this point, the cache size should be the size of the entire range\n+    assert((uint32_t)descriptor.range_end - (uint32_t)descriptor.range_start == descriptor.cache.size());\n+\n+    NotifyCanGetAddressesChanged();\n+    return true;\n+}\n+\n+bool DescriptorScriptPubKeyMan::ClearDescriptorCache() {\n+    LOCK(cs_desc_man);\n+    WalletBatch batch(m_storage.GetDatabase());\n+    uint256 id = GetID();\n+    int32_t highest_cached_index = descriptor.range_start + descriptor.cache.size();\n+    for (uint32_t i = highest_cached_index; i < (uint32_t)highest_cached_index + descriptor.cache.size(); ++i) {\n+        if (!batch.EraseDescriptorCache(id, i)) {\n+            throw std::runtime_error(std::string(__func__) + \": removing cache item failed\");\n+        }\n+    }\n+    descriptor.cache.clear();\n+\n+    return true;\n+}\n+\n+void DescriptorScriptPubKeyMan::MarkUnusedAddresses(const CScript& script)\n+{\n+    LOCK(cs_desc_man);\n+    if (IsMine(script)) {\n+        int32_t index = m_map_script_pub_keys[script];\n+        if (index >= descriptor.next_index) {\n+            WalletLogPrintf(\"%s: Detected a used keypool item, mark all keypool items up to this item as used\\n\", __func__);\n+            descriptor.next_index = index + 1;\n+        }\n+        if (!TopUp()) {\n+            WalletLogPrintf(\"%s: Topping up keypool failed (locked wallet)\\n\", __func__);\n+        }\n+    }\n+}\n+\n+void DescriptorScriptPubKeyMan::AddDescriptorKey(const CKey& key, const CPubKey &pubkey)\n+{\n+    LOCK(cs_desc_man);\n+    WalletBatch batch(m_storage.GetDatabase());\n+    if (!AddDescriptorKeyWithDB(batch, key, pubkey)) {\n+        throw std::runtime_error(std::string(__func__) + \": writing descriptor private key failed\");\n+    }\n+}\n+\n+bool DescriptorScriptPubKeyMan::AddDescriptorKeyWithDB(WalletBatch& batch, const CKey& key, const CPubKey &pubkey)\n+{\n+    AssertLockHeld(cs_desc_man);\n+    assert(!m_storage.IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS));\n+\n+    if (m_storage.HasEncryptionKeys()) {\n+        if (m_storage.IsLocked()) {\n+            return false;\n+        }\n+\n+        std::vector<unsigned char> crypted_secret;\n+        CKeyingMaterial secret(key.begin(), key.end());\n+        if (!EncryptSecret(m_storage.GetEncryptionKey(), secret, pubkey.GetHash(), crypted_secret)) {\n+            return false;\n+        }\n+\n+        m_map_crypted_keys[pubkey.GetID()] = make_pair(pubkey, crypted_secret);\n+        batch.WriteCryptedDescriptorKey(GetID(), pubkey, crypted_secret);\n+        return true;\n+    } else {\n+        m_map_keys[pubkey.GetID()] = key;\n+        return batch.WriteDescriptorKey(GetID(), pubkey, key.GetPrivKey());\n+    }\n+}\n+\n+bool DescriptorScriptPubKeyMan::SetupDescriptorGeneration(const CExtKey& master_key)\n+{\n+    LOCK(cs_desc_man);\n+    assert(m_storage.IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS));\n+\n+    // Ignore when there is already a descriptor\n+    if (descriptor.descriptor) {\n+        return false;\n+    }\n+\n+    int64_t creation_time = GetTime();\n+\n+    CPubKey master_pubkey = master_key.key.GetPubKey();\n+    assert(master_key.key.VerifyPubKey(master_pubkey));\n+\n+    // Get the fingerprint\n+    CKeyID master_id = master_key.key.GetPubKey().GetID();\n+    std::string fingerprint = HexStr(master_id.begin(), master_id.begin() + 4);\n+\n+    // Add the seed to the wallet\n+    std::string desc_prefix;\n+    std::string desc_suffix = \"/*)\";\n+    CExtKey d1;\n+    switch (address_type) {\n+    case OutputType::LEGACY: {\n+        master_key.Derive(d1, BIP32_HARDENED_KEY_LIMIT + 44);\n+        desc_prefix = \"pkh([\" + fingerprint + \"/44'\";\n+        break;\n+    }\n+    case OutputType::P2SH_SEGWIT: {\n+        master_key.Derive(d1, BIP32_HARDENED_KEY_LIMIT + 49);\n+        desc_prefix = \"sh(wpkh([\" + fingerprint + \"/49'\";\n+        desc_suffix += \")\";\n+        break;\n+    }\n+    case OutputType::BECH32: {\n+        master_key.Derive(d1, BIP32_HARDENED_KEY_LIMIT + 84);\n+        desc_prefix = \"wpkh([\" + fingerprint + \"/84'\";\n+        break;\n+    }\n+    default: assert(false);\n+    }\n+\n+    // Mainnet derives at 0',testnet and regtest derive at 1'\n+    CExtKey d2;\n+    if (Params().IsTestChain()) {\n+        d1.Derive(d2, BIP32_HARDENED_KEY_LIMIT + 1);\n+        desc_prefix += \"/1'\";\n+    } else {\n+        d1.Derive(d2, BIP32_HARDENED_KEY_LIMIT + 0);\n+        desc_prefix += \"/0'\";\n+    }\n+    // 3rd level is always 0'\n+    CExtKey d3;\n+    d2.Derive(d3, BIP32_HARDENED_KEY_LIMIT + 0);\n+    std::string xpub = EncodeExtPubKey(d3.Neuter());\n+\n+    // Build descriptor string\n+    std::string internal_path = internal ? \"/1\" : \"/0\";\n+    std::string desc_str = desc_prefix + \"/0']\" + xpub + internal_path + desc_suffix;\n+\n+    // Make the descriptor\n+    FlatSigningProvider keys;\n+    std::string error;\n+    std::unique_ptr<Descriptor> desc = Parse(desc_str, keys, error, false);\n+    WalletDescriptor w_desc(std::move(desc), creation_time, 0, 0, 0);\n+    descriptor = w_desc;\n+\n+    // Store the master private key, derived intermediate key, and descriptor\n+    WalletBatch batch(m_storage.GetDatabase());\n+    if (!AddDescriptorKeyWithDB(batch, master_key.key, master_key.key.GetPubKey())) {\n+        throw std::runtime_error(std::string(__func__) + \": writing descriptor master rivate key failed\");\n+    }\n+    if (!AddDescriptorKeyWithDB(batch, d3.key, d3.key.GetPubKey())) {\n+        throw std::runtime_error(std::string(__func__) + \": writing descriptor intermediate private key failed\");\n+    }\n+    if (!batch.WriteDescriptor(GetID(), descriptor)) {\n+        throw std::runtime_error(std::string(__func__) + \": writing descriptor failed\");\n+    }\n+\n+    // TopUp\n+    TopUp();\n+\n+    m_storage.UnsetBlankWalletFlag(batch);\n+    return true;\n+}\n+\n+bool DescriptorScriptPubKeyMan::IsHDEnabled() const\n+{\n+    LOCK(cs_desc_man);\n+    return descriptor.descriptor->IsRange();\n+}\n+\n+bool DescriptorScriptPubKeyMan::CanGetAddresses(bool internal)\n+{\n+    LOCK(cs_desc_man);\n+    return HavePrivateKeys() || descriptor.next_index < descriptor.range_end;\n+}\n+\n+bool DescriptorScriptPubKeyMan::HavePrivateKeys() const\n+{\n+    LOCK(cs_desc_man);\n+    return m_map_keys.size() > 0 || m_map_crypted_keys.size() > 0;\n+}\n+\n+int64_t DescriptorScriptPubKeyMan::GetOldestKeyPoolTime()\n+{\n+    return 0;\n+}\n+\n+size_t DescriptorScriptPubKeyMan::KeypoolCountExternalKeys()\n+{\n+    if (internal) {\n+        return 0;\n+    }\n+    return GetKeyPoolSize();\n+}\n+\n+unsigned int DescriptorScriptPubKeyMan::GetKeyPoolSize() const\n+{\n+    LOCK(cs_desc_man);\n+    return descriptor.range_end - descriptor.next_index;\n+}\n+\n+int64_t DescriptorScriptPubKeyMan::GetTimeFirstKey() const\n+{\n+    LOCK(cs_desc_man);\n+    return descriptor.creation_time;\n+}\n+\n+std::unique_ptr<FlatSigningProvider> DescriptorScriptPubKeyMan::GetSigningProvider(const CScript& script, bool include_private) const\n+{\n+    LOCK(cs_desc_man);\n+\n+    // Find the index of the script\n+    auto it = m_map_script_pub_keys.find(script);\n+    if (it == m_map_script_pub_keys.end()) {\n+        return nullptr;\n+    }\n+    int32_t index = it->second;\n+\n+    // Get the scripts, keys, and key origins for this script\n+    std::unique_ptr<FlatSigningProvider> out_keys = MakeUnique<FlatSigningProvider>();\n+    std::vector<CScript> scripts_temp;\n+    if (!descriptor.descriptor->ExpandFromCache(index, descriptor.cache[index - descriptor.range_start], scripts_temp, *out_keys)) return nullptr;\n+\n+    if (include_private) {\n+        FlatSigningProvider master_provider;\n+        master_provider.keys = GetKeys();\n+        descriptor.descriptor->ExpandPrivate(index, master_provider, *out_keys);\n+    }\n+\n+    return std::move(out_keys);\n+}\n+\n+std::unique_ptr<SigningProvider> DescriptorScriptPubKeyMan::GetSolvingProvider(const CScript& script) const\n+{\n+    return GetSigningProvider(script, false);\n+}\n+\n+bool DescriptorScriptPubKeyMan::CanProvide(const CScript& script, SignatureData& sigdata)\n+{\n+    return IsMine(script);\n+}\n+\n+bool DescriptorScriptPubKeyMan::SignTransaction(CMutableTransaction& tx, const std::map<COutPoint, Coin>& coins, int sighash, std::map<int, std::string>& input_errors) const\n+{\n+    std::unique_ptr<FlatSigningProvider> keys = MakeUnique<FlatSigningProvider>();\n+    for (const auto& coin_pair : coins) {\n+        std::unique_ptr<FlatSigningProvider> coin_keys = std::move(GetSigningProvider(coin_pair.second.out.scriptPubKey, true));\n+        if (!coin_keys) {\n+            continue;\n+        }\n+        *keys = Merge(*keys, *coin_keys);\n+    }\n+\n+    return ::SignTransaction(tx, keys.get(), coins, sighash, input_errors);\n+}\n+\n+SigningResult DescriptorScriptPubKeyMan::SignMessage(const std::string& message, const PKHash& pkhash, std::string& str_sig) const\n+{\n+    std::unique_ptr<FlatSigningProvider> keys = std::move(GetSigningProvider(GetScriptForDestination(pkhash), true));\n+    if (!keys) {\n+        return SigningResult::PRIVATE_KEY_NOT_AVAILABLE;\n+    }\n+\n+    CKeyID key_id(pkhash);\n+    CKey key;\n+    if (!keys->GetKey(key_id, key)) {\n+        return SigningResult::PRIVATE_KEY_NOT_AVAILABLE;\n+    }\n+\n+    if (!MessageSign(key, message, str_sig)) {\n+        return SigningResult::SIGNING_FAILED;\n+    }\n+    return SigningResult::OK;\n+}\n+\n+TransactionError DescriptorScriptPubKeyMan::FillPSBT(PartiallySignedTransaction& psbtx, int sighash_type, bool sign, bool bip32derivs) const\n+{\n+    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+        const CTxIn& txin = psbtx.tx->vin[i];\n+        PSBTInput& input = psbtx.inputs.at(i);\n+\n+        if (PSBTInputSigned(input)) {\n+            continue;\n+        }\n+\n+        // Verify input looks sane. This will check that we have at most one uxto, witness or non-witness.\n+        if (!input.IsSane()) {\n+            return TransactionError::INVALID_PSBT;\n+        }\n+\n+        // Get the Sighash type\n+        if (sign && input.sighash_type > 0 && input.sighash_type != sighash_type) {\n+            return TransactionError::SIGHASH_MISMATCH;\n+        }\n+\n+        // Get the scriptPubKey to know which SigningProvider to use\n+        CScript script;\n+        if (!input.witness_utxo.IsNull()) {\n+            script = input.witness_utxo.scriptPubKey;\n+        } else if (input.non_witness_utxo) {\n+            if (txin.prevout.n >= input.non_witness_utxo->vout.size()) {\n+                return TransactionError::MISSING_INPUTS;\n+            }\n+            script = input.non_witness_utxo->vout[txin.prevout.n].scriptPubKey;\n+        } else {\n+            // There's no UTXO so we can just skip this now\n+            continue;\n+        }\n+        SignatureData sigdata;\n+        input.FillSignatureData(sigdata);\n+\n+        std::unique_ptr<FlatSigningProvider> keys = GetSigningProvider(script, true);\n+        if (!keys) {\n+            continue;\n+        }\n+\n+        SignPSBTInput(HidingSigningProvider(keys.get(), !sign, !bip32derivs), psbtx, i, sighash_type);\n+    }\n+\n+    // Fill in the bip32 keypaths and redeemscripts for the outputs so that hardware wallets can identify change\n+    for (unsigned int i = 0; i < psbtx.tx->vout.size(); ++i) {\n+        std::unique_ptr<FlatSigningProvider> keys = GetSigningProvider(psbtx.tx->vout.at(i).scriptPubKey, true);",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 621,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "91d4efc84283743ef26e58526269731909286777",
      "in_reply_to_id": 381325869,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Once #18180 is implemented that reduce at least some of my confusion :-) ",
      "created_at": "2020-02-19T16:04:54Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r381372422",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/381372422"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2004,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/382704392",
      "pull_request_review_id": 362787031,
      "id": 382704392,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjcwNDM5Mg==",
      "diff_hunk": "@@ -1426,3 +1488,623 @@ std::set<CKeyID> LegacyScriptPubKeyMan::GetKeys() const\n     }\n     return set_address;\n }\n+\n+void LegacyScriptPubKeyMan::SetType(OutputType type, bool internal) {}\n+\n+bool DescriptorScriptPubKeyMan::GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error)\n+{\n+    if (!CanGetAddresses(internal)) {\n+        error = \"No private keys available\";\n+        return false;\n+    }\n+    {\n+        LOCK(cs_desc_man);\n+        if (descriptor.descriptor->IsSingleType() && type != address_type) {\n+            throw std::runtime_error(std::string(__func__) + \": Types are inconsistent\");\n+        }\n+\n+        TopUp();\n+\n+        // Get the scriptPubKey from the descriptor\n+        FlatSigningProvider out_keys;\n+        std::vector<CScript> scripts_temp;\n+        if (descriptor.cache.size() <= (unsigned int)(descriptor.next_index - descriptor.range_start) && !TopUp(1)) {\n+            // We can't generate anymore keys\n+            error = \"Error: Keypool ran out, please call keypoolrefill first\";\n+            return false;\n+        }\n+        descriptor.descriptor->ExpandFromCache(descriptor.next_index, descriptor.cache[descriptor.next_index - descriptor.range_start], scripts_temp, out_keys);\n+\n+        if (descriptor.descriptor->IsSingleType()) {\n+            Optional<OutputType> out_script_type = descriptor.descriptor->GetOutputType();\n+            if (out_script_type && out_script_type == type) {\n+                ExtractDestination(scripts_temp[0], dest);\n+            } else {\n+                throw std::runtime_error(std::string(__func__) + \": Types are inconsistent. Stored type does not match type of newly generated address\");\n+            }\n+        } else {\n+            // This is a combo descriptor which should not be an active descriptor\n+            assert(false);\n+        }\n+        descriptor.next_index++;\n+        WalletBatch(m_storage.GetDatabase()).WriteDescriptor(GetID(), descriptor);\n+        return true;\n+    }\n+}\n+\n+isminetype DescriptorScriptPubKeyMan::IsMine(const CScript& script) const\n+{\n+    LOCK(cs_desc_man);\n+    if (m_map_script_pub_keys.count(script) > 0) {\n+        return ISMINE_SPENDABLE;\n+    }\n+    return ISMINE_NO;\n+}\n+\n+bool DescriptorScriptPubKeyMan::CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys)\n+{\n+    {\n+        LOCK(cs_desc_man);\n+        if (!m_map_keys.empty())\n+            return false;\n+\n+        bool keyPass = m_map_crypted_keys.empty(); // Always pass when there are no encrypted keys\n+        bool keyFail = false;\n+        CryptedKeyMap::const_iterator mi = m_map_crypted_keys.begin();\n+        for (; mi != m_map_crypted_keys.end(); ++mi)\n+        {\n+            const CPubKey &pubkey = (*mi).second.first;\n+            const std::vector<unsigned char> &crypted_secret = (*mi).second.second;\n+            CKey key;\n+            if (!DecryptKey(master_key, crypted_secret, pubkey, key))\n+            {\n+                keyFail = true;\n+                break;\n+            }\n+            keyPass = true;\n+            if (m_decryption_thoroughly_checked)\n+                break;\n+        }\n+        if (keyPass && keyFail)\n+        {\n+            LogPrintf(\"The wallet is probably corrupted: Some keys decrypt but not all.\\n\");\n+            throw std::runtime_error(\"Error unlocking wallet: some keys decrypt but not all. Your wallet file may be corrupt.\");\n+        }\n+        if (keyFail || (!keyPass && !accept_no_keys))\n+            return false;\n+        m_decryption_thoroughly_checked = true;\n+    }\n+    return true;\n+}\n+\n+bool DescriptorScriptPubKeyMan::Encrypt(const CKeyingMaterial& master_key, WalletBatch* batch)\n+{\n+    LOCK(cs_desc_man);\n+    if (!m_map_crypted_keys.empty()) {\n+        return false;\n+    }\n+\n+    for (const KeyMap::value_type& key_in : m_map_keys)\n+    {\n+        const CKey &key = key_in.second;\n+        CPubKey pubkey = key.GetPubKey();\n+        CKeyingMaterial secret(key.begin(), key.end());\n+        std::vector<unsigned char> crypted_secret;\n+        if (!EncryptSecret(master_key, secret, pubkey.GetHash(), crypted_secret)) {\n+            return false;\n+        }\n+        m_map_crypted_keys[pubkey.GetID()] = make_pair(pubkey, crypted_secret);\n+        batch->WriteCryptedDescriptorKey(GetID(), pubkey, crypted_secret);\n+    }\n+    m_map_keys.clear();\n+    return true;\n+}\n+\n+bool DescriptorScriptPubKeyMan::GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool)\n+{\n+    LOCK(cs_desc_man);\n+    std::string error;\n+    bool result = GetNewDestination(type, address, error);\n+    index = descriptor.next_index - 1;\n+    return result;\n+}\n+\n+void DescriptorScriptPubKeyMan::ReturnDestination(int64_t index, bool internal, const CTxDestination& addr)\n+{\n+    LOCK(cs_desc_man);\n+    // Only return when the index was the most recent\n+    if (descriptor.next_index - 1 == index) {\n+        descriptor.next_index--;\n+    }\n+    WalletBatch(m_storage.GetDatabase()).WriteDescriptor(GetID(), descriptor);\n+    NotifyCanGetAddressesChanged();\n+}\n+\n+std::map<CKeyID, CKey> DescriptorScriptPubKeyMan::GetKeys() const\n+{\n+    AssertLockHeld(cs_desc_man);\n+    if (m_storage.HasEncryptionKeys() && !m_storage.IsLocked()) {\n+        KeyMap keys;\n+        for (auto key_pair : m_map_crypted_keys) {\n+            const CPubKey& pubkey = key_pair.second.first;\n+            const std::vector<unsigned char>& crypted_secret = key_pair.second.second;\n+            CKey key;\n+            DecryptKey(m_storage.GetEncryptionKey(), crypted_secret, pubkey, key);\n+            keys[pubkey.GetID()] = key;\n+        }\n+        return keys;\n+    }\n+    return m_map_keys;\n+}\n+\n+bool DescriptorScriptPubKeyMan::TopUp(unsigned int size)\n+{\n+    LOCK(cs_desc_man);\n+    unsigned int target_size;\n+    if (size > 0)\n+        target_size = size;\n+    else\n+        target_size = std::max(gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 0);\n+\n+    // Make sure we have everything between range_start and range_end\n+    int32_t range_size = descriptor.range_end - descriptor.range_start;\n+    int32_t highest_cached_index = descriptor.range_start + descriptor.cache.size();\n+    int32_t to_fill = std::max(range_size - (int)descriptor.cache.size(), 0);\n+\n+    // Fill up the rest of the pool\n+    int missing_pool = std::max(std::max((int)target_size, 1) - (descriptor.range_end - descriptor.next_index), 0);\n+    to_fill += missing_pool;\n+\n+    // If the descriptor is not ranged, we actually just want to fill the first cache item\n+    if (!descriptor.descriptor->IsRange()) {\n+        to_fill = descriptor.cache.size() == 0 ? 1 : 0;\n+        missing_pool = 0;\n+        descriptor.range_end = 1;\n+        descriptor.range_start = 0;\n+    }\n+\n+    FlatSigningProvider provider;\n+    provider.keys = GetKeys();\n+\n+    WalletBatch batch(m_storage.GetDatabase());\n+    uint256 id = GetID();\n+    for (int32_t i = highest_cached_index; i < highest_cached_index + to_fill; ++i) {\n+        FlatSigningProvider out_keys;\n+        std::vector<CScript> scripts_temp;\n+        std::vector<unsigned char> cache;\n+        if (!descriptor.descriptor->Expand(i, provider, scripts_temp, out_keys, &cache)) return false;\n+        // Add all of the scriptPubKeys to the scriptPubKey set\n+        for (const CScript& script : scripts_temp) {\n+            m_map_script_pub_keys[script] = i;\n+        }\n+        // Write the cache\n+        if (!batch.WriteDescriptorCache(id, i, cache)) {\n+            throw std::runtime_error(std::string(__func__) + \": writing cache item failed\");\n+        }\n+        descriptor.cache.push_back(std::move(cache));\n+    }\n+    descriptor.range_end += missing_pool;\n+    batch.WriteDescriptor(GetID(), descriptor);\n+\n+    // By this point, the cache size should be the size of the entire range\n+    assert((uint32_t)descriptor.range_end - (uint32_t)descriptor.range_start == descriptor.cache.size());\n+\n+    NotifyCanGetAddressesChanged();\n+    return true;\n+}\n+\n+bool DescriptorScriptPubKeyMan::ClearDescriptorCache() {\n+    LOCK(cs_desc_man);\n+    WalletBatch batch(m_storage.GetDatabase());\n+    uint256 id = GetID();\n+    int32_t highest_cached_index = descriptor.range_start + descriptor.cache.size();\n+    for (uint32_t i = highest_cached_index; i < (uint32_t)highest_cached_index + descriptor.cache.size(); ++i) {\n+        if (!batch.EraseDescriptorCache(id, i)) {\n+            throw std::runtime_error(std::string(__func__) + \": removing cache item failed\");\n+        }\n+    }\n+    descriptor.cache.clear();\n+\n+    return true;\n+}\n+\n+void DescriptorScriptPubKeyMan::MarkUnusedAddresses(const CScript& script)\n+{\n+    LOCK(cs_desc_man);\n+    if (IsMine(script)) {\n+        int32_t index = m_map_script_pub_keys[script];\n+        if (index >= descriptor.next_index) {\n+            WalletLogPrintf(\"%s: Detected a used keypool item, mark all keypool items up to this item as used\\n\", __func__);\n+            descriptor.next_index = index + 1;\n+        }\n+        if (!TopUp()) {\n+            WalletLogPrintf(\"%s: Topping up keypool failed (locked wallet)\\n\", __func__);\n+        }\n+    }\n+}\n+\n+void DescriptorScriptPubKeyMan::AddDescriptorKey(const CKey& key, const CPubKey &pubkey)\n+{\n+    LOCK(cs_desc_man);\n+    WalletBatch batch(m_storage.GetDatabase());\n+    if (!AddDescriptorKeyWithDB(batch, key, pubkey)) {\n+        throw std::runtime_error(std::string(__func__) + \": writing descriptor private key failed\");\n+    }\n+}\n+\n+bool DescriptorScriptPubKeyMan::AddDescriptorKeyWithDB(WalletBatch& batch, const CKey& key, const CPubKey &pubkey)\n+{\n+    AssertLockHeld(cs_desc_man);\n+    assert(!m_storage.IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS));\n+\n+    if (m_storage.HasEncryptionKeys()) {\n+        if (m_storage.IsLocked()) {\n+            return false;\n+        }\n+\n+        std::vector<unsigned char> crypted_secret;\n+        CKeyingMaterial secret(key.begin(), key.end());\n+        if (!EncryptSecret(m_storage.GetEncryptionKey(), secret, pubkey.GetHash(), crypted_secret)) {\n+            return false;\n+        }\n+\n+        m_map_crypted_keys[pubkey.GetID()] = make_pair(pubkey, crypted_secret);\n+        batch.WriteCryptedDescriptorKey(GetID(), pubkey, crypted_secret);\n+        return true;\n+    } else {\n+        m_map_keys[pubkey.GetID()] = key;\n+        return batch.WriteDescriptorKey(GetID(), pubkey, key.GetPrivKey());\n+    }\n+}\n+\n+bool DescriptorScriptPubKeyMan::SetupDescriptorGeneration(const CExtKey& master_key)\n+{\n+    LOCK(cs_desc_man);\n+    assert(m_storage.IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS));\n+\n+    // Ignore when there is already a descriptor\n+    if (descriptor.descriptor) {\n+        return false;\n+    }\n+\n+    int64_t creation_time = GetTime();\n+\n+    CPubKey master_pubkey = master_key.key.GetPubKey();\n+    assert(master_key.key.VerifyPubKey(master_pubkey));\n+\n+    // Get the fingerprint\n+    CKeyID master_id = master_key.key.GetPubKey().GetID();\n+    std::string fingerprint = HexStr(master_id.begin(), master_id.begin() + 4);\n+\n+    // Add the seed to the wallet\n+    std::string desc_prefix;\n+    std::string desc_suffix = \"/*)\";\n+    CExtKey d1;\n+    switch (address_type) {\n+    case OutputType::LEGACY: {\n+        master_key.Derive(d1, BIP32_HARDENED_KEY_LIMIT + 44);\n+        desc_prefix = \"pkh([\" + fingerprint + \"/44'\";\n+        break;\n+    }\n+    case OutputType::P2SH_SEGWIT: {\n+        master_key.Derive(d1, BIP32_HARDENED_KEY_LIMIT + 49);\n+        desc_prefix = \"sh(wpkh([\" + fingerprint + \"/49'\";\n+        desc_suffix += \")\";\n+        break;\n+    }\n+    case OutputType::BECH32: {\n+        master_key.Derive(d1, BIP32_HARDENED_KEY_LIMIT + 84);\n+        desc_prefix = \"wpkh([\" + fingerprint + \"/84'\";\n+        break;\n+    }\n+    default: assert(false);\n+    }\n+\n+    // Mainnet derives at 0',testnet and regtest derive at 1'\n+    CExtKey d2;\n+    if (Params().IsTestChain()) {\n+        d1.Derive(d2, BIP32_HARDENED_KEY_LIMIT + 1);\n+        desc_prefix += \"/1'\";\n+    } else {\n+        d1.Derive(d2, BIP32_HARDENED_KEY_LIMIT + 0);\n+        desc_prefix += \"/0'\";\n+    }\n+    // 3rd level is always 0'\n+    CExtKey d3;\n+    d2.Derive(d3, BIP32_HARDENED_KEY_LIMIT + 0);\n+    std::string xpub = EncodeExtPubKey(d3.Neuter());\n+\n+    // Build descriptor string\n+    std::string internal_path = internal ? \"/1\" : \"/0\";\n+    std::string desc_str = desc_prefix + \"/0']\" + xpub + internal_path + desc_suffix;\n+\n+    // Make the descriptor\n+    FlatSigningProvider keys;\n+    std::string error;\n+    std::unique_ptr<Descriptor> desc = Parse(desc_str, keys, error, false);\n+    WalletDescriptor w_desc(std::move(desc), creation_time, 0, 0, 0);\n+    descriptor = w_desc;\n+\n+    // Store the master private key, derived intermediate key, and descriptor\n+    WalletBatch batch(m_storage.GetDatabase());\n+    if (!AddDescriptorKeyWithDB(batch, master_key.key, master_key.key.GetPubKey())) {\n+        throw std::runtime_error(std::string(__func__) + \": writing descriptor master rivate key failed\");\n+    }\n+    if (!AddDescriptorKeyWithDB(batch, d3.key, d3.key.GetPubKey())) {\n+        throw std::runtime_error(std::string(__func__) + \": writing descriptor intermediate private key failed\");\n+    }\n+    if (!batch.WriteDescriptor(GetID(), descriptor)) {\n+        throw std::runtime_error(std::string(__func__) + \": writing descriptor failed\");\n+    }\n+\n+    // TopUp\n+    TopUp();\n+\n+    m_storage.UnsetBlankWalletFlag(batch);\n+    return true;\n+}\n+\n+bool DescriptorScriptPubKeyMan::IsHDEnabled() const\n+{\n+    LOCK(cs_desc_man);\n+    return descriptor.descriptor->IsRange();\n+}\n+\n+bool DescriptorScriptPubKeyMan::CanGetAddresses(bool internal)\n+{\n+    LOCK(cs_desc_man);\n+    return HavePrivateKeys() || descriptor.next_index < descriptor.range_end;\n+}\n+\n+bool DescriptorScriptPubKeyMan::HavePrivateKeys() const\n+{\n+    LOCK(cs_desc_man);\n+    return m_map_keys.size() > 0 || m_map_crypted_keys.size() > 0;\n+}\n+\n+int64_t DescriptorScriptPubKeyMan::GetOldestKeyPoolTime()\n+{\n+    return 0;\n+}\n+\n+size_t DescriptorScriptPubKeyMan::KeypoolCountExternalKeys()\n+{\n+    if (internal) {\n+        return 0;\n+    }\n+    return GetKeyPoolSize();\n+}\n+\n+unsigned int DescriptorScriptPubKeyMan::GetKeyPoolSize() const\n+{\n+    LOCK(cs_desc_man);\n+    return descriptor.range_end - descriptor.next_index;\n+}\n+\n+int64_t DescriptorScriptPubKeyMan::GetTimeFirstKey() const\n+{\n+    LOCK(cs_desc_man);\n+    return descriptor.creation_time;\n+}\n+\n+std::unique_ptr<FlatSigningProvider> DescriptorScriptPubKeyMan::GetSigningProvider(const CScript& script, bool include_private) const\n+{\n+    LOCK(cs_desc_man);\n+\n+    // Find the index of the script\n+    auto it = m_map_script_pub_keys.find(script);\n+    if (it == m_map_script_pub_keys.end()) {\n+        return nullptr;\n+    }\n+    int32_t index = it->second;\n+\n+    // Get the scripts, keys, and key origins for this script\n+    std::unique_ptr<FlatSigningProvider> out_keys = MakeUnique<FlatSigningProvider>();\n+    std::vector<CScript> scripts_temp;\n+    if (!descriptor.descriptor->ExpandFromCache(index, descriptor.cache[index - descriptor.range_start], scripts_temp, *out_keys)) return nullptr;\n+\n+    if (include_private) {\n+        FlatSigningProvider master_provider;\n+        master_provider.keys = GetKeys();\n+        descriptor.descriptor->ExpandPrivate(index, master_provider, *out_keys);\n+    }\n+\n+    return std::move(out_keys);\n+}\n+\n+std::unique_ptr<SigningProvider> DescriptorScriptPubKeyMan::GetSolvingProvider(const CScript& script) const\n+{\n+    return GetSigningProvider(script, false);\n+}\n+\n+bool DescriptorScriptPubKeyMan::CanProvide(const CScript& script, SignatureData& sigdata)\n+{\n+    return IsMine(script);\n+}\n+\n+bool DescriptorScriptPubKeyMan::SignTransaction(CMutableTransaction& tx, const std::map<COutPoint, Coin>& coins, int sighash, std::map<int, std::string>& input_errors) const\n+{\n+    std::unique_ptr<FlatSigningProvider> keys = MakeUnique<FlatSigningProvider>();\n+    for (const auto& coin_pair : coins) {\n+        std::unique_ptr<FlatSigningProvider> coin_keys = std::move(GetSigningProvider(coin_pair.second.out.scriptPubKey, true));\n+        if (!coin_keys) {\n+            continue;\n+        }\n+        *keys = Merge(*keys, *coin_keys);\n+    }\n+\n+    return ::SignTransaction(tx, keys.get(), coins, sighash, input_errors);\n+}\n+\n+SigningResult DescriptorScriptPubKeyMan::SignMessage(const std::string& message, const PKHash& pkhash, std::string& str_sig) const\n+{\n+    std::unique_ptr<FlatSigningProvider> keys = std::move(GetSigningProvider(GetScriptForDestination(pkhash), true));\n+    if (!keys) {\n+        return SigningResult::PRIVATE_KEY_NOT_AVAILABLE;\n+    }\n+\n+    CKeyID key_id(pkhash);\n+    CKey key;\n+    if (!keys->GetKey(key_id, key)) {\n+        return SigningResult::PRIVATE_KEY_NOT_AVAILABLE;\n+    }\n+\n+    if (!MessageSign(key, message, str_sig)) {\n+        return SigningResult::SIGNING_FAILED;\n+    }\n+    return SigningResult::OK;\n+}\n+\n+TransactionError DescriptorScriptPubKeyMan::FillPSBT(PartiallySignedTransaction& psbtx, int sighash_type, bool sign, bool bip32derivs) const\n+{\n+    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+        const CTxIn& txin = psbtx.tx->vin[i];\n+        PSBTInput& input = psbtx.inputs.at(i);\n+\n+        if (PSBTInputSigned(input)) {\n+            continue;\n+        }\n+\n+        // Verify input looks sane. This will check that we have at most one uxto, witness or non-witness.\n+        if (!input.IsSane()) {\n+            return TransactionError::INVALID_PSBT;\n+        }\n+\n+        // Get the Sighash type\n+        if (sign && input.sighash_type > 0 && input.sighash_type != sighash_type) {\n+            return TransactionError::SIGHASH_MISMATCH;\n+        }\n+\n+        // Get the scriptPubKey to know which SigningProvider to use\n+        CScript script;\n+        if (!input.witness_utxo.IsNull()) {\n+            script = input.witness_utxo.scriptPubKey;\n+        } else if (input.non_witness_utxo) {\n+            if (txin.prevout.n >= input.non_witness_utxo->vout.size()) {\n+                return TransactionError::MISSING_INPUTS;\n+            }\n+            script = input.non_witness_utxo->vout[txin.prevout.n].scriptPubKey;\n+        } else {\n+            // There's no UTXO so we can just skip this now\n+            continue;\n+        }\n+        SignatureData sigdata;\n+        input.FillSignatureData(sigdata);\n+\n+        std::unique_ptr<FlatSigningProvider> keys = GetSigningProvider(script, true);\n+        if (!keys) {\n+            continue;\n+        }\n+\n+        SignPSBTInput(HidingSigningProvider(keys.get(), !sign, !bip32derivs), psbtx, i, sighash_type);\n+    }\n+\n+    // Fill in the bip32 keypaths and redeemscripts for the outputs so that hardware wallets can identify change\n+    for (unsigned int i = 0; i < psbtx.tx->vout.size(); ++i) {\n+        std::unique_ptr<FlatSigningProvider> keys = GetSigningProvider(psbtx.tx->vout.at(i).scriptPubKey, true);",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 621,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "91d4efc84283743ef26e58526269731909286777",
      "in_reply_to_id": 381325869,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I figured out what confused me. I was trying to call the Descriptor SKPMan version of `FillPSBT()` but that doesn't include the UTXOs, which are normally added in `CWallet`. I overhauled my design to avoid that problem. ",
      "created_at": "2020-02-21T17:16:39Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r382704392",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/382704392"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2004,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/385666508",
      "pull_request_review_id": 366359661,
      "id": 385666508,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY2NjUwOA==",
      "diff_hunk": "@@ -4237,3 +4392,169 @@ void CWallet::ConnectScriptPubKeyManNotifiers()\n         spk_man->NotifyCanGetAddressesChanged.connect(NotifyCanGetAddressesChanged);\n     }\n }\n+\n+void CWallet::LoadDescriptorScriptPubKeyMan(uint256 id, WalletDescriptor& desc)\n+{\n+    auto spk_manager = std::unique_ptr<ScriptPubKeyMan>(new DescriptorScriptPubKeyMan(*this, desc));\n+    m_spk_managers[id] = std::move(spk_manager);\n+}\n+\n+void CWallet::SetupDescriptorScriptPubKeyMans()\n+{\n+    AssertLockHeld(cs_wallet);\n+\n+    // Make a seed\n+    CKey seed_key;\n+    seed_key.MakeNewKey(true);\n+    CPubKey seed = seed_key.GetPubKey();\n+    assert(seed_key.VerifyPubKey(seed));\n+\n+    // Get the extended key\n+    CExtKey master_key;\n+    master_key.SetSeed(seed_key.begin(), seed_key.size());\n+\n+    for (bool internal : {false, true}) {\n+        for (OutputType t : OUTPUT_TYPES) {\n+            auto spk_manager = std::unique_ptr<DescriptorScriptPubKeyMan>(new DescriptorScriptPubKeyMan(*this, t, internal));\n+            if (IsCrypted()) {\n+                if (IsLocked()) {\n+                    throw std::runtime_error(std::string(__func__) + \": Wallet is locked, cannot setup new descriptors\");\n+                }\n+                if (!spk_manager->CheckDecryptionKey(vMasterKey) && !spk_manager->Encrypt(vMasterKey, nullptr)) {\n+                    throw std::runtime_error(std::string(__func__) + \": Could not encrypt new descriptors\");\n+                }\n+            }\n+            spk_manager->SetupDescriptorGeneration(master_key);\n+            uint256 id = spk_manager->GetID();\n+            m_spk_managers[id] = std::move(spk_manager);\n+            SetActiveScriptPubKeyMan(id, t, internal);\n+        }\n+    }\n+}\n+\n+void CWallet::SetActiveScriptPubKeyMan(uint256 id, OutputType type, bool internal, bool memonly)\n+{\n+    WalletLogPrintf(\"Setting spkMan to active: id = %s, type = %d, internal = %d\\n\", id.ToString(), static_cast<int>(type), static_cast<int>(internal));\n+    auto& spk_mans = internal ? m_internal_spk_managers : m_external_spk_managers;\n+    auto spk_man = m_spk_managers.at(id).get();\n+    spk_man->SetType(type, internal);\n+    spk_mans[type] = spk_man;\n+\n+    if (!memonly) {\n+        WalletBatch batch(*database);\n+        if (!batch.WriteActiveScriptPubKeyMan(static_cast<uint8_t>(type), id, internal)) {\n+            throw std::runtime_error(std::string(__func__) + \": writing active ScriptPubKeyMan id failed\");\n+        }\n+    }\n+    NotifyCanGetAddressesChanged();\n+}\n+\n+bool CWallet::IsLegacy() const\n+{\n+    if (m_internal_spk_managers.count(OutputType::LEGACY) == 0) {\n+        return false;\n+    }\n+    auto spk_man = dynamic_cast<LegacyScriptPubKeyMan*>(m_internal_spk_managers.at(OutputType::LEGACY));\n+    return spk_man != nullptr;\n+}\n+\n+DescriptorScriptPubKeyMan* CWallet::HasWalletDescriptor(const WalletDescriptor& desc) const\n+{\n+    if (!IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+        return nullptr;\n+    }\n+\n+    for (auto& spk_man_pair : m_spk_managers) {\n+        // Try to downcast to DescriptorScriptPubKeyMan then check if the descriptors match\n+        DescriptorScriptPubKeyMan* spk_manager = dynamic_cast<DescriptorScriptPubKeyMan*>(spk_man_pair.second.get());\n+        if (spk_manager != nullptr && spk_manager->HasWalletDescriptor(desc)) {\n+            return spk_manager;\n+        }\n+    }\n+\n+    return nullptr;\n+}\n+\n+bool CWallet::MaybeClearWalletDescriptorCache(const WalletDescriptor& desc)\n+{\n+    if (!IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+        WalletLogPrintf(\"Cannot update WalletDescriptor in a non-descriptor wallet\\n\");\n+        return false;\n+    }\n+\n+    auto spk_manager = HasWalletDescriptor(desc);\n+    if (!spk_manager) {\n+        WalletLogPrintf(\"Cannot find spkMan for descriptor\\n\");\n+        return false;\n+    }\n+\n+    WalletLogPrintf(\"Update existing descriptor: %s\\n\", desc.descriptor->ToString());\n+    LOCK2(cs_wallet, spk_manager->cs_desc_man);\n+\n+    // Clear the cache if necessary\n+    if (desc.range_start < spk_manager->GetWalletDescriptor().range_start) {\n+        spk_manager->ClearDescriptorCache();",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 466,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "1b4fd1424f6160195d6d28072d8793b666db007d",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Is still necessary now that you're no longer caching individual keys? If not, then it looks like you can drop `ClearDescriptorCache()`.",
      "created_at": "2020-02-28T12:22:39Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r385666508",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/385666508"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4496,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/385668788",
      "pull_request_review_id": 366362548,
      "id": 385668788,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY2ODc4OA==",
      "diff_hunk": "@@ -1434,3 +1496,609 @@ std::set<CKeyID> LegacyScriptPubKeyMan::GetKeys() const\n     }\n     return set_address;\n }\n+\n+void LegacyScriptPubKeyMan::SetType(OutputType type, bool internal) {}\n+\n+bool DescriptorScriptPubKeyMan::GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error)\n+{\n+    if (!CanGetAddresses(internal)) {\n+        error = \"No private keys available\";\n+        return false;\n+    }\n+    {\n+        LOCK(cs_desc_man);\n+        if (descriptor.descriptor->IsSingleType() && type != address_type) {\n+            throw std::runtime_error(std::string(__func__) + \": Types are inconsistent\");\n+        }\n+\n+        TopUp();\n+\n+        // Get the scriptPubKey from the descriptor\n+        FlatSigningProvider out_keys;\n+        std::vector<CScript> scripts_temp;\n+        if (descriptor.range_end <= m_max_desc_index && !TopUp(1)) {\n+            // We can't generate anymore keys\n+            error = \"Error: Keypool ran out, please call keypoolrefill first\";\n+            return false;\n+        }\n+        if (!descriptor.descriptor->ExpandFromCache(descriptor.next_index, descriptor.cache, scripts_temp, out_keys)) {\n+            // We can't generate anymore keys\n+            error = \"Error: Keypool ran out, please call keypoolrefill first\";\n+            return false;\n+        }\n+\n+        if (descriptor.descriptor->IsSingleType()) {\n+            Optional<OutputType> out_script_type = descriptor.descriptor->GetOutputType();\n+            if (out_script_type && out_script_type == type) {\n+                ExtractDestination(scripts_temp[0], dest);\n+            } else {\n+                throw std::runtime_error(std::string(__func__) + \": Types are inconsistent. Stored type does not match type of newly generated address\");\n+            }\n+        } else {\n+            // This is a combo descriptor which should not be an active descriptor\n+            assert(false);\n+        }\n+        descriptor.next_index++;\n+        WalletBatch(m_storage.GetDatabase()).WriteDescriptor(GetID(), descriptor);\n+        return true;\n+    }\n+}\n+\n+isminetype DescriptorScriptPubKeyMan::IsMine(const CScript& script) const\n+{\n+    LOCK(cs_desc_man);\n+    if (m_map_script_pub_keys.count(script) > 0) {\n+        return ISMINE_SPENDABLE;\n+    }\n+    return ISMINE_NO;\n+}\n+\n+bool DescriptorScriptPubKeyMan::CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys)\n+{\n+    {\n+        LOCK(cs_desc_man);\n+        if (!m_map_keys.empty())\n+            return false;\n+\n+        bool keyPass = m_map_crypted_keys.empty(); // Always pass when there are no encrypted keys\n+        bool keyFail = false;\n+        CryptedKeyMap::const_iterator mi = m_map_crypted_keys.begin();\n+        for (; mi != m_map_crypted_keys.end(); ++mi)\n+        {\n+            const CPubKey &pubkey = (*mi).second.first;\n+            const std::vector<unsigned char> &crypted_secret = (*mi).second.second;\n+            CKey key;\n+            if (!DecryptKey(master_key, crypted_secret, pubkey, key))\n+            {\n+                keyFail = true;\n+                break;\n+            }\n+            keyPass = true;\n+            if (m_decryption_thoroughly_checked)\n+                break;\n+        }\n+        if (keyPass && keyFail)\n+        {\n+            LogPrintf(\"The wallet is probably corrupted: Some keys decrypt but not all.\\n\");\n+            throw std::runtime_error(\"Error unlocking wallet: some keys decrypt but not all. Your wallet file may be corrupt.\");\n+        }\n+        if (keyFail || (!keyPass && !accept_no_keys))\n+            return false;\n+        m_decryption_thoroughly_checked = true;\n+    }\n+    return true;\n+}\n+\n+bool DescriptorScriptPubKeyMan::Encrypt(const CKeyingMaterial& master_key, WalletBatch* batch)\n+{\n+    LOCK(cs_desc_man);\n+    if (!m_map_crypted_keys.empty()) {\n+        return false;\n+    }\n+\n+    for (const KeyMap::value_type& key_in : m_map_keys)\n+    {\n+        const CKey &key = key_in.second;\n+        CPubKey pubkey = key.GetPubKey();\n+        CKeyingMaterial secret(key.begin(), key.end());\n+        std::vector<unsigned char> crypted_secret;\n+        if (!EncryptSecret(master_key, secret, pubkey.GetHash(), crypted_secret)) {\n+            return false;\n+        }\n+        m_map_crypted_keys[pubkey.GetID()] = make_pair(pubkey, crypted_secret);\n+        batch->WriteCryptedDescriptorKey(GetID(), pubkey, crypted_secret);\n+    }\n+    m_map_keys.clear();\n+    return true;\n+}\n+\n+bool DescriptorScriptPubKeyMan::GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool)\n+{\n+    LOCK(cs_desc_man);\n+    std::string error;\n+    bool result = GetNewDestination(type, address, error);\n+    index = descriptor.next_index - 1;\n+    return result;\n+}\n+\n+void DescriptorScriptPubKeyMan::ReturnDestination(int64_t index, bool internal, const CTxDestination& addr)\n+{\n+    LOCK(cs_desc_man);\n+    // Only return when the index was the most recent\n+    if (descriptor.next_index - 1 == index) {\n+        descriptor.next_index--;\n+    }\n+    WalletBatch(m_storage.GetDatabase()).WriteDescriptor(GetID(), descriptor);\n+    NotifyCanGetAddressesChanged();\n+}\n+\n+std::map<CKeyID, CKey> DescriptorScriptPubKeyMan::GetKeys() const\n+{\n+    AssertLockHeld(cs_desc_man);\n+    if (m_storage.HasEncryptionKeys() && !m_storage.IsLocked()) {\n+        KeyMap keys;\n+        for (auto key_pair : m_map_crypted_keys) {\n+            const CPubKey& pubkey = key_pair.second.first;\n+            const std::vector<unsigned char>& crypted_secret = key_pair.second.second;\n+            CKey key;\n+            DecryptKey(m_storage.GetEncryptionKey(), crypted_secret, pubkey, key);\n+            keys[pubkey.GetID()] = key;\n+        }\n+        return keys;\n+    }\n+    return m_map_keys;\n+}\n+\n+bool DescriptorScriptPubKeyMan::TopUp(unsigned int size)\n+{\n+    LOCK(cs_desc_man);\n+    unsigned int target_size;\n+    if (size > 0)\n+        target_size = size;\n+    else\n+        target_size = std::max(gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 0);\n+    target_size = std::max((int32_t)target_size, 1);\n+\n+    // Calculate the new range_end\n+    int32_t new_range_end = std::max(descriptor.next_index + (int32_t)target_size, descriptor.range_end);\n+\n+    // If the descriptor is not ranged, we actually just want to fill the first cache item\n+    if (!descriptor.descriptor->IsRange()) {\n+        new_range_end = 1;\n+        descriptor.range_end = 1;\n+        descriptor.range_start = 0;\n+    }\n+\n+    FlatSigningProvider provider;\n+    provider.keys = GetKeys();\n+\n+    WalletBatch batch(m_storage.GetDatabase());\n+    uint256 id = GetID();\n+    for (int32_t i = m_max_desc_index + 1; i < new_range_end; ++i) {\n+        FlatSigningProvider out_keys;\n+        std::vector<CScript> scripts_temp;\n+        DescriptorCache cache;\n+        if (!descriptor.descriptor->Expand(i, provider, scripts_temp, out_keys, &cache)) {\n+            // Maybe we have a cached xpub and we can expand from cache\n+            if (!descriptor.descriptor->ExpandFromCache(i, descriptor.cache, scripts_temp, out_keys)) return false;\n+        }\n+        // Add all of the scriptPubKeys to the scriptPubKey set\n+        for (const CScript& script : scripts_temp) {\n+            m_map_script_pub_keys[script] = i;\n+        }\n+        // Write the cache\n+        std::map<KeyOriginInfo, CExtPubKey> newly_cached = descriptor.cache.GetNotCached(cache.GetCachedExtPubKeys());",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 299,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "1b4fd1424f6160195d6d28072d8793b666db007d",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Now that you're no longer caching individual keys, can there still be a situation where you have a non-empty cache that's incomplete? If not, then you might be able to drop `GetNotCached`.",
      "created_at": "2020-02-28T12:28:25Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r385668788",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/385668788"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1691,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/385674205",
      "pull_request_review_id": 366369212,
      "id": 385674205,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY3NDIwNQ==",
      "diff_hunk": "@@ -1434,3 +1496,609 @@ std::set<CKeyID> LegacyScriptPubKeyMan::GetKeys() const\n     }\n     return set_address;\n }\n+\n+void LegacyScriptPubKeyMan::SetType(OutputType type, bool internal) {}\n+\n+bool DescriptorScriptPubKeyMan::GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error)\n+{\n+    if (!CanGetAddresses(internal)) {\n+        error = \"No private keys available\";\n+        return false;\n+    }\n+    {\n+        LOCK(cs_desc_man);\n+        if (descriptor.descriptor->IsSingleType() && type != address_type) {\n+            throw std::runtime_error(std::string(__func__) + \": Types are inconsistent\");\n+        }\n+\n+        TopUp();\n+\n+        // Get the scriptPubKey from the descriptor\n+        FlatSigningProvider out_keys;\n+        std::vector<CScript> scripts_temp;\n+        if (descriptor.range_end <= m_max_desc_index && !TopUp(1)) {\n+            // We can't generate anymore keys\n+            error = \"Error: Keypool ran out, please call keypoolrefill first\";\n+            return false;\n+        }\n+        if (!descriptor.descriptor->ExpandFromCache(descriptor.next_index, descriptor.cache, scripts_temp, out_keys)) {\n+            // We can't generate anymore keys\n+            error = \"Error: Keypool ran out, please call keypoolrefill first\";\n+            return false;\n+        }\n+\n+        if (descriptor.descriptor->IsSingleType()) {\n+            Optional<OutputType> out_script_type = descriptor.descriptor->GetOutputType();\n+            if (out_script_type && out_script_type == type) {\n+                ExtractDestination(scripts_temp[0], dest);\n+            } else {\n+                throw std::runtime_error(std::string(__func__) + \": Types are inconsistent. Stored type does not match type of newly generated address\");\n+            }\n+        } else {\n+            // This is a combo descriptor which should not be an active descriptor\n+            assert(false);\n+        }\n+        descriptor.next_index++;\n+        WalletBatch(m_storage.GetDatabase()).WriteDescriptor(GetID(), descriptor);\n+        return true;\n+    }\n+}\n+\n+isminetype DescriptorScriptPubKeyMan::IsMine(const CScript& script) const\n+{\n+    LOCK(cs_desc_man);\n+    if (m_map_script_pub_keys.count(script) > 0) {\n+        return ISMINE_SPENDABLE;\n+    }\n+    return ISMINE_NO;\n+}\n+\n+bool DescriptorScriptPubKeyMan::CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys)\n+{\n+    {\n+        LOCK(cs_desc_man);\n+        if (!m_map_keys.empty())\n+            return false;\n+\n+        bool keyPass = m_map_crypted_keys.empty(); // Always pass when there are no encrypted keys\n+        bool keyFail = false;\n+        CryptedKeyMap::const_iterator mi = m_map_crypted_keys.begin();\n+        for (; mi != m_map_crypted_keys.end(); ++mi)\n+        {\n+            const CPubKey &pubkey = (*mi).second.first;\n+            const std::vector<unsigned char> &crypted_secret = (*mi).second.second;\n+            CKey key;\n+            if (!DecryptKey(master_key, crypted_secret, pubkey, key))\n+            {\n+                keyFail = true;\n+                break;\n+            }\n+            keyPass = true;\n+            if (m_decryption_thoroughly_checked)\n+                break;\n+        }\n+        if (keyPass && keyFail)\n+        {\n+            LogPrintf(\"The wallet is probably corrupted: Some keys decrypt but not all.\\n\");\n+            throw std::runtime_error(\"Error unlocking wallet: some keys decrypt but not all. Your wallet file may be corrupt.\");\n+        }\n+        if (keyFail || (!keyPass && !accept_no_keys))\n+            return false;\n+        m_decryption_thoroughly_checked = true;\n+    }\n+    return true;\n+}\n+\n+bool DescriptorScriptPubKeyMan::Encrypt(const CKeyingMaterial& master_key, WalletBatch* batch)\n+{\n+    LOCK(cs_desc_man);\n+    if (!m_map_crypted_keys.empty()) {\n+        return false;\n+    }\n+\n+    for (const KeyMap::value_type& key_in : m_map_keys)\n+    {\n+        const CKey &key = key_in.second;\n+        CPubKey pubkey = key.GetPubKey();\n+        CKeyingMaterial secret(key.begin(), key.end());\n+        std::vector<unsigned char> crypted_secret;\n+        if (!EncryptSecret(master_key, secret, pubkey.GetHash(), crypted_secret)) {\n+            return false;\n+        }\n+        m_map_crypted_keys[pubkey.GetID()] = make_pair(pubkey, crypted_secret);\n+        batch->WriteCryptedDescriptorKey(GetID(), pubkey, crypted_secret);\n+    }\n+    m_map_keys.clear();\n+    return true;\n+}\n+\n+bool DescriptorScriptPubKeyMan::GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool)\n+{\n+    LOCK(cs_desc_man);\n+    std::string error;\n+    bool result = GetNewDestination(type, address, error);\n+    index = descriptor.next_index - 1;\n+    return result;\n+}\n+\n+void DescriptorScriptPubKeyMan::ReturnDestination(int64_t index, bool internal, const CTxDestination& addr)\n+{\n+    LOCK(cs_desc_man);\n+    // Only return when the index was the most recent\n+    if (descriptor.next_index - 1 == index) {\n+        descriptor.next_index--;\n+    }\n+    WalletBatch(m_storage.GetDatabase()).WriteDescriptor(GetID(), descriptor);\n+    NotifyCanGetAddressesChanged();\n+}\n+\n+std::map<CKeyID, CKey> DescriptorScriptPubKeyMan::GetKeys() const\n+{\n+    AssertLockHeld(cs_desc_man);\n+    if (m_storage.HasEncryptionKeys() && !m_storage.IsLocked()) {\n+        KeyMap keys;\n+        for (auto key_pair : m_map_crypted_keys) {\n+            const CPubKey& pubkey = key_pair.second.first;\n+            const std::vector<unsigned char>& crypted_secret = key_pair.second.second;\n+            CKey key;\n+            DecryptKey(m_storage.GetEncryptionKey(), crypted_secret, pubkey, key);\n+            keys[pubkey.GetID()] = key;\n+        }\n+        return keys;\n+    }\n+    return m_map_keys;\n+}\n+\n+bool DescriptorScriptPubKeyMan::TopUp(unsigned int size)\n+{\n+    LOCK(cs_desc_man);\n+    unsigned int target_size;\n+    if (size > 0)\n+        target_size = size;\n+    else\n+        target_size = std::max(gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 0);\n+    target_size = std::max((int32_t)target_size, 1);\n+\n+    // Calculate the new range_end\n+    int32_t new_range_end = std::max(descriptor.next_index + (int32_t)target_size, descriptor.range_end);\n+\n+    // If the descriptor is not ranged, we actually just want to fill the first cache item\n+    if (!descriptor.descriptor->IsRange()) {\n+        new_range_end = 1;\n+        descriptor.range_end = 1;\n+        descriptor.range_start = 0;\n+    }\n+\n+    FlatSigningProvider provider;\n+    provider.keys = GetKeys();\n+\n+    WalletBatch batch(m_storage.GetDatabase());\n+    uint256 id = GetID();\n+    for (int32_t i = m_max_desc_index + 1; i < new_range_end; ++i) {\n+        FlatSigningProvider out_keys;\n+        std::vector<CScript> scripts_temp;\n+        DescriptorCache cache;\n+        if (!descriptor.descriptor->Expand(i, provider, scripts_temp, out_keys, &cache)) {\n+            // Maybe we have a cached xpub and we can expand from cache\n+            if (!descriptor.descriptor->ExpandFromCache(i, descriptor.cache, scripts_temp, out_keys)) return false;\n+        }\n+        // Add all of the scriptPubKeys to the scriptPubKey set\n+        for (const CScript& script : scripts_temp) {\n+            m_map_script_pub_keys[script] = i;\n+        }\n+        // Write the cache\n+        std::map<KeyOriginInfo, CExtPubKey> newly_cached = descriptor.cache.GetNotCached(cache.GetCachedExtPubKeys());",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 299,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "1b4fd1424f6160195d6d28072d8793b666db007d",
      "in_reply_to_id": 385668788,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Nvm, we still cache individual keys for `/*h` descriptors. ",
      "created_at": "2020-02-28T12:41:11Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r385674205",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/385674205"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1691,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/385674605",
      "pull_request_review_id": 366369739,
      "id": 385674605,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY3NDYwNQ==",
      "diff_hunk": "@@ -4237,3 +4392,169 @@ void CWallet::ConnectScriptPubKeyManNotifiers()\n         spk_man->NotifyCanGetAddressesChanged.connect(NotifyCanGetAddressesChanged);\n     }\n }\n+\n+void CWallet::LoadDescriptorScriptPubKeyMan(uint256 id, WalletDescriptor& desc)\n+{\n+    auto spk_manager = std::unique_ptr<ScriptPubKeyMan>(new DescriptorScriptPubKeyMan(*this, desc));\n+    m_spk_managers[id] = std::move(spk_manager);\n+}\n+\n+void CWallet::SetupDescriptorScriptPubKeyMans()\n+{\n+    AssertLockHeld(cs_wallet);\n+\n+    // Make a seed\n+    CKey seed_key;\n+    seed_key.MakeNewKey(true);\n+    CPubKey seed = seed_key.GetPubKey();\n+    assert(seed_key.VerifyPubKey(seed));\n+\n+    // Get the extended key\n+    CExtKey master_key;\n+    master_key.SetSeed(seed_key.begin(), seed_key.size());\n+\n+    for (bool internal : {false, true}) {\n+        for (OutputType t : OUTPUT_TYPES) {\n+            auto spk_manager = std::unique_ptr<DescriptorScriptPubKeyMan>(new DescriptorScriptPubKeyMan(*this, t, internal));\n+            if (IsCrypted()) {\n+                if (IsLocked()) {\n+                    throw std::runtime_error(std::string(__func__) + \": Wallet is locked, cannot setup new descriptors\");\n+                }\n+                if (!spk_manager->CheckDecryptionKey(vMasterKey) && !spk_manager->Encrypt(vMasterKey, nullptr)) {\n+                    throw std::runtime_error(std::string(__func__) + \": Could not encrypt new descriptors\");\n+                }\n+            }\n+            spk_manager->SetupDescriptorGeneration(master_key);\n+            uint256 id = spk_manager->GetID();\n+            m_spk_managers[id] = std::move(spk_manager);\n+            SetActiveScriptPubKeyMan(id, t, internal);\n+        }\n+    }\n+}\n+\n+void CWallet::SetActiveScriptPubKeyMan(uint256 id, OutputType type, bool internal, bool memonly)\n+{\n+    WalletLogPrintf(\"Setting spkMan to active: id = %s, type = %d, internal = %d\\n\", id.ToString(), static_cast<int>(type), static_cast<int>(internal));\n+    auto& spk_mans = internal ? m_internal_spk_managers : m_external_spk_managers;\n+    auto spk_man = m_spk_managers.at(id).get();\n+    spk_man->SetType(type, internal);\n+    spk_mans[type] = spk_man;\n+\n+    if (!memonly) {\n+        WalletBatch batch(*database);\n+        if (!batch.WriteActiveScriptPubKeyMan(static_cast<uint8_t>(type), id, internal)) {\n+            throw std::runtime_error(std::string(__func__) + \": writing active ScriptPubKeyMan id failed\");\n+        }\n+    }\n+    NotifyCanGetAddressesChanged();\n+}\n+\n+bool CWallet::IsLegacy() const\n+{\n+    if (m_internal_spk_managers.count(OutputType::LEGACY) == 0) {\n+        return false;\n+    }\n+    auto spk_man = dynamic_cast<LegacyScriptPubKeyMan*>(m_internal_spk_managers.at(OutputType::LEGACY));\n+    return spk_man != nullptr;\n+}\n+\n+DescriptorScriptPubKeyMan* CWallet::HasWalletDescriptor(const WalletDescriptor& desc) const\n+{\n+    if (!IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+        return nullptr;\n+    }\n+\n+    for (auto& spk_man_pair : m_spk_managers) {\n+        // Try to downcast to DescriptorScriptPubKeyMan then check if the descriptors match\n+        DescriptorScriptPubKeyMan* spk_manager = dynamic_cast<DescriptorScriptPubKeyMan*>(spk_man_pair.second.get());\n+        if (spk_manager != nullptr && spk_manager->HasWalletDescriptor(desc)) {\n+            return spk_manager;\n+        }\n+    }\n+\n+    return nullptr;\n+}\n+\n+bool CWallet::MaybeClearWalletDescriptorCache(const WalletDescriptor& desc)\n+{\n+    if (!IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+        WalletLogPrintf(\"Cannot update WalletDescriptor in a non-descriptor wallet\\n\");\n+        return false;\n+    }\n+\n+    auto spk_manager = HasWalletDescriptor(desc);\n+    if (!spk_manager) {\n+        WalletLogPrintf(\"Cannot find spkMan for descriptor\\n\");\n+        return false;\n+    }\n+\n+    WalletLogPrintf(\"Update existing descriptor: %s\\n\", desc.descriptor->ToString());\n+    LOCK2(cs_wallet, spk_manager->cs_desc_man);\n+\n+    // Clear the cache if necessary\n+    if (desc.range_start < spk_manager->GetWalletDescriptor().range_start) {\n+        spk_manager->ClearDescriptorCache();",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 466,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "1b4fd1424f6160195d6d28072d8793b666db007d",
      "in_reply_to_id": 385666508,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "We still cache individual keys for `/*h` descriptors, but they're indexed rather than sequential, so the question remains here.",
      "created_at": "2020-02-28T12:42:09Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r385674605",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/385674605"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4496,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/385838987",
      "pull_request_review_id": 366580173,
      "id": 385838987,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgzODk4Nw==",
      "diff_hunk": "@@ -1434,3 +1496,609 @@ std::set<CKeyID> LegacyScriptPubKeyMan::GetKeys() const\n     }\n     return set_address;\n }\n+\n+void LegacyScriptPubKeyMan::SetType(OutputType type, bool internal) {}\n+\n+bool DescriptorScriptPubKeyMan::GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error)\n+{\n+    if (!CanGetAddresses(internal)) {\n+        error = \"No private keys available\";\n+        return false;\n+    }\n+    {\n+        LOCK(cs_desc_man);\n+        if (descriptor.descriptor->IsSingleType() && type != address_type) {\n+            throw std::runtime_error(std::string(__func__) + \": Types are inconsistent\");\n+        }\n+\n+        TopUp();\n+\n+        // Get the scriptPubKey from the descriptor\n+        FlatSigningProvider out_keys;\n+        std::vector<CScript> scripts_temp;\n+        if (descriptor.range_end <= m_max_desc_index && !TopUp(1)) {\n+            // We can't generate anymore keys\n+            error = \"Error: Keypool ran out, please call keypoolrefill first\";\n+            return false;\n+        }\n+        if (!descriptor.descriptor->ExpandFromCache(descriptor.next_index, descriptor.cache, scripts_temp, out_keys)) {\n+            // We can't generate anymore keys\n+            error = \"Error: Keypool ran out, please call keypoolrefill first\";\n+            return false;\n+        }\n+\n+        if (descriptor.descriptor->IsSingleType()) {\n+            Optional<OutputType> out_script_type = descriptor.descriptor->GetOutputType();\n+            if (out_script_type && out_script_type == type) {\n+                ExtractDestination(scripts_temp[0], dest);\n+            } else {\n+                throw std::runtime_error(std::string(__func__) + \": Types are inconsistent. Stored type does not match type of newly generated address\");\n+            }\n+        } else {\n+            // This is a combo descriptor which should not be an active descriptor\n+            assert(false);\n+        }\n+        descriptor.next_index++;\n+        WalletBatch(m_storage.GetDatabase()).WriteDescriptor(GetID(), descriptor);\n+        return true;\n+    }\n+}\n+\n+isminetype DescriptorScriptPubKeyMan::IsMine(const CScript& script) const\n+{\n+    LOCK(cs_desc_man);\n+    if (m_map_script_pub_keys.count(script) > 0) {\n+        return ISMINE_SPENDABLE;\n+    }\n+    return ISMINE_NO;\n+}\n+\n+bool DescriptorScriptPubKeyMan::CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys)\n+{\n+    {\n+        LOCK(cs_desc_man);\n+        if (!m_map_keys.empty())\n+            return false;\n+\n+        bool keyPass = m_map_crypted_keys.empty(); // Always pass when there are no encrypted keys\n+        bool keyFail = false;\n+        CryptedKeyMap::const_iterator mi = m_map_crypted_keys.begin();\n+        for (; mi != m_map_crypted_keys.end(); ++mi)\n+        {\n+            const CPubKey &pubkey = (*mi).second.first;\n+            const std::vector<unsigned char> &crypted_secret = (*mi).second.second;\n+            CKey key;\n+            if (!DecryptKey(master_key, crypted_secret, pubkey, key))\n+            {\n+                keyFail = true;\n+                break;\n+            }\n+            keyPass = true;\n+            if (m_decryption_thoroughly_checked)\n+                break;\n+        }\n+        if (keyPass && keyFail)\n+        {\n+            LogPrintf(\"The wallet is probably corrupted: Some keys decrypt but not all.\\n\");\n+            throw std::runtime_error(\"Error unlocking wallet: some keys decrypt but not all. Your wallet file may be corrupt.\");\n+        }\n+        if (keyFail || (!keyPass && !accept_no_keys))\n+            return false;\n+        m_decryption_thoroughly_checked = true;\n+    }\n+    return true;\n+}\n+\n+bool DescriptorScriptPubKeyMan::Encrypt(const CKeyingMaterial& master_key, WalletBatch* batch)\n+{\n+    LOCK(cs_desc_man);\n+    if (!m_map_crypted_keys.empty()) {\n+        return false;\n+    }\n+\n+    for (const KeyMap::value_type& key_in : m_map_keys)\n+    {\n+        const CKey &key = key_in.second;\n+        CPubKey pubkey = key.GetPubKey();\n+        CKeyingMaterial secret(key.begin(), key.end());\n+        std::vector<unsigned char> crypted_secret;\n+        if (!EncryptSecret(master_key, secret, pubkey.GetHash(), crypted_secret)) {\n+            return false;\n+        }\n+        m_map_crypted_keys[pubkey.GetID()] = make_pair(pubkey, crypted_secret);\n+        batch->WriteCryptedDescriptorKey(GetID(), pubkey, crypted_secret);\n+    }\n+    m_map_keys.clear();\n+    return true;\n+}\n+\n+bool DescriptorScriptPubKeyMan::GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool)\n+{\n+    LOCK(cs_desc_man);\n+    std::string error;\n+    bool result = GetNewDestination(type, address, error);\n+    index = descriptor.next_index - 1;\n+    return result;\n+}\n+\n+void DescriptorScriptPubKeyMan::ReturnDestination(int64_t index, bool internal, const CTxDestination& addr)\n+{\n+    LOCK(cs_desc_man);\n+    // Only return when the index was the most recent\n+    if (descriptor.next_index - 1 == index) {\n+        descriptor.next_index--;\n+    }\n+    WalletBatch(m_storage.GetDatabase()).WriteDescriptor(GetID(), descriptor);\n+    NotifyCanGetAddressesChanged();\n+}\n+\n+std::map<CKeyID, CKey> DescriptorScriptPubKeyMan::GetKeys() const\n+{\n+    AssertLockHeld(cs_desc_man);\n+    if (m_storage.HasEncryptionKeys() && !m_storage.IsLocked()) {\n+        KeyMap keys;\n+        for (auto key_pair : m_map_crypted_keys) {\n+            const CPubKey& pubkey = key_pair.second.first;\n+            const std::vector<unsigned char>& crypted_secret = key_pair.second.second;\n+            CKey key;\n+            DecryptKey(m_storage.GetEncryptionKey(), crypted_secret, pubkey, key);\n+            keys[pubkey.GetID()] = key;\n+        }\n+        return keys;\n+    }\n+    return m_map_keys;\n+}\n+\n+bool DescriptorScriptPubKeyMan::TopUp(unsigned int size)\n+{\n+    LOCK(cs_desc_man);\n+    unsigned int target_size;\n+    if (size > 0)\n+        target_size = size;\n+    else\n+        target_size = std::max(gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 0);\n+    target_size = std::max((int32_t)target_size, 1);\n+\n+    // Calculate the new range_end\n+    int32_t new_range_end = std::max(descriptor.next_index + (int32_t)target_size, descriptor.range_end);\n+\n+    // If the descriptor is not ranged, we actually just want to fill the first cache item\n+    if (!descriptor.descriptor->IsRange()) {\n+        new_range_end = 1;\n+        descriptor.range_end = 1;\n+        descriptor.range_start = 0;\n+    }\n+\n+    FlatSigningProvider provider;\n+    provider.keys = GetKeys();\n+\n+    WalletBatch batch(m_storage.GetDatabase());\n+    uint256 id = GetID();\n+    for (int32_t i = m_max_desc_index + 1; i < new_range_end; ++i) {\n+        FlatSigningProvider out_keys;\n+        std::vector<CScript> scripts_temp;\n+        DescriptorCache cache;\n+        if (!descriptor.descriptor->Expand(i, provider, scripts_temp, out_keys, &cache)) {\n+            // Maybe we have a cached xpub and we can expand from cache\n+            if (!descriptor.descriptor->ExpandFromCache(i, descriptor.cache, scripts_temp, out_keys)) return false;\n+        }\n+        // Add all of the scriptPubKeys to the scriptPubKey set\n+        for (const CScript& script : scripts_temp) {\n+            m_map_script_pub_keys[script] = i;\n+        }\n+        // Write the cache\n+        std::map<KeyOriginInfo, CExtPubKey> newly_cached = descriptor.cache.GetNotCached(cache.GetCachedExtPubKeys());",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 299,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "1b4fd1424f6160195d6d28072d8793b666db007d",
      "in_reply_to_id": 385668788,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Every `Expand` will also return the parent xpub. We don't want to be constantly rewriting that.",
      "created_at": "2020-02-28T17:57:46Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r385838987",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/385838987"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1691,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/385849291",
      "pull_request_review_id": 366593454,
      "id": 385849291,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg0OTI5MQ==",
      "diff_hunk": "@@ -6,6 +6,7 @@\n #define BITCOIN_WALLET_WALLETUTIL_H\n \n #include <fs.h>\n+#include <script/descriptor.h>",
      "path": "src/wallet/walletutil.h",
      "position": 4,
      "original_position": 4,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "4d7998695f6aca2d19e3b78834b7079b50e1f8a1",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't think these changes are related to the commit message?",
      "created_at": "2020-02-28T18:20:59Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r385849291",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/385849291"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 9,
      "original_line": 9,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/385850369",
      "pull_request_review_id": 366593454,
      "id": 385850369,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg1MDM2OQ==",
      "diff_hunk": "@@ -3868,8 +3868,10 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n \n         walletInstance->SetWalletFlags(wallet_creation_flags, false);\n \n-        // Always create LegacyScriptPubKeyMan for now\n-        walletInstance->SetupLegacyScriptPubKeyMan();\n+        // Only create LegacyScriptPubKeyMan when not descriptor wallet\n+        if (!(wallet_creation_flags & WALLET_FLAG_DESCRIPTORS)) {",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 7,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "4d7998695f6aca2d19e3b78834b7079b50e1f8a1",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Just a thought you can nack: You can check for the wallet flags since you just set them above. Easier pattern matching for reviewers who are expecting `IsWalletFlagSet`.",
      "created_at": "2020-02-28T18:23:19Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r385850369",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/385850369"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3872,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/385864196",
      "pull_request_review_id": 366593454,
      "id": 385864196,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg2NDE5Ng==",
      "diff_hunk": "@@ -495,6 +524,14 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\n         result = DBErrors::CORRUPT;\n     }\n \n+    // Set the active ScriptPubKeyMans\n+    for (auto spk_man_pair : wss.m_external_spk_managers) {\n+        pwallet->SetActiveScriptPubKeyMan(spk_man_pair.second, spk_man_pair.first, false, true);",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 72,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "e6af0ba62b5c36fdf61cfd5c77d17feb920b68e8",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "please annotate bool args",
      "created_at": "2020-02-28T18:53:01Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r385864196",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/385864196"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 529,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/385864230",
      "pull_request_review_id": 366593454,
      "id": 385864230,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg2NDIzMA==",
      "diff_hunk": "@@ -495,6 +524,14 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\n         result = DBErrors::CORRUPT;\n     }\n \n+    // Set the active ScriptPubKeyMans\n+    for (auto spk_man_pair : wss.m_external_spk_managers) {\n+        pwallet->SetActiveScriptPubKeyMan(spk_man_pair.second, spk_man_pair.first, false, true);\n+    }\n+    for (auto spk_man_pair : wss.m_internal_spk_managers) {\n+        pwallet->SetActiveScriptPubKeyMan(spk_man_pair.second, spk_man_pair.first, true, true);",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 75,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "e6af0ba62b5c36fdf61cfd5c77d17feb920b68e8",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "please annotate bool args",
      "created_at": "2020-02-28T18:53:06Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r385864230",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/385864230"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 532,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/385907997",
      "pull_request_review_id": 366593454,
      "id": 385907997,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTkwNzk5Nw==",
      "diff_hunk": "@@ -1577,6 +1577,74 @@ bool DescriptorScriptPubKeyMan::AddDescriptorKeyWithDB(WalletBatch& batch, const\n     }\n }\n \n+bool DescriptorScriptPubKeyMan::SetupDescriptorGeneration(const CExtKey& master_key)\n+{\n+    LOCK(cs_desc_man);\n+    assert(m_storage.IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS));\n+\n+    // Ignore when there is already a descriptor\n+    if (descriptor.descriptor) {\n+        return false;\n+    }\n+\n+    int64_t creation_time = GetTime();\n+\n+    std::string xpub = EncodeExtPubKey(master_key.Neuter());\n+\n+    // Add the seed to the wallet\n+    std::string desc_prefix;\n+    std::string desc_suffix = \"/*)\";\n+    switch (address_type) {\n+    case OutputType::LEGACY: {\n+        desc_prefix = \"pkh(\" + xpub + \"/44'\";\n+        break;\n+    }\n+    case OutputType::P2SH_SEGWIT: {\n+        desc_prefix = \"sh(wpkh(\" + xpub + \"/49'\";\n+        desc_suffix += \")\";\n+        break;\n+    }\n+    case OutputType::BECH32: {\n+        desc_prefix = \"wpkh(\" + xpub + \"/84'\";\n+        break;\n+    }\n+    default: assert(false);\n+    }\n+\n+    // Mainnet derives at 0',testnet and regtest derive at 1'",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 38,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "630a5308c8385b4577f973f4cc834d774f9988f8",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`0',testnet` missing space",
      "created_at": "2020-02-28T20:30:08Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r385907997",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/385907997"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1614,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/385908598",
      "pull_request_review_id": 366593454,
      "id": 385908598,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTkwODU5OA==",
      "diff_hunk": "@@ -1577,6 +1577,74 @@ bool DescriptorScriptPubKeyMan::AddDescriptorKeyWithDB(WalletBatch& batch, const\n     }\n }\n \n+bool DescriptorScriptPubKeyMan::SetupDescriptorGeneration(const CExtKey& master_key)\n+{\n+    LOCK(cs_desc_man);\n+    assert(m_storage.IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS));\n+\n+    // Ignore when there is already a descriptor\n+    if (descriptor.descriptor) {\n+        return false;\n+    }\n+\n+    int64_t creation_time = GetTime();\n+\n+    std::string xpub = EncodeExtPubKey(master_key.Neuter());\n+\n+    // Add the seed to the wallet",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 18,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "630a5308c8385b4577f973f4cc834d774f9988f8",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Seems like `Build descriptor string` goes here?",
      "created_at": "2020-02-28T20:31:38Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r385908598",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/385908598"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1594,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/385909756",
      "pull_request_review_id": 366593454,
      "id": 385909756,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTkwOTc1Ng==",
      "diff_hunk": "@@ -1577,6 +1577,74 @@ bool DescriptorScriptPubKeyMan::AddDescriptorKeyWithDB(WalletBatch& batch, const\n     }\n }\n \n+bool DescriptorScriptPubKeyMan::SetupDescriptorGeneration(const CExtKey& master_key)\n+{\n+    LOCK(cs_desc_man);\n+    assert(m_storage.IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS));\n+\n+    // Ignore when there is already a descriptor\n+    if (descriptor.descriptor) {\n+        return false;\n+    }\n+\n+    int64_t creation_time = GetTime();\n+\n+    std::string xpub = EncodeExtPubKey(master_key.Neuter());\n+\n+    // Add the seed to the wallet\n+    std::string desc_prefix;\n+    std::string desc_suffix = \"/*)\";\n+    switch (address_type) {\n+    case OutputType::LEGACY: {\n+        desc_prefix = \"pkh(\" + xpub + \"/44'\";\n+        break;\n+    }\n+    case OutputType::P2SH_SEGWIT: {\n+        desc_prefix = \"sh(wpkh(\" + xpub + \"/49'\";\n+        desc_suffix += \")\";\n+        break;\n+    }\n+    case OutputType::BECH32: {\n+        desc_prefix = \"wpkh(\" + xpub + \"/84'\";\n+        break;\n+    }\n+    default: assert(false);\n+    }\n+\n+    // Mainnet derives at 0',testnet and regtest derive at 1'\n+    if (Params().IsTestChain()) {\n+        desc_prefix += \"/1'\";\n+    } else {\n+        desc_prefix += \"/0'\";\n+    }\n+\n+    // Build descriptor string\n+    std::string internal_path = internal ? \"/1\" : \"/0\";\n+    std::string desc_str = desc_prefix + \"/0'\" + internal_path + desc_suffix;\n+\n+    // Make the descriptor\n+    FlatSigningProvider keys;\n+    std::string error;\n+    std::unique_ptr<Descriptor> desc = Parse(desc_str, keys, error, false);\n+    WalletDescriptor w_desc(std::move(desc), creation_time, 0, 0, 0);\n+    descriptor = w_desc;\n+\n+    // Store the master private key, derived intermediate key, and descriptor",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 56,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "630a5308c8385b4577f973f4cc834d774f9988f8",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't see `intermediate key` being written?",
      "created_at": "2020-02-28T20:34:40Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r385909756",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/385909756"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1632,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/385909909",
      "pull_request_review_id": 366669295,
      "id": 385909909,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTkwOTkwOQ==",
      "diff_hunk": "@@ -4237,3 +4392,169 @@ void CWallet::ConnectScriptPubKeyManNotifiers()\n         spk_man->NotifyCanGetAddressesChanged.connect(NotifyCanGetAddressesChanged);\n     }\n }\n+\n+void CWallet::LoadDescriptorScriptPubKeyMan(uint256 id, WalletDescriptor& desc)\n+{\n+    auto spk_manager = std::unique_ptr<ScriptPubKeyMan>(new DescriptorScriptPubKeyMan(*this, desc));\n+    m_spk_managers[id] = std::move(spk_manager);\n+}\n+\n+void CWallet::SetupDescriptorScriptPubKeyMans()\n+{\n+    AssertLockHeld(cs_wallet);\n+\n+    // Make a seed\n+    CKey seed_key;\n+    seed_key.MakeNewKey(true);\n+    CPubKey seed = seed_key.GetPubKey();\n+    assert(seed_key.VerifyPubKey(seed));\n+\n+    // Get the extended key\n+    CExtKey master_key;\n+    master_key.SetSeed(seed_key.begin(), seed_key.size());\n+\n+    for (bool internal : {false, true}) {\n+        for (OutputType t : OUTPUT_TYPES) {\n+            auto spk_manager = std::unique_ptr<DescriptorScriptPubKeyMan>(new DescriptorScriptPubKeyMan(*this, t, internal));\n+            if (IsCrypted()) {\n+                if (IsLocked()) {\n+                    throw std::runtime_error(std::string(__func__) + \": Wallet is locked, cannot setup new descriptors\");\n+                }\n+                if (!spk_manager->CheckDecryptionKey(vMasterKey) && !spk_manager->Encrypt(vMasterKey, nullptr)) {\n+                    throw std::runtime_error(std::string(__func__) + \": Could not encrypt new descriptors\");\n+                }\n+            }\n+            spk_manager->SetupDescriptorGeneration(master_key);\n+            uint256 id = spk_manager->GetID();\n+            m_spk_managers[id] = std::move(spk_manager);\n+            SetActiveScriptPubKeyMan(id, t, internal);\n+        }\n+    }\n+}\n+\n+void CWallet::SetActiveScriptPubKeyMan(uint256 id, OutputType type, bool internal, bool memonly)\n+{\n+    WalletLogPrintf(\"Setting spkMan to active: id = %s, type = %d, internal = %d\\n\", id.ToString(), static_cast<int>(type), static_cast<int>(internal));\n+    auto& spk_mans = internal ? m_internal_spk_managers : m_external_spk_managers;\n+    auto spk_man = m_spk_managers.at(id).get();\n+    spk_man->SetType(type, internal);\n+    spk_mans[type] = spk_man;\n+\n+    if (!memonly) {\n+        WalletBatch batch(*database);\n+        if (!batch.WriteActiveScriptPubKeyMan(static_cast<uint8_t>(type), id, internal)) {\n+            throw std::runtime_error(std::string(__func__) + \": writing active ScriptPubKeyMan id failed\");\n+        }\n+    }\n+    NotifyCanGetAddressesChanged();\n+}\n+\n+bool CWallet::IsLegacy() const\n+{\n+    if (m_internal_spk_managers.count(OutputType::LEGACY) == 0) {\n+        return false;\n+    }\n+    auto spk_man = dynamic_cast<LegacyScriptPubKeyMan*>(m_internal_spk_managers.at(OutputType::LEGACY));\n+    return spk_man != nullptr;\n+}\n+\n+DescriptorScriptPubKeyMan* CWallet::HasWalletDescriptor(const WalletDescriptor& desc) const\n+{\n+    if (!IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+        return nullptr;\n+    }\n+\n+    for (auto& spk_man_pair : m_spk_managers) {\n+        // Try to downcast to DescriptorScriptPubKeyMan then check if the descriptors match\n+        DescriptorScriptPubKeyMan* spk_manager = dynamic_cast<DescriptorScriptPubKeyMan*>(spk_man_pair.second.get());\n+        if (spk_manager != nullptr && spk_manager->HasWalletDescriptor(desc)) {\n+            return spk_manager;\n+        }\n+    }\n+\n+    return nullptr;\n+}\n+\n+bool CWallet::MaybeClearWalletDescriptorCache(const WalletDescriptor& desc)\n+{\n+    if (!IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+        WalletLogPrintf(\"Cannot update WalletDescriptor in a non-descriptor wallet\\n\");\n+        return false;\n+    }\n+\n+    auto spk_manager = HasWalletDescriptor(desc);\n+    if (!spk_manager) {\n+        WalletLogPrintf(\"Cannot find spkMan for descriptor\\n\");\n+        return false;\n+    }\n+\n+    WalletLogPrintf(\"Update existing descriptor: %s\\n\", desc.descriptor->ToString());\n+    LOCK2(cs_wallet, spk_manager->cs_desc_man);\n+\n+    // Clear the cache if necessary\n+    if (desc.range_start < spk_manager->GetWalletDescriptor().range_start) {\n+        spk_manager->ClearDescriptorCache();",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 466,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "1b4fd1424f6160195d6d28072d8793b666db007d",
      "in_reply_to_id": 385666508,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, it is no longer needed. I've removed it.",
      "created_at": "2020-02-28T20:35:02Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r385909909",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/385909909"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4496,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/385978728",
      "pull_request_review_id": 366754744,
      "id": 385978728,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk3ODcyOA==",
      "diff_hunk": "@@ -6,6 +6,7 @@\n #define BITCOIN_WALLET_WALLETUTIL_H\n \n #include <fs.h>\n+#include <script/descriptor.h>",
      "path": "src/wallet/walletutil.h",
      "position": 4,
      "original_position": 4,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "4d7998695f6aca2d19e3b78834b7079b50e1f8a1",
      "in_reply_to_id": 385849291,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Hmm. I think the commit they were part of was accidentally squashed. Moved back into their own commit.",
      "created_at": "2020-02-29T00:20:47Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r385978728",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/385978728"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 9,
      "original_line": 9,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/385978750",
      "pull_request_review_id": 366754770,
      "id": 385978750,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk3ODc1MA==",
      "diff_hunk": "@@ -3868,8 +3868,10 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n \n         walletInstance->SetWalletFlags(wallet_creation_flags, false);\n \n-        // Always create LegacyScriptPubKeyMan for now\n-        walletInstance->SetupLegacyScriptPubKeyMan();\n+        // Only create LegacyScriptPubKeyMan when not descriptor wallet\n+        if (!(wallet_creation_flags & WALLET_FLAG_DESCRIPTORS)) {",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 7,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "4d7998695f6aca2d19e3b78834b7079b50e1f8a1",
      "in_reply_to_id": 385850369,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-02-29T00:20:54Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r385978750",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/385978750"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3872,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/385978773",
      "pull_request_review_id": 366754805,
      "id": 385978773,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk3ODc3Mw==",
      "diff_hunk": "@@ -495,6 +524,14 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\n         result = DBErrors::CORRUPT;\n     }\n \n+    // Set the active ScriptPubKeyMans\n+    for (auto spk_man_pair : wss.m_external_spk_managers) {\n+        pwallet->SetActiveScriptPubKeyMan(spk_man_pair.second, spk_man_pair.first, false, true);",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 72,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "e6af0ba62b5c36fdf61cfd5c77d17feb920b68e8",
      "in_reply_to_id": 385864196,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-02-29T00:21:04Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r385978773",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/385978773"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 529,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/385978785",
      "pull_request_review_id": 366754814,
      "id": 385978785,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk3ODc4NQ==",
      "diff_hunk": "@@ -495,6 +524,14 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\n         result = DBErrors::CORRUPT;\n     }\n \n+    // Set the active ScriptPubKeyMans\n+    for (auto spk_man_pair : wss.m_external_spk_managers) {\n+        pwallet->SetActiveScriptPubKeyMan(spk_man_pair.second, spk_man_pair.first, false, true);\n+    }\n+    for (auto spk_man_pair : wss.m_internal_spk_managers) {\n+        pwallet->SetActiveScriptPubKeyMan(spk_man_pair.second, spk_man_pair.first, true, true);",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 75,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "e6af0ba62b5c36fdf61cfd5c77d17feb920b68e8",
      "in_reply_to_id": 385864230,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-02-29T00:21:08Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r385978785",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/385978785"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 532,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/385978801",
      "pull_request_review_id": 366754831,
      "id": 385978801,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk3ODgwMQ==",
      "diff_hunk": "@@ -1577,6 +1577,74 @@ bool DescriptorScriptPubKeyMan::AddDescriptorKeyWithDB(WalletBatch& batch, const\n     }\n }\n \n+bool DescriptorScriptPubKeyMan::SetupDescriptorGeneration(const CExtKey& master_key)\n+{\n+    LOCK(cs_desc_man);\n+    assert(m_storage.IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS));\n+\n+    // Ignore when there is already a descriptor\n+    if (descriptor.descriptor) {\n+        return false;\n+    }\n+\n+    int64_t creation_time = GetTime();\n+\n+    std::string xpub = EncodeExtPubKey(master_key.Neuter());\n+\n+    // Add the seed to the wallet\n+    std::string desc_prefix;\n+    std::string desc_suffix = \"/*)\";\n+    switch (address_type) {\n+    case OutputType::LEGACY: {\n+        desc_prefix = \"pkh(\" + xpub + \"/44'\";\n+        break;\n+    }\n+    case OutputType::P2SH_SEGWIT: {\n+        desc_prefix = \"sh(wpkh(\" + xpub + \"/49'\";\n+        desc_suffix += \")\";\n+        break;\n+    }\n+    case OutputType::BECH32: {\n+        desc_prefix = \"wpkh(\" + xpub + \"/84'\";\n+        break;\n+    }\n+    default: assert(false);\n+    }\n+\n+    // Mainnet derives at 0',testnet and regtest derive at 1'",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 38,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "630a5308c8385b4577f973f4cc834d774f9988f8",
      "in_reply_to_id": 385907997,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-02-29T00:21:12Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r385978801",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/385978801"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1614,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/385978865",
      "pull_request_review_id": 366754896,
      "id": 385978865,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk3ODg2NQ==",
      "diff_hunk": "@@ -1577,6 +1577,74 @@ bool DescriptorScriptPubKeyMan::AddDescriptorKeyWithDB(WalletBatch& batch, const\n     }\n }\n \n+bool DescriptorScriptPubKeyMan::SetupDescriptorGeneration(const CExtKey& master_key)\n+{\n+    LOCK(cs_desc_man);\n+    assert(m_storage.IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS));\n+\n+    // Ignore when there is already a descriptor\n+    if (descriptor.descriptor) {\n+        return false;\n+    }\n+\n+    int64_t creation_time = GetTime();\n+\n+    std::string xpub = EncodeExtPubKey(master_key.Neuter());\n+\n+    // Add the seed to the wallet",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 18,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "630a5308c8385b4577f973f4cc834d774f9988f8",
      "in_reply_to_id": 385908598,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Moved",
      "created_at": "2020-02-29T00:21:36Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r385978865",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/385978865"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1594,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/385978925",
      "pull_request_review_id": 366754965,
      "id": 385978925,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk3ODkyNQ==",
      "diff_hunk": "@@ -1577,6 +1577,74 @@ bool DescriptorScriptPubKeyMan::AddDescriptorKeyWithDB(WalletBatch& batch, const\n     }\n }\n \n+bool DescriptorScriptPubKeyMan::SetupDescriptorGeneration(const CExtKey& master_key)\n+{\n+    LOCK(cs_desc_man);\n+    assert(m_storage.IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS));\n+\n+    // Ignore when there is already a descriptor\n+    if (descriptor.descriptor) {\n+        return false;\n+    }\n+\n+    int64_t creation_time = GetTime();\n+\n+    std::string xpub = EncodeExtPubKey(master_key.Neuter());\n+\n+    // Add the seed to the wallet\n+    std::string desc_prefix;\n+    std::string desc_suffix = \"/*)\";\n+    switch (address_type) {\n+    case OutputType::LEGACY: {\n+        desc_prefix = \"pkh(\" + xpub + \"/44'\";\n+        break;\n+    }\n+    case OutputType::P2SH_SEGWIT: {\n+        desc_prefix = \"sh(wpkh(\" + xpub + \"/49'\";\n+        desc_suffix += \")\";\n+        break;\n+    }\n+    case OutputType::BECH32: {\n+        desc_prefix = \"wpkh(\" + xpub + \"/84'\";\n+        break;\n+    }\n+    default: assert(false);\n+    }\n+\n+    // Mainnet derives at 0',testnet and regtest derive at 1'\n+    if (Params().IsTestChain()) {\n+        desc_prefix += \"/1'\";\n+    } else {\n+        desc_prefix += \"/0'\";\n+    }\n+\n+    // Build descriptor string\n+    std::string internal_path = internal ? \"/1\" : \"/0\";\n+    std::string desc_str = desc_prefix + \"/0'\" + internal_path + desc_suffix;\n+\n+    // Make the descriptor\n+    FlatSigningProvider keys;\n+    std::string error;\n+    std::unique_ptr<Descriptor> desc = Parse(desc_str, keys, error, false);\n+    WalletDescriptor w_desc(std::move(desc), creation_time, 0, 0, 0);\n+    descriptor = w_desc;\n+\n+    // Store the master private key, derived intermediate key, and descriptor",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 56,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "630a5308c8385b4577f973f4cc834d774f9988f8",
      "in_reply_to_id": 385909756,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Removed. The change that did that was reverted given that we now use the descriptor xpub cache.",
      "created_at": "2020-02-29T00:21:55Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r385978925",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/385978925"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1632,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/386015063",
      "pull_request_review_id": 366787922,
      "id": 386015063,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAxNTA2Mw==",
      "diff_hunk": "@@ -1434,3 +1496,594 @@ std::set<CKeyID> LegacyScriptPubKeyMan::GetKeys() const\n     }\n     return set_address;\n }\n+\n+void LegacyScriptPubKeyMan::SetType(OutputType type, bool internal) {}\n+\n+bool DescriptorScriptPubKeyMan::GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error)\n+{\n+    if (!CanGetAddresses(internal)) {\n+        error = \"No private keys available\";\n+        return false;\n+    }\n+    {\n+        LOCK(cs_desc_man);\n+        if (descriptor.descriptor->IsSingleType() && type != address_type) {\n+            throw std::runtime_error(std::string(__func__) + \": Types are inconsistent\");\n+        }\n+\n+        TopUp();\n+\n+        // Get the scriptPubKey from the descriptor\n+        FlatSigningProvider out_keys;\n+        std::vector<CScript> scripts_temp;\n+        if (descriptor.range_end <= m_max_desc_index && !TopUp(1)) {\n+            // We can't generate anymore keys\n+            error = \"Error: Keypool ran out, please call keypoolrefill first\";\n+            return false;\n+        }\n+        if (!descriptor.descriptor->ExpandFromCache(descriptor.next_index, descriptor.cache, scripts_temp, out_keys)) {\n+            // We can't generate anymore keys\n+            error = \"Error: Keypool ran out, please call keypoolrefill first\";\n+            return false;\n+        }\n+\n+        if (descriptor.descriptor->IsSingleType()) {\n+            Optional<OutputType> out_script_type = descriptor.descriptor->GetOutputType();\n+            if (out_script_type && out_script_type == type) {\n+                ExtractDestination(scripts_temp[0], dest);\n+            } else {\n+                throw std::runtime_error(std::string(__func__) + \": Types are inconsistent. Stored type does not match type of newly generated address\");\n+            }\n+        } else {\n+            // This is a combo descriptor which should not be an active descriptor\n+            assert(false);\n+        }\n+        descriptor.next_index++;\n+        WalletBatch(m_storage.GetDatabase()).WriteDescriptor(GetID(), descriptor);\n+        return true;\n+    }\n+}\n+\n+isminetype DescriptorScriptPubKeyMan::IsMine(const CScript& script) const\n+{\n+    LOCK(cs_desc_man);\n+    if (m_map_script_pub_keys.count(script) > 0) {\n+        return ISMINE_SPENDABLE;\n+    }\n+    return ISMINE_NO;\n+}\n+\n+bool DescriptorScriptPubKeyMan::CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys)\n+{\n+    {\n+        LOCK(cs_desc_man);\n+        if (!m_map_keys.empty())\n+            return false;\n+\n+        bool keyPass = m_map_crypted_keys.empty(); // Always pass when there are no encrypted keys\n+        bool keyFail = false;\n+        CryptedKeyMap::const_iterator mi = m_map_crypted_keys.begin();\n+        for (; mi != m_map_crypted_keys.end(); ++mi)\n+        {\n+            const CPubKey &pubkey = (*mi).second.first;\n+            const std::vector<unsigned char> &crypted_secret = (*mi).second.second;\n+            CKey key;\n+            if (!DecryptKey(master_key, crypted_secret, pubkey, key))\n+            {\n+                keyFail = true;\n+                break;\n+            }\n+            keyPass = true;\n+            if (m_decryption_thoroughly_checked)\n+                break;\n+        }\n+        if (keyPass && keyFail)\n+        {\n+            LogPrintf(\"The wallet is probably corrupted: Some keys decrypt but not all.\\n\");\n+            throw std::runtime_error(\"Error unlocking wallet: some keys decrypt but not all. Your wallet file may be corrupt.\");\n+        }\n+        if (keyFail || (!keyPass && !accept_no_keys))\n+            return false;\n+        m_decryption_thoroughly_checked = true;\n+    }\n+    return true;\n+}\n+\n+bool DescriptorScriptPubKeyMan::Encrypt(const CKeyingMaterial& master_key, WalletBatch* batch)\n+{\n+    LOCK(cs_desc_man);\n+    if (!m_map_crypted_keys.empty()) {\n+        return false;\n+    }\n+\n+    for (const KeyMap::value_type& key_in : m_map_keys)\n+    {\n+        const CKey &key = key_in.second;\n+        CPubKey pubkey = key.GetPubKey();\n+        CKeyingMaterial secret(key.begin(), key.end());\n+        std::vector<unsigned char> crypted_secret;\n+        if (!EncryptSecret(master_key, secret, pubkey.GetHash(), crypted_secret)) {\n+            return false;\n+        }\n+        m_map_crypted_keys[pubkey.GetID()] = make_pair(pubkey, crypted_secret);\n+        batch->WriteCryptedDescriptorKey(GetID(), pubkey, crypted_secret);\n+    }\n+    m_map_keys.clear();\n+    return true;\n+}\n+\n+bool DescriptorScriptPubKeyMan::GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool)\n+{\n+    LOCK(cs_desc_man);\n+    std::string error;\n+    bool result = GetNewDestination(type, address, error);\n+    index = descriptor.next_index - 1;\n+    return result;\n+}\n+\n+void DescriptorScriptPubKeyMan::ReturnDestination(int64_t index, bool internal, const CTxDestination& addr)\n+{\n+    LOCK(cs_desc_man);\n+    // Only return when the index was the most recent\n+    if (descriptor.next_index - 1 == index) {\n+        descriptor.next_index--;\n+    }\n+    WalletBatch(m_storage.GetDatabase()).WriteDescriptor(GetID(), descriptor);\n+    NotifyCanGetAddressesChanged();\n+}\n+\n+std::map<CKeyID, CKey> DescriptorScriptPubKeyMan::GetKeys() const\n+{\n+    AssertLockHeld(cs_desc_man);\n+    if (m_storage.HasEncryptionKeys() && !m_storage.IsLocked()) {\n+        KeyMap keys;\n+        for (auto key_pair : m_map_crypted_keys) {\n+            const CPubKey& pubkey = key_pair.second.first;\n+            const std::vector<unsigned char>& crypted_secret = key_pair.second.second;\n+            CKey key;\n+            DecryptKey(m_storage.GetEncryptionKey(), crypted_secret, pubkey, key);\n+            keys[pubkey.GetID()] = key;\n+        }\n+        return keys;\n+    }\n+    return m_map_keys;\n+}\n+\n+bool DescriptorScriptPubKeyMan::TopUp(unsigned int size)\n+{\n+    LOCK(cs_desc_man);\n+    unsigned int target_size;\n+    if (size > 0)\n+        target_size = size;\n+    else\n+        target_size = std::max(gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 0);\n+    target_size = std::max((int32_t)target_size, 1);\n+\n+    // Calculate the new range_end\n+    int32_t new_range_end = std::max(descriptor.next_index + (int32_t)target_size, descriptor.range_end);\n+\n+    // If the descriptor is not ranged, we actually just want to fill the first cache item\n+    if (!descriptor.descriptor->IsRange()) {\n+        new_range_end = 1;\n+        descriptor.range_end = 1;\n+        descriptor.range_start = 0;\n+    }\n+\n+    FlatSigningProvider provider;\n+    provider.keys = GetKeys();\n+\n+    WalletBatch batch(m_storage.GetDatabase());\n+    uint256 id = GetID();\n+    for (int32_t i = m_max_desc_index + 1; i < new_range_end; ++i) {\n+        FlatSigningProvider out_keys;\n+        std::vector<CScript> scripts_temp;\n+        DescriptorCache cache;\n+        if (!descriptor.descriptor->Expand(i, provider, scripts_temp, out_keys, &cache)) {\n+            // Maybe we have a cached xpub and we can expand from cache\n+            if (!descriptor.descriptor->ExpandFromCache(i, descriptor.cache, scripts_temp, out_keys)) return false;",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 292,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "8f282ebaf0ddd120f5fa0f9d0a1b2b46f7ac5b40",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Try `ExpandFromCache(` before `Expand(`? ",
      "created_at": "2020-02-29T09:22:31Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r386015063",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/386015063"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1683,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/386015338",
      "pull_request_review_id": 366787922,
      "id": 386015338,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAxNTMzOA==",
      "diff_hunk": "@@ -1434,3 +1496,594 @@ std::set<CKeyID> LegacyScriptPubKeyMan::GetKeys() const\n     }\n     return set_address;\n }\n+\n+void LegacyScriptPubKeyMan::SetType(OutputType type, bool internal) {}\n+\n+bool DescriptorScriptPubKeyMan::GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error)\n+{\n+    if (!CanGetAddresses(internal)) {\n+        error = \"No private keys available\";",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 114,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "8f282ebaf0ddd120f5fa0f9d0a1b2b46f7ac5b40",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "\"No addresses available\"\r\n\r\nIt may also be worth clarifying that although `CanGetAddresses()` considers `descriptor.next_index < descriptor.range_end`, each topup bumps `range_end`, except for wallets with hardened derivation, with encrypted or without private keys. Those wallets need to call `keypoolrefill`.",
      "created_at": "2020-02-29T09:27:42Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r386015338",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/386015338"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1505,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/386016600",
      "pull_request_review_id": 366787922,
      "id": 386016600,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAxNjYwMA==",
      "diff_hunk": "@@ -458,9 +477,104 @@ class LegacySigningProvider : public SigningProvider\n     bool GetCScript(const CScriptID &scriptid, CScript& script) const override { return m_spk_man.GetCScript(scriptid, script); }\n     bool HaveCScript(const CScriptID &scriptid) const override { return m_spk_man.HaveCScript(scriptid); }\n     bool GetPubKey(const CKeyID &address, CPubKey& pubkey) const override { return m_spk_man.GetPubKey(address, pubkey); }\n-    bool GetKey(const CKeyID &address, CKey& key) const override { return m_spk_man.GetKey(address, key); }\n-    bool HaveKey(const CKeyID &address) const override { return m_spk_man.HaveKey(address); }\n+    bool GetKey(const CKeyID &address, CKey& key) const override { return false; }\n+    bool HaveKey(const CKeyID &address) const override { return false; }\n     bool GetKeyOrigin(const CKeyID& keyid, KeyOriginInfo& info) const override { return m_spk_man.GetKeyOrigin(keyid, info); }\n };\n \n+class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n+{\n+private:\n+    WalletDescriptor descriptor GUARDED_BY(cs_desc_man);\n+\n+    using ScriptPubKeyMap = std::map<CScript, int32_t>; // Map of scripts to descriptor range index\n+    using CryptedKeyMap = std::map<CKeyID, std::pair<CPubKey, std::vector<unsigned char>>>;\n+    using KeyMap = std::map<CKeyID, CKey>;\n+\n+    ScriptPubKeyMap m_map_script_pub_keys GUARDED_BY(cs_desc_man);\n+    int32_t m_max_desc_index = -1;",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": null,
      "original_position": 99,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "8f282ebaf0ddd120f5fa0f9d0a1b2b46f7ac5b40",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`m_max_cached_index`?",
      "created_at": "2020-02-29T09:51:15Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r386016600",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/386016600"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 495,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/386016947",
      "pull_request_review_id": 366787922,
      "id": 386016947,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAxNjk0Nw==",
      "diff_hunk": "@@ -1434,3 +1496,594 @@ std::set<CKeyID> LegacyScriptPubKeyMan::GetKeys() const\n     }\n     return set_address;\n }\n+\n+void LegacyScriptPubKeyMan::SetType(OutputType type, bool internal) {}\n+\n+bool DescriptorScriptPubKeyMan::GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error)\n+{\n+    if (!CanGetAddresses(internal)) {\n+        error = \"No private keys available\";\n+        return false;\n+    }\n+    {\n+        LOCK(cs_desc_man);\n+        if (descriptor.descriptor->IsSingleType() && type != address_type) {\n+            throw std::runtime_error(std::string(__func__) + \": Types are inconsistent\");\n+        }\n+\n+        TopUp();\n+\n+        // Get the scriptPubKey from the descriptor\n+        FlatSigningProvider out_keys;\n+        std::vector<CScript> scripts_temp;\n+        if (descriptor.range_end <= m_max_desc_index && !TopUp(1)) {",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 128,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "8f282ebaf0ddd120f5fa0f9d0a1b2b46f7ac5b40",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Do this before (or instead of) `CanGetAddresses()` for readability?",
      "created_at": "2020-02-29T09:58:38Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r386016947",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/386016947"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1520,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/386017234",
      "pull_request_review_id": 366787922,
      "id": 386017234,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAxNzIzNA==",
      "diff_hunk": "@@ -458,9 +477,104 @@ class LegacySigningProvider : public SigningProvider\n     bool GetCScript(const CScriptID &scriptid, CScript& script) const override { return m_spk_man.GetCScript(scriptid, script); }\n     bool HaveCScript(const CScriptID &scriptid) const override { return m_spk_man.HaveCScript(scriptid); }\n     bool GetPubKey(const CKeyID &address, CPubKey& pubkey) const override { return m_spk_man.GetPubKey(address, pubkey); }\n-    bool GetKey(const CKeyID &address, CKey& key) const override { return m_spk_man.GetKey(address, key); }\n-    bool HaveKey(const CKeyID &address) const override { return m_spk_man.HaveKey(address); }\n+    bool GetKey(const CKeyID &address, CKey& key) const override { return false; }\n+    bool HaveKey(const CKeyID &address) const override { return false; }\n     bool GetKeyOrigin(const CKeyID& keyid, KeyOriginInfo& info) const override { return m_spk_man.GetKeyOrigin(keyid, info); }\n };\n \n+class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n+{\n+private:\n+    WalletDescriptor descriptor GUARDED_BY(cs_desc_man);\n+\n+    using ScriptPubKeyMap = std::map<CScript, int32_t>; // Map of scripts to descriptor range index\n+    using CryptedKeyMap = std::map<CKeyID, std::pair<CPubKey, std::vector<unsigned char>>>;\n+    using KeyMap = std::map<CKeyID, CKey>;\n+\n+    ScriptPubKeyMap m_map_script_pub_keys GUARDED_BY(cs_desc_man);\n+    int32_t m_max_desc_index = -1;\n+\n+    OutputType address_type;\n+    bool internal;\n+\n+    KeyMap m_map_keys GUARDED_BY(cs_desc_man);\n+    CryptedKeyMap m_map_crypted_keys GUARDED_BY(cs_desc_man);\n+\n+    bool SetCrypted();\n+\n+    //! keeps track of whether Unlock has run a thorough check before\n+    bool m_decryption_thoroughly_checked = false;\n+\n+    bool AddDescriptorKeyWithDB(WalletBatch& batch, const CKey& key, const CPubKey &pubkey);\n+\n+    KeyMap GetKeys() const EXCLUSIVE_LOCKS_REQUIRED(cs_desc_man);\n+\n+    std::unique_ptr<FlatSigningProvider> GetSigningProvider(const CScript& script, bool include_private = false) const;\n+public:\n+    DescriptorScriptPubKeyMan(WalletStorage& storage, WalletDescriptor& descriptor)\n+        :   ScriptPubKeyMan(storage),\n+            descriptor(descriptor)\n+        {}\n+    DescriptorScriptPubKeyMan(WalletStorage& storage, OutputType address_type, bool internal)\n+        :   ScriptPubKeyMan(storage),\n+            address_type(address_type), internal(internal)\n+        {}\n+\n+    mutable RecursiveMutex cs_desc_man;\n+\n+    bool GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error) override;\n+    isminetype IsMine(const CScript& script) const override;\n+\n+    bool CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys = false) override;\n+    bool Encrypt(const CKeyingMaterial& master_key, WalletBatch* batch) override;\n+\n+    bool GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool) override;\n+    void ReturnDestination(int64_t index, bool internal, const CTxDestination& addr) override;\n+\n+    bool TopUp(unsigned int size = 0) override;",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": 109,
      "original_position": 138,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "8f282ebaf0ddd120f5fa0f9d0a1b2b46f7ac5b40",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Worth documenting that:\r\n```\r\nThis tops up the descriptor cache (and `m_map_script_pub_keys`).\r\nThe cache is stored in the wallet payload\r\nand used to expand the descriptor upon wallet load. A descriptor\r\nScriptPubKeyMan may rely more on ephemeral data than its legacy keypool\r\ncounterpart. For wallets without private keys and with unhardened derivation, the\r\nkeypool is aved as a single xpub, and therefore Topup() does not increase storage\r\nsize.\r\n```",
      "created_at": "2020-02-29T10:03:37Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r386017234",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/386017234"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 546,
      "original_line": 546,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/386603451",
      "pull_request_review_id": 367467531,
      "id": 386603451,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYwMzQ1MQ==",
      "diff_hunk": "@@ -1434,3 +1496,594 @@ std::set<CKeyID> LegacyScriptPubKeyMan::GetKeys() const\n     }\n     return set_address;\n }\n+\n+void LegacyScriptPubKeyMan::SetType(OutputType type, bool internal) {}\n+\n+bool DescriptorScriptPubKeyMan::GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error)\n+{\n+    if (!CanGetAddresses(internal)) {\n+        error = \"No private keys available\";\n+        return false;\n+    }\n+    {\n+        LOCK(cs_desc_man);\n+        if (descriptor.descriptor->IsSingleType() && type != address_type) {\n+            throw std::runtime_error(std::string(__func__) + \": Types are inconsistent\");\n+        }\n+\n+        TopUp();\n+\n+        // Get the scriptPubKey from the descriptor\n+        FlatSigningProvider out_keys;\n+        std::vector<CScript> scripts_temp;\n+        if (descriptor.range_end <= m_max_desc_index && !TopUp(1)) {\n+            // We can't generate anymore keys\n+            error = \"Error: Keypool ran out, please call keypoolrefill first\";\n+            return false;\n+        }\n+        if (!descriptor.descriptor->ExpandFromCache(descriptor.next_index, descriptor.cache, scripts_temp, out_keys)) {\n+            // We can't generate anymore keys\n+            error = \"Error: Keypool ran out, please call keypoolrefill first\";\n+            return false;\n+        }\n+\n+        if (descriptor.descriptor->IsSingleType()) {\n+            Optional<OutputType> out_script_type = descriptor.descriptor->GetOutputType();\n+            if (out_script_type && out_script_type == type) {\n+                ExtractDestination(scripts_temp[0], dest);\n+            } else {\n+                throw std::runtime_error(std::string(__func__) + \": Types are inconsistent. Stored type does not match type of newly generated address\");\n+            }\n+        } else {\n+            // This is a combo descriptor which should not be an active descriptor\n+            assert(false);\n+        }\n+        descriptor.next_index++;\n+        WalletBatch(m_storage.GetDatabase()).WriteDescriptor(GetID(), descriptor);\n+        return true;\n+    }\n+}\n+\n+isminetype DescriptorScriptPubKeyMan::IsMine(const CScript& script) const\n+{\n+    LOCK(cs_desc_man);\n+    if (m_map_script_pub_keys.count(script) > 0) {\n+        return ISMINE_SPENDABLE;\n+    }\n+    return ISMINE_NO;\n+}\n+\n+bool DescriptorScriptPubKeyMan::CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys)\n+{\n+    {\n+        LOCK(cs_desc_man);\n+        if (!m_map_keys.empty())\n+            return false;\n+\n+        bool keyPass = m_map_crypted_keys.empty(); // Always pass when there are no encrypted keys\n+        bool keyFail = false;\n+        CryptedKeyMap::const_iterator mi = m_map_crypted_keys.begin();\n+        for (; mi != m_map_crypted_keys.end(); ++mi)\n+        {\n+            const CPubKey &pubkey = (*mi).second.first;\n+            const std::vector<unsigned char> &crypted_secret = (*mi).second.second;\n+            CKey key;\n+            if (!DecryptKey(master_key, crypted_secret, pubkey, key))\n+            {\n+                keyFail = true;\n+                break;\n+            }\n+            keyPass = true;\n+            if (m_decryption_thoroughly_checked)\n+                break;\n+        }\n+        if (keyPass && keyFail)\n+        {\n+            LogPrintf(\"The wallet is probably corrupted: Some keys decrypt but not all.\\n\");\n+            throw std::runtime_error(\"Error unlocking wallet: some keys decrypt but not all. Your wallet file may be corrupt.\");\n+        }\n+        if (keyFail || (!keyPass && !accept_no_keys))\n+            return false;\n+        m_decryption_thoroughly_checked = true;\n+    }\n+    return true;\n+}\n+\n+bool DescriptorScriptPubKeyMan::Encrypt(const CKeyingMaterial& master_key, WalletBatch* batch)\n+{\n+    LOCK(cs_desc_man);\n+    if (!m_map_crypted_keys.empty()) {\n+        return false;\n+    }\n+\n+    for (const KeyMap::value_type& key_in : m_map_keys)\n+    {\n+        const CKey &key = key_in.second;\n+        CPubKey pubkey = key.GetPubKey();\n+        CKeyingMaterial secret(key.begin(), key.end());\n+        std::vector<unsigned char> crypted_secret;\n+        if (!EncryptSecret(master_key, secret, pubkey.GetHash(), crypted_secret)) {\n+            return false;\n+        }\n+        m_map_crypted_keys[pubkey.GetID()] = make_pair(pubkey, crypted_secret);\n+        batch->WriteCryptedDescriptorKey(GetID(), pubkey, crypted_secret);\n+    }\n+    m_map_keys.clear();\n+    return true;\n+}\n+\n+bool DescriptorScriptPubKeyMan::GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool)\n+{\n+    LOCK(cs_desc_man);\n+    std::string error;\n+    bool result = GetNewDestination(type, address, error);\n+    index = descriptor.next_index - 1;\n+    return result;\n+}\n+\n+void DescriptorScriptPubKeyMan::ReturnDestination(int64_t index, bool internal, const CTxDestination& addr)\n+{\n+    LOCK(cs_desc_man);\n+    // Only return when the index was the most recent\n+    if (descriptor.next_index - 1 == index) {\n+        descriptor.next_index--;\n+    }\n+    WalletBatch(m_storage.GetDatabase()).WriteDescriptor(GetID(), descriptor);\n+    NotifyCanGetAddressesChanged();\n+}\n+\n+std::map<CKeyID, CKey> DescriptorScriptPubKeyMan::GetKeys() const\n+{\n+    AssertLockHeld(cs_desc_man);\n+    if (m_storage.HasEncryptionKeys() && !m_storage.IsLocked()) {\n+        KeyMap keys;\n+        for (auto key_pair : m_map_crypted_keys) {\n+            const CPubKey& pubkey = key_pair.second.first;\n+            const std::vector<unsigned char>& crypted_secret = key_pair.second.second;\n+            CKey key;\n+            DecryptKey(m_storage.GetEncryptionKey(), crypted_secret, pubkey, key);\n+            keys[pubkey.GetID()] = key;\n+        }\n+        return keys;\n+    }\n+    return m_map_keys;\n+}\n+\n+bool DescriptorScriptPubKeyMan::TopUp(unsigned int size)\n+{\n+    LOCK(cs_desc_man);\n+    unsigned int target_size;\n+    if (size > 0)\n+        target_size = size;\n+    else\n+        target_size = std::max(gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 0);\n+    target_size = std::max((int32_t)target_size, 1);\n+\n+    // Calculate the new range_end\n+    int32_t new_range_end = std::max(descriptor.next_index + (int32_t)target_size, descriptor.range_end);\n+\n+    // If the descriptor is not ranged, we actually just want to fill the first cache item\n+    if (!descriptor.descriptor->IsRange()) {\n+        new_range_end = 1;\n+        descriptor.range_end = 1;\n+        descriptor.range_start = 0;\n+    }\n+\n+    FlatSigningProvider provider;\n+    provider.keys = GetKeys();\n+\n+    WalletBatch batch(m_storage.GetDatabase());\n+    uint256 id = GetID();\n+    for (int32_t i = m_max_desc_index + 1; i < new_range_end; ++i) {\n+        FlatSigningProvider out_keys;\n+        std::vector<CScript> scripts_temp;\n+        DescriptorCache cache;\n+        if (!descriptor.descriptor->Expand(i, provider, scripts_temp, out_keys, &cache)) {\n+            // Maybe we have a cached xpub and we can expand from cache\n+            if (!descriptor.descriptor->ExpandFromCache(i, descriptor.cache, scripts_temp, out_keys)) return false;",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 292,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "8f282ebaf0ddd120f5fa0f9d0a1b2b46f7ac5b40",
      "in_reply_to_id": 386015063,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-03-02T19:31:04Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r386603451",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/386603451"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1683,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/386603522",
      "pull_request_review_id": 367467629,
      "id": 386603522,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYwMzUyMg==",
      "diff_hunk": "@@ -1434,3 +1496,594 @@ std::set<CKeyID> LegacyScriptPubKeyMan::GetKeys() const\n     }\n     return set_address;\n }\n+\n+void LegacyScriptPubKeyMan::SetType(OutputType type, bool internal) {}\n+\n+bool DescriptorScriptPubKeyMan::GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error)\n+{\n+    if (!CanGetAddresses(internal)) {\n+        error = \"No private keys available\";",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 114,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "8f282ebaf0ddd120f5fa0f9d0a1b2b46f7ac5b40",
      "in_reply_to_id": 386015338,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done. Added a comment.",
      "created_at": "2020-03-02T19:31:11Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r386603522",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/386603522"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1505,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/386603601",
      "pull_request_review_id": 367467721,
      "id": 386603601,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYwMzYwMQ==",
      "diff_hunk": "@@ -458,9 +477,104 @@ class LegacySigningProvider : public SigningProvider\n     bool GetCScript(const CScriptID &scriptid, CScript& script) const override { return m_spk_man.GetCScript(scriptid, script); }\n     bool HaveCScript(const CScriptID &scriptid) const override { return m_spk_man.HaveCScript(scriptid); }\n     bool GetPubKey(const CKeyID &address, CPubKey& pubkey) const override { return m_spk_man.GetPubKey(address, pubkey); }\n-    bool GetKey(const CKeyID &address, CKey& key) const override { return m_spk_man.GetKey(address, key); }\n-    bool HaveKey(const CKeyID &address) const override { return m_spk_man.HaveKey(address); }\n+    bool GetKey(const CKeyID &address, CKey& key) const override { return false; }\n+    bool HaveKey(const CKeyID &address) const override { return false; }\n     bool GetKeyOrigin(const CKeyID& keyid, KeyOriginInfo& info) const override { return m_spk_man.GetKeyOrigin(keyid, info); }\n };\n \n+class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n+{\n+private:\n+    WalletDescriptor descriptor GUARDED_BY(cs_desc_man);\n+\n+    using ScriptPubKeyMap = std::map<CScript, int32_t>; // Map of scripts to descriptor range index\n+    using CryptedKeyMap = std::map<CKeyID, std::pair<CPubKey, std::vector<unsigned char>>>;\n+    using KeyMap = std::map<CKeyID, CKey>;\n+\n+    ScriptPubKeyMap m_map_script_pub_keys GUARDED_BY(cs_desc_man);\n+    int32_t m_max_desc_index = -1;",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": null,
      "original_position": 99,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "8f282ebaf0ddd120f5fa0f9d0a1b2b46f7ac5b40",
      "in_reply_to_id": 386016600,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2020-03-02T19:31:21Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r386603601",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/386603601"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 495,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/386603947",
      "pull_request_review_id": 367468157,
      "id": 386603947,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYwMzk0Nw==",
      "diff_hunk": "@@ -1434,3 +1496,594 @@ std::set<CKeyID> LegacyScriptPubKeyMan::GetKeys() const\n     }\n     return set_address;\n }\n+\n+void LegacyScriptPubKeyMan::SetType(OutputType type, bool internal) {}\n+\n+bool DescriptorScriptPubKeyMan::GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error)\n+{\n+    if (!CanGetAddresses(internal)) {\n+        error = \"No private keys available\";\n+        return false;\n+    }\n+    {\n+        LOCK(cs_desc_man);\n+        if (descriptor.descriptor->IsSingleType() && type != address_type) {\n+            throw std::runtime_error(std::string(__func__) + \": Types are inconsistent\");\n+        }\n+\n+        TopUp();\n+\n+        // Get the scriptPubKey from the descriptor\n+        FlatSigningProvider out_keys;\n+        std::vector<CScript> scripts_temp;\n+        if (descriptor.range_end <= m_max_desc_index && !TopUp(1)) {",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 128,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "8f282ebaf0ddd120f5fa0f9d0a1b2b46f7ac5b40",
      "in_reply_to_id": 386016947,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I added a comment earlier so that should help. I would prefer to keep the current pattern of always doing `CanGetAddresses` first.",
      "created_at": "2020-03-02T19:31:59Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r386603947",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/386603947"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1520,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/386604011",
      "pull_request_review_id": 367468243,
      "id": 386604011,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYwNDAxMQ==",
      "diff_hunk": "@@ -458,9 +477,104 @@ class LegacySigningProvider : public SigningProvider\n     bool GetCScript(const CScriptID &scriptid, CScript& script) const override { return m_spk_man.GetCScript(scriptid, script); }\n     bool HaveCScript(const CScriptID &scriptid) const override { return m_spk_man.HaveCScript(scriptid); }\n     bool GetPubKey(const CKeyID &address, CPubKey& pubkey) const override { return m_spk_man.GetPubKey(address, pubkey); }\n-    bool GetKey(const CKeyID &address, CKey& key) const override { return m_spk_man.GetKey(address, key); }\n-    bool HaveKey(const CKeyID &address) const override { return m_spk_man.HaveKey(address); }\n+    bool GetKey(const CKeyID &address, CKey& key) const override { return false; }\n+    bool HaveKey(const CKeyID &address) const override { return false; }\n     bool GetKeyOrigin(const CKeyID& keyid, KeyOriginInfo& info) const override { return m_spk_man.GetKeyOrigin(keyid, info); }\n };\n \n+class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n+{\n+private:\n+    WalletDescriptor descriptor GUARDED_BY(cs_desc_man);\n+\n+    using ScriptPubKeyMap = std::map<CScript, int32_t>; // Map of scripts to descriptor range index\n+    using CryptedKeyMap = std::map<CKeyID, std::pair<CPubKey, std::vector<unsigned char>>>;\n+    using KeyMap = std::map<CKeyID, CKey>;\n+\n+    ScriptPubKeyMap m_map_script_pub_keys GUARDED_BY(cs_desc_man);\n+    int32_t m_max_desc_index = -1;\n+\n+    OutputType address_type;\n+    bool internal;\n+\n+    KeyMap m_map_keys GUARDED_BY(cs_desc_man);\n+    CryptedKeyMap m_map_crypted_keys GUARDED_BY(cs_desc_man);\n+\n+    bool SetCrypted();\n+\n+    //! keeps track of whether Unlock has run a thorough check before\n+    bool m_decryption_thoroughly_checked = false;\n+\n+    bool AddDescriptorKeyWithDB(WalletBatch& batch, const CKey& key, const CPubKey &pubkey);\n+\n+    KeyMap GetKeys() const EXCLUSIVE_LOCKS_REQUIRED(cs_desc_man);\n+\n+    std::unique_ptr<FlatSigningProvider> GetSigningProvider(const CScript& script, bool include_private = false) const;\n+public:\n+    DescriptorScriptPubKeyMan(WalletStorage& storage, WalletDescriptor& descriptor)\n+        :   ScriptPubKeyMan(storage),\n+            descriptor(descriptor)\n+        {}\n+    DescriptorScriptPubKeyMan(WalletStorage& storage, OutputType address_type, bool internal)\n+        :   ScriptPubKeyMan(storage),\n+            address_type(address_type), internal(internal)\n+        {}\n+\n+    mutable RecursiveMutex cs_desc_man;\n+\n+    bool GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error) override;\n+    isminetype IsMine(const CScript& script) const override;\n+\n+    bool CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys = false) override;\n+    bool Encrypt(const CKeyingMaterial& master_key, WalletBatch* batch) override;\n+\n+    bool GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool) override;\n+    void ReturnDestination(int64_t index, bool internal, const CTxDestination& addr) override;\n+\n+    bool TopUp(unsigned int size = 0) override;",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": 109,
      "original_position": 138,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "8f282ebaf0ddd120f5fa0f9d0a1b2b46f7ac5b40",
      "in_reply_to_id": 386017234,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added a similar comment.",
      "created_at": "2020-03-02T19:32:07Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r386604011",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/386604011"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 546,
      "original_line": 546,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/387791934",
      "pull_request_review_id": 368940711,
      "id": 387791934,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc5MTkzNA==",
      "diff_hunk": "@@ -1434,3 +1496,609 @@ std::set<CKeyID> LegacyScriptPubKeyMan::GetKeys() const\n     }\n     return set_address;\n }\n+\n+void LegacyScriptPubKeyMan::SetType(OutputType type, bool internal) {}\n+\n+bool DescriptorScriptPubKeyMan::GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error)\n+{\n+    if (!CanGetAddresses(internal)) {\n+        error = \"No private keys available\";\n+        return false;\n+    }\n+    {\n+        LOCK(cs_desc_man);\n+        if (descriptor.descriptor->IsSingleType() && type != address_type) {\n+            throw std::runtime_error(std::string(__func__) + \": Types are inconsistent\");\n+        }\n+\n+        TopUp();\n+\n+        // Get the scriptPubKey from the descriptor\n+        FlatSigningProvider out_keys;\n+        std::vector<CScript> scripts_temp;\n+        if (descriptor.range_end <= m_max_desc_index && !TopUp(1)) {\n+            // We can't generate anymore keys\n+            error = \"Error: Keypool ran out, please call keypoolrefill first\";\n+            return false;\n+        }\n+        if (!descriptor.descriptor->ExpandFromCache(descriptor.next_index, descriptor.cache, scripts_temp, out_keys)) {\n+            // We can't generate anymore keys\n+            error = \"Error: Keypool ran out, please call keypoolrefill first\";\n+            return false;\n+        }\n+\n+        if (descriptor.descriptor->IsSingleType()) {\n+            Optional<OutputType> out_script_type = descriptor.descriptor->GetOutputType();\n+            if (out_script_type && out_script_type == type) {\n+                ExtractDestination(scripts_temp[0], dest);\n+            } else {\n+                throw std::runtime_error(std::string(__func__) + \": Types are inconsistent. Stored type does not match type of newly generated address\");\n+            }\n+        } else {\n+            // This is a combo descriptor which should not be an active descriptor\n+            assert(false);\n+        }\n+        descriptor.next_index++;\n+        WalletBatch(m_storage.GetDatabase()).WriteDescriptor(GetID(), descriptor);\n+        return true;\n+    }\n+}\n+\n+isminetype DescriptorScriptPubKeyMan::IsMine(const CScript& script) const\n+{\n+    LOCK(cs_desc_man);\n+    if (m_map_script_pub_keys.count(script) > 0) {\n+        return ISMINE_SPENDABLE;\n+    }\n+    return ISMINE_NO;\n+}\n+\n+bool DescriptorScriptPubKeyMan::CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys)\n+{\n+    {\n+        LOCK(cs_desc_man);\n+        if (!m_map_keys.empty())\n+            return false;\n+\n+        bool keyPass = m_map_crypted_keys.empty(); // Always pass when there are no encrypted keys\n+        bool keyFail = false;\n+        CryptedKeyMap::const_iterator mi = m_map_crypted_keys.begin();\n+        for (; mi != m_map_crypted_keys.end(); ++mi)\n+        {\n+            const CPubKey &pubkey = (*mi).second.first;\n+            const std::vector<unsigned char> &crypted_secret = (*mi).second.second;\n+            CKey key;\n+            if (!DecryptKey(master_key, crypted_secret, pubkey, key))\n+            {\n+                keyFail = true;\n+                break;\n+            }\n+            keyPass = true;\n+            if (m_decryption_thoroughly_checked)\n+                break;\n+        }\n+        if (keyPass && keyFail)\n+        {\n+            LogPrintf(\"The wallet is probably corrupted: Some keys decrypt but not all.\\n\");\n+            throw std::runtime_error(\"Error unlocking wallet: some keys decrypt but not all. Your wallet file may be corrupt.\");\n+        }\n+        if (keyFail || (!keyPass && !accept_no_keys))\n+            return false;\n+        m_decryption_thoroughly_checked = true;\n+    }\n+    return true;\n+}\n+\n+bool DescriptorScriptPubKeyMan::Encrypt(const CKeyingMaterial& master_key, WalletBatch* batch)\n+{\n+    LOCK(cs_desc_man);\n+    if (!m_map_crypted_keys.empty()) {\n+        return false;\n+    }\n+\n+    for (const KeyMap::value_type& key_in : m_map_keys)\n+    {\n+        const CKey &key = key_in.second;\n+        CPubKey pubkey = key.GetPubKey();\n+        CKeyingMaterial secret(key.begin(), key.end());\n+        std::vector<unsigned char> crypted_secret;\n+        if (!EncryptSecret(master_key, secret, pubkey.GetHash(), crypted_secret)) {\n+            return false;\n+        }\n+        m_map_crypted_keys[pubkey.GetID()] = make_pair(pubkey, crypted_secret);\n+        batch->WriteCryptedDescriptorKey(GetID(), pubkey, crypted_secret);\n+    }\n+    m_map_keys.clear();\n+    return true;\n+}\n+\n+bool DescriptorScriptPubKeyMan::GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool)\n+{\n+    LOCK(cs_desc_man);\n+    std::string error;\n+    bool result = GetNewDestination(type, address, error);\n+    index = descriptor.next_index - 1;\n+    return result;\n+}\n+\n+void DescriptorScriptPubKeyMan::ReturnDestination(int64_t index, bool internal, const CTxDestination& addr)\n+{\n+    LOCK(cs_desc_man);\n+    // Only return when the index was the most recent\n+    if (descriptor.next_index - 1 == index) {\n+        descriptor.next_index--;\n+    }\n+    WalletBatch(m_storage.GetDatabase()).WriteDescriptor(GetID(), descriptor);\n+    NotifyCanGetAddressesChanged();\n+}\n+\n+std::map<CKeyID, CKey> DescriptorScriptPubKeyMan::GetKeys() const\n+{\n+    AssertLockHeld(cs_desc_man);\n+    if (m_storage.HasEncryptionKeys() && !m_storage.IsLocked()) {\n+        KeyMap keys;\n+        for (auto key_pair : m_map_crypted_keys) {\n+            const CPubKey& pubkey = key_pair.second.first;\n+            const std::vector<unsigned char>& crypted_secret = key_pair.second.second;\n+            CKey key;\n+            DecryptKey(m_storage.GetEncryptionKey(), crypted_secret, pubkey, key);\n+            keys[pubkey.GetID()] = key;\n+        }\n+        return keys;\n+    }\n+    return m_map_keys;\n+}\n+\n+bool DescriptorScriptPubKeyMan::TopUp(unsigned int size)\n+{\n+    LOCK(cs_desc_man);\n+    unsigned int target_size;\n+    if (size > 0)\n+        target_size = size;\n+    else\n+        target_size = std::max(gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 0);\n+    target_size = std::max((int32_t)target_size, 1);\n+\n+    // Calculate the new range_end\n+    int32_t new_range_end = std::max(descriptor.next_index + (int32_t)target_size, descriptor.range_end);\n+\n+    // If the descriptor is not ranged, we actually just want to fill the first cache item\n+    if (!descriptor.descriptor->IsRange()) {\n+        new_range_end = 1;\n+        descriptor.range_end = 1;\n+        descriptor.range_start = 0;\n+    }\n+\n+    FlatSigningProvider provider;\n+    provider.keys = GetKeys();\n+\n+    WalletBatch batch(m_storage.GetDatabase());\n+    uint256 id = GetID();\n+    for (int32_t i = m_max_desc_index + 1; i < new_range_end; ++i) {\n+        FlatSigningProvider out_keys;\n+        std::vector<CScript> scripts_temp;\n+        DescriptorCache cache;\n+        if (!descriptor.descriptor->Expand(i, provider, scripts_temp, out_keys, &cache)) {\n+            // Maybe we have a cached xpub and we can expand from cache\n+            if (!descriptor.descriptor->ExpandFromCache(i, descriptor.cache, scripts_temp, out_keys)) return false;\n+        }\n+        // Add all of the scriptPubKeys to the scriptPubKey set\n+        for (const CScript& script : scripts_temp) {\n+            m_map_script_pub_keys[script] = i;\n+        }\n+        // Write the cache\n+        std::map<KeyOriginInfo, CExtPubKey> newly_cached = descriptor.cache.GetNotCached(cache.GetCachedExtPubKeys());",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 299,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "1b4fd1424f6160195d6d28072d8793b666db007d",
      "in_reply_to_id": 385668788,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Even if it was \"unnecessary\" I think it makes the code less brittle to future changes anyways.",
      "created_at": "2020-03-04T16:41:32Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r387791934",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/387791934"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1691,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/395854864",
      "pull_request_review_id": 378766395,
      "id": 395854864,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg1NDg2NA==",
      "diff_hunk": "@@ -484,8 +484,17 @@ class LegacySigningProvider : public SigningProvider\n \n class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n {\n+private:\n+    WalletDescriptor descriptor GUARDED_BY(cs_desc_man);",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": null,
      "original_position": 5,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "10d744735666fb6e9e1dbe44a2112434daebfee9",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "suggestion: `s/descriptor/m_wallet_descriptor/`",
      "created_at": "2020-03-20T19:42:50Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r395854864",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/395854864"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 488,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/395865796",
      "pull_request_review_id": 378766395,
      "id": 395865796,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg2NTc5Ng==",
      "diff_hunk": "@@ -179,6 +182,15 @@ bool WalletBatch::WriteMinVersion(int nVersion)\n     return WriteIC(DBKeys::MINVERSION, nVersion);\n }\n \n+bool WalletBatch::WriteActiveScriptPubKeyMan(uint8_t type, const uint256& id, bool internal)",
      "path": "src/wallet/walletdb.cpp",
      "position": 24,
      "original_position": 23,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "6fa9c482c51576c97b7e02a767d0b328dbbb52fc",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Placeholder for this thought: As I mentioned elsewhere, I'd really like something smarter for detecting `IsChange`. We could instead store the internall-ness via record with the spkm themselves, then the `active` record needs one less thing as well, and know what is change even on wallet restore.",
      "created_at": "2020-03-20T20:07:20Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r395865796",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/395865796"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 188,
      "original_line": 188,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/395867154",
      "pull_request_review_id": 378766395,
      "id": 395867154,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg2NzE1NA==",
      "diff_hunk": "@@ -189,6 +201,8 @@ class CWalletScanState {\n     bool fIsEncrypted{false};\n     bool fAnyUnordered{false};\n     std::vector<uint256> vWalletUpgrade;\n+    std::map<OutputType, uint256> m_external_spk_managers;\n+    std::map<OutputType, uint256> m_internal_spk_managers;",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 40,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "6fa9c482c51576c97b7e02a767d0b328dbbb52fc",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "suggestion: `s/m_internal_spk_managers/m_active_internal_spkm/`",
      "created_at": "2020-03-20T20:10:49Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r395867154",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/395867154"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 247,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/395867365",
      "pull_request_review_id": 378766395,
      "id": 395867365,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg2NzM2NQ==",
      "diff_hunk": "@@ -189,6 +201,8 @@ class CWalletScanState {\n     bool fIsEncrypted{false};\n     bool fAnyUnordered{false};\n     std::vector<uint256> vWalletUpgrade;\n+    std::map<OutputType, uint256> m_external_spk_managers;",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 39,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "6fa9c482c51576c97b7e02a767d0b328dbbb52fc",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "suggestion: `s/m_external_spk_managers/m_active_external_spkm/`",
      "created_at": "2020-03-20T20:11:18Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r395867365",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/395867365"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 246,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/395867702",
      "pull_request_review_id": 378766395,
      "id": 395867702,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg2NzcwMg==",
      "diff_hunk": "@@ -402,6 +416,21 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n         } else if (strType == DBKeys::OLD_KEY) {\n             strErr = \"Found unsupported 'wkey' record, try loading with version 0.18\";\n             return false;\n+        } else if (strType == DBKeys::EXTERNALSPK || strType == DBKeys::INTERNALSPK) {\n+            uint8_t type;\n+            ssKey >> type;\n+            uint256 id;\n+            ssValue >> id;\n+\n+            bool internal = strType == DBKeys::INTERNALSPK;\n+            auto& spk_mans = internal ? wss.m_internal_spk_managers : wss.m_external_spk_managers;\n+            spk_mans[static_cast<OutputType>(type)] = id;",
      "path": "src/wallet/walletdb.cpp",
      "position": 100,
      "original_position": 56,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "6fa9c482c51576c97b7e02a767d0b328dbbb52fc",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "should this get upset or log if there's already one in the map?",
      "created_at": "2020-03-20T20:12:04Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r395867702",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/395867702"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 475,
      "original_line": 475,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/395869627",
      "pull_request_review_id": 378766395,
      "id": 395869627,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg2OTYyNw==",
      "diff_hunk": "@@ -60,8 +60,10 @@ extern const std::string CRYPTED_KEY;\n extern const std::string CSCRIPT;\n extern const std::string DEFAULTKEY;\n extern const std::string DESTDATA;\n+extern const std::string EXTERNALSPK;",
      "path": "src/wallet/walletdb.h",
      "position": null,
      "original_position": 4,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "6fa9c482c51576c97b7e02a767d0b328dbbb52fc",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "suggestion: `ACTIVEEXTERNALSPK` or something",
      "created_at": "2020-03-20T20:16:41Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r395869627",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/395869627"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 64,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/395869783",
      "pull_request_review_id": 378766395,
      "id": 395869783,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg2OTc4Mw==",
      "diff_hunk": "@@ -60,8 +60,10 @@ extern const std::string CRYPTED_KEY;\n extern const std::string CSCRIPT;\n extern const std::string DEFAULTKEY;\n extern const std::string DESTDATA;\n+extern const std::string EXTERNALSPK;\n extern const std::string FLAGS;\n extern const std::string HDCHAIN;\n+extern const std::string INTERNALSPK;",
      "path": "src/wallet/walletdb.h",
      "position": null,
      "original_position": 7,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "6fa9c482c51576c97b7e02a767d0b328dbbb52fc",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "suggestion: `ACTIVEINTERNALSPK` or something",
      "created_at": "2020-03-20T20:17:02Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r395869783",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/395869783"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 67,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/395871641",
      "pull_request_review_id": 378766395,
      "id": 395871641,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg3MTY0MQ==",
      "diff_hunk": "@@ -1506,6 +1506,10 @@ bool DescriptorScriptPubKeyMan::GetNewDestination(const OutputType type, CTxDest\n \n isminetype DescriptorScriptPubKeyMan::IsMine(const CScript& script) const\n {\n+    LOCK(cs_desc_man);\n+    if (m_map_script_pub_keys.count(script) > 0) {",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 78,
      "original_position": 5,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "7eaee4bd840b29a5fcd4810f9b87ff3e95c36e1c",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "*sheds single tear for simplicity*",
      "created_at": "2020-03-20T20:21:28Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r395871641",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/395871641"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1548,
      "original_line": 1548,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/395872979",
      "pull_request_review_id": 378766395,
      "id": 395872979,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg3Mjk3OQ==",
      "diff_hunk": "@@ -1539,6 +1539,17 @@ bool DescriptorScriptPubKeyMan::TopUp(unsigned int size)\n \n void DescriptorScriptPubKeyMan::MarkUnusedAddresses(const CScript& script)\n {\n+    LOCK(cs_desc_man);\n+    if (IsMine(script)) {",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 266,
      "original_position": 5,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "71f9ce5e93b2a66fcd76d9d7467a83470e030c93",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Just noting that this is strictly a \"softfork\" over LegacySPKM: previously any detected pubkey in involved in a script would boot an entry.\r\n\r\nThe new behavior is much simpler and easier to reason about. Just noting it's different in case somebody does some sort of idiotic key-sharing wallet between chains.",
      "created_at": "2020-03-20T20:24:44Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r395872979",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/395872979"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1736,
      "original_line": 1736,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/397840687",
      "pull_request_review_id": 378766395,
      "id": 397840687,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg0MDY4Nw==",
      "diff_hunk": "@@ -1632,3 +1632,18 @@ void DescriptorScriptPubKeyMan::SetType(OutputType type, bool internal)\n     this->address_type = type;\n     this->internal = internal;\n }\n+\n+void DescriptorScriptPubKeyMan::SetCache(const DescriptorCache& cache)\n+{\n+    LOCK(cs_desc_man);\n+    descriptor.cache = cache;\n+    for (int32_t i = descriptor.range_start; i < descriptor.range_end; ++i) {\n+        FlatSigningProvider out_keys;\n+        std::vector<CScript> scripts_temp;\n+        descriptor.descriptor->ExpandFromCache(i, descriptor.cache, scripts_temp, out_keys);\n+        // Add all of the scriptPubKeys to the scriptPubKey set",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 626,
      "original_position": 13,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "4a0b2986f4716a177ea4e221c846a4bdb47f9317",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "under what circumstances would multiple scriptpubkeys be generated for a descriptor wallet? Isn't this just for `combo` which is inapplicable?",
      "created_at": "2020-03-25T13:11:51Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r397840687",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/397840687"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2096,
      "original_line": 2096,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/397846119",
      "pull_request_review_id": 378766395,
      "id": 397846119,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg0NjExOQ==",
      "diff_hunk": "@@ -532,6 +560,12 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\n         pwallet->SetActiveScriptPubKeyMan(spk_man_pair.second, spk_man_pair.first, /* internal */ true, /* memonly */ true);\n     }\n \n+    // Set the descriptor caches\n+    for (auto desc_cache_pair : wss.m_descriptor_caches) {\n+        auto spk_man = pwallet->GetScriptPubKeyMan(desc_cache_pair.first);",
      "path": "src/wallet/walletdb.cpp",
      "position": 207,
      "original_position": 56,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "4a0b2986f4716a177ea4e221c846a4bdb47f9317",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "should be asserting or aborting the next line when spkm cannot be found(`nullptr`) for whatever reason",
      "created_at": "2020-03-25T13:19:50Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r397846119",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/397846119"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 668,
      "original_line": 668,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/397847371",
      "pull_request_review_id": 378766395,
      "id": 397847371,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg0NzM3MQ==",
      "diff_hunk": "@@ -430,7 +432,33 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             ssKey >> id;\n             WalletDescriptor desc;\n             ssValue >> desc;\n+            wss.m_descriptor_caches[id] = DescriptorCache();",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 20,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "4a0b2986f4716a177ea4e221c846a4bdb47f9317",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "this means the `DBKeys::WALLETDESCRIPTOR`  must be an earlier record in all cases? Probably deserves a note.",
      "created_at": "2020-03-25T13:21:46Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r397847371",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/397847371"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 435,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/397859895",
      "pull_request_review_id": 378766395,
      "id": 397859895,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg1OTg5NQ==",
      "diff_hunk": "@@ -1560,12 +1560,14 @@ bool DescriptorScriptPubKeyMan::IsHDEnabled() const\n \n bool DescriptorScriptPubKeyMan::CanGetAddresses(bool internal) const\n {\n-    return false;\n+    LOCK(cs_desc_man);\n+    return HavePrivateKeys() || descriptor.next_index < descriptor.range_end;",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 6,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "d117cb1078f8a3c10a717ed642af00ab62643853",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "why is `HavePrivateKeys()` sufficient here for non-HD?",
      "created_at": "2020-03-25T13:39:22Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r397859895",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/397859895"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1564,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/397903046",
      "pull_request_review_id": 378766395,
      "id": 397903046,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkwMzA0Ng==",
      "diff_hunk": "@@ -1532,9 +1532,99 @@ void DescriptorScriptPubKeyMan::ReturnDestination(int64_t index, bool internal,\n {\n }\n \n+std::map<CKeyID, CKey> DescriptorScriptPubKeyMan::GetKeys() const\n+{\n+    AssertLockHeld(cs_desc_man);\n+    if (m_storage.HasEncryptionKeys() && !m_storage.IsLocked()) {\n+        KeyMap keys;\n+        for (auto key_pair : m_map_crypted_keys) {\n+            const CPubKey& pubkey = key_pair.second.first;\n+            const std::vector<unsigned char>& crypted_secret = key_pair.second.second;\n+            CKey key;\n+            DecryptKey(m_storage.GetEncryptionKey(), crypted_secret, pubkey, key);\n+            keys[pubkey.GetID()] = key;\n+        }\n+        return keys;\n+    }\n+    return m_map_keys;\n+}\n+\n bool DescriptorScriptPubKeyMan::TopUp(unsigned int size)\n {\n-    return false;\n+    LOCK(cs_desc_man);\n+    unsigned int target_size;\n+    if (size > 0)",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 26,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "915da4fababc4237e99823cf32399fe02646c061",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "brackets for this conditional block please",
      "created_at": "2020-03-25T14:34:59Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r397903046",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/397903046"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1556,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/397904496",
      "pull_request_review_id": 378766395,
      "id": 397904496,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkwNDQ5Ng==",
      "diff_hunk": "@@ -1532,9 +1532,99 @@ void DescriptorScriptPubKeyMan::ReturnDestination(int64_t index, bool internal,\n {\n }\n \n+std::map<CKeyID, CKey> DescriptorScriptPubKeyMan::GetKeys() const\n+{\n+    AssertLockHeld(cs_desc_man);\n+    if (m_storage.HasEncryptionKeys() && !m_storage.IsLocked()) {\n+        KeyMap keys;\n+        for (auto key_pair : m_map_crypted_keys) {\n+            const CPubKey& pubkey = key_pair.second.first;\n+            const std::vector<unsigned char>& crypted_secret = key_pair.second.second;\n+            CKey key;\n+            DecryptKey(m_storage.GetEncryptionKey(), crypted_secret, pubkey, key);\n+            keys[pubkey.GetID()] = key;\n+        }\n+        return keys;\n+    }\n+    return m_map_keys;\n+}\n+\n bool DescriptorScriptPubKeyMan::TopUp(unsigned int size)\n {\n-    return false;\n+    LOCK(cs_desc_man);\n+    unsigned int target_size;\n+    if (size > 0)\n+        target_size = size;\n+    else\n+        target_size = std::max(gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 0);",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 29,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "915da4fababc4237e99823cf32399fe02646c061",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "just make the second argument `1`, then delete the line below?",
      "created_at": "2020-03-25T14:36:48Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r397904496",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/397904496"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1559,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/397906438",
      "pull_request_review_id": 378766395,
      "id": 397906438,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkwNjQzOA==",
      "diff_hunk": "@@ -1532,9 +1532,99 @@ void DescriptorScriptPubKeyMan::ReturnDestination(int64_t index, bool internal,\n {\n }\n \n+std::map<CKeyID, CKey> DescriptorScriptPubKeyMan::GetKeys() const\n+{\n+    AssertLockHeld(cs_desc_man);\n+    if (m_storage.HasEncryptionKeys() && !m_storage.IsLocked()) {\n+        KeyMap keys;\n+        for (auto key_pair : m_map_crypted_keys) {\n+            const CPubKey& pubkey = key_pair.second.first;\n+            const std::vector<unsigned char>& crypted_secret = key_pair.second.second;\n+            CKey key;\n+            DecryptKey(m_storage.GetEncryptionKey(), crypted_secret, pubkey, key);\n+            keys[pubkey.GetID()] = key;\n+        }\n+        return keys;\n+    }\n+    return m_map_keys;\n+}\n+\n bool DescriptorScriptPubKeyMan::TopUp(unsigned int size)\n {\n-    return false;\n+    LOCK(cs_desc_man);\n+    unsigned int target_size;\n+    if (size > 0)\n+        target_size = size;\n+    else\n+        target_size = std::max(gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 0);\n+    target_size = std::max((int32_t)target_size, 1);\n+\n+    // Calculate the new range_end\n+    int32_t new_range_end = std::max(descriptor.next_index + (int32_t)target_size, descriptor.range_end);",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 33,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "915da4fababc4237e99823cf32399fe02646c061",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "is it important to not set `descriptor.range_end` here?",
      "created_at": "2020-03-25T14:39:13Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r397906438",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/397906438"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1563,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/397917366",
      "pull_request_review_id": 378766395,
      "id": 397917366,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkxNzM2Ng==",
      "diff_hunk": "@@ -1532,9 +1532,99 @@ void DescriptorScriptPubKeyMan::ReturnDestination(int64_t index, bool internal,\n {\n }\n \n+std::map<CKeyID, CKey> DescriptorScriptPubKeyMan::GetKeys() const\n+{\n+    AssertLockHeld(cs_desc_man);\n+    if (m_storage.HasEncryptionKeys() && !m_storage.IsLocked()) {\n+        KeyMap keys;\n+        for (auto key_pair : m_map_crypted_keys) {\n+            const CPubKey& pubkey = key_pair.second.first;\n+            const std::vector<unsigned char>& crypted_secret = key_pair.second.second;\n+            CKey key;\n+            DecryptKey(m_storage.GetEncryptionKey(), crypted_secret, pubkey, key);\n+            keys[pubkey.GetID()] = key;\n+        }\n+        return keys;\n+    }\n+    return m_map_keys;\n+}\n+\n bool DescriptorScriptPubKeyMan::TopUp(unsigned int size)\n {\n-    return false;\n+    LOCK(cs_desc_man);\n+    unsigned int target_size;\n+    if (size > 0)\n+        target_size = size;\n+    else\n+        target_size = std::max(gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 0);\n+    target_size = std::max((int32_t)target_size, 1);\n+\n+    // Calculate the new range_end\n+    int32_t new_range_end = std::max(descriptor.next_index + (int32_t)target_size, descriptor.range_end);\n+\n+    // If the descriptor is not ranged, we actually just want to fill the first cache item\n+    if (!descriptor.descriptor->IsRange()) {\n+        new_range_end = 1;\n+        descriptor.range_end = 1;\n+        descriptor.range_start = 0;\n+    }\n+\n+    FlatSigningProvider provider;\n+    provider.keys = GetKeys();\n+\n+    WalletBatch batch(m_storage.GetDatabase());\n+    uint256 id = GetID();\n+    for (int32_t i = m_max_cached_index + 1; i < new_range_end; ++i) {\n+        FlatSigningProvider out_keys;\n+        std::vector<CScript> scripts_temp;\n+        DescriptorCache cache;",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 50,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "915da4fababc4237e99823cf32399fe02646c061",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "suggested rename to `temp_cache` or something to make it visually easier to track what's what",
      "created_at": "2020-03-25T14:52:45Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r397917366",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/397917366"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1580,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398001581",
      "pull_request_review_id": 381331258,
      "id": 398001581,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAwMTU4MQ==",
      "diff_hunk": "@@ -1632,3 +1632,18 @@ void DescriptorScriptPubKeyMan::SetType(OutputType type, bool internal)\n     this->address_type = type;\n     this->internal = internal;\n }\n+\n+void DescriptorScriptPubKeyMan::SetCache(const DescriptorCache& cache)\n+{\n+    LOCK(cs_desc_man);\n+    descriptor.cache = cache;\n+    for (int32_t i = descriptor.range_start; i < descriptor.range_end; ++i) {\n+        FlatSigningProvider out_keys;\n+        std::vector<CScript> scripts_temp;\n+        descriptor.descriptor->ExpandFromCache(i, descriptor.cache, scripts_temp, out_keys);\n+        // Add all of the scriptPubKeys to the scriptPubKey set",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 626,
      "original_position": 13,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "4a0b2986f4716a177ea4e221c846a4bdb47f9317",
      "in_reply_to_id": 397840687,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Just `combo` which can be imported. `TopUp` is called for all imports to generate the scriptPubKeys, scripts, etc.",
      "created_at": "2020-03-25T16:39:01Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r398001581",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398001581"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2096,
      "original_line": 2096,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398099420",
      "pull_request_review_id": 381450923,
      "id": 398099420,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA5OTQyMA==",
      "diff_hunk": "@@ -1560,12 +1560,14 @@ bool DescriptorScriptPubKeyMan::IsHDEnabled() const\n \n bool DescriptorScriptPubKeyMan::CanGetAddresses(bool internal) const\n {\n-    return false;\n+    LOCK(cs_desc_man);\n+    return HavePrivateKeys() || descriptor.next_index < descriptor.range_end;",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 6,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "d117cb1078f8a3c10a717ed642af00ab62643853",
      "in_reply_to_id": 397859895,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It isn't. `CanGetAddresses` should return false for non-ranged descriptors because you cannot get new addresses from such a descriptor. `HavePrivateKeys` here is for when the cache runs on hardened derivation. If we have private keys, then we can continue to derive those hardened keys.",
      "created_at": "2020-03-25T19:02:13Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r398099420",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398099420"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1564,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398101876",
      "pull_request_review_id": 381453951,
      "id": 398101876,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODEwMTg3Ng==",
      "diff_hunk": "@@ -1532,9 +1532,99 @@ void DescriptorScriptPubKeyMan::ReturnDestination(int64_t index, bool internal,\n {\n }\n \n+std::map<CKeyID, CKey> DescriptorScriptPubKeyMan::GetKeys() const\n+{\n+    AssertLockHeld(cs_desc_man);\n+    if (m_storage.HasEncryptionKeys() && !m_storage.IsLocked()) {\n+        KeyMap keys;\n+        for (auto key_pair : m_map_crypted_keys) {\n+            const CPubKey& pubkey = key_pair.second.first;\n+            const std::vector<unsigned char>& crypted_secret = key_pair.second.second;\n+            CKey key;\n+            DecryptKey(m_storage.GetEncryptionKey(), crypted_secret, pubkey, key);\n+            keys[pubkey.GetID()] = key;\n+        }\n+        return keys;\n+    }\n+    return m_map_keys;\n+}\n+\n bool DescriptorScriptPubKeyMan::TopUp(unsigned int size)\n {\n-    return false;\n+    LOCK(cs_desc_man);\n+    unsigned int target_size;\n+    if (size > 0)\n+        target_size = size;\n+    else\n+        target_size = std::max(gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 0);\n+    target_size = std::max((int32_t)target_size, 1);\n+\n+    // Calculate the new range_end\n+    int32_t new_range_end = std::max(descriptor.next_index + (int32_t)target_size, descriptor.range_end);",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 33,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "915da4fababc4237e99823cf32399fe02646c061",
      "in_reply_to_id": 397906438,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In case we exit early, we don't want to update the descriptor.",
      "created_at": "2020-03-25T19:06:30Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r398101876",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398101876"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1563,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398149580",
      "pull_request_review_id": 381512515,
      "id": 398149580,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE0OTU4MA==",
      "diff_hunk": "@@ -484,8 +484,17 @@ class LegacySigningProvider : public SigningProvider\n \n class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n {\n+private:\n+    WalletDescriptor descriptor GUARDED_BY(cs_desc_man);",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": null,
      "original_position": 5,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "10d744735666fb6e9e1dbe44a2112434daebfee9",
      "in_reply_to_id": 395854864,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-03-25T20:31:25Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r398149580",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398149580"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 488,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398149628",
      "pull_request_review_id": 381512576,
      "id": 398149628,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE0OTYyOA==",
      "diff_hunk": "@@ -189,6 +201,8 @@ class CWalletScanState {\n     bool fIsEncrypted{false};\n     bool fAnyUnordered{false};\n     std::vector<uint256> vWalletUpgrade;\n+    std::map<OutputType, uint256> m_external_spk_managers;\n+    std::map<OutputType, uint256> m_internal_spk_managers;",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 40,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "6fa9c482c51576c97b7e02a767d0b328dbbb52fc",
      "in_reply_to_id": 395867154,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-03-25T20:31:31Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r398149628",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398149628"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 247,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398149693",
      "pull_request_review_id": 381512635,
      "id": 398149693,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE0OTY5Mw==",
      "diff_hunk": "@@ -189,6 +201,8 @@ class CWalletScanState {\n     bool fIsEncrypted{false};\n     bool fAnyUnordered{false};\n     std::vector<uint256> vWalletUpgrade;\n+    std::map<OutputType, uint256> m_external_spk_managers;",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 39,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "6fa9c482c51576c97b7e02a767d0b328dbbb52fc",
      "in_reply_to_id": 395867365,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-03-25T20:31:36Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r398149693",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398149693"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 246,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398149738",
      "pull_request_review_id": 381512692,
      "id": 398149738,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE0OTczOA==",
      "diff_hunk": "@@ -60,8 +60,10 @@ extern const std::string CRYPTED_KEY;\n extern const std::string CSCRIPT;\n extern const std::string DEFAULTKEY;\n extern const std::string DESTDATA;\n+extern const std::string EXTERNALSPK;",
      "path": "src/wallet/walletdb.h",
      "position": null,
      "original_position": 4,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "6fa9c482c51576c97b7e02a767d0b328dbbb52fc",
      "in_reply_to_id": 395869627,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-03-25T20:31:41Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r398149738",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398149738"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 64,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398149790",
      "pull_request_review_id": 381512763,
      "id": 398149790,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE0OTc5MA==",
      "diff_hunk": "@@ -60,8 +60,10 @@ extern const std::string CRYPTED_KEY;\n extern const std::string CSCRIPT;\n extern const std::string DEFAULTKEY;\n extern const std::string DESTDATA;\n+extern const std::string EXTERNALSPK;\n extern const std::string FLAGS;\n extern const std::string HDCHAIN;\n+extern const std::string INTERNALSPK;",
      "path": "src/wallet/walletdb.h",
      "position": null,
      "original_position": 7,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "6fa9c482c51576c97b7e02a767d0b328dbbb52fc",
      "in_reply_to_id": 395869783,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-03-25T20:31:47Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r398149790",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398149790"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 67,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398149895",
      "pull_request_review_id": 381512881,
      "id": 398149895,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE0OTg5NQ==",
      "diff_hunk": "@@ -430,7 +432,33 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             ssKey >> id;\n             WalletDescriptor desc;\n             ssValue >> desc;\n+            wss.m_descriptor_caches[id] = DescriptorCache();",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 20,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "4a0b2986f4716a177ea4e221c846a4bdb47f9317",
      "in_reply_to_id": 397847371,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-03-25T20:31:58Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r398149895",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398149895"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 435,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398149942",
      "pull_request_review_id": 381512946,
      "id": 398149942,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE0OTk0Mg==",
      "diff_hunk": "@@ -1532,9 +1532,99 @@ void DescriptorScriptPubKeyMan::ReturnDestination(int64_t index, bool internal,\n {\n }\n \n+std::map<CKeyID, CKey> DescriptorScriptPubKeyMan::GetKeys() const\n+{\n+    AssertLockHeld(cs_desc_man);\n+    if (m_storage.HasEncryptionKeys() && !m_storage.IsLocked()) {\n+        KeyMap keys;\n+        for (auto key_pair : m_map_crypted_keys) {\n+            const CPubKey& pubkey = key_pair.second.first;\n+            const std::vector<unsigned char>& crypted_secret = key_pair.second.second;\n+            CKey key;\n+            DecryptKey(m_storage.GetEncryptionKey(), crypted_secret, pubkey, key);\n+            keys[pubkey.GetID()] = key;\n+        }\n+        return keys;\n+    }\n+    return m_map_keys;\n+}\n+\n bool DescriptorScriptPubKeyMan::TopUp(unsigned int size)\n {\n-    return false;\n+    LOCK(cs_desc_man);\n+    unsigned int target_size;\n+    if (size > 0)",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 26,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "915da4fababc4237e99823cf32399fe02646c061",
      "in_reply_to_id": 397903046,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-03-25T20:32:03Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r398149942",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398149942"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1556,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398149976",
      "pull_request_review_id": 381512990,
      "id": 398149976,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE0OTk3Ng==",
      "diff_hunk": "@@ -1532,9 +1532,99 @@ void DescriptorScriptPubKeyMan::ReturnDestination(int64_t index, bool internal,\n {\n }\n \n+std::map<CKeyID, CKey> DescriptorScriptPubKeyMan::GetKeys() const\n+{\n+    AssertLockHeld(cs_desc_man);\n+    if (m_storage.HasEncryptionKeys() && !m_storage.IsLocked()) {\n+        KeyMap keys;\n+        for (auto key_pair : m_map_crypted_keys) {\n+            const CPubKey& pubkey = key_pair.second.first;\n+            const std::vector<unsigned char>& crypted_secret = key_pair.second.second;\n+            CKey key;\n+            DecryptKey(m_storage.GetEncryptionKey(), crypted_secret, pubkey, key);\n+            keys[pubkey.GetID()] = key;\n+        }\n+        return keys;\n+    }\n+    return m_map_keys;\n+}\n+\n bool DescriptorScriptPubKeyMan::TopUp(unsigned int size)\n {\n-    return false;\n+    LOCK(cs_desc_man);\n+    unsigned int target_size;\n+    if (size > 0)\n+        target_size = size;\n+    else\n+        target_size = std::max(gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 0);",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 29,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "915da4fababc4237e99823cf32399fe02646c061",
      "in_reply_to_id": 397904496,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-03-25T20:32:07Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r398149976",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398149976"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1559,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398150104",
      "pull_request_review_id": 381513140,
      "id": 398150104,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE1MDEwNA==",
      "diff_hunk": "@@ -1532,9 +1532,99 @@ void DescriptorScriptPubKeyMan::ReturnDestination(int64_t index, bool internal,\n {\n }\n \n+std::map<CKeyID, CKey> DescriptorScriptPubKeyMan::GetKeys() const\n+{\n+    AssertLockHeld(cs_desc_man);\n+    if (m_storage.HasEncryptionKeys() && !m_storage.IsLocked()) {\n+        KeyMap keys;\n+        for (auto key_pair : m_map_crypted_keys) {\n+            const CPubKey& pubkey = key_pair.second.first;\n+            const std::vector<unsigned char>& crypted_secret = key_pair.second.second;\n+            CKey key;\n+            DecryptKey(m_storage.GetEncryptionKey(), crypted_secret, pubkey, key);\n+            keys[pubkey.GetID()] = key;\n+        }\n+        return keys;\n+    }\n+    return m_map_keys;\n+}\n+\n bool DescriptorScriptPubKeyMan::TopUp(unsigned int size)\n {\n-    return false;\n+    LOCK(cs_desc_man);\n+    unsigned int target_size;\n+    if (size > 0)\n+        target_size = size;\n+    else\n+        target_size = std::max(gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 0);\n+    target_size = std::max((int32_t)target_size, 1);\n+\n+    // Calculate the new range_end\n+    int32_t new_range_end = std::max(descriptor.next_index + (int32_t)target_size, descriptor.range_end);\n+\n+    // If the descriptor is not ranged, we actually just want to fill the first cache item\n+    if (!descriptor.descriptor->IsRange()) {\n+        new_range_end = 1;\n+        descriptor.range_end = 1;\n+        descriptor.range_start = 0;\n+    }\n+\n+    FlatSigningProvider provider;\n+    provider.keys = GetKeys();\n+\n+    WalletBatch batch(m_storage.GetDatabase());\n+    uint256 id = GetID();\n+    for (int32_t i = m_max_cached_index + 1; i < new_range_end; ++i) {\n+        FlatSigningProvider out_keys;\n+        std::vector<CScript> scripts_temp;\n+        DescriptorCache cache;",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 50,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "915da4fababc4237e99823cf32399fe02646c061",
      "in_reply_to_id": 397917366,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-03-25T20:32:20Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r398150104",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398150104"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1580,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398158910",
      "pull_request_review_id": 381523879,
      "id": 398158910,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE1ODkxMA==",
      "diff_hunk": "@@ -532,6 +560,12 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\n         pwallet->SetActiveScriptPubKeyMan(spk_man_pair.second, spk_man_pair.first, /* internal */ true, /* memonly */ true);\n     }\n \n+    // Set the descriptor caches\n+    for (auto desc_cache_pair : wss.m_descriptor_caches) {\n+        auto spk_man = pwallet->GetScriptPubKeyMan(desc_cache_pair.first);",
      "path": "src/wallet/walletdb.cpp",
      "position": 207,
      "original_position": 56,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "4a0b2986f4716a177ea4e221c846a4bdb47f9317",
      "in_reply_to_id": 397846119,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-03-25T20:47:51Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r398158910",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398158910"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 668,
      "original_line": 668,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398159024",
      "pull_request_review_id": 381524033,
      "id": 398159024,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE1OTAyNA==",
      "diff_hunk": "@@ -402,6 +416,21 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n         } else if (strType == DBKeys::OLD_KEY) {\n             strErr = \"Found unsupported 'wkey' record, try loading with version 0.18\";\n             return false;\n+        } else if (strType == DBKeys::EXTERNALSPK || strType == DBKeys::INTERNALSPK) {\n+            uint8_t type;\n+            ssKey >> type;\n+            uint256 id;\n+            ssValue >> id;\n+\n+            bool internal = strType == DBKeys::INTERNALSPK;\n+            auto& spk_mans = internal ? wss.m_internal_spk_managers : wss.m_external_spk_managers;\n+            spk_mans[static_cast<OutputType>(type)] = id;",
      "path": "src/wallet/walletdb.cpp",
      "position": 100,
      "original_position": 56,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "6fa9c482c51576c97b7e02a767d0b328dbbb52fc",
      "in_reply_to_id": 395867702,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added a check that will give an error.",
      "created_at": "2020-03-25T20:48:04Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r398159024",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398159024"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 475,
      "original_line": 475,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398626518",
      "pull_request_review_id": 382077357,
      "id": 398626518,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODYyNjUxOA==",
      "diff_hunk": "@@ -1560,12 +1560,14 @@ bool DescriptorScriptPubKeyMan::IsHDEnabled() const\n \n bool DescriptorScriptPubKeyMan::CanGetAddresses(bool internal) const\n {\n-    return false;\n+    LOCK(cs_desc_man);\n+    return HavePrivateKeys() || descriptor.next_index < descriptor.range_end;",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 6,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "d117cb1078f8a3c10a717ed642af00ab62643853",
      "in_reply_to_id": 397859895,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> CanGetAddresses should return false for non-ranged descriptors because you cannot get new addresses from such a descriptor\r\n\r\nHm? If you import a non-ranged descriptor that includes a private key, `CanGetAddress` will return true here.\r\n\r\nWhatever the result of this discussion is, I think this code section requires a comment.",
      "created_at": "2020-03-26T14:41:45Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r398626518",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398626518"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1564,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398628815",
      "pull_request_review_id": 382080368,
      "id": 398628815,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODYyODgxNQ==",
      "diff_hunk": "@@ -1632,3 +1632,18 @@ void DescriptorScriptPubKeyMan::SetType(OutputType type, bool internal)\n     this->address_type = type;\n     this->internal = internal;\n }\n+\n+void DescriptorScriptPubKeyMan::SetCache(const DescriptorCache& cache)\n+{\n+    LOCK(cs_desc_man);\n+    descriptor.cache = cache;\n+    for (int32_t i = descriptor.range_start; i < descriptor.range_end; ++i) {\n+        FlatSigningProvider out_keys;\n+        std::vector<CScript> scripts_temp;\n+        descriptor.descriptor->ExpandFromCache(i, descriptor.cache, scripts_temp, out_keys);\n+        // Add all of the scriptPubKeys to the scriptPubKey set",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 626,
      "original_position": 13,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "4a0b2986f4716a177ea4e221c846a4bdb47f9317",
      "in_reply_to_id": 397840687,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ah right I got confused about `active` arg. In that case the `importdescriptors` help should be noting that `combo` cannot be active. The error is helpful enough but I think it warrants note.",
      "created_at": "2020-03-26T14:44:45Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r398628815",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398628815"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2096,
      "original_line": 2096,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398683481",
      "pull_request_review_id": 382149833,
      "id": 398683481,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY4MzQ4MQ==",
      "diff_hunk": "@@ -1560,12 +1560,14 @@ bool DescriptorScriptPubKeyMan::IsHDEnabled() const\n \n bool DescriptorScriptPubKeyMan::CanGetAddresses(bool internal) const\n {\n-    return false;\n+    LOCK(cs_desc_man);\n+    return HavePrivateKeys() || descriptor.next_index < descriptor.range_end;",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 6,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "d117cb1078f8a3c10a717ed642af00ab62643853",
      "in_reply_to_id": 397859895,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> But we may still be unable to get addresses, these conditions are caught later.\r\n\r\nfrom `GetNewDestination`. Might want to move that comment to where I'm asking and explain exactly what additional checks are required?",
      "created_at": "2020-03-26T15:52:41Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r398683481",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398683481"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1564,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398685369",
      "pull_request_review_id": 382152176,
      "id": 398685369,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY4NTM2OQ==",
      "diff_hunk": "@@ -477,4 +482,103 @@ class LegacySigningProvider : public SigningProvider\n     bool GetKeyOrigin(const CKeyID& keyid, KeyOriginInfo& info) const override { return m_spk_man.GetKeyOrigin(keyid, info); }\n };\n \n+class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n+{\n+private:\n+    WalletDescriptor m_wallet_descriptor GUARDED_BY(cs_desc_man);\n+\n+    using ScriptPubKeyMap = std::map<CScript, int32_t>; // Map of scripts to descriptor range index\n+    using CryptedKeyMap = std::map<CKeyID, std::pair<CPubKey, std::vector<unsigned char>>>;\n+    using KeyMap = std::map<CKeyID, CKey>;\n+\n+    ScriptPubKeyMap m_map_script_pub_keys GUARDED_BY(cs_desc_man);\n+    int32_t m_max_cached_index = -1;\n+\n+    OutputType address_type;",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": null,
      "original_position": 60,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "8da5fdc34ae68fe3ae81b9fc889f4f2a8718fc6e",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`m_address_type`",
      "created_at": "2020-03-26T15:55:00Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r398685369",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398685369"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 497,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398685506",
      "pull_request_review_id": 382152176,
      "id": 398685506,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY4NTUwNg==",
      "diff_hunk": "@@ -477,4 +482,103 @@ class LegacySigningProvider : public SigningProvider\n     bool GetKeyOrigin(const CKeyID& keyid, KeyOriginInfo& info) const override { return m_spk_man.GetKeyOrigin(keyid, info); }\n };\n \n+class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n+{\n+private:\n+    WalletDescriptor m_wallet_descriptor GUARDED_BY(cs_desc_man);\n+\n+    using ScriptPubKeyMap = std::map<CScript, int32_t>; // Map of scripts to descriptor range index\n+    using CryptedKeyMap = std::map<CKeyID, std::pair<CPubKey, std::vector<unsigned char>>>;\n+    using KeyMap = std::map<CKeyID, CKey>;\n+\n+    ScriptPubKeyMap m_map_script_pub_keys GUARDED_BY(cs_desc_man);\n+    int32_t m_max_cached_index = -1;\n+\n+    OutputType address_type;\n+    bool internal;",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": null,
      "original_position": 61,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "8da5fdc34ae68fe3ae81b9fc889f4f2a8718fc6e",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`m_internal`",
      "created_at": "2020-03-26T15:55:09Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r398685506",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398685506"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 498,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398687507",
      "pull_request_review_id": 382152176,
      "id": 398687507,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY4NzUwNw==",
      "diff_hunk": "@@ -1501,7 +1501,48 @@ void LegacyScriptPubKeyMan::SetType(OutputType type, bool internal) {}\n \n bool DescriptorScriptPubKeyMan::GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error)\n {\n-    return false;\n+    // Returns true if we have private keys (encrypted or not) or we have cached keys. But we may still be unable to get addresses, these conditions are caught later.\n+    if (!CanGetAddresses(internal)) {\n+        error = \"No addresses available\";\n+        return false;\n+    }\n+    {\n+        LOCK(cs_desc_man);\n+        if (m_wallet_descriptor.descriptor->IsSingleType() && type != address_type) {\n+            throw std::runtime_error(std::string(__func__) + \": Types are inconsistent\");\n+        }\n+\n+        TopUp();\n+\n+        // Get the scriptPubKey from the descriptor\n+        FlatSigningProvider out_keys;\n+        std::vector<CScript> scripts_temp;\n+        if (m_wallet_descriptor.range_end <= m_max_cached_index && !TopUp(1)) {\n+            // We can't generate anymore keys\n+            error = \"Error: Keypool ran out, please call keypoolrefill first\";\n+            return false;\n+        }\n+        if (!m_wallet_descriptor.descriptor->ExpandFromCache(m_wallet_descriptor.next_index, m_wallet_descriptor.cache, scripts_temp, out_keys)) {\n+            // We can't generate anymore keys\n+            error = \"Error: Keypool ran out, please call keypoolrefill first\";\n+            return false;\n+        }\n+\n+        if (m_wallet_descriptor.descriptor->IsSingleType()) {",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 32,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "0b4b742dd57b6413617368b013350b5397711f9f",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "just assert this at the top of the function?",
      "created_at": "2020-03-26T15:57:38Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r398687507",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398687507"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1531,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398688635",
      "pull_request_review_id": 382152176,
      "id": 398688635,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY4ODYzNQ==",
      "diff_hunk": "@@ -1501,7 +1501,48 @@ void LegacyScriptPubKeyMan::SetType(OutputType type, bool internal) {}\n \n bool DescriptorScriptPubKeyMan::GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error)\n {\n-    return false;\n+    // Returns true if we have private keys (encrypted or not) or we have cached keys. But we may still be unable to get addresses, these conditions are caught later.\n+    if (!CanGetAddresses(internal)) {\n+        error = \"No addresses available\";\n+        return false;\n+    }\n+    {\n+        LOCK(cs_desc_man);\n+        if (m_wallet_descriptor.descriptor->IsSingleType() && type != address_type) {",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 12,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "0b4b742dd57b6413617368b013350b5397711f9f",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "we should only be `SingleType`, right? Assert earlier and then just do simple type check?",
      "created_at": "2020-03-26T15:58:56Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r398688635",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398688635"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1511,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398697109",
      "pull_request_review_id": 382152176,
      "id": 398697109,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY5NzEwOQ==",
      "diff_hunk": "@@ -83,4 +87,38 @@ class WalletLocation final\n     bool Exists() const;\n };\n \n+/** Descriptor with some wallet metadata */\n+class WalletDescriptor\n+{\n+public:\n+    std::shared_ptr<Descriptor> descriptor;\n+    uint64_t creation_time;\n+    int32_t range_start; // First item in range; start of range, inclusive, i.e. [range_start, range_end)",
      "path": "src/wallet/walletutil.h",
      "position": null,
      "original_position": 28,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "8da5fdc34ae68fe3ae81b9fc889f4f2a8718fc6e",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Note if and when this value can change",
      "created_at": "2020-03-26T16:10:01Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r398697109",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398697109"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 96,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398697256",
      "pull_request_review_id": 382152176,
      "id": 398697256,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY5NzI1Ng==",
      "diff_hunk": "@@ -83,4 +87,38 @@ class WalletLocation final\n     bool Exists() const;\n };\n \n+/** Descriptor with some wallet metadata */\n+class WalletDescriptor\n+{\n+public:\n+    std::shared_ptr<Descriptor> descriptor;\n+    uint64_t creation_time;\n+    int32_t range_start; // First item in range; start of range, inclusive, i.e. [range_start, range_end)\n+    int32_t range_end; // Item after the last; end of range, exclusive, i.e. [range_start, range_end)",
      "path": "src/wallet/walletutil.h",
      "position": null,
      "original_position": 29,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "8da5fdc34ae68fe3ae81b9fc889f4f2a8718fc6e",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Note if and when this value is set and can change e.g., `TopUp`?",
      "created_at": "2020-03-26T16:10:13Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r398697256",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398697256"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 97,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398709651",
      "pull_request_review_id": 382152176,
      "id": 398709651,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODcwOTY1MQ==",
      "diff_hunk": "@@ -1501,7 +1501,48 @@ void LegacyScriptPubKeyMan::SetType(OutputType type, bool internal) {}\n \n bool DescriptorScriptPubKeyMan::GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error)\n {\n-    return false;\n+    // Returns true if we have private keys (encrypted or not) or we have cached keys. But we may still be unable to get addresses, these conditions are caught later.\n+    if (!CanGetAddresses(internal)) {\n+        error = \"No addresses available\";\n+        return false;\n+    }\n+    {\n+        LOCK(cs_desc_man);\n+        if (m_wallet_descriptor.descriptor->IsSingleType() && type != address_type) {\n+            throw std::runtime_error(std::string(__func__) + \": Types are inconsistent\");\n+        }\n+\n+        TopUp();\n+\n+        // Get the scriptPubKey from the descriptor\n+        FlatSigningProvider out_keys;\n+        std::vector<CScript> scripts_temp;\n+        if (m_wallet_descriptor.range_end <= m_max_cached_index && !TopUp(1)) {",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 52,
      "original_position": 21,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "0b4b742dd57b6413617368b013350b5397711f9f",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Can you explain why we do a `TopUp(1)` here then a few lines later do the `ExpandFromCache`?",
      "created_at": "2020-03-26T16:25:34Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r398709651",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398709651"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1522,
      "original_line": 1522,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398735707",
      "pull_request_review_id": 382152176,
      "id": 398735707,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODczNTcwNw==",
      "diff_hunk": "@@ -1946,9 +1946,60 @@ SigningResult DescriptorScriptPubKeyMan::SignMessage(const std::string& message,\n     return SigningResult::OK;\n }\n \n-TransactionError DescriptorScriptPubKeyMan::FillPSBT(PartiallySignedTransaction& psbt, int sighash_type, bool sign, bool bip32derivs) const\n+TransactionError DescriptorScriptPubKeyMan::FillPSBT(PartiallySignedTransaction& psbtx, int sighash_type, bool sign, bool bip32derivs) const",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 516,
      "original_position": 5,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "40960f93162b84507095529a522afb7350752344",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "future work: looks like a lot of duplicated code with a couple differences from legacy.",
      "created_at": "2020-03-26T16:59:18Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r398735707",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398735707"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1986,
      "original_line": 1986,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398739746",
      "pull_request_review_id": 382152176,
      "id": 398739746,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODczOTc0Ng==",
      "diff_hunk": "@@ -1220,6 +1220,9 @@ class CWallet final : public WalletStorage, private interfaces::Chain::Notificat\n \n     //! Sets the active ScriptPubKeyMan for the specified type and internal\n     void SetActiveScriptPubKeyMan(uint256 id, OutputType type, bool internal, bool memonly = false);\n+\n+    //! Create new DescriptoScriptPubKeyMans and add them to the wallet",
      "path": "src/wallet/wallet.h",
      "position": null,
      "original_position": 5,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "339cc0e6b78b0d8601c8bd64d9ea470ae9d0fa22",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Descriptor*",
      "created_at": "2020-03-26T17:04:53Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r398739746",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398739746"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1227,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398781243",
      "pull_request_review_id": 382272209,
      "id": 398781243,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc4MTI0Mw==",
      "diff_hunk": "@@ -1560,12 +1560,14 @@ bool DescriptorScriptPubKeyMan::IsHDEnabled() const\n \n bool DescriptorScriptPubKeyMan::CanGetAddresses(bool internal) const\n {\n-    return false;\n+    LOCK(cs_desc_man);\n+    return HavePrivateKeys() || descriptor.next_index < descriptor.range_end;",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 6,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "d117cb1078f8a3c10a717ed642af00ab62643853",
      "in_reply_to_id": 397859895,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I've tightened up the checks that `CanGetAddresses` does. It will do a `IsSingleType` and `IsRange` check now to disallow non-ranged descriptor and combo descriptors.",
      "created_at": "2020-03-26T18:02:46Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r398781243",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398781243"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1564,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398781422",
      "pull_request_review_id": 382272397,
      "id": 398781422,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc4MTQyMg==",
      "diff_hunk": "@@ -477,4 +482,103 @@ class LegacySigningProvider : public SigningProvider\n     bool GetKeyOrigin(const CKeyID& keyid, KeyOriginInfo& info) const override { return m_spk_man.GetKeyOrigin(keyid, info); }\n };\n \n+class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n+{\n+private:\n+    WalletDescriptor m_wallet_descriptor GUARDED_BY(cs_desc_man);\n+\n+    using ScriptPubKeyMap = std::map<CScript, int32_t>; // Map of scripts to descriptor range index\n+    using CryptedKeyMap = std::map<CKeyID, std::pair<CPubKey, std::vector<unsigned char>>>;\n+    using KeyMap = std::map<CKeyID, CKey>;\n+\n+    ScriptPubKeyMap m_map_script_pub_keys GUARDED_BY(cs_desc_man);\n+    int32_t m_max_cached_index = -1;\n+\n+    OutputType address_type;",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": null,
      "original_position": 60,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "8da5fdc34ae68fe3ae81b9fc889f4f2a8718fc6e",
      "in_reply_to_id": 398685369,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-03-26T18:03:01Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r398781422",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398781422"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 497,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398781493",
      "pull_request_review_id": 382272484,
      "id": 398781493,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc4MTQ5Mw==",
      "diff_hunk": "@@ -477,4 +482,103 @@ class LegacySigningProvider : public SigningProvider\n     bool GetKeyOrigin(const CKeyID& keyid, KeyOriginInfo& info) const override { return m_spk_man.GetKeyOrigin(keyid, info); }\n };\n \n+class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n+{\n+private:\n+    WalletDescriptor m_wallet_descriptor GUARDED_BY(cs_desc_man);\n+\n+    using ScriptPubKeyMap = std::map<CScript, int32_t>; // Map of scripts to descriptor range index\n+    using CryptedKeyMap = std::map<CKeyID, std::pair<CPubKey, std::vector<unsigned char>>>;\n+    using KeyMap = std::map<CKeyID, CKey>;\n+\n+    ScriptPubKeyMap m_map_script_pub_keys GUARDED_BY(cs_desc_man);\n+    int32_t m_max_cached_index = -1;\n+\n+    OutputType address_type;\n+    bool internal;",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": null,
      "original_position": 61,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "8da5fdc34ae68fe3ae81b9fc889f4f2a8718fc6e",
      "in_reply_to_id": 398685506,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-03-26T18:03:07Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r398781493",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398781493"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 498,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398781557",
      "pull_request_review_id": 382272560,
      "id": 398781557,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc4MTU1Nw==",
      "diff_hunk": "@@ -1501,7 +1501,48 @@ void LegacyScriptPubKeyMan::SetType(OutputType type, bool internal) {}\n \n bool DescriptorScriptPubKeyMan::GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error)\n {\n-    return false;\n+    // Returns true if we have private keys (encrypted or not) or we have cached keys. But we may still be unable to get addresses, these conditions are caught later.\n+    if (!CanGetAddresses(internal)) {\n+        error = \"No addresses available\";\n+        return false;\n+    }\n+    {\n+        LOCK(cs_desc_man);\n+        if (m_wallet_descriptor.descriptor->IsSingleType() && type != address_type) {\n+            throw std::runtime_error(std::string(__func__) + \": Types are inconsistent\");\n+        }\n+\n+        TopUp();\n+\n+        // Get the scriptPubKey from the descriptor\n+        FlatSigningProvider out_keys;\n+        std::vector<CScript> scripts_temp;\n+        if (m_wallet_descriptor.range_end <= m_max_cached_index && !TopUp(1)) {\n+            // We can't generate anymore keys\n+            error = \"Error: Keypool ran out, please call keypoolrefill first\";\n+            return false;\n+        }\n+        if (!m_wallet_descriptor.descriptor->ExpandFromCache(m_wallet_descriptor.next_index, m_wallet_descriptor.cache, scripts_temp, out_keys)) {\n+            // We can't generate anymore keys\n+            error = \"Error: Keypool ran out, please call keypoolrefill first\";\n+            return false;\n+        }\n+\n+        if (m_wallet_descriptor.descriptor->IsSingleType()) {",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 32,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "0b4b742dd57b6413617368b013350b5397711f9f",
      "in_reply_to_id": 398687507,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-03-26T18:03:12Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r398781557",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398781557"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1531,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398782728",
      "pull_request_review_id": 382274801,
      "id": 398782728,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc4MjcyOA==",
      "diff_hunk": "@@ -1501,7 +1501,48 @@ void LegacyScriptPubKeyMan::SetType(OutputType type, bool internal) {}\n \n bool DescriptorScriptPubKeyMan::GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error)\n {\n-    return false;\n+    // Returns true if we have private keys (encrypted or not) or we have cached keys. But we may still be unable to get addresses, these conditions are caught later.\n+    if (!CanGetAddresses(internal)) {\n+        error = \"No addresses available\";\n+        return false;\n+    }\n+    {\n+        LOCK(cs_desc_man);\n+        if (m_wallet_descriptor.descriptor->IsSingleType() && type != address_type) {",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 12,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "0b4b742dd57b6413617368b013350b5397711f9f",
      "in_reply_to_id": 398688635,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-03-26T18:05:02Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r398782728",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398782728"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1511,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398782796",
      "pull_request_review_id": 382275011,
      "id": 398782796,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc4Mjc5Ng==",
      "diff_hunk": "@@ -83,4 +87,38 @@ class WalletLocation final\n     bool Exists() const;\n };\n \n+/** Descriptor with some wallet metadata */\n+class WalletDescriptor\n+{\n+public:\n+    std::shared_ptr<Descriptor> descriptor;\n+    uint64_t creation_time;\n+    int32_t range_start; // First item in range; start of range, inclusive, i.e. [range_start, range_end)",
      "path": "src/wallet/walletutil.h",
      "position": null,
      "original_position": 28,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "8da5fdc34ae68fe3ae81b9fc889f4f2a8718fc6e",
      "in_reply_to_id": 398697109,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-03-26T18:05:08Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r398782796",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398782796"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 96,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398782851",
      "pull_request_review_id": 382275189,
      "id": 398782851,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc4Mjg1MQ==",
      "diff_hunk": "@@ -83,4 +87,38 @@ class WalletLocation final\n     bool Exists() const;\n };\n \n+/** Descriptor with some wallet metadata */\n+class WalletDescriptor\n+{\n+public:\n+    std::shared_ptr<Descriptor> descriptor;\n+    uint64_t creation_time;\n+    int32_t range_start; // First item in range; start of range, inclusive, i.e. [range_start, range_end)\n+    int32_t range_end; // Item after the last; end of range, exclusive, i.e. [range_start, range_end)",
      "path": "src/wallet/walletutil.h",
      "position": null,
      "original_position": 29,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "8da5fdc34ae68fe3ae81b9fc889f4f2a8718fc6e",
      "in_reply_to_id": 398697256,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-03-26T18:05:13Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r398782851",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398782851"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 97,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398785993",
      "pull_request_review_id": 382279330,
      "id": 398785993,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc4NTk5Mw==",
      "diff_hunk": "@@ -1501,7 +1501,48 @@ void LegacyScriptPubKeyMan::SetType(OutputType type, bool internal) {}\n \n bool DescriptorScriptPubKeyMan::GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error)\n {\n-    return false;\n+    // Returns true if we have private keys (encrypted or not) or we have cached keys. But we may still be unable to get addresses, these conditions are caught later.\n+    if (!CanGetAddresses(internal)) {\n+        error = \"No addresses available\";\n+        return false;\n+    }\n+    {\n+        LOCK(cs_desc_man);\n+        if (m_wallet_descriptor.descriptor->IsSingleType() && type != address_type) {\n+            throw std::runtime_error(std::string(__func__) + \": Types are inconsistent\");\n+        }\n+\n+        TopUp();\n+\n+        // Get the scriptPubKey from the descriptor\n+        FlatSigningProvider out_keys;\n+        std::vector<CScript> scripts_temp;\n+        if (m_wallet_descriptor.range_end <= m_max_cached_index && !TopUp(1)) {",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 52,
      "original_position": 21,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "0b4b742dd57b6413617368b013350b5397711f9f",
      "in_reply_to_id": 398709651,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`TopUp(1)` generates the next cache item if we have run out of cached things. `ExpandFromCache` can then use that cached thing. Otherwise `TopUp(1)` is a no-op.",
      "created_at": "2020-03-26T18:08:27Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r398785993",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398785993"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1522,
      "original_line": 1522,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398786114",
      "pull_request_review_id": 382279449,
      "id": 398786114,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc4NjExNA==",
      "diff_hunk": "@@ -1220,6 +1220,9 @@ class CWallet final : public WalletStorage, private interfaces::Chain::Notificat\n \n     //! Sets the active ScriptPubKeyMan for the specified type and internal\n     void SetActiveScriptPubKeyMan(uint256 id, OutputType type, bool internal, bool memonly = false);\n+\n+    //! Create new DescriptoScriptPubKeyMans and add them to the wallet",
      "path": "src/wallet/wallet.h",
      "position": null,
      "original_position": 5,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "339cc0e6b78b0d8601c8bd64d9ea470ae9d0fa22",
      "in_reply_to_id": 398739746,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed",
      "created_at": "2020-03-26T18:08:36Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r398786114",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398786114"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1227,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399276875",
      "pull_request_review_id": 382872546,
      "id": 399276875,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI3Njg3NQ==",
      "diff_hunk": "@@ -1226,6 +1226,12 @@ class CWallet final : public WalletStorage, private interfaces::Chain::Notificat\n \n     //! Create new DescriptorScriptPubKeyMans and add them to the wallet\n     void SetupDescriptorScriptPubKeyMans();\n+\n+    //! Check if the wallet already has a descriptor\n+    DescriptorScriptPubKeyMan* HasWalletDescriptor(const WalletDescriptor& desc) const;",
      "path": "src/wallet/wallet.h",
      "position": null,
      "original_position": 6,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "7d1c6bbeb057c18da62201267efc2b675f142da3",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "suggested rename: `GetWalletDescriptor`",
      "created_at": "2020-03-27T13:48:49Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399276875",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399276875"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1231,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399280484",
      "pull_request_review_id": 382872546,
      "id": 399280484,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI4MDQ4NA==",
      "diff_hunk": "@@ -4447,3 +4448,91 @@ bool CWallet::IsLegacy() const\n     auto spk_man = dynamic_cast<LegacyScriptPubKeyMan*>(m_internal_spk_managers.at(OutputType::LEGACY));\n     return spk_man != nullptr;\n }\n+\n+DescriptorScriptPubKeyMan* CWallet::HasWalletDescriptor(const WalletDescriptor& desc) const\n+{\n+    if (!IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 15,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "7d1c6bbeb057c18da62201267efc2b675f142da3",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in `add importdescriptors RPC and tests for native descriptor wallets`:\r\n\r\nnit: This little code block isn't really necessary. It'll fail to get non-null `spk_manager` for the single legacy spkm.",
      "created_at": "2020-03-27T13:54:16Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399280484",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399280484"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4454,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399281845",
      "pull_request_review_id": 382872546,
      "id": 399281845,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI4MTg0NQ==",
      "diff_hunk": "@@ -4447,3 +4448,91 @@ bool CWallet::IsLegacy() const\n     auto spk_man = dynamic_cast<LegacyScriptPubKeyMan*>(m_internal_spk_managers.at(OutputType::LEGACY));\n     return spk_man != nullptr;\n }\n+\n+DescriptorScriptPubKeyMan* CWallet::HasWalletDescriptor(const WalletDescriptor& desc) const\n+{\n+    if (!IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+        return nullptr;\n+    }\n+\n+    for (auto& spk_man_pair : m_spk_managers) {\n+        // Try to downcast to DescriptorScriptPubKeyMan then check if the descriptors match\n+        DescriptorScriptPubKeyMan* spk_manager = dynamic_cast<DescriptorScriptPubKeyMan*>(spk_man_pair.second.get());\n+        if (spk_manager != nullptr && spk_manager->HasWalletDescriptor(desc)) {\n+            return spk_manager;\n+        }\n+    }\n+\n+    return nullptr;\n+}\n+\n+ScriptPubKeyMan* CWallet::AddWalletDescriptor(WalletDescriptor& desc, const FlatSigningProvider& signing_provider, const std::string& label)\n+{\n+    if (!IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+        WalletLogPrintf(\"Cannot add WalletDescriptor to a non-descriptor wallet\\n\");\n+        return nullptr;\n+    }\n+\n+    LOCK(cs_wallet);\n+    auto spk_manager = std::unique_ptr<DescriptorScriptPubKeyMan>(new DescriptorScriptPubKeyMan(*this, desc));",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 38,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "7d1c6bbeb057c18da62201267efc2b675f142da3",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in `add importdescriptors RPC and tests for native descriptor wallets`:\r\n\r\n\r\n`s/spk_manager/new_spk_man` to line up name with `old_spk_man`",
      "created_at": "2020-03-27T13:56:15Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399281845",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399281845"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4477,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399288954",
      "pull_request_review_id": 382872546,
      "id": 399288954,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI4ODk1NA==",
      "diff_hunk": "@@ -4447,3 +4448,91 @@ bool CWallet::IsLegacy() const\n     auto spk_man = dynamic_cast<LegacyScriptPubKeyMan*>(m_internal_spk_managers.at(OutputType::LEGACY));\n     return spk_man != nullptr;\n }\n+\n+DescriptorScriptPubKeyMan* CWallet::HasWalletDescriptor(const WalletDescriptor& desc) const\n+{\n+    if (!IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+        return nullptr;\n+    }\n+\n+    for (auto& spk_man_pair : m_spk_managers) {\n+        // Try to downcast to DescriptorScriptPubKeyMan then check if the descriptors match\n+        DescriptorScriptPubKeyMan* spk_manager = dynamic_cast<DescriptorScriptPubKeyMan*>(spk_man_pair.second.get());\n+        if (spk_manager != nullptr && spk_manager->HasWalletDescriptor(desc)) {\n+            return spk_manager;\n+        }\n+    }\n+\n+    return nullptr;\n+}\n+\n+ScriptPubKeyMan* CWallet::AddWalletDescriptor(WalletDescriptor& desc, const FlatSigningProvider& signing_provider, const std::string& label)\n+{\n+    if (!IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+        WalletLogPrintf(\"Cannot add WalletDescriptor to a non-descriptor wallet\\n\");\n+        return nullptr;\n+    }\n+\n+    LOCK(cs_wallet);\n+    auto spk_manager = std::unique_ptr<DescriptorScriptPubKeyMan>(new DescriptorScriptPubKeyMan(*this, desc));\n+\n+    // If we already have this descriptor, remove it from the maps but add the existing cache to desc\n+    auto old_spk_man = HasWalletDescriptor(desc);\n+    if (old_spk_man) {\n+        WalletLogPrintf(\"Update existing descriptor: %s\\n\", desc.descriptor->ToString());\n+\n+        {\n+            LOCK(old_spk_man->cs_desc_man);\n+            spk_manager->SetCache(old_spk_man->GetWalletDescriptor().cache);\n+        }\n+\n+        // Remove from maps of spkMans\n+        for (bool internal : {false, true}) {\n+            for (OutputType t : OUTPUT_TYPES) {\n+                auto active_spk_man = GetScriptPubKeyMan(t, internal);",
      "path": "src/wallet/wallet.cpp",
      "position": 372,
      "original_position": 53,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "7d1c6bbeb057c18da62201267efc2b675f142da3",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Not this PR's fault, but this should really be named `GetActiveScriptPubKeyMan` even though the args make it implicit.",
      "created_at": "2020-03-27T14:06:39Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399288954",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399288954"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 4472,
      "original_line": 4472,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399290324",
      "pull_request_review_id": 382872546,
      "id": 399290324,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI5MDMyNA==",
      "diff_hunk": "@@ -4447,3 +4448,91 @@ bool CWallet::IsLegacy() const\n     auto spk_man = dynamic_cast<LegacyScriptPubKeyMan*>(m_internal_spk_managers.at(OutputType::LEGACY));\n     return spk_man != nullptr;\n }\n+\n+DescriptorScriptPubKeyMan* CWallet::HasWalletDescriptor(const WalletDescriptor& desc) const\n+{\n+    if (!IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+        return nullptr;\n+    }\n+\n+    for (auto& spk_man_pair : m_spk_managers) {\n+        // Try to downcast to DescriptorScriptPubKeyMan then check if the descriptors match\n+        DescriptorScriptPubKeyMan* spk_manager = dynamic_cast<DescriptorScriptPubKeyMan*>(spk_man_pair.second.get());\n+        if (spk_manager != nullptr && spk_manager->HasWalletDescriptor(desc)) {\n+            return spk_manager;\n+        }\n+    }\n+\n+    return nullptr;\n+}\n+\n+ScriptPubKeyMan* CWallet::AddWalletDescriptor(WalletDescriptor& desc, const FlatSigningProvider& signing_provider, const std::string& label)\n+{\n+    if (!IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+        WalletLogPrintf(\"Cannot add WalletDescriptor to a non-descriptor wallet\\n\");\n+        return nullptr;\n+    }\n+\n+    LOCK(cs_wallet);\n+    auto spk_manager = std::unique_ptr<DescriptorScriptPubKeyMan>(new DescriptorScriptPubKeyMan(*this, desc));\n+\n+    // If we already have this descriptor, remove it from the maps but add the existing cache to desc\n+    auto old_spk_man = HasWalletDescriptor(desc);\n+    if (old_spk_man) {\n+        WalletLogPrintf(\"Update existing descriptor: %s\\n\", desc.descriptor->ToString());\n+\n+        {\n+            LOCK(old_spk_man->cs_desc_man);\n+            spk_manager->SetCache(old_spk_man->GetWalletDescriptor().cache);\n+        }\n+\n+        // Remove from maps of spkMans\n+        for (bool internal : {false, true}) {\n+            for (OutputType t : OUTPUT_TYPES) {\n+                auto active_spk_man = GetScriptPubKeyMan(t, internal);",
      "path": "src/wallet/wallet.cpp",
      "position": 372,
      "original_position": 53,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "7d1c6bbeb057c18da62201267efc2b675f142da3",
      "in_reply_to_id": 399288954,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "another not-PR comment: `m_internal_spk_managers` and `m_external_spk_managers` should also be marked as active, at least in comments.",
      "created_at": "2020-03-27T14:08:37Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399290324",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399290324"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 4472,
      "original_line": 4472,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399292755",
      "pull_request_review_id": 382872546,
      "id": 399292755,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI5Mjc1NQ==",
      "diff_hunk": "@@ -4366,3 +4385,156 @@ void CWallet::ConnectScriptPubKeyManNotifiers()\n         spk_man->NotifyCanGetAddressesChanged.connect(NotifyCanGetAddressesChanged);\n     }\n }\n+\n+void CWallet::LoadDescriptorScriptPubKeyMan(uint256 id, WalletDescriptor& desc)\n+{\n+    auto spk_manager = std::unique_ptr<ScriptPubKeyMan>(new DescriptorScriptPubKeyMan(*this, desc));\n+    m_spk_managers[id] = std::move(spk_manager);\n+}\n+\n+void CWallet::SetupDescriptorScriptPubKeyMans()\n+{\n+    AssertLockHeld(cs_wallet);\n+\n+    // Make a seed\n+    CKey seed_key;\n+    seed_key.MakeNewKey(true);\n+    CPubKey seed = seed_key.GetPubKey();\n+    assert(seed_key.VerifyPubKey(seed));\n+\n+    // Get the extended key\n+    CExtKey master_key;\n+    master_key.SetSeed(seed_key.begin(), seed_key.size());\n+\n+    for (bool internal : {false, true}) {\n+        for (OutputType t : OUTPUT_TYPES) {\n+            auto spk_manager = std::unique_ptr<DescriptorScriptPubKeyMan>(new DescriptorScriptPubKeyMan(*this, t, internal));\n+            if (IsCrypted()) {\n+                if (IsLocked()) {\n+                    throw std::runtime_error(std::string(__func__) + \": Wallet is locked, cannot setup new descriptors\");\n+                }\n+                if (!spk_manager->CheckDecryptionKey(vMasterKey) && !spk_manager->Encrypt(vMasterKey, nullptr)) {\n+                    throw std::runtime_error(std::string(__func__) + \": Could not encrypt new descriptors\");\n+                }\n+            }\n+            spk_manager->SetupDescriptorGeneration(master_key);\n+            uint256 id = spk_manager->GetID();\n+            m_spk_managers[id] = std::move(spk_manager);\n+            SetActiveScriptPubKeyMan(id, t, internal);\n+        }\n+    }\n+}\n+\n+void CWallet::SetActiveScriptPubKeyMan(uint256 id, OutputType type, bool internal, bool memonly)\n+{\n+    WalletLogPrintf(\"Setting spkMan to active: id = %s, type = %d, internal = %d\\n\", id.ToString(), static_cast<int>(type), static_cast<int>(internal));\n+    auto& spk_mans = internal ? m_internal_spk_managers : m_external_spk_managers;\n+    auto spk_man = m_spk_managers.at(id).get();\n+    spk_man->SetType(type, internal);\n+    spk_mans[type] = spk_man;\n+\n+    if (!memonly) {\n+        WalletBatch batch(*database);\n+        if (!batch.WriteActiveScriptPubKeyMan(static_cast<uint8_t>(type), id, internal)) {\n+            throw std::runtime_error(std::string(__func__) + \": writing active ScriptPubKeyMan id failed\");\n+        }\n+    }\n+    NotifyCanGetAddressesChanged();\n+}\n+\n+bool CWallet::IsLegacy() const\n+{\n+    if (m_internal_spk_managers.count(OutputType::LEGACY) == 0) {\n+        return false;\n+    }\n+    auto spk_man = dynamic_cast<LegacyScriptPubKeyMan*>(m_internal_spk_managers.at(OutputType::LEGACY));\n+    return spk_man != nullptr;\n+}\n+\n+DescriptorScriptPubKeyMan* CWallet::HasWalletDescriptor(const WalletDescriptor& desc) const\n+{\n+    if (!IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+        return nullptr;\n+    }\n+\n+    for (auto& spk_man_pair : m_spk_managers) {\n+        // Try to downcast to DescriptorScriptPubKeyMan then check if the descriptors match\n+        DescriptorScriptPubKeyMan* spk_manager = dynamic_cast<DescriptorScriptPubKeyMan*>(spk_man_pair.second.get());\n+        if (spk_manager != nullptr && spk_manager->HasWalletDescriptor(desc)) {\n+            return spk_manager;\n+        }\n+    }\n+\n+    return nullptr;\n+}\n+\n+ScriptPubKeyMan* CWallet::AddWalletDescriptor(WalletDescriptor& desc, const FlatSigningProvider& signing_provider, const std::string& label)\n+{\n+    if (!IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+        WalletLogPrintf(\"Cannot add WalletDescriptor to a non-descriptor wallet\\n\");\n+        return nullptr;\n+    }\n+\n+    LOCK(cs_wallet);\n+    auto spk_manager = std::unique_ptr<DescriptorScriptPubKeyMan>(new DescriptorScriptPubKeyMan(*this, desc));\n+\n+    // If we already have this descriptor, remove it from the maps but add the existing cache to desc\n+    auto old_spk_man = HasWalletDescriptor(desc);\n+    if (old_spk_man) {\n+        WalletLogPrintf(\"Update existing descriptor: %s\\n\", desc.descriptor->ToString());\n+\n+        {\n+            LOCK(old_spk_man->cs_desc_man);\n+            spk_manager->SetCache(old_spk_man->GetWalletDescriptor().cache);\n+        }\n+\n+        // Remove from maps of spkMans",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 197,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "a03a8cbd1f42636834263135e904900cc808d346",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`of active spkMans`",
      "created_at": "2020-03-27T14:12:08Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399292755",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399292755"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4491,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399304091",
      "pull_request_review_id": 382872546,
      "id": 399304091,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMwNDA5MQ==",
      "diff_hunk": "@@ -1459,3 +1459,290 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n \n     return response;\n }\n+\n+static UniValue ProcessDescriptorImport(CWallet * const pwallet, const UniValue& data, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    UniValue warnings(UniValue::VARR);\n+    UniValue result(UniValue::VOBJ);\n+\n+    try {\n+        if (!data.exists(\"desc\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Descriptor not found.\");\n+        }\n+\n+        const std::string& descriptor = data[\"desc\"].get_str();\n+        const bool active = data.exists(\"active\") ? data[\"active\"].get_bool() : false;\n+        const bool internal = data.exists(\"internal\") ? data[\"internal\"].get_bool() : false;\n+        const std::string& label = data.exists(\"label\") ? data[\"label\"].get_str() : \"\";\n+\n+        // Parse descriptor string\n+        FlatSigningProvider keys;\n+        std::string error;\n+        auto parsed_desc = Parse(descriptor, keys, error, /* require_checksum = */ true);\n+        if (!parsed_desc) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, error);\n+        }\n+\n+        // Range check\n+        int64_t range_start = 0, range_end = 1, next_index = 0;\n+        if (!parsed_desc->IsRange() && data.exists(\"range\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Range should not be specified for an un-ranged descriptor\");\n+        } else if (parsed_desc->IsRange()) {\n+            if (data.exists(\"range\")) {\n+                auto range = ParseDescriptorRange(data[\"range\"]);\n+                range_start = range.first;\n+                range_end = range.second + 1; // Specified range end is inclusive, but we need range end as exclusive\n+            } else {\n+                warnings.push_back(\"Range not given, using default keypool range\");\n+                range_start = 0;\n+                range_end = gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE);\n+            }\n+            next_index = range_start;\n+\n+            if (data.exists(\"next_index\")) {\n+                next_index = data[\"next_index\"].get_int64();\n+                // bound checks\n+                if (next_index < range_start || next_index >= range_end) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"next_index is out of range\");\n+                }\n+            }\n+        }\n+\n+        // Active descriptor must be ranged",
      "path": "src/wallet/rpcdump.cpp",
      "position": null,
      "original_position": 53,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "7d1c6bbeb057c18da62201267efc2b675f142da3",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`add importdescriptors RPC and tests for native descriptor wallets`:\r\n\r\ns/Active descriptor/Active descriptors/",
      "created_at": "2020-03-27T14:28:04Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399304091",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399304091"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1511,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399321705",
      "pull_request_review_id": 382872546,
      "id": 399321705,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMyMTcwNQ==",
      "diff_hunk": "@@ -1459,3 +1459,290 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n \n     return response;\n }\n+\n+static UniValue ProcessDescriptorImport(CWallet * const pwallet, const UniValue& data, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    UniValue warnings(UniValue::VARR);\n+    UniValue result(UniValue::VOBJ);\n+\n+    try {\n+        if (!data.exists(\"desc\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Descriptor not found.\");\n+        }\n+\n+        const std::string& descriptor = data[\"desc\"].get_str();\n+        const bool active = data.exists(\"active\") ? data[\"active\"].get_bool() : false;\n+        const bool internal = data.exists(\"internal\") ? data[\"internal\"].get_bool() : false;\n+        const std::string& label = data.exists(\"label\") ? data[\"label\"].get_str() : \"\";\n+\n+        // Parse descriptor string\n+        FlatSigningProvider keys;\n+        std::string error;\n+        auto parsed_desc = Parse(descriptor, keys, error, /* require_checksum = */ true);\n+        if (!parsed_desc) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, error);\n+        }\n+\n+        // Range check\n+        int64_t range_start = 0, range_end = 1, next_index = 0;\n+        if (!parsed_desc->IsRange() && data.exists(\"range\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Range should not be specified for an un-ranged descriptor\");\n+        } else if (parsed_desc->IsRange()) {\n+            if (data.exists(\"range\")) {\n+                auto range = ParseDescriptorRange(data[\"range\"]);\n+                range_start = range.first;\n+                range_end = range.second + 1; // Specified range end is inclusive, but we need range end as exclusive\n+            } else {\n+                warnings.push_back(\"Range not given, using default keypool range\");\n+                range_start = 0;\n+                range_end = gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE);\n+            }\n+            next_index = range_start;\n+\n+            if (data.exists(\"next_index\")) {\n+                next_index = data[\"next_index\"].get_int64();\n+                // bound checks\n+                if (next_index < range_start || next_index >= range_end) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"next_index is out of range\");\n+                }\n+            }\n+        }\n+\n+        // Active descriptor must be ranged\n+        if (active && !parsed_desc->IsRange()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Active descriptor must be ranged\");\n+        }\n+\n+        // Ranged descriptors should not have a label\n+        if (data.exists(\"range\") && data.exists(\"label\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Ranged descriptors should not have a label\");",
      "path": "src/wallet/rpcdump.cpp",
      "position": 60,
      "original_position": 60,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "7d1c6bbeb057c18da62201267efc2b675f142da3",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`add importdescriptors RPC and tests for native descriptor wallets`:\r\n\r\nneeds test",
      "created_at": "2020-03-27T14:51:55Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399321705",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399321705"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1517,
      "original_line": 1517,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399322132",
      "pull_request_review_id": 382872546,
      "id": 399322132,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMyMjEzMg==",
      "diff_hunk": "@@ -1459,3 +1459,290 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n \n     return response;\n }\n+\n+static UniValue ProcessDescriptorImport(CWallet * const pwallet, const UniValue& data, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    UniValue warnings(UniValue::VARR);\n+    UniValue result(UniValue::VOBJ);\n+\n+    try {\n+        if (!data.exists(\"desc\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Descriptor not found.\");\n+        }\n+\n+        const std::string& descriptor = data[\"desc\"].get_str();\n+        const bool active = data.exists(\"active\") ? data[\"active\"].get_bool() : false;\n+        const bool internal = data.exists(\"internal\") ? data[\"internal\"].get_bool() : false;\n+        const std::string& label = data.exists(\"label\") ? data[\"label\"].get_str() : \"\";\n+\n+        // Parse descriptor string\n+        FlatSigningProvider keys;\n+        std::string error;\n+        auto parsed_desc = Parse(descriptor, keys, error, /* require_checksum = */ true);\n+        if (!parsed_desc) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, error);\n+        }\n+\n+        // Range check\n+        int64_t range_start = 0, range_end = 1, next_index = 0;\n+        if (!parsed_desc->IsRange() && data.exists(\"range\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Range should not be specified for an un-ranged descriptor\");\n+        } else if (parsed_desc->IsRange()) {\n+            if (data.exists(\"range\")) {\n+                auto range = ParseDescriptorRange(data[\"range\"]);\n+                range_start = range.first;\n+                range_end = range.second + 1; // Specified range end is inclusive, but we need range end as exclusive\n+            } else {\n+                warnings.push_back(\"Range not given, using default keypool range\");\n+                range_start = 0;\n+                range_end = gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE);\n+            }\n+            next_index = range_start;\n+\n+            if (data.exists(\"next_index\")) {\n+                next_index = data[\"next_index\"].get_int64();\n+                // bound checks\n+                if (next_index < range_start || next_index >= range_end) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"next_index is out of range\");\n+                }\n+            }\n+        }\n+\n+        // Active descriptor must be ranged\n+        if (active && !parsed_desc->IsRange()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Active descriptor must be ranged\");\n+        }\n+\n+        // Ranged descriptors should not have a label\n+        if (data.exists(\"range\") && data.exists(\"label\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Ranged descriptors should not have a label\");\n+        }\n+\n+        // Internal addresses should not have a label either\n+        if (internal && data.exists(\"label\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Internal addresses should not have a label\");",
      "path": "src/wallet/rpcdump.cpp",
      "position": 65,
      "original_position": 65,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "7d1c6bbeb057c18da62201267efc2b675f142da3",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`add importdescriptors RPC and tests for native descriptor wallets`\r\n\r\nneeds test",
      "created_at": "2020-03-27T14:52:31Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399322132",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399322132"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1522,
      "original_line": 1522,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399322281",
      "pull_request_review_id": 382872546,
      "id": 399322281,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMyMjI4MQ==",
      "diff_hunk": "@@ -1459,3 +1459,290 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n \n     return response;\n }\n+\n+static UniValue ProcessDescriptorImport(CWallet * const pwallet, const UniValue& data, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    UniValue warnings(UniValue::VARR);\n+    UniValue result(UniValue::VOBJ);\n+\n+    try {\n+        if (!data.exists(\"desc\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Descriptor not found.\");\n+        }\n+\n+        const std::string& descriptor = data[\"desc\"].get_str();\n+        const bool active = data.exists(\"active\") ? data[\"active\"].get_bool() : false;\n+        const bool internal = data.exists(\"internal\") ? data[\"internal\"].get_bool() : false;\n+        const std::string& label = data.exists(\"label\") ? data[\"label\"].get_str() : \"\";\n+\n+        // Parse descriptor string\n+        FlatSigningProvider keys;\n+        std::string error;\n+        auto parsed_desc = Parse(descriptor, keys, error, /* require_checksum = */ true);\n+        if (!parsed_desc) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, error);\n+        }\n+\n+        // Range check\n+        int64_t range_start = 0, range_end = 1, next_index = 0;\n+        if (!parsed_desc->IsRange() && data.exists(\"range\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Range should not be specified for an un-ranged descriptor\");\n+        } else if (parsed_desc->IsRange()) {\n+            if (data.exists(\"range\")) {\n+                auto range = ParseDescriptorRange(data[\"range\"]);\n+                range_start = range.first;\n+                range_end = range.second + 1; // Specified range end is inclusive, but we need range end as exclusive\n+            } else {\n+                warnings.push_back(\"Range not given, using default keypool range\");\n+                range_start = 0;\n+                range_end = gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE);\n+            }\n+            next_index = range_start;\n+\n+            if (data.exists(\"next_index\")) {\n+                next_index = data[\"next_index\"].get_int64();\n+                // bound checks\n+                if (next_index < range_start || next_index >= range_end) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"next_index is out of range\");\n+                }\n+            }\n+        }\n+\n+        // Active descriptor must be ranged\n+        if (active && !parsed_desc->IsRange()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Active descriptor must be ranged\");\n+        }\n+\n+        // Ranged descriptors should not have a label\n+        if (data.exists(\"range\") && data.exists(\"label\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Ranged descriptors should not have a label\");\n+        }\n+\n+        // Internal addresses should not have a label either\n+        if (internal && data.exists(\"label\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Internal addresses should not have a label\");\n+        }\n+\n+        // Combo descriptor check\n+        if (active && !parsed_desc->IsSingleType()) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Combo descriptors cannot be set to active\");",
      "path": "src/wallet/rpcdump.cpp",
      "position": 70,
      "original_position": 70,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "7d1c6bbeb057c18da62201267efc2b675f142da3",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`add importdescriptors RPC and tests for native descriptor wallets`\r\n\r\nneeds test",
      "created_at": "2020-03-27T14:52:42Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399322281",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399322281"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1527,
      "original_line": 1527,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399322814",
      "pull_request_review_id": 382872546,
      "id": 399322814,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMyMjgxNA==",
      "diff_hunk": "@@ -1459,3 +1459,290 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n \n     return response;\n }\n+\n+static UniValue ProcessDescriptorImport(CWallet * const pwallet, const UniValue& data, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    UniValue warnings(UniValue::VARR);\n+    UniValue result(UniValue::VOBJ);\n+\n+    try {\n+        if (!data.exists(\"desc\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Descriptor not found.\");\n+        }\n+\n+        const std::string& descriptor = data[\"desc\"].get_str();\n+        const bool active = data.exists(\"active\") ? data[\"active\"].get_bool() : false;\n+        const bool internal = data.exists(\"internal\") ? data[\"internal\"].get_bool() : false;\n+        const std::string& label = data.exists(\"label\") ? data[\"label\"].get_str() : \"\";\n+\n+        // Parse descriptor string\n+        FlatSigningProvider keys;\n+        std::string error;\n+        auto parsed_desc = Parse(descriptor, keys, error, /* require_checksum = */ true);\n+        if (!parsed_desc) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, error);\n+        }\n+\n+        // Range check\n+        int64_t range_start = 0, range_end = 1, next_index = 0;\n+        if (!parsed_desc->IsRange() && data.exists(\"range\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Range should not be specified for an un-ranged descriptor\");\n+        } else if (parsed_desc->IsRange()) {\n+            if (data.exists(\"range\")) {\n+                auto range = ParseDescriptorRange(data[\"range\"]);\n+                range_start = range.first;\n+                range_end = range.second + 1; // Specified range end is inclusive, but we need range end as exclusive\n+            } else {\n+                warnings.push_back(\"Range not given, using default keypool range\");\n+                range_start = 0;\n+                range_end = gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE);\n+            }\n+            next_index = range_start;\n+\n+            if (data.exists(\"next_index\")) {\n+                next_index = data[\"next_index\"].get_int64();\n+                // bound checks\n+                if (next_index < range_start || next_index >= range_end) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"next_index is out of range\");\n+                }\n+            }\n+        }\n+\n+        // Active descriptor must be ranged\n+        if (active && !parsed_desc->IsRange()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Active descriptor must be ranged\");\n+        }\n+\n+        // Ranged descriptors should not have a label\n+        if (data.exists(\"range\") && data.exists(\"label\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Ranged descriptors should not have a label\");\n+        }\n+\n+        // Internal addresses should not have a label either\n+        if (internal && data.exists(\"label\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Internal addresses should not have a label\");\n+        }\n+\n+        // Combo descriptor check\n+        if (active && !parsed_desc->IsSingleType()) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Combo descriptors cannot be set to active\");\n+        }\n+\n+        // If the wallet disabled private keys, abort if private keys exist\n+        if (pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS) && !keys.keys.empty()) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Cannot import private keys to a wallet with private keys disabled\");\n+        }\n+\n+        // Check if all private keys are provided\n+        bool have_privkeys = true;\n+        for (const auto& entry : keys.pubkeys) {\n+            const CKeyID& key_id = entry.first;\n+            CKey key;\n+            if (!keys.GetKey(key_id, key)) {\n+                have_privkeys = false;\n+            }\n+        }\n+\n+        // If private keys are enabled, abort if private keys are not provided\n+        if (!pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS) && !have_privkeys) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Cannot import descriptor without private keys to a wallet with private keys enabled\");",
      "path": "src/wallet/rpcdump.cpp",
      "position": null,
      "original_position": 90,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "7d1c6bbeb057c18da62201267efc2b675f142da3",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`add importdescriptors RPC and tests for native descriptor wallets`\r\n\r\nneeds test",
      "created_at": "2020-03-27T14:53:28Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399322814",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399322814"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1538,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399324799",
      "pull_request_review_id": 382872546,
      "id": 399324799,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMyNDc5OQ==",
      "diff_hunk": "@@ -0,0 +1,293 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the importdescriptors RPC.\n+\n+Test importdescriptors by generating keys on node0, importing the corresponding\n+descriptors on node1 and then testing the address info for the different address\n+variants.\n+\n+- `get_key()` is called to generate keys on node0 and return the privkeys,\n+  pubkeys and all variants of scriptPubKey and address.\n+- `test_importdesc()` is called to send an importdescriptors call to node1, test\n+  success, and (if unsuccessful) test the error code and error message returned.\n+- `test_address()` is called to call getaddressinfo for an address on node1\n+  and test the values returned.\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.descriptors import descsum_create\n+from test_framework.util import (\n+    assert_equal,\n+)\n+from test_framework.wallet_util import (\n+    get_key,\n+    test_address,\n+)\n+\n+class ImportDescriptorsTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.extra_args = [[\"-addresstype=legacy\"],\n+                           [\"-addresstype=bech32\", \"-keypool=5\"]\n+                          ]\n+        self.setup_clean_chain = True\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def test_importdesc(self, req, success, error_code=None, error_message=None, warnings=None, wallet=None):\n+        \"\"\"Run importdescriptors and assert success\"\"\"\n+        if warnings is None:\n+            warnings = []\n+        wrpc = self.nodes[1].get_wallet_rpc('w1')\n+        if wallet is not None:\n+            wrpc = wallet\n+\n+        result = wrpc.importdescriptors([req])\n+        observed_warnings = []\n+        if 'warnings' in result[0]:\n+           observed_warnings = result[0]['warnings']\n+        assert_equal(\"\\n\".join(sorted(warnings)), \"\\n\".join(sorted(observed_warnings)))\n+        assert_equal(result[0]['success'], success)\n+        if error_code is not None:\n+            assert_equal(result[0]['error']['code'], error_code)\n+            assert_equal(result[0]['error']['message'], error_message)\n+\n+    def run_test(self):\n+        self.log.info('Setting up wallets')\n+        self.nodes[0].createwallet(wallet_name='w0', disable_private_keys=False)\n+        w0 = self.nodes[0].get_wallet_rpc('w0')\n+\n+        self.nodes[1].createwallet(wallet_name='w1', disable_private_keys=True, blank=True, descriptors=True)\n+        w1 = self.nodes[1].get_wallet_rpc('w1')\n+        assert_equal(w1.getwalletinfo()['keypoolsize'], 0)\n+\n+        self.nodes[1].createwallet(wallet_name=\"wpriv\", disable_private_keys=False, blank=True, descriptors=True)\n+        wpriv = self.nodes[1].get_wallet_rpc(\"wpriv\")\n+        assert_equal(wpriv.getwalletinfo()['keypoolsize'], 0)\n+\n+        self.log.info('Mining coins')\n+        w0.generatetoaddress(101, w0.getnewaddress())\n+\n+        # RPC importdescriptors -----------------------------------------------\n+\n+        # # Test import fails if no descriptor present\n+        key = get_key(w0)\n+        self.log.info(\"Import should fail if a descriptor is not provided\")\n+        self.test_importdesc({\"timestamp\": \"now\"},\n+                             success=False,\n+                             error_code=-8,\n+                             error_message='Descriptor not found.')\n+\n+        # # Test importing of a P2PKH descriptor\n+        key = get_key(w0)\n+        self.log.info(\"Should import a p2pkh descriptor\")\n+        self.test_importdesc({\"desc\": descsum_create(\"pkh(\" + key.pubkey + \")\"),\n+                              \"timestamp\": \"now\",\n+                              \"label\": \"Descriptor import test\"},\n+                             success=True)\n+        test_address(w1,\n+                     key.p2pkh_addr,\n+                     solvable=True,\n+                     ismine=True,\n+                     labels=[\"Descriptor import test\"])\n+\n+        # # Test importing of a P2SH-P2WPKH descriptor\n+        key = get_key(w0)\n+        self.log.info(\"Should not import a p2sh-p2wpkh descriptor without checksum\")\n+        self.test_importdesc({\"desc\": \"sh(wpkh(\" + key.pubkey + \"))\",\n+                              \"timestamp\": \"now\"\n+                              },\n+                             success=False,\n+                             error_code=-5,\n+                             error_message=\"Missing checksum\")\n+\n+        self.log.info(\"Should not import a p2sh-p2wpkh descriptor that has range specified\")\n+        self.test_importdesc({\"desc\": descsum_create(\"sh(wpkh(\" + key.pubkey + \"))\"),\n+                               \"timestamp\": \"now\",\n+                               \"range\": 1,\n+                              },\n+                              success=False,\n+                              error_code=-8,\n+                              error_message=\"Range should not be specified for an un-ranged descriptor\")\n+\n+        self.log.info(\"Should not import a p2sh-p2wpkh descriptor and have it set to active\")\n+        self.test_importdesc({\"desc\": descsum_create(\"sh(wpkh(\" + key.pubkey + \"))\"),\n+                               \"timestamp\": \"now\",\n+                               \"active\": True,\n+                              },\n+                              success=False,\n+                              error_code=-8,\n+                              error_message=\"Active descriptor must be ranged\")\n+\n+        self.log.info(\"Should import a (non-active) p2sh-p2wpkh descriptor\")\n+        self.test_importdesc({\"desc\": descsum_create(\"sh(wpkh(\" + key.pubkey + \"))\"),\n+                               \"timestamp\": \"now\",\n+                               \"active\": False,\n+                              },\n+                              success=True)\n+\n+        test_address(w1,\n+                     key.p2sh_p2wpkh_addr,\n+                     ismine=True,\n+                     solvable=True)\n+\n+        # # Test importing of a multisig descriptor\n+        key1 = get_key(w0)\n+        key2 = get_key(w0)\n+        self.log.info(\"Should import a 1-of-2 bare multisig from descriptor\")\n+        self.test_importdesc({\"desc\": descsum_create(\"multi(1,\" + key1.pubkey + \",\" + key2.pubkey + \")\"),\n+                              \"timestamp\": \"now\"},\n+                             success=True)\n+        self.log.info(\"Should not treat individual keys from the imported bare multisig as watchonly\")\n+        test_address(w1,\n+                     key1.p2pkh_addr,\n+                     ismine=False)\n+\n+        # # Test ranged descriptors\n+        xpriv = \"tprv8ZgxMBicQKsPeuVhWwi6wuMQGfPKi9Li5GtX35jVNknACgqe3CY4g5xgkfDDJcmtF7o1QnxWDRYw4H5P26PXq7sbcUkEqeR4fg3Kxp2tigg\"\n+        xpub = \"tpubD6NzVbkrYhZ4YNXVQbNhMK1WqguFsUXceaVJKbmno2aZ3B6QfbMeraaYvnBSGpV3vxLyTTK9DYT1yoEck4XUScMzXoQ2U2oSmE2JyMedq3H\"\n+        addresses = [\"2N7yv4p8G8yEaPddJxY41kPihnWvs39qCMf\", \"2MsHxyb2JS3pAySeNUsJ7mNnurtpeenDzLA\"] # hdkeypath=m/0'/0'/0' and 1'\n+        addresses += [\"bcrt1qrd3n235cj2czsfmsuvqqpr3lu6lg0ju7scl8gn\", \"bcrt1qfqeppuvj0ww98r6qghmdkj70tv8qpchehegrg8\"] # wpkh subscripts corresponding to the above addresses\n+        desc = \"sh(wpkh(\" + xpub + \"/0'/0'/*'\" + \"))\"\n+        self.log.info(\"Ranged descriptor import should warn without a specified range\")\n+        self.test_importdesc({\"desc\": descsum_create(desc),\n+                               \"timestamp\": \"now\"},\n+                              success=True,\n+                              warnings=['Range not given, using default keypool range'])\n+\n+        # # Test importing of a ranged descriptor with xpriv\n+        self.log.info(\"Should not import a ranged descriptor that includes xpriv into a watch-only wallet\")\n+        desc = \"sh(wpkh(\" + xpriv + \"/0'/0'/*'\" + \"))\"\n+        self.test_importdesc({\"desc\": descsum_create(desc),\n+                              \"timestamp\": \"now\",\n+                              \"range\": 1},\n+                             success=False,\n+                             error_code=-4,\n+                             error_message='Cannot import private keys to a wallet with private keys disabled')\n+        for address in addresses:\n+            test_address(w1,\n+                         address,\n+                         ismine=False,\n+                         solvable=False)\n+\n+        self.test_importdesc({\"desc\": descsum_create(desc), \"timestamp\": \"now\", \"range\": -1},\n+                              success=False, error_code=-8, error_message='End of range is too high')\n+\n+        self.test_importdesc({\"desc\": descsum_create(desc), \"timestamp\": \"now\", \"range\": [-1, 10]},\n+                              success=False, error_code=-8, error_message='Range should be greater or equal than 0')\n+\n+        self.test_importdesc({\"desc\": descsum_create(desc), \"timestamp\": \"now\", \"range\": [(2 << 31 + 1) - 1000000, (2 << 31 + 1)]},\n+                              success=False, error_code=-8, error_message='End of range is too high')\n+\n+        self.test_importdesc({\"desc\": descsum_create(desc), \"timestamp\": \"now\", \"range\": [2, 1]},\n+                              success=False, error_code=-8, error_message='Range specified as [begin,end] must not have begin after end')\n+\n+        self.test_importdesc({\"desc\": descsum_create(desc), \"timestamp\": \"now\", \"range\": [0, 1000001]},\n+                              success=False, error_code=-8, error_message='Range is too large')\n+\n+        # Make sure ranged imports import keys in order\n+        w1 = self.nodes[1].get_wallet_rpc('w1')\n+        self.log.info('Key ranges should be imported in order')\n+        xpub = \"tpubDAXcJ7s7ZwicqjprRaEWdPoHKrCS215qxGYxpusRLLmJuT69ZSicuGdSfyvyKpvUNYBW1s2U3NSrT6vrCYB9e6nZUEvrqnwXPF8ArTCRXMY\"\n+        addresses = [\n+            'bcrt1qtmp74ayg7p24uslctssvjm06q5phz4yrxucgnv', # m/0'/0'/0\n+            'bcrt1q8vprchan07gzagd5e6v9wd7azyucksq2xc76k8', # m/0'/0'/1\n+            'bcrt1qtuqdtha7zmqgcrr26n2rqxztv5y8rafjp9lulu', # m/0'/0'/2\n+            'bcrt1qau64272ymawq26t90md6an0ps99qkrse58m640', # m/0'/0'/3\n+            'bcrt1qsg97266hrh6cpmutqen8s4s962aryy77jp0fg0', # m/0'/0'/4\n+        ]\n+\n+        self.test_importdesc({'desc': descsum_create('wpkh([80002067/0h/0h]' + xpub + '/*)'),\n+                              'active': True,\n+                              'range' : [0, 2],\n+                              'timestamp': 'now'\n+                             },\n+                             success=True)\n+\n+        for i in range(0, 4):",
      "path": "test/functional/wallet_importdescriptors.py",
      "position": null,
      "original_position": 209,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "7d1c6bbeb057c18da62201267efc2b675f142da3",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`add importdescriptors RPC and tests for native descriptor wallets`\r\n\r\ncan you calculate `4` in code instead of magic?",
      "created_at": "2020-03-27T14:56:03Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399324799",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399324799"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 209,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399325819",
      "pull_request_review_id": 382872546,
      "id": 399325819,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMyNTgxOQ==",
      "diff_hunk": "@@ -0,0 +1,293 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the importdescriptors RPC.\n+\n+Test importdescriptors by generating keys on node0, importing the corresponding\n+descriptors on node1 and then testing the address info for the different address\n+variants.\n+\n+- `get_key()` is called to generate keys on node0 and return the privkeys,\n+  pubkeys and all variants of scriptPubKey and address.\n+- `test_importdesc()` is called to send an importdescriptors call to node1, test\n+  success, and (if unsuccessful) test the error code and error message returned.\n+- `test_address()` is called to call getaddressinfo for an address on node1\n+  and test the values returned.\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.descriptors import descsum_create\n+from test_framework.util import (\n+    assert_equal,\n+)\n+from test_framework.wallet_util import (\n+    get_key,\n+    test_address,\n+)\n+\n+class ImportDescriptorsTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.extra_args = [[\"-addresstype=legacy\"],\n+                           [\"-addresstype=bech32\", \"-keypool=5\"]\n+                          ]\n+        self.setup_clean_chain = True\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def test_importdesc(self, req, success, error_code=None, error_message=None, warnings=None, wallet=None):\n+        \"\"\"Run importdescriptors and assert success\"\"\"\n+        if warnings is None:\n+            warnings = []\n+        wrpc = self.nodes[1].get_wallet_rpc('w1')\n+        if wallet is not None:\n+            wrpc = wallet\n+\n+        result = wrpc.importdescriptors([req])\n+        observed_warnings = []\n+        if 'warnings' in result[0]:\n+           observed_warnings = result[0]['warnings']\n+        assert_equal(\"\\n\".join(sorted(warnings)), \"\\n\".join(sorted(observed_warnings)))\n+        assert_equal(result[0]['success'], success)\n+        if error_code is not None:\n+            assert_equal(result[0]['error']['code'], error_code)\n+            assert_equal(result[0]['error']['message'], error_message)\n+\n+    def run_test(self):\n+        self.log.info('Setting up wallets')\n+        self.nodes[0].createwallet(wallet_name='w0', disable_private_keys=False)\n+        w0 = self.nodes[0].get_wallet_rpc('w0')\n+\n+        self.nodes[1].createwallet(wallet_name='w1', disable_private_keys=True, blank=True, descriptors=True)\n+        w1 = self.nodes[1].get_wallet_rpc('w1')\n+        assert_equal(w1.getwalletinfo()['keypoolsize'], 0)\n+\n+        self.nodes[1].createwallet(wallet_name=\"wpriv\", disable_private_keys=False, blank=True, descriptors=True)\n+        wpriv = self.nodes[1].get_wallet_rpc(\"wpriv\")\n+        assert_equal(wpriv.getwalletinfo()['keypoolsize'], 0)\n+\n+        self.log.info('Mining coins')\n+        w0.generatetoaddress(101, w0.getnewaddress())\n+\n+        # RPC importdescriptors -----------------------------------------------\n+\n+        # # Test import fails if no descriptor present\n+        key = get_key(w0)\n+        self.log.info(\"Import should fail if a descriptor is not provided\")\n+        self.test_importdesc({\"timestamp\": \"now\"},\n+                             success=False,\n+                             error_code=-8,\n+                             error_message='Descriptor not found.')\n+\n+        # # Test importing of a P2PKH descriptor\n+        key = get_key(w0)\n+        self.log.info(\"Should import a p2pkh descriptor\")\n+        self.test_importdesc({\"desc\": descsum_create(\"pkh(\" + key.pubkey + \")\"),\n+                              \"timestamp\": \"now\",\n+                              \"label\": \"Descriptor import test\"},\n+                             success=True)\n+        test_address(w1,\n+                     key.p2pkh_addr,\n+                     solvable=True,\n+                     ismine=True,\n+                     labels=[\"Descriptor import test\"])\n+\n+        # # Test importing of a P2SH-P2WPKH descriptor\n+        key = get_key(w0)\n+        self.log.info(\"Should not import a p2sh-p2wpkh descriptor without checksum\")\n+        self.test_importdesc({\"desc\": \"sh(wpkh(\" + key.pubkey + \"))\",\n+                              \"timestamp\": \"now\"\n+                              },\n+                             success=False,\n+                             error_code=-5,\n+                             error_message=\"Missing checksum\")\n+\n+        self.log.info(\"Should not import a p2sh-p2wpkh descriptor that has range specified\")\n+        self.test_importdesc({\"desc\": descsum_create(\"sh(wpkh(\" + key.pubkey + \"))\"),\n+                               \"timestamp\": \"now\",\n+                               \"range\": 1,\n+                              },\n+                              success=False,\n+                              error_code=-8,\n+                              error_message=\"Range should not be specified for an un-ranged descriptor\")\n+\n+        self.log.info(\"Should not import a p2sh-p2wpkh descriptor and have it set to active\")\n+        self.test_importdesc({\"desc\": descsum_create(\"sh(wpkh(\" + key.pubkey + \"))\"),\n+                               \"timestamp\": \"now\",\n+                               \"active\": True,\n+                              },\n+                              success=False,\n+                              error_code=-8,\n+                              error_message=\"Active descriptor must be ranged\")\n+\n+        self.log.info(\"Should import a (non-active) p2sh-p2wpkh descriptor\")\n+        self.test_importdesc({\"desc\": descsum_create(\"sh(wpkh(\" + key.pubkey + \"))\"),\n+                               \"timestamp\": \"now\",\n+                               \"active\": False,\n+                              },\n+                              success=True)\n+\n+        test_address(w1,\n+                     key.p2sh_p2wpkh_addr,\n+                     ismine=True,\n+                     solvable=True)\n+\n+        # # Test importing of a multisig descriptor\n+        key1 = get_key(w0)\n+        key2 = get_key(w0)\n+        self.log.info(\"Should import a 1-of-2 bare multisig from descriptor\")\n+        self.test_importdesc({\"desc\": descsum_create(\"multi(1,\" + key1.pubkey + \",\" + key2.pubkey + \")\"),\n+                              \"timestamp\": \"now\"},\n+                             success=True)\n+        self.log.info(\"Should not treat individual keys from the imported bare multisig as watchonly\")\n+        test_address(w1,\n+                     key1.p2pkh_addr,\n+                     ismine=False)\n+\n+        # # Test ranged descriptors\n+        xpriv = \"tprv8ZgxMBicQKsPeuVhWwi6wuMQGfPKi9Li5GtX35jVNknACgqe3CY4g5xgkfDDJcmtF7o1QnxWDRYw4H5P26PXq7sbcUkEqeR4fg3Kxp2tigg\"\n+        xpub = \"tpubD6NzVbkrYhZ4YNXVQbNhMK1WqguFsUXceaVJKbmno2aZ3B6QfbMeraaYvnBSGpV3vxLyTTK9DYT1yoEck4XUScMzXoQ2U2oSmE2JyMedq3H\"\n+        addresses = [\"2N7yv4p8G8yEaPddJxY41kPihnWvs39qCMf\", \"2MsHxyb2JS3pAySeNUsJ7mNnurtpeenDzLA\"] # hdkeypath=m/0'/0'/0' and 1'\n+        addresses += [\"bcrt1qrd3n235cj2czsfmsuvqqpr3lu6lg0ju7scl8gn\", \"bcrt1qfqeppuvj0ww98r6qghmdkj70tv8qpchehegrg8\"] # wpkh subscripts corresponding to the above addresses\n+        desc = \"sh(wpkh(\" + xpub + \"/0'/0'/*'\" + \"))\"\n+        self.log.info(\"Ranged descriptor import should warn without a specified range\")\n+        self.test_importdesc({\"desc\": descsum_create(desc),\n+                               \"timestamp\": \"now\"},\n+                              success=True,\n+                              warnings=['Range not given, using default keypool range'])\n+\n+        # # Test importing of a ranged descriptor with xpriv\n+        self.log.info(\"Should not import a ranged descriptor that includes xpriv into a watch-only wallet\")\n+        desc = \"sh(wpkh(\" + xpriv + \"/0'/0'/*'\" + \"))\"\n+        self.test_importdesc({\"desc\": descsum_create(desc),\n+                              \"timestamp\": \"now\",\n+                              \"range\": 1},\n+                             success=False,\n+                             error_code=-4,\n+                             error_message='Cannot import private keys to a wallet with private keys disabled')\n+        for address in addresses:\n+            test_address(w1,\n+                         address,\n+                         ismine=False,\n+                         solvable=False)\n+\n+        self.test_importdesc({\"desc\": descsum_create(desc), \"timestamp\": \"now\", \"range\": -1},\n+                              success=False, error_code=-8, error_message='End of range is too high')\n+\n+        self.test_importdesc({\"desc\": descsum_create(desc), \"timestamp\": \"now\", \"range\": [-1, 10]},\n+                              success=False, error_code=-8, error_message='Range should be greater or equal than 0')\n+\n+        self.test_importdesc({\"desc\": descsum_create(desc), \"timestamp\": \"now\", \"range\": [(2 << 31 + 1) - 1000000, (2 << 31 + 1)]},\n+                              success=False, error_code=-8, error_message='End of range is too high')\n+\n+        self.test_importdesc({\"desc\": descsum_create(desc), \"timestamp\": \"now\", \"range\": [2, 1]},\n+                              success=False, error_code=-8, error_message='Range specified as [begin,end] must not have begin after end')\n+\n+        self.test_importdesc({\"desc\": descsum_create(desc), \"timestamp\": \"now\", \"range\": [0, 1000001]},\n+                              success=False, error_code=-8, error_message='Range is too large')\n+\n+        # Make sure ranged imports import keys in order\n+        w1 = self.nodes[1].get_wallet_rpc('w1')\n+        self.log.info('Key ranges should be imported in order')\n+        xpub = \"tpubDAXcJ7s7ZwicqjprRaEWdPoHKrCS215qxGYxpusRLLmJuT69ZSicuGdSfyvyKpvUNYBW1s2U3NSrT6vrCYB9e6nZUEvrqnwXPF8ArTCRXMY\"\n+        addresses = [\n+            'bcrt1qtmp74ayg7p24uslctssvjm06q5phz4yrxucgnv', # m/0'/0'/0\n+            'bcrt1q8vprchan07gzagd5e6v9wd7azyucksq2xc76k8', # m/0'/0'/1\n+            'bcrt1qtuqdtha7zmqgcrr26n2rqxztv5y8rafjp9lulu', # m/0'/0'/2\n+            'bcrt1qau64272ymawq26t90md6an0ps99qkrse58m640', # m/0'/0'/3\n+            'bcrt1qsg97266hrh6cpmutqen8s4s962aryy77jp0fg0', # m/0'/0'/4\n+        ]\n+\n+        self.test_importdesc({'desc': descsum_create('wpkh([80002067/0h/0h]' + xpub + '/*)'),\n+                              'active': True,\n+                              'range' : [0, 2],\n+                              'timestamp': 'now'\n+                             },\n+                             success=True)\n+\n+        for i in range(0, 4):\n+            addr = w1.getnewaddress('', 'bech32')",
      "path": "test/functional/wallet_importdescriptors.py",
      "position": null,
      "original_position": 210,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "7d1c6bbeb057c18da62201267efc2b675f142da3",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`add importdescriptors RPC and tests for native descriptor wallets`\r\n\r\nwe should also check import didn't somehow add an internal spkm with change addresses",
      "created_at": "2020-03-27T14:57:28Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399325819",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399325819"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 210,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399327270",
      "pull_request_review_id": 382872546,
      "id": 399327270,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMyNzI3MA==",
      "diff_hunk": "@@ -0,0 +1,293 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the importdescriptors RPC.\n+\n+Test importdescriptors by generating keys on node0, importing the corresponding\n+descriptors on node1 and then testing the address info for the different address\n+variants.\n+\n+- `get_key()` is called to generate keys on node0 and return the privkeys,\n+  pubkeys and all variants of scriptPubKey and address.\n+- `test_importdesc()` is called to send an importdescriptors call to node1, test\n+  success, and (if unsuccessful) test the error code and error message returned.\n+- `test_address()` is called to call getaddressinfo for an address on node1\n+  and test the values returned.\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.descriptors import descsum_create\n+from test_framework.util import (\n+    assert_equal,\n+)\n+from test_framework.wallet_util import (\n+    get_key,\n+    test_address,\n+)\n+\n+class ImportDescriptorsTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.extra_args = [[\"-addresstype=legacy\"],\n+                           [\"-addresstype=bech32\", \"-keypool=5\"]\n+                          ]\n+        self.setup_clean_chain = True\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def test_importdesc(self, req, success, error_code=None, error_message=None, warnings=None, wallet=None):\n+        \"\"\"Run importdescriptors and assert success\"\"\"\n+        if warnings is None:\n+            warnings = []\n+        wrpc = self.nodes[1].get_wallet_rpc('w1')\n+        if wallet is not None:\n+            wrpc = wallet\n+\n+        result = wrpc.importdescriptors([req])\n+        observed_warnings = []\n+        if 'warnings' in result[0]:\n+           observed_warnings = result[0]['warnings']\n+        assert_equal(\"\\n\".join(sorted(warnings)), \"\\n\".join(sorted(observed_warnings)))\n+        assert_equal(result[0]['success'], success)\n+        if error_code is not None:\n+            assert_equal(result[0]['error']['code'], error_code)\n+            assert_equal(result[0]['error']['message'], error_message)\n+\n+    def run_test(self):\n+        self.log.info('Setting up wallets')\n+        self.nodes[0].createwallet(wallet_name='w0', disable_private_keys=False)\n+        w0 = self.nodes[0].get_wallet_rpc('w0')\n+\n+        self.nodes[1].createwallet(wallet_name='w1', disable_private_keys=True, blank=True, descriptors=True)\n+        w1 = self.nodes[1].get_wallet_rpc('w1')\n+        assert_equal(w1.getwalletinfo()['keypoolsize'], 0)\n+\n+        self.nodes[1].createwallet(wallet_name=\"wpriv\", disable_private_keys=False, blank=True, descriptors=True)\n+        wpriv = self.nodes[1].get_wallet_rpc(\"wpriv\")\n+        assert_equal(wpriv.getwalletinfo()['keypoolsize'], 0)\n+\n+        self.log.info('Mining coins')\n+        w0.generatetoaddress(101, w0.getnewaddress())\n+\n+        # RPC importdescriptors -----------------------------------------------\n+\n+        # # Test import fails if no descriptor present\n+        key = get_key(w0)\n+        self.log.info(\"Import should fail if a descriptor is not provided\")\n+        self.test_importdesc({\"timestamp\": \"now\"},\n+                             success=False,\n+                             error_code=-8,\n+                             error_message='Descriptor not found.')\n+\n+        # # Test importing of a P2PKH descriptor\n+        key = get_key(w0)\n+        self.log.info(\"Should import a p2pkh descriptor\")\n+        self.test_importdesc({\"desc\": descsum_create(\"pkh(\" + key.pubkey + \")\"),\n+                              \"timestamp\": \"now\",\n+                              \"label\": \"Descriptor import test\"},\n+                             success=True)\n+        test_address(w1,\n+                     key.p2pkh_addr,\n+                     solvable=True,\n+                     ismine=True,\n+                     labels=[\"Descriptor import test\"])\n+\n+        # # Test importing of a P2SH-P2WPKH descriptor\n+        key = get_key(w0)\n+        self.log.info(\"Should not import a p2sh-p2wpkh descriptor without checksum\")\n+        self.test_importdesc({\"desc\": \"sh(wpkh(\" + key.pubkey + \"))\",\n+                              \"timestamp\": \"now\"\n+                              },\n+                             success=False,\n+                             error_code=-5,\n+                             error_message=\"Missing checksum\")\n+\n+        self.log.info(\"Should not import a p2sh-p2wpkh descriptor that has range specified\")\n+        self.test_importdesc({\"desc\": descsum_create(\"sh(wpkh(\" + key.pubkey + \"))\"),\n+                               \"timestamp\": \"now\",\n+                               \"range\": 1,\n+                              },\n+                              success=False,\n+                              error_code=-8,\n+                              error_message=\"Range should not be specified for an un-ranged descriptor\")\n+\n+        self.log.info(\"Should not import a p2sh-p2wpkh descriptor and have it set to active\")\n+        self.test_importdesc({\"desc\": descsum_create(\"sh(wpkh(\" + key.pubkey + \"))\"),\n+                               \"timestamp\": \"now\",\n+                               \"active\": True,\n+                              },\n+                              success=False,\n+                              error_code=-8,\n+                              error_message=\"Active descriptor must be ranged\")\n+\n+        self.log.info(\"Should import a (non-active) p2sh-p2wpkh descriptor\")\n+        self.test_importdesc({\"desc\": descsum_create(\"sh(wpkh(\" + key.pubkey + \"))\"),\n+                               \"timestamp\": \"now\",\n+                               \"active\": False,\n+                              },\n+                              success=True)\n+\n+        test_address(w1,\n+                     key.p2sh_p2wpkh_addr,\n+                     ismine=True,\n+                     solvable=True)\n+\n+        # # Test importing of a multisig descriptor\n+        key1 = get_key(w0)\n+        key2 = get_key(w0)\n+        self.log.info(\"Should import a 1-of-2 bare multisig from descriptor\")\n+        self.test_importdesc({\"desc\": descsum_create(\"multi(1,\" + key1.pubkey + \",\" + key2.pubkey + \")\"),\n+                              \"timestamp\": \"now\"},\n+                             success=True)\n+        self.log.info(\"Should not treat individual keys from the imported bare multisig as watchonly\")\n+        test_address(w1,\n+                     key1.p2pkh_addr,\n+                     ismine=False)\n+\n+        # # Test ranged descriptors\n+        xpriv = \"tprv8ZgxMBicQKsPeuVhWwi6wuMQGfPKi9Li5GtX35jVNknACgqe3CY4g5xgkfDDJcmtF7o1QnxWDRYw4H5P26PXq7sbcUkEqeR4fg3Kxp2tigg\"\n+        xpub = \"tpubD6NzVbkrYhZ4YNXVQbNhMK1WqguFsUXceaVJKbmno2aZ3B6QfbMeraaYvnBSGpV3vxLyTTK9DYT1yoEck4XUScMzXoQ2U2oSmE2JyMedq3H\"\n+        addresses = [\"2N7yv4p8G8yEaPddJxY41kPihnWvs39qCMf\", \"2MsHxyb2JS3pAySeNUsJ7mNnurtpeenDzLA\"] # hdkeypath=m/0'/0'/0' and 1'\n+        addresses += [\"bcrt1qrd3n235cj2czsfmsuvqqpr3lu6lg0ju7scl8gn\", \"bcrt1qfqeppuvj0ww98r6qghmdkj70tv8qpchehegrg8\"] # wpkh subscripts corresponding to the above addresses\n+        desc = \"sh(wpkh(\" + xpub + \"/0'/0'/*'\" + \"))\"\n+        self.log.info(\"Ranged descriptor import should warn without a specified range\")\n+        self.test_importdesc({\"desc\": descsum_create(desc),\n+                               \"timestamp\": \"now\"},\n+                              success=True,\n+                              warnings=['Range not given, using default keypool range'])\n+\n+        # # Test importing of a ranged descriptor with xpriv\n+        self.log.info(\"Should not import a ranged descriptor that includes xpriv into a watch-only wallet\")\n+        desc = \"sh(wpkh(\" + xpriv + \"/0'/0'/*'\" + \"))\"\n+        self.test_importdesc({\"desc\": descsum_create(desc),\n+                              \"timestamp\": \"now\",\n+                              \"range\": 1},\n+                             success=False,\n+                             error_code=-4,\n+                             error_message='Cannot import private keys to a wallet with private keys disabled')\n+        for address in addresses:\n+            test_address(w1,\n+                         address,\n+                         ismine=False,\n+                         solvable=False)\n+\n+        self.test_importdesc({\"desc\": descsum_create(desc), \"timestamp\": \"now\", \"range\": -1},\n+                              success=False, error_code=-8, error_message='End of range is too high')\n+\n+        self.test_importdesc({\"desc\": descsum_create(desc), \"timestamp\": \"now\", \"range\": [-1, 10]},\n+                              success=False, error_code=-8, error_message='Range should be greater or equal than 0')\n+\n+        self.test_importdesc({\"desc\": descsum_create(desc), \"timestamp\": \"now\", \"range\": [(2 << 31 + 1) - 1000000, (2 << 31 + 1)]},\n+                              success=False, error_code=-8, error_message='End of range is too high')\n+\n+        self.test_importdesc({\"desc\": descsum_create(desc), \"timestamp\": \"now\", \"range\": [2, 1]},\n+                              success=False, error_code=-8, error_message='Range specified as [begin,end] must not have begin after end')\n+\n+        self.test_importdesc({\"desc\": descsum_create(desc), \"timestamp\": \"now\", \"range\": [0, 1000001]},\n+                              success=False, error_code=-8, error_message='Range is too large')\n+\n+        # Make sure ranged imports import keys in order\n+        w1 = self.nodes[1].get_wallet_rpc('w1')\n+        self.log.info('Key ranges should be imported in order')\n+        xpub = \"tpubDAXcJ7s7ZwicqjprRaEWdPoHKrCS215qxGYxpusRLLmJuT69ZSicuGdSfyvyKpvUNYBW1s2U3NSrT6vrCYB9e6nZUEvrqnwXPF8ArTCRXMY\"\n+        addresses = [\n+            'bcrt1qtmp74ayg7p24uslctssvjm06q5phz4yrxucgnv', # m/0'/0'/0\n+            'bcrt1q8vprchan07gzagd5e6v9wd7azyucksq2xc76k8', # m/0'/0'/1\n+            'bcrt1qtuqdtha7zmqgcrr26n2rqxztv5y8rafjp9lulu', # m/0'/0'/2\n+            'bcrt1qau64272ymawq26t90md6an0ps99qkrse58m640', # m/0'/0'/3\n+            'bcrt1qsg97266hrh6cpmutqen8s4s962aryy77jp0fg0', # m/0'/0'/4\n+        ]\n+\n+        self.test_importdesc({'desc': descsum_create('wpkh([80002067/0h/0h]' + xpub + '/*)'),\n+                              'active': True,\n+                              'range' : [0, 2],\n+                              'timestamp': 'now'\n+                             },\n+                             success=True)\n+\n+        for i in range(0, 4):\n+            addr = w1.getnewaddress('', 'bech32')\n+            assert_equal(addr, addresses[i])\n+\n+        # # Test importing a descriptor containing a WIF private key\n+        wif_priv = \"cTe1f5rdT8A8DFgVWTjyPwACsDPJM9ff4QngFxUixCSvvbg1x6sh\"\n+        address = \"2MuhcG52uHPknxDgmGPsV18jSHFBnnRgjPg\"\n+        desc = \"sh(wpkh(\" + wif_priv + \"))\"\n+        self.log.info(\"Should import a descriptor with a WIF private key as spendable\")\n+        self.test_importdesc({\"desc\": descsum_create(desc),\n+                               \"timestamp\": \"now\"},\n+                              success=True,\n+                              wallet=wpriv)\n+        test_address(wpriv,\n+                     address,\n+                     solvable=True,\n+                     ismine=True)\n+        txid = w0.sendtoaddress(address, 49.99995540)\n+        w0.generatetoaddress(6, w0.getnewaddress())\n+        self.sync_blocks()\n+        tx = wpriv.createrawtransaction([{\"txid\": txid, \"vout\": 0}], {w0.getnewaddress(): 49.999})\n+        signed_tx = wpriv.signrawtransactionwithwallet(tx)\n+        w1.sendrawtransaction(signed_tx['hex'])\n+\n+        # Make sure that we can use import and use multisig as addresses\n+        self.log.info('Test that multisigs can be imported, signed for, and getnewaddress\\'d')\n+        self.nodes[1].createwallet(wallet_name=\"wmulti_priv\", disable_private_keys=False, blank=True, descriptors=True)\n+        wmulti_priv = self.nodes[1].get_wallet_rpc(\"wmulti_priv\")\n+        assert_equal(wmulti_priv.getwalletinfo()['keypoolsize'], 0)\n+\n+        self.test_importdesc({\"desc\":\"wsh(multi(2,tprv8ZgxMBicQKsPevADjDCWsa6DfhkVXicu8NQUzfibwX2MexVwW4tCec5mXdCW8kJwkzBRRmAay1KZya4WsehVvjTGVW6JLqiqd8DdZ4xSg52/84h/0h/0h/*,tprv8ZgxMBicQKsPdSNWUhDiwTScDr6JfkZuLshTRwzvZGnMSnGikV6jxpmdDkC3YRc4T3GD6Nvg9uv6hQg73RVv1EiTXDZwxVbsLugVHU8B1aq/84h/0h/0h/*,tprv8ZgxMBicQKsPeonDt8Ka2mrQmHa61hQ5FQCsvWBTpSNzBFgM58cV2EuXNAHF14VawVpznnme3SuTbA62sGriwWyKifJmXntfNeK7zeqMCj1/84h/0h/0h/*))#m2sr93jn\",\n+                            \"active\": True,\n+                            \"range\": 1000,\n+                            \"next_index\": 0,\n+                            \"timestamp\": \"now\"},\n+                            success=True,\n+                            wallet=wmulti_priv)\n+        self.test_importdesc({\"desc\":\"wsh(multi(2,tprv8ZgxMBicQKsPevADjDCWsa6DfhkVXicu8NQUzfibwX2MexVwW4tCec5mXdCW8kJwkzBRRmAay1KZya4WsehVvjTGVW6JLqiqd8DdZ4xSg52/84h/1h/0h/*,tprv8ZgxMBicQKsPdSNWUhDiwTScDr6JfkZuLshTRwzvZGnMSnGikV6jxpmdDkC3YRc4T3GD6Nvg9uv6hQg73RVv1EiTXDZwxVbsLugVHU8B1aq/84h/1h/0h/*,tprv8ZgxMBicQKsPeonDt8Ka2mrQmHa61hQ5FQCsvWBTpSNzBFgM58cV2EuXNAHF14VawVpznnme3SuTbA62sGriwWyKifJmXntfNeK7zeqMCj1/84h/1h/0h/*))#q3sztvx5\",\n+                            \"active\": True,\n+                            \"internal\" : True,",
      "path": "test/functional/wallet_importdescriptors.py",
      "position": 319,
      "original_position": 248,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "7d1c6bbeb057c18da62201267efc2b675f142da3",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`add importdescriptors RPC and tests for native descriptor wallets`\r\n\r\nshould test the fact that correct change addresses can be drawn now",
      "created_at": "2020-03-27T14:59:28Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399327270",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399327270"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 319,
      "original_line": 319,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399327486",
      "pull_request_review_id": 382872546,
      "id": 399327486,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMyNzQ4Ng==",
      "diff_hunk": "@@ -0,0 +1,293 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the importdescriptors RPC.\n+\n+Test importdescriptors by generating keys on node0, importing the corresponding\n+descriptors on node1 and then testing the address info for the different address\n+variants.\n+\n+- `get_key()` is called to generate keys on node0 and return the privkeys,\n+  pubkeys and all variants of scriptPubKey and address.\n+- `test_importdesc()` is called to send an importdescriptors call to node1, test\n+  success, and (if unsuccessful) test the error code and error message returned.\n+- `test_address()` is called to call getaddressinfo for an address on node1\n+  and test the values returned.\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.descriptors import descsum_create\n+from test_framework.util import (\n+    assert_equal,\n+)\n+from test_framework.wallet_util import (\n+    get_key,\n+    test_address,\n+)\n+\n+class ImportDescriptorsTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.extra_args = [[\"-addresstype=legacy\"],\n+                           [\"-addresstype=bech32\", \"-keypool=5\"]\n+                          ]\n+        self.setup_clean_chain = True\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def test_importdesc(self, req, success, error_code=None, error_message=None, warnings=None, wallet=None):\n+        \"\"\"Run importdescriptors and assert success\"\"\"\n+        if warnings is None:\n+            warnings = []\n+        wrpc = self.nodes[1].get_wallet_rpc('w1')\n+        if wallet is not None:\n+            wrpc = wallet\n+\n+        result = wrpc.importdescriptors([req])\n+        observed_warnings = []\n+        if 'warnings' in result[0]:\n+           observed_warnings = result[0]['warnings']\n+        assert_equal(\"\\n\".join(sorted(warnings)), \"\\n\".join(sorted(observed_warnings)))\n+        assert_equal(result[0]['success'], success)\n+        if error_code is not None:\n+            assert_equal(result[0]['error']['code'], error_code)\n+            assert_equal(result[0]['error']['message'], error_message)\n+\n+    def run_test(self):\n+        self.log.info('Setting up wallets')\n+        self.nodes[0].createwallet(wallet_name='w0', disable_private_keys=False)\n+        w0 = self.nodes[0].get_wallet_rpc('w0')\n+\n+        self.nodes[1].createwallet(wallet_name='w1', disable_private_keys=True, blank=True, descriptors=True)\n+        w1 = self.nodes[1].get_wallet_rpc('w1')\n+        assert_equal(w1.getwalletinfo()['keypoolsize'], 0)\n+\n+        self.nodes[1].createwallet(wallet_name=\"wpriv\", disable_private_keys=False, blank=True, descriptors=True)\n+        wpriv = self.nodes[1].get_wallet_rpc(\"wpriv\")\n+        assert_equal(wpriv.getwalletinfo()['keypoolsize'], 0)\n+\n+        self.log.info('Mining coins')\n+        w0.generatetoaddress(101, w0.getnewaddress())\n+\n+        # RPC importdescriptors -----------------------------------------------\n+\n+        # # Test import fails if no descriptor present\n+        key = get_key(w0)\n+        self.log.info(\"Import should fail if a descriptor is not provided\")\n+        self.test_importdesc({\"timestamp\": \"now\"},\n+                             success=False,\n+                             error_code=-8,\n+                             error_message='Descriptor not found.')\n+\n+        # # Test importing of a P2PKH descriptor\n+        key = get_key(w0)\n+        self.log.info(\"Should import a p2pkh descriptor\")\n+        self.test_importdesc({\"desc\": descsum_create(\"pkh(\" + key.pubkey + \")\"),\n+                              \"timestamp\": \"now\",\n+                              \"label\": \"Descriptor import test\"},\n+                             success=True)\n+        test_address(w1,\n+                     key.p2pkh_addr,\n+                     solvable=True,\n+                     ismine=True,\n+                     labels=[\"Descriptor import test\"])\n+\n+        # # Test importing of a P2SH-P2WPKH descriptor\n+        key = get_key(w0)\n+        self.log.info(\"Should not import a p2sh-p2wpkh descriptor without checksum\")\n+        self.test_importdesc({\"desc\": \"sh(wpkh(\" + key.pubkey + \"))\",\n+                              \"timestamp\": \"now\"\n+                              },\n+                             success=False,\n+                             error_code=-5,\n+                             error_message=\"Missing checksum\")\n+\n+        self.log.info(\"Should not import a p2sh-p2wpkh descriptor that has range specified\")\n+        self.test_importdesc({\"desc\": descsum_create(\"sh(wpkh(\" + key.pubkey + \"))\"),\n+                               \"timestamp\": \"now\",\n+                               \"range\": 1,\n+                              },\n+                              success=False,\n+                              error_code=-8,\n+                              error_message=\"Range should not be specified for an un-ranged descriptor\")\n+\n+        self.log.info(\"Should not import a p2sh-p2wpkh descriptor and have it set to active\")\n+        self.test_importdesc({\"desc\": descsum_create(\"sh(wpkh(\" + key.pubkey + \"))\"),\n+                               \"timestamp\": \"now\",\n+                               \"active\": True,\n+                              },\n+                              success=False,\n+                              error_code=-8,\n+                              error_message=\"Active descriptor must be ranged\")\n+\n+        self.log.info(\"Should import a (non-active) p2sh-p2wpkh descriptor\")\n+        self.test_importdesc({\"desc\": descsum_create(\"sh(wpkh(\" + key.pubkey + \"))\"),\n+                               \"timestamp\": \"now\",\n+                               \"active\": False,\n+                              },\n+                              success=True)\n+\n+        test_address(w1,\n+                     key.p2sh_p2wpkh_addr,\n+                     ismine=True,\n+                     solvable=True)\n+\n+        # # Test importing of a multisig descriptor\n+        key1 = get_key(w0)\n+        key2 = get_key(w0)\n+        self.log.info(\"Should import a 1-of-2 bare multisig from descriptor\")\n+        self.test_importdesc({\"desc\": descsum_create(\"multi(1,\" + key1.pubkey + \",\" + key2.pubkey + \")\"),\n+                              \"timestamp\": \"now\"},\n+                             success=True)\n+        self.log.info(\"Should not treat individual keys from the imported bare multisig as watchonly\")\n+        test_address(w1,\n+                     key1.p2pkh_addr,\n+                     ismine=False)\n+\n+        # # Test ranged descriptors\n+        xpriv = \"tprv8ZgxMBicQKsPeuVhWwi6wuMQGfPKi9Li5GtX35jVNknACgqe3CY4g5xgkfDDJcmtF7o1QnxWDRYw4H5P26PXq7sbcUkEqeR4fg3Kxp2tigg\"\n+        xpub = \"tpubD6NzVbkrYhZ4YNXVQbNhMK1WqguFsUXceaVJKbmno2aZ3B6QfbMeraaYvnBSGpV3vxLyTTK9DYT1yoEck4XUScMzXoQ2U2oSmE2JyMedq3H\"\n+        addresses = [\"2N7yv4p8G8yEaPddJxY41kPihnWvs39qCMf\", \"2MsHxyb2JS3pAySeNUsJ7mNnurtpeenDzLA\"] # hdkeypath=m/0'/0'/0' and 1'\n+        addresses += [\"bcrt1qrd3n235cj2czsfmsuvqqpr3lu6lg0ju7scl8gn\", \"bcrt1qfqeppuvj0ww98r6qghmdkj70tv8qpchehegrg8\"] # wpkh subscripts corresponding to the above addresses\n+        desc = \"sh(wpkh(\" + xpub + \"/0'/0'/*'\" + \"))\"\n+        self.log.info(\"Ranged descriptor import should warn without a specified range\")\n+        self.test_importdesc({\"desc\": descsum_create(desc),\n+                               \"timestamp\": \"now\"},\n+                              success=True,\n+                              warnings=['Range not given, using default keypool range'])\n+\n+        # # Test importing of a ranged descriptor with xpriv\n+        self.log.info(\"Should not import a ranged descriptor that includes xpriv into a watch-only wallet\")\n+        desc = \"sh(wpkh(\" + xpriv + \"/0'/0'/*'\" + \"))\"\n+        self.test_importdesc({\"desc\": descsum_create(desc),\n+                              \"timestamp\": \"now\",\n+                              \"range\": 1},\n+                             success=False,\n+                             error_code=-4,\n+                             error_message='Cannot import private keys to a wallet with private keys disabled')\n+        for address in addresses:\n+            test_address(w1,\n+                         address,\n+                         ismine=False,\n+                         solvable=False)\n+\n+        self.test_importdesc({\"desc\": descsum_create(desc), \"timestamp\": \"now\", \"range\": -1},\n+                              success=False, error_code=-8, error_message='End of range is too high')\n+\n+        self.test_importdesc({\"desc\": descsum_create(desc), \"timestamp\": \"now\", \"range\": [-1, 10]},\n+                              success=False, error_code=-8, error_message='Range should be greater or equal than 0')\n+\n+        self.test_importdesc({\"desc\": descsum_create(desc), \"timestamp\": \"now\", \"range\": [(2 << 31 + 1) - 1000000, (2 << 31 + 1)]},\n+                              success=False, error_code=-8, error_message='End of range is too high')\n+\n+        self.test_importdesc({\"desc\": descsum_create(desc), \"timestamp\": \"now\", \"range\": [2, 1]},\n+                              success=False, error_code=-8, error_message='Range specified as [begin,end] must not have begin after end')\n+\n+        self.test_importdesc({\"desc\": descsum_create(desc), \"timestamp\": \"now\", \"range\": [0, 1000001]},\n+                              success=False, error_code=-8, error_message='Range is too large')\n+\n+        # Make sure ranged imports import keys in order\n+        w1 = self.nodes[1].get_wallet_rpc('w1')\n+        self.log.info('Key ranges should be imported in order')\n+        xpub = \"tpubDAXcJ7s7ZwicqjprRaEWdPoHKrCS215qxGYxpusRLLmJuT69ZSicuGdSfyvyKpvUNYBW1s2U3NSrT6vrCYB9e6nZUEvrqnwXPF8ArTCRXMY\"\n+        addresses = [\n+            'bcrt1qtmp74ayg7p24uslctssvjm06q5phz4yrxucgnv', # m/0'/0'/0\n+            'bcrt1q8vprchan07gzagd5e6v9wd7azyucksq2xc76k8', # m/0'/0'/1\n+            'bcrt1qtuqdtha7zmqgcrr26n2rqxztv5y8rafjp9lulu', # m/0'/0'/2\n+            'bcrt1qau64272ymawq26t90md6an0ps99qkrse58m640', # m/0'/0'/3\n+            'bcrt1qsg97266hrh6cpmutqen8s4s962aryy77jp0fg0', # m/0'/0'/4\n+        ]\n+\n+        self.test_importdesc({'desc': descsum_create('wpkh([80002067/0h/0h]' + xpub + '/*)'),\n+                              'active': True,\n+                              'range' : [0, 2],\n+                              'timestamp': 'now'\n+                             },\n+                             success=True)\n+\n+        for i in range(0, 4):\n+            addr = w1.getnewaddress('', 'bech32')\n+            assert_equal(addr, addresses[i])\n+\n+        # # Test importing a descriptor containing a WIF private key\n+        wif_priv = \"cTe1f5rdT8A8DFgVWTjyPwACsDPJM9ff4QngFxUixCSvvbg1x6sh\"\n+        address = \"2MuhcG52uHPknxDgmGPsV18jSHFBnnRgjPg\"\n+        desc = \"sh(wpkh(\" + wif_priv + \"))\"\n+        self.log.info(\"Should import a descriptor with a WIF private key as spendable\")\n+        self.test_importdesc({\"desc\": descsum_create(desc),\n+                               \"timestamp\": \"now\"},\n+                              success=True,\n+                              wallet=wpriv)\n+        test_address(wpriv,\n+                     address,\n+                     solvable=True,\n+                     ismine=True)\n+        txid = w0.sendtoaddress(address, 49.99995540)\n+        w0.generatetoaddress(6, w0.getnewaddress())\n+        self.sync_blocks()\n+        tx = wpriv.createrawtransaction([{\"txid\": txid, \"vout\": 0}], {w0.getnewaddress(): 49.999})\n+        signed_tx = wpriv.signrawtransactionwithwallet(tx)\n+        w1.sendrawtransaction(signed_tx['hex'])\n+\n+        # Make sure that we can use import and use multisig as addresses\n+        self.log.info('Test that multisigs can be imported, signed for, and getnewaddress\\'d')\n+        self.nodes[1].createwallet(wallet_name=\"wmulti_priv\", disable_private_keys=False, blank=True, descriptors=True)\n+        wmulti_priv = self.nodes[1].get_wallet_rpc(\"wmulti_priv\")\n+        assert_equal(wmulti_priv.getwalletinfo()['keypoolsize'], 0)\n+\n+        self.test_importdesc({\"desc\":\"wsh(multi(2,tprv8ZgxMBicQKsPevADjDCWsa6DfhkVXicu8NQUzfibwX2MexVwW4tCec5mXdCW8kJwkzBRRmAay1KZya4WsehVvjTGVW6JLqiqd8DdZ4xSg52/84h/0h/0h/*,tprv8ZgxMBicQKsPdSNWUhDiwTScDr6JfkZuLshTRwzvZGnMSnGikV6jxpmdDkC3YRc4T3GD6Nvg9uv6hQg73RVv1EiTXDZwxVbsLugVHU8B1aq/84h/0h/0h/*,tprv8ZgxMBicQKsPeonDt8Ka2mrQmHa61hQ5FQCsvWBTpSNzBFgM58cV2EuXNAHF14VawVpznnme3SuTbA62sGriwWyKifJmXntfNeK7zeqMCj1/84h/0h/0h/*))#m2sr93jn\",\n+                            \"active\": True,\n+                            \"range\": 1000,\n+                            \"next_index\": 0,\n+                            \"timestamp\": \"now\"},\n+                            success=True,\n+                            wallet=wmulti_priv)\n+        self.test_importdesc({\"desc\":\"wsh(multi(2,tprv8ZgxMBicQKsPevADjDCWsa6DfhkVXicu8NQUzfibwX2MexVwW4tCec5mXdCW8kJwkzBRRmAay1KZya4WsehVvjTGVW6JLqiqd8DdZ4xSg52/84h/1h/0h/*,tprv8ZgxMBicQKsPdSNWUhDiwTScDr6JfkZuLshTRwzvZGnMSnGikV6jxpmdDkC3YRc4T3GD6Nvg9uv6hQg73RVv1EiTXDZwxVbsLugVHU8B1aq/84h/1h/0h/*,tprv8ZgxMBicQKsPeonDt8Ka2mrQmHa61hQ5FQCsvWBTpSNzBFgM58cV2EuXNAHF14VawVpznnme3SuTbA62sGriwWyKifJmXntfNeK7zeqMCj1/84h/1h/0h/*))#q3sztvx5\",\n+                            \"active\": True,\n+                            \"internal\" : True,\n+                            \"range\": 1000,\n+                            \"next_index\": 0,\n+                            \"timestamp\": \"now\"},\n+                            success=True,\n+                            wallet=wmulti_priv)\n+\n+        addr = wmulti_priv.getnewaddress('', 'bech32')\n+        assert_equal(addr, 'bcrt1qdt0qy5p7dzhxzmegnn4ulzhard33s2809arjqgjndx87rv5vd0fq2czhy8') # Derived at m/84'/0'/0'/0\n+        txid = w0.sendtoaddress(addr, 10)\n+        self.nodes[0].generate(6)\n+        send_txid = wmulti_priv.sendtoaddress(w0.getnewaddress(), 8)\n+        decoded = wmulti_priv.decoderawtransaction(wmulti_priv.gettransaction(send_txid)['hex'])\n+        assert_equal(len(decoded['vin'][0]['txinwitness']), 4)\n+        self.nodes[0].generate(6)\n+        self.sync_all()\n+\n+        self.nodes[1].createwallet(wallet_name=\"wmulti_pub\", disable_private_keys=True, blank=True, descriptors=True)\n+        wmulti_pub = self.nodes[1].get_wallet_rpc(\"wmulti_pub\")\n+        assert_equal(wmulti_pub.getwalletinfo()['keypoolsize'], 0)\n+\n+        self.test_importdesc({\"desc\":\"wsh(multi(2,[7b2d0242/84h/0h/0h]tpubDCJtdt5dgJpdhW4MtaVYDhG4T4tF6jcLR1PxL43q9pq1mxvXgMS9Mzw1HnXG15vxUGQJMMSqCQHMTy3F1eW5VkgVroWzchsPD5BUojrcWs8/*,[59b09cd6/84h/0h/0h]tpubDDBF2BTR6s8drwrfDei8WxtckGuSm1cyoKxYY1QaKSBFbHBYQArWhHPA6eJrzZej6nfHGLSURYSLHr7GuYch8aY5n61tGqgn8b4cXrMuoPH/*,[e81a0532/84h/0h/0h]tpubDCsWoW1kuQB9kG5MXewHqkbjPtqPueRnXju7uM2NK7y3JYb2ajAZ9EiuZXNNuE4661RAfriBWhL8UsnAPpk8zrKKnZw1Ug7X4oHgMdZiU4E/*))#tsry0s5e\",\n+                            \"active\": True,\n+                            \"range\": 1000,\n+                            \"next_index\": 0,\n+                            \"timestamp\": \"now\"},\n+                            success=True,\n+                            wallet=wmulti_pub)\n+        self.test_importdesc({\"desc\":\"wsh(multi(2,[7b2d0242/84h/1h/0h]tpubDCXqdwWZcszwqYJSnZp8eARkxGJfHAk23KDxbztV4BbschfaTfYLTcSkSJ3TN64dRqwa1rnFUScsYormKkGqNbbPwkorQimVevXjxzUV9Gf/*,[59b09cd6/84h/1h/0h]tpubDCYfZY2ceyHzYzMMVPt9MNeiqtQ2T7Uyp9QSFwYXh8Vi9iJFYXcuphJaGXfF3jUQJi5Y3GMNXvM11gaL4txzZgNGK22BFAwMXynnzv4z2Jh/*,[e81a0532/84h/1h/0h]tpubDC6UGqnsQStngYuGD4MKsMy7eD1Yg9NTJfPdvjdG2JE5oZ7EsSL3WHg4Gsw2pR5K39ZwJ46M1wZayhedVdQtMGaUhq5S23PH6fnENK3V1sb/*))#c08a2rzv\",\n+                            \"active\": True,\n+                            \"internal\" : True,",
      "path": "test/functional/wallet_importdescriptors.py",
      "position": 353,
      "original_position": 278,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "7d1c6bbeb057c18da62201267efc2b675f142da3",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`add importdescriptors RPC and tests for native descriptor wallets`\r\n\r\nshould test the fact that correct change addresses can be drawn now",
      "created_at": "2020-03-27T14:59:45Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399327486",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399327486"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 353,
      "original_line": 353,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399328411",
      "pull_request_review_id": 382872546,
      "id": 399328411,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMyODQxMQ==",
      "diff_hunk": "@@ -0,0 +1,293 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the importdescriptors RPC.\n+\n+Test importdescriptors by generating keys on node0, importing the corresponding\n+descriptors on node1 and then testing the address info for the different address\n+variants.\n+\n+- `get_key()` is called to generate keys on node0 and return the privkeys,\n+  pubkeys and all variants of scriptPubKey and address.\n+- `test_importdesc()` is called to send an importdescriptors call to node1, test\n+  success, and (if unsuccessful) test the error code and error message returned.\n+- `test_address()` is called to call getaddressinfo for an address on node1\n+  and test the values returned.\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.descriptors import descsum_create\n+from test_framework.util import (\n+    assert_equal,\n+)\n+from test_framework.wallet_util import (\n+    get_key,\n+    test_address,\n+)\n+\n+class ImportDescriptorsTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.extra_args = [[\"-addresstype=legacy\"],\n+                           [\"-addresstype=bech32\", \"-keypool=5\"]\n+                          ]\n+        self.setup_clean_chain = True\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def test_importdesc(self, req, success, error_code=None, error_message=None, warnings=None, wallet=None):\n+        \"\"\"Run importdescriptors and assert success\"\"\"\n+        if warnings is None:\n+            warnings = []\n+        wrpc = self.nodes[1].get_wallet_rpc('w1')\n+        if wallet is not None:\n+            wrpc = wallet\n+\n+        result = wrpc.importdescriptors([req])\n+        observed_warnings = []\n+        if 'warnings' in result[0]:\n+           observed_warnings = result[0]['warnings']\n+        assert_equal(\"\\n\".join(sorted(warnings)), \"\\n\".join(sorted(observed_warnings)))\n+        assert_equal(result[0]['success'], success)\n+        if error_code is not None:\n+            assert_equal(result[0]['error']['code'], error_code)\n+            assert_equal(result[0]['error']['message'], error_message)\n+\n+    def run_test(self):\n+        self.log.info('Setting up wallets')\n+        self.nodes[0].createwallet(wallet_name='w0', disable_private_keys=False)\n+        w0 = self.nodes[0].get_wallet_rpc('w0')\n+\n+        self.nodes[1].createwallet(wallet_name='w1', disable_private_keys=True, blank=True, descriptors=True)\n+        w1 = self.nodes[1].get_wallet_rpc('w1')\n+        assert_equal(w1.getwalletinfo()['keypoolsize'], 0)\n+\n+        self.nodes[1].createwallet(wallet_name=\"wpriv\", disable_private_keys=False, blank=True, descriptors=True)\n+        wpriv = self.nodes[1].get_wallet_rpc(\"wpriv\")\n+        assert_equal(wpriv.getwalletinfo()['keypoolsize'], 0)",
      "path": "test/functional/wallet_importdescriptors.py",
      "position": 70,
      "original_position": 68,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "7d1c6bbeb057c18da62201267efc2b675f142da3",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`add importdescriptors RPC and tests for native descriptor wallets`\r\n\r\nWe should be testing that `keypoolsize` ends up the expected size post-active-imports, and not before",
      "created_at": "2020-03-27T15:00:58Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399328411",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399328411"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 70,
      "original_line": 70,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399330460",
      "pull_request_review_id": 382872546,
      "id": 399330460,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMzMDQ2MA==",
      "diff_hunk": "@@ -0,0 +1,293 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the importdescriptors RPC.\n+\n+Test importdescriptors by generating keys on node0, importing the corresponding\n+descriptors on node1 and then testing the address info for the different address\n+variants.\n+\n+- `get_key()` is called to generate keys on node0 and return the privkeys,\n+  pubkeys and all variants of scriptPubKey and address.\n+- `test_importdesc()` is called to send an importdescriptors call to node1, test\n+  success, and (if unsuccessful) test the error code and error message returned.\n+- `test_address()` is called to call getaddressinfo for an address on node1\n+  and test the values returned.\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.descriptors import descsum_create\n+from test_framework.util import (\n+    assert_equal,\n+)\n+from test_framework.wallet_util import (\n+    get_key,\n+    test_address,\n+)\n+\n+class ImportDescriptorsTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.extra_args = [[\"-addresstype=legacy\"],\n+                           [\"-addresstype=bech32\", \"-keypool=5\"]\n+                          ]\n+        self.setup_clean_chain = True\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def test_importdesc(self, req, success, error_code=None, error_message=None, warnings=None, wallet=None):\n+        \"\"\"Run importdescriptors and assert success\"\"\"\n+        if warnings is None:\n+            warnings = []\n+        wrpc = self.nodes[1].get_wallet_rpc('w1')\n+        if wallet is not None:\n+            wrpc = wallet\n+\n+        result = wrpc.importdescriptors([req])\n+        observed_warnings = []\n+        if 'warnings' in result[0]:\n+           observed_warnings = result[0]['warnings']\n+        assert_equal(\"\\n\".join(sorted(warnings)), \"\\n\".join(sorted(observed_warnings)))\n+        assert_equal(result[0]['success'], success)\n+        if error_code is not None:\n+            assert_equal(result[0]['error']['code'], error_code)\n+            assert_equal(result[0]['error']['message'], error_message)\n+\n+    def run_test(self):\n+        self.log.info('Setting up wallets')\n+        self.nodes[0].createwallet(wallet_name='w0', disable_private_keys=False)\n+        w0 = self.nodes[0].get_wallet_rpc('w0')\n+\n+        self.nodes[1].createwallet(wallet_name='w1', disable_private_keys=True, blank=True, descriptors=True)\n+        w1 = self.nodes[1].get_wallet_rpc('w1')\n+        assert_equal(w1.getwalletinfo()['keypoolsize'], 0)\n+\n+        self.nodes[1].createwallet(wallet_name=\"wpriv\", disable_private_keys=False, blank=True, descriptors=True)\n+        wpriv = self.nodes[1].get_wallet_rpc(\"wpriv\")\n+        assert_equal(wpriv.getwalletinfo()['keypoolsize'], 0)\n+\n+        self.log.info('Mining coins')\n+        w0.generatetoaddress(101, w0.getnewaddress())\n+\n+        # RPC importdescriptors -----------------------------------------------\n+\n+        # # Test import fails if no descriptor present\n+        key = get_key(w0)\n+        self.log.info(\"Import should fail if a descriptor is not provided\")\n+        self.test_importdesc({\"timestamp\": \"now\"},\n+                             success=False,\n+                             error_code=-8,\n+                             error_message='Descriptor not found.')\n+\n+        # # Test importing of a P2PKH descriptor\n+        key = get_key(w0)\n+        self.log.info(\"Should import a p2pkh descriptor\")\n+        self.test_importdesc({\"desc\": descsum_create(\"pkh(\" + key.pubkey + \")\"),\n+                              \"timestamp\": \"now\",\n+                              \"label\": \"Descriptor import test\"},\n+                             success=True)\n+        test_address(w1,\n+                     key.p2pkh_addr,\n+                     solvable=True,\n+                     ismine=True,\n+                     labels=[\"Descriptor import test\"])\n+\n+        # # Test importing of a P2SH-P2WPKH descriptor\n+        key = get_key(w0)\n+        self.log.info(\"Should not import a p2sh-p2wpkh descriptor without checksum\")\n+        self.test_importdesc({\"desc\": \"sh(wpkh(\" + key.pubkey + \"))\",\n+                              \"timestamp\": \"now\"\n+                              },\n+                             success=False,\n+                             error_code=-5,\n+                             error_message=\"Missing checksum\")\n+\n+        self.log.info(\"Should not import a p2sh-p2wpkh descriptor that has range specified\")\n+        self.test_importdesc({\"desc\": descsum_create(\"sh(wpkh(\" + key.pubkey + \"))\"),\n+                               \"timestamp\": \"now\",\n+                               \"range\": 1,\n+                              },\n+                              success=False,\n+                              error_code=-8,\n+                              error_message=\"Range should not be specified for an un-ranged descriptor\")\n+\n+        self.log.info(\"Should not import a p2sh-p2wpkh descriptor and have it set to active\")\n+        self.test_importdesc({\"desc\": descsum_create(\"sh(wpkh(\" + key.pubkey + \"))\"),\n+                               \"timestamp\": \"now\",\n+                               \"active\": True,\n+                              },\n+                              success=False,\n+                              error_code=-8,\n+                              error_message=\"Active descriptor must be ranged\")\n+\n+        self.log.info(\"Should import a (non-active) p2sh-p2wpkh descriptor\")\n+        self.test_importdesc({\"desc\": descsum_create(\"sh(wpkh(\" + key.pubkey + \"))\"),\n+                               \"timestamp\": \"now\",\n+                               \"active\": False,",
      "path": "test/functional/wallet_importdescriptors.py",
      "position": 139,
      "original_position": 127,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "7d1c6bbeb057c18da62201267efc2b675f142da3",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`add importdescriptors RPC and tests for native descriptor wallets`\r\n\r\nshould test both ranged and non-ranged descriptors (non-active) don't replace \"keypool\"\r\n",
      "created_at": "2020-03-27T15:03:35Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399330460",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399330460"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 139,
      "original_line": 139,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399333787",
      "pull_request_review_id": 382872546,
      "id": 399333787,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMzMzc4Nw==",
      "diff_hunk": "@@ -0,0 +1,137 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test descriptor wallet function.\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error\n+)\n+\n+\n+class WalletDescriptorTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        self.extra_args = [['-keypool=100']]\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        # Make a descriptor wallet\n+        self.log.info(\"Making a descriptor wallet\")\n+        self.nodes[0].createwallet(wallet_name=\"desc1\", descriptors=True)\n+        self.nodes[0].unloadwallet(\"\")\n+\n+        # A descriptor wallet should have 100 addresses * 3 types = 300 keys\n+        self.log.info(\"Checking wallet info\")\n+        wallet_info = self.nodes[0].getwalletinfo()\n+        assert_equal(wallet_info['keypoolsize'], 300)\n+        assert_equal(wallet_info['keypoolsize_hd_internal'], 300)\n+\n+        # Check that getnewaddress works",
      "path": "test/functional/wallet_descriptor.py",
      "position": 36,
      "original_position": 35,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "15b044fd16c2b26cb28497cf150820b25fafae93",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "need to check they're actually returning the right type as well for all 3 cases (maybe this is caught in a `--descriptor` variant of tests)",
      "created_at": "2020-03-27T15:08:15Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399333787",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399333787"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 36,
      "original_line": 36,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399336346",
      "pull_request_review_id": 382872546,
      "id": 399336346,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMzNjM0Ng==",
      "diff_hunk": "@@ -0,0 +1,293 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the importdescriptors RPC.\n+\n+Test importdescriptors by generating keys on node0, importing the corresponding\n+descriptors on node1 and then testing the address info for the different address\n+variants.\n+\n+- `get_key()` is called to generate keys on node0 and return the privkeys,\n+  pubkeys and all variants of scriptPubKey and address.\n+- `test_importdesc()` is called to send an importdescriptors call to node1, test\n+  success, and (if unsuccessful) test the error code and error message returned.\n+- `test_address()` is called to call getaddressinfo for an address on node1\n+  and test the values returned.\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.descriptors import descsum_create\n+from test_framework.util import (\n+    assert_equal,\n+)\n+from test_framework.wallet_util import (\n+    get_key,\n+    test_address,\n+)\n+\n+class ImportDescriptorsTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.extra_args = [[\"-addresstype=legacy\"],\n+                           [\"-addresstype=bech32\", \"-keypool=5\"]\n+                          ]\n+        self.setup_clean_chain = True\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def test_importdesc(self, req, success, error_code=None, error_message=None, warnings=None, wallet=None):\n+        \"\"\"Run importdescriptors and assert success\"\"\"\n+        if warnings is None:\n+            warnings = []\n+        wrpc = self.nodes[1].get_wallet_rpc('w1')\n+        if wallet is not None:\n+            wrpc = wallet\n+\n+        result = wrpc.importdescriptors([req])\n+        observed_warnings = []\n+        if 'warnings' in result[0]:\n+           observed_warnings = result[0]['warnings']\n+        assert_equal(\"\\n\".join(sorted(warnings)), \"\\n\".join(sorted(observed_warnings)))\n+        assert_equal(result[0]['success'], success)\n+        if error_code is not None:\n+            assert_equal(result[0]['error']['code'], error_code)\n+            assert_equal(result[0]['error']['message'], error_message)\n+\n+    def run_test(self):\n+        self.log.info('Setting up wallets')\n+        self.nodes[0].createwallet(wallet_name='w0', disable_private_keys=False)\n+        w0 = self.nodes[0].get_wallet_rpc('w0')\n+\n+        self.nodes[1].createwallet(wallet_name='w1', disable_private_keys=True, blank=True, descriptors=True)\n+        w1 = self.nodes[1].get_wallet_rpc('w1')\n+        assert_equal(w1.getwalletinfo()['keypoolsize'], 0)\n+\n+        self.nodes[1].createwallet(wallet_name=\"wpriv\", disable_private_keys=False, blank=True, descriptors=True)\n+        wpriv = self.nodes[1].get_wallet_rpc(\"wpriv\")\n+        assert_equal(wpriv.getwalletinfo()['keypoolsize'], 0)\n+\n+        self.log.info('Mining coins')\n+        w0.generatetoaddress(101, w0.getnewaddress())\n+\n+        # RPC importdescriptors -----------------------------------------------\n+\n+        # # Test import fails if no descriptor present\n+        key = get_key(w0)\n+        self.log.info(\"Import should fail if a descriptor is not provided\")\n+        self.test_importdesc({\"timestamp\": \"now\"},\n+                             success=False,\n+                             error_code=-8,\n+                             error_message='Descriptor not found.')\n+\n+        # # Test importing of a P2PKH descriptor\n+        key = get_key(w0)\n+        self.log.info(\"Should import a p2pkh descriptor\")\n+        self.test_importdesc({\"desc\": descsum_create(\"pkh(\" + key.pubkey + \")\"),\n+                              \"timestamp\": \"now\",\n+                              \"label\": \"Descriptor import test\"},\n+                             success=True)\n+        test_address(w1,\n+                     key.p2pkh_addr,\n+                     solvable=True,\n+                     ismine=True,\n+                     labels=[\"Descriptor import test\"])\n+\n+        # # Test importing of a P2SH-P2WPKH descriptor\n+        key = get_key(w0)\n+        self.log.info(\"Should not import a p2sh-p2wpkh descriptor without checksum\")\n+        self.test_importdesc({\"desc\": \"sh(wpkh(\" + key.pubkey + \"))\",\n+                              \"timestamp\": \"now\"\n+                              },\n+                             success=False,\n+                             error_code=-5,\n+                             error_message=\"Missing checksum\")\n+\n+        self.log.info(\"Should not import a p2sh-p2wpkh descriptor that has range specified\")\n+        self.test_importdesc({\"desc\": descsum_create(\"sh(wpkh(\" + key.pubkey + \"))\"),\n+                               \"timestamp\": \"now\",\n+                               \"range\": 1,\n+                              },\n+                              success=False,\n+                              error_code=-8,\n+                              error_message=\"Range should not be specified for an un-ranged descriptor\")\n+\n+        self.log.info(\"Should not import a p2sh-p2wpkh descriptor and have it set to active\")\n+        self.test_importdesc({\"desc\": descsum_create(\"sh(wpkh(\" + key.pubkey + \"))\"),\n+                               \"timestamp\": \"now\",\n+                               \"active\": True,\n+                              },\n+                              success=False,\n+                              error_code=-8,\n+                              error_message=\"Active descriptor must be ranged\")\n+\n+        self.log.info(\"Should import a (non-active) p2sh-p2wpkh descriptor\")\n+        self.test_importdesc({\"desc\": descsum_create(\"sh(wpkh(\" + key.pubkey + \"))\"),\n+                               \"timestamp\": \"now\",\n+                               \"active\": False,\n+                              },\n+                              success=True)\n+\n+        test_address(w1,\n+                     key.p2sh_p2wpkh_addr,\n+                     ismine=True,\n+                     solvable=True)\n+\n+        # # Test importing of a multisig descriptor",
      "path": "test/functional/wallet_importdescriptors.py",
      "position": 149,
      "original_position": 136,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "7d1c6bbeb057c18da62201267efc2b675f142da3",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`add importdescriptors RPC and tests for native descriptor wallets`\r\n\r\nWe should also test `sh(wsh())` and make sure that the various imports aren't \"displacing\" the other types. (I didn't see it might have missed it)",
      "created_at": "2020-03-27T15:11:55Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399336346",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399336346"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 149,
      "original_line": 149,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399350834",
      "pull_request_review_id": 382966268,
      "id": 399350834,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM1MDgzNA==",
      "diff_hunk": "@@ -1459,3 +1459,290 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n \n     return response;\n }\n+\n+static UniValue ProcessDescriptorImport(CWallet * const pwallet, const UniValue& data, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    UniValue warnings(UniValue::VARR);\n+    UniValue result(UniValue::VOBJ);\n+\n+    try {\n+        if (!data.exists(\"desc\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Descriptor not found.\");\n+        }\n+\n+        const std::string& descriptor = data[\"desc\"].get_str();\n+        const bool active = data.exists(\"active\") ? data[\"active\"].get_bool() : false;\n+        const bool internal = data.exists(\"internal\") ? data[\"internal\"].get_bool() : false;\n+        const std::string& label = data.exists(\"label\") ? data[\"label\"].get_str() : \"\";\n+\n+        // Parse descriptor string\n+        FlatSigningProvider keys;\n+        std::string error;\n+        auto parsed_desc = Parse(descriptor, keys, error, /* require_checksum = */ true);\n+        if (!parsed_desc) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, error);\n+        }\n+\n+        // Range check\n+        int64_t range_start = 0, range_end = 1, next_index = 0;\n+        if (!parsed_desc->IsRange() && data.exists(\"range\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Range should not be specified for an un-ranged descriptor\");\n+        } else if (parsed_desc->IsRange()) {\n+            if (data.exists(\"range\")) {\n+                auto range = ParseDescriptorRange(data[\"range\"]);\n+                range_start = range.first;\n+                range_end = range.second + 1; // Specified range end is inclusive, but we need range end as exclusive\n+            } else {\n+                warnings.push_back(\"Range not given, using default keypool range\");\n+                range_start = 0;\n+                range_end = gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE);\n+            }\n+            next_index = range_start;\n+\n+            if (data.exists(\"next_index\")) {\n+                next_index = data[\"next_index\"].get_int64();\n+                // bound checks\n+                if (next_index < range_start || next_index >= range_end) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"next_index is out of range\");\n+                }\n+            }\n+        }\n+\n+        // Active descriptor must be ranged\n+        if (active && !parsed_desc->IsRange()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Active descriptor must be ranged\");\n+        }\n+\n+        // Ranged descriptors should not have a label\n+        if (data.exists(\"range\") && data.exists(\"label\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Ranged descriptors should not have a label\");\n+        }\n+\n+        // Internal addresses should not have a label either\n+        if (internal && data.exists(\"label\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Internal addresses should not have a label\");\n+        }\n+\n+        // Combo descriptor check\n+        if (active && !parsed_desc->IsSingleType()) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Combo descriptors cannot be set to active\");\n+        }\n+\n+        // If the wallet disabled private keys, abort if private keys exist\n+        if (pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS) && !keys.keys.empty()) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Cannot import private keys to a wallet with private keys disabled\");\n+        }\n+\n+        // Check if all private keys are provided\n+        bool have_privkeys = true;\n+        for (const auto& entry : keys.pubkeys) {\n+            const CKeyID& key_id = entry.first;\n+            CKey key;\n+            if (!keys.GetKey(key_id, key)) {\n+                have_privkeys = false;\n+            }\n+        }\n+\n+        // If private keys are enabled, abort if private keys are not provided\n+        if (!pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS) && !have_privkeys) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Cannot import descriptor without private keys to a wallet with private keys enabled\");\n+        }\n+\n+        WalletDescriptor w_desc(std::move(parsed_desc), timestamp, range_start, range_end, next_index);\n+\n+        // Check if the wallet already contains the descriptor\n+        auto existing_spk_manager = pwallet->HasWalletDescriptor(w_desc);\n+        if (existing_spk_manager) {\n+            LOCK(existing_spk_manager->cs_desc_man);\n+            if (range_start > existing_spk_manager->GetWalletDescriptor().range_start) {\n+                throw JSONRPCError(RPC_INVALID_PARAMS, strprintf(\"range_start can only decrease; current range = [%d,%d]\", existing_spk_manager->GetWalletDescriptor().range_start, existing_spk_manager->GetWalletDescriptor().range_end));\n+            }\n+        }\n+\n+        // Add descriptor to the wallet\n+        auto spk_manager = pwallet->AddWalletDescriptor(w_desc, keys, label);\n+        if (spk_manager == nullptr) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, strprintf(\"Could not add descriptor '%s'\", descriptor));\n+        }\n+\n+        // Set descriptor as active if necessary\n+        if (active) {\n+            if (!w_desc.descriptor->GetOutputType()) {\n+                warnings.push_back(\"Unknown output type, cannot set descriptor to active.\");",
      "path": "src/wallet/rpcdump.cpp",
      "position": 125,
      "original_position": 113,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "a03a8cbd1f42636834263135e904900cc808d346",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "note: not sure how this can be hit. Has to be a ranged descriptor that is \"null\"",
      "created_at": "2020-03-27T15:32:18Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399350834",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399350834"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1582,
      "original_line": 1582,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399361504",
      "pull_request_review_id": 382979745,
      "id": 399361504,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM2MTUwNA==",
      "diff_hunk": "@@ -1459,3 +1459,290 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n \n     return response;\n }\n+\n+static UniValue ProcessDescriptorImport(CWallet * const pwallet, const UniValue& data, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    UniValue warnings(UniValue::VARR);\n+    UniValue result(UniValue::VOBJ);\n+\n+    try {\n+        if (!data.exists(\"desc\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Descriptor not found.\");\n+        }\n+\n+        const std::string& descriptor = data[\"desc\"].get_str();\n+        const bool active = data.exists(\"active\") ? data[\"active\"].get_bool() : false;\n+        const bool internal = data.exists(\"internal\") ? data[\"internal\"].get_bool() : false;\n+        const std::string& label = data.exists(\"label\") ? data[\"label\"].get_str() : \"\";\n+\n+        // Parse descriptor string\n+        FlatSigningProvider keys;\n+        std::string error;\n+        auto parsed_desc = Parse(descriptor, keys, error, /* require_checksum = */ true);\n+        if (!parsed_desc) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, error);\n+        }\n+\n+        // Range check\n+        int64_t range_start = 0, range_end = 1, next_index = 0;\n+        if (!parsed_desc->IsRange() && data.exists(\"range\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Range should not be specified for an un-ranged descriptor\");\n+        } else if (parsed_desc->IsRange()) {\n+            if (data.exists(\"range\")) {\n+                auto range = ParseDescriptorRange(data[\"range\"]);\n+                range_start = range.first;\n+                range_end = range.second + 1; // Specified range end is inclusive, but we need range end as exclusive\n+            } else {\n+                warnings.push_back(\"Range not given, using default keypool range\");\n+                range_start = 0;\n+                range_end = gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE);\n+            }\n+            next_index = range_start;\n+\n+            if (data.exists(\"next_index\")) {\n+                next_index = data[\"next_index\"].get_int64();\n+                // bound checks\n+                if (next_index < range_start || next_index >= range_end) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"next_index is out of range\");\n+                }\n+            }\n+        }\n+\n+        // Active descriptor must be ranged\n+        if (active && !parsed_desc->IsRange()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Active descriptor must be ranged\");\n+        }\n+\n+        // Ranged descriptors should not have a label\n+        if (data.exists(\"range\") && data.exists(\"label\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Ranged descriptors should not have a label\");\n+        }\n+\n+        // Internal addresses should not have a label either\n+        if (internal && data.exists(\"label\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Internal addresses should not have a label\");\n+        }\n+\n+        // Combo descriptor check\n+        if (active && !parsed_desc->IsSingleType()) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Combo descriptors cannot be set to active\");\n+        }\n+\n+        // If the wallet disabled private keys, abort if private keys exist\n+        if (pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS) && !keys.keys.empty()) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Cannot import private keys to a wallet with private keys disabled\");\n+        }\n+\n+        // Check if all private keys are provided\n+        bool have_privkeys = true;\n+        for (const auto& entry : keys.pubkeys) {\n+            const CKeyID& key_id = entry.first;\n+            CKey key;\n+            if (!keys.GetKey(key_id, key)) {\n+                have_privkeys = false;\n+            }\n+        }\n+\n+        // If private keys are enabled, abort if private keys are not provided\n+        if (!pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS) && !have_privkeys) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Cannot import descriptor without private keys to a wallet with private keys enabled\");\n+        }\n+\n+        WalletDescriptor w_desc(std::move(parsed_desc), timestamp, range_start, range_end, next_index);\n+\n+        // Check if the wallet already contains the descriptor\n+        auto existing_spk_manager = pwallet->HasWalletDescriptor(w_desc);\n+        if (existing_spk_manager) {\n+            LOCK(existing_spk_manager->cs_desc_man);\n+            if (range_start > existing_spk_manager->GetWalletDescriptor().range_start) {\n+                throw JSONRPCError(RPC_INVALID_PARAMS, strprintf(\"range_start can only decrease; current range = [%d,%d]\", existing_spk_manager->GetWalletDescriptor().range_start, existing_spk_manager->GetWalletDescriptor().range_end));\n+            }\n+        }\n+\n+        // Add descriptor to the wallet\n+        auto spk_manager = pwallet->AddWalletDescriptor(w_desc, keys, label);\n+        if (spk_manager == nullptr) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, strprintf(\"Could not add descriptor '%s'\", descriptor));\n+        }\n+\n+        // Set descriptor as active if necessary\n+        if (active) {\n+            if (!w_desc.descriptor->GetOutputType()) {\n+                warnings.push_back(\"Unknown output type, cannot set descriptor to active.\");\n+            } else {\n+                pwallet->SetActiveScriptPubKeyMan(spk_manager->GetID(), *w_desc.descriptor->GetOutputType(), internal);\n+            }\n+        }\n+\n+        result.pushKV(\"success\", UniValue(true));\n+    } catch (const UniValue& e) {\n+        result.pushKV(\"success\", UniValue(false));\n+        result.pushKV(\"error\", e);\n+    } catch (...) {\n+        result.pushKV(\"success\", UniValue(false));\n+\n+        result.pushKV(\"error\", JSONRPCError(RPC_MISC_ERROR, \"Missing required fields\"));\n+    }\n+    if (warnings.size()) result.pushKV(\"warnings\", warnings);\n+    return result;\n+}\n+\n+UniValue importdescriptors(const JSONRPCRequest& main_request) {\n+    // Acquire the wallet\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(main_request);\n+    CWallet* const pwallet = wallet.get();\n+    if (!EnsureWalletIsAvailable(pwallet, main_request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+            RPCHelpMan{\"importdescriptors\",\n+                \"\\nImport descriptors. This will trigger a rescan of the blockchain based on the earliest timestamp of all descriptors being imported. Requires a new wallet backup.\\n\"\n+            \"\\nNote: This call can take over an hour to complete if using an early timestamp, during that time, other rpc calls\\n\"\n+            \"may report that the imported keys, addresses or scripts exists but related transactions are still missing.\\n\",\n+                {\n+                    {\"requests\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"Data to be imported\",\n+                        {\n+                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                                {\n+                                    {\"desc\", RPCArg::Type::STR, RPCArg::Optional::NO, \"Descriptor to import.\"},\n+                                    {\"active\", RPCArg::Type::BOOL, /* default */ \"true\", \"Set this descriptor to be the active descriptor for the corresponding output type/externality\"},",
      "path": "src/wallet/rpcdump.cpp",
      "position": null,
      "original_position": 150,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "a03a8cbd1f42636834263135e904900cc808d346",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "default is actually false in the code",
      "created_at": "2020-03-27T15:47:38Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399361504",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399361504"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1608,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399363853",
      "pull_request_review_id": 382982687,
      "id": 399363853,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM2Mzg1Mw==",
      "diff_hunk": "@@ -0,0 +1,293 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the importdescriptors RPC.\n+",
      "path": "test/functional/wallet_importdescriptors.py",
      "position": 6,
      "original_position": 6,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "a03a8cbd1f42636834263135e904900cc808d346",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "this test needs to check default arguments like `active`",
      "created_at": "2020-03-27T15:50:48Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399363853",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399363853"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 6,
      "original_line": 6,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399405664",
      "pull_request_review_id": 383035261,
      "id": 399405664,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQwNTY2NA==",
      "diff_hunk": "@@ -1459,3 +1459,290 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n \n     return response;\n }\n+\n+static UniValue ProcessDescriptorImport(CWallet * const pwallet, const UniValue& data, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    UniValue warnings(UniValue::VARR);\n+    UniValue result(UniValue::VOBJ);\n+\n+    try {\n+        if (!data.exists(\"desc\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Descriptor not found.\");\n+        }\n+\n+        const std::string& descriptor = data[\"desc\"].get_str();\n+        const bool active = data.exists(\"active\") ? data[\"active\"].get_bool() : false;\n+        const bool internal = data.exists(\"internal\") ? data[\"internal\"].get_bool() : false;\n+        const std::string& label = data.exists(\"label\") ? data[\"label\"].get_str() : \"\";\n+\n+        // Parse descriptor string\n+        FlatSigningProvider keys;\n+        std::string error;\n+        auto parsed_desc = Parse(descriptor, keys, error, /* require_checksum = */ true);\n+        if (!parsed_desc) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, error);\n+        }\n+\n+        // Range check\n+        int64_t range_start = 0, range_end = 1, next_index = 0;\n+        if (!parsed_desc->IsRange() && data.exists(\"range\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Range should not be specified for an un-ranged descriptor\");\n+        } else if (parsed_desc->IsRange()) {\n+            if (data.exists(\"range\")) {\n+                auto range = ParseDescriptorRange(data[\"range\"]);\n+                range_start = range.first;\n+                range_end = range.second + 1; // Specified range end is inclusive, but we need range end as exclusive\n+            } else {\n+                warnings.push_back(\"Range not given, using default keypool range\");\n+                range_start = 0;\n+                range_end = gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE);\n+            }\n+            next_index = range_start;\n+\n+            if (data.exists(\"next_index\")) {\n+                next_index = data[\"next_index\"].get_int64();\n+                // bound checks\n+                if (next_index < range_start || next_index >= range_end) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"next_index is out of range\");\n+                }\n+            }\n+        }\n+\n+        // Active descriptor must be ranged\n+        if (active && !parsed_desc->IsRange()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Active descriptor must be ranged\");\n+        }\n+\n+        // Ranged descriptors should not have a label\n+        if (data.exists(\"range\") && data.exists(\"label\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Ranged descriptors should not have a label\");\n+        }\n+\n+        // Internal addresses should not have a label either\n+        if (internal && data.exists(\"label\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Internal addresses should not have a label\");\n+        }\n+\n+        // Combo descriptor check\n+        if (active && !parsed_desc->IsSingleType()) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Combo descriptors cannot be set to active\");\n+        }\n+\n+        // If the wallet disabled private keys, abort if private keys exist\n+        if (pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS) && !keys.keys.empty()) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Cannot import private keys to a wallet with private keys disabled\");\n+        }\n+\n+        // Check if all private keys are provided\n+        bool have_privkeys = true;\n+        for (const auto& entry : keys.pubkeys) {\n+            const CKeyID& key_id = entry.first;\n+            CKey key;\n+            if (!keys.GetKey(key_id, key)) {\n+                have_privkeys = false;\n+            }\n+        }\n+\n+        // If private keys are enabled, abort if private keys are not provided\n+        if (!pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS) && !have_privkeys) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Cannot import descriptor without private keys to a wallet with private keys enabled\");\n+        }\n+\n+        WalletDescriptor w_desc(std::move(parsed_desc), timestamp, range_start, range_end, next_index);\n+\n+        // Check if the wallet already contains the descriptor\n+        auto existing_spk_manager = pwallet->HasWalletDescriptor(w_desc);\n+        if (existing_spk_manager) {\n+            LOCK(existing_spk_manager->cs_desc_man);\n+            if (range_start > existing_spk_manager->GetWalletDescriptor().range_start) {\n+                throw JSONRPCError(RPC_INVALID_PARAMS, strprintf(\"range_start can only decrease; current range = [%d,%d]\", existing_spk_manager->GetWalletDescriptor().range_start, existing_spk_manager->GetWalletDescriptor().range_end));\n+            }\n+        }\n+\n+        // Add descriptor to the wallet\n+        auto spk_manager = pwallet->AddWalletDescriptor(w_desc, keys, label);\n+        if (spk_manager == nullptr) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, strprintf(\"Could not add descriptor '%s'\", descriptor));\n+        }\n+\n+        // Set descriptor as active if necessary\n+        if (active) {\n+            if (!w_desc.descriptor->GetOutputType()) {\n+                warnings.push_back(\"Unknown output type, cannot set descriptor to active.\");",
      "path": "src/wallet/rpcdump.cpp",
      "position": 125,
      "original_position": 113,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "a03a8cbd1f42636834263135e904900cc808d346",
      "in_reply_to_id": 399350834,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`pk(xpub...)` should hit this. I'll try adding a test.",
      "created_at": "2020-03-27T16:53:19Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399405664",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399405664"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1582,
      "original_line": 1582,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399434828",
      "pull_request_review_id": 383071782,
      "id": 399434828,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQzNDgyOA==",
      "diff_hunk": "@@ -86,4 +87,38 @@ class WalletLocation final\n     bool Exists() const;\n };\n \n+/** Descriptor with some wallet metadata */\n+class WalletDescriptor\n+{\n+public:\n+    std::shared_ptr<Descriptor> descriptor;\n+    uint64_t creation_time;\n+    int32_t range_start; // First item in range; start of range, inclusive, i.e. [range_start, range_end). This never changes.\n+    int32_t range_end; // Item after the last; end of range, exclusive, i.e. [range_start, range_end). This will increment with each TopUp()\n+    int32_t next_index; // Position of the next item to generate\n+    DescriptorCache cache;\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        if (ser_action.ForRead()) {\n+            std::string desc;\n+            std::string error;\n+            READWRITE(desc);\n+            FlatSigningProvider keys;\n+            descriptor = Parse(desc, keys, error, true);",
      "path": "src/wallet/walletutil.h",
      "position": 42,
      "original_position": 32,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "f0a15b8aa1f2cc5c91162b747170faa452944d9b",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "What happens if this fails? Would be good to have a test for a malformed descriptor.",
      "created_at": "2020-03-27T17:40:47Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399434828",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399434828"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 110,
      "original_line": 110,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399436260",
      "pull_request_review_id": 383071782,
      "id": 399436260,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQzNjI2MA==",
      "diff_hunk": "@@ -86,4 +87,38 @@ class WalletLocation final\n     bool Exists() const;\n };\n \n+/** Descriptor with some wallet metadata */\n+class WalletDescriptor\n+{\n+public:\n+    std::shared_ptr<Descriptor> descriptor;\n+    uint64_t creation_time;\n+    int32_t range_start; // First item in range; start of range, inclusive, i.e. [range_start, range_end). This never changes.\n+    int32_t range_end; // Item after the last; end of range, exclusive, i.e. [range_start, range_end). This will increment with each TopUp()\n+    int32_t next_index; // Position of the next item to generate\n+    DescriptorCache cache;\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        if (ser_action.ForRead()) {\n+            std::string desc;\n+            std::string error;\n+            READWRITE(desc);\n+            FlatSigningProvider keys;\n+            descriptor = Parse(desc, keys, error, true);\n+        } else {\n+            READWRITE(descriptor->ToString());",
      "path": "src/wallet/walletutil.h",
      "position": 47,
      "original_position": 34,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "f0a15b8aa1f2cc5c91162b747170faa452944d9b",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'm still not very excited about string serialisation, because it sets descriptors in stone. On the other hand, we can also write a straight-forward upgrade script, since descriptors are not encrypted.",
      "created_at": "2020-03-27T17:43:11Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399436260",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399436260"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 115,
      "original_line": 115,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399447890",
      "pull_request_review_id": 383071782,
      "id": 399447890,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ0Nzg5MA==",
      "diff_hunk": "@@ -179,6 +182,15 @@ bool WalletBatch::WriteMinVersion(int nVersion)\n     return WriteIC(DBKeys::MINVERSION, nVersion);\n }\n \n+bool WalletBatch::WriteActiveScriptPubKeyMan(uint8_t type, const uint256& id, bool internal)",
      "path": "src/wallet/walletdb.cpp",
      "position": 24,
      "original_position": 23,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "6fa9c482c51576c97b7e02a767d0b328dbbb52fc",
      "in_reply_to_id": 395865796,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It would be nice to avoid this `ACTIVE[INTERNAL/EXTERNAL]SPK` record altogether and just add two fields to  `WALLETDESCRIPTOR`. I vaguely recall there was a problem with loading order, as the reason we have separate records?",
      "created_at": "2020-03-27T18:02:45Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399447890",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399447890"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 188,
      "original_line": 188,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399449698",
      "pull_request_review_id": 383071782,
      "id": 399449698,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ0OTY5OA==",
      "diff_hunk": "@@ -1214,6 +1214,12 @@ class CWallet final : public WalletStorage, private interfaces::Chain::Notificat\n \n     //! Connect the signals from ScriptPubKeyMans to the signals in CWallet\n     void ConnectScriptPubKeyManNotifiers();\n+\n+    //! Instantiate a descriptor ScriptPubKeyMan from the WalletDescriptor and load it\n+    void LoadDescriptorScriptPubKeyMan(uint256 id, WalletDescriptor& desc);\n+\n+    //! Sets the active ScriptPubKeyMan for the specified type and internal",
      "path": "src/wallet/wallet.h",
      "position": 36,
      "original_position": 8,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "ed75ce9649ce7a26146b45bb85584f5522945a3d",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`memonly` could use some documentation (IIUC it depends on if you're loading an existing wallet, or inserting a new descriptor; it's not some test suite hack)",
      "created_at": "2020-03-27T18:06:10Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399449698",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399449698"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1244,
      "original_line": 1244,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399459055",
      "pull_request_review_id": 383071782,
      "id": 399459055,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ1OTA1NQ==",
      "diff_hunk": "@@ -1539,6 +1539,17 @@ bool DescriptorScriptPubKeyMan::TopUp(unsigned int size)\n \n void DescriptorScriptPubKeyMan::MarkUnusedAddresses(const CScript& script)\n {\n+    LOCK(cs_desc_man);\n+    if (IsMine(script)) {\n+        int32_t index = m_map_script_pub_keys[script];\n+        if (index >= m_wallet_descriptor.next_index) {\n+            WalletLogPrintf(\"%s: Detected a used keypool item, mark all keypool items up to this item as used\\n\", __func__);",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 8,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "68cef400b94fbe2ad592ccdf54fb6dcf9e78389e",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Nit: can you add `index` to the log message?",
      "created_at": "2020-03-27T18:22:49Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399459055",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399459055"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1546,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399459919",
      "pull_request_review_id": 383071782,
      "id": 399459919,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ1OTkxOQ==",
      "diff_hunk": "@@ -1539,6 +1539,17 @@ bool DescriptorScriptPubKeyMan::TopUp(unsigned int size)\n \n void DescriptorScriptPubKeyMan::MarkUnusedAddresses(const CScript& script)\n {\n+    LOCK(cs_desc_man);\n+    if (IsMine(script)) {",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 266,
      "original_position": 5,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "71f9ce5e93b2a66fcd76d9d7467a83470e030c93",
      "in_reply_to_id": 395872979,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: you do an early return here\r\n\r\n@instagibbs IIUC earlier behaviour can still be mimicked with a `combo()` descriptor.",
      "created_at": "2020-03-27T18:24:18Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399459919",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399459919"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1736,
      "original_line": 1736,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399462420",
      "pull_request_review_id": 383071782,
      "id": 399462420,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ2MjQyMA==",
      "diff_hunk": "@@ -1554,7 +1554,8 @@ void DescriptorScriptPubKeyMan::MarkUnusedAddresses(const CScript& script)\n \n bool DescriptorScriptPubKeyMan::IsHDEnabled() const\n {\n-    return false;\n+    LOCK(cs_desc_man);\n+    return m_wallet_descriptor.descriptor->IsRange();",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 381,
      "original_position": 6,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "fbd356690fab88c7fc10b300b71ef13d5ab14032",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "You may have to change the wallet to use `|=` instead of `&=`.",
      "created_at": "2020-03-27T18:28:58Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399462420",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399462420"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1851,
      "original_line": 1851,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399464603",
      "pull_request_review_id": 383071782,
      "id": 399464603,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ2NDYwMw==",
      "diff_hunk": "@@ -1627,4 +1627,8 @@ uint256 DescriptorScriptPubKeyMan::GetID() const\n     return id;\n }\n \n-void DescriptorScriptPubKeyMan::SetType(OutputType type, bool internal) {}\n+void DescriptorScriptPubKeyMan::SetType(OutputType type, bool internal)",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 610,
      "original_position": 5,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "0708467ad1243fdca15f7498fb94a2eadcf3f4d8",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "You're already using this function in ed75ce9649ce7a26146b45bb85584f5522945a3d, so may want to move this commit up (though it does compile).",
      "created_at": "2020-03-27T18:33:01Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399464603",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399464603"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2080,
      "original_line": 2080,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399466760",
      "pull_request_review_id": 383071782,
      "id": 399466760,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ2Njc2MA==",
      "diff_hunk": "@@ -1632,3 +1632,18 @@ void DescriptorScriptPubKeyMan::SetType(OutputType type, bool internal)\n     this->m_address_type = type;\n     this->m_internal = internal;\n }\n+\n+void DescriptorScriptPubKeyMan::SetCache(const DescriptorCache& cache)\n+{\n+    LOCK(cs_desc_man);\n+    m_wallet_descriptor.cache = cache;\n+    for (int32_t i = m_wallet_descriptor.range_start; i < m_wallet_descriptor.range_end; ++i) {\n+        FlatSigningProvider out_keys;\n+        std::vector<CScript> scripts_temp;\n+        m_wallet_descriptor.descriptor->ExpandFromCache(i, m_wallet_descriptor.cache, scripts_temp, out_keys);",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 12,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "0abf7b960c82e9d5b6973ea3c2baee7d696c5145",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Should check if this fails.",
      "created_at": "2020-03-27T18:37:10Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399466760",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399466760"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1643,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399468023",
      "pull_request_review_id": 383071782,
      "id": 399468023,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ2ODAyMw==",
      "diff_hunk": "@@ -1632,3 +1632,18 @@ void DescriptorScriptPubKeyMan::SetType(OutputType type, bool internal)\n     this->m_address_type = type;\n     this->m_internal = internal;\n }\n+\n+void DescriptorScriptPubKeyMan::SetCache(const DescriptorCache& cache)\n+{\n+    LOCK(cs_desc_man);\n+    m_wallet_descriptor.cache = cache;\n+    for (int32_t i = m_wallet_descriptor.range_start; i < m_wallet_descriptor.range_end; ++i) {\n+        FlatSigningProvider out_keys;\n+        std::vector<CScript> scripts_temp;\n+        m_wallet_descriptor.descriptor->ExpandFromCache(i, m_wallet_descriptor.cache, scripts_temp, out_keys);\n+        // Add all of the scriptPubKeys to the scriptPubKey set\n+        for (const CScript& script : scripts_temp) {\n+            m_map_script_pub_keys[script] = i;",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 631,
      "original_position": 15,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "0abf7b960c82e9d5b6973ea3c2baee7d696c5145",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Do we want to panic if `m_map_script_pub_keys[script]` exists and `!= i`?",
      "created_at": "2020-03-27T18:39:35Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399468023",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399468023"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2101,
      "original_line": 2101,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399472037",
      "pull_request_review_id": 383071782,
      "id": 399472037,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ3MjAzNw==",
      "diff_hunk": "@@ -434,7 +436,38 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             ssKey >> id;\n             WalletDescriptor desc;\n             ssValue >> desc;\n+            if (wss.m_descriptor_caches.count(id) == 0) {\n+                wss.m_descriptor_caches[id] = DescriptorCache();\n+            }\n             pwallet->LoadDescriptorScriptPubKeyMan(id, desc);\n+        } else if (strType == DBKeys::WALLETDESCRIPTORCACHE) {\n+            bool parent = true;\n+            uint256 desc_id;\n+            uint32_t key_exp_index;\n+            uint32_t der_index;\n+            ssKey >> desc_id;\n+            ssKey >> key_exp_index;\n+\n+            // if the der_index exists, it's a derived xpub\n+            try",
      "path": "src/wallet/walletdb.cpp",
      "position": 119,
      "original_position": 33,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "0abf7b960c82e9d5b6973ea3c2baee7d696c5145",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'm not a fan. Let's just have `WALLETDESCRIPTORCACHEPARENTXPUB` and `WALLETDESCRIPTORCACHEDERIVEDXPUB`, and maybe some underscores :-)",
      "created_at": "2020-03-27T18:47:07Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399472037",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399472037"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 494,
      "original_line": 494,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399473488",
      "pull_request_review_id": 383071782,
      "id": 399473488,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ3MzQ4OA==",
      "diff_hunk": "@@ -536,6 +569,13 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\n         pwallet->SetActiveScriptPubKeyMan(spk_man_pair.second, spk_man_pair.first, /* internal */ true, /* memonly */ true);\n     }\n \n+    // Set the descriptor caches\n+    for (auto desc_cache_pair : wss.m_descriptor_caches) {\n+        auto spk_man = pwallet->GetScriptPubKeyMan(desc_cache_pair.first);\n+        assert(spk_man);\n+        ((DescriptorScriptPubKeyMan*)spk_man)->SetCache(desc_cache_pair.second);",
      "path": "src/wallet/walletdb.cpp",
      "position": 209,
      "original_position": 63,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "0abf7b960c82e9d5b6973ea3c2baee7d696c5145",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Do we want to check the cache for gaps and emit a warning?",
      "created_at": "2020-03-27T18:49:36Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399473488",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399473488"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 670,
      "original_line": 670,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399480181",
      "pull_request_review_id": 383071782,
      "id": 399480181,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ4MDE4MQ==",
      "diff_hunk": "@@ -1496,3 +1496,616 @@ std::set<CKeyID> LegacyScriptPubKeyMan::GetKeys() const\n     }\n     return set_address;\n }\n+\n+void LegacyScriptPubKeyMan::SetType(OutputType type, bool internal) {}\n+\n+bool DescriptorScriptPubKeyMan::GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error)\n+{\n+    // Returns true if this descriptor supports getting new addresses. Conditions where we may be unable to fetch them (e.g. locked) are caught later\n+    if (!CanGetAddresses(m_internal)) {\n+        error = \"No addresses available\";\n+        return false;\n+    }\n+    {\n+        LOCK(cs_desc_man);\n+        assert(m_wallet_descriptor.descriptor->IsSingleType()); // This is a combo descriptor which should not be an active descriptor\n+        if (type != m_address_type) {\n+            throw std::runtime_error(std::string(__func__) + \": Types are inconsistent\");\n+        }\n+\n+        TopUp();\n+\n+        // Get the scriptPubKey from the descriptor\n+        FlatSigningProvider out_keys;\n+        std::vector<CScript> scripts_temp;\n+        if (m_wallet_descriptor.range_end <= m_max_cached_index && !TopUp(1)) {\n+            // We can't generate anymore keys\n+            error = \"Error: Keypool ran out, please call keypoolrefill first\";\n+            return false;\n+        }\n+        if (!m_wallet_descriptor.descriptor->ExpandFromCache(m_wallet_descriptor.next_index, m_wallet_descriptor.cache, scripts_temp, out_keys)) {\n+            // We can't generate anymore keys\n+            error = \"Error: Keypool ran out, please call keypoolrefill first\";\n+            return false;\n+        }\n+\n+        Optional<OutputType> out_script_type = m_wallet_descriptor.descriptor->GetOutputType();\n+        if (out_script_type && out_script_type == type) {\n+            ExtractDestination(scripts_temp[0], dest);\n+        } else {\n+            throw std::runtime_error(std::string(__func__) + \": Types are inconsistent. Stored type does not match type of newly generated address\");\n+        }\n+        m_wallet_descriptor.next_index++;\n+        WalletBatch(m_storage.GetDatabase()).WriteDescriptor(GetID(), m_wallet_descriptor);\n+        return true;\n+    }\n+}\n+\n+isminetype DescriptorScriptPubKeyMan::IsMine(const CScript& script) const\n+{\n+    LOCK(cs_desc_man);\n+    if (m_map_script_pub_keys.count(script) > 0) {\n+        return ISMINE_SPENDABLE;\n+    }\n+    return ISMINE_NO;\n+}\n+\n+bool DescriptorScriptPubKeyMan::CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys)\n+{\n+    {\n+        LOCK(cs_desc_man);\n+        if (!m_map_keys.empty())\n+            return false;\n+\n+        bool keyPass = m_map_crypted_keys.empty(); // Always pass when there are no encrypted keys\n+        bool keyFail = false;\n+        CryptedKeyMap::const_iterator mi = m_map_crypted_keys.begin();\n+        for (; mi != m_map_crypted_keys.end(); ++mi)\n+        {\n+            const CPubKey &pubkey = (*mi).second.first;\n+            const std::vector<unsigned char> &crypted_secret = (*mi).second.second;\n+            CKey key;\n+            if (!DecryptKey(master_key, crypted_secret, pubkey, key))\n+            {\n+                keyFail = true;\n+                break;\n+            }\n+            keyPass = true;\n+            if (m_decryption_thoroughly_checked)\n+                break;\n+        }\n+        if (keyPass && keyFail)\n+        {\n+            LogPrintf(\"The wallet is probably corrupted: Some keys decrypt but not all.\\n\");\n+            throw std::runtime_error(\"Error unlocking wallet: some keys decrypt but not all. Your wallet file may be corrupt.\");\n+        }\n+        if (keyFail || (!keyPass && !accept_no_keys))\n+            return false;\n+        m_decryption_thoroughly_checked = true;\n+    }\n+    return true;\n+}\n+\n+bool DescriptorScriptPubKeyMan::Encrypt(const CKeyingMaterial& master_key, WalletBatch* batch)\n+{\n+    LOCK(cs_desc_man);\n+    if (!m_map_crypted_keys.empty()) {\n+        return false;\n+    }\n+\n+    for (const KeyMap::value_type& key_in : m_map_keys)\n+    {\n+        const CKey &key = key_in.second;\n+        CPubKey pubkey = key.GetPubKey();\n+        CKeyingMaterial secret(key.begin(), key.end());\n+        std::vector<unsigned char> crypted_secret;\n+        if (!EncryptSecret(master_key, secret, pubkey.GetHash(), crypted_secret)) {\n+            return false;\n+        }\n+        m_map_crypted_keys[pubkey.GetID()] = make_pair(pubkey, crypted_secret);\n+        batch->WriteCryptedDescriptorKey(GetID(), pubkey, crypted_secret);\n+    }\n+    m_map_keys.clear();\n+    return true;\n+}\n+\n+bool DescriptorScriptPubKeyMan::GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool)\n+{\n+    LOCK(cs_desc_man);\n+    std::string error;\n+    bool result = GetNewDestination(type, address, error);\n+    index = m_wallet_descriptor.next_index - 1;\n+    return result;\n+}\n+\n+void DescriptorScriptPubKeyMan::ReturnDestination(int64_t index, bool internal, const CTxDestination& addr)\n+{\n+    LOCK(cs_desc_man);\n+    // Only return when the index was the most recent\n+    if (m_wallet_descriptor.next_index - 1 == index) {\n+        m_wallet_descriptor.next_index--;\n+    }\n+    WalletBatch(m_storage.GetDatabase()).WriteDescriptor(GetID(), m_wallet_descriptor);\n+    NotifyCanGetAddressesChanged();\n+}\n+\n+std::map<CKeyID, CKey> DescriptorScriptPubKeyMan::GetKeys() const\n+{\n+    AssertLockHeld(cs_desc_man);\n+    if (m_storage.HasEncryptionKeys() && !m_storage.IsLocked()) {\n+        KeyMap keys;\n+        for (auto key_pair : m_map_crypted_keys) {\n+            const CPubKey& pubkey = key_pair.second.first;\n+            const std::vector<unsigned char>& crypted_secret = key_pair.second.second;\n+            CKey key;\n+            DecryptKey(m_storage.GetEncryptionKey(), crypted_secret, pubkey, key);\n+            keys[pubkey.GetID()] = key;\n+        }\n+        return keys;\n+    }\n+    return m_map_keys;\n+}\n+\n+bool DescriptorScriptPubKeyMan::TopUp(unsigned int size)\n+{\n+    LOCK(cs_desc_man);\n+    unsigned int target_size;\n+    if (size > 0) {\n+        target_size = size;\n+    } else {\n+        target_size = std::max(gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 1);\n+    }\n+\n+    // Calculate the new range_end\n+    int32_t new_range_end = std::max(m_wallet_descriptor.next_index + (int32_t)target_size, m_wallet_descriptor.range_end);\n+\n+    // If the descriptor is not ranged, we actually just want to fill the first cache item\n+    if (!m_wallet_descriptor.descriptor->IsRange()) {\n+        new_range_end = 1;\n+        m_wallet_descriptor.range_end = 1;\n+        m_wallet_descriptor.range_start = 0;\n+    }\n+\n+    FlatSigningProvider provider;\n+    provider.keys = GetKeys();\n+\n+    WalletBatch batch(m_storage.GetDatabase());\n+    uint256 id = GetID();\n+    for (int32_t i = m_max_cached_index + 1; i < new_range_end; ++i) {\n+        FlatSigningProvider out_keys;\n+        std::vector<CScript> scripts_temp;\n+        DescriptorCache temp_cache;\n+        // Maybe we have a cached xpub and we can expand from the cache first\n+        if (!m_wallet_descriptor.descriptor->ExpandFromCache(i, m_wallet_descriptor.cache, scripts_temp, out_keys)) {\n+            if (!m_wallet_descriptor.descriptor->Expand(i, provider, scripts_temp, out_keys, &temp_cache)) return false;\n+        }\n+        // Add all of the scriptPubKeys to the scriptPubKey set\n+        for (const CScript& script : scripts_temp) {\n+            m_map_script_pub_keys[script] = i;\n+        }\n+        // Write the cache\n+        for (const auto& parent_xpub_pair : temp_cache.GetCachedParentExtPubKeys()) {\n+            CExtPubKey xpub;\n+            if (m_wallet_descriptor.cache.GetCachedParentExtPubKey(parent_xpub_pair.first, xpub)) {\n+                if (xpub != parent_xpub_pair.second) {\n+                    throw std::runtime_error(std::string(__func__) + \": New cached parent xpub does not match already cached parent xpub\");\n+                }\n+                continue;\n+            }\n+            if (!batch.WriteDescriptorParentCache(id, parent_xpub_pair.first, parent_xpub_pair.second)) {\n+                throw std::runtime_error(std::string(__func__) + \": writing cache item failed\");\n+            }\n+            m_wallet_descriptor.cache.CacheParentExtPubKey(parent_xpub_pair.first, parent_xpub_pair.second);\n+        }\n+        for (const auto& derived_xpub_map_pair : temp_cache.GetCachedDerivedExtPubKeys()) {\n+            for (const auto& derived_xpub_pair : derived_xpub_map_pair.second) {\n+                CExtPubKey xpub;\n+                if (m_wallet_descriptor.cache.GetCachedDerivedExtPubKey(derived_xpub_map_pair.first, derived_xpub_pair.first, xpub)) {\n+                    if (xpub != derived_xpub_pair.second) {\n+                        throw std::runtime_error(std::string(__func__) + \": New cached derived xpub does not match already cached derived xpub\");\n+                    }\n+                    continue;\n+                }\n+                if (!batch.WriteDescriptorDerivedCache(id, derived_xpub_map_pair.first, derived_xpub_pair.first, derived_xpub_pair.second)) {\n+                    throw std::runtime_error(std::string(__func__) + \": writing cache item failed\");\n+                }\n+                m_wallet_descriptor.cache.CacheDerivedExtPubKey(derived_xpub_map_pair.first, derived_xpub_pair.first, derived_xpub_pair.second);\n+            }\n+        }\n+        m_max_cached_index++;\n+    }\n+    m_wallet_descriptor.range_end = new_range_end;\n+    batch.WriteDescriptor(GetID(), m_wallet_descriptor);\n+\n+    // By this point, the cache size should be the size of the entire range\n+    assert(m_wallet_descriptor.range_end - 1 == m_max_cached_index);\n+\n+    NotifyCanGetAddressesChanged();\n+    return true;\n+}\n+\n+void DescriptorScriptPubKeyMan::MarkUnusedAddresses(const CScript& script)\n+{\n+    LOCK(cs_desc_man);\n+    if (IsMine(script)) {\n+        int32_t index = m_map_script_pub_keys[script];\n+        if (index >= m_wallet_descriptor.next_index) {\n+            WalletLogPrintf(\"%s: Detected a used keypool item, mark all keypool items up to this item as used\\n\", __func__);\n+            m_wallet_descriptor.next_index = index + 1;\n+        }\n+        if (!TopUp()) {\n+            WalletLogPrintf(\"%s: Topping up keypool failed (locked wallet)\\n\", __func__);\n+        }\n+    }\n+}\n+\n+void DescriptorScriptPubKeyMan::AddDescriptorKey(const CKey& key, const CPubKey &pubkey)\n+{\n+    LOCK(cs_desc_man);\n+    WalletBatch batch(m_storage.GetDatabase());\n+    if (!AddDescriptorKeyWithDB(batch, key, pubkey)) {\n+        throw std::runtime_error(std::string(__func__) + \": writing descriptor private key failed\");\n+    }\n+}\n+\n+bool DescriptorScriptPubKeyMan::AddDescriptorKeyWithDB(WalletBatch& batch, const CKey& key, const CPubKey &pubkey)\n+{\n+    AssertLockHeld(cs_desc_man);\n+    assert(!m_storage.IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS));\n+\n+    if (m_storage.HasEncryptionKeys()) {\n+        if (m_storage.IsLocked()) {\n+            return false;\n+        }\n+\n+        std::vector<unsigned char> crypted_secret;\n+        CKeyingMaterial secret(key.begin(), key.end());\n+        if (!EncryptSecret(m_storage.GetEncryptionKey(), secret, pubkey.GetHash(), crypted_secret)) {\n+            return false;\n+        }\n+\n+        m_map_crypted_keys[pubkey.GetID()] = make_pair(pubkey, crypted_secret);\n+        batch.WriteCryptedDescriptorKey(GetID(), pubkey, crypted_secret);\n+        return true;\n+    } else {\n+        m_map_keys[pubkey.GetID()] = key;\n+        return batch.WriteDescriptorKey(GetID(), pubkey, key.GetPrivKey());\n+    }\n+}\n+\n+bool DescriptorScriptPubKeyMan::SetupDescriptorGeneration(const CExtKey& master_key)\n+{\n+    LOCK(cs_desc_man);\n+    assert(m_storage.IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS));\n+\n+    // Ignore when there is already a descriptor\n+    if (m_wallet_descriptor.descriptor) {\n+        return false;\n+    }\n+\n+    int64_t creation_time = GetTime();\n+\n+    std::string xpub = EncodeExtPubKey(master_key.Neuter());\n+\n+    // Build descriptor string\n+    std::string desc_prefix;\n+    std::string desc_suffix = \"/*)\";\n+    switch (m_address_type) {\n+    case OutputType::LEGACY: {\n+        desc_prefix = \"pkh(\" + xpub + \"/44'\";\n+        break;\n+    }\n+    case OutputType::P2SH_SEGWIT: {\n+        desc_prefix = \"sh(wpkh(\" + xpub + \"/49'\";\n+        desc_suffix += \")\";\n+        break;\n+    }\n+    case OutputType::BECH32: {\n+        desc_prefix = \"wpkh(\" + xpub + \"/84'\";\n+        break;\n+    }\n+    default: assert(false);\n+    }\n+\n+    // Mainnet derives at 0', testnet and regtest derive at 1'\n+    if (Params().IsTestChain()) {\n+        desc_prefix += \"/1'\";\n+    } else {\n+        desc_prefix += \"/0'\";\n+    }\n+\n+    std::string internal_path = m_internal ? \"/1\" : \"/0\";\n+    std::string desc_str = desc_prefix + \"/0'\" + internal_path + desc_suffix;\n+\n+    // Make the descriptor\n+    FlatSigningProvider keys;\n+    std::string error;\n+    std::unique_ptr<Descriptor> desc = Parse(desc_str, keys, error, false);\n+    WalletDescriptor w_desc(std::move(desc), creation_time, 0, 0, 0);\n+    m_wallet_descriptor = w_desc;\n+\n+    // Store the master private key, and descriptor\n+    WalletBatch batch(m_storage.GetDatabase());\n+    if (!AddDescriptorKeyWithDB(batch, master_key.key, master_key.key.GetPubKey())) {\n+        throw std::runtime_error(std::string(__func__) + \": writing descriptor master rivate key failed\");\n+    }\n+    if (!batch.WriteDescriptor(GetID(), m_wallet_descriptor)) {\n+        throw std::runtime_error(std::string(__func__) + \": writing descriptor failed\");\n+    }\n+\n+    // TopUp\n+    TopUp();\n+\n+    m_storage.UnsetBlankWalletFlag(batch);\n+    return true;\n+}\n+\n+bool DescriptorScriptPubKeyMan::IsHDEnabled() const\n+{\n+    LOCK(cs_desc_man);\n+    return m_wallet_descriptor.descriptor->IsRange();\n+}\n+\n+bool DescriptorScriptPubKeyMan::CanGetAddresses(bool internal) const\n+{\n+    // We can only give out addresses from descriptors that are single type (not combo), ranged,\n+    // and either has cached keys or can generate more keys (ignoring encryption)",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 383,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "a03a8cbd1f42636834263135e904900cc808d346",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Shouldn't we allow `CanGetAddresses` from an unranged descriptor once?",
      "created_at": "2020-03-27T19:02:38Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399480181",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399480181"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1858,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399487630",
      "pull_request_review_id": 383071782,
      "id": 399487630,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ4NzYzMA==",
      "diff_hunk": "@@ -1552,12 +1552,61 @@ isminetype DescriptorScriptPubKeyMan::IsMine(const CScript& script) const\n \n bool DescriptorScriptPubKeyMan::CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys)\n {\n-    return false;\n+    {\n+        LOCK(cs_desc_man);\n+        if (!m_map_keys.empty())\n+            return false;\n+\n+        bool keyPass = m_map_crypted_keys.empty(); // Always pass when there are no encrypted keys\n+        bool keyFail = false;\n+        CryptedKeyMap::const_iterator mi = m_map_crypted_keys.begin();\n+        for (; mi != m_map_crypted_keys.end(); ++mi)",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 13,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "8ae9bf12395b558bf53cc0b8d2f4056424908585",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`for (const auto& mi : m_map_crypted_keys) {` and then below `mi.second.first;` compiles too, though maybe I missed something.",
      "created_at": "2020-03-27T19:17:07Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399487630",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399487630"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1558,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399489479",
      "pull_request_review_id": 383071782,
      "id": 399489479,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ4OTQ3OQ==",
      "diff_hunk": "@@ -1616,6 +1616,13 @@ bool DescriptorScriptPubKeyMan::GetReservedDestination(const OutputType type, bo\n \n void DescriptorScriptPubKeyMan::ReturnDestination(int64_t index, bool internal, const CTxDestination& addr)\n {\n+    LOCK(cs_desc_man);\n+    // Only return when the index was the most recent",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 151,
      "original_position": 5,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "ee03d46178a3e8d511c33f734892820b36ed7a1a",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: maybe swap eb9c41e9240fe01f6404cf23abe1fc35ca146586 and ee03d46178a3e8d511c33f734892820b36ed7a1a.\r\n\r\nA test would be nice.",
      "created_at": "2020-03-27T19:20:26Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399489479",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399489479"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1621,
      "original_line": 1621,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399490475",
      "pull_request_review_id": 383071782,
      "id": 399490475,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ5MDQ3NQ==",
      "diff_hunk": "@@ -1878,9 +1878,34 @@ int64_t DescriptorScriptPubKeyMan::GetTimeFirstKey() const\n     return m_wallet_descriptor.creation_time;\n }\n \n+std::unique_ptr<FlatSigningProvider> DescriptorScriptPubKeyMan::GetSigningProvider(const CScript& script, bool include_private) const",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 427,
      "original_position": 4,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "50c3b4eee31e095a5080fcb4109cb5d8f7bfbbe7",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This commit message in 50c3b4eee31e095a5080fcb4109cb5d8f7bfbbe7 speaks of `GetSolvingProvider`",
      "created_at": "2020-03-27T19:22:27Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399490475",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399490475"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1897,
      "original_line": 1897,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399492040",
      "pull_request_review_id": 383071782,
      "id": 399492040,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ5MjA0MA==",
      "diff_hunk": "@@ -1878,9 +1878,34 @@ int64_t DescriptorScriptPubKeyMan::GetTimeFirstKey() const\n     return m_wallet_descriptor.creation_time;\n }\n \n+std::unique_ptr<FlatSigningProvider> DescriptorScriptPubKeyMan::GetSigningProvider(const CScript& script, bool include_private) const\n+{\n+    LOCK(cs_desc_man);\n+\n+    // Find the index of the script\n+    auto it = m_map_script_pub_keys.find(script);\n+    if (it == m_map_script_pub_keys.end()) {\n+        return nullptr;\n+    }\n+    int32_t index = it->second;\n+\n+    // Get the scripts, keys, and key origins for this script\n+    std::unique_ptr<FlatSigningProvider> out_keys = MakeUnique<FlatSigningProvider>();\n+    std::vector<CScript> scripts_temp;\n+    if (!m_wallet_descriptor.descriptor->ExpandFromCache(index, m_wallet_descriptor.cache, scripts_temp, *out_keys)) return nullptr;\n+\n+    if (include_private) {\n+        FlatSigningProvider master_provider;\n+        master_provider.keys = GetKeys();\n+        m_wallet_descriptor.descriptor->ExpandPrivate(index, master_provider, *out_keys);",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 467,
      "original_position": 23,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "50c3b4eee31e095a5080fcb4109cb5d8f7bfbbe7",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`ExpandPrivate()` is a `void`, but it uses `GetPrivKey` internally and just ignores failure. Might be worth making  `ExpandPrivate()` a `bool` and adding an `assert` here.",
      "created_at": "2020-03-27T19:25:33Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399492040",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399492040"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1937,
      "original_line": 1937,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399493975",
      "pull_request_review_id": 383071782,
      "id": 399493975,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ5Mzk3NQ==",
      "diff_hunk": "@@ -60,3 +60,8 @@ bool CreateWalletDialog::isMakeBlankWalletChecked() const\n {\n     return ui->blank_wallet_checkbox->isChecked();\n }\n+\n+bool CreateWalletDialog::isDescriptorWalletChecked() const",
      "path": "src/qt/createwalletdialog.cpp",
      "position": 5,
      "original_position": 5,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "f5204ed3fe1b2a059e35e54248d38eac88c629e0",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "f5204ed3fe1b2a059e35e54248d38eac88c629e0 could be split between GUI and RPC.",
      "created_at": "2020-03-27T19:29:08Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399493975",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399493975"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 64,
      "original_line": 64,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399494992",
      "pull_request_review_id": 383071782,
      "id": 399494992,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ5NDk5Mg==",
      "diff_hunk": "@@ -252,13 +252,13 @@ class WalletBatch\n     bool WriteDescriptorDerivedCache(const uint256& desc_id, uint32_t key_exp_index, uint32_t der_index, const CExtPubKey& xpub);\n     bool WriteDescriptorParentCache(const uint256& desc_id, uint32_t key_exp_index, const CExtPubKey& xpub);\n \n+    bool WriteActiveScriptPubKeyMan(uint8_t type, const uint256& id, bool internal);",
      "path": "src/wallet/walletdb.h",
      "position": null,
      "original_position": 4,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "f5204ed3fe1b2a059e35e54248d38eac88c629e0",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "f5204ed3fe1b2a059e35e54248d38eac88c629e0 moves `WriteActiveScriptPubKeyMan` a few lines up for some reason.",
      "created_at": "2020-03-27T19:31:13Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399494992",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399494992"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 255,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399496245",
      "pull_request_review_id": 383071782,
      "id": 399496245,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ5NjI0NQ==",
      "diff_hunk": "@@ -585,8 +585,11 @@ bool CWallet::EncryptWallet(const SecureString& strWalletPassphrase)\n         Lock();\n         Unlock(strWalletPassphrase);\n \n-        // if we are using HD, replace the HD seed with a new one\n-        if (auto spk_man = GetLegacyScriptPubKeyMan()) {\n+        // If we are using descriptors, make new descriptors",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 6,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "2de265c2b60c4348899aa09783a4cd3be958fb81",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Descriptors don't contain private keys, so maybe make it more clear that we're generating a new seed, and thus need new descriptors for that.",
      "created_at": "2020-03-27T19:33:46Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399496245",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399496245"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 588,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399499505",
      "pull_request_review_id": 383071782,
      "id": 399499505,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ5OTUwNQ==",
      "diff_hunk": "@@ -0,0 +1,293 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the importdescriptors RPC.\n+\n+Test importdescriptors by generating keys on node0, importing the corresponding\n+descriptors on node1 and then testing the address info for the different address\n+variants.\n+\n+- `get_key()` is called to generate keys on node0 and return the privkeys,\n+  pubkeys and all variants of scriptPubKey and address.\n+- `test_importdesc()` is called to send an importdescriptors call to node1, test\n+  success, and (if unsuccessful) test the error code and error message returned.\n+- `test_address()` is called to call getaddressinfo for an address on node1",
      "path": "test/functional/wallet_importdescriptors.py",
      "position": 15,
      "original_position": 15,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "7d1c6bbeb057c18da62201267efc2b675f142da3",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`test_address` or another function could also test `getnewaddress` (in particular for an unranged descriptor, which imo should work exactly once)",
      "created_at": "2020-03-27T19:40:28Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399499505",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399499505"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 15,
      "original_line": 15,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399539375",
      "pull_request_review_id": 383201525,
      "id": 399539375,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUzOTM3NQ==",
      "diff_hunk": "@@ -0,0 +1,293 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the importdescriptors RPC.\n+",
      "path": "test/functional/wallet_importdescriptors.py",
      "position": 6,
      "original_position": 6,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "a03a8cbd1f42636834263135e904900cc808d346",
      "in_reply_to_id": 399363853,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "How so?",
      "created_at": "2020-03-27T21:10:04Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399539375",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399539375"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 6,
      "original_line": 6,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399539940",
      "pull_request_review_id": 383202260,
      "id": 399539940,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUzOTk0MA==",
      "diff_hunk": "@@ -1226,6 +1226,12 @@ class CWallet final : public WalletStorage, private interfaces::Chain::Notificat\n \n     //! Create new DescriptorScriptPubKeyMans and add them to the wallet\n     void SetupDescriptorScriptPubKeyMans();\n+\n+    //! Check if the wallet already has a descriptor\n+    DescriptorScriptPubKeyMan* HasWalletDescriptor(const WalletDescriptor& desc) const;",
      "path": "src/wallet/wallet.h",
      "position": null,
      "original_position": 6,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "7d1c6bbeb057c18da62201267efc2b675f142da3",
      "in_reply_to_id": 399276875,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-03-27T21:11:37Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399539940",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399539940"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1231,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399539974",
      "pull_request_review_id": 383202314,
      "id": 399539974,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUzOTk3NA==",
      "diff_hunk": "@@ -4447,3 +4448,91 @@ bool CWallet::IsLegacy() const\n     auto spk_man = dynamic_cast<LegacyScriptPubKeyMan*>(m_internal_spk_managers.at(OutputType::LEGACY));\n     return spk_man != nullptr;\n }\n+\n+DescriptorScriptPubKeyMan* CWallet::HasWalletDescriptor(const WalletDescriptor& desc) const\n+{\n+    if (!IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 15,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "7d1c6bbeb057c18da62201267efc2b675f142da3",
      "in_reply_to_id": 399280484,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-03-27T21:11:43Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399539974",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399539974"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4454,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399540013",
      "pull_request_review_id": 383202369,
      "id": 399540013,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU0MDAxMw==",
      "diff_hunk": "@@ -4447,3 +4448,91 @@ bool CWallet::IsLegacy() const\n     auto spk_man = dynamic_cast<LegacyScriptPubKeyMan*>(m_internal_spk_managers.at(OutputType::LEGACY));\n     return spk_man != nullptr;\n }\n+\n+DescriptorScriptPubKeyMan* CWallet::HasWalletDescriptor(const WalletDescriptor& desc) const\n+{\n+    if (!IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+        return nullptr;\n+    }\n+\n+    for (auto& spk_man_pair : m_spk_managers) {\n+        // Try to downcast to DescriptorScriptPubKeyMan then check if the descriptors match\n+        DescriptorScriptPubKeyMan* spk_manager = dynamic_cast<DescriptorScriptPubKeyMan*>(spk_man_pair.second.get());\n+        if (spk_manager != nullptr && spk_manager->HasWalletDescriptor(desc)) {\n+            return spk_manager;\n+        }\n+    }\n+\n+    return nullptr;\n+}\n+\n+ScriptPubKeyMan* CWallet::AddWalletDescriptor(WalletDescriptor& desc, const FlatSigningProvider& signing_provider, const std::string& label)\n+{\n+    if (!IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+        WalletLogPrintf(\"Cannot add WalletDescriptor to a non-descriptor wallet\\n\");\n+        return nullptr;\n+    }\n+\n+    LOCK(cs_wallet);\n+    auto spk_manager = std::unique_ptr<DescriptorScriptPubKeyMan>(new DescriptorScriptPubKeyMan(*this, desc));",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 38,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "7d1c6bbeb057c18da62201267efc2b675f142da3",
      "in_reply_to_id": 399281845,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-03-27T21:11:48Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399540013",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399540013"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4477,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399540059",
      "pull_request_review_id": 383202432,
      "id": 399540059,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU0MDA1OQ==",
      "diff_hunk": "@@ -4366,3 +4385,156 @@ void CWallet::ConnectScriptPubKeyManNotifiers()\n         spk_man->NotifyCanGetAddressesChanged.connect(NotifyCanGetAddressesChanged);\n     }\n }\n+\n+void CWallet::LoadDescriptorScriptPubKeyMan(uint256 id, WalletDescriptor& desc)\n+{\n+    auto spk_manager = std::unique_ptr<ScriptPubKeyMan>(new DescriptorScriptPubKeyMan(*this, desc));\n+    m_spk_managers[id] = std::move(spk_manager);\n+}\n+\n+void CWallet::SetupDescriptorScriptPubKeyMans()\n+{\n+    AssertLockHeld(cs_wallet);\n+\n+    // Make a seed\n+    CKey seed_key;\n+    seed_key.MakeNewKey(true);\n+    CPubKey seed = seed_key.GetPubKey();\n+    assert(seed_key.VerifyPubKey(seed));\n+\n+    // Get the extended key\n+    CExtKey master_key;\n+    master_key.SetSeed(seed_key.begin(), seed_key.size());\n+\n+    for (bool internal : {false, true}) {\n+        for (OutputType t : OUTPUT_TYPES) {\n+            auto spk_manager = std::unique_ptr<DescriptorScriptPubKeyMan>(new DescriptorScriptPubKeyMan(*this, t, internal));\n+            if (IsCrypted()) {\n+                if (IsLocked()) {\n+                    throw std::runtime_error(std::string(__func__) + \": Wallet is locked, cannot setup new descriptors\");\n+                }\n+                if (!spk_manager->CheckDecryptionKey(vMasterKey) && !spk_manager->Encrypt(vMasterKey, nullptr)) {\n+                    throw std::runtime_error(std::string(__func__) + \": Could not encrypt new descriptors\");\n+                }\n+            }\n+            spk_manager->SetupDescriptorGeneration(master_key);\n+            uint256 id = spk_manager->GetID();\n+            m_spk_managers[id] = std::move(spk_manager);\n+            SetActiveScriptPubKeyMan(id, t, internal);\n+        }\n+    }\n+}\n+\n+void CWallet::SetActiveScriptPubKeyMan(uint256 id, OutputType type, bool internal, bool memonly)\n+{\n+    WalletLogPrintf(\"Setting spkMan to active: id = %s, type = %d, internal = %d\\n\", id.ToString(), static_cast<int>(type), static_cast<int>(internal));\n+    auto& spk_mans = internal ? m_internal_spk_managers : m_external_spk_managers;\n+    auto spk_man = m_spk_managers.at(id).get();\n+    spk_man->SetType(type, internal);\n+    spk_mans[type] = spk_man;\n+\n+    if (!memonly) {\n+        WalletBatch batch(*database);\n+        if (!batch.WriteActiveScriptPubKeyMan(static_cast<uint8_t>(type), id, internal)) {\n+            throw std::runtime_error(std::string(__func__) + \": writing active ScriptPubKeyMan id failed\");\n+        }\n+    }\n+    NotifyCanGetAddressesChanged();\n+}\n+\n+bool CWallet::IsLegacy() const\n+{\n+    if (m_internal_spk_managers.count(OutputType::LEGACY) == 0) {\n+        return false;\n+    }\n+    auto spk_man = dynamic_cast<LegacyScriptPubKeyMan*>(m_internal_spk_managers.at(OutputType::LEGACY));\n+    return spk_man != nullptr;\n+}\n+\n+DescriptorScriptPubKeyMan* CWallet::HasWalletDescriptor(const WalletDescriptor& desc) const\n+{\n+    if (!IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+        return nullptr;\n+    }\n+\n+    for (auto& spk_man_pair : m_spk_managers) {\n+        // Try to downcast to DescriptorScriptPubKeyMan then check if the descriptors match\n+        DescriptorScriptPubKeyMan* spk_manager = dynamic_cast<DescriptorScriptPubKeyMan*>(spk_man_pair.second.get());\n+        if (spk_manager != nullptr && spk_manager->HasWalletDescriptor(desc)) {\n+            return spk_manager;\n+        }\n+    }\n+\n+    return nullptr;\n+}\n+\n+ScriptPubKeyMan* CWallet::AddWalletDescriptor(WalletDescriptor& desc, const FlatSigningProvider& signing_provider, const std::string& label)\n+{\n+    if (!IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+        WalletLogPrintf(\"Cannot add WalletDescriptor to a non-descriptor wallet\\n\");\n+        return nullptr;\n+    }\n+\n+    LOCK(cs_wallet);\n+    auto spk_manager = std::unique_ptr<DescriptorScriptPubKeyMan>(new DescriptorScriptPubKeyMan(*this, desc));\n+\n+    // If we already have this descriptor, remove it from the maps but add the existing cache to desc\n+    auto old_spk_man = HasWalletDescriptor(desc);\n+    if (old_spk_man) {\n+        WalletLogPrintf(\"Update existing descriptor: %s\\n\", desc.descriptor->ToString());\n+\n+        {\n+            LOCK(old_spk_man->cs_desc_man);\n+            spk_manager->SetCache(old_spk_man->GetWalletDescriptor().cache);\n+        }\n+\n+        // Remove from maps of spkMans",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 197,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "a03a8cbd1f42636834263135e904900cc808d346",
      "in_reply_to_id": 399292755,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-03-27T21:11:54Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399540059",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399540059"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4491,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399540211",
      "pull_request_review_id": 383202649,
      "id": 399540211,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU0MDIxMQ==",
      "diff_hunk": "@@ -1459,3 +1459,290 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n \n     return response;\n }\n+\n+static UniValue ProcessDescriptorImport(CWallet * const pwallet, const UniValue& data, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    UniValue warnings(UniValue::VARR);\n+    UniValue result(UniValue::VOBJ);\n+\n+    try {\n+        if (!data.exists(\"desc\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Descriptor not found.\");\n+        }\n+\n+        const std::string& descriptor = data[\"desc\"].get_str();\n+        const bool active = data.exists(\"active\") ? data[\"active\"].get_bool() : false;\n+        const bool internal = data.exists(\"internal\") ? data[\"internal\"].get_bool() : false;\n+        const std::string& label = data.exists(\"label\") ? data[\"label\"].get_str() : \"\";\n+\n+        // Parse descriptor string\n+        FlatSigningProvider keys;\n+        std::string error;\n+        auto parsed_desc = Parse(descriptor, keys, error, /* require_checksum = */ true);\n+        if (!parsed_desc) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, error);\n+        }\n+\n+        // Range check\n+        int64_t range_start = 0, range_end = 1, next_index = 0;\n+        if (!parsed_desc->IsRange() && data.exists(\"range\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Range should not be specified for an un-ranged descriptor\");\n+        } else if (parsed_desc->IsRange()) {\n+            if (data.exists(\"range\")) {\n+                auto range = ParseDescriptorRange(data[\"range\"]);\n+                range_start = range.first;\n+                range_end = range.second + 1; // Specified range end is inclusive, but we need range end as exclusive\n+            } else {\n+                warnings.push_back(\"Range not given, using default keypool range\");\n+                range_start = 0;\n+                range_end = gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE);\n+            }\n+            next_index = range_start;\n+\n+            if (data.exists(\"next_index\")) {\n+                next_index = data[\"next_index\"].get_int64();\n+                // bound checks\n+                if (next_index < range_start || next_index >= range_end) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"next_index is out of range\");\n+                }\n+            }\n+        }\n+\n+        // Active descriptor must be ranged",
      "path": "src/wallet/rpcdump.cpp",
      "position": null,
      "original_position": 53,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "7d1c6bbeb057c18da62201267efc2b675f142da3",
      "in_reply_to_id": 399304091,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-03-27T21:12:17Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399540211",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399540211"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1511,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399540374",
      "pull_request_review_id": 383202841,
      "id": 399540374,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU0MDM3NA==",
      "diff_hunk": "@@ -1459,3 +1459,290 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n \n     return response;\n }\n+\n+static UniValue ProcessDescriptorImport(CWallet * const pwallet, const UniValue& data, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    UniValue warnings(UniValue::VARR);\n+    UniValue result(UniValue::VOBJ);\n+\n+    try {\n+        if (!data.exists(\"desc\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Descriptor not found.\");\n+        }\n+\n+        const std::string& descriptor = data[\"desc\"].get_str();\n+        const bool active = data.exists(\"active\") ? data[\"active\"].get_bool() : false;\n+        const bool internal = data.exists(\"internal\") ? data[\"internal\"].get_bool() : false;\n+        const std::string& label = data.exists(\"label\") ? data[\"label\"].get_str() : \"\";\n+\n+        // Parse descriptor string\n+        FlatSigningProvider keys;\n+        std::string error;\n+        auto parsed_desc = Parse(descriptor, keys, error, /* require_checksum = */ true);\n+        if (!parsed_desc) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, error);\n+        }\n+\n+        // Range check\n+        int64_t range_start = 0, range_end = 1, next_index = 0;\n+        if (!parsed_desc->IsRange() && data.exists(\"range\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Range should not be specified for an un-ranged descriptor\");\n+        } else if (parsed_desc->IsRange()) {\n+            if (data.exists(\"range\")) {\n+                auto range = ParseDescriptorRange(data[\"range\"]);\n+                range_start = range.first;\n+                range_end = range.second + 1; // Specified range end is inclusive, but we need range end as exclusive\n+            } else {\n+                warnings.push_back(\"Range not given, using default keypool range\");\n+                range_start = 0;\n+                range_end = gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE);\n+            }\n+            next_index = range_start;\n+\n+            if (data.exists(\"next_index\")) {\n+                next_index = data[\"next_index\"].get_int64();\n+                // bound checks\n+                if (next_index < range_start || next_index >= range_end) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"next_index is out of range\");\n+                }\n+            }\n+        }\n+\n+        // Active descriptor must be ranged\n+        if (active && !parsed_desc->IsRange()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Active descriptor must be ranged\");\n+        }\n+\n+        // Ranged descriptors should not have a label\n+        if (data.exists(\"range\") && data.exists(\"label\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Ranged descriptors should not have a label\");",
      "path": "src/wallet/rpcdump.cpp",
      "position": 60,
      "original_position": 60,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "7d1c6bbeb057c18da62201267efc2b675f142da3",
      "in_reply_to_id": 399321705,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-03-27T21:12:40Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399540374",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399540374"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1517,
      "original_line": 1517,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399540401",
      "pull_request_review_id": 383202882,
      "id": 399540401,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU0MDQwMQ==",
      "diff_hunk": "@@ -1459,3 +1459,290 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n \n     return response;\n }\n+\n+static UniValue ProcessDescriptorImport(CWallet * const pwallet, const UniValue& data, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    UniValue warnings(UniValue::VARR);\n+    UniValue result(UniValue::VOBJ);\n+\n+    try {\n+        if (!data.exists(\"desc\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Descriptor not found.\");\n+        }\n+\n+        const std::string& descriptor = data[\"desc\"].get_str();\n+        const bool active = data.exists(\"active\") ? data[\"active\"].get_bool() : false;\n+        const bool internal = data.exists(\"internal\") ? data[\"internal\"].get_bool() : false;\n+        const std::string& label = data.exists(\"label\") ? data[\"label\"].get_str() : \"\";\n+\n+        // Parse descriptor string\n+        FlatSigningProvider keys;\n+        std::string error;\n+        auto parsed_desc = Parse(descriptor, keys, error, /* require_checksum = */ true);\n+        if (!parsed_desc) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, error);\n+        }\n+\n+        // Range check\n+        int64_t range_start = 0, range_end = 1, next_index = 0;\n+        if (!parsed_desc->IsRange() && data.exists(\"range\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Range should not be specified for an un-ranged descriptor\");\n+        } else if (parsed_desc->IsRange()) {\n+            if (data.exists(\"range\")) {\n+                auto range = ParseDescriptorRange(data[\"range\"]);\n+                range_start = range.first;\n+                range_end = range.second + 1; // Specified range end is inclusive, but we need range end as exclusive\n+            } else {\n+                warnings.push_back(\"Range not given, using default keypool range\");\n+                range_start = 0;\n+                range_end = gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE);\n+            }\n+            next_index = range_start;\n+\n+            if (data.exists(\"next_index\")) {\n+                next_index = data[\"next_index\"].get_int64();\n+                // bound checks\n+                if (next_index < range_start || next_index >= range_end) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"next_index is out of range\");\n+                }\n+            }\n+        }\n+\n+        // Active descriptor must be ranged\n+        if (active && !parsed_desc->IsRange()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Active descriptor must be ranged\");\n+        }\n+\n+        // Ranged descriptors should not have a label\n+        if (data.exists(\"range\") && data.exists(\"label\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Ranged descriptors should not have a label\");\n+        }\n+\n+        // Internal addresses should not have a label either\n+        if (internal && data.exists(\"label\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Internal addresses should not have a label\");",
      "path": "src/wallet/rpcdump.cpp",
      "position": 65,
      "original_position": 65,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "7d1c6bbeb057c18da62201267efc2b675f142da3",
      "in_reply_to_id": 399322132,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-03-27T21:12:45Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399540401",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399540401"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1522,
      "original_line": 1522,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399540439",
      "pull_request_review_id": 383202915,
      "id": 399540439,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU0MDQzOQ==",
      "diff_hunk": "@@ -1459,3 +1459,290 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n \n     return response;\n }\n+\n+static UniValue ProcessDescriptorImport(CWallet * const pwallet, const UniValue& data, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    UniValue warnings(UniValue::VARR);\n+    UniValue result(UniValue::VOBJ);\n+\n+    try {\n+        if (!data.exists(\"desc\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Descriptor not found.\");\n+        }\n+\n+        const std::string& descriptor = data[\"desc\"].get_str();\n+        const bool active = data.exists(\"active\") ? data[\"active\"].get_bool() : false;\n+        const bool internal = data.exists(\"internal\") ? data[\"internal\"].get_bool() : false;\n+        const std::string& label = data.exists(\"label\") ? data[\"label\"].get_str() : \"\";\n+\n+        // Parse descriptor string\n+        FlatSigningProvider keys;\n+        std::string error;\n+        auto parsed_desc = Parse(descriptor, keys, error, /* require_checksum = */ true);\n+        if (!parsed_desc) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, error);\n+        }\n+\n+        // Range check\n+        int64_t range_start = 0, range_end = 1, next_index = 0;\n+        if (!parsed_desc->IsRange() && data.exists(\"range\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Range should not be specified for an un-ranged descriptor\");\n+        } else if (parsed_desc->IsRange()) {\n+            if (data.exists(\"range\")) {\n+                auto range = ParseDescriptorRange(data[\"range\"]);\n+                range_start = range.first;\n+                range_end = range.second + 1; // Specified range end is inclusive, but we need range end as exclusive\n+            } else {\n+                warnings.push_back(\"Range not given, using default keypool range\");\n+                range_start = 0;\n+                range_end = gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE);\n+            }\n+            next_index = range_start;\n+\n+            if (data.exists(\"next_index\")) {\n+                next_index = data[\"next_index\"].get_int64();\n+                // bound checks\n+                if (next_index < range_start || next_index >= range_end) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"next_index is out of range\");\n+                }\n+            }\n+        }\n+\n+        // Active descriptor must be ranged\n+        if (active && !parsed_desc->IsRange()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Active descriptor must be ranged\");\n+        }\n+\n+        // Ranged descriptors should not have a label\n+        if (data.exists(\"range\") && data.exists(\"label\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Ranged descriptors should not have a label\");\n+        }\n+\n+        // Internal addresses should not have a label either\n+        if (internal && data.exists(\"label\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Internal addresses should not have a label\");\n+        }\n+\n+        // Combo descriptor check\n+        if (active && !parsed_desc->IsSingleType()) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Combo descriptors cannot be set to active\");",
      "path": "src/wallet/rpcdump.cpp",
      "position": 70,
      "original_position": 70,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "7d1c6bbeb057c18da62201267efc2b675f142da3",
      "in_reply_to_id": 399322281,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-03-27T21:12:49Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399540439",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399540439"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1527,
      "original_line": 1527,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399540468",
      "pull_request_review_id": 383202950,
      "id": 399540468,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU0MDQ2OA==",
      "diff_hunk": "@@ -1459,3 +1459,290 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n \n     return response;\n }\n+\n+static UniValue ProcessDescriptorImport(CWallet * const pwallet, const UniValue& data, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    UniValue warnings(UniValue::VARR);\n+    UniValue result(UniValue::VOBJ);\n+\n+    try {\n+        if (!data.exists(\"desc\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Descriptor not found.\");\n+        }\n+\n+        const std::string& descriptor = data[\"desc\"].get_str();\n+        const bool active = data.exists(\"active\") ? data[\"active\"].get_bool() : false;\n+        const bool internal = data.exists(\"internal\") ? data[\"internal\"].get_bool() : false;\n+        const std::string& label = data.exists(\"label\") ? data[\"label\"].get_str() : \"\";\n+\n+        // Parse descriptor string\n+        FlatSigningProvider keys;\n+        std::string error;\n+        auto parsed_desc = Parse(descriptor, keys, error, /* require_checksum = */ true);\n+        if (!parsed_desc) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, error);\n+        }\n+\n+        // Range check\n+        int64_t range_start = 0, range_end = 1, next_index = 0;\n+        if (!parsed_desc->IsRange() && data.exists(\"range\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Range should not be specified for an un-ranged descriptor\");\n+        } else if (parsed_desc->IsRange()) {\n+            if (data.exists(\"range\")) {\n+                auto range = ParseDescriptorRange(data[\"range\"]);\n+                range_start = range.first;\n+                range_end = range.second + 1; // Specified range end is inclusive, but we need range end as exclusive\n+            } else {\n+                warnings.push_back(\"Range not given, using default keypool range\");\n+                range_start = 0;\n+                range_end = gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE);\n+            }\n+            next_index = range_start;\n+\n+            if (data.exists(\"next_index\")) {\n+                next_index = data[\"next_index\"].get_int64();\n+                // bound checks\n+                if (next_index < range_start || next_index >= range_end) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"next_index is out of range\");\n+                }\n+            }\n+        }\n+\n+        // Active descriptor must be ranged\n+        if (active && !parsed_desc->IsRange()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Active descriptor must be ranged\");\n+        }\n+\n+        // Ranged descriptors should not have a label\n+        if (data.exists(\"range\") && data.exists(\"label\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Ranged descriptors should not have a label\");\n+        }\n+\n+        // Internal addresses should not have a label either\n+        if (internal && data.exists(\"label\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Internal addresses should not have a label\");\n+        }\n+\n+        // Combo descriptor check\n+        if (active && !parsed_desc->IsSingleType()) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Combo descriptors cannot be set to active\");\n+        }\n+\n+        // If the wallet disabled private keys, abort if private keys exist\n+        if (pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS) && !keys.keys.empty()) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Cannot import private keys to a wallet with private keys disabled\");\n+        }\n+\n+        // Check if all private keys are provided\n+        bool have_privkeys = true;\n+        for (const auto& entry : keys.pubkeys) {\n+            const CKeyID& key_id = entry.first;\n+            CKey key;\n+            if (!keys.GetKey(key_id, key)) {\n+                have_privkeys = false;\n+            }\n+        }\n+\n+        // If private keys are enabled, abort if private keys are not provided\n+        if (!pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS) && !have_privkeys) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Cannot import descriptor without private keys to a wallet with private keys enabled\");",
      "path": "src/wallet/rpcdump.cpp",
      "position": null,
      "original_position": 90,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "7d1c6bbeb057c18da62201267efc2b675f142da3",
      "in_reply_to_id": 399322814,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-03-27T21:12:54Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399540468",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399540468"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1538,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399540593",
      "pull_request_review_id": 383203099,
      "id": 399540593,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU0MDU5Mw==",
      "diff_hunk": "@@ -0,0 +1,293 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the importdescriptors RPC.\n+\n+Test importdescriptors by generating keys on node0, importing the corresponding\n+descriptors on node1 and then testing the address info for the different address\n+variants.\n+\n+- `get_key()` is called to generate keys on node0 and return the privkeys,\n+  pubkeys and all variants of scriptPubKey and address.\n+- `test_importdesc()` is called to send an importdescriptors call to node1, test\n+  success, and (if unsuccessful) test the error code and error message returned.\n+- `test_address()` is called to call getaddressinfo for an address on node1\n+  and test the values returned.\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.descriptors import descsum_create\n+from test_framework.util import (\n+    assert_equal,\n+)\n+from test_framework.wallet_util import (\n+    get_key,\n+    test_address,\n+)\n+\n+class ImportDescriptorsTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.extra_args = [[\"-addresstype=legacy\"],\n+                           [\"-addresstype=bech32\", \"-keypool=5\"]\n+                          ]\n+        self.setup_clean_chain = True\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def test_importdesc(self, req, success, error_code=None, error_message=None, warnings=None, wallet=None):\n+        \"\"\"Run importdescriptors and assert success\"\"\"\n+        if warnings is None:\n+            warnings = []\n+        wrpc = self.nodes[1].get_wallet_rpc('w1')\n+        if wallet is not None:\n+            wrpc = wallet\n+\n+        result = wrpc.importdescriptors([req])\n+        observed_warnings = []\n+        if 'warnings' in result[0]:\n+           observed_warnings = result[0]['warnings']\n+        assert_equal(\"\\n\".join(sorted(warnings)), \"\\n\".join(sorted(observed_warnings)))\n+        assert_equal(result[0]['success'], success)\n+        if error_code is not None:\n+            assert_equal(result[0]['error']['code'], error_code)\n+            assert_equal(result[0]['error']['message'], error_message)\n+\n+    def run_test(self):\n+        self.log.info('Setting up wallets')\n+        self.nodes[0].createwallet(wallet_name='w0', disable_private_keys=False)\n+        w0 = self.nodes[0].get_wallet_rpc('w0')\n+\n+        self.nodes[1].createwallet(wallet_name='w1', disable_private_keys=True, blank=True, descriptors=True)\n+        w1 = self.nodes[1].get_wallet_rpc('w1')\n+        assert_equal(w1.getwalletinfo()['keypoolsize'], 0)\n+\n+        self.nodes[1].createwallet(wallet_name=\"wpriv\", disable_private_keys=False, blank=True, descriptors=True)\n+        wpriv = self.nodes[1].get_wallet_rpc(\"wpriv\")\n+        assert_equal(wpriv.getwalletinfo()['keypoolsize'], 0)\n+\n+        self.log.info('Mining coins')\n+        w0.generatetoaddress(101, w0.getnewaddress())\n+\n+        # RPC importdescriptors -----------------------------------------------\n+\n+        # # Test import fails if no descriptor present\n+        key = get_key(w0)\n+        self.log.info(\"Import should fail if a descriptor is not provided\")\n+        self.test_importdesc({\"timestamp\": \"now\"},\n+                             success=False,\n+                             error_code=-8,\n+                             error_message='Descriptor not found.')\n+\n+        # # Test importing of a P2PKH descriptor\n+        key = get_key(w0)\n+        self.log.info(\"Should import a p2pkh descriptor\")\n+        self.test_importdesc({\"desc\": descsum_create(\"pkh(\" + key.pubkey + \")\"),\n+                              \"timestamp\": \"now\",\n+                              \"label\": \"Descriptor import test\"},\n+                             success=True)\n+        test_address(w1,\n+                     key.p2pkh_addr,\n+                     solvable=True,\n+                     ismine=True,\n+                     labels=[\"Descriptor import test\"])\n+\n+        # # Test importing of a P2SH-P2WPKH descriptor\n+        key = get_key(w0)\n+        self.log.info(\"Should not import a p2sh-p2wpkh descriptor without checksum\")\n+        self.test_importdesc({\"desc\": \"sh(wpkh(\" + key.pubkey + \"))\",\n+                              \"timestamp\": \"now\"\n+                              },\n+                             success=False,\n+                             error_code=-5,\n+                             error_message=\"Missing checksum\")\n+\n+        self.log.info(\"Should not import a p2sh-p2wpkh descriptor that has range specified\")\n+        self.test_importdesc({\"desc\": descsum_create(\"sh(wpkh(\" + key.pubkey + \"))\"),\n+                               \"timestamp\": \"now\",\n+                               \"range\": 1,\n+                              },\n+                              success=False,\n+                              error_code=-8,\n+                              error_message=\"Range should not be specified for an un-ranged descriptor\")\n+\n+        self.log.info(\"Should not import a p2sh-p2wpkh descriptor and have it set to active\")\n+        self.test_importdesc({\"desc\": descsum_create(\"sh(wpkh(\" + key.pubkey + \"))\"),\n+                               \"timestamp\": \"now\",\n+                               \"active\": True,\n+                              },\n+                              success=False,\n+                              error_code=-8,\n+                              error_message=\"Active descriptor must be ranged\")\n+\n+        self.log.info(\"Should import a (non-active) p2sh-p2wpkh descriptor\")\n+        self.test_importdesc({\"desc\": descsum_create(\"sh(wpkh(\" + key.pubkey + \"))\"),\n+                               \"timestamp\": \"now\",\n+                               \"active\": False,\n+                              },\n+                              success=True)\n+\n+        test_address(w1,\n+                     key.p2sh_p2wpkh_addr,\n+                     ismine=True,\n+                     solvable=True)\n+\n+        # # Test importing of a multisig descriptor\n+        key1 = get_key(w0)\n+        key2 = get_key(w0)\n+        self.log.info(\"Should import a 1-of-2 bare multisig from descriptor\")\n+        self.test_importdesc({\"desc\": descsum_create(\"multi(1,\" + key1.pubkey + \",\" + key2.pubkey + \")\"),\n+                              \"timestamp\": \"now\"},\n+                             success=True)\n+        self.log.info(\"Should not treat individual keys from the imported bare multisig as watchonly\")\n+        test_address(w1,\n+                     key1.p2pkh_addr,\n+                     ismine=False)\n+\n+        # # Test ranged descriptors\n+        xpriv = \"tprv8ZgxMBicQKsPeuVhWwi6wuMQGfPKi9Li5GtX35jVNknACgqe3CY4g5xgkfDDJcmtF7o1QnxWDRYw4H5P26PXq7sbcUkEqeR4fg3Kxp2tigg\"\n+        xpub = \"tpubD6NzVbkrYhZ4YNXVQbNhMK1WqguFsUXceaVJKbmno2aZ3B6QfbMeraaYvnBSGpV3vxLyTTK9DYT1yoEck4XUScMzXoQ2U2oSmE2JyMedq3H\"\n+        addresses = [\"2N7yv4p8G8yEaPddJxY41kPihnWvs39qCMf\", \"2MsHxyb2JS3pAySeNUsJ7mNnurtpeenDzLA\"] # hdkeypath=m/0'/0'/0' and 1'\n+        addresses += [\"bcrt1qrd3n235cj2czsfmsuvqqpr3lu6lg0ju7scl8gn\", \"bcrt1qfqeppuvj0ww98r6qghmdkj70tv8qpchehegrg8\"] # wpkh subscripts corresponding to the above addresses\n+        desc = \"sh(wpkh(\" + xpub + \"/0'/0'/*'\" + \"))\"\n+        self.log.info(\"Ranged descriptor import should warn without a specified range\")\n+        self.test_importdesc({\"desc\": descsum_create(desc),\n+                               \"timestamp\": \"now\"},\n+                              success=True,\n+                              warnings=['Range not given, using default keypool range'])\n+\n+        # # Test importing of a ranged descriptor with xpriv\n+        self.log.info(\"Should not import a ranged descriptor that includes xpriv into a watch-only wallet\")\n+        desc = \"sh(wpkh(\" + xpriv + \"/0'/0'/*'\" + \"))\"\n+        self.test_importdesc({\"desc\": descsum_create(desc),\n+                              \"timestamp\": \"now\",\n+                              \"range\": 1},\n+                             success=False,\n+                             error_code=-4,\n+                             error_message='Cannot import private keys to a wallet with private keys disabled')\n+        for address in addresses:\n+            test_address(w1,\n+                         address,\n+                         ismine=False,\n+                         solvable=False)\n+\n+        self.test_importdesc({\"desc\": descsum_create(desc), \"timestamp\": \"now\", \"range\": -1},\n+                              success=False, error_code=-8, error_message='End of range is too high')\n+\n+        self.test_importdesc({\"desc\": descsum_create(desc), \"timestamp\": \"now\", \"range\": [-1, 10]},\n+                              success=False, error_code=-8, error_message='Range should be greater or equal than 0')\n+\n+        self.test_importdesc({\"desc\": descsum_create(desc), \"timestamp\": \"now\", \"range\": [(2 << 31 + 1) - 1000000, (2 << 31 + 1)]},\n+                              success=False, error_code=-8, error_message='End of range is too high')\n+\n+        self.test_importdesc({\"desc\": descsum_create(desc), \"timestamp\": \"now\", \"range\": [2, 1]},\n+                              success=False, error_code=-8, error_message='Range specified as [begin,end] must not have begin after end')\n+\n+        self.test_importdesc({\"desc\": descsum_create(desc), \"timestamp\": \"now\", \"range\": [0, 1000001]},\n+                              success=False, error_code=-8, error_message='Range is too large')\n+\n+        # Make sure ranged imports import keys in order\n+        w1 = self.nodes[1].get_wallet_rpc('w1')\n+        self.log.info('Key ranges should be imported in order')\n+        xpub = \"tpubDAXcJ7s7ZwicqjprRaEWdPoHKrCS215qxGYxpusRLLmJuT69ZSicuGdSfyvyKpvUNYBW1s2U3NSrT6vrCYB9e6nZUEvrqnwXPF8ArTCRXMY\"\n+        addresses = [\n+            'bcrt1qtmp74ayg7p24uslctssvjm06q5phz4yrxucgnv', # m/0'/0'/0\n+            'bcrt1q8vprchan07gzagd5e6v9wd7azyucksq2xc76k8', # m/0'/0'/1\n+            'bcrt1qtuqdtha7zmqgcrr26n2rqxztv5y8rafjp9lulu', # m/0'/0'/2\n+            'bcrt1qau64272ymawq26t90md6an0ps99qkrse58m640', # m/0'/0'/3\n+            'bcrt1qsg97266hrh6cpmutqen8s4s962aryy77jp0fg0', # m/0'/0'/4\n+        ]\n+\n+        self.test_importdesc({'desc': descsum_create('wpkh([80002067/0h/0h]' + xpub + '/*)'),\n+                              'active': True,\n+                              'range' : [0, 2],\n+                              'timestamp': 'now'\n+                             },\n+                             success=True)\n+\n+        for i in range(0, 4):",
      "path": "test/functional/wallet_importdescriptors.py",
      "position": null,
      "original_position": 209,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "7d1c6bbeb057c18da62201267efc2b675f142da3",
      "in_reply_to_id": 399324799,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Iterated over `addresses` instead.",
      "created_at": "2020-03-27T21:13:10Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399540593",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399540593"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 209,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399540638",
      "pull_request_review_id": 383203160,
      "id": 399540638,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU0MDYzOA==",
      "diff_hunk": "@@ -0,0 +1,293 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the importdescriptors RPC.\n+\n+Test importdescriptors by generating keys on node0, importing the corresponding\n+descriptors on node1 and then testing the address info for the different address\n+variants.\n+\n+- `get_key()` is called to generate keys on node0 and return the privkeys,\n+  pubkeys and all variants of scriptPubKey and address.\n+- `test_importdesc()` is called to send an importdescriptors call to node1, test\n+  success, and (if unsuccessful) test the error code and error message returned.\n+- `test_address()` is called to call getaddressinfo for an address on node1\n+  and test the values returned.\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.descriptors import descsum_create\n+from test_framework.util import (\n+    assert_equal,\n+)\n+from test_framework.wallet_util import (\n+    get_key,\n+    test_address,\n+)\n+\n+class ImportDescriptorsTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.extra_args = [[\"-addresstype=legacy\"],\n+                           [\"-addresstype=bech32\", \"-keypool=5\"]\n+                          ]\n+        self.setup_clean_chain = True\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def test_importdesc(self, req, success, error_code=None, error_message=None, warnings=None, wallet=None):\n+        \"\"\"Run importdescriptors and assert success\"\"\"\n+        if warnings is None:\n+            warnings = []\n+        wrpc = self.nodes[1].get_wallet_rpc('w1')\n+        if wallet is not None:\n+            wrpc = wallet\n+\n+        result = wrpc.importdescriptors([req])\n+        observed_warnings = []\n+        if 'warnings' in result[0]:\n+           observed_warnings = result[0]['warnings']\n+        assert_equal(\"\\n\".join(sorted(warnings)), \"\\n\".join(sorted(observed_warnings)))\n+        assert_equal(result[0]['success'], success)\n+        if error_code is not None:\n+            assert_equal(result[0]['error']['code'], error_code)\n+            assert_equal(result[0]['error']['message'], error_message)\n+\n+    def run_test(self):\n+        self.log.info('Setting up wallets')\n+        self.nodes[0].createwallet(wallet_name='w0', disable_private_keys=False)\n+        w0 = self.nodes[0].get_wallet_rpc('w0')\n+\n+        self.nodes[1].createwallet(wallet_name='w1', disable_private_keys=True, blank=True, descriptors=True)\n+        w1 = self.nodes[1].get_wallet_rpc('w1')\n+        assert_equal(w1.getwalletinfo()['keypoolsize'], 0)\n+\n+        self.nodes[1].createwallet(wallet_name=\"wpriv\", disable_private_keys=False, blank=True, descriptors=True)\n+        wpriv = self.nodes[1].get_wallet_rpc(\"wpriv\")\n+        assert_equal(wpriv.getwalletinfo()['keypoolsize'], 0)\n+\n+        self.log.info('Mining coins')\n+        w0.generatetoaddress(101, w0.getnewaddress())\n+\n+        # RPC importdescriptors -----------------------------------------------\n+\n+        # # Test import fails if no descriptor present\n+        key = get_key(w0)\n+        self.log.info(\"Import should fail if a descriptor is not provided\")\n+        self.test_importdesc({\"timestamp\": \"now\"},\n+                             success=False,\n+                             error_code=-8,\n+                             error_message='Descriptor not found.')\n+\n+        # # Test importing of a P2PKH descriptor\n+        key = get_key(w0)\n+        self.log.info(\"Should import a p2pkh descriptor\")\n+        self.test_importdesc({\"desc\": descsum_create(\"pkh(\" + key.pubkey + \")\"),\n+                              \"timestamp\": \"now\",\n+                              \"label\": \"Descriptor import test\"},\n+                             success=True)\n+        test_address(w1,\n+                     key.p2pkh_addr,\n+                     solvable=True,\n+                     ismine=True,\n+                     labels=[\"Descriptor import test\"])\n+\n+        # # Test importing of a P2SH-P2WPKH descriptor\n+        key = get_key(w0)\n+        self.log.info(\"Should not import a p2sh-p2wpkh descriptor without checksum\")\n+        self.test_importdesc({\"desc\": \"sh(wpkh(\" + key.pubkey + \"))\",\n+                              \"timestamp\": \"now\"\n+                              },\n+                             success=False,\n+                             error_code=-5,\n+                             error_message=\"Missing checksum\")\n+\n+        self.log.info(\"Should not import a p2sh-p2wpkh descriptor that has range specified\")\n+        self.test_importdesc({\"desc\": descsum_create(\"sh(wpkh(\" + key.pubkey + \"))\"),\n+                               \"timestamp\": \"now\",\n+                               \"range\": 1,\n+                              },\n+                              success=False,\n+                              error_code=-8,\n+                              error_message=\"Range should not be specified for an un-ranged descriptor\")\n+\n+        self.log.info(\"Should not import a p2sh-p2wpkh descriptor and have it set to active\")\n+        self.test_importdesc({\"desc\": descsum_create(\"sh(wpkh(\" + key.pubkey + \"))\"),\n+                               \"timestamp\": \"now\",\n+                               \"active\": True,\n+                              },\n+                              success=False,\n+                              error_code=-8,\n+                              error_message=\"Active descriptor must be ranged\")\n+\n+        self.log.info(\"Should import a (non-active) p2sh-p2wpkh descriptor\")\n+        self.test_importdesc({\"desc\": descsum_create(\"sh(wpkh(\" + key.pubkey + \"))\"),\n+                               \"timestamp\": \"now\",\n+                               \"active\": False,\n+                              },\n+                              success=True)\n+\n+        test_address(w1,\n+                     key.p2sh_p2wpkh_addr,\n+                     ismine=True,\n+                     solvable=True)\n+\n+        # # Test importing of a multisig descriptor\n+        key1 = get_key(w0)\n+        key2 = get_key(w0)\n+        self.log.info(\"Should import a 1-of-2 bare multisig from descriptor\")\n+        self.test_importdesc({\"desc\": descsum_create(\"multi(1,\" + key1.pubkey + \",\" + key2.pubkey + \")\"),\n+                              \"timestamp\": \"now\"},\n+                             success=True)\n+        self.log.info(\"Should not treat individual keys from the imported bare multisig as watchonly\")\n+        test_address(w1,\n+                     key1.p2pkh_addr,\n+                     ismine=False)\n+\n+        # # Test ranged descriptors\n+        xpriv = \"tprv8ZgxMBicQKsPeuVhWwi6wuMQGfPKi9Li5GtX35jVNknACgqe3CY4g5xgkfDDJcmtF7o1QnxWDRYw4H5P26PXq7sbcUkEqeR4fg3Kxp2tigg\"\n+        xpub = \"tpubD6NzVbkrYhZ4YNXVQbNhMK1WqguFsUXceaVJKbmno2aZ3B6QfbMeraaYvnBSGpV3vxLyTTK9DYT1yoEck4XUScMzXoQ2U2oSmE2JyMedq3H\"\n+        addresses = [\"2N7yv4p8G8yEaPddJxY41kPihnWvs39qCMf\", \"2MsHxyb2JS3pAySeNUsJ7mNnurtpeenDzLA\"] # hdkeypath=m/0'/0'/0' and 1'\n+        addresses += [\"bcrt1qrd3n235cj2czsfmsuvqqpr3lu6lg0ju7scl8gn\", \"bcrt1qfqeppuvj0ww98r6qghmdkj70tv8qpchehegrg8\"] # wpkh subscripts corresponding to the above addresses\n+        desc = \"sh(wpkh(\" + xpub + \"/0'/0'/*'\" + \"))\"\n+        self.log.info(\"Ranged descriptor import should warn without a specified range\")\n+        self.test_importdesc({\"desc\": descsum_create(desc),\n+                               \"timestamp\": \"now\"},\n+                              success=True,\n+                              warnings=['Range not given, using default keypool range'])\n+\n+        # # Test importing of a ranged descriptor with xpriv\n+        self.log.info(\"Should not import a ranged descriptor that includes xpriv into a watch-only wallet\")\n+        desc = \"sh(wpkh(\" + xpriv + \"/0'/0'/*'\" + \"))\"\n+        self.test_importdesc({\"desc\": descsum_create(desc),\n+                              \"timestamp\": \"now\",\n+                              \"range\": 1},\n+                             success=False,\n+                             error_code=-4,\n+                             error_message='Cannot import private keys to a wallet with private keys disabled')\n+        for address in addresses:\n+            test_address(w1,\n+                         address,\n+                         ismine=False,\n+                         solvable=False)\n+\n+        self.test_importdesc({\"desc\": descsum_create(desc), \"timestamp\": \"now\", \"range\": -1},\n+                              success=False, error_code=-8, error_message='End of range is too high')\n+\n+        self.test_importdesc({\"desc\": descsum_create(desc), \"timestamp\": \"now\", \"range\": [-1, 10]},\n+                              success=False, error_code=-8, error_message='Range should be greater or equal than 0')\n+\n+        self.test_importdesc({\"desc\": descsum_create(desc), \"timestamp\": \"now\", \"range\": [(2 << 31 + 1) - 1000000, (2 << 31 + 1)]},\n+                              success=False, error_code=-8, error_message='End of range is too high')\n+\n+        self.test_importdesc({\"desc\": descsum_create(desc), \"timestamp\": \"now\", \"range\": [2, 1]},\n+                              success=False, error_code=-8, error_message='Range specified as [begin,end] must not have begin after end')\n+\n+        self.test_importdesc({\"desc\": descsum_create(desc), \"timestamp\": \"now\", \"range\": [0, 1000001]},\n+                              success=False, error_code=-8, error_message='Range is too large')\n+\n+        # Make sure ranged imports import keys in order\n+        w1 = self.nodes[1].get_wallet_rpc('w1')\n+        self.log.info('Key ranges should be imported in order')\n+        xpub = \"tpubDAXcJ7s7ZwicqjprRaEWdPoHKrCS215qxGYxpusRLLmJuT69ZSicuGdSfyvyKpvUNYBW1s2U3NSrT6vrCYB9e6nZUEvrqnwXPF8ArTCRXMY\"\n+        addresses = [\n+            'bcrt1qtmp74ayg7p24uslctssvjm06q5phz4yrxucgnv', # m/0'/0'/0\n+            'bcrt1q8vprchan07gzagd5e6v9wd7azyucksq2xc76k8', # m/0'/0'/1\n+            'bcrt1qtuqdtha7zmqgcrr26n2rqxztv5y8rafjp9lulu', # m/0'/0'/2\n+            'bcrt1qau64272ymawq26t90md6an0ps99qkrse58m640', # m/0'/0'/3\n+            'bcrt1qsg97266hrh6cpmutqen8s4s962aryy77jp0fg0', # m/0'/0'/4\n+        ]\n+\n+        self.test_importdesc({'desc': descsum_create('wpkh([80002067/0h/0h]' + xpub + '/*)'),\n+                              'active': True,\n+                              'range' : [0, 2],\n+                              'timestamp': 'now'\n+                             },\n+                             success=True)\n+\n+        for i in range(0, 4):\n+            addr = w1.getnewaddress('', 'bech32')",
      "path": "test/functional/wallet_importdescriptors.py",
      "position": null,
      "original_position": 210,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "7d1c6bbeb057c18da62201267efc2b675f142da3",
      "in_reply_to_id": 399325819,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-03-27T21:13:18Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399540638",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399540638"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 210,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399540670",
      "pull_request_review_id": 383203202,
      "id": 399540670,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU0MDY3MA==",
      "diff_hunk": "@@ -0,0 +1,293 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the importdescriptors RPC.\n+\n+Test importdescriptors by generating keys on node0, importing the corresponding\n+descriptors on node1 and then testing the address info for the different address\n+variants.\n+\n+- `get_key()` is called to generate keys on node0 and return the privkeys,\n+  pubkeys and all variants of scriptPubKey and address.\n+- `test_importdesc()` is called to send an importdescriptors call to node1, test\n+  success, and (if unsuccessful) test the error code and error message returned.\n+- `test_address()` is called to call getaddressinfo for an address on node1\n+  and test the values returned.\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.descriptors import descsum_create\n+from test_framework.util import (\n+    assert_equal,\n+)\n+from test_framework.wallet_util import (\n+    get_key,\n+    test_address,\n+)\n+\n+class ImportDescriptorsTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.extra_args = [[\"-addresstype=legacy\"],\n+                           [\"-addresstype=bech32\", \"-keypool=5\"]\n+                          ]\n+        self.setup_clean_chain = True\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def test_importdesc(self, req, success, error_code=None, error_message=None, warnings=None, wallet=None):\n+        \"\"\"Run importdescriptors and assert success\"\"\"\n+        if warnings is None:\n+            warnings = []\n+        wrpc = self.nodes[1].get_wallet_rpc('w1')\n+        if wallet is not None:\n+            wrpc = wallet\n+\n+        result = wrpc.importdescriptors([req])\n+        observed_warnings = []\n+        if 'warnings' in result[0]:\n+           observed_warnings = result[0]['warnings']\n+        assert_equal(\"\\n\".join(sorted(warnings)), \"\\n\".join(sorted(observed_warnings)))\n+        assert_equal(result[0]['success'], success)\n+        if error_code is not None:\n+            assert_equal(result[0]['error']['code'], error_code)\n+            assert_equal(result[0]['error']['message'], error_message)\n+\n+    def run_test(self):\n+        self.log.info('Setting up wallets')\n+        self.nodes[0].createwallet(wallet_name='w0', disable_private_keys=False)\n+        w0 = self.nodes[0].get_wallet_rpc('w0')\n+\n+        self.nodes[1].createwallet(wallet_name='w1', disable_private_keys=True, blank=True, descriptors=True)\n+        w1 = self.nodes[1].get_wallet_rpc('w1')\n+        assert_equal(w1.getwalletinfo()['keypoolsize'], 0)\n+\n+        self.nodes[1].createwallet(wallet_name=\"wpriv\", disable_private_keys=False, blank=True, descriptors=True)\n+        wpriv = self.nodes[1].get_wallet_rpc(\"wpriv\")\n+        assert_equal(wpriv.getwalletinfo()['keypoolsize'], 0)\n+\n+        self.log.info('Mining coins')\n+        w0.generatetoaddress(101, w0.getnewaddress())\n+\n+        # RPC importdescriptors -----------------------------------------------\n+\n+        # # Test import fails if no descriptor present\n+        key = get_key(w0)\n+        self.log.info(\"Import should fail if a descriptor is not provided\")\n+        self.test_importdesc({\"timestamp\": \"now\"},\n+                             success=False,\n+                             error_code=-8,\n+                             error_message='Descriptor not found.')\n+\n+        # # Test importing of a P2PKH descriptor\n+        key = get_key(w0)\n+        self.log.info(\"Should import a p2pkh descriptor\")\n+        self.test_importdesc({\"desc\": descsum_create(\"pkh(\" + key.pubkey + \")\"),\n+                              \"timestamp\": \"now\",\n+                              \"label\": \"Descriptor import test\"},\n+                             success=True)\n+        test_address(w1,\n+                     key.p2pkh_addr,\n+                     solvable=True,\n+                     ismine=True,\n+                     labels=[\"Descriptor import test\"])\n+\n+        # # Test importing of a P2SH-P2WPKH descriptor\n+        key = get_key(w0)\n+        self.log.info(\"Should not import a p2sh-p2wpkh descriptor without checksum\")\n+        self.test_importdesc({\"desc\": \"sh(wpkh(\" + key.pubkey + \"))\",\n+                              \"timestamp\": \"now\"\n+                              },\n+                             success=False,\n+                             error_code=-5,\n+                             error_message=\"Missing checksum\")\n+\n+        self.log.info(\"Should not import a p2sh-p2wpkh descriptor that has range specified\")\n+        self.test_importdesc({\"desc\": descsum_create(\"sh(wpkh(\" + key.pubkey + \"))\"),\n+                               \"timestamp\": \"now\",\n+                               \"range\": 1,\n+                              },\n+                              success=False,\n+                              error_code=-8,\n+                              error_message=\"Range should not be specified for an un-ranged descriptor\")\n+\n+        self.log.info(\"Should not import a p2sh-p2wpkh descriptor and have it set to active\")\n+        self.test_importdesc({\"desc\": descsum_create(\"sh(wpkh(\" + key.pubkey + \"))\"),\n+                               \"timestamp\": \"now\",\n+                               \"active\": True,\n+                              },\n+                              success=False,\n+                              error_code=-8,\n+                              error_message=\"Active descriptor must be ranged\")\n+\n+        self.log.info(\"Should import a (non-active) p2sh-p2wpkh descriptor\")\n+        self.test_importdesc({\"desc\": descsum_create(\"sh(wpkh(\" + key.pubkey + \"))\"),\n+                               \"timestamp\": \"now\",\n+                               \"active\": False,\n+                              },\n+                              success=True)\n+\n+        test_address(w1,\n+                     key.p2sh_p2wpkh_addr,\n+                     ismine=True,\n+                     solvable=True)\n+\n+        # # Test importing of a multisig descriptor\n+        key1 = get_key(w0)\n+        key2 = get_key(w0)\n+        self.log.info(\"Should import a 1-of-2 bare multisig from descriptor\")\n+        self.test_importdesc({\"desc\": descsum_create(\"multi(1,\" + key1.pubkey + \",\" + key2.pubkey + \")\"),\n+                              \"timestamp\": \"now\"},\n+                             success=True)\n+        self.log.info(\"Should not treat individual keys from the imported bare multisig as watchonly\")\n+        test_address(w1,\n+                     key1.p2pkh_addr,\n+                     ismine=False)\n+\n+        # # Test ranged descriptors\n+        xpriv = \"tprv8ZgxMBicQKsPeuVhWwi6wuMQGfPKi9Li5GtX35jVNknACgqe3CY4g5xgkfDDJcmtF7o1QnxWDRYw4H5P26PXq7sbcUkEqeR4fg3Kxp2tigg\"\n+        xpub = \"tpubD6NzVbkrYhZ4YNXVQbNhMK1WqguFsUXceaVJKbmno2aZ3B6QfbMeraaYvnBSGpV3vxLyTTK9DYT1yoEck4XUScMzXoQ2U2oSmE2JyMedq3H\"\n+        addresses = [\"2N7yv4p8G8yEaPddJxY41kPihnWvs39qCMf\", \"2MsHxyb2JS3pAySeNUsJ7mNnurtpeenDzLA\"] # hdkeypath=m/0'/0'/0' and 1'\n+        addresses += [\"bcrt1qrd3n235cj2czsfmsuvqqpr3lu6lg0ju7scl8gn\", \"bcrt1qfqeppuvj0ww98r6qghmdkj70tv8qpchehegrg8\"] # wpkh subscripts corresponding to the above addresses\n+        desc = \"sh(wpkh(\" + xpub + \"/0'/0'/*'\" + \"))\"\n+        self.log.info(\"Ranged descriptor import should warn without a specified range\")\n+        self.test_importdesc({\"desc\": descsum_create(desc),\n+                               \"timestamp\": \"now\"},\n+                              success=True,\n+                              warnings=['Range not given, using default keypool range'])\n+\n+        # # Test importing of a ranged descriptor with xpriv\n+        self.log.info(\"Should not import a ranged descriptor that includes xpriv into a watch-only wallet\")\n+        desc = \"sh(wpkh(\" + xpriv + \"/0'/0'/*'\" + \"))\"\n+        self.test_importdesc({\"desc\": descsum_create(desc),\n+                              \"timestamp\": \"now\",\n+                              \"range\": 1},\n+                             success=False,\n+                             error_code=-4,\n+                             error_message='Cannot import private keys to a wallet with private keys disabled')\n+        for address in addresses:\n+            test_address(w1,\n+                         address,\n+                         ismine=False,\n+                         solvable=False)\n+\n+        self.test_importdesc({\"desc\": descsum_create(desc), \"timestamp\": \"now\", \"range\": -1},\n+                              success=False, error_code=-8, error_message='End of range is too high')\n+\n+        self.test_importdesc({\"desc\": descsum_create(desc), \"timestamp\": \"now\", \"range\": [-1, 10]},\n+                              success=False, error_code=-8, error_message='Range should be greater or equal than 0')\n+\n+        self.test_importdesc({\"desc\": descsum_create(desc), \"timestamp\": \"now\", \"range\": [(2 << 31 + 1) - 1000000, (2 << 31 + 1)]},\n+                              success=False, error_code=-8, error_message='End of range is too high')\n+\n+        self.test_importdesc({\"desc\": descsum_create(desc), \"timestamp\": \"now\", \"range\": [2, 1]},\n+                              success=False, error_code=-8, error_message='Range specified as [begin,end] must not have begin after end')\n+\n+        self.test_importdesc({\"desc\": descsum_create(desc), \"timestamp\": \"now\", \"range\": [0, 1000001]},\n+                              success=False, error_code=-8, error_message='Range is too large')\n+\n+        # Make sure ranged imports import keys in order\n+        w1 = self.nodes[1].get_wallet_rpc('w1')\n+        self.log.info('Key ranges should be imported in order')\n+        xpub = \"tpubDAXcJ7s7ZwicqjprRaEWdPoHKrCS215qxGYxpusRLLmJuT69ZSicuGdSfyvyKpvUNYBW1s2U3NSrT6vrCYB9e6nZUEvrqnwXPF8ArTCRXMY\"\n+        addresses = [\n+            'bcrt1qtmp74ayg7p24uslctssvjm06q5phz4yrxucgnv', # m/0'/0'/0\n+            'bcrt1q8vprchan07gzagd5e6v9wd7azyucksq2xc76k8', # m/0'/0'/1\n+            'bcrt1qtuqdtha7zmqgcrr26n2rqxztv5y8rafjp9lulu', # m/0'/0'/2\n+            'bcrt1qau64272ymawq26t90md6an0ps99qkrse58m640', # m/0'/0'/3\n+            'bcrt1qsg97266hrh6cpmutqen8s4s962aryy77jp0fg0', # m/0'/0'/4\n+        ]\n+\n+        self.test_importdesc({'desc': descsum_create('wpkh([80002067/0h/0h]' + xpub + '/*)'),\n+                              'active': True,\n+                              'range' : [0, 2],\n+                              'timestamp': 'now'\n+                             },\n+                             success=True)\n+\n+        for i in range(0, 4):\n+            addr = w1.getnewaddress('', 'bech32')\n+            assert_equal(addr, addresses[i])\n+\n+        # # Test importing a descriptor containing a WIF private key\n+        wif_priv = \"cTe1f5rdT8A8DFgVWTjyPwACsDPJM9ff4QngFxUixCSvvbg1x6sh\"\n+        address = \"2MuhcG52uHPknxDgmGPsV18jSHFBnnRgjPg\"\n+        desc = \"sh(wpkh(\" + wif_priv + \"))\"\n+        self.log.info(\"Should import a descriptor with a WIF private key as spendable\")\n+        self.test_importdesc({\"desc\": descsum_create(desc),\n+                               \"timestamp\": \"now\"},\n+                              success=True,\n+                              wallet=wpriv)\n+        test_address(wpriv,\n+                     address,\n+                     solvable=True,\n+                     ismine=True)\n+        txid = w0.sendtoaddress(address, 49.99995540)\n+        w0.generatetoaddress(6, w0.getnewaddress())\n+        self.sync_blocks()\n+        tx = wpriv.createrawtransaction([{\"txid\": txid, \"vout\": 0}], {w0.getnewaddress(): 49.999})\n+        signed_tx = wpriv.signrawtransactionwithwallet(tx)\n+        w1.sendrawtransaction(signed_tx['hex'])\n+\n+        # Make sure that we can use import and use multisig as addresses\n+        self.log.info('Test that multisigs can be imported, signed for, and getnewaddress\\'d')\n+        self.nodes[1].createwallet(wallet_name=\"wmulti_priv\", disable_private_keys=False, blank=True, descriptors=True)\n+        wmulti_priv = self.nodes[1].get_wallet_rpc(\"wmulti_priv\")\n+        assert_equal(wmulti_priv.getwalletinfo()['keypoolsize'], 0)\n+\n+        self.test_importdesc({\"desc\":\"wsh(multi(2,tprv8ZgxMBicQKsPevADjDCWsa6DfhkVXicu8NQUzfibwX2MexVwW4tCec5mXdCW8kJwkzBRRmAay1KZya4WsehVvjTGVW6JLqiqd8DdZ4xSg52/84h/0h/0h/*,tprv8ZgxMBicQKsPdSNWUhDiwTScDr6JfkZuLshTRwzvZGnMSnGikV6jxpmdDkC3YRc4T3GD6Nvg9uv6hQg73RVv1EiTXDZwxVbsLugVHU8B1aq/84h/0h/0h/*,tprv8ZgxMBicQKsPeonDt8Ka2mrQmHa61hQ5FQCsvWBTpSNzBFgM58cV2EuXNAHF14VawVpznnme3SuTbA62sGriwWyKifJmXntfNeK7zeqMCj1/84h/0h/0h/*))#m2sr93jn\",\n+                            \"active\": True,\n+                            \"range\": 1000,\n+                            \"next_index\": 0,\n+                            \"timestamp\": \"now\"},\n+                            success=True,\n+                            wallet=wmulti_priv)\n+        self.test_importdesc({\"desc\":\"wsh(multi(2,tprv8ZgxMBicQKsPevADjDCWsa6DfhkVXicu8NQUzfibwX2MexVwW4tCec5mXdCW8kJwkzBRRmAay1KZya4WsehVvjTGVW6JLqiqd8DdZ4xSg52/84h/1h/0h/*,tprv8ZgxMBicQKsPdSNWUhDiwTScDr6JfkZuLshTRwzvZGnMSnGikV6jxpmdDkC3YRc4T3GD6Nvg9uv6hQg73RVv1EiTXDZwxVbsLugVHU8B1aq/84h/1h/0h/*,tprv8ZgxMBicQKsPeonDt8Ka2mrQmHa61hQ5FQCsvWBTpSNzBFgM58cV2EuXNAHF14VawVpznnme3SuTbA62sGriwWyKifJmXntfNeK7zeqMCj1/84h/1h/0h/*))#q3sztvx5\",\n+                            \"active\": True,\n+                            \"internal\" : True,",
      "path": "test/functional/wallet_importdescriptors.py",
      "position": 319,
      "original_position": 248,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "7d1c6bbeb057c18da62201267efc2b675f142da3",
      "in_reply_to_id": 399327270,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-03-27T21:13:24Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399540670",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399540670"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 319,
      "original_line": 319,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399540684",
      "pull_request_review_id": 383203225,
      "id": 399540684,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU0MDY4NA==",
      "diff_hunk": "@@ -0,0 +1,293 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the importdescriptors RPC.\n+\n+Test importdescriptors by generating keys on node0, importing the corresponding\n+descriptors on node1 and then testing the address info for the different address\n+variants.\n+\n+- `get_key()` is called to generate keys on node0 and return the privkeys,\n+  pubkeys and all variants of scriptPubKey and address.\n+- `test_importdesc()` is called to send an importdescriptors call to node1, test\n+  success, and (if unsuccessful) test the error code and error message returned.\n+- `test_address()` is called to call getaddressinfo for an address on node1\n+  and test the values returned.\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.descriptors import descsum_create\n+from test_framework.util import (\n+    assert_equal,\n+)\n+from test_framework.wallet_util import (\n+    get_key,\n+    test_address,\n+)\n+\n+class ImportDescriptorsTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.extra_args = [[\"-addresstype=legacy\"],\n+                           [\"-addresstype=bech32\", \"-keypool=5\"]\n+                          ]\n+        self.setup_clean_chain = True\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def test_importdesc(self, req, success, error_code=None, error_message=None, warnings=None, wallet=None):\n+        \"\"\"Run importdescriptors and assert success\"\"\"\n+        if warnings is None:\n+            warnings = []\n+        wrpc = self.nodes[1].get_wallet_rpc('w1')\n+        if wallet is not None:\n+            wrpc = wallet\n+\n+        result = wrpc.importdescriptors([req])\n+        observed_warnings = []\n+        if 'warnings' in result[0]:\n+           observed_warnings = result[0]['warnings']\n+        assert_equal(\"\\n\".join(sorted(warnings)), \"\\n\".join(sorted(observed_warnings)))\n+        assert_equal(result[0]['success'], success)\n+        if error_code is not None:\n+            assert_equal(result[0]['error']['code'], error_code)\n+            assert_equal(result[0]['error']['message'], error_message)\n+\n+    def run_test(self):\n+        self.log.info('Setting up wallets')\n+        self.nodes[0].createwallet(wallet_name='w0', disable_private_keys=False)\n+        w0 = self.nodes[0].get_wallet_rpc('w0')\n+\n+        self.nodes[1].createwallet(wallet_name='w1', disable_private_keys=True, blank=True, descriptors=True)\n+        w1 = self.nodes[1].get_wallet_rpc('w1')\n+        assert_equal(w1.getwalletinfo()['keypoolsize'], 0)\n+\n+        self.nodes[1].createwallet(wallet_name=\"wpriv\", disable_private_keys=False, blank=True, descriptors=True)\n+        wpriv = self.nodes[1].get_wallet_rpc(\"wpriv\")\n+        assert_equal(wpriv.getwalletinfo()['keypoolsize'], 0)\n+\n+        self.log.info('Mining coins')\n+        w0.generatetoaddress(101, w0.getnewaddress())\n+\n+        # RPC importdescriptors -----------------------------------------------\n+\n+        # # Test import fails if no descriptor present\n+        key = get_key(w0)\n+        self.log.info(\"Import should fail if a descriptor is not provided\")\n+        self.test_importdesc({\"timestamp\": \"now\"},\n+                             success=False,\n+                             error_code=-8,\n+                             error_message='Descriptor not found.')\n+\n+        # # Test importing of a P2PKH descriptor\n+        key = get_key(w0)\n+        self.log.info(\"Should import a p2pkh descriptor\")\n+        self.test_importdesc({\"desc\": descsum_create(\"pkh(\" + key.pubkey + \")\"),\n+                              \"timestamp\": \"now\",\n+                              \"label\": \"Descriptor import test\"},\n+                             success=True)\n+        test_address(w1,\n+                     key.p2pkh_addr,\n+                     solvable=True,\n+                     ismine=True,\n+                     labels=[\"Descriptor import test\"])\n+\n+        # # Test importing of a P2SH-P2WPKH descriptor\n+        key = get_key(w0)\n+        self.log.info(\"Should not import a p2sh-p2wpkh descriptor without checksum\")\n+        self.test_importdesc({\"desc\": \"sh(wpkh(\" + key.pubkey + \"))\",\n+                              \"timestamp\": \"now\"\n+                              },\n+                             success=False,\n+                             error_code=-5,\n+                             error_message=\"Missing checksum\")\n+\n+        self.log.info(\"Should not import a p2sh-p2wpkh descriptor that has range specified\")\n+        self.test_importdesc({\"desc\": descsum_create(\"sh(wpkh(\" + key.pubkey + \"))\"),\n+                               \"timestamp\": \"now\",\n+                               \"range\": 1,\n+                              },\n+                              success=False,\n+                              error_code=-8,\n+                              error_message=\"Range should not be specified for an un-ranged descriptor\")\n+\n+        self.log.info(\"Should not import a p2sh-p2wpkh descriptor and have it set to active\")\n+        self.test_importdesc({\"desc\": descsum_create(\"sh(wpkh(\" + key.pubkey + \"))\"),\n+                               \"timestamp\": \"now\",\n+                               \"active\": True,\n+                              },\n+                              success=False,\n+                              error_code=-8,\n+                              error_message=\"Active descriptor must be ranged\")\n+\n+        self.log.info(\"Should import a (non-active) p2sh-p2wpkh descriptor\")\n+        self.test_importdesc({\"desc\": descsum_create(\"sh(wpkh(\" + key.pubkey + \"))\"),\n+                               \"timestamp\": \"now\",\n+                               \"active\": False,\n+                              },\n+                              success=True)\n+\n+        test_address(w1,\n+                     key.p2sh_p2wpkh_addr,\n+                     ismine=True,\n+                     solvable=True)\n+\n+        # # Test importing of a multisig descriptor\n+        key1 = get_key(w0)\n+        key2 = get_key(w0)\n+        self.log.info(\"Should import a 1-of-2 bare multisig from descriptor\")\n+        self.test_importdesc({\"desc\": descsum_create(\"multi(1,\" + key1.pubkey + \",\" + key2.pubkey + \")\"),\n+                              \"timestamp\": \"now\"},\n+                             success=True)\n+        self.log.info(\"Should not treat individual keys from the imported bare multisig as watchonly\")\n+        test_address(w1,\n+                     key1.p2pkh_addr,\n+                     ismine=False)\n+\n+        # # Test ranged descriptors\n+        xpriv = \"tprv8ZgxMBicQKsPeuVhWwi6wuMQGfPKi9Li5GtX35jVNknACgqe3CY4g5xgkfDDJcmtF7o1QnxWDRYw4H5P26PXq7sbcUkEqeR4fg3Kxp2tigg\"\n+        xpub = \"tpubD6NzVbkrYhZ4YNXVQbNhMK1WqguFsUXceaVJKbmno2aZ3B6QfbMeraaYvnBSGpV3vxLyTTK9DYT1yoEck4XUScMzXoQ2U2oSmE2JyMedq3H\"\n+        addresses = [\"2N7yv4p8G8yEaPddJxY41kPihnWvs39qCMf\", \"2MsHxyb2JS3pAySeNUsJ7mNnurtpeenDzLA\"] # hdkeypath=m/0'/0'/0' and 1'\n+        addresses += [\"bcrt1qrd3n235cj2czsfmsuvqqpr3lu6lg0ju7scl8gn\", \"bcrt1qfqeppuvj0ww98r6qghmdkj70tv8qpchehegrg8\"] # wpkh subscripts corresponding to the above addresses\n+        desc = \"sh(wpkh(\" + xpub + \"/0'/0'/*'\" + \"))\"\n+        self.log.info(\"Ranged descriptor import should warn without a specified range\")\n+        self.test_importdesc({\"desc\": descsum_create(desc),\n+                               \"timestamp\": \"now\"},\n+                              success=True,\n+                              warnings=['Range not given, using default keypool range'])\n+\n+        # # Test importing of a ranged descriptor with xpriv\n+        self.log.info(\"Should not import a ranged descriptor that includes xpriv into a watch-only wallet\")\n+        desc = \"sh(wpkh(\" + xpriv + \"/0'/0'/*'\" + \"))\"\n+        self.test_importdesc({\"desc\": descsum_create(desc),\n+                              \"timestamp\": \"now\",\n+                              \"range\": 1},\n+                             success=False,\n+                             error_code=-4,\n+                             error_message='Cannot import private keys to a wallet with private keys disabled')\n+        for address in addresses:\n+            test_address(w1,\n+                         address,\n+                         ismine=False,\n+                         solvable=False)\n+\n+        self.test_importdesc({\"desc\": descsum_create(desc), \"timestamp\": \"now\", \"range\": -1},\n+                              success=False, error_code=-8, error_message='End of range is too high')\n+\n+        self.test_importdesc({\"desc\": descsum_create(desc), \"timestamp\": \"now\", \"range\": [-1, 10]},\n+                              success=False, error_code=-8, error_message='Range should be greater or equal than 0')\n+\n+        self.test_importdesc({\"desc\": descsum_create(desc), \"timestamp\": \"now\", \"range\": [(2 << 31 + 1) - 1000000, (2 << 31 + 1)]},\n+                              success=False, error_code=-8, error_message='End of range is too high')\n+\n+        self.test_importdesc({\"desc\": descsum_create(desc), \"timestamp\": \"now\", \"range\": [2, 1]},\n+                              success=False, error_code=-8, error_message='Range specified as [begin,end] must not have begin after end')\n+\n+        self.test_importdesc({\"desc\": descsum_create(desc), \"timestamp\": \"now\", \"range\": [0, 1000001]},\n+                              success=False, error_code=-8, error_message='Range is too large')\n+\n+        # Make sure ranged imports import keys in order\n+        w1 = self.nodes[1].get_wallet_rpc('w1')\n+        self.log.info('Key ranges should be imported in order')\n+        xpub = \"tpubDAXcJ7s7ZwicqjprRaEWdPoHKrCS215qxGYxpusRLLmJuT69ZSicuGdSfyvyKpvUNYBW1s2U3NSrT6vrCYB9e6nZUEvrqnwXPF8ArTCRXMY\"\n+        addresses = [\n+            'bcrt1qtmp74ayg7p24uslctssvjm06q5phz4yrxucgnv', # m/0'/0'/0\n+            'bcrt1q8vprchan07gzagd5e6v9wd7azyucksq2xc76k8', # m/0'/0'/1\n+            'bcrt1qtuqdtha7zmqgcrr26n2rqxztv5y8rafjp9lulu', # m/0'/0'/2\n+            'bcrt1qau64272ymawq26t90md6an0ps99qkrse58m640', # m/0'/0'/3\n+            'bcrt1qsg97266hrh6cpmutqen8s4s962aryy77jp0fg0', # m/0'/0'/4\n+        ]\n+\n+        self.test_importdesc({'desc': descsum_create('wpkh([80002067/0h/0h]' + xpub + '/*)'),\n+                              'active': True,\n+                              'range' : [0, 2],\n+                              'timestamp': 'now'\n+                             },\n+                             success=True)\n+\n+        for i in range(0, 4):\n+            addr = w1.getnewaddress('', 'bech32')\n+            assert_equal(addr, addresses[i])\n+\n+        # # Test importing a descriptor containing a WIF private key\n+        wif_priv = \"cTe1f5rdT8A8DFgVWTjyPwACsDPJM9ff4QngFxUixCSvvbg1x6sh\"\n+        address = \"2MuhcG52uHPknxDgmGPsV18jSHFBnnRgjPg\"\n+        desc = \"sh(wpkh(\" + wif_priv + \"))\"\n+        self.log.info(\"Should import a descriptor with a WIF private key as spendable\")\n+        self.test_importdesc({\"desc\": descsum_create(desc),\n+                               \"timestamp\": \"now\"},\n+                              success=True,\n+                              wallet=wpriv)\n+        test_address(wpriv,\n+                     address,\n+                     solvable=True,\n+                     ismine=True)\n+        txid = w0.sendtoaddress(address, 49.99995540)\n+        w0.generatetoaddress(6, w0.getnewaddress())\n+        self.sync_blocks()\n+        tx = wpriv.createrawtransaction([{\"txid\": txid, \"vout\": 0}], {w0.getnewaddress(): 49.999})\n+        signed_tx = wpriv.signrawtransactionwithwallet(tx)\n+        w1.sendrawtransaction(signed_tx['hex'])\n+\n+        # Make sure that we can use import and use multisig as addresses\n+        self.log.info('Test that multisigs can be imported, signed for, and getnewaddress\\'d')\n+        self.nodes[1].createwallet(wallet_name=\"wmulti_priv\", disable_private_keys=False, blank=True, descriptors=True)\n+        wmulti_priv = self.nodes[1].get_wallet_rpc(\"wmulti_priv\")\n+        assert_equal(wmulti_priv.getwalletinfo()['keypoolsize'], 0)\n+\n+        self.test_importdesc({\"desc\":\"wsh(multi(2,tprv8ZgxMBicQKsPevADjDCWsa6DfhkVXicu8NQUzfibwX2MexVwW4tCec5mXdCW8kJwkzBRRmAay1KZya4WsehVvjTGVW6JLqiqd8DdZ4xSg52/84h/0h/0h/*,tprv8ZgxMBicQKsPdSNWUhDiwTScDr6JfkZuLshTRwzvZGnMSnGikV6jxpmdDkC3YRc4T3GD6Nvg9uv6hQg73RVv1EiTXDZwxVbsLugVHU8B1aq/84h/0h/0h/*,tprv8ZgxMBicQKsPeonDt8Ka2mrQmHa61hQ5FQCsvWBTpSNzBFgM58cV2EuXNAHF14VawVpznnme3SuTbA62sGriwWyKifJmXntfNeK7zeqMCj1/84h/0h/0h/*))#m2sr93jn\",\n+                            \"active\": True,\n+                            \"range\": 1000,\n+                            \"next_index\": 0,\n+                            \"timestamp\": \"now\"},\n+                            success=True,\n+                            wallet=wmulti_priv)\n+        self.test_importdesc({\"desc\":\"wsh(multi(2,tprv8ZgxMBicQKsPevADjDCWsa6DfhkVXicu8NQUzfibwX2MexVwW4tCec5mXdCW8kJwkzBRRmAay1KZya4WsehVvjTGVW6JLqiqd8DdZ4xSg52/84h/1h/0h/*,tprv8ZgxMBicQKsPdSNWUhDiwTScDr6JfkZuLshTRwzvZGnMSnGikV6jxpmdDkC3YRc4T3GD6Nvg9uv6hQg73RVv1EiTXDZwxVbsLugVHU8B1aq/84h/1h/0h/*,tprv8ZgxMBicQKsPeonDt8Ka2mrQmHa61hQ5FQCsvWBTpSNzBFgM58cV2EuXNAHF14VawVpznnme3SuTbA62sGriwWyKifJmXntfNeK7zeqMCj1/84h/1h/0h/*))#q3sztvx5\",\n+                            \"active\": True,\n+                            \"internal\" : True,\n+                            \"range\": 1000,\n+                            \"next_index\": 0,\n+                            \"timestamp\": \"now\"},\n+                            success=True,\n+                            wallet=wmulti_priv)\n+\n+        addr = wmulti_priv.getnewaddress('', 'bech32')\n+        assert_equal(addr, 'bcrt1qdt0qy5p7dzhxzmegnn4ulzhard33s2809arjqgjndx87rv5vd0fq2czhy8') # Derived at m/84'/0'/0'/0\n+        txid = w0.sendtoaddress(addr, 10)\n+        self.nodes[0].generate(6)\n+        send_txid = wmulti_priv.sendtoaddress(w0.getnewaddress(), 8)\n+        decoded = wmulti_priv.decoderawtransaction(wmulti_priv.gettransaction(send_txid)['hex'])\n+        assert_equal(len(decoded['vin'][0]['txinwitness']), 4)\n+        self.nodes[0].generate(6)\n+        self.sync_all()\n+\n+        self.nodes[1].createwallet(wallet_name=\"wmulti_pub\", disable_private_keys=True, blank=True, descriptors=True)\n+        wmulti_pub = self.nodes[1].get_wallet_rpc(\"wmulti_pub\")\n+        assert_equal(wmulti_pub.getwalletinfo()['keypoolsize'], 0)\n+\n+        self.test_importdesc({\"desc\":\"wsh(multi(2,[7b2d0242/84h/0h/0h]tpubDCJtdt5dgJpdhW4MtaVYDhG4T4tF6jcLR1PxL43q9pq1mxvXgMS9Mzw1HnXG15vxUGQJMMSqCQHMTy3F1eW5VkgVroWzchsPD5BUojrcWs8/*,[59b09cd6/84h/0h/0h]tpubDDBF2BTR6s8drwrfDei8WxtckGuSm1cyoKxYY1QaKSBFbHBYQArWhHPA6eJrzZej6nfHGLSURYSLHr7GuYch8aY5n61tGqgn8b4cXrMuoPH/*,[e81a0532/84h/0h/0h]tpubDCsWoW1kuQB9kG5MXewHqkbjPtqPueRnXju7uM2NK7y3JYb2ajAZ9EiuZXNNuE4661RAfriBWhL8UsnAPpk8zrKKnZw1Ug7X4oHgMdZiU4E/*))#tsry0s5e\",\n+                            \"active\": True,\n+                            \"range\": 1000,\n+                            \"next_index\": 0,\n+                            \"timestamp\": \"now\"},\n+                            success=True,\n+                            wallet=wmulti_pub)\n+        self.test_importdesc({\"desc\":\"wsh(multi(2,[7b2d0242/84h/1h/0h]tpubDCXqdwWZcszwqYJSnZp8eARkxGJfHAk23KDxbztV4BbschfaTfYLTcSkSJ3TN64dRqwa1rnFUScsYormKkGqNbbPwkorQimVevXjxzUV9Gf/*,[59b09cd6/84h/1h/0h]tpubDCYfZY2ceyHzYzMMVPt9MNeiqtQ2T7Uyp9QSFwYXh8Vi9iJFYXcuphJaGXfF3jUQJi5Y3GMNXvM11gaL4txzZgNGK22BFAwMXynnzv4z2Jh/*,[e81a0532/84h/1h/0h]tpubDC6UGqnsQStngYuGD4MKsMy7eD1Yg9NTJfPdvjdG2JE5oZ7EsSL3WHg4Gsw2pR5K39ZwJ46M1wZayhedVdQtMGaUhq5S23PH6fnENK3V1sb/*))#c08a2rzv\",\n+                            \"active\": True,\n+                            \"internal\" : True,",
      "path": "test/functional/wallet_importdescriptors.py",
      "position": 353,
      "original_position": 278,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "7d1c6bbeb057c18da62201267efc2b675f142da3",
      "in_reply_to_id": 399327486,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-03-27T21:13:28Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399540684",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399540684"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 353,
      "original_line": 353,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399540725",
      "pull_request_review_id": 383203265,
      "id": 399540725,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU0MDcyNQ==",
      "diff_hunk": "@@ -0,0 +1,293 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the importdescriptors RPC.\n+\n+Test importdescriptors by generating keys on node0, importing the corresponding\n+descriptors on node1 and then testing the address info for the different address\n+variants.\n+\n+- `get_key()` is called to generate keys on node0 and return the privkeys,\n+  pubkeys and all variants of scriptPubKey and address.\n+- `test_importdesc()` is called to send an importdescriptors call to node1, test\n+  success, and (if unsuccessful) test the error code and error message returned.\n+- `test_address()` is called to call getaddressinfo for an address on node1\n+  and test the values returned.\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.descriptors import descsum_create\n+from test_framework.util import (\n+    assert_equal,\n+)\n+from test_framework.wallet_util import (\n+    get_key,\n+    test_address,\n+)\n+\n+class ImportDescriptorsTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.extra_args = [[\"-addresstype=legacy\"],\n+                           [\"-addresstype=bech32\", \"-keypool=5\"]\n+                          ]\n+        self.setup_clean_chain = True\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def test_importdesc(self, req, success, error_code=None, error_message=None, warnings=None, wallet=None):\n+        \"\"\"Run importdescriptors and assert success\"\"\"\n+        if warnings is None:\n+            warnings = []\n+        wrpc = self.nodes[1].get_wallet_rpc('w1')\n+        if wallet is not None:\n+            wrpc = wallet\n+\n+        result = wrpc.importdescriptors([req])\n+        observed_warnings = []\n+        if 'warnings' in result[0]:\n+           observed_warnings = result[0]['warnings']\n+        assert_equal(\"\\n\".join(sorted(warnings)), \"\\n\".join(sorted(observed_warnings)))\n+        assert_equal(result[0]['success'], success)\n+        if error_code is not None:\n+            assert_equal(result[0]['error']['code'], error_code)\n+            assert_equal(result[0]['error']['message'], error_message)\n+\n+    def run_test(self):\n+        self.log.info('Setting up wallets')\n+        self.nodes[0].createwallet(wallet_name='w0', disable_private_keys=False)\n+        w0 = self.nodes[0].get_wallet_rpc('w0')\n+\n+        self.nodes[1].createwallet(wallet_name='w1', disable_private_keys=True, blank=True, descriptors=True)\n+        w1 = self.nodes[1].get_wallet_rpc('w1')\n+        assert_equal(w1.getwalletinfo()['keypoolsize'], 0)\n+\n+        self.nodes[1].createwallet(wallet_name=\"wpriv\", disable_private_keys=False, blank=True, descriptors=True)\n+        wpriv = self.nodes[1].get_wallet_rpc(\"wpriv\")\n+        assert_equal(wpriv.getwalletinfo()['keypoolsize'], 0)",
      "path": "test/functional/wallet_importdescriptors.py",
      "position": 70,
      "original_position": 68,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "7d1c6bbeb057c18da62201267efc2b675f142da3",
      "in_reply_to_id": 399328411,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-03-27T21:13:32Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399540725",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399540725"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 70,
      "original_line": 70,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399540804",
      "pull_request_review_id": 383203355,
      "id": 399540804,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU0MDgwNA==",
      "diff_hunk": "@@ -0,0 +1,293 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the importdescriptors RPC.\n+\n+Test importdescriptors by generating keys on node0, importing the corresponding\n+descriptors on node1 and then testing the address info for the different address\n+variants.\n+\n+- `get_key()` is called to generate keys on node0 and return the privkeys,\n+  pubkeys and all variants of scriptPubKey and address.\n+- `test_importdesc()` is called to send an importdescriptors call to node1, test\n+  success, and (if unsuccessful) test the error code and error message returned.\n+- `test_address()` is called to call getaddressinfo for an address on node1\n+  and test the values returned.\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.descriptors import descsum_create\n+from test_framework.util import (\n+    assert_equal,\n+)\n+from test_framework.wallet_util import (\n+    get_key,\n+    test_address,\n+)\n+\n+class ImportDescriptorsTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.extra_args = [[\"-addresstype=legacy\"],\n+                           [\"-addresstype=bech32\", \"-keypool=5\"]\n+                          ]\n+        self.setup_clean_chain = True\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def test_importdesc(self, req, success, error_code=None, error_message=None, warnings=None, wallet=None):\n+        \"\"\"Run importdescriptors and assert success\"\"\"\n+        if warnings is None:\n+            warnings = []\n+        wrpc = self.nodes[1].get_wallet_rpc('w1')\n+        if wallet is not None:\n+            wrpc = wallet\n+\n+        result = wrpc.importdescriptors([req])\n+        observed_warnings = []\n+        if 'warnings' in result[0]:\n+           observed_warnings = result[0]['warnings']\n+        assert_equal(\"\\n\".join(sorted(warnings)), \"\\n\".join(sorted(observed_warnings)))\n+        assert_equal(result[0]['success'], success)\n+        if error_code is not None:\n+            assert_equal(result[0]['error']['code'], error_code)\n+            assert_equal(result[0]['error']['message'], error_message)\n+\n+    def run_test(self):\n+        self.log.info('Setting up wallets')\n+        self.nodes[0].createwallet(wallet_name='w0', disable_private_keys=False)\n+        w0 = self.nodes[0].get_wallet_rpc('w0')\n+\n+        self.nodes[1].createwallet(wallet_name='w1', disable_private_keys=True, blank=True, descriptors=True)\n+        w1 = self.nodes[1].get_wallet_rpc('w1')\n+        assert_equal(w1.getwalletinfo()['keypoolsize'], 0)\n+\n+        self.nodes[1].createwallet(wallet_name=\"wpriv\", disable_private_keys=False, blank=True, descriptors=True)\n+        wpriv = self.nodes[1].get_wallet_rpc(\"wpriv\")\n+        assert_equal(wpriv.getwalletinfo()['keypoolsize'], 0)\n+\n+        self.log.info('Mining coins')\n+        w0.generatetoaddress(101, w0.getnewaddress())\n+\n+        # RPC importdescriptors -----------------------------------------------\n+\n+        # # Test import fails if no descriptor present\n+        key = get_key(w0)\n+        self.log.info(\"Import should fail if a descriptor is not provided\")\n+        self.test_importdesc({\"timestamp\": \"now\"},\n+                             success=False,\n+                             error_code=-8,\n+                             error_message='Descriptor not found.')\n+\n+        # # Test importing of a P2PKH descriptor\n+        key = get_key(w0)\n+        self.log.info(\"Should import a p2pkh descriptor\")\n+        self.test_importdesc({\"desc\": descsum_create(\"pkh(\" + key.pubkey + \")\"),\n+                              \"timestamp\": \"now\",\n+                              \"label\": \"Descriptor import test\"},\n+                             success=True)\n+        test_address(w1,\n+                     key.p2pkh_addr,\n+                     solvable=True,\n+                     ismine=True,\n+                     labels=[\"Descriptor import test\"])\n+\n+        # # Test importing of a P2SH-P2WPKH descriptor\n+        key = get_key(w0)\n+        self.log.info(\"Should not import a p2sh-p2wpkh descriptor without checksum\")\n+        self.test_importdesc({\"desc\": \"sh(wpkh(\" + key.pubkey + \"))\",\n+                              \"timestamp\": \"now\"\n+                              },\n+                             success=False,\n+                             error_code=-5,\n+                             error_message=\"Missing checksum\")\n+\n+        self.log.info(\"Should not import a p2sh-p2wpkh descriptor that has range specified\")\n+        self.test_importdesc({\"desc\": descsum_create(\"sh(wpkh(\" + key.pubkey + \"))\"),\n+                               \"timestamp\": \"now\",\n+                               \"range\": 1,\n+                              },\n+                              success=False,\n+                              error_code=-8,\n+                              error_message=\"Range should not be specified for an un-ranged descriptor\")\n+\n+        self.log.info(\"Should not import a p2sh-p2wpkh descriptor and have it set to active\")\n+        self.test_importdesc({\"desc\": descsum_create(\"sh(wpkh(\" + key.pubkey + \"))\"),\n+                               \"timestamp\": \"now\",\n+                               \"active\": True,\n+                              },\n+                              success=False,\n+                              error_code=-8,\n+                              error_message=\"Active descriptor must be ranged\")\n+\n+        self.log.info(\"Should import a (non-active) p2sh-p2wpkh descriptor\")\n+        self.test_importdesc({\"desc\": descsum_create(\"sh(wpkh(\" + key.pubkey + \"))\"),\n+                               \"timestamp\": \"now\",\n+                               \"active\": False,",
      "path": "test/functional/wallet_importdescriptors.py",
      "position": 139,
      "original_position": 127,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "7d1c6bbeb057c18da62201267efc2b675f142da3",
      "in_reply_to_id": 399330460,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-03-27T21:13:42Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399540804",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399540804"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 139,
      "original_line": 139,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399540853",
      "pull_request_review_id": 383203416,
      "id": 399540853,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU0MDg1Mw==",
      "diff_hunk": "@@ -0,0 +1,137 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test descriptor wallet function.\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error\n+)\n+\n+\n+class WalletDescriptorTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        self.extra_args = [['-keypool=100']]\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        # Make a descriptor wallet\n+        self.log.info(\"Making a descriptor wallet\")\n+        self.nodes[0].createwallet(wallet_name=\"desc1\", descriptors=True)\n+        self.nodes[0].unloadwallet(\"\")\n+\n+        # A descriptor wallet should have 100 addresses * 3 types = 300 keys\n+        self.log.info(\"Checking wallet info\")\n+        wallet_info = self.nodes[0].getwalletinfo()\n+        assert_equal(wallet_info['keypoolsize'], 300)\n+        assert_equal(wallet_info['keypoolsize_hd_internal'], 300)\n+\n+        # Check that getnewaddress works",
      "path": "test/functional/wallet_descriptor.py",
      "position": 36,
      "original_position": 35,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "15b044fd16c2b26cb28497cf150820b25fafae93",
      "in_reply_to_id": 399333787,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-03-27T21:13:49Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399540853",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399540853"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 36,
      "original_line": 36,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399541007",
      "pull_request_review_id": 383203597,
      "id": 399541007,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU0MTAwNw==",
      "diff_hunk": "@@ -0,0 +1,293 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the importdescriptors RPC.\n+\n+Test importdescriptors by generating keys on node0, importing the corresponding\n+descriptors on node1 and then testing the address info for the different address\n+variants.\n+\n+- `get_key()` is called to generate keys on node0 and return the privkeys,\n+  pubkeys and all variants of scriptPubKey and address.\n+- `test_importdesc()` is called to send an importdescriptors call to node1, test\n+  success, and (if unsuccessful) test the error code and error message returned.\n+- `test_address()` is called to call getaddressinfo for an address on node1\n+  and test the values returned.\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.descriptors import descsum_create\n+from test_framework.util import (\n+    assert_equal,\n+)\n+from test_framework.wallet_util import (\n+    get_key,\n+    test_address,\n+)\n+\n+class ImportDescriptorsTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.extra_args = [[\"-addresstype=legacy\"],\n+                           [\"-addresstype=bech32\", \"-keypool=5\"]\n+                          ]\n+        self.setup_clean_chain = True\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def test_importdesc(self, req, success, error_code=None, error_message=None, warnings=None, wallet=None):\n+        \"\"\"Run importdescriptors and assert success\"\"\"\n+        if warnings is None:\n+            warnings = []\n+        wrpc = self.nodes[1].get_wallet_rpc('w1')\n+        if wallet is not None:\n+            wrpc = wallet\n+\n+        result = wrpc.importdescriptors([req])\n+        observed_warnings = []\n+        if 'warnings' in result[0]:\n+           observed_warnings = result[0]['warnings']\n+        assert_equal(\"\\n\".join(sorted(warnings)), \"\\n\".join(sorted(observed_warnings)))\n+        assert_equal(result[0]['success'], success)\n+        if error_code is not None:\n+            assert_equal(result[0]['error']['code'], error_code)\n+            assert_equal(result[0]['error']['message'], error_message)\n+\n+    def run_test(self):\n+        self.log.info('Setting up wallets')\n+        self.nodes[0].createwallet(wallet_name='w0', disable_private_keys=False)\n+        w0 = self.nodes[0].get_wallet_rpc('w0')\n+\n+        self.nodes[1].createwallet(wallet_name='w1', disable_private_keys=True, blank=True, descriptors=True)\n+        w1 = self.nodes[1].get_wallet_rpc('w1')\n+        assert_equal(w1.getwalletinfo()['keypoolsize'], 0)\n+\n+        self.nodes[1].createwallet(wallet_name=\"wpriv\", disable_private_keys=False, blank=True, descriptors=True)\n+        wpriv = self.nodes[1].get_wallet_rpc(\"wpriv\")\n+        assert_equal(wpriv.getwalletinfo()['keypoolsize'], 0)\n+\n+        self.log.info('Mining coins')\n+        w0.generatetoaddress(101, w0.getnewaddress())\n+\n+        # RPC importdescriptors -----------------------------------------------\n+\n+        # # Test import fails if no descriptor present\n+        key = get_key(w0)\n+        self.log.info(\"Import should fail if a descriptor is not provided\")\n+        self.test_importdesc({\"timestamp\": \"now\"},\n+                             success=False,\n+                             error_code=-8,\n+                             error_message='Descriptor not found.')\n+\n+        # # Test importing of a P2PKH descriptor\n+        key = get_key(w0)\n+        self.log.info(\"Should import a p2pkh descriptor\")\n+        self.test_importdesc({\"desc\": descsum_create(\"pkh(\" + key.pubkey + \")\"),\n+                              \"timestamp\": \"now\",\n+                              \"label\": \"Descriptor import test\"},\n+                             success=True)\n+        test_address(w1,\n+                     key.p2pkh_addr,\n+                     solvable=True,\n+                     ismine=True,\n+                     labels=[\"Descriptor import test\"])\n+\n+        # # Test importing of a P2SH-P2WPKH descriptor\n+        key = get_key(w0)\n+        self.log.info(\"Should not import a p2sh-p2wpkh descriptor without checksum\")\n+        self.test_importdesc({\"desc\": \"sh(wpkh(\" + key.pubkey + \"))\",\n+                              \"timestamp\": \"now\"\n+                              },\n+                             success=False,\n+                             error_code=-5,\n+                             error_message=\"Missing checksum\")\n+\n+        self.log.info(\"Should not import a p2sh-p2wpkh descriptor that has range specified\")\n+        self.test_importdesc({\"desc\": descsum_create(\"sh(wpkh(\" + key.pubkey + \"))\"),\n+                               \"timestamp\": \"now\",\n+                               \"range\": 1,\n+                              },\n+                              success=False,\n+                              error_code=-8,\n+                              error_message=\"Range should not be specified for an un-ranged descriptor\")\n+\n+        self.log.info(\"Should not import a p2sh-p2wpkh descriptor and have it set to active\")\n+        self.test_importdesc({\"desc\": descsum_create(\"sh(wpkh(\" + key.pubkey + \"))\"),\n+                               \"timestamp\": \"now\",\n+                               \"active\": True,\n+                              },\n+                              success=False,\n+                              error_code=-8,\n+                              error_message=\"Active descriptor must be ranged\")\n+\n+        self.log.info(\"Should import a (non-active) p2sh-p2wpkh descriptor\")\n+        self.test_importdesc({\"desc\": descsum_create(\"sh(wpkh(\" + key.pubkey + \"))\"),\n+                               \"timestamp\": \"now\",\n+                               \"active\": False,\n+                              },\n+                              success=True)\n+\n+        test_address(w1,\n+                     key.p2sh_p2wpkh_addr,\n+                     ismine=True,\n+                     solvable=True)\n+\n+        # # Test importing of a multisig descriptor",
      "path": "test/functional/wallet_importdescriptors.py",
      "position": 149,
      "original_position": 136,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "7d1c6bbeb057c18da62201267efc2b675f142da3",
      "in_reply_to_id": 399336346,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Not sure what you mean by \"displacing\"",
      "created_at": "2020-03-27T21:14:10Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399541007",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399541007"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 149,
      "original_line": 149,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399541048",
      "pull_request_review_id": 383203643,
      "id": 399541048,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU0MTA0OA==",
      "diff_hunk": "@@ -1459,3 +1459,290 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n \n     return response;\n }\n+\n+static UniValue ProcessDescriptorImport(CWallet * const pwallet, const UniValue& data, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    UniValue warnings(UniValue::VARR);\n+    UniValue result(UniValue::VOBJ);\n+\n+    try {\n+        if (!data.exists(\"desc\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Descriptor not found.\");\n+        }\n+\n+        const std::string& descriptor = data[\"desc\"].get_str();\n+        const bool active = data.exists(\"active\") ? data[\"active\"].get_bool() : false;\n+        const bool internal = data.exists(\"internal\") ? data[\"internal\"].get_bool() : false;\n+        const std::string& label = data.exists(\"label\") ? data[\"label\"].get_str() : \"\";\n+\n+        // Parse descriptor string\n+        FlatSigningProvider keys;\n+        std::string error;\n+        auto parsed_desc = Parse(descriptor, keys, error, /* require_checksum = */ true);\n+        if (!parsed_desc) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, error);\n+        }\n+\n+        // Range check\n+        int64_t range_start = 0, range_end = 1, next_index = 0;\n+        if (!parsed_desc->IsRange() && data.exists(\"range\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Range should not be specified for an un-ranged descriptor\");\n+        } else if (parsed_desc->IsRange()) {\n+            if (data.exists(\"range\")) {\n+                auto range = ParseDescriptorRange(data[\"range\"]);\n+                range_start = range.first;\n+                range_end = range.second + 1; // Specified range end is inclusive, but we need range end as exclusive\n+            } else {\n+                warnings.push_back(\"Range not given, using default keypool range\");\n+                range_start = 0;\n+                range_end = gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE);\n+            }\n+            next_index = range_start;\n+\n+            if (data.exists(\"next_index\")) {\n+                next_index = data[\"next_index\"].get_int64();\n+                // bound checks\n+                if (next_index < range_start || next_index >= range_end) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"next_index is out of range\");\n+                }\n+            }\n+        }\n+\n+        // Active descriptor must be ranged\n+        if (active && !parsed_desc->IsRange()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Active descriptor must be ranged\");\n+        }\n+\n+        // Ranged descriptors should not have a label\n+        if (data.exists(\"range\") && data.exists(\"label\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Ranged descriptors should not have a label\");\n+        }\n+\n+        // Internal addresses should not have a label either\n+        if (internal && data.exists(\"label\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Internal addresses should not have a label\");\n+        }\n+\n+        // Combo descriptor check\n+        if (active && !parsed_desc->IsSingleType()) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Combo descriptors cannot be set to active\");\n+        }\n+\n+        // If the wallet disabled private keys, abort if private keys exist\n+        if (pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS) && !keys.keys.empty()) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Cannot import private keys to a wallet with private keys disabled\");\n+        }\n+\n+        // Check if all private keys are provided\n+        bool have_privkeys = true;\n+        for (const auto& entry : keys.pubkeys) {\n+            const CKeyID& key_id = entry.first;\n+            CKey key;\n+            if (!keys.GetKey(key_id, key)) {\n+                have_privkeys = false;\n+            }\n+        }\n+\n+        // If private keys are enabled, abort if private keys are not provided\n+        if (!pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS) && !have_privkeys) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Cannot import descriptor without private keys to a wallet with private keys enabled\");\n+        }\n+\n+        WalletDescriptor w_desc(std::move(parsed_desc), timestamp, range_start, range_end, next_index);\n+\n+        // Check if the wallet already contains the descriptor\n+        auto existing_spk_manager = pwallet->HasWalletDescriptor(w_desc);\n+        if (existing_spk_manager) {\n+            LOCK(existing_spk_manager->cs_desc_man);\n+            if (range_start > existing_spk_manager->GetWalletDescriptor().range_start) {\n+                throw JSONRPCError(RPC_INVALID_PARAMS, strprintf(\"range_start can only decrease; current range = [%d,%d]\", existing_spk_manager->GetWalletDescriptor().range_start, existing_spk_manager->GetWalletDescriptor().range_end));\n+            }\n+        }\n+\n+        // Add descriptor to the wallet\n+        auto spk_manager = pwallet->AddWalletDescriptor(w_desc, keys, label);\n+        if (spk_manager == nullptr) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, strprintf(\"Could not add descriptor '%s'\", descriptor));\n+        }\n+\n+        // Set descriptor as active if necessary\n+        if (active) {\n+            if (!w_desc.descriptor->GetOutputType()) {\n+                warnings.push_back(\"Unknown output type, cannot set descriptor to active.\");",
      "path": "src/wallet/rpcdump.cpp",
      "position": 125,
      "original_position": 113,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "a03a8cbd1f42636834263135e904900cc808d346",
      "in_reply_to_id": 399350834,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added a test.",
      "created_at": "2020-03-27T21:14:17Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399541048",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399541048"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1582,
      "original_line": 1582,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399541096",
      "pull_request_review_id": 383203704,
      "id": 399541096,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU0MTA5Ng==",
      "diff_hunk": "@@ -1459,3 +1459,290 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n \n     return response;\n }\n+\n+static UniValue ProcessDescriptorImport(CWallet * const pwallet, const UniValue& data, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    UniValue warnings(UniValue::VARR);\n+    UniValue result(UniValue::VOBJ);\n+\n+    try {\n+        if (!data.exists(\"desc\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Descriptor not found.\");\n+        }\n+\n+        const std::string& descriptor = data[\"desc\"].get_str();\n+        const bool active = data.exists(\"active\") ? data[\"active\"].get_bool() : false;\n+        const bool internal = data.exists(\"internal\") ? data[\"internal\"].get_bool() : false;\n+        const std::string& label = data.exists(\"label\") ? data[\"label\"].get_str() : \"\";\n+\n+        // Parse descriptor string\n+        FlatSigningProvider keys;\n+        std::string error;\n+        auto parsed_desc = Parse(descriptor, keys, error, /* require_checksum = */ true);\n+        if (!parsed_desc) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, error);\n+        }\n+\n+        // Range check\n+        int64_t range_start = 0, range_end = 1, next_index = 0;\n+        if (!parsed_desc->IsRange() && data.exists(\"range\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Range should not be specified for an un-ranged descriptor\");\n+        } else if (parsed_desc->IsRange()) {\n+            if (data.exists(\"range\")) {\n+                auto range = ParseDescriptorRange(data[\"range\"]);\n+                range_start = range.first;\n+                range_end = range.second + 1; // Specified range end is inclusive, but we need range end as exclusive\n+            } else {\n+                warnings.push_back(\"Range not given, using default keypool range\");\n+                range_start = 0;\n+                range_end = gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE);\n+            }\n+            next_index = range_start;\n+\n+            if (data.exists(\"next_index\")) {\n+                next_index = data[\"next_index\"].get_int64();\n+                // bound checks\n+                if (next_index < range_start || next_index >= range_end) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"next_index is out of range\");\n+                }\n+            }\n+        }\n+\n+        // Active descriptor must be ranged\n+        if (active && !parsed_desc->IsRange()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Active descriptor must be ranged\");\n+        }\n+\n+        // Ranged descriptors should not have a label\n+        if (data.exists(\"range\") && data.exists(\"label\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Ranged descriptors should not have a label\");\n+        }\n+\n+        // Internal addresses should not have a label either\n+        if (internal && data.exists(\"label\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Internal addresses should not have a label\");\n+        }\n+\n+        // Combo descriptor check\n+        if (active && !parsed_desc->IsSingleType()) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Combo descriptors cannot be set to active\");\n+        }\n+\n+        // If the wallet disabled private keys, abort if private keys exist\n+        if (pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS) && !keys.keys.empty()) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Cannot import private keys to a wallet with private keys disabled\");\n+        }\n+\n+        // Check if all private keys are provided\n+        bool have_privkeys = true;\n+        for (const auto& entry : keys.pubkeys) {\n+            const CKeyID& key_id = entry.first;\n+            CKey key;\n+            if (!keys.GetKey(key_id, key)) {\n+                have_privkeys = false;\n+            }\n+        }\n+\n+        // If private keys are enabled, abort if private keys are not provided\n+        if (!pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS) && !have_privkeys) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Cannot import descriptor without private keys to a wallet with private keys enabled\");\n+        }\n+\n+        WalletDescriptor w_desc(std::move(parsed_desc), timestamp, range_start, range_end, next_index);\n+\n+        // Check if the wallet already contains the descriptor\n+        auto existing_spk_manager = pwallet->HasWalletDescriptor(w_desc);\n+        if (existing_spk_manager) {\n+            LOCK(existing_spk_manager->cs_desc_man);\n+            if (range_start > existing_spk_manager->GetWalletDescriptor().range_start) {\n+                throw JSONRPCError(RPC_INVALID_PARAMS, strprintf(\"range_start can only decrease; current range = [%d,%d]\", existing_spk_manager->GetWalletDescriptor().range_start, existing_spk_manager->GetWalletDescriptor().range_end));\n+            }\n+        }\n+\n+        // Add descriptor to the wallet\n+        auto spk_manager = pwallet->AddWalletDescriptor(w_desc, keys, label);\n+        if (spk_manager == nullptr) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, strprintf(\"Could not add descriptor '%s'\", descriptor));\n+        }\n+\n+        // Set descriptor as active if necessary\n+        if (active) {\n+            if (!w_desc.descriptor->GetOutputType()) {\n+                warnings.push_back(\"Unknown output type, cannot set descriptor to active.\");\n+            } else {\n+                pwallet->SetActiveScriptPubKeyMan(spk_manager->GetID(), *w_desc.descriptor->GetOutputType(), internal);\n+            }\n+        }\n+\n+        result.pushKV(\"success\", UniValue(true));\n+    } catch (const UniValue& e) {\n+        result.pushKV(\"success\", UniValue(false));\n+        result.pushKV(\"error\", e);\n+    } catch (...) {\n+        result.pushKV(\"success\", UniValue(false));\n+\n+        result.pushKV(\"error\", JSONRPCError(RPC_MISC_ERROR, \"Missing required fields\"));\n+    }\n+    if (warnings.size()) result.pushKV(\"warnings\", warnings);\n+    return result;\n+}\n+\n+UniValue importdescriptors(const JSONRPCRequest& main_request) {\n+    // Acquire the wallet\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(main_request);\n+    CWallet* const pwallet = wallet.get();\n+    if (!EnsureWalletIsAvailable(pwallet, main_request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+            RPCHelpMan{\"importdescriptors\",\n+                \"\\nImport descriptors. This will trigger a rescan of the blockchain based on the earliest timestamp of all descriptors being imported. Requires a new wallet backup.\\n\"\n+            \"\\nNote: This call can take over an hour to complete if using an early timestamp, during that time, other rpc calls\\n\"\n+            \"may report that the imported keys, addresses or scripts exists but related transactions are still missing.\\n\",\n+                {\n+                    {\"requests\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"Data to be imported\",\n+                        {\n+                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                                {\n+                                    {\"desc\", RPCArg::Type::STR, RPCArg::Optional::NO, \"Descriptor to import.\"},\n+                                    {\"active\", RPCArg::Type::BOOL, /* default */ \"true\", \"Set this descriptor to be the active descriptor for the corresponding output type/externality\"},",
      "path": "src/wallet/rpcdump.cpp",
      "position": null,
      "original_position": 150,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "a03a8cbd1f42636834263135e904900cc808d346",
      "in_reply_to_id": 399361504,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed",
      "created_at": "2020-03-27T21:14:24Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399541096",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399541096"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1608,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399542742",
      "pull_request_review_id": 383205803,
      "id": 399542742,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU0Mjc0Mg==",
      "diff_hunk": "@@ -1496,3 +1496,616 @@ std::set<CKeyID> LegacyScriptPubKeyMan::GetKeys() const\n     }\n     return set_address;\n }\n+\n+void LegacyScriptPubKeyMan::SetType(OutputType type, bool internal) {}\n+\n+bool DescriptorScriptPubKeyMan::GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error)\n+{\n+    // Returns true if this descriptor supports getting new addresses. Conditions where we may be unable to fetch them (e.g. locked) are caught later\n+    if (!CanGetAddresses(m_internal)) {\n+        error = \"No addresses available\";\n+        return false;\n+    }\n+    {\n+        LOCK(cs_desc_man);\n+        assert(m_wallet_descriptor.descriptor->IsSingleType()); // This is a combo descriptor which should not be an active descriptor\n+        if (type != m_address_type) {\n+            throw std::runtime_error(std::string(__func__) + \": Types are inconsistent\");\n+        }\n+\n+        TopUp();\n+\n+        // Get the scriptPubKey from the descriptor\n+        FlatSigningProvider out_keys;\n+        std::vector<CScript> scripts_temp;\n+        if (m_wallet_descriptor.range_end <= m_max_cached_index && !TopUp(1)) {\n+            // We can't generate anymore keys\n+            error = \"Error: Keypool ran out, please call keypoolrefill first\";\n+            return false;\n+        }\n+        if (!m_wallet_descriptor.descriptor->ExpandFromCache(m_wallet_descriptor.next_index, m_wallet_descriptor.cache, scripts_temp, out_keys)) {\n+            // We can't generate anymore keys\n+            error = \"Error: Keypool ran out, please call keypoolrefill first\";\n+            return false;\n+        }\n+\n+        Optional<OutputType> out_script_type = m_wallet_descriptor.descriptor->GetOutputType();\n+        if (out_script_type && out_script_type == type) {\n+            ExtractDestination(scripts_temp[0], dest);\n+        } else {\n+            throw std::runtime_error(std::string(__func__) + \": Types are inconsistent. Stored type does not match type of newly generated address\");\n+        }\n+        m_wallet_descriptor.next_index++;\n+        WalletBatch(m_storage.GetDatabase()).WriteDescriptor(GetID(), m_wallet_descriptor);\n+        return true;\n+    }\n+}\n+\n+isminetype DescriptorScriptPubKeyMan::IsMine(const CScript& script) const\n+{\n+    LOCK(cs_desc_man);\n+    if (m_map_script_pub_keys.count(script) > 0) {\n+        return ISMINE_SPENDABLE;\n+    }\n+    return ISMINE_NO;\n+}\n+\n+bool DescriptorScriptPubKeyMan::CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys)\n+{\n+    {\n+        LOCK(cs_desc_man);\n+        if (!m_map_keys.empty())\n+            return false;\n+\n+        bool keyPass = m_map_crypted_keys.empty(); // Always pass when there are no encrypted keys\n+        bool keyFail = false;\n+        CryptedKeyMap::const_iterator mi = m_map_crypted_keys.begin();\n+        for (; mi != m_map_crypted_keys.end(); ++mi)\n+        {\n+            const CPubKey &pubkey = (*mi).second.first;\n+            const std::vector<unsigned char> &crypted_secret = (*mi).second.second;\n+            CKey key;\n+            if (!DecryptKey(master_key, crypted_secret, pubkey, key))\n+            {\n+                keyFail = true;\n+                break;\n+            }\n+            keyPass = true;\n+            if (m_decryption_thoroughly_checked)\n+                break;\n+        }\n+        if (keyPass && keyFail)\n+        {\n+            LogPrintf(\"The wallet is probably corrupted: Some keys decrypt but not all.\\n\");\n+            throw std::runtime_error(\"Error unlocking wallet: some keys decrypt but not all. Your wallet file may be corrupt.\");\n+        }\n+        if (keyFail || (!keyPass && !accept_no_keys))\n+            return false;\n+        m_decryption_thoroughly_checked = true;\n+    }\n+    return true;\n+}\n+\n+bool DescriptorScriptPubKeyMan::Encrypt(const CKeyingMaterial& master_key, WalletBatch* batch)\n+{\n+    LOCK(cs_desc_man);\n+    if (!m_map_crypted_keys.empty()) {\n+        return false;\n+    }\n+\n+    for (const KeyMap::value_type& key_in : m_map_keys)\n+    {\n+        const CKey &key = key_in.second;\n+        CPubKey pubkey = key.GetPubKey();\n+        CKeyingMaterial secret(key.begin(), key.end());\n+        std::vector<unsigned char> crypted_secret;\n+        if (!EncryptSecret(master_key, secret, pubkey.GetHash(), crypted_secret)) {\n+            return false;\n+        }\n+        m_map_crypted_keys[pubkey.GetID()] = make_pair(pubkey, crypted_secret);\n+        batch->WriteCryptedDescriptorKey(GetID(), pubkey, crypted_secret);\n+    }\n+    m_map_keys.clear();\n+    return true;\n+}\n+\n+bool DescriptorScriptPubKeyMan::GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool)\n+{\n+    LOCK(cs_desc_man);\n+    std::string error;\n+    bool result = GetNewDestination(type, address, error);\n+    index = m_wallet_descriptor.next_index - 1;\n+    return result;\n+}\n+\n+void DescriptorScriptPubKeyMan::ReturnDestination(int64_t index, bool internal, const CTxDestination& addr)\n+{\n+    LOCK(cs_desc_man);\n+    // Only return when the index was the most recent\n+    if (m_wallet_descriptor.next_index - 1 == index) {\n+        m_wallet_descriptor.next_index--;\n+    }\n+    WalletBatch(m_storage.GetDatabase()).WriteDescriptor(GetID(), m_wallet_descriptor);\n+    NotifyCanGetAddressesChanged();\n+}\n+\n+std::map<CKeyID, CKey> DescriptorScriptPubKeyMan::GetKeys() const\n+{\n+    AssertLockHeld(cs_desc_man);\n+    if (m_storage.HasEncryptionKeys() && !m_storage.IsLocked()) {\n+        KeyMap keys;\n+        for (auto key_pair : m_map_crypted_keys) {\n+            const CPubKey& pubkey = key_pair.second.first;\n+            const std::vector<unsigned char>& crypted_secret = key_pair.second.second;\n+            CKey key;\n+            DecryptKey(m_storage.GetEncryptionKey(), crypted_secret, pubkey, key);\n+            keys[pubkey.GetID()] = key;\n+        }\n+        return keys;\n+    }\n+    return m_map_keys;\n+}\n+\n+bool DescriptorScriptPubKeyMan::TopUp(unsigned int size)\n+{\n+    LOCK(cs_desc_man);\n+    unsigned int target_size;\n+    if (size > 0) {\n+        target_size = size;\n+    } else {\n+        target_size = std::max(gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 1);\n+    }\n+\n+    // Calculate the new range_end\n+    int32_t new_range_end = std::max(m_wallet_descriptor.next_index + (int32_t)target_size, m_wallet_descriptor.range_end);\n+\n+    // If the descriptor is not ranged, we actually just want to fill the first cache item\n+    if (!m_wallet_descriptor.descriptor->IsRange()) {\n+        new_range_end = 1;\n+        m_wallet_descriptor.range_end = 1;\n+        m_wallet_descriptor.range_start = 0;\n+    }\n+\n+    FlatSigningProvider provider;\n+    provider.keys = GetKeys();\n+\n+    WalletBatch batch(m_storage.GetDatabase());\n+    uint256 id = GetID();\n+    for (int32_t i = m_max_cached_index + 1; i < new_range_end; ++i) {\n+        FlatSigningProvider out_keys;\n+        std::vector<CScript> scripts_temp;\n+        DescriptorCache temp_cache;\n+        // Maybe we have a cached xpub and we can expand from the cache first\n+        if (!m_wallet_descriptor.descriptor->ExpandFromCache(i, m_wallet_descriptor.cache, scripts_temp, out_keys)) {\n+            if (!m_wallet_descriptor.descriptor->Expand(i, provider, scripts_temp, out_keys, &temp_cache)) return false;\n+        }\n+        // Add all of the scriptPubKeys to the scriptPubKey set\n+        for (const CScript& script : scripts_temp) {\n+            m_map_script_pub_keys[script] = i;\n+        }\n+        // Write the cache\n+        for (const auto& parent_xpub_pair : temp_cache.GetCachedParentExtPubKeys()) {\n+            CExtPubKey xpub;\n+            if (m_wallet_descriptor.cache.GetCachedParentExtPubKey(parent_xpub_pair.first, xpub)) {\n+                if (xpub != parent_xpub_pair.second) {\n+                    throw std::runtime_error(std::string(__func__) + \": New cached parent xpub does not match already cached parent xpub\");\n+                }\n+                continue;\n+            }\n+            if (!batch.WriteDescriptorParentCache(id, parent_xpub_pair.first, parent_xpub_pair.second)) {\n+                throw std::runtime_error(std::string(__func__) + \": writing cache item failed\");\n+            }\n+            m_wallet_descriptor.cache.CacheParentExtPubKey(parent_xpub_pair.first, parent_xpub_pair.second);\n+        }\n+        for (const auto& derived_xpub_map_pair : temp_cache.GetCachedDerivedExtPubKeys()) {\n+            for (const auto& derived_xpub_pair : derived_xpub_map_pair.second) {\n+                CExtPubKey xpub;\n+                if (m_wallet_descriptor.cache.GetCachedDerivedExtPubKey(derived_xpub_map_pair.first, derived_xpub_pair.first, xpub)) {\n+                    if (xpub != derived_xpub_pair.second) {\n+                        throw std::runtime_error(std::string(__func__) + \": New cached derived xpub does not match already cached derived xpub\");\n+                    }\n+                    continue;\n+                }\n+                if (!batch.WriteDescriptorDerivedCache(id, derived_xpub_map_pair.first, derived_xpub_pair.first, derived_xpub_pair.second)) {\n+                    throw std::runtime_error(std::string(__func__) + \": writing cache item failed\");\n+                }\n+                m_wallet_descriptor.cache.CacheDerivedExtPubKey(derived_xpub_map_pair.first, derived_xpub_pair.first, derived_xpub_pair.second);\n+            }\n+        }\n+        m_max_cached_index++;\n+    }\n+    m_wallet_descriptor.range_end = new_range_end;\n+    batch.WriteDescriptor(GetID(), m_wallet_descriptor);\n+\n+    // By this point, the cache size should be the size of the entire range\n+    assert(m_wallet_descriptor.range_end - 1 == m_max_cached_index);\n+\n+    NotifyCanGetAddressesChanged();\n+    return true;\n+}\n+\n+void DescriptorScriptPubKeyMan::MarkUnusedAddresses(const CScript& script)\n+{\n+    LOCK(cs_desc_man);\n+    if (IsMine(script)) {\n+        int32_t index = m_map_script_pub_keys[script];\n+        if (index >= m_wallet_descriptor.next_index) {\n+            WalletLogPrintf(\"%s: Detected a used keypool item, mark all keypool items up to this item as used\\n\", __func__);\n+            m_wallet_descriptor.next_index = index + 1;\n+        }\n+        if (!TopUp()) {\n+            WalletLogPrintf(\"%s: Topping up keypool failed (locked wallet)\\n\", __func__);\n+        }\n+    }\n+}\n+\n+void DescriptorScriptPubKeyMan::AddDescriptorKey(const CKey& key, const CPubKey &pubkey)\n+{\n+    LOCK(cs_desc_man);\n+    WalletBatch batch(m_storage.GetDatabase());\n+    if (!AddDescriptorKeyWithDB(batch, key, pubkey)) {\n+        throw std::runtime_error(std::string(__func__) + \": writing descriptor private key failed\");\n+    }\n+}\n+\n+bool DescriptorScriptPubKeyMan::AddDescriptorKeyWithDB(WalletBatch& batch, const CKey& key, const CPubKey &pubkey)\n+{\n+    AssertLockHeld(cs_desc_man);\n+    assert(!m_storage.IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS));\n+\n+    if (m_storage.HasEncryptionKeys()) {\n+        if (m_storage.IsLocked()) {\n+            return false;\n+        }\n+\n+        std::vector<unsigned char> crypted_secret;\n+        CKeyingMaterial secret(key.begin(), key.end());\n+        if (!EncryptSecret(m_storage.GetEncryptionKey(), secret, pubkey.GetHash(), crypted_secret)) {\n+            return false;\n+        }\n+\n+        m_map_crypted_keys[pubkey.GetID()] = make_pair(pubkey, crypted_secret);\n+        batch.WriteCryptedDescriptorKey(GetID(), pubkey, crypted_secret);\n+        return true;\n+    } else {\n+        m_map_keys[pubkey.GetID()] = key;\n+        return batch.WriteDescriptorKey(GetID(), pubkey, key.GetPrivKey());\n+    }\n+}\n+\n+bool DescriptorScriptPubKeyMan::SetupDescriptorGeneration(const CExtKey& master_key)\n+{\n+    LOCK(cs_desc_man);\n+    assert(m_storage.IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS));\n+\n+    // Ignore when there is already a descriptor\n+    if (m_wallet_descriptor.descriptor) {\n+        return false;\n+    }\n+\n+    int64_t creation_time = GetTime();\n+\n+    std::string xpub = EncodeExtPubKey(master_key.Neuter());\n+\n+    // Build descriptor string\n+    std::string desc_prefix;\n+    std::string desc_suffix = \"/*)\";\n+    switch (m_address_type) {\n+    case OutputType::LEGACY: {\n+        desc_prefix = \"pkh(\" + xpub + \"/44'\";\n+        break;\n+    }\n+    case OutputType::P2SH_SEGWIT: {\n+        desc_prefix = \"sh(wpkh(\" + xpub + \"/49'\";\n+        desc_suffix += \")\";\n+        break;\n+    }\n+    case OutputType::BECH32: {\n+        desc_prefix = \"wpkh(\" + xpub + \"/84'\";\n+        break;\n+    }\n+    default: assert(false);\n+    }\n+\n+    // Mainnet derives at 0', testnet and regtest derive at 1'\n+    if (Params().IsTestChain()) {\n+        desc_prefix += \"/1'\";\n+    } else {\n+        desc_prefix += \"/0'\";\n+    }\n+\n+    std::string internal_path = m_internal ? \"/1\" : \"/0\";\n+    std::string desc_str = desc_prefix + \"/0'\" + internal_path + desc_suffix;\n+\n+    // Make the descriptor\n+    FlatSigningProvider keys;\n+    std::string error;\n+    std::unique_ptr<Descriptor> desc = Parse(desc_str, keys, error, false);\n+    WalletDescriptor w_desc(std::move(desc), creation_time, 0, 0, 0);\n+    m_wallet_descriptor = w_desc;\n+\n+    // Store the master private key, and descriptor\n+    WalletBatch batch(m_storage.GetDatabase());\n+    if (!AddDescriptorKeyWithDB(batch, master_key.key, master_key.key.GetPubKey())) {\n+        throw std::runtime_error(std::string(__func__) + \": writing descriptor master rivate key failed\");\n+    }\n+    if (!batch.WriteDescriptor(GetID(), m_wallet_descriptor)) {\n+        throw std::runtime_error(std::string(__func__) + \": writing descriptor failed\");\n+    }\n+\n+    // TopUp\n+    TopUp();\n+\n+    m_storage.UnsetBlankWalletFlag(batch);\n+    return true;\n+}\n+\n+bool DescriptorScriptPubKeyMan::IsHDEnabled() const\n+{\n+    LOCK(cs_desc_man);\n+    return m_wallet_descriptor.descriptor->IsRange();\n+}\n+\n+bool DescriptorScriptPubKeyMan::CanGetAddresses(bool internal) const\n+{\n+    // We can only give out addresses from descriptors that are single type (not combo), ranged,\n+    // and either has cached keys or can generate more keys (ignoring encryption)",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 383,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "a03a8cbd1f42636834263135e904900cc808d346",
      "in_reply_to_id": 399480181,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "No. `CanGetAddresses` implies that more addresses can be fetched. You can't do that for an unranged descriptor, we consider their address already fetched and used.",
      "created_at": "2020-03-27T21:18:35Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399542742",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399542742"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1858,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399560621",
      "pull_request_review_id": 383227388,
      "id": 399560621,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU2MDYyMQ==",
      "diff_hunk": "@@ -86,4 +87,38 @@ class WalletLocation final\n     bool Exists() const;\n };\n \n+/** Descriptor with some wallet metadata */\n+class WalletDescriptor\n+{\n+public:\n+    std::shared_ptr<Descriptor> descriptor;\n+    uint64_t creation_time;\n+    int32_t range_start; // First item in range; start of range, inclusive, i.e. [range_start, range_end). This never changes.\n+    int32_t range_end; // Item after the last; end of range, exclusive, i.e. [range_start, range_end). This will increment with each TopUp()\n+    int32_t next_index; // Position of the next item to generate\n+    DescriptorCache cache;\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        if (ser_action.ForRead()) {\n+            std::string desc;\n+            std::string error;\n+            READWRITE(desc);\n+            FlatSigningProvider keys;\n+            descriptor = Parse(desc, keys, error, true);\n+        } else {\n+            READWRITE(descriptor->ToString());",
      "path": "src/wallet/walletutil.h",
      "position": 47,
      "original_position": 34,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "f0a15b8aa1f2cc5c91162b747170faa452944d9b",
      "in_reply_to_id": 399436260,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Descriptors are inherently strings. There is no alternative serialization that doesn't eventually result in a descriptor string as we know now.",
      "created_at": "2020-03-27T22:09:00Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399560621",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399560621"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 115,
      "original_line": 115,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399561307",
      "pull_request_review_id": 383228241,
      "id": 399561307,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU2MTMwNw==",
      "diff_hunk": "@@ -179,6 +182,15 @@ bool WalletBatch::WriteMinVersion(int nVersion)\n     return WriteIC(DBKeys::MINVERSION, nVersion);\n }\n \n+bool WalletBatch::WriteActiveScriptPubKeyMan(uint8_t type, const uint256& id, bool internal)",
      "path": "src/wallet/walletdb.cpp",
      "position": 24,
      "original_position": 23,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "6fa9c482c51576c97b7e02a767d0b328dbbb52fc",
      "in_reply_to_id": 395865796,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "These records are generic spkman records, not descriptor wallet specific records. It does not make sense to make these part of `WALLETDESCRIPTOR` when not all spkmans are descriptors.",
      "created_at": "2020-03-27T22:11:13Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399561307",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399561307"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 188,
      "original_line": 188,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399563823",
      "pull_request_review_id": 383231242,
      "id": 399563823,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU2MzgyMw==",
      "diff_hunk": "@@ -1554,7 +1554,8 @@ void DescriptorScriptPubKeyMan::MarkUnusedAddresses(const CScript& script)\n \n bool DescriptorScriptPubKeyMan::IsHDEnabled() const\n {\n-    return false;\n+    LOCK(cs_desc_man);\n+    return m_wallet_descriptor.descriptor->IsRange();",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 381,
      "original_position": 6,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "fbd356690fab88c7fc10b300b71ef13d5ab14032",
      "in_reply_to_id": 399462420,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Why?",
      "created_at": "2020-03-27T22:19:30Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399563823",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399563823"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1851,
      "original_line": 1851,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399566855",
      "pull_request_review_id": 383234715,
      "id": 399566855,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU2Njg1NQ==",
      "diff_hunk": "@@ -434,7 +436,38 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             ssKey >> id;\n             WalletDescriptor desc;\n             ssValue >> desc;\n+            if (wss.m_descriptor_caches.count(id) == 0) {\n+                wss.m_descriptor_caches[id] = DescriptorCache();\n+            }\n             pwallet->LoadDescriptorScriptPubKeyMan(id, desc);\n+        } else if (strType == DBKeys::WALLETDESCRIPTORCACHE) {\n+            bool parent = true;\n+            uint256 desc_id;\n+            uint32_t key_exp_index;\n+            uint32_t der_index;\n+            ssKey >> desc_id;\n+            ssKey >> key_exp_index;\n+\n+            // if the der_index exists, it's a derived xpub\n+            try",
      "path": "src/wallet/walletdb.cpp",
      "position": 119,
      "original_position": 33,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "0abf7b960c82e9d5b6973ea3c2baee7d696c5145",
      "in_reply_to_id": 399472037,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I wanted to leave this open to different caching structures in the future and not have a ton of cache structure specific records like that.",
      "created_at": "2020-03-27T22:29:49Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399566855",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399566855"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 494,
      "original_line": 494,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399567485",
      "pull_request_review_id": 383235456,
      "id": 399567485,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU2NzQ4NQ==",
      "diff_hunk": "@@ -536,6 +569,13 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\n         pwallet->SetActiveScriptPubKeyMan(spk_man_pair.second, spk_man_pair.first, /* internal */ true, /* memonly */ true);\n     }\n \n+    // Set the descriptor caches\n+    for (auto desc_cache_pair : wss.m_descriptor_caches) {\n+        auto spk_man = pwallet->GetScriptPubKeyMan(desc_cache_pair.first);\n+        assert(spk_man);\n+        ((DescriptorScriptPubKeyMan*)spk_man)->SetCache(desc_cache_pair.second);",
      "path": "src/wallet/walletdb.cpp",
      "position": 209,
      "original_position": 63,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "0abf7b960c82e9d5b6973ea3c2baee7d696c5145",
      "in_reply_to_id": 399473488,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "That's inherently done by not being able to expand from cache during `SetCache`.",
      "created_at": "2020-03-27T22:32:03Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399567485",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399567485"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 670,
      "original_line": 670,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399568614",
      "pull_request_review_id": 383236754,
      "id": 399568614,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU2ODYxNA==",
      "diff_hunk": "@@ -1878,9 +1878,34 @@ int64_t DescriptorScriptPubKeyMan::GetTimeFirstKey() const\n     return m_wallet_descriptor.creation_time;\n }\n \n+std::unique_ptr<FlatSigningProvider> DescriptorScriptPubKeyMan::GetSigningProvider(const CScript& script, bool include_private) const",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 427,
      "original_position": 4,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "50c3b4eee31e095a5080fcb4109cb5d8f7bfbbe7",
      "in_reply_to_id": 399490475,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "And? We modify `GetSolvingProvider` below. This is an internal function.",
      "created_at": "2020-03-27T22:36:06Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399568614",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399568614"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1897,
      "original_line": 1897,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399570970",
      "pull_request_review_id": 383239397,
      "id": 399570970,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU3MDk3MA==",
      "diff_hunk": "@@ -60,3 +60,8 @@ bool CreateWalletDialog::isMakeBlankWalletChecked() const\n {\n     return ui->blank_wallet_checkbox->isChecked();\n }\n+\n+bool CreateWalletDialog::isDescriptorWalletChecked() const",
      "path": "src/qt/createwalletdialog.cpp",
      "position": 5,
      "original_position": 5,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "f5204ed3fe1b2a059e35e54248d38eac88c629e0",
      "in_reply_to_id": 399493975,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Meh, it's not really a big difference.",
      "created_at": "2020-03-27T22:44:44Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399570970",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399570970"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 64,
      "original_line": 64,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399571664",
      "pull_request_review_id": 383240174,
      "id": 399571664,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU3MTY2NA==",
      "diff_hunk": "@@ -0,0 +1,293 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the importdescriptors RPC.\n+\n+Test importdescriptors by generating keys on node0, importing the corresponding\n+descriptors on node1 and then testing the address info for the different address\n+variants.\n+\n+- `get_key()` is called to generate keys on node0 and return the privkeys,\n+  pubkeys and all variants of scriptPubKey and address.\n+- `test_importdesc()` is called to send an importdescriptors call to node1, test\n+  success, and (if unsuccessful) test the error code and error message returned.\n+- `test_address()` is called to call getaddressinfo for an address on node1",
      "path": "test/functional/wallet_importdescriptors.py",
      "position": 15,
      "original_position": 15,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "7d1c6bbeb057c18da62201267efc2b675f142da3",
      "in_reply_to_id": 399499505,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Disagree, on both counts.",
      "created_at": "2020-03-27T22:47:31Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399571664",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399571664"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 15,
      "original_line": 15,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399577798",
      "pull_request_review_id": 383246760,
      "id": 399577798,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU3Nzc5OA==",
      "diff_hunk": "@@ -86,4 +87,38 @@ class WalletLocation final\n     bool Exists() const;\n };\n \n+/** Descriptor with some wallet metadata */\n+class WalletDescriptor\n+{\n+public:\n+    std::shared_ptr<Descriptor> descriptor;\n+    uint64_t creation_time;\n+    int32_t range_start; // First item in range; start of range, inclusive, i.e. [range_start, range_end). This never changes.\n+    int32_t range_end; // Item after the last; end of range, exclusive, i.e. [range_start, range_end). This will increment with each TopUp()\n+    int32_t next_index; // Position of the next item to generate\n+    DescriptorCache cache;\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        if (ser_action.ForRead()) {\n+            std::string desc;\n+            std::string error;\n+            READWRITE(desc);\n+            FlatSigningProvider keys;\n+            descriptor = Parse(desc, keys, error, true);",
      "path": "src/wallet/walletutil.h",
      "position": 42,
      "original_position": 32,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "f0a15b8aa1f2cc5c91162b747170faa452944d9b",
      "in_reply_to_id": 399434828,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Changed this to check the result and throw an exception. Added a unit test for that.",
      "created_at": "2020-03-27T23:11:43Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399577798",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399577798"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 110,
      "original_line": 110,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399577860",
      "pull_request_review_id": 383246827,
      "id": 399577860,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU3Nzg2MA==",
      "diff_hunk": "@@ -1214,6 +1214,12 @@ class CWallet final : public WalletStorage, private interfaces::Chain::Notificat\n \n     //! Connect the signals from ScriptPubKeyMans to the signals in CWallet\n     void ConnectScriptPubKeyManNotifiers();\n+\n+    //! Instantiate a descriptor ScriptPubKeyMan from the WalletDescriptor and load it\n+    void LoadDescriptorScriptPubKeyMan(uint256 id, WalletDescriptor& desc);\n+\n+    //! Sets the active ScriptPubKeyMan for the specified type and internal",
      "path": "src/wallet/wallet.h",
      "position": 36,
      "original_position": 8,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "ed75ce9649ce7a26146b45bb85584f5522945a3d",
      "in_reply_to_id": 399449698,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added more comments.",
      "created_at": "2020-03-27T23:12:00Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399577860",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399577860"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1244,
      "original_line": 1244,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399577884",
      "pull_request_review_id": 383246863,
      "id": 399577884,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU3Nzg4NA==",
      "diff_hunk": "@@ -1539,6 +1539,17 @@ bool DescriptorScriptPubKeyMan::TopUp(unsigned int size)\n \n void DescriptorScriptPubKeyMan::MarkUnusedAddresses(const CScript& script)\n {\n+    LOCK(cs_desc_man);\n+    if (IsMine(script)) {\n+        int32_t index = m_map_script_pub_keys[script];\n+        if (index >= m_wallet_descriptor.next_index) {\n+            WalletLogPrintf(\"%s: Detected a used keypool item, mark all keypool items up to this item as used\\n\", __func__);",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 8,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "68cef400b94fbe2ad592ccdf54fb6dcf9e78389e",
      "in_reply_to_id": 399459055,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-03-27T23:12:08Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399577884",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399577884"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1546,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399577989",
      "pull_request_review_id": 383246990,
      "id": 399577989,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU3Nzk4OQ==",
      "diff_hunk": "@@ -1554,7 +1554,8 @@ void DescriptorScriptPubKeyMan::MarkUnusedAddresses(const CScript& script)\n \n bool DescriptorScriptPubKeyMan::IsHDEnabled() const\n {\n-    return false;\n+    LOCK(cs_desc_man);\n+    return m_wallet_descriptor.descriptor->IsRange();",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 381,
      "original_position": 6,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "fbd356690fab88c7fc10b300b71ef13d5ab14032",
      "in_reply_to_id": 399462420,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`|=` would be incorrect. I've instead changed `IsHDEnabled` to iterate over `GetActiveScriptPubKeyMans()`.",
      "created_at": "2020-03-27T23:12:39Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399577989",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399577989"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1851,
      "original_line": 1851,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399578030",
      "pull_request_review_id": 383247028,
      "id": 399578030,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU3ODAzMA==",
      "diff_hunk": "@@ -1627,4 +1627,8 @@ uint256 DescriptorScriptPubKeyMan::GetID() const\n     return id;\n }\n \n-void DescriptorScriptPubKeyMan::SetType(OutputType type, bool internal) {}\n+void DescriptorScriptPubKeyMan::SetType(OutputType type, bool internal)",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 610,
      "original_position": 5,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "0708467ad1243fdca15f7498fb94a2eadcf3f4d8",
      "in_reply_to_id": 399464603,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-03-27T23:12:48Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399578030",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399578030"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2080,
      "original_line": 2080,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399578305",
      "pull_request_review_id": 383247305,
      "id": 399578305,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU3ODMwNQ==",
      "diff_hunk": "@@ -1632,3 +1632,18 @@ void DescriptorScriptPubKeyMan::SetType(OutputType type, bool internal)\n     this->m_address_type = type;\n     this->m_internal = internal;\n }\n+\n+void DescriptorScriptPubKeyMan::SetCache(const DescriptorCache& cache)\n+{\n+    LOCK(cs_desc_man);\n+    m_wallet_descriptor.cache = cache;\n+    for (int32_t i = m_wallet_descriptor.range_start; i < m_wallet_descriptor.range_end; ++i) {\n+        FlatSigningProvider out_keys;\n+        std::vector<CScript> scripts_temp;\n+        m_wallet_descriptor.descriptor->ExpandFromCache(i, m_wallet_descriptor.cache, scripts_temp, out_keys);",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 12,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "0abf7b960c82e9d5b6973ea3c2baee7d696c5145",
      "in_reply_to_id": 399466760,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-03-27T23:13:53Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399578305",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399578305"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1643,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399578383",
      "pull_request_review_id": 383247372,
      "id": 399578383,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU3ODM4Mw==",
      "diff_hunk": "@@ -1632,3 +1632,18 @@ void DescriptorScriptPubKeyMan::SetType(OutputType type, bool internal)\n     this->m_address_type = type;\n     this->m_internal = internal;\n }\n+\n+void DescriptorScriptPubKeyMan::SetCache(const DescriptorCache& cache)\n+{\n+    LOCK(cs_desc_man);\n+    m_wallet_descriptor.cache = cache;\n+    for (int32_t i = m_wallet_descriptor.range_start; i < m_wallet_descriptor.range_end; ++i) {\n+        FlatSigningProvider out_keys;\n+        std::vector<CScript> scripts_temp;\n+        m_wallet_descriptor.descriptor->ExpandFromCache(i, m_wallet_descriptor.cache, scripts_temp, out_keys);\n+        // Add all of the scriptPubKeys to the scriptPubKey set\n+        for (const CScript& script : scripts_temp) {\n+            m_map_script_pub_keys[script] = i;",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 631,
      "original_position": 15,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "0abf7b960c82e9d5b6973ea3c2baee7d696c5145",
      "in_reply_to_id": 399468023,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-03-27T23:14:10Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399578383",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399578383"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2101,
      "original_line": 2101,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399578411",
      "pull_request_review_id": 383247414,
      "id": 399578411,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU3ODQxMQ==",
      "diff_hunk": "@@ -1552,12 +1552,61 @@ isminetype DescriptorScriptPubKeyMan::IsMine(const CScript& script) const\n \n bool DescriptorScriptPubKeyMan::CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys)\n {\n-    return false;\n+    {\n+        LOCK(cs_desc_man);\n+        if (!m_map_keys.empty())\n+            return false;\n+\n+        bool keyPass = m_map_crypted_keys.empty(); // Always pass when there are no encrypted keys\n+        bool keyFail = false;\n+        CryptedKeyMap::const_iterator mi = m_map_crypted_keys.begin();\n+        for (; mi != m_map_crypted_keys.end(); ++mi)",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 13,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "8ae9bf12395b558bf53cc0b8d2f4056424908585",
      "in_reply_to_id": 399487630,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-03-27T23:14:18Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399578411",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399578411"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1558,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399578641",
      "pull_request_review_id": 383247706,
      "id": 399578641,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU3ODY0MQ==",
      "diff_hunk": "@@ -1616,6 +1616,13 @@ bool DescriptorScriptPubKeyMan::GetReservedDestination(const OutputType type, bo\n \n void DescriptorScriptPubKeyMan::ReturnDestination(int64_t index, bool internal, const CTxDestination& addr)\n {\n+    LOCK(cs_desc_man);\n+    // Only return when the index was the most recent",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 151,
      "original_position": 5,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "ee03d46178a3e8d511c33f734892820b36ed7a1a",
      "in_reply_to_id": 399489479,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Swapped the commits.\r\n\r\nA general test for `GetReserveDestination` and `ReturnDestination` in the wallet feels out of scope for this PR. IMO should be a separate PR.",
      "created_at": "2020-03-27T23:15:27Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399578641",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399578641"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1621,
      "original_line": 1621,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399578688",
      "pull_request_review_id": 383247748,
      "id": 399578688,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU3ODY4OA==",
      "diff_hunk": "@@ -1878,9 +1878,34 @@ int64_t DescriptorScriptPubKeyMan::GetTimeFirstKey() const\n     return m_wallet_descriptor.creation_time;\n }\n \n+std::unique_ptr<FlatSigningProvider> DescriptorScriptPubKeyMan::GetSigningProvider(const CScript& script, bool include_private) const\n+{\n+    LOCK(cs_desc_man);\n+\n+    // Find the index of the script\n+    auto it = m_map_script_pub_keys.find(script);\n+    if (it == m_map_script_pub_keys.end()) {\n+        return nullptr;\n+    }\n+    int32_t index = it->second;\n+\n+    // Get the scripts, keys, and key origins for this script\n+    std::unique_ptr<FlatSigningProvider> out_keys = MakeUnique<FlatSigningProvider>();\n+    std::vector<CScript> scripts_temp;\n+    if (!m_wallet_descriptor.descriptor->ExpandFromCache(index, m_wallet_descriptor.cache, scripts_temp, *out_keys)) return nullptr;\n+\n+    if (include_private) {\n+        FlatSigningProvider master_provider;\n+        master_provider.keys = GetKeys();\n+        m_wallet_descriptor.descriptor->ExpandPrivate(index, master_provider, *out_keys);",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 467,
      "original_position": 23,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "50c3b4eee31e095a5080fcb4109cb5d8f7bfbbe7",
      "in_reply_to_id": 399492040,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-03-27T23:15:36Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399578688",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399578688"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1937,
      "original_line": 1937,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399578721",
      "pull_request_review_id": 383247790,
      "id": 399578721,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU3ODcyMQ==",
      "diff_hunk": "@@ -252,13 +252,13 @@ class WalletBatch\n     bool WriteDescriptorDerivedCache(const uint256& desc_id, uint32_t key_exp_index, uint32_t der_index, const CExtPubKey& xpub);\n     bool WriteDescriptorParentCache(const uint256& desc_id, uint32_t key_exp_index, const CExtPubKey& xpub);\n \n+    bool WriteActiveScriptPubKeyMan(uint8_t type, const uint256& id, bool internal);",
      "path": "src/wallet/walletdb.h",
      "position": null,
      "original_position": 4,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "f5204ed3fe1b2a059e35e54248d38eac88c629e0",
      "in_reply_to_id": 399494992,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Removed it.",
      "created_at": "2020-03-27T23:15:46Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399578721",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399578721"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 255,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399578748",
      "pull_request_review_id": 383247814,
      "id": 399578748,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU3ODc0OA==",
      "diff_hunk": "@@ -585,8 +585,11 @@ bool CWallet::EncryptWallet(const SecureString& strWalletPassphrase)\n         Lock();\n         Unlock(strWalletPassphrase);\n \n-        // if we are using HD, replace the HD seed with a new one\n-        if (auto spk_man = GetLegacyScriptPubKeyMan()) {\n+        // If we are using descriptors, make new descriptors",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 6,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "2de265c2b60c4348899aa09783a4cd3be958fb81",
      "in_reply_to_id": 399496245,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-03-27T23:15:53Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399578748",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399578748"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 588,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399645681",
      "pull_request_review_id": 383300970,
      "id": 399645681,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY0NTY4MQ==",
      "diff_hunk": "@@ -86,4 +87,38 @@ class WalletLocation final\n     bool Exists() const;\n };\n \n+/** Descriptor with some wallet metadata */\n+class WalletDescriptor\n+{\n+public:\n+    std::shared_ptr<Descriptor> descriptor;\n+    uint64_t creation_time;\n+    int32_t range_start; // First item in range; start of range, inclusive, i.e. [range_start, range_end). This never changes.\n+    int32_t range_end; // Item after the last; end of range, exclusive, i.e. [range_start, range_end). This will increment with each TopUp()\n+    int32_t next_index; // Position of the next item to generate\n+    DescriptorCache cache;\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        if (ser_action.ForRead()) {\n+            std::string desc;\n+            std::string error;\n+            READWRITE(desc);\n+            FlatSigningProvider keys;\n+            descriptor = Parse(desc, keys, error, true);\n+        } else {\n+            READWRITE(descriptor->ToString());",
      "path": "src/wallet/walletutil.h",
      "position": 47,
      "original_position": 34,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "f0a15b8aa1f2cc5c91162b747170faa452944d9b",
      "in_reply_to_id": 399436260,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It doesn't have to be that way. We describe \"wrapped segwit script\" with \"sh(wsh(script))\", but it might just as well have been \"p2sh[wsh[script]]\". There's already talk of tweaking descriptors to make them more compatible with miniscript. We use base58 encoded xpubs, but we might as well switch to something bech32 encoded in the future. It makes sense to have a more computer-friendly representation, that's mapped 1 to 1 with these strings. See also #18043.\r\n\r\nIt's just that I'd rather not delay this PR for that.",
      "created_at": "2020-03-28T10:19:54Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399645681",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399645681"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 115,
      "original_line": 115,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399645781",
      "pull_request_review_id": 383301059,
      "id": 399645781,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY0NTc4MQ==",
      "diff_hunk": "@@ -1554,7 +1554,8 @@ void DescriptorScriptPubKeyMan::MarkUnusedAddresses(const CScript& script)\n \n bool DescriptorScriptPubKeyMan::IsHDEnabled() const\n {\n-    return false;\n+    LOCK(cs_desc_man);\n+    return m_wallet_descriptor.descriptor->IsRange();",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 381,
      "original_position": 6,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "fbd356690fab88c7fc10b300b71ef13d5ab14032",
      "in_reply_to_id": 399462420,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "If unranged descriptors can't be active, then that's fine.",
      "created_at": "2020-03-28T10:21:25Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399645781",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399645781"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1851,
      "original_line": 1851,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399645877",
      "pull_request_review_id": 383301135,
      "id": 399645877,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY0NTg3Nw==",
      "diff_hunk": "@@ -434,7 +436,38 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             ssKey >> id;\n             WalletDescriptor desc;\n             ssValue >> desc;\n+            if (wss.m_descriptor_caches.count(id) == 0) {\n+                wss.m_descriptor_caches[id] = DescriptorCache();\n+            }\n             pwallet->LoadDescriptorScriptPubKeyMan(id, desc);\n+        } else if (strType == DBKeys::WALLETDESCRIPTORCACHE) {\n+            bool parent = true;\n+            uint256 desc_id;\n+            uint32_t key_exp_index;\n+            uint32_t der_index;\n+            ssKey >> desc_id;\n+            ssKey >> key_exp_index;\n+\n+            // if the der_index exists, it's a derived xpub\n+            try",
      "path": "src/wallet/walletdb.cpp",
      "position": 119,
      "original_position": 33,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "0abf7b960c82e9d5b6973ea3c2baee7d696c5145",
      "in_reply_to_id": 399472037,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I was thinking the other way around: have different record for different things, so it's easy to add new things and wipe / ignore stuff we don't need anymore.",
      "created_at": "2020-03-28T10:22:46Z",
      "updated_at": "2020-04-23T18:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399645877",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399645877"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 494,
      "original_line": 494,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399646044",
      "pull_request_review_id": 383301239,
      "id": 399646044,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY0NjA0NA==",
      "diff_hunk": "@@ -1616,6 +1616,13 @@ bool DescriptorScriptPubKeyMan::GetReservedDestination(const OutputType type, bo\n \n void DescriptorScriptPubKeyMan::ReturnDestination(int64_t index, bool internal, const CTxDestination& addr)\n {\n+    LOCK(cs_desc_man);\n+    // Only return when the index was the most recent",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 151,
      "original_position": 5,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "ee03d46178a3e8d511c33f734892820b36ed7a1a",
      "in_reply_to_id": 399489479,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Doesn't `walletcreatefundedpsbt` call those two methods? So the test just has to check the keypool doesn't shrink.",
      "created_at": "2020-03-28T10:24:35Z",
      "updated_at": "2020-04-23T18:00:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399646044",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399646044"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1621,
      "original_line": 1621,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399646259",
      "pull_request_review_id": 383301405,
      "id": 399646259,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY0NjI1OQ==",
      "diff_hunk": "@@ -60,3 +60,8 @@ bool CreateWalletDialog::isMakeBlankWalletChecked() const\n {\n     return ui->blank_wallet_checkbox->isChecked();\n }\n+\n+bool CreateWalletDialog::isDescriptorWalletChecked() const",
      "path": "src/qt/createwalletdialog.cpp",
      "position": 5,
      "original_position": 5,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "f5204ed3fe1b2a059e35e54248d38eac88c629e0",
      "in_reply_to_id": 399493975,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yeah, just keep in in mind if something else needs to be changed there, or if - god forbid - we get bike shedding over the new check box.",
      "created_at": "2020-03-28T10:27:49Z",
      "updated_at": "2020-04-23T18:00:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399646259",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399646259"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 64,
      "original_line": 64,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399646470",
      "pull_request_review_id": 383301547,
      "id": 399646470,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY0NjQ3MA==",
      "diff_hunk": "@@ -0,0 +1,293 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the importdescriptors RPC.\n+\n+Test importdescriptors by generating keys on node0, importing the corresponding\n+descriptors on node1 and then testing the address info for the different address\n+variants.\n+\n+- `get_key()` is called to generate keys on node0 and return the privkeys,\n+  pubkeys and all variants of scriptPubKey and address.\n+- `test_importdesc()` is called to send an importdescriptors call to node1, test\n+  success, and (if unsuccessful) test the error code and error message returned.\n+- `test_address()` is called to call getaddressinfo for an address on node1",
      "path": "test/functional/wallet_importdescriptors.py",
      "position": 15,
      "original_position": 15,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "7d1c6bbeb057c18da62201267efc2b675f142da3",
      "in_reply_to_id": 399499505,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "See [above](https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399542742). It makes sense to disallow `getnewaddress` on unranged descriptors. And they can't be active (I assume that restriction is tested in the `importdescriptor` tests). So in that case there's nothing to test here.",
      "created_at": "2020-03-28T10:29:50Z",
      "updated_at": "2020-04-23T18:00:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399646470",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399646470"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 15,
      "original_line": 15,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399686037",
      "pull_request_review_id": 383331152,
      "id": 399686037,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY4NjAzNw==",
      "diff_hunk": "@@ -0,0 +1,293 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the importdescriptors RPC.\n+",
      "path": "test/functional/wallet_importdescriptors.py",
      "position": 6,
      "original_position": 6,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "a03a8cbd1f42636834263135e904900cc808d346",
      "in_reply_to_id": 399363853,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Make a test to ensure that `active` is actually default true(or not)",
      "created_at": "2020-03-28T17:13:54Z",
      "updated_at": "2020-04-23T18:00:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399686037",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399686037"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 6,
      "original_line": 6,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399686130",
      "pull_request_review_id": 383331224,
      "id": 399686130,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY4NjEzMA==",
      "diff_hunk": "@@ -0,0 +1,293 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the importdescriptors RPC.\n+\n+Test importdescriptors by generating keys on node0, importing the corresponding\n+descriptors on node1 and then testing the address info for the different address\n+variants.\n+\n+- `get_key()` is called to generate keys on node0 and return the privkeys,\n+  pubkeys and all variants of scriptPubKey and address.\n+- `test_importdesc()` is called to send an importdescriptors call to node1, test\n+  success, and (if unsuccessful) test the error code and error message returned.\n+- `test_address()` is called to call getaddressinfo for an address on node1\n+  and test the values returned.\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.descriptors import descsum_create\n+from test_framework.util import (\n+    assert_equal,\n+)\n+from test_framework.wallet_util import (\n+    get_key,\n+    test_address,\n+)\n+\n+class ImportDescriptorsTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.extra_args = [[\"-addresstype=legacy\"],\n+                           [\"-addresstype=bech32\", \"-keypool=5\"]\n+                          ]\n+        self.setup_clean_chain = True\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def test_importdesc(self, req, success, error_code=None, error_message=None, warnings=None, wallet=None):\n+        \"\"\"Run importdescriptors and assert success\"\"\"\n+        if warnings is None:\n+            warnings = []\n+        wrpc = self.nodes[1].get_wallet_rpc('w1')\n+        if wallet is not None:\n+            wrpc = wallet\n+\n+        result = wrpc.importdescriptors([req])\n+        observed_warnings = []\n+        if 'warnings' in result[0]:\n+           observed_warnings = result[0]['warnings']\n+        assert_equal(\"\\n\".join(sorted(warnings)), \"\\n\".join(sorted(observed_warnings)))\n+        assert_equal(result[0]['success'], success)\n+        if error_code is not None:\n+            assert_equal(result[0]['error']['code'], error_code)\n+            assert_equal(result[0]['error']['message'], error_message)\n+\n+    def run_test(self):\n+        self.log.info('Setting up wallets')\n+        self.nodes[0].createwallet(wallet_name='w0', disable_private_keys=False)\n+        w0 = self.nodes[0].get_wallet_rpc('w0')\n+\n+        self.nodes[1].createwallet(wallet_name='w1', disable_private_keys=True, blank=True, descriptors=True)\n+        w1 = self.nodes[1].get_wallet_rpc('w1')\n+        assert_equal(w1.getwalletinfo()['keypoolsize'], 0)\n+\n+        self.nodes[1].createwallet(wallet_name=\"wpriv\", disable_private_keys=False, blank=True, descriptors=True)\n+        wpriv = self.nodes[1].get_wallet_rpc(\"wpriv\")\n+        assert_equal(wpriv.getwalletinfo()['keypoolsize'], 0)\n+\n+        self.log.info('Mining coins')\n+        w0.generatetoaddress(101, w0.getnewaddress())\n+\n+        # RPC importdescriptors -----------------------------------------------\n+\n+        # # Test import fails if no descriptor present\n+        key = get_key(w0)\n+        self.log.info(\"Import should fail if a descriptor is not provided\")\n+        self.test_importdesc({\"timestamp\": \"now\"},\n+                             success=False,\n+                             error_code=-8,\n+                             error_message='Descriptor not found.')\n+\n+        # # Test importing of a P2PKH descriptor\n+        key = get_key(w0)\n+        self.log.info(\"Should import a p2pkh descriptor\")\n+        self.test_importdesc({\"desc\": descsum_create(\"pkh(\" + key.pubkey + \")\"),\n+                              \"timestamp\": \"now\",\n+                              \"label\": \"Descriptor import test\"},\n+                             success=True)\n+        test_address(w1,\n+                     key.p2pkh_addr,\n+                     solvable=True,\n+                     ismine=True,\n+                     labels=[\"Descriptor import test\"])\n+\n+        # # Test importing of a P2SH-P2WPKH descriptor\n+        key = get_key(w0)\n+        self.log.info(\"Should not import a p2sh-p2wpkh descriptor without checksum\")\n+        self.test_importdesc({\"desc\": \"sh(wpkh(\" + key.pubkey + \"))\",\n+                              \"timestamp\": \"now\"\n+                              },\n+                             success=False,\n+                             error_code=-5,\n+                             error_message=\"Missing checksum\")\n+\n+        self.log.info(\"Should not import a p2sh-p2wpkh descriptor that has range specified\")\n+        self.test_importdesc({\"desc\": descsum_create(\"sh(wpkh(\" + key.pubkey + \"))\"),\n+                               \"timestamp\": \"now\",\n+                               \"range\": 1,\n+                              },\n+                              success=False,\n+                              error_code=-8,\n+                              error_message=\"Range should not be specified for an un-ranged descriptor\")\n+\n+        self.log.info(\"Should not import a p2sh-p2wpkh descriptor and have it set to active\")\n+        self.test_importdesc({\"desc\": descsum_create(\"sh(wpkh(\" + key.pubkey + \"))\"),\n+                               \"timestamp\": \"now\",\n+                               \"active\": True,\n+                              },\n+                              success=False,\n+                              error_code=-8,\n+                              error_message=\"Active descriptor must be ranged\")\n+\n+        self.log.info(\"Should import a (non-active) p2sh-p2wpkh descriptor\")\n+        self.test_importdesc({\"desc\": descsum_create(\"sh(wpkh(\" + key.pubkey + \"))\"),\n+                               \"timestamp\": \"now\",\n+                               \"active\": False,\n+                              },\n+                              success=True)\n+\n+        test_address(w1,\n+                     key.p2sh_p2wpkh_addr,\n+                     ismine=True,\n+                     solvable=True)\n+\n+        # # Test importing of a multisig descriptor",
      "path": "test/functional/wallet_importdescriptors.py",
      "position": 149,
      "original_position": 136,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "7d1c6bbeb057c18da62201267efc2b675f142da3",
      "in_reply_to_id": 399336346,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In other words, make sure that importing legacy doesn't accidentally replace p2sh somehow, and p2sh doesn't accidentally also replace bech32, and so on. Just thinking about what could have gone wrong under the hood.",
      "created_at": "2020-03-28T17:14:48Z",
      "updated_at": "2020-04-23T18:00:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399686130",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399686130"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 149,
      "original_line": 149,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399686381",
      "pull_request_review_id": 383331436,
      "id": 399686381,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY4NjM4MQ==",
      "diff_hunk": "@@ -86,4 +87,38 @@ class WalletLocation final\n     bool Exists() const;\n };\n \n+/** Descriptor with some wallet metadata */\n+class WalletDescriptor\n+{\n+public:\n+    std::shared_ptr<Descriptor> descriptor;\n+    uint64_t creation_time;\n+    int32_t range_start; // First item in range; start of range, inclusive, i.e. [range_start, range_end). This never changes.\n+    int32_t range_end; // Item after the last; end of range, exclusive, i.e. [range_start, range_end). This will increment with each TopUp()\n+    int32_t next_index; // Position of the next item to generate\n+    DescriptorCache cache;\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        if (ser_action.ForRead()) {\n+            std::string desc;\n+            std::string error;\n+            READWRITE(desc);\n+            FlatSigningProvider keys;\n+            descriptor = Parse(desc, keys, error, true);\n+        } else {\n+            READWRITE(descriptor->ToString());",
      "path": "src/wallet/walletutil.h",
      "position": 47,
      "original_position": 34,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "f0a15b8aa1f2cc5c91162b747170faa452944d9b",
      "in_reply_to_id": 399436260,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "We're not going to get this right on the first shot likely no matter what we decide. As long as it's not a supreme burden to upgrade I think current is fine.",
      "created_at": "2020-03-28T17:17:33Z",
      "updated_at": "2020-04-23T18:00:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399686381",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399686381"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 115,
      "original_line": 115,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399686525",
      "pull_request_review_id": 383331552,
      "id": 399686525,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY4NjUyNQ==",
      "diff_hunk": "@@ -1554,7 +1554,8 @@ void DescriptorScriptPubKeyMan::MarkUnusedAddresses(const CScript& script)\n \n bool DescriptorScriptPubKeyMan::IsHDEnabled() const\n {\n-    return false;\n+    LOCK(cs_desc_man);\n+    return m_wallet_descriptor.descriptor->IsRange();",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 381,
      "original_position": 6,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "fbd356690fab88c7fc10b300b71ef13d5ab14032",
      "in_reply_to_id": 399462420,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "unranged active descriptors would result in a single new address grab per import, kind of pointless",
      "created_at": "2020-03-28T17:18:41Z",
      "updated_at": "2020-04-23T18:00:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399686525",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399686525"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1851,
      "original_line": 1851,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399687251",
      "pull_request_review_id": 383332087,
      "id": 399687251,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY4NzI1MQ==",
      "diff_hunk": "@@ -1496,3 +1492,621 @@ std::set<CKeyID> LegacyScriptPubKeyMan::GetKeys() const\n     }\n     return set_address;\n }\n+\n+void LegacyScriptPubKeyMan::SetType(OutputType type, bool internal) {}\n+\n+bool DescriptorScriptPubKeyMan::GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error)\n+{\n+    // Returns true if this descriptor supports getting new addresses. Conditions where we may be unable to fetch them (e.g. locked) are caught later\n+    if (!CanGetAddresses(m_internal)) {\n+        error = \"No addresses available\";\n+        return false;\n+    }\n+    {\n+        LOCK(cs_desc_man);\n+        assert(m_wallet_descriptor.descriptor->IsSingleType()); // This is a combo descriptor which should not be an active descriptor\n+        if (type != m_address_type) {\n+            throw std::runtime_error(std::string(__func__) + \": Types are inconsistent\");\n+        }\n+\n+        TopUp();\n+\n+        // Get the scriptPubKey from the descriptor\n+        FlatSigningProvider out_keys;\n+        std::vector<CScript> scripts_temp;\n+        if (m_wallet_descriptor.range_end <= m_max_cached_index && !TopUp(1)) {\n+            // We can't generate anymore keys\n+            error = \"Error: Keypool ran out, please call keypoolrefill first\";\n+            return false;\n+        }\n+        if (!m_wallet_descriptor.descriptor->ExpandFromCache(m_wallet_descriptor.next_index, m_wallet_descriptor.cache, scripts_temp, out_keys)) {\n+            // We can't generate anymore keys\n+            error = \"Error: Keypool ran out, please call keypoolrefill first\";\n+            return false;\n+        }\n+\n+        Optional<OutputType> out_script_type = m_wallet_descriptor.descriptor->GetOutputType();\n+        if (out_script_type && out_script_type == type) {\n+            ExtractDestination(scripts_temp[0], dest);\n+        } else {\n+            throw std::runtime_error(std::string(__func__) + \": Types are inconsistent. Stored type does not match type of newly generated address\");\n+        }\n+        m_wallet_descriptor.next_index++;\n+        WalletBatch(m_storage.GetDatabase()).WriteDescriptor(GetID(), m_wallet_descriptor);\n+        return true;\n+    }\n+}\n+\n+isminetype DescriptorScriptPubKeyMan::IsMine(const CScript& script) const\n+{\n+    LOCK(cs_desc_man);\n+    if (m_map_script_pub_keys.count(script) > 0) {\n+        return ISMINE_SPENDABLE;\n+    }\n+    return ISMINE_NO;\n+}\n+\n+bool DescriptorScriptPubKeyMan::CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys)\n+{\n+    {\n+        LOCK(cs_desc_man);\n+        if (!m_map_keys.empty())\n+            return false;\n+\n+        bool keyPass = m_map_crypted_keys.empty(); // Always pass when there are no encrypted keys\n+        bool keyFail = false;\n+        CryptedKeyMap::const_iterator mi = m_map_crypted_keys.begin();\n+        for (; mi != m_map_crypted_keys.end(); ++mi)\n+        {\n+            const CPubKey &pubkey = (*mi).second.first;\n+            const std::vector<unsigned char> &crypted_secret = (*mi).second.second;\n+            CKey key;\n+            if (!DecryptKey(master_key, crypted_secret, pubkey, key))\n+            {\n+                keyFail = true;\n+                break;\n+            }\n+            keyPass = true;\n+            if (m_decryption_thoroughly_checked)\n+                break;\n+        }\n+        if (keyPass && keyFail)\n+        {\n+            LogPrintf(\"The wallet is probably corrupted: Some keys decrypt but not all.\\n\");\n+            throw std::runtime_error(\"Error unlocking wallet: some keys decrypt but not all. Your wallet file may be corrupt.\");\n+        }\n+        if (keyFail || (!keyPass && !accept_no_keys))\n+            return false;\n+        m_decryption_thoroughly_checked = true;\n+    }\n+    return true;\n+}\n+\n+bool DescriptorScriptPubKeyMan::Encrypt(const CKeyingMaterial& master_key, WalletBatch* batch)\n+{\n+    LOCK(cs_desc_man);\n+    if (!m_map_crypted_keys.empty()) {\n+        return false;\n+    }\n+\n+    for (const KeyMap::value_type& key_in : m_map_keys)\n+    {\n+        const CKey &key = key_in.second;\n+        CPubKey pubkey = key.GetPubKey();\n+        CKeyingMaterial secret(key.begin(), key.end());\n+        std::vector<unsigned char> crypted_secret;\n+        if (!EncryptSecret(master_key, secret, pubkey.GetHash(), crypted_secret)) {\n+            return false;\n+        }\n+        m_map_crypted_keys[pubkey.GetID()] = make_pair(pubkey, crypted_secret);\n+        batch->WriteCryptedDescriptorKey(GetID(), pubkey, crypted_secret);\n+    }\n+    m_map_keys.clear();\n+    return true;\n+}\n+\n+bool DescriptorScriptPubKeyMan::GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool)\n+{\n+    LOCK(cs_desc_man);\n+    std::string error;\n+    bool result = GetNewDestination(type, address, error);\n+    index = m_wallet_descriptor.next_index - 1;\n+    return result;\n+}\n+\n+void DescriptorScriptPubKeyMan::ReturnDestination(int64_t index, bool internal, const CTxDestination& addr)\n+{\n+    LOCK(cs_desc_man);\n+    // Only return when the index was the most recent\n+    if (m_wallet_descriptor.next_index - 1 == index) {\n+        m_wallet_descriptor.next_index--;\n+    }\n+    WalletBatch(m_storage.GetDatabase()).WriteDescriptor(GetID(), m_wallet_descriptor);\n+    NotifyCanGetAddressesChanged();\n+}\n+\n+std::map<CKeyID, CKey> DescriptorScriptPubKeyMan::GetKeys() const\n+{\n+    AssertLockHeld(cs_desc_man);\n+    if (m_storage.HasEncryptionKeys() && !m_storage.IsLocked()) {\n+        KeyMap keys;\n+        for (auto key_pair : m_map_crypted_keys) {\n+            const CPubKey& pubkey = key_pair.second.first;\n+            const std::vector<unsigned char>& crypted_secret = key_pair.second.second;\n+            CKey key;\n+            DecryptKey(m_storage.GetEncryptionKey(), crypted_secret, pubkey, key);\n+            keys[pubkey.GetID()] = key;\n+        }\n+        return keys;\n+    }\n+    return m_map_keys;\n+}\n+\n+bool DescriptorScriptPubKeyMan::TopUp(unsigned int size)\n+{\n+    LOCK(cs_desc_man);\n+    unsigned int target_size;\n+    if (size > 0) {\n+        target_size = size;\n+    } else {\n+        target_size = std::max(gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 1);\n+    }\n+\n+    // Calculate the new range_end\n+    int32_t new_range_end = std::max(m_wallet_descriptor.next_index + (int32_t)target_size, m_wallet_descriptor.range_end);\n+\n+    // If the descriptor is not ranged, we actually just want to fill the first cache item\n+    if (!m_wallet_descriptor.descriptor->IsRange()) {\n+        new_range_end = 1;\n+        m_wallet_descriptor.range_end = 1;\n+        m_wallet_descriptor.range_start = 0;\n+    }\n+\n+    FlatSigningProvider provider;\n+    provider.keys = GetKeys();\n+\n+    WalletBatch batch(m_storage.GetDatabase());\n+    uint256 id = GetID();\n+    for (int32_t i = m_max_cached_index + 1; i < new_range_end; ++i) {\n+        FlatSigningProvider out_keys;\n+        std::vector<CScript> scripts_temp;\n+        DescriptorCache temp_cache;\n+        // Maybe we have a cached xpub and we can expand from the cache first\n+        if (!m_wallet_descriptor.descriptor->ExpandFromCache(i, m_wallet_descriptor.cache, scripts_temp, out_keys)) {\n+            if (!m_wallet_descriptor.descriptor->Expand(i, provider, scripts_temp, out_keys, &temp_cache)) return false;\n+        }\n+        // Add all of the scriptPubKeys to the scriptPubKey set\n+        for (const CScript& script : scripts_temp) {\n+            m_map_script_pub_keys[script] = i;\n+        }\n+        // Write the cache\n+        for (const auto& parent_xpub_pair : temp_cache.GetCachedParentExtPubKeys()) {\n+            CExtPubKey xpub;\n+            if (m_wallet_descriptor.cache.GetCachedParentExtPubKey(parent_xpub_pair.first, xpub)) {\n+                if (xpub != parent_xpub_pair.second) {\n+                    throw std::runtime_error(std::string(__func__) + \": New cached parent xpub does not match already cached parent xpub\");\n+                }\n+                continue;\n+            }\n+            if (!batch.WriteDescriptorParentCache(id, parent_xpub_pair.first, parent_xpub_pair.second)) {\n+                throw std::runtime_error(std::string(__func__) + \": writing cache item failed\");\n+            }\n+            m_wallet_descriptor.cache.CacheParentExtPubKey(parent_xpub_pair.first, parent_xpub_pair.second);\n+        }\n+        for (const auto& derived_xpub_map_pair : temp_cache.GetCachedDerivedExtPubKeys()) {\n+            for (const auto& derived_xpub_pair : derived_xpub_map_pair.second) {\n+                CExtPubKey xpub;\n+                if (m_wallet_descriptor.cache.GetCachedDerivedExtPubKey(derived_xpub_map_pair.first, derived_xpub_pair.first, xpub)) {\n+                    if (xpub != derived_xpub_pair.second) {\n+                        throw std::runtime_error(std::string(__func__) + \": New cached derived xpub does not match already cached derived xpub\");\n+                    }\n+                    continue;\n+                }\n+                if (!batch.WriteDescriptorDerivedCache(id, derived_xpub_map_pair.first, derived_xpub_pair.first, derived_xpub_pair.second)) {\n+                    throw std::runtime_error(std::string(__func__) + \": writing cache item failed\");\n+                }\n+                m_wallet_descriptor.cache.CacheDerivedExtPubKey(derived_xpub_map_pair.first, derived_xpub_pair.first, derived_xpub_pair.second);\n+            }\n+        }\n+        m_max_cached_index++;\n+    }\n+    m_wallet_descriptor.range_end = new_range_end;\n+    batch.WriteDescriptor(GetID(), m_wallet_descriptor);\n+\n+    // By this point, the cache size should be the size of the entire range\n+    assert(m_wallet_descriptor.range_end - 1 == m_max_cached_index);\n+\n+    NotifyCanGetAddressesChanged();\n+    return true;\n+}\n+\n+void DescriptorScriptPubKeyMan::MarkUnusedAddresses(const CScript& script)\n+{\n+    LOCK(cs_desc_man);\n+    if (IsMine(script)) {\n+        int32_t index = m_map_script_pub_keys[script];\n+        if (index >= m_wallet_descriptor.next_index) {\n+            WalletLogPrintf(\"%s: Detected a used keypool item at index %d, mark all keypool items up to this item as used\\n\", __func__, index);\n+            m_wallet_descriptor.next_index = index + 1;\n+        }\n+        if (!TopUp()) {\n+            WalletLogPrintf(\"%s: Topping up keypool failed (locked wallet)\\n\", __func__);\n+        }\n+    }\n+}\n+\n+void DescriptorScriptPubKeyMan::AddDescriptorKey(const CKey& key, const CPubKey &pubkey)\n+{\n+    LOCK(cs_desc_man);\n+    WalletBatch batch(m_storage.GetDatabase());\n+    if (!AddDescriptorKeyWithDB(batch, key, pubkey)) {\n+        throw std::runtime_error(std::string(__func__) + \": writing descriptor private key failed\");\n+    }\n+}\n+\n+bool DescriptorScriptPubKeyMan::AddDescriptorKeyWithDB(WalletBatch& batch, const CKey& key, const CPubKey &pubkey)\n+{\n+    AssertLockHeld(cs_desc_man);\n+    assert(!m_storage.IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS));\n+\n+    if (m_storage.HasEncryptionKeys()) {\n+        if (m_storage.IsLocked()) {\n+            return false;\n+        }\n+\n+        std::vector<unsigned char> crypted_secret;\n+        CKeyingMaterial secret(key.begin(), key.end());\n+        if (!EncryptSecret(m_storage.GetEncryptionKey(), secret, pubkey.GetHash(), crypted_secret)) {\n+            return false;\n+        }\n+\n+        m_map_crypted_keys[pubkey.GetID()] = make_pair(pubkey, crypted_secret);\n+        batch.WriteCryptedDescriptorKey(GetID(), pubkey, crypted_secret);\n+        return true;\n+    } else {\n+        m_map_keys[pubkey.GetID()] = key;\n+        return batch.WriteDescriptorKey(GetID(), pubkey, key.GetPrivKey());\n+    }\n+}\n+\n+bool DescriptorScriptPubKeyMan::SetupDescriptorGeneration(const CExtKey& master_key)\n+{\n+    LOCK(cs_desc_man);\n+    assert(m_storage.IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS));\n+\n+    // Ignore when there is already a descriptor\n+    if (m_wallet_descriptor.descriptor) {\n+        return false;\n+    }\n+\n+    int64_t creation_time = GetTime();\n+\n+    std::string xpub = EncodeExtPubKey(master_key.Neuter());\n+\n+    // Build descriptor string\n+    std::string desc_prefix;\n+    std::string desc_suffix = \"/*)\";\n+    switch (m_address_type) {\n+    case OutputType::LEGACY: {\n+        desc_prefix = \"pkh(\" + xpub + \"/44'\";\n+        break;\n+    }\n+    case OutputType::P2SH_SEGWIT: {\n+        desc_prefix = \"sh(wpkh(\" + xpub + \"/49'\";\n+        desc_suffix += \")\";\n+        break;\n+    }\n+    case OutputType::BECH32: {\n+        desc_prefix = \"wpkh(\" + xpub + \"/84'\";\n+        break;\n+    }\n+    default: assert(false);\n+    }\n+\n+    // Mainnet derives at 0', testnet and regtest derive at 1'\n+    if (Params().IsTestChain()) {\n+        desc_prefix += \"/1'\";\n+    } else {\n+        desc_prefix += \"/0'\";\n+    }\n+\n+    std::string internal_path = m_internal ? \"/1\" : \"/0\";\n+    std::string desc_str = desc_prefix + \"/0'\" + internal_path + desc_suffix;\n+\n+    // Make the descriptor\n+    FlatSigningProvider keys;\n+    std::string error;\n+    std::unique_ptr<Descriptor> desc = Parse(desc_str, keys, error, false);\n+    WalletDescriptor w_desc(std::move(desc), creation_time, 0, 0, 0);\n+    m_wallet_descriptor = w_desc;\n+\n+    // Store the master private key, and descriptor\n+    WalletBatch batch(m_storage.GetDatabase());\n+    if (!AddDescriptorKeyWithDB(batch, master_key.key, master_key.key.GetPubKey())) {\n+        throw std::runtime_error(std::string(__func__) + \": writing descriptor master rivate key failed\");\n+    }\n+    if (!batch.WriteDescriptor(GetID(), m_wallet_descriptor)) {\n+        throw std::runtime_error(std::string(__func__) + \": writing descriptor failed\");\n+    }\n+\n+    // TopUp\n+    TopUp();\n+\n+    m_storage.UnsetBlankWalletFlag(batch);\n+    return true;\n+}\n+\n+bool DescriptorScriptPubKeyMan::IsHDEnabled() const\n+{\n+    LOCK(cs_desc_man);\n+    return m_wallet_descriptor.descriptor->IsRange();\n+}\n+\n+bool DescriptorScriptPubKeyMan::CanGetAddresses(bool internal) const\n+{\n+    // We can only give out addresses from descriptors that are single type (not combo), ranged,\n+    // and either has cached keys or can generate more keys (ignoring encryption)\n+    LOCK(cs_desc_man);\n+    return m_wallet_descriptor.descriptor->IsSingleType() &&\n+           m_wallet_descriptor.descriptor->IsRange() &&\n+           (HavePrivateKeys() || m_wallet_descriptor.next_index < m_wallet_descriptor.range_end);\n+}\n+\n+bool DescriptorScriptPubKeyMan::HavePrivateKeys() const\n+{\n+    LOCK(cs_desc_man);\n+    return m_map_keys.size() > 0 || m_map_crypted_keys.size() > 0;\n+}\n+\n+int64_t DescriptorScriptPubKeyMan::GetOldestKeyPoolTime() const\n+{\n+    return 0;\n+}\n+\n+size_t DescriptorScriptPubKeyMan::KeypoolCountExternalKeys() const\n+{\n+    if (m_internal) {\n+        return 0;\n+    }\n+    return GetKeyPoolSize();\n+}\n+\n+unsigned int DescriptorScriptPubKeyMan::GetKeyPoolSize() const\n+{\n+    LOCK(cs_desc_man);\n+    return m_wallet_descriptor.range_end - m_wallet_descriptor.next_index;\n+}\n+\n+int64_t DescriptorScriptPubKeyMan::GetTimeFirstKey() const\n+{\n+    LOCK(cs_desc_man);\n+    return m_wallet_descriptor.creation_time;\n+}\n+\n+std::unique_ptr<FlatSigningProvider> DescriptorScriptPubKeyMan::GetSigningProvider(const CScript& script, bool include_private) const\n+{\n+    LOCK(cs_desc_man);\n+\n+    // Find the index of the script\n+    auto it = m_map_script_pub_keys.find(script);\n+    if (it == m_map_script_pub_keys.end()) {\n+        return nullptr;\n+    }\n+    int32_t index = it->second;\n+\n+    // Get the scripts, keys, and key origins for this script\n+    std::unique_ptr<FlatSigningProvider> out_keys = MakeUnique<FlatSigningProvider>();\n+    std::vector<CScript> scripts_temp;\n+    if (!m_wallet_descriptor.descriptor->ExpandFromCache(index, m_wallet_descriptor.cache, scripts_temp, *out_keys)) return nullptr;\n+\n+    if (include_private) {\n+        FlatSigningProvider master_provider;\n+        master_provider.keys = GetKeys();\n+        assert(m_wallet_descriptor.descriptor->ExpandPrivate(index, master_provider, *out_keys));",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 469,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "d034592cf87d5ac8cea02c0edd4d50134be88c87",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't think we're supposed to be asserting on a line with state changes, cache the result and then assert below",
      "created_at": "2020-03-28T17:25:38Z",
      "updated_at": "2020-04-23T18:00:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399687251",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399687251"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1905,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399708441",
      "pull_request_review_id": 383348776,
      "id": 399708441,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTcwODQ0MQ==",
      "diff_hunk": "@@ -434,7 +436,38 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             ssKey >> id;\n             WalletDescriptor desc;\n             ssValue >> desc;\n+            if (wss.m_descriptor_caches.count(id) == 0) {\n+                wss.m_descriptor_caches[id] = DescriptorCache();\n+            }\n             pwallet->LoadDescriptorScriptPubKeyMan(id, desc);\n+        } else if (strType == DBKeys::WALLETDESCRIPTORCACHE) {\n+            bool parent = true;\n+            uint256 desc_id;\n+            uint32_t key_exp_index;\n+            uint32_t der_index;\n+            ssKey >> desc_id;\n+            ssKey >> key_exp_index;\n+\n+            // if the der_index exists, it's a derived xpub\n+            try",
      "path": "src/wallet/walletdb.cpp",
      "position": 119,
      "original_position": 33,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "0abf7b960c82e9d5b6973ea3c2baee7d696c5145",
      "in_reply_to_id": 399472037,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "More specifically, I've been thinking about a way to unify the descriptor cache structure so that we don't have to have separate records like that. In particular, I've considered setting a bogus derivation index for the parent xpubs so that a single record can be used, as well as a single map within `DescriptorCache` too.",
      "created_at": "2020-03-28T20:54:43Z",
      "updated_at": "2020-04-23T18:00:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399708441",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399708441"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 494,
      "original_line": 494,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399709303",
      "pull_request_review_id": 383349469,
      "id": 399709303,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTcwOTMwMw==",
      "diff_hunk": "@@ -1616,6 +1616,13 @@ bool DescriptorScriptPubKeyMan::GetReservedDestination(const OutputType type, bo\n \n void DescriptorScriptPubKeyMan::ReturnDestination(int64_t index, bool internal, const CTxDestination& addr)\n {\n+    LOCK(cs_desc_man);\n+    // Only return when the index was the most recent",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 151,
      "original_position": 5,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "ee03d46178a3e8d511c33f734892820b36ed7a1a",
      "in_reply_to_id": 399489479,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Again, seems out of scope and a general wallet test rather than specific to descriptor wallets.",
      "created_at": "2020-03-28T21:03:44Z",
      "updated_at": "2020-04-23T18:00:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399709303",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399709303"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1621,
      "original_line": 1621,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399709427",
      "pull_request_review_id": 383349546,
      "id": 399709427,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTcwOTQyNw==",
      "diff_hunk": "@@ -0,0 +1,293 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the importdescriptors RPC.\n+\n+Test importdescriptors by generating keys on node0, importing the corresponding\n+descriptors on node1 and then testing the address info for the different address\n+variants.\n+\n+- `get_key()` is called to generate keys on node0 and return the privkeys,\n+  pubkeys and all variants of scriptPubKey and address.\n+- `test_importdesc()` is called to send an importdescriptors call to node1, test\n+  success, and (if unsuccessful) test the error code and error message returned.\n+- `test_address()` is called to call getaddressinfo for an address on node1\n+  and test the values returned.\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.descriptors import descsum_create\n+from test_framework.util import (\n+    assert_equal,\n+)\n+from test_framework.wallet_util import (\n+    get_key,\n+    test_address,\n+)\n+\n+class ImportDescriptorsTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.extra_args = [[\"-addresstype=legacy\"],\n+                           [\"-addresstype=bech32\", \"-keypool=5\"]\n+                          ]\n+        self.setup_clean_chain = True\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def test_importdesc(self, req, success, error_code=None, error_message=None, warnings=None, wallet=None):\n+        \"\"\"Run importdescriptors and assert success\"\"\"\n+        if warnings is None:\n+            warnings = []\n+        wrpc = self.nodes[1].get_wallet_rpc('w1')\n+        if wallet is not None:\n+            wrpc = wallet\n+\n+        result = wrpc.importdescriptors([req])\n+        observed_warnings = []\n+        if 'warnings' in result[0]:\n+           observed_warnings = result[0]['warnings']\n+        assert_equal(\"\\n\".join(sorted(warnings)), \"\\n\".join(sorted(observed_warnings)))\n+        assert_equal(result[0]['success'], success)\n+        if error_code is not None:\n+            assert_equal(result[0]['error']['code'], error_code)\n+            assert_equal(result[0]['error']['message'], error_message)\n+\n+    def run_test(self):\n+        self.log.info('Setting up wallets')\n+        self.nodes[0].createwallet(wallet_name='w0', disable_private_keys=False)\n+        w0 = self.nodes[0].get_wallet_rpc('w0')\n+\n+        self.nodes[1].createwallet(wallet_name='w1', disable_private_keys=True, blank=True, descriptors=True)\n+        w1 = self.nodes[1].get_wallet_rpc('w1')\n+        assert_equal(w1.getwalletinfo()['keypoolsize'], 0)\n+\n+        self.nodes[1].createwallet(wallet_name=\"wpriv\", disable_private_keys=False, blank=True, descriptors=True)\n+        wpriv = self.nodes[1].get_wallet_rpc(\"wpriv\")\n+        assert_equal(wpriv.getwalletinfo()['keypoolsize'], 0)\n+\n+        self.log.info('Mining coins')\n+        w0.generatetoaddress(101, w0.getnewaddress())\n+\n+        # RPC importdescriptors -----------------------------------------------\n+\n+        # # Test import fails if no descriptor present\n+        key = get_key(w0)\n+        self.log.info(\"Import should fail if a descriptor is not provided\")\n+        self.test_importdesc({\"timestamp\": \"now\"},\n+                             success=False,\n+                             error_code=-8,\n+                             error_message='Descriptor not found.')\n+\n+        # # Test importing of a P2PKH descriptor\n+        key = get_key(w0)\n+        self.log.info(\"Should import a p2pkh descriptor\")\n+        self.test_importdesc({\"desc\": descsum_create(\"pkh(\" + key.pubkey + \")\"),\n+                              \"timestamp\": \"now\",\n+                              \"label\": \"Descriptor import test\"},\n+                             success=True)\n+        test_address(w1,\n+                     key.p2pkh_addr,\n+                     solvable=True,\n+                     ismine=True,\n+                     labels=[\"Descriptor import test\"])\n+\n+        # # Test importing of a P2SH-P2WPKH descriptor\n+        key = get_key(w0)\n+        self.log.info(\"Should not import a p2sh-p2wpkh descriptor without checksum\")\n+        self.test_importdesc({\"desc\": \"sh(wpkh(\" + key.pubkey + \"))\",\n+                              \"timestamp\": \"now\"\n+                              },\n+                             success=False,\n+                             error_code=-5,\n+                             error_message=\"Missing checksum\")\n+\n+        self.log.info(\"Should not import a p2sh-p2wpkh descriptor that has range specified\")\n+        self.test_importdesc({\"desc\": descsum_create(\"sh(wpkh(\" + key.pubkey + \"))\"),\n+                               \"timestamp\": \"now\",\n+                               \"range\": 1,\n+                              },\n+                              success=False,\n+                              error_code=-8,\n+                              error_message=\"Range should not be specified for an un-ranged descriptor\")\n+\n+        self.log.info(\"Should not import a p2sh-p2wpkh descriptor and have it set to active\")\n+        self.test_importdesc({\"desc\": descsum_create(\"sh(wpkh(\" + key.pubkey + \"))\"),\n+                               \"timestamp\": \"now\",\n+                               \"active\": True,\n+                              },\n+                              success=False,\n+                              error_code=-8,\n+                              error_message=\"Active descriptor must be ranged\")\n+\n+        self.log.info(\"Should import a (non-active) p2sh-p2wpkh descriptor\")\n+        self.test_importdesc({\"desc\": descsum_create(\"sh(wpkh(\" + key.pubkey + \"))\"),\n+                               \"timestamp\": \"now\",\n+                               \"active\": False,\n+                              },\n+                              success=True)\n+\n+        test_address(w1,\n+                     key.p2sh_p2wpkh_addr,\n+                     ismine=True,\n+                     solvable=True)\n+\n+        # # Test importing of a multisig descriptor",
      "path": "test/functional/wallet_importdescriptors.py",
      "position": 149,
      "original_position": 136,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "7d1c6bbeb057c18da62201267efc2b675f142da3",
      "in_reply_to_id": 399336346,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added a test for that case.",
      "created_at": "2020-03-28T21:04:49Z",
      "updated_at": "2020-04-23T18:00:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399709427",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399709427"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 149,
      "original_line": 149,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399709544",
      "pull_request_review_id": 383349660,
      "id": 399709544,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTcwOTU0NA==",
      "diff_hunk": "@@ -0,0 +1,293 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the importdescriptors RPC.\n+",
      "path": "test/functional/wallet_importdescriptors.py",
      "position": 6,
      "original_position": 6,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "a03a8cbd1f42636834263135e904900cc808d346",
      "in_reply_to_id": 399363853,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-03-28T21:06:13Z",
      "updated_at": "2020-04-23T18:00:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399709544",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399709544"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 6,
      "original_line": 6,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399709671",
      "pull_request_review_id": 383349764,
      "id": 399709671,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTcwOTY3MQ==",
      "diff_hunk": "@@ -1496,3 +1492,621 @@ std::set<CKeyID> LegacyScriptPubKeyMan::GetKeys() const\n     }\n     return set_address;\n }\n+\n+void LegacyScriptPubKeyMan::SetType(OutputType type, bool internal) {}\n+\n+bool DescriptorScriptPubKeyMan::GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error)\n+{\n+    // Returns true if this descriptor supports getting new addresses. Conditions where we may be unable to fetch them (e.g. locked) are caught later\n+    if (!CanGetAddresses(m_internal)) {\n+        error = \"No addresses available\";\n+        return false;\n+    }\n+    {\n+        LOCK(cs_desc_man);\n+        assert(m_wallet_descriptor.descriptor->IsSingleType()); // This is a combo descriptor which should not be an active descriptor\n+        if (type != m_address_type) {\n+            throw std::runtime_error(std::string(__func__) + \": Types are inconsistent\");\n+        }\n+\n+        TopUp();\n+\n+        // Get the scriptPubKey from the descriptor\n+        FlatSigningProvider out_keys;\n+        std::vector<CScript> scripts_temp;\n+        if (m_wallet_descriptor.range_end <= m_max_cached_index && !TopUp(1)) {\n+            // We can't generate anymore keys\n+            error = \"Error: Keypool ran out, please call keypoolrefill first\";\n+            return false;\n+        }\n+        if (!m_wallet_descriptor.descriptor->ExpandFromCache(m_wallet_descriptor.next_index, m_wallet_descriptor.cache, scripts_temp, out_keys)) {\n+            // We can't generate anymore keys\n+            error = \"Error: Keypool ran out, please call keypoolrefill first\";\n+            return false;\n+        }\n+\n+        Optional<OutputType> out_script_type = m_wallet_descriptor.descriptor->GetOutputType();\n+        if (out_script_type && out_script_type == type) {\n+            ExtractDestination(scripts_temp[0], dest);\n+        } else {\n+            throw std::runtime_error(std::string(__func__) + \": Types are inconsistent. Stored type does not match type of newly generated address\");\n+        }\n+        m_wallet_descriptor.next_index++;\n+        WalletBatch(m_storage.GetDatabase()).WriteDescriptor(GetID(), m_wallet_descriptor);\n+        return true;\n+    }\n+}\n+\n+isminetype DescriptorScriptPubKeyMan::IsMine(const CScript& script) const\n+{\n+    LOCK(cs_desc_man);\n+    if (m_map_script_pub_keys.count(script) > 0) {\n+        return ISMINE_SPENDABLE;\n+    }\n+    return ISMINE_NO;\n+}\n+\n+bool DescriptorScriptPubKeyMan::CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys)\n+{\n+    {\n+        LOCK(cs_desc_man);\n+        if (!m_map_keys.empty())\n+            return false;\n+\n+        bool keyPass = m_map_crypted_keys.empty(); // Always pass when there are no encrypted keys\n+        bool keyFail = false;\n+        CryptedKeyMap::const_iterator mi = m_map_crypted_keys.begin();\n+        for (; mi != m_map_crypted_keys.end(); ++mi)\n+        {\n+            const CPubKey &pubkey = (*mi).second.first;\n+            const std::vector<unsigned char> &crypted_secret = (*mi).second.second;\n+            CKey key;\n+            if (!DecryptKey(master_key, crypted_secret, pubkey, key))\n+            {\n+                keyFail = true;\n+                break;\n+            }\n+            keyPass = true;\n+            if (m_decryption_thoroughly_checked)\n+                break;\n+        }\n+        if (keyPass && keyFail)\n+        {\n+            LogPrintf(\"The wallet is probably corrupted: Some keys decrypt but not all.\\n\");\n+            throw std::runtime_error(\"Error unlocking wallet: some keys decrypt but not all. Your wallet file may be corrupt.\");\n+        }\n+        if (keyFail || (!keyPass && !accept_no_keys))\n+            return false;\n+        m_decryption_thoroughly_checked = true;\n+    }\n+    return true;\n+}\n+\n+bool DescriptorScriptPubKeyMan::Encrypt(const CKeyingMaterial& master_key, WalletBatch* batch)\n+{\n+    LOCK(cs_desc_man);\n+    if (!m_map_crypted_keys.empty()) {\n+        return false;\n+    }\n+\n+    for (const KeyMap::value_type& key_in : m_map_keys)\n+    {\n+        const CKey &key = key_in.second;\n+        CPubKey pubkey = key.GetPubKey();\n+        CKeyingMaterial secret(key.begin(), key.end());\n+        std::vector<unsigned char> crypted_secret;\n+        if (!EncryptSecret(master_key, secret, pubkey.GetHash(), crypted_secret)) {\n+            return false;\n+        }\n+        m_map_crypted_keys[pubkey.GetID()] = make_pair(pubkey, crypted_secret);\n+        batch->WriteCryptedDescriptorKey(GetID(), pubkey, crypted_secret);\n+    }\n+    m_map_keys.clear();\n+    return true;\n+}\n+\n+bool DescriptorScriptPubKeyMan::GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool)\n+{\n+    LOCK(cs_desc_man);\n+    std::string error;\n+    bool result = GetNewDestination(type, address, error);\n+    index = m_wallet_descriptor.next_index - 1;\n+    return result;\n+}\n+\n+void DescriptorScriptPubKeyMan::ReturnDestination(int64_t index, bool internal, const CTxDestination& addr)\n+{\n+    LOCK(cs_desc_man);\n+    // Only return when the index was the most recent\n+    if (m_wallet_descriptor.next_index - 1 == index) {\n+        m_wallet_descriptor.next_index--;\n+    }\n+    WalletBatch(m_storage.GetDatabase()).WriteDescriptor(GetID(), m_wallet_descriptor);\n+    NotifyCanGetAddressesChanged();\n+}\n+\n+std::map<CKeyID, CKey> DescriptorScriptPubKeyMan::GetKeys() const\n+{\n+    AssertLockHeld(cs_desc_man);\n+    if (m_storage.HasEncryptionKeys() && !m_storage.IsLocked()) {\n+        KeyMap keys;\n+        for (auto key_pair : m_map_crypted_keys) {\n+            const CPubKey& pubkey = key_pair.second.first;\n+            const std::vector<unsigned char>& crypted_secret = key_pair.second.second;\n+            CKey key;\n+            DecryptKey(m_storage.GetEncryptionKey(), crypted_secret, pubkey, key);\n+            keys[pubkey.GetID()] = key;\n+        }\n+        return keys;\n+    }\n+    return m_map_keys;\n+}\n+\n+bool DescriptorScriptPubKeyMan::TopUp(unsigned int size)\n+{\n+    LOCK(cs_desc_man);\n+    unsigned int target_size;\n+    if (size > 0) {\n+        target_size = size;\n+    } else {\n+        target_size = std::max(gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 1);\n+    }\n+\n+    // Calculate the new range_end\n+    int32_t new_range_end = std::max(m_wallet_descriptor.next_index + (int32_t)target_size, m_wallet_descriptor.range_end);\n+\n+    // If the descriptor is not ranged, we actually just want to fill the first cache item\n+    if (!m_wallet_descriptor.descriptor->IsRange()) {\n+        new_range_end = 1;\n+        m_wallet_descriptor.range_end = 1;\n+        m_wallet_descriptor.range_start = 0;\n+    }\n+\n+    FlatSigningProvider provider;\n+    provider.keys = GetKeys();\n+\n+    WalletBatch batch(m_storage.GetDatabase());\n+    uint256 id = GetID();\n+    for (int32_t i = m_max_cached_index + 1; i < new_range_end; ++i) {\n+        FlatSigningProvider out_keys;\n+        std::vector<CScript> scripts_temp;\n+        DescriptorCache temp_cache;\n+        // Maybe we have a cached xpub and we can expand from the cache first\n+        if (!m_wallet_descriptor.descriptor->ExpandFromCache(i, m_wallet_descriptor.cache, scripts_temp, out_keys)) {\n+            if (!m_wallet_descriptor.descriptor->Expand(i, provider, scripts_temp, out_keys, &temp_cache)) return false;\n+        }\n+        // Add all of the scriptPubKeys to the scriptPubKey set\n+        for (const CScript& script : scripts_temp) {\n+            m_map_script_pub_keys[script] = i;\n+        }\n+        // Write the cache\n+        for (const auto& parent_xpub_pair : temp_cache.GetCachedParentExtPubKeys()) {\n+            CExtPubKey xpub;\n+            if (m_wallet_descriptor.cache.GetCachedParentExtPubKey(parent_xpub_pair.first, xpub)) {\n+                if (xpub != parent_xpub_pair.second) {\n+                    throw std::runtime_error(std::string(__func__) + \": New cached parent xpub does not match already cached parent xpub\");\n+                }\n+                continue;\n+            }\n+            if (!batch.WriteDescriptorParentCache(id, parent_xpub_pair.first, parent_xpub_pair.second)) {\n+                throw std::runtime_error(std::string(__func__) + \": writing cache item failed\");\n+            }\n+            m_wallet_descriptor.cache.CacheParentExtPubKey(parent_xpub_pair.first, parent_xpub_pair.second);\n+        }\n+        for (const auto& derived_xpub_map_pair : temp_cache.GetCachedDerivedExtPubKeys()) {\n+            for (const auto& derived_xpub_pair : derived_xpub_map_pair.second) {\n+                CExtPubKey xpub;\n+                if (m_wallet_descriptor.cache.GetCachedDerivedExtPubKey(derived_xpub_map_pair.first, derived_xpub_pair.first, xpub)) {\n+                    if (xpub != derived_xpub_pair.second) {\n+                        throw std::runtime_error(std::string(__func__) + \": New cached derived xpub does not match already cached derived xpub\");\n+                    }\n+                    continue;\n+                }\n+                if (!batch.WriteDescriptorDerivedCache(id, derived_xpub_map_pair.first, derived_xpub_pair.first, derived_xpub_pair.second)) {\n+                    throw std::runtime_error(std::string(__func__) + \": writing cache item failed\");\n+                }\n+                m_wallet_descriptor.cache.CacheDerivedExtPubKey(derived_xpub_map_pair.first, derived_xpub_pair.first, derived_xpub_pair.second);\n+            }\n+        }\n+        m_max_cached_index++;\n+    }\n+    m_wallet_descriptor.range_end = new_range_end;\n+    batch.WriteDescriptor(GetID(), m_wallet_descriptor);\n+\n+    // By this point, the cache size should be the size of the entire range\n+    assert(m_wallet_descriptor.range_end - 1 == m_max_cached_index);\n+\n+    NotifyCanGetAddressesChanged();\n+    return true;\n+}\n+\n+void DescriptorScriptPubKeyMan::MarkUnusedAddresses(const CScript& script)\n+{\n+    LOCK(cs_desc_man);\n+    if (IsMine(script)) {\n+        int32_t index = m_map_script_pub_keys[script];\n+        if (index >= m_wallet_descriptor.next_index) {\n+            WalletLogPrintf(\"%s: Detected a used keypool item at index %d, mark all keypool items up to this item as used\\n\", __func__, index);\n+            m_wallet_descriptor.next_index = index + 1;\n+        }\n+        if (!TopUp()) {\n+            WalletLogPrintf(\"%s: Topping up keypool failed (locked wallet)\\n\", __func__);\n+        }\n+    }\n+}\n+\n+void DescriptorScriptPubKeyMan::AddDescriptorKey(const CKey& key, const CPubKey &pubkey)\n+{\n+    LOCK(cs_desc_man);\n+    WalletBatch batch(m_storage.GetDatabase());\n+    if (!AddDescriptorKeyWithDB(batch, key, pubkey)) {\n+        throw std::runtime_error(std::string(__func__) + \": writing descriptor private key failed\");\n+    }\n+}\n+\n+bool DescriptorScriptPubKeyMan::AddDescriptorKeyWithDB(WalletBatch& batch, const CKey& key, const CPubKey &pubkey)\n+{\n+    AssertLockHeld(cs_desc_man);\n+    assert(!m_storage.IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS));\n+\n+    if (m_storage.HasEncryptionKeys()) {\n+        if (m_storage.IsLocked()) {\n+            return false;\n+        }\n+\n+        std::vector<unsigned char> crypted_secret;\n+        CKeyingMaterial secret(key.begin(), key.end());\n+        if (!EncryptSecret(m_storage.GetEncryptionKey(), secret, pubkey.GetHash(), crypted_secret)) {\n+            return false;\n+        }\n+\n+        m_map_crypted_keys[pubkey.GetID()] = make_pair(pubkey, crypted_secret);\n+        batch.WriteCryptedDescriptorKey(GetID(), pubkey, crypted_secret);\n+        return true;\n+    } else {\n+        m_map_keys[pubkey.GetID()] = key;\n+        return batch.WriteDescriptorKey(GetID(), pubkey, key.GetPrivKey());\n+    }\n+}\n+\n+bool DescriptorScriptPubKeyMan::SetupDescriptorGeneration(const CExtKey& master_key)\n+{\n+    LOCK(cs_desc_man);\n+    assert(m_storage.IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS));\n+\n+    // Ignore when there is already a descriptor\n+    if (m_wallet_descriptor.descriptor) {\n+        return false;\n+    }\n+\n+    int64_t creation_time = GetTime();\n+\n+    std::string xpub = EncodeExtPubKey(master_key.Neuter());\n+\n+    // Build descriptor string\n+    std::string desc_prefix;\n+    std::string desc_suffix = \"/*)\";\n+    switch (m_address_type) {\n+    case OutputType::LEGACY: {\n+        desc_prefix = \"pkh(\" + xpub + \"/44'\";\n+        break;\n+    }\n+    case OutputType::P2SH_SEGWIT: {\n+        desc_prefix = \"sh(wpkh(\" + xpub + \"/49'\";\n+        desc_suffix += \")\";\n+        break;\n+    }\n+    case OutputType::BECH32: {\n+        desc_prefix = \"wpkh(\" + xpub + \"/84'\";\n+        break;\n+    }\n+    default: assert(false);\n+    }\n+\n+    // Mainnet derives at 0', testnet and regtest derive at 1'\n+    if (Params().IsTestChain()) {\n+        desc_prefix += \"/1'\";\n+    } else {\n+        desc_prefix += \"/0'\";\n+    }\n+\n+    std::string internal_path = m_internal ? \"/1\" : \"/0\";\n+    std::string desc_str = desc_prefix + \"/0'\" + internal_path + desc_suffix;\n+\n+    // Make the descriptor\n+    FlatSigningProvider keys;\n+    std::string error;\n+    std::unique_ptr<Descriptor> desc = Parse(desc_str, keys, error, false);\n+    WalletDescriptor w_desc(std::move(desc), creation_time, 0, 0, 0);\n+    m_wallet_descriptor = w_desc;\n+\n+    // Store the master private key, and descriptor\n+    WalletBatch batch(m_storage.GetDatabase());\n+    if (!AddDescriptorKeyWithDB(batch, master_key.key, master_key.key.GetPubKey())) {\n+        throw std::runtime_error(std::string(__func__) + \": writing descriptor master rivate key failed\");\n+    }\n+    if (!batch.WriteDescriptor(GetID(), m_wallet_descriptor)) {\n+        throw std::runtime_error(std::string(__func__) + \": writing descriptor failed\");\n+    }\n+\n+    // TopUp\n+    TopUp();\n+\n+    m_storage.UnsetBlankWalletFlag(batch);\n+    return true;\n+}\n+\n+bool DescriptorScriptPubKeyMan::IsHDEnabled() const\n+{\n+    LOCK(cs_desc_man);\n+    return m_wallet_descriptor.descriptor->IsRange();\n+}\n+\n+bool DescriptorScriptPubKeyMan::CanGetAddresses(bool internal) const\n+{\n+    // We can only give out addresses from descriptors that are single type (not combo), ranged,\n+    // and either has cached keys or can generate more keys (ignoring encryption)\n+    LOCK(cs_desc_man);\n+    return m_wallet_descriptor.descriptor->IsSingleType() &&\n+           m_wallet_descriptor.descriptor->IsRange() &&\n+           (HavePrivateKeys() || m_wallet_descriptor.next_index < m_wallet_descriptor.range_end);\n+}\n+\n+bool DescriptorScriptPubKeyMan::HavePrivateKeys() const\n+{\n+    LOCK(cs_desc_man);\n+    return m_map_keys.size() > 0 || m_map_crypted_keys.size() > 0;\n+}\n+\n+int64_t DescriptorScriptPubKeyMan::GetOldestKeyPoolTime() const\n+{\n+    return 0;\n+}\n+\n+size_t DescriptorScriptPubKeyMan::KeypoolCountExternalKeys() const\n+{\n+    if (m_internal) {\n+        return 0;\n+    }\n+    return GetKeyPoolSize();\n+}\n+\n+unsigned int DescriptorScriptPubKeyMan::GetKeyPoolSize() const\n+{\n+    LOCK(cs_desc_man);\n+    return m_wallet_descriptor.range_end - m_wallet_descriptor.next_index;\n+}\n+\n+int64_t DescriptorScriptPubKeyMan::GetTimeFirstKey() const\n+{\n+    LOCK(cs_desc_man);\n+    return m_wallet_descriptor.creation_time;\n+}\n+\n+std::unique_ptr<FlatSigningProvider> DescriptorScriptPubKeyMan::GetSigningProvider(const CScript& script, bool include_private) const\n+{\n+    LOCK(cs_desc_man);\n+\n+    // Find the index of the script\n+    auto it = m_map_script_pub_keys.find(script);\n+    if (it == m_map_script_pub_keys.end()) {\n+        return nullptr;\n+    }\n+    int32_t index = it->second;\n+\n+    // Get the scripts, keys, and key origins for this script\n+    std::unique_ptr<FlatSigningProvider> out_keys = MakeUnique<FlatSigningProvider>();\n+    std::vector<CScript> scripts_temp;\n+    if (!m_wallet_descriptor.descriptor->ExpandFromCache(index, m_wallet_descriptor.cache, scripts_temp, *out_keys)) return nullptr;\n+\n+    if (include_private) {\n+        FlatSigningProvider master_provider;\n+        master_provider.keys = GetKeys();\n+        assert(m_wallet_descriptor.descriptor->ExpandPrivate(index, master_provider, *out_keys));",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 469,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "d034592cf87d5ac8cea02c0edd4d50134be88c87",
      "in_reply_to_id": 399687251,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-03-28T21:07:40Z",
      "updated_at": "2020-04-23T18:00:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399709671",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399709671"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1905,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/400833941",
      "pull_request_review_id": 384635173,
      "id": 400833941,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgzMzk0MQ==",
      "diff_hunk": "@@ -1913,7 +1913,16 @@ bool DescriptorScriptPubKeyMan::CanProvide(const CScript& script, SignatureData&\n \n bool DescriptorScriptPubKeyMan::SignTransaction(CMutableTransaction& tx, const std::map<COutPoint, Coin>& coins, int sighash, std::map<int, std::string>& input_errors) const\n {\n-    return false;\n+    std::unique_ptr<FlatSigningProvider> keys = MakeUnique<FlatSigningProvider>();\n+    for (const auto& coin_pair : coins) {\n+        std::unique_ptr<FlatSigningProvider> coin_keys = std::move(GetSigningProvider(coin_pair.second.out.scriptPubKey, true));",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 7,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "3f5e0bfc5dc2ea37223c1e5820c66a5ce11d6b81",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 3f5e0bfc5dc2ea37223c1e5820c66a5ce11d6b81: clang on macOS complains about this `std::move`, and afaik there's no need for it, because the result of `GetSigningProvider()` is an `rvalue`. Ditto for SignMessage (70345ca67f42ce49b764024f5c62bf8a9a7bd188).\r\n\r\n```\r\nwallet/scriptpubkeyman.cpp:1927:58: warning: moving a temporary object prevents copy elision [-Wpessimizing-move]\r\n        std::unique_ptr<FlatSigningProvider> coin_keys = std::move(GetSigningProvider(coin_pair.second.out.scriptPubKey, true));\r\n                                                         ^\r\nwallet/scriptpubkeyman.cpp:1927:58: note: remove std::move call here\r\n        std::unique_ptr<FlatSigningProvider> coin_keys = std::move(GetSigningProvider(coin_pair.second.out.scriptPubKey, true));\r\n                                                         ^~~~~~~~~~                                                           ~\r\n```",
      "created_at": "2020-03-31T11:20:17Z",
      "updated_at": "2020-04-23T18:00:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r400833941",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/400833941"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1918,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/400919253",
      "pull_request_review_id": 384739739,
      "id": 400919253,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDkxOTI1Mw==",
      "diff_hunk": "@@ -1497,3 +1493,622 @@ std::set<CKeyID> LegacyScriptPubKeyMan::GetKeys() const\n     }\n     return set_address;\n }\n+\n+void LegacyScriptPubKeyMan::SetType(OutputType type, bool internal) {}\n+\n+bool DescriptorScriptPubKeyMan::GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error)\n+{\n+    // Returns true if this descriptor supports getting new addresses. Conditions where we may be unable to fetch them (e.g. locked) are caught later\n+    if (!CanGetAddresses(m_internal)) {\n+        error = \"No addresses available\";\n+        return false;\n+    }\n+    {\n+        LOCK(cs_desc_man);\n+        assert(m_wallet_descriptor.descriptor->IsSingleType()); // This is a combo descriptor which should not be an active descriptor\n+        if (type != m_address_type) {\n+            throw std::runtime_error(std::string(__func__) + \": Types are inconsistent\");\n+        }\n+\n+        TopUp();\n+\n+        // Get the scriptPubKey from the descriptor\n+        FlatSigningProvider out_keys;\n+        std::vector<CScript> scripts_temp;\n+        if (m_wallet_descriptor.range_end <= m_max_cached_index && !TopUp(1)) {\n+            // We can't generate anymore keys\n+            error = \"Error: Keypool ran out, please call keypoolrefill first\";\n+            return false;\n+        }\n+        if (!m_wallet_descriptor.descriptor->ExpandFromCache(m_wallet_descriptor.next_index, m_wallet_descriptor.cache, scripts_temp, out_keys)) {\n+            // We can't generate anymore keys\n+            error = \"Error: Keypool ran out, please call keypoolrefill first\";\n+            return false;\n+        }\n+\n+        Optional<OutputType> out_script_type = m_wallet_descriptor.descriptor->GetOutputType();\n+        if (out_script_type && out_script_type == type) {\n+            ExtractDestination(scripts_temp[0], dest);\n+        } else {\n+            throw std::runtime_error(std::string(__func__) + \": Types are inconsistent. Stored type does not match type of newly generated address\");\n+        }\n+        m_wallet_descriptor.next_index++;\n+        WalletBatch(m_storage.GetDatabase()).WriteDescriptor(GetID(), m_wallet_descriptor);\n+        return true;\n+    }\n+}\n+\n+isminetype DescriptorScriptPubKeyMan::IsMine(const CScript& script) const\n+{\n+    LOCK(cs_desc_man);\n+    if (m_map_script_pub_keys.count(script) > 0) {\n+        return ISMINE_SPENDABLE;\n+    }\n+    return ISMINE_NO;\n+}\n+\n+bool DescriptorScriptPubKeyMan::CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys)\n+{\n+    {\n+        LOCK(cs_desc_man);\n+        if (!m_map_keys.empty())\n+            return false;\n+\n+        bool keyPass = m_map_crypted_keys.empty(); // Always pass when there are no encrypted keys\n+        bool keyFail = false;\n+        CryptedKeyMap::const_iterator mi = m_map_crypted_keys.begin();\n+        for (; mi != m_map_crypted_keys.end(); ++mi)\n+        {\n+            const CPubKey &pubkey = (*mi).second.first;\n+            const std::vector<unsigned char> &crypted_secret = (*mi).second.second;\n+            CKey key;\n+            if (!DecryptKey(master_key, crypted_secret, pubkey, key))\n+            {\n+                keyFail = true;\n+                break;\n+            }\n+            keyPass = true;\n+            if (m_decryption_thoroughly_checked)\n+                break;\n+        }\n+        if (keyPass && keyFail)\n+        {\n+            LogPrintf(\"The wallet is probably corrupted: Some keys decrypt but not all.\\n\");\n+            throw std::runtime_error(\"Error unlocking wallet: some keys decrypt but not all. Your wallet file may be corrupt.\");\n+        }\n+        if (keyFail || (!keyPass && !accept_no_keys))\n+            return false;\n+        m_decryption_thoroughly_checked = true;\n+    }\n+    return true;\n+}\n+\n+bool DescriptorScriptPubKeyMan::Encrypt(const CKeyingMaterial& master_key, WalletBatch* batch)\n+{\n+    LOCK(cs_desc_man);\n+    if (!m_map_crypted_keys.empty()) {\n+        return false;\n+    }\n+\n+    for (const KeyMap::value_type& key_in : m_map_keys)\n+    {\n+        const CKey &key = key_in.second;\n+        CPubKey pubkey = key.GetPubKey();\n+        CKeyingMaterial secret(key.begin(), key.end());\n+        std::vector<unsigned char> crypted_secret;\n+        if (!EncryptSecret(master_key, secret, pubkey.GetHash(), crypted_secret)) {\n+            return false;\n+        }\n+        m_map_crypted_keys[pubkey.GetID()] = make_pair(pubkey, crypted_secret);\n+        batch->WriteCryptedDescriptorKey(GetID(), pubkey, crypted_secret);\n+    }\n+    m_map_keys.clear();\n+    return true;\n+}\n+\n+bool DescriptorScriptPubKeyMan::GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool)\n+{\n+    LOCK(cs_desc_man);\n+    std::string error;\n+    bool result = GetNewDestination(type, address, error);\n+    index = m_wallet_descriptor.next_index - 1;\n+    return result;\n+}\n+\n+void DescriptorScriptPubKeyMan::ReturnDestination(int64_t index, bool internal, const CTxDestination& addr)\n+{\n+    LOCK(cs_desc_man);\n+    // Only return when the index was the most recent\n+    if (m_wallet_descriptor.next_index - 1 == index) {\n+        m_wallet_descriptor.next_index--;\n+    }\n+    WalletBatch(m_storage.GetDatabase()).WriteDescriptor(GetID(), m_wallet_descriptor);\n+    NotifyCanGetAddressesChanged();\n+}\n+\n+std::map<CKeyID, CKey> DescriptorScriptPubKeyMan::GetKeys() const\n+{\n+    AssertLockHeld(cs_desc_man);\n+    if (m_storage.HasEncryptionKeys() && !m_storage.IsLocked()) {\n+        KeyMap keys;\n+        for (auto key_pair : m_map_crypted_keys) {\n+            const CPubKey& pubkey = key_pair.second.first;\n+            const std::vector<unsigned char>& crypted_secret = key_pair.second.second;\n+            CKey key;\n+            DecryptKey(m_storage.GetEncryptionKey(), crypted_secret, pubkey, key);\n+            keys[pubkey.GetID()] = key;\n+        }\n+        return keys;\n+    }\n+    return m_map_keys;\n+}\n+\n+bool DescriptorScriptPubKeyMan::TopUp(unsigned int size)\n+{\n+    LOCK(cs_desc_man);\n+    unsigned int target_size;\n+    if (size > 0) {\n+        target_size = size;\n+    } else {\n+        target_size = std::max(gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 1);\n+    }\n+\n+    // Calculate the new range_end\n+    int32_t new_range_end = std::max(m_wallet_descriptor.next_index + (int32_t)target_size, m_wallet_descriptor.range_end);\n+\n+    // If the descriptor is not ranged, we actually just want to fill the first cache item\n+    if (!m_wallet_descriptor.descriptor->IsRange()) {\n+        new_range_end = 1;\n+        m_wallet_descriptor.range_end = 1;\n+        m_wallet_descriptor.range_start = 0;\n+    }\n+\n+    FlatSigningProvider provider;\n+    provider.keys = GetKeys();\n+\n+    WalletBatch batch(m_storage.GetDatabase());\n+    uint256 id = GetID();\n+    for (int32_t i = m_max_cached_index + 1; i < new_range_end; ++i) {\n+        FlatSigningProvider out_keys;\n+        std::vector<CScript> scripts_temp;\n+        DescriptorCache temp_cache;\n+        // Maybe we have a cached xpub and we can expand from the cache first\n+        if (!m_wallet_descriptor.descriptor->ExpandFromCache(i, m_wallet_descriptor.cache, scripts_temp, out_keys)) {\n+            if (!m_wallet_descriptor.descriptor->Expand(i, provider, scripts_temp, out_keys, &temp_cache)) return false;\n+        }\n+        // Add all of the scriptPubKeys to the scriptPubKey set\n+        for (const CScript& script : scripts_temp) {\n+            m_map_script_pub_keys[script] = i;\n+        }\n+        // Write the cache\n+        for (const auto& parent_xpub_pair : temp_cache.GetCachedParentExtPubKeys()) {\n+            CExtPubKey xpub;\n+            if (m_wallet_descriptor.cache.GetCachedParentExtPubKey(parent_xpub_pair.first, xpub)) {\n+                if (xpub != parent_xpub_pair.second) {\n+                    throw std::runtime_error(std::string(__func__) + \": New cached parent xpub does not match already cached parent xpub\");\n+                }\n+                continue;\n+            }\n+            if (!batch.WriteDescriptorParentCache(id, parent_xpub_pair.first, parent_xpub_pair.second)) {\n+                throw std::runtime_error(std::string(__func__) + \": writing cache item failed\");\n+            }\n+            m_wallet_descriptor.cache.CacheParentExtPubKey(parent_xpub_pair.first, parent_xpub_pair.second);\n+        }\n+        for (const auto& derived_xpub_map_pair : temp_cache.GetCachedDerivedExtPubKeys()) {\n+            for (const auto& derived_xpub_pair : derived_xpub_map_pair.second) {\n+                CExtPubKey xpub;\n+                if (m_wallet_descriptor.cache.GetCachedDerivedExtPubKey(derived_xpub_map_pair.first, derived_xpub_pair.first, xpub)) {\n+                    if (xpub != derived_xpub_pair.second) {\n+                        throw std::runtime_error(std::string(__func__) + \": New cached derived xpub does not match already cached derived xpub\");\n+                    }\n+                    continue;\n+                }\n+                if (!batch.WriteDescriptorDerivedCache(id, derived_xpub_map_pair.first, derived_xpub_pair.first, derived_xpub_pair.second)) {\n+                    throw std::runtime_error(std::string(__func__) + \": writing cache item failed\");\n+                }\n+                m_wallet_descriptor.cache.CacheDerivedExtPubKey(derived_xpub_map_pair.first, derived_xpub_pair.first, derived_xpub_pair.second);\n+            }\n+        }\n+        m_max_cached_index++;\n+    }\n+    m_wallet_descriptor.range_end = new_range_end;\n+    batch.WriteDescriptor(GetID(), m_wallet_descriptor);\n+\n+    // By this point, the cache size should be the size of the entire range\n+    assert(m_wallet_descriptor.range_end - 1 == m_max_cached_index);\n+\n+    NotifyCanGetAddressesChanged();\n+    return true;\n+}\n+\n+void DescriptorScriptPubKeyMan::MarkUnusedAddresses(const CScript& script)\n+{\n+    LOCK(cs_desc_man);\n+    if (IsMine(script)) {\n+        int32_t index = m_map_script_pub_keys[script];\n+        if (index >= m_wallet_descriptor.next_index) {\n+            WalletLogPrintf(\"%s: Detected a used keypool item at index %d, mark all keypool items up to this item as used\\n\", __func__, index);\n+            m_wallet_descriptor.next_index = index + 1;\n+        }\n+        if (!TopUp()) {\n+            WalletLogPrintf(\"%s: Topping up keypool failed (locked wallet)\\n\", __func__);\n+        }\n+    }\n+}\n+\n+void DescriptorScriptPubKeyMan::AddDescriptorKey(const CKey& key, const CPubKey &pubkey)\n+{\n+    LOCK(cs_desc_man);\n+    WalletBatch batch(m_storage.GetDatabase());\n+    if (!AddDescriptorKeyWithDB(batch, key, pubkey)) {\n+        throw std::runtime_error(std::string(__func__) + \": writing descriptor private key failed\");\n+    }\n+}\n+\n+bool DescriptorScriptPubKeyMan::AddDescriptorKeyWithDB(WalletBatch& batch, const CKey& key, const CPubKey &pubkey)\n+{\n+    AssertLockHeld(cs_desc_man);\n+    assert(!m_storage.IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS));\n+\n+    if (m_storage.HasEncryptionKeys()) {\n+        if (m_storage.IsLocked()) {\n+            return false;\n+        }\n+\n+        std::vector<unsigned char> crypted_secret;\n+        CKeyingMaterial secret(key.begin(), key.end());\n+        if (!EncryptSecret(m_storage.GetEncryptionKey(), secret, pubkey.GetHash(), crypted_secret)) {\n+            return false;\n+        }\n+\n+        m_map_crypted_keys[pubkey.GetID()] = make_pair(pubkey, crypted_secret);\n+        batch.WriteCryptedDescriptorKey(GetID(), pubkey, crypted_secret);\n+        return true;\n+    } else {\n+        m_map_keys[pubkey.GetID()] = key;\n+        return batch.WriteDescriptorKey(GetID(), pubkey, key.GetPrivKey());\n+    }\n+}\n+\n+bool DescriptorScriptPubKeyMan::SetupDescriptorGeneration(const CExtKey& master_key)\n+{\n+    LOCK(cs_desc_man);\n+    assert(m_storage.IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS));\n+\n+    // Ignore when there is already a descriptor\n+    if (m_wallet_descriptor.descriptor) {\n+        return false;\n+    }\n+\n+    int64_t creation_time = GetTime();\n+\n+    std::string xpub = EncodeExtPubKey(master_key.Neuter());\n+\n+    // Build descriptor string\n+    std::string desc_prefix;\n+    std::string desc_suffix = \"/*)\";\n+    switch (m_address_type) {\n+    case OutputType::LEGACY: {\n+        desc_prefix = \"pkh(\" + xpub + \"/44'\";\n+        break;\n+    }\n+    case OutputType::P2SH_SEGWIT: {\n+        desc_prefix = \"sh(wpkh(\" + xpub + \"/49'\";\n+        desc_suffix += \")\";\n+        break;\n+    }\n+    case OutputType::BECH32: {\n+        desc_prefix = \"wpkh(\" + xpub + \"/84'\";\n+        break;\n+    }\n+    default: assert(false);\n+    }\n+\n+    // Mainnet derives at 0', testnet and regtest derive at 1'\n+    if (Params().IsTestChain()) {\n+        desc_prefix += \"/1'\";\n+    } else {\n+        desc_prefix += \"/0'\";\n+    }\n+\n+    std::string internal_path = m_internal ? \"/1\" : \"/0\";\n+    std::string desc_str = desc_prefix + \"/0'\" + internal_path + desc_suffix;\n+\n+    // Make the descriptor\n+    FlatSigningProvider keys;\n+    std::string error;\n+    std::unique_ptr<Descriptor> desc = Parse(desc_str, keys, error, false);\n+    WalletDescriptor w_desc(std::move(desc), creation_time, 0, 0, 0);\n+    m_wallet_descriptor = w_desc;\n+\n+    // Store the master private key, and descriptor\n+    WalletBatch batch(m_storage.GetDatabase());\n+    if (!AddDescriptorKeyWithDB(batch, master_key.key, master_key.key.GetPubKey())) {\n+        throw std::runtime_error(std::string(__func__) + \": writing descriptor master rivate key failed\");\n+    }\n+    if (!batch.WriteDescriptor(GetID(), m_wallet_descriptor)) {\n+        throw std::runtime_error(std::string(__func__) + \": writing descriptor failed\");\n+    }\n+\n+    // TopUp\n+    TopUp();\n+\n+    m_storage.UnsetBlankWalletFlag(batch);\n+    return true;\n+}\n+\n+bool DescriptorScriptPubKeyMan::IsHDEnabled() const\n+{\n+    LOCK(cs_desc_man);\n+    return m_wallet_descriptor.descriptor->IsRange();\n+}\n+\n+bool DescriptorScriptPubKeyMan::CanGetAddresses(bool internal) const\n+{\n+    // We can only give out addresses from descriptors that are single type (not combo), ranged,\n+    // and either has cached keys or can generate more keys (ignoring encryption)\n+    LOCK(cs_desc_man);\n+    return m_wallet_descriptor.descriptor->IsSingleType() &&\n+           m_wallet_descriptor.descriptor->IsRange() &&\n+           (HavePrivateKeys() || m_wallet_descriptor.next_index < m_wallet_descriptor.range_end);\n+}\n+\n+bool DescriptorScriptPubKeyMan::HavePrivateKeys() const\n+{\n+    LOCK(cs_desc_man);\n+    return m_map_keys.size() > 0 || m_map_crypted_keys.size() > 0;\n+}\n+\n+int64_t DescriptorScriptPubKeyMan::GetOldestKeyPoolTime() const\n+{\n+    return 0;\n+}\n+\n+size_t DescriptorScriptPubKeyMan::KeypoolCountExternalKeys() const\n+{\n+    if (m_internal) {\n+        return 0;\n+    }\n+    return GetKeyPoolSize();\n+}\n+\n+unsigned int DescriptorScriptPubKeyMan::GetKeyPoolSize() const\n+{\n+    LOCK(cs_desc_man);\n+    return m_wallet_descriptor.range_end - m_wallet_descriptor.next_index;\n+}\n+\n+int64_t DescriptorScriptPubKeyMan::GetTimeFirstKey() const\n+{\n+    LOCK(cs_desc_man);\n+    return m_wallet_descriptor.creation_time;\n+}\n+\n+std::unique_ptr<FlatSigningProvider> DescriptorScriptPubKeyMan::GetSigningProvider(const CScript& script, bool include_private) const\n+{\n+    LOCK(cs_desc_man);\n+\n+    // Find the index of the script\n+    auto it = m_map_script_pub_keys.find(script);\n+    if (it == m_map_script_pub_keys.end()) {\n+        return nullptr;\n+    }\n+    int32_t index = it->second;\n+\n+    // Get the scripts, keys, and key origins for this script\n+    std::unique_ptr<FlatSigningProvider> out_keys = MakeUnique<FlatSigningProvider>();\n+    std::vector<CScript> scripts_temp;\n+    if (!m_wallet_descriptor.descriptor->ExpandFromCache(index, m_wallet_descriptor.cache, scripts_temp, *out_keys)) return nullptr;\n+\n+    if (include_private) {\n+        FlatSigningProvider master_provider;\n+        master_provider.keys = GetKeys();\n+        bool expanded = m_wallet_descriptor.descriptor->ExpandPrivate(index, master_provider, *out_keys);\n+        assert(expanded);\n+    }\n+\n+    return out_keys;\n+}\n+\n+std::unique_ptr<SigningProvider> DescriptorScriptPubKeyMan::GetSolvingProvider(const CScript& script) const\n+{\n+    return GetSigningProvider(script, false);\n+}\n+\n+bool DescriptorScriptPubKeyMan::CanProvide(const CScript& script, SignatureData& sigdata)\n+{\n+    return IsMine(script);\n+}\n+\n+bool DescriptorScriptPubKeyMan::SignTransaction(CMutableTransaction& tx, const std::map<COutPoint, Coin>& coins, int sighash, std::map<int, std::string>& input_errors) const\n+{\n+    std::unique_ptr<FlatSigningProvider> keys = MakeUnique<FlatSigningProvider>();\n+    for (const auto& coin_pair : coins) {\n+        std::unique_ptr<FlatSigningProvider> coin_keys = std::move(GetSigningProvider(coin_pair.second.out.scriptPubKey, true));\n+        if (!coin_keys) {\n+            continue;\n+        }\n+        *keys = Merge(*keys, *coin_keys);\n+    }\n+\n+    return ::SignTransaction(tx, keys.get(), coins, sighash, input_errors);\n+}\n+\n+SigningResult DescriptorScriptPubKeyMan::SignMessage(const std::string& message, const PKHash& pkhash, std::string& str_sig) const\n+{\n+    std::unique_ptr<FlatSigningProvider> keys = std::move(GetSigningProvider(GetScriptForDestination(pkhash), true));\n+    if (!keys) {\n+        return SigningResult::PRIVATE_KEY_NOT_AVAILABLE;\n+    }\n+\n+    CKeyID key_id(pkhash);\n+    CKey key;\n+    if (!keys->GetKey(key_id, key)) {\n+        return SigningResult::PRIVATE_KEY_NOT_AVAILABLE;\n+    }\n+\n+    if (!MessageSign(key, message, str_sig)) {\n+        return SigningResult::SIGNING_FAILED;\n+    }\n+    return SigningResult::OK;\n+}\n+\n+TransactionError DescriptorScriptPubKeyMan::FillPSBT(PartiallySignedTransaction& psbtx, int sighash_type, bool sign, bool bip32derivs) const\n+{\n+    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+        const CTxIn& txin = psbtx.tx->vin[i];\n+        PSBTInput& input = psbtx.inputs.at(i);\n+\n+        if (PSBTInputSigned(input)) {\n+            continue;\n+        }\n+\n+        // Verify input looks sane. This will check that we have at most one uxto, witness or non-witness.\n+        if (!input.IsSane()) {\n+            return TransactionError::INVALID_PSBT;\n+        }\n+\n+        // Get the Sighash type\n+        if (sign && input.sighash_type > 0 && input.sighash_type != sighash_type) {\n+            return TransactionError::SIGHASH_MISMATCH;\n+        }\n+\n+        // Get the scriptPubKey to know which SigningProvider to use\n+        CScript script;\n+        if (!input.witness_utxo.IsNull()) {\n+            script = input.witness_utxo.scriptPubKey;\n+        } else if (input.non_witness_utxo) {\n+            if (txin.prevout.n >= input.non_witness_utxo->vout.size()) {\n+                return TransactionError::MISSING_INPUTS;\n+            }\n+            script = input.non_witness_utxo->vout[txin.prevout.n].scriptPubKey;\n+        } else {\n+            // There's no UTXO so we can just skip this now\n+            continue;\n+        }\n+        SignatureData sigdata;\n+        input.FillSignatureData(sigdata);\n+\n+        std::unique_ptr<FlatSigningProvider> keys = GetSigningProvider(script, true);",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 555,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "f2c3e36479d6265b60d7d1682c704f9302a7457c",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think the boolean arg should be `sign` to avoid the assertion failure mentioned by @Sjors ",
      "created_at": "2020-03-31T13:37:11Z",
      "updated_at": "2020-04-23T18:00:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r400919253",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/400919253"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1992,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401170132",
      "pull_request_review_id": 385050375,
      "id": 401170132,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE3MDEzMg==",
      "diff_hunk": "@@ -740,22 +747,31 @@ bool CWallet::IsSpentKey(const uint256& hash, unsigned int n) const\n     const CWalletTx* srctx = GetWalletTx(hash);\n     if (srctx) {\n         assert(srctx->tx->vout.size() > n);\n-        LegacyScriptPubKeyMan* spk_man = GetLegacyScriptPubKeyMan();\n-        // When descriptor wallets arrive, these additional checks are\n-        // likely superfluous and can be optimized out\n-        assert(spk_man != nullptr);\n-        for (const auto& keyid : GetAffectedKeys(srctx->tx->vout[n].scriptPubKey, *spk_man)) {\n-            WitnessV0KeyHash wpkh_dest(keyid);\n-            if (GetDestData(wpkh_dest, \"used\", nullptr)) {\n-                return true;\n-            }\n-            ScriptHash sh_wpkh_dest(GetScriptForDestination(wpkh_dest));\n-            if (GetDestData(sh_wpkh_dest, \"used\", nullptr)) {\n-                return true;\n-            }\n-            PKHash pkh_dest(keyid);\n-            if (GetDestData(pkh_dest, \"used\", nullptr)) {\n-                return true;\n+        CTxDestination dest;\n+        if (!ExtractDestination(srctx->tx->vout[n].scriptPubKey, dest)) {\n+            return false;\n+        }\n+        if (GetDestData(dest, \"used\", nullptr)) {\n+            return true;\n+        }\n+        if (IsLegacy()) {\n+            LegacyScriptPubKeyMan* spk_man = GetLegacyScriptPubKeyMan();\n+            // When descriptor wallets arrive, these additional checks are",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 62,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "3da39d72a8b8919ad57693cad71c993d1e115463",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "out of date comment",
      "created_at": "2020-03-31T19:45:28Z",
      "updated_at": "2020-04-23T18:00:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r401170132",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401170132"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 759,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401170437",
      "pull_request_review_id": 385050765,
      "id": 401170437,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE3MDQzNw==",
      "diff_hunk": "@@ -1913,7 +1913,16 @@ bool DescriptorScriptPubKeyMan::CanProvide(const CScript& script, SignatureData&\n \n bool DescriptorScriptPubKeyMan::SignTransaction(CMutableTransaction& tx, const std::map<COutPoint, Coin>& coins, int sighash, std::map<int, std::string>& input_errors) const\n {\n-    return false;\n+    std::unique_ptr<FlatSigningProvider> keys = MakeUnique<FlatSigningProvider>();\n+    for (const auto& coin_pair : coins) {\n+        std::unique_ptr<FlatSigningProvider> coin_keys = std::move(GetSigningProvider(coin_pair.second.out.scriptPubKey, true));",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 7,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "3f5e0bfc5dc2ea37223c1e5820c66a5ce11d6b81",
      "in_reply_to_id": 400833941,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "IIRC gcc used to complain about this. But it seems not anymore, so I've removed these too.",
      "created_at": "2020-03-31T19:46:03Z",
      "updated_at": "2020-04-23T18:00:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r401170437",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401170437"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1918,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401170491",
      "pull_request_review_id": 385050818,
      "id": 401170491,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE3MDQ5MQ==",
      "diff_hunk": "@@ -1497,3 +1493,622 @@ std::set<CKeyID> LegacyScriptPubKeyMan::GetKeys() const\n     }\n     return set_address;\n }\n+\n+void LegacyScriptPubKeyMan::SetType(OutputType type, bool internal) {}\n+\n+bool DescriptorScriptPubKeyMan::GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error)\n+{\n+    // Returns true if this descriptor supports getting new addresses. Conditions where we may be unable to fetch them (e.g. locked) are caught later\n+    if (!CanGetAddresses(m_internal)) {\n+        error = \"No addresses available\";\n+        return false;\n+    }\n+    {\n+        LOCK(cs_desc_man);\n+        assert(m_wallet_descriptor.descriptor->IsSingleType()); // This is a combo descriptor which should not be an active descriptor\n+        if (type != m_address_type) {\n+            throw std::runtime_error(std::string(__func__) + \": Types are inconsistent\");\n+        }\n+\n+        TopUp();\n+\n+        // Get the scriptPubKey from the descriptor\n+        FlatSigningProvider out_keys;\n+        std::vector<CScript> scripts_temp;\n+        if (m_wallet_descriptor.range_end <= m_max_cached_index && !TopUp(1)) {\n+            // We can't generate anymore keys\n+            error = \"Error: Keypool ran out, please call keypoolrefill first\";\n+            return false;\n+        }\n+        if (!m_wallet_descriptor.descriptor->ExpandFromCache(m_wallet_descriptor.next_index, m_wallet_descriptor.cache, scripts_temp, out_keys)) {\n+            // We can't generate anymore keys\n+            error = \"Error: Keypool ran out, please call keypoolrefill first\";\n+            return false;\n+        }\n+\n+        Optional<OutputType> out_script_type = m_wallet_descriptor.descriptor->GetOutputType();\n+        if (out_script_type && out_script_type == type) {\n+            ExtractDestination(scripts_temp[0], dest);\n+        } else {\n+            throw std::runtime_error(std::string(__func__) + \": Types are inconsistent. Stored type does not match type of newly generated address\");\n+        }\n+        m_wallet_descriptor.next_index++;\n+        WalletBatch(m_storage.GetDatabase()).WriteDescriptor(GetID(), m_wallet_descriptor);\n+        return true;\n+    }\n+}\n+\n+isminetype DescriptorScriptPubKeyMan::IsMine(const CScript& script) const\n+{\n+    LOCK(cs_desc_man);\n+    if (m_map_script_pub_keys.count(script) > 0) {\n+        return ISMINE_SPENDABLE;\n+    }\n+    return ISMINE_NO;\n+}\n+\n+bool DescriptorScriptPubKeyMan::CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys)\n+{\n+    {\n+        LOCK(cs_desc_man);\n+        if (!m_map_keys.empty())\n+            return false;\n+\n+        bool keyPass = m_map_crypted_keys.empty(); // Always pass when there are no encrypted keys\n+        bool keyFail = false;\n+        CryptedKeyMap::const_iterator mi = m_map_crypted_keys.begin();\n+        for (; mi != m_map_crypted_keys.end(); ++mi)\n+        {\n+            const CPubKey &pubkey = (*mi).second.first;\n+            const std::vector<unsigned char> &crypted_secret = (*mi).second.second;\n+            CKey key;\n+            if (!DecryptKey(master_key, crypted_secret, pubkey, key))\n+            {\n+                keyFail = true;\n+                break;\n+            }\n+            keyPass = true;\n+            if (m_decryption_thoroughly_checked)\n+                break;\n+        }\n+        if (keyPass && keyFail)\n+        {\n+            LogPrintf(\"The wallet is probably corrupted: Some keys decrypt but not all.\\n\");\n+            throw std::runtime_error(\"Error unlocking wallet: some keys decrypt but not all. Your wallet file may be corrupt.\");\n+        }\n+        if (keyFail || (!keyPass && !accept_no_keys))\n+            return false;\n+        m_decryption_thoroughly_checked = true;\n+    }\n+    return true;\n+}\n+\n+bool DescriptorScriptPubKeyMan::Encrypt(const CKeyingMaterial& master_key, WalletBatch* batch)\n+{\n+    LOCK(cs_desc_man);\n+    if (!m_map_crypted_keys.empty()) {\n+        return false;\n+    }\n+\n+    for (const KeyMap::value_type& key_in : m_map_keys)\n+    {\n+        const CKey &key = key_in.second;\n+        CPubKey pubkey = key.GetPubKey();\n+        CKeyingMaterial secret(key.begin(), key.end());\n+        std::vector<unsigned char> crypted_secret;\n+        if (!EncryptSecret(master_key, secret, pubkey.GetHash(), crypted_secret)) {\n+            return false;\n+        }\n+        m_map_crypted_keys[pubkey.GetID()] = make_pair(pubkey, crypted_secret);\n+        batch->WriteCryptedDescriptorKey(GetID(), pubkey, crypted_secret);\n+    }\n+    m_map_keys.clear();\n+    return true;\n+}\n+\n+bool DescriptorScriptPubKeyMan::GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool)\n+{\n+    LOCK(cs_desc_man);\n+    std::string error;\n+    bool result = GetNewDestination(type, address, error);\n+    index = m_wallet_descriptor.next_index - 1;\n+    return result;\n+}\n+\n+void DescriptorScriptPubKeyMan::ReturnDestination(int64_t index, bool internal, const CTxDestination& addr)\n+{\n+    LOCK(cs_desc_man);\n+    // Only return when the index was the most recent\n+    if (m_wallet_descriptor.next_index - 1 == index) {\n+        m_wallet_descriptor.next_index--;\n+    }\n+    WalletBatch(m_storage.GetDatabase()).WriteDescriptor(GetID(), m_wallet_descriptor);\n+    NotifyCanGetAddressesChanged();\n+}\n+\n+std::map<CKeyID, CKey> DescriptorScriptPubKeyMan::GetKeys() const\n+{\n+    AssertLockHeld(cs_desc_man);\n+    if (m_storage.HasEncryptionKeys() && !m_storage.IsLocked()) {\n+        KeyMap keys;\n+        for (auto key_pair : m_map_crypted_keys) {\n+            const CPubKey& pubkey = key_pair.second.first;\n+            const std::vector<unsigned char>& crypted_secret = key_pair.second.second;\n+            CKey key;\n+            DecryptKey(m_storage.GetEncryptionKey(), crypted_secret, pubkey, key);\n+            keys[pubkey.GetID()] = key;\n+        }\n+        return keys;\n+    }\n+    return m_map_keys;\n+}\n+\n+bool DescriptorScriptPubKeyMan::TopUp(unsigned int size)\n+{\n+    LOCK(cs_desc_man);\n+    unsigned int target_size;\n+    if (size > 0) {\n+        target_size = size;\n+    } else {\n+        target_size = std::max(gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 1);\n+    }\n+\n+    // Calculate the new range_end\n+    int32_t new_range_end = std::max(m_wallet_descriptor.next_index + (int32_t)target_size, m_wallet_descriptor.range_end);\n+\n+    // If the descriptor is not ranged, we actually just want to fill the first cache item\n+    if (!m_wallet_descriptor.descriptor->IsRange()) {\n+        new_range_end = 1;\n+        m_wallet_descriptor.range_end = 1;\n+        m_wallet_descriptor.range_start = 0;\n+    }\n+\n+    FlatSigningProvider provider;\n+    provider.keys = GetKeys();\n+\n+    WalletBatch batch(m_storage.GetDatabase());\n+    uint256 id = GetID();\n+    for (int32_t i = m_max_cached_index + 1; i < new_range_end; ++i) {\n+        FlatSigningProvider out_keys;\n+        std::vector<CScript> scripts_temp;\n+        DescriptorCache temp_cache;\n+        // Maybe we have a cached xpub and we can expand from the cache first\n+        if (!m_wallet_descriptor.descriptor->ExpandFromCache(i, m_wallet_descriptor.cache, scripts_temp, out_keys)) {\n+            if (!m_wallet_descriptor.descriptor->Expand(i, provider, scripts_temp, out_keys, &temp_cache)) return false;\n+        }\n+        // Add all of the scriptPubKeys to the scriptPubKey set\n+        for (const CScript& script : scripts_temp) {\n+            m_map_script_pub_keys[script] = i;\n+        }\n+        // Write the cache\n+        for (const auto& parent_xpub_pair : temp_cache.GetCachedParentExtPubKeys()) {\n+            CExtPubKey xpub;\n+            if (m_wallet_descriptor.cache.GetCachedParentExtPubKey(parent_xpub_pair.first, xpub)) {\n+                if (xpub != parent_xpub_pair.second) {\n+                    throw std::runtime_error(std::string(__func__) + \": New cached parent xpub does not match already cached parent xpub\");\n+                }\n+                continue;\n+            }\n+            if (!batch.WriteDescriptorParentCache(id, parent_xpub_pair.first, parent_xpub_pair.second)) {\n+                throw std::runtime_error(std::string(__func__) + \": writing cache item failed\");\n+            }\n+            m_wallet_descriptor.cache.CacheParentExtPubKey(parent_xpub_pair.first, parent_xpub_pair.second);\n+        }\n+        for (const auto& derived_xpub_map_pair : temp_cache.GetCachedDerivedExtPubKeys()) {\n+            for (const auto& derived_xpub_pair : derived_xpub_map_pair.second) {\n+                CExtPubKey xpub;\n+                if (m_wallet_descriptor.cache.GetCachedDerivedExtPubKey(derived_xpub_map_pair.first, derived_xpub_pair.first, xpub)) {\n+                    if (xpub != derived_xpub_pair.second) {\n+                        throw std::runtime_error(std::string(__func__) + \": New cached derived xpub does not match already cached derived xpub\");\n+                    }\n+                    continue;\n+                }\n+                if (!batch.WriteDescriptorDerivedCache(id, derived_xpub_map_pair.first, derived_xpub_pair.first, derived_xpub_pair.second)) {\n+                    throw std::runtime_error(std::string(__func__) + \": writing cache item failed\");\n+                }\n+                m_wallet_descriptor.cache.CacheDerivedExtPubKey(derived_xpub_map_pair.first, derived_xpub_pair.first, derived_xpub_pair.second);\n+            }\n+        }\n+        m_max_cached_index++;\n+    }\n+    m_wallet_descriptor.range_end = new_range_end;\n+    batch.WriteDescriptor(GetID(), m_wallet_descriptor);\n+\n+    // By this point, the cache size should be the size of the entire range\n+    assert(m_wallet_descriptor.range_end - 1 == m_max_cached_index);\n+\n+    NotifyCanGetAddressesChanged();\n+    return true;\n+}\n+\n+void DescriptorScriptPubKeyMan::MarkUnusedAddresses(const CScript& script)\n+{\n+    LOCK(cs_desc_man);\n+    if (IsMine(script)) {\n+        int32_t index = m_map_script_pub_keys[script];\n+        if (index >= m_wallet_descriptor.next_index) {\n+            WalletLogPrintf(\"%s: Detected a used keypool item at index %d, mark all keypool items up to this item as used\\n\", __func__, index);\n+            m_wallet_descriptor.next_index = index + 1;\n+        }\n+        if (!TopUp()) {\n+            WalletLogPrintf(\"%s: Topping up keypool failed (locked wallet)\\n\", __func__);\n+        }\n+    }\n+}\n+\n+void DescriptorScriptPubKeyMan::AddDescriptorKey(const CKey& key, const CPubKey &pubkey)\n+{\n+    LOCK(cs_desc_man);\n+    WalletBatch batch(m_storage.GetDatabase());\n+    if (!AddDescriptorKeyWithDB(batch, key, pubkey)) {\n+        throw std::runtime_error(std::string(__func__) + \": writing descriptor private key failed\");\n+    }\n+}\n+\n+bool DescriptorScriptPubKeyMan::AddDescriptorKeyWithDB(WalletBatch& batch, const CKey& key, const CPubKey &pubkey)\n+{\n+    AssertLockHeld(cs_desc_man);\n+    assert(!m_storage.IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS));\n+\n+    if (m_storage.HasEncryptionKeys()) {\n+        if (m_storage.IsLocked()) {\n+            return false;\n+        }\n+\n+        std::vector<unsigned char> crypted_secret;\n+        CKeyingMaterial secret(key.begin(), key.end());\n+        if (!EncryptSecret(m_storage.GetEncryptionKey(), secret, pubkey.GetHash(), crypted_secret)) {\n+            return false;\n+        }\n+\n+        m_map_crypted_keys[pubkey.GetID()] = make_pair(pubkey, crypted_secret);\n+        batch.WriteCryptedDescriptorKey(GetID(), pubkey, crypted_secret);\n+        return true;\n+    } else {\n+        m_map_keys[pubkey.GetID()] = key;\n+        return batch.WriteDescriptorKey(GetID(), pubkey, key.GetPrivKey());\n+    }\n+}\n+\n+bool DescriptorScriptPubKeyMan::SetupDescriptorGeneration(const CExtKey& master_key)\n+{\n+    LOCK(cs_desc_man);\n+    assert(m_storage.IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS));\n+\n+    // Ignore when there is already a descriptor\n+    if (m_wallet_descriptor.descriptor) {\n+        return false;\n+    }\n+\n+    int64_t creation_time = GetTime();\n+\n+    std::string xpub = EncodeExtPubKey(master_key.Neuter());\n+\n+    // Build descriptor string\n+    std::string desc_prefix;\n+    std::string desc_suffix = \"/*)\";\n+    switch (m_address_type) {\n+    case OutputType::LEGACY: {\n+        desc_prefix = \"pkh(\" + xpub + \"/44'\";\n+        break;\n+    }\n+    case OutputType::P2SH_SEGWIT: {\n+        desc_prefix = \"sh(wpkh(\" + xpub + \"/49'\";\n+        desc_suffix += \")\";\n+        break;\n+    }\n+    case OutputType::BECH32: {\n+        desc_prefix = \"wpkh(\" + xpub + \"/84'\";\n+        break;\n+    }\n+    default: assert(false);\n+    }\n+\n+    // Mainnet derives at 0', testnet and regtest derive at 1'\n+    if (Params().IsTestChain()) {\n+        desc_prefix += \"/1'\";\n+    } else {\n+        desc_prefix += \"/0'\";\n+    }\n+\n+    std::string internal_path = m_internal ? \"/1\" : \"/0\";\n+    std::string desc_str = desc_prefix + \"/0'\" + internal_path + desc_suffix;\n+\n+    // Make the descriptor\n+    FlatSigningProvider keys;\n+    std::string error;\n+    std::unique_ptr<Descriptor> desc = Parse(desc_str, keys, error, false);\n+    WalletDescriptor w_desc(std::move(desc), creation_time, 0, 0, 0);\n+    m_wallet_descriptor = w_desc;\n+\n+    // Store the master private key, and descriptor\n+    WalletBatch batch(m_storage.GetDatabase());\n+    if (!AddDescriptorKeyWithDB(batch, master_key.key, master_key.key.GetPubKey())) {\n+        throw std::runtime_error(std::string(__func__) + \": writing descriptor master rivate key failed\");\n+    }\n+    if (!batch.WriteDescriptor(GetID(), m_wallet_descriptor)) {\n+        throw std::runtime_error(std::string(__func__) + \": writing descriptor failed\");\n+    }\n+\n+    // TopUp\n+    TopUp();\n+\n+    m_storage.UnsetBlankWalletFlag(batch);\n+    return true;\n+}\n+\n+bool DescriptorScriptPubKeyMan::IsHDEnabled() const\n+{\n+    LOCK(cs_desc_man);\n+    return m_wallet_descriptor.descriptor->IsRange();\n+}\n+\n+bool DescriptorScriptPubKeyMan::CanGetAddresses(bool internal) const\n+{\n+    // We can only give out addresses from descriptors that are single type (not combo), ranged,\n+    // and either has cached keys or can generate more keys (ignoring encryption)\n+    LOCK(cs_desc_man);\n+    return m_wallet_descriptor.descriptor->IsSingleType() &&\n+           m_wallet_descriptor.descriptor->IsRange() &&\n+           (HavePrivateKeys() || m_wallet_descriptor.next_index < m_wallet_descriptor.range_end);\n+}\n+\n+bool DescriptorScriptPubKeyMan::HavePrivateKeys() const\n+{\n+    LOCK(cs_desc_man);\n+    return m_map_keys.size() > 0 || m_map_crypted_keys.size() > 0;\n+}\n+\n+int64_t DescriptorScriptPubKeyMan::GetOldestKeyPoolTime() const\n+{\n+    return 0;\n+}\n+\n+size_t DescriptorScriptPubKeyMan::KeypoolCountExternalKeys() const\n+{\n+    if (m_internal) {\n+        return 0;\n+    }\n+    return GetKeyPoolSize();\n+}\n+\n+unsigned int DescriptorScriptPubKeyMan::GetKeyPoolSize() const\n+{\n+    LOCK(cs_desc_man);\n+    return m_wallet_descriptor.range_end - m_wallet_descriptor.next_index;\n+}\n+\n+int64_t DescriptorScriptPubKeyMan::GetTimeFirstKey() const\n+{\n+    LOCK(cs_desc_man);\n+    return m_wallet_descriptor.creation_time;\n+}\n+\n+std::unique_ptr<FlatSigningProvider> DescriptorScriptPubKeyMan::GetSigningProvider(const CScript& script, bool include_private) const\n+{\n+    LOCK(cs_desc_man);\n+\n+    // Find the index of the script\n+    auto it = m_map_script_pub_keys.find(script);\n+    if (it == m_map_script_pub_keys.end()) {\n+        return nullptr;\n+    }\n+    int32_t index = it->second;\n+\n+    // Get the scripts, keys, and key origins for this script\n+    std::unique_ptr<FlatSigningProvider> out_keys = MakeUnique<FlatSigningProvider>();\n+    std::vector<CScript> scripts_temp;\n+    if (!m_wallet_descriptor.descriptor->ExpandFromCache(index, m_wallet_descriptor.cache, scripts_temp, *out_keys)) return nullptr;\n+\n+    if (include_private) {\n+        FlatSigningProvider master_provider;\n+        master_provider.keys = GetKeys();\n+        bool expanded = m_wallet_descriptor.descriptor->ExpandPrivate(index, master_provider, *out_keys);\n+        assert(expanded);\n+    }\n+\n+    return out_keys;\n+}\n+\n+std::unique_ptr<SigningProvider> DescriptorScriptPubKeyMan::GetSolvingProvider(const CScript& script) const\n+{\n+    return GetSigningProvider(script, false);\n+}\n+\n+bool DescriptorScriptPubKeyMan::CanProvide(const CScript& script, SignatureData& sigdata)\n+{\n+    return IsMine(script);\n+}\n+\n+bool DescriptorScriptPubKeyMan::SignTransaction(CMutableTransaction& tx, const std::map<COutPoint, Coin>& coins, int sighash, std::map<int, std::string>& input_errors) const\n+{\n+    std::unique_ptr<FlatSigningProvider> keys = MakeUnique<FlatSigningProvider>();\n+    for (const auto& coin_pair : coins) {\n+        std::unique_ptr<FlatSigningProvider> coin_keys = std::move(GetSigningProvider(coin_pair.second.out.scriptPubKey, true));\n+        if (!coin_keys) {\n+            continue;\n+        }\n+        *keys = Merge(*keys, *coin_keys);\n+    }\n+\n+    return ::SignTransaction(tx, keys.get(), coins, sighash, input_errors);\n+}\n+\n+SigningResult DescriptorScriptPubKeyMan::SignMessage(const std::string& message, const PKHash& pkhash, std::string& str_sig) const\n+{\n+    std::unique_ptr<FlatSigningProvider> keys = std::move(GetSigningProvider(GetScriptForDestination(pkhash), true));\n+    if (!keys) {\n+        return SigningResult::PRIVATE_KEY_NOT_AVAILABLE;\n+    }\n+\n+    CKeyID key_id(pkhash);\n+    CKey key;\n+    if (!keys->GetKey(key_id, key)) {\n+        return SigningResult::PRIVATE_KEY_NOT_AVAILABLE;\n+    }\n+\n+    if (!MessageSign(key, message, str_sig)) {\n+        return SigningResult::SIGNING_FAILED;\n+    }\n+    return SigningResult::OK;\n+}\n+\n+TransactionError DescriptorScriptPubKeyMan::FillPSBT(PartiallySignedTransaction& psbtx, int sighash_type, bool sign, bool bip32derivs) const\n+{\n+    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+        const CTxIn& txin = psbtx.tx->vin[i];\n+        PSBTInput& input = psbtx.inputs.at(i);\n+\n+        if (PSBTInputSigned(input)) {\n+            continue;\n+        }\n+\n+        // Verify input looks sane. This will check that we have at most one uxto, witness or non-witness.\n+        if (!input.IsSane()) {\n+            return TransactionError::INVALID_PSBT;\n+        }\n+\n+        // Get the Sighash type\n+        if (sign && input.sighash_type > 0 && input.sighash_type != sighash_type) {\n+            return TransactionError::SIGHASH_MISMATCH;\n+        }\n+\n+        // Get the scriptPubKey to know which SigningProvider to use\n+        CScript script;\n+        if (!input.witness_utxo.IsNull()) {\n+            script = input.witness_utxo.scriptPubKey;\n+        } else if (input.non_witness_utxo) {\n+            if (txin.prevout.n >= input.non_witness_utxo->vout.size()) {\n+                return TransactionError::MISSING_INPUTS;\n+            }\n+            script = input.non_witness_utxo->vout[txin.prevout.n].scriptPubKey;\n+        } else {\n+            // There's no UTXO so we can just skip this now\n+            continue;\n+        }\n+        SignatureData sigdata;\n+        input.FillSignatureData(sigdata);\n+\n+        std::unique_ptr<FlatSigningProvider> keys = GetSigningProvider(script, true);",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 555,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "f2c3e36479d6265b60d7d1682c704f9302a7457c",
      "in_reply_to_id": 400919253,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-03-31T19:46:09Z",
      "updated_at": "2020-04-23T18:00:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r401170491",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401170491"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1992,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401187582",
      "pull_request_review_id": 385071488,
      "id": 401187582,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE4NzU4Mg==",
      "diff_hunk": "@@ -740,22 +747,31 @@ bool CWallet::IsSpentKey(const uint256& hash, unsigned int n) const\n     const CWalletTx* srctx = GetWalletTx(hash);\n     if (srctx) {\n         assert(srctx->tx->vout.size() > n);\n-        LegacyScriptPubKeyMan* spk_man = GetLegacyScriptPubKeyMan();\n-        // When descriptor wallets arrive, these additional checks are\n-        // likely superfluous and can be optimized out\n-        assert(spk_man != nullptr);\n-        for (const auto& keyid : GetAffectedKeys(srctx->tx->vout[n].scriptPubKey, *spk_man)) {\n-            WitnessV0KeyHash wpkh_dest(keyid);\n-            if (GetDestData(wpkh_dest, \"used\", nullptr)) {\n-                return true;\n-            }\n-            ScriptHash sh_wpkh_dest(GetScriptForDestination(wpkh_dest));\n-            if (GetDestData(sh_wpkh_dest, \"used\", nullptr)) {\n-                return true;\n-            }\n-            PKHash pkh_dest(keyid);\n-            if (GetDestData(pkh_dest, \"used\", nullptr)) {\n-                return true;\n+        CTxDestination dest;\n+        if (!ExtractDestination(srctx->tx->vout[n].scriptPubKey, dest)) {\n+            return false;\n+        }\n+        if (GetDestData(dest, \"used\", nullptr)) {\n+            return true;\n+        }\n+        if (IsLegacy()) {\n+            LegacyScriptPubKeyMan* spk_man = GetLegacyScriptPubKeyMan();\n+            // When descriptor wallets arrive, these additional checks are",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 62,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "3da39d72a8b8919ad57693cad71c993d1e115463",
      "in_reply_to_id": 401170132,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "removed",
      "created_at": "2020-03-31T20:16:40Z",
      "updated_at": "2020-04-23T18:00:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r401187582",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401187582"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 759,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401742484",
      "pull_request_review_id": 385745845,
      "id": 401742484,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc0MjQ4NA==",
      "diff_hunk": "@@ -1578,6 +1578,73 @@ bool DescriptorScriptPubKeyMan::AddDescriptorKeyWithDB(WalletBatch& batch, const\n     }\n }\n \n+bool DescriptorScriptPubKeyMan::SetupDescriptorGeneration(const CExtKey& master_key)\n+{\n+    LOCK(cs_desc_man);\n+    assert(m_storage.IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS));\n+\n+    // Ignore when there is already a descriptor\n+    if (m_wallet_descriptor.descriptor) {\n+        return false;\n+    }\n+\n+    int64_t creation_time = GetTime();\n+\n+    std::string xpub = EncodeExtPubKey(master_key.Neuter());\n+\n+    // Build descriptor string\n+    std::string desc_prefix;\n+    std::string desc_suffix = \"/*)\";\n+    switch (m_address_type) {\n+    case OutputType::LEGACY: {\n+        desc_prefix = \"pkh(\" + xpub + \"/44'\";\n+        break;\n+    }\n+    case OutputType::P2SH_SEGWIT: {\n+        desc_prefix = \"sh(wpkh(\" + xpub + \"/49'\";\n+        desc_suffix += \")\";\n+        break;\n+    }\n+    case OutputType::BECH32: {\n+        desc_prefix = \"wpkh(\" + xpub + \"/84'\";\n+        break;\n+    }\n+    default: assert(false);\n+    }\n+\n+    // Mainnet derives at 0', testnet and regtest derive at 1'\n+    if (Params().IsTestChain()) {\n+        desc_prefix += \"/1'\";\n+    } else {\n+        desc_prefix += \"/0'\";\n+    }\n+\n+    std::string internal_path = m_internal ? \"/1\" : \"/0\";\n+    std::string desc_str = desc_prefix + \"/0'\" + internal_path + desc_suffix;\n+\n+    // Make the descriptor\n+    FlatSigningProvider keys;\n+    std::string error;\n+    std::unique_ptr<Descriptor> desc = Parse(desc_str, keys, error, false);\n+    WalletDescriptor w_desc(std::move(desc), creation_time, 0, 0, 0);\n+    m_wallet_descriptor = w_desc;\n+\n+    // Store the master private key, and descriptor\n+    WalletBatch batch(m_storage.GetDatabase());\n+    if (!AddDescriptorKeyWithDB(batch, master_key.key, master_key.key.GetPubKey())) {\n+        throw std::runtime_error(std::string(__func__) + \": writing descriptor master rivate key failed\");",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 58,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "1dd95d7e91fb31ee97cff2aa0f1ccfd820e78e1e",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Nit 1dd95d7e91fb31ee97cff2aa0f1ccfd820e78e1e: missing p in \"master rivate key\"",
      "created_at": "2020-04-01T16:20:58Z",
      "updated_at": "2020-04-23T18:00:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r401742484",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401742484"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1635,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401744548",
      "pull_request_review_id": 385745845,
      "id": 401744548,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc0NDU0OA==",
      "diff_hunk": "@@ -1578,6 +1578,73 @@ bool DescriptorScriptPubKeyMan::AddDescriptorKeyWithDB(WalletBatch& batch, const\n     }\n }\n \n+bool DescriptorScriptPubKeyMan::SetupDescriptorGeneration(const CExtKey& master_key)\n+{\n+    LOCK(cs_desc_man);\n+    assert(m_storage.IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS));\n+\n+    // Ignore when there is already a descriptor\n+    if (m_wallet_descriptor.descriptor) {\n+        return false;\n+    }\n+\n+    int64_t creation_time = GetTime();\n+\n+    std::string xpub = EncodeExtPubKey(master_key.Neuter());\n+\n+    // Build descriptor string\n+    std::string desc_prefix;\n+    std::string desc_suffix = \"/*)\";\n+    switch (m_address_type) {\n+    case OutputType::LEGACY: {\n+        desc_prefix = \"pkh(\" + xpub + \"/44'\";\n+        break;\n+    }\n+    case OutputType::P2SH_SEGWIT: {\n+        desc_prefix = \"sh(wpkh(\" + xpub + \"/49'\";\n+        desc_suffix += \")\";\n+        break;\n+    }\n+    case OutputType::BECH32: {\n+        desc_prefix = \"wpkh(\" + xpub + \"/84'\";\n+        break;\n+    }\n+    default: assert(false);\n+    }\n+\n+    // Mainnet derives at 0', testnet and regtest derive at 1'\n+    if (Params().IsTestChain()) {\n+        desc_prefix += \"/1'\";\n+    } else {\n+        desc_prefix += \"/0'\";\n+    }\n+\n+    std::string internal_path = m_internal ? \"/1\" : \"/0\";\n+    std::string desc_str = desc_prefix + \"/0'\" + internal_path + desc_suffix;\n+\n+    // Make the descriptor\n+    FlatSigningProvider keys;\n+    std::string error;\n+    std::unique_ptr<Descriptor> desc = Parse(desc_str, keys, error, false);",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 358,
      "original_position": 51,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "1dd95d7e91fb31ee97cff2aa0f1ccfd820e78e1e",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 1dd95d7e91fb31ee97cff2aa0f1ccfd820e78e1e IIUC the descriptor is stored as `wpkh(xpub/84'/0'/0'/0/*)` which means it can only be expanded with the aid of the master private key. Why not expand the account level xpub(s), so you can store it as `wpkh([84'/0'/0']xpub/0/*)`?",
      "created_at": "2020-04-01T16:23:53Z",
      "updated_at": "2020-04-23T18:00:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r401744548",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401744548"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1828,
      "original_line": 1828,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401761133",
      "pull_request_review_id": 385768546,
      "id": 401761133,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc2MTEzMw==",
      "diff_hunk": "@@ -1578,6 +1578,73 @@ bool DescriptorScriptPubKeyMan::AddDescriptorKeyWithDB(WalletBatch& batch, const\n     }\n }\n \n+bool DescriptorScriptPubKeyMan::SetupDescriptorGeneration(const CExtKey& master_key)\n+{\n+    LOCK(cs_desc_man);\n+    assert(m_storage.IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS));\n+\n+    // Ignore when there is already a descriptor\n+    if (m_wallet_descriptor.descriptor) {\n+        return false;\n+    }\n+\n+    int64_t creation_time = GetTime();\n+\n+    std::string xpub = EncodeExtPubKey(master_key.Neuter());\n+\n+    // Build descriptor string\n+    std::string desc_prefix;\n+    std::string desc_suffix = \"/*)\";\n+    switch (m_address_type) {\n+    case OutputType::LEGACY: {\n+        desc_prefix = \"pkh(\" + xpub + \"/44'\";\n+        break;\n+    }\n+    case OutputType::P2SH_SEGWIT: {\n+        desc_prefix = \"sh(wpkh(\" + xpub + \"/49'\";\n+        desc_suffix += \")\";\n+        break;\n+    }\n+    case OutputType::BECH32: {\n+        desc_prefix = \"wpkh(\" + xpub + \"/84'\";\n+        break;\n+    }\n+    default: assert(false);\n+    }\n+\n+    // Mainnet derives at 0', testnet and regtest derive at 1'\n+    if (Params().IsTestChain()) {\n+        desc_prefix += \"/1'\";\n+    } else {\n+        desc_prefix += \"/0'\";\n+    }\n+\n+    std::string internal_path = m_internal ? \"/1\" : \"/0\";\n+    std::string desc_str = desc_prefix + \"/0'\" + internal_path + desc_suffix;\n+\n+    // Make the descriptor\n+    FlatSigningProvider keys;\n+    std::string error;\n+    std::unique_ptr<Descriptor> desc = Parse(desc_str, keys, error, false);",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 358,
      "original_position": 51,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "1dd95d7e91fb31ee97cff2aa0f1ccfd820e78e1e",
      "in_reply_to_id": 401744548,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "We would then have to store the private key at the account level too. With the xpub cache, this isn't a problem as it can always be expanded using the cached xpub.",
      "created_at": "2020-04-01T16:49:15Z",
      "updated_at": "2020-04-23T18:00:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r401761133",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401761133"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1828,
      "original_line": 1828,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401900296",
      "pull_request_review_id": 385938249,
      "id": 401900296,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTkwMDI5Ng==",
      "diff_hunk": "@@ -1578,6 +1578,73 @@ bool DescriptorScriptPubKeyMan::AddDescriptorKeyWithDB(WalletBatch& batch, const\n     }\n }\n \n+bool DescriptorScriptPubKeyMan::SetupDescriptorGeneration(const CExtKey& master_key)\n+{\n+    LOCK(cs_desc_man);\n+    assert(m_storage.IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS));\n+\n+    // Ignore when there is already a descriptor\n+    if (m_wallet_descriptor.descriptor) {\n+        return false;\n+    }\n+\n+    int64_t creation_time = GetTime();\n+\n+    std::string xpub = EncodeExtPubKey(master_key.Neuter());\n+\n+    // Build descriptor string\n+    std::string desc_prefix;\n+    std::string desc_suffix = \"/*)\";\n+    switch (m_address_type) {\n+    case OutputType::LEGACY: {\n+        desc_prefix = \"pkh(\" + xpub + \"/44'\";\n+        break;\n+    }\n+    case OutputType::P2SH_SEGWIT: {\n+        desc_prefix = \"sh(wpkh(\" + xpub + \"/49'\";\n+        desc_suffix += \")\";\n+        break;\n+    }\n+    case OutputType::BECH32: {\n+        desc_prefix = \"wpkh(\" + xpub + \"/84'\";\n+        break;\n+    }\n+    default: assert(false);\n+    }\n+\n+    // Mainnet derives at 0', testnet and regtest derive at 1'\n+    if (Params().IsTestChain()) {\n+        desc_prefix += \"/1'\";\n+    } else {\n+        desc_prefix += \"/0'\";\n+    }\n+\n+    std::string internal_path = m_internal ? \"/1\" : \"/0\";\n+    std::string desc_str = desc_prefix + \"/0'\" + internal_path + desc_suffix;\n+\n+    // Make the descriptor\n+    FlatSigningProvider keys;\n+    std::string error;\n+    std::unique_ptr<Descriptor> desc = Parse(desc_str, keys, error, false);\n+    WalletDescriptor w_desc(std::move(desc), creation_time, 0, 0, 0);\n+    m_wallet_descriptor = w_desc;\n+\n+    // Store the master private key, and descriptor\n+    WalletBatch batch(m_storage.GetDatabase());\n+    if (!AddDescriptorKeyWithDB(batch, master_key.key, master_key.key.GetPubKey())) {\n+        throw std::runtime_error(std::string(__func__) + \": writing descriptor master rivate key failed\");",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 58,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "1dd95d7e91fb31ee97cff2aa0f1ccfd820e78e1e",
      "in_reply_to_id": 401742484,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed",
      "created_at": "2020-04-01T20:49:05Z",
      "updated_at": "2020-04-23T18:00:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r401900296",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401900296"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1635,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/404076184",
      "pull_request_review_id": 388230497,
      "id": 404076184,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA3NjE4NA==",
      "diff_hunk": "@@ -1497,3 +1493,672 @@ std::set<CKeyID> LegacyScriptPubKeyMan::GetKeys() const\n     }\n     return set_address;\n }\n+\n+void LegacyScriptPubKeyMan::SetType(OutputType type, bool internal) {}\n+\n+bool DescriptorScriptPubKeyMan::GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error)\n+{\n+    // Returns true if this descriptor supports getting new addresses. Conditions where we may be unable to fetch them (e.g. locked) are caught later\n+    if (!CanGetAddresses(m_internal)) {\n+        error = \"No addresses available\";\n+        return false;\n+    }\n+    {\n+        LOCK(cs_desc_man);\n+        assert(m_wallet_descriptor.descriptor->IsSingleType()); // This is a combo descriptor which should not be an active descriptor\n+        if (type != m_address_type) {\n+            throw std::runtime_error(std::string(__func__) + \": Types are inconsistent\");\n+        }\n+\n+        TopUp();\n+\n+        // Get the scriptPubKey from the descriptor\n+        FlatSigningProvider out_keys;\n+        std::vector<CScript> scripts_temp;\n+        if (m_wallet_descriptor.range_end <= m_max_cached_index && !TopUp(1)) {\n+            // We can't generate anymore keys\n+            error = \"Error: Keypool ran out, please call keypoolrefill first\";\n+            return false;\n+        }\n+        if (!m_wallet_descriptor.descriptor->ExpandFromCache(m_wallet_descriptor.next_index, m_wallet_descriptor.cache, scripts_temp, out_keys)) {\n+            // We can't generate anymore keys\n+            error = \"Error: Keypool ran out, please call keypoolrefill first\";\n+            return false;\n+        }\n+\n+        Optional<OutputType> out_script_type = m_wallet_descriptor.descriptor->GetOutputType();\n+        if (out_script_type && out_script_type == type) {\n+            ExtractDestination(scripts_temp[0], dest);\n+        } else {\n+            throw std::runtime_error(std::string(__func__) + \": Types are inconsistent. Stored type does not match type of newly generated address\");\n+        }\n+        m_wallet_descriptor.next_index++;\n+        WalletBatch(m_storage.GetDatabase()).WriteDescriptor(GetID(), m_wallet_descriptor);\n+        return true;\n+    }\n+}\n+\n+isminetype DescriptorScriptPubKeyMan::IsMine(const CScript& script) const\n+{\n+    LOCK(cs_desc_man);\n+    if (m_map_script_pub_keys.count(script) > 0) {\n+        return ISMINE_SPENDABLE;\n+    }\n+    return ISMINE_NO;\n+}\n+\n+bool DescriptorScriptPubKeyMan::CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys)\n+{\n+    {\n+        LOCK(cs_desc_man);\n+        if (!m_map_keys.empty())\n+            return false;\n+\n+        bool keyPass = m_map_crypted_keys.empty(); // Always pass when there are no encrypted keys\n+        bool keyFail = false;\n+        CryptedKeyMap::const_iterator mi = m_map_crypted_keys.begin();\n+        for (; mi != m_map_crypted_keys.end(); ++mi)\n+        {\n+            const CPubKey &pubkey = (*mi).second.first;\n+            const std::vector<unsigned char> &crypted_secret = (*mi).second.second;\n+            CKey key;\n+            if (!DecryptKey(master_key, crypted_secret, pubkey, key))\n+            {\n+                keyFail = true;\n+                break;\n+            }\n+            keyPass = true;\n+            if (m_decryption_thoroughly_checked)\n+                break;\n+        }\n+        if (keyPass && keyFail)\n+        {\n+            LogPrintf(\"The wallet is probably corrupted: Some keys decrypt but not all.\\n\");\n+            throw std::runtime_error(\"Error unlocking wallet: some keys decrypt but not all. Your wallet file may be corrupt.\");\n+        }\n+        if (keyFail || (!keyPass && !accept_no_keys))\n+            return false;\n+        m_decryption_thoroughly_checked = true;\n+    }\n+    return true;\n+}\n+\n+bool DescriptorScriptPubKeyMan::Encrypt(const CKeyingMaterial& master_key, WalletBatch* batch)\n+{\n+    LOCK(cs_desc_man);\n+    if (!m_map_crypted_keys.empty()) {\n+        return false;\n+    }\n+\n+    for (const KeyMap::value_type& key_in : m_map_keys)\n+    {\n+        const CKey &key = key_in.second;\n+        CPubKey pubkey = key.GetPubKey();\n+        CKeyingMaterial secret(key.begin(), key.end());\n+        std::vector<unsigned char> crypted_secret;\n+        if (!EncryptSecret(master_key, secret, pubkey.GetHash(), crypted_secret)) {\n+            return false;\n+        }\n+        m_map_crypted_keys[pubkey.GetID()] = make_pair(pubkey, crypted_secret);\n+        batch->WriteCryptedDescriptorKey(GetID(), pubkey, crypted_secret);\n+    }\n+    m_map_keys.clear();\n+    return true;\n+}\n+\n+bool DescriptorScriptPubKeyMan::GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool)\n+{\n+    LOCK(cs_desc_man);\n+    std::string error;\n+    bool result = GetNewDestination(type, address, error);\n+    index = m_wallet_descriptor.next_index - 1;\n+    return result;\n+}\n+\n+void DescriptorScriptPubKeyMan::ReturnDestination(int64_t index, bool internal, const CTxDestination& addr)\n+{\n+    LOCK(cs_desc_man);\n+    // Only return when the index was the most recent\n+    if (m_wallet_descriptor.next_index - 1 == index) {\n+        m_wallet_descriptor.next_index--;\n+    }\n+    WalletBatch(m_storage.GetDatabase()).WriteDescriptor(GetID(), m_wallet_descriptor);\n+    NotifyCanGetAddressesChanged();\n+}\n+\n+std::map<CKeyID, CKey> DescriptorScriptPubKeyMan::GetKeys() const\n+{\n+    AssertLockHeld(cs_desc_man);\n+    if (m_storage.HasEncryptionKeys() && !m_storage.IsLocked()) {\n+        KeyMap keys;\n+        for (auto key_pair : m_map_crypted_keys) {\n+            const CPubKey& pubkey = key_pair.second.first;\n+            const std::vector<unsigned char>& crypted_secret = key_pair.second.second;\n+            CKey key;\n+            DecryptKey(m_storage.GetEncryptionKey(), crypted_secret, pubkey, key);\n+            keys[pubkey.GetID()] = key;\n+        }\n+        return keys;\n+    }\n+    return m_map_keys;\n+}\n+\n+bool DescriptorScriptPubKeyMan::TopUp(unsigned int size)\n+{\n+    LOCK(cs_desc_man);\n+    unsigned int target_size;\n+    if (size > 0) {\n+        target_size = size;\n+    } else {\n+        target_size = std::max(gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 1);\n+    }\n+\n+    // Calculate the new range_end\n+    int32_t new_range_end = std::max(m_wallet_descriptor.next_index + (int32_t)target_size, m_wallet_descriptor.range_end);\n+\n+    // If the descriptor is not ranged, we actually just want to fill the first cache item\n+    if (!m_wallet_descriptor.descriptor->IsRange()) {\n+        new_range_end = 1;\n+        m_wallet_descriptor.range_end = 1;\n+        m_wallet_descriptor.range_start = 0;\n+    }\n+\n+    FlatSigningProvider provider;\n+    provider.keys = GetKeys();\n+\n+    WalletBatch batch(m_storage.GetDatabase());\n+    uint256 id = GetID();\n+    for (int32_t i = m_max_cached_index + 1; i < new_range_end; ++i) {\n+        FlatSigningProvider out_keys;\n+        std::vector<CScript> scripts_temp;\n+        DescriptorCache temp_cache;\n+        // Maybe we have a cached xpub and we can expand from the cache first\n+        if (!m_wallet_descriptor.descriptor->ExpandFromCache(i, m_wallet_descriptor.cache, scripts_temp, out_keys)) {\n+            if (!m_wallet_descriptor.descriptor->Expand(i, provider, scripts_temp, out_keys, &temp_cache)) return false;\n+        }\n+        // Add all of the scriptPubKeys to the scriptPubKey set\n+        for (const CScript& script : scripts_temp) {\n+            m_map_script_pub_keys[script] = i;\n+        }\n+        for (const auto& pk_pair : out_keys.pubkeys) {\n+            const CPubKey& pubkey = pk_pair.second;\n+            if (m_map_pubkeys.count(pubkey) != 0) {\n+                // We don't need to give an error here.\n+                // It doesn't matter what index the pubkey has, we just need an index where we can derive it and it's private key",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 250,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "e75d67d237241c094f425a999a38e00b5fbba635",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The index matters, I think you mean:\r\n\r\n\"It doesn't matter which of many valid indexes the pubkey has, we just need an index where we can derive it and it's private key\"",
      "created_at": "2020-04-06T13:08:33Z",
      "updated_at": "2020-04-23T18:00:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r404076184",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/404076184"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1687,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/404076311",
      "pull_request_review_id": 388230497,
      "id": 404076311,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA3NjMxMQ==",
      "diff_hunk": "@@ -1497,3 +1493,672 @@ std::set<CKeyID> LegacyScriptPubKeyMan::GetKeys() const\n     }\n     return set_address;\n }\n+\n+void LegacyScriptPubKeyMan::SetType(OutputType type, bool internal) {}\n+\n+bool DescriptorScriptPubKeyMan::GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error)\n+{\n+    // Returns true if this descriptor supports getting new addresses. Conditions where we may be unable to fetch them (e.g. locked) are caught later\n+    if (!CanGetAddresses(m_internal)) {\n+        error = \"No addresses available\";\n+        return false;\n+    }\n+    {\n+        LOCK(cs_desc_man);\n+        assert(m_wallet_descriptor.descriptor->IsSingleType()); // This is a combo descriptor which should not be an active descriptor\n+        if (type != m_address_type) {\n+            throw std::runtime_error(std::string(__func__) + \": Types are inconsistent\");\n+        }\n+\n+        TopUp();\n+\n+        // Get the scriptPubKey from the descriptor\n+        FlatSigningProvider out_keys;\n+        std::vector<CScript> scripts_temp;\n+        if (m_wallet_descriptor.range_end <= m_max_cached_index && !TopUp(1)) {\n+            // We can't generate anymore keys\n+            error = \"Error: Keypool ran out, please call keypoolrefill first\";\n+            return false;\n+        }\n+        if (!m_wallet_descriptor.descriptor->ExpandFromCache(m_wallet_descriptor.next_index, m_wallet_descriptor.cache, scripts_temp, out_keys)) {\n+            // We can't generate anymore keys\n+            error = \"Error: Keypool ran out, please call keypoolrefill first\";\n+            return false;\n+        }\n+\n+        Optional<OutputType> out_script_type = m_wallet_descriptor.descriptor->GetOutputType();\n+        if (out_script_type && out_script_type == type) {\n+            ExtractDestination(scripts_temp[0], dest);\n+        } else {\n+            throw std::runtime_error(std::string(__func__) + \": Types are inconsistent. Stored type does not match type of newly generated address\");\n+        }\n+        m_wallet_descriptor.next_index++;\n+        WalletBatch(m_storage.GetDatabase()).WriteDescriptor(GetID(), m_wallet_descriptor);\n+        return true;\n+    }\n+}\n+\n+isminetype DescriptorScriptPubKeyMan::IsMine(const CScript& script) const\n+{\n+    LOCK(cs_desc_man);\n+    if (m_map_script_pub_keys.count(script) > 0) {\n+        return ISMINE_SPENDABLE;\n+    }\n+    return ISMINE_NO;\n+}\n+\n+bool DescriptorScriptPubKeyMan::CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys)\n+{\n+    {\n+        LOCK(cs_desc_man);\n+        if (!m_map_keys.empty())\n+            return false;\n+\n+        bool keyPass = m_map_crypted_keys.empty(); // Always pass when there are no encrypted keys\n+        bool keyFail = false;\n+        CryptedKeyMap::const_iterator mi = m_map_crypted_keys.begin();\n+        for (; mi != m_map_crypted_keys.end(); ++mi)\n+        {\n+            const CPubKey &pubkey = (*mi).second.first;\n+            const std::vector<unsigned char> &crypted_secret = (*mi).second.second;\n+            CKey key;\n+            if (!DecryptKey(master_key, crypted_secret, pubkey, key))\n+            {\n+                keyFail = true;\n+                break;\n+            }\n+            keyPass = true;\n+            if (m_decryption_thoroughly_checked)\n+                break;\n+        }\n+        if (keyPass && keyFail)\n+        {\n+            LogPrintf(\"The wallet is probably corrupted: Some keys decrypt but not all.\\n\");\n+            throw std::runtime_error(\"Error unlocking wallet: some keys decrypt but not all. Your wallet file may be corrupt.\");\n+        }\n+        if (keyFail || (!keyPass && !accept_no_keys))\n+            return false;\n+        m_decryption_thoroughly_checked = true;\n+    }\n+    return true;\n+}\n+\n+bool DescriptorScriptPubKeyMan::Encrypt(const CKeyingMaterial& master_key, WalletBatch* batch)\n+{\n+    LOCK(cs_desc_man);\n+    if (!m_map_crypted_keys.empty()) {\n+        return false;\n+    }\n+\n+    for (const KeyMap::value_type& key_in : m_map_keys)\n+    {\n+        const CKey &key = key_in.second;\n+        CPubKey pubkey = key.GetPubKey();\n+        CKeyingMaterial secret(key.begin(), key.end());\n+        std::vector<unsigned char> crypted_secret;\n+        if (!EncryptSecret(master_key, secret, pubkey.GetHash(), crypted_secret)) {\n+            return false;\n+        }\n+        m_map_crypted_keys[pubkey.GetID()] = make_pair(pubkey, crypted_secret);\n+        batch->WriteCryptedDescriptorKey(GetID(), pubkey, crypted_secret);\n+    }\n+    m_map_keys.clear();\n+    return true;\n+}\n+\n+bool DescriptorScriptPubKeyMan::GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool)\n+{\n+    LOCK(cs_desc_man);\n+    std::string error;\n+    bool result = GetNewDestination(type, address, error);\n+    index = m_wallet_descriptor.next_index - 1;\n+    return result;\n+}\n+\n+void DescriptorScriptPubKeyMan::ReturnDestination(int64_t index, bool internal, const CTxDestination& addr)\n+{\n+    LOCK(cs_desc_man);\n+    // Only return when the index was the most recent\n+    if (m_wallet_descriptor.next_index - 1 == index) {\n+        m_wallet_descriptor.next_index--;\n+    }\n+    WalletBatch(m_storage.GetDatabase()).WriteDescriptor(GetID(), m_wallet_descriptor);\n+    NotifyCanGetAddressesChanged();\n+}\n+\n+std::map<CKeyID, CKey> DescriptorScriptPubKeyMan::GetKeys() const\n+{\n+    AssertLockHeld(cs_desc_man);\n+    if (m_storage.HasEncryptionKeys() && !m_storage.IsLocked()) {\n+        KeyMap keys;\n+        for (auto key_pair : m_map_crypted_keys) {\n+            const CPubKey& pubkey = key_pair.second.first;\n+            const std::vector<unsigned char>& crypted_secret = key_pair.second.second;\n+            CKey key;\n+            DecryptKey(m_storage.GetEncryptionKey(), crypted_secret, pubkey, key);\n+            keys[pubkey.GetID()] = key;\n+        }\n+        return keys;\n+    }\n+    return m_map_keys;\n+}\n+\n+bool DescriptorScriptPubKeyMan::TopUp(unsigned int size)\n+{\n+    LOCK(cs_desc_man);\n+    unsigned int target_size;\n+    if (size > 0) {\n+        target_size = size;\n+    } else {\n+        target_size = std::max(gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 1);\n+    }\n+\n+    // Calculate the new range_end\n+    int32_t new_range_end = std::max(m_wallet_descriptor.next_index + (int32_t)target_size, m_wallet_descriptor.range_end);\n+\n+    // If the descriptor is not ranged, we actually just want to fill the first cache item\n+    if (!m_wallet_descriptor.descriptor->IsRange()) {\n+        new_range_end = 1;\n+        m_wallet_descriptor.range_end = 1;\n+        m_wallet_descriptor.range_start = 0;\n+    }\n+\n+    FlatSigningProvider provider;\n+    provider.keys = GetKeys();\n+\n+    WalletBatch batch(m_storage.GetDatabase());\n+    uint256 id = GetID();\n+    for (int32_t i = m_max_cached_index + 1; i < new_range_end; ++i) {\n+        FlatSigningProvider out_keys;\n+        std::vector<CScript> scripts_temp;\n+        DescriptorCache temp_cache;\n+        // Maybe we have a cached xpub and we can expand from the cache first\n+        if (!m_wallet_descriptor.descriptor->ExpandFromCache(i, m_wallet_descriptor.cache, scripts_temp, out_keys)) {\n+            if (!m_wallet_descriptor.descriptor->Expand(i, provider, scripts_temp, out_keys, &temp_cache)) return false;\n+        }\n+        // Add all of the scriptPubKeys to the scriptPubKey set\n+        for (const CScript& script : scripts_temp) {\n+            m_map_script_pub_keys[script] = i;\n+        }\n+        for (const auto& pk_pair : out_keys.pubkeys) {\n+            const CPubKey& pubkey = pk_pair.second;\n+            if (m_map_pubkeys.count(pubkey) != 0) {\n+                // We don't need to give an error here.\n+                // It doesn't matter what index the pubkey has, we just need an index where we can derive it and it's private key\n+                continue;\n+            }\n+            m_map_pubkeys[pubkey] = i;\n+        }\n+        // Write the cache\n+        for (const auto& parent_xpub_pair : temp_cache.GetCachedParentExtPubKeys()) {\n+            CExtPubKey xpub;\n+            if (m_wallet_descriptor.cache.GetCachedParentExtPubKey(parent_xpub_pair.first, xpub)) {\n+                if (xpub != parent_xpub_pair.second) {\n+                    throw std::runtime_error(std::string(__func__) + \": New cached parent xpub does not match already cached parent xpub\");\n+                }\n+                continue;\n+            }\n+            if (!batch.WriteDescriptorParentCache(id, parent_xpub_pair.first, parent_xpub_pair.second)) {\n+                throw std::runtime_error(std::string(__func__) + \": writing cache item failed\");\n+            }\n+            m_wallet_descriptor.cache.CacheParentExtPubKey(parent_xpub_pair.first, parent_xpub_pair.second);\n+        }\n+        for (const auto& derived_xpub_map_pair : temp_cache.GetCachedDerivedExtPubKeys()) {\n+            for (const auto& derived_xpub_pair : derived_xpub_map_pair.second) {\n+                CExtPubKey xpub;\n+                if (m_wallet_descriptor.cache.GetCachedDerivedExtPubKey(derived_xpub_map_pair.first, derived_xpub_pair.first, xpub)) {\n+                    if (xpub != derived_xpub_pair.second) {\n+                        throw std::runtime_error(std::string(__func__) + \": New cached derived xpub does not match already cached derived xpub\");\n+                    }\n+                    continue;\n+                }\n+                if (!batch.WriteDescriptorDerivedCache(id, derived_xpub_map_pair.first, derived_xpub_pair.first, derived_xpub_pair.second)) {\n+                    throw std::runtime_error(std::string(__func__) + \": writing cache item failed\");\n+                }\n+                m_wallet_descriptor.cache.CacheDerivedExtPubKey(derived_xpub_map_pair.first, derived_xpub_pair.first, derived_xpub_pair.second);\n+            }\n+        }\n+        m_max_cached_index++;\n+    }\n+    m_wallet_descriptor.range_end = new_range_end;\n+    batch.WriteDescriptor(GetID(), m_wallet_descriptor);\n+\n+    // By this point, the cache size should be the size of the entire range\n+    assert(m_wallet_descriptor.range_end - 1 == m_max_cached_index);\n+\n+    NotifyCanGetAddressesChanged();\n+    return true;\n+}\n+\n+void DescriptorScriptPubKeyMan::MarkUnusedAddresses(const CScript& script)\n+{\n+    LOCK(cs_desc_man);\n+    if (IsMine(script)) {\n+        int32_t index = m_map_script_pub_keys[script];\n+        if (index >= m_wallet_descriptor.next_index) {\n+            WalletLogPrintf(\"%s: Detected a used keypool item at index %d, mark all keypool items up to this item as used\\n\", __func__, index);\n+            m_wallet_descriptor.next_index = index + 1;\n+        }\n+        if (!TopUp()) {\n+            WalletLogPrintf(\"%s: Topping up keypool failed (locked wallet)\\n\", __func__);\n+        }\n+    }\n+}\n+\n+void DescriptorScriptPubKeyMan::AddDescriptorKey(const CKey& key, const CPubKey &pubkey)\n+{\n+    LOCK(cs_desc_man);\n+    WalletBatch batch(m_storage.GetDatabase());\n+    if (!AddDescriptorKeyWithDB(batch, key, pubkey)) {\n+        throw std::runtime_error(std::string(__func__) + \": writing descriptor private key failed\");\n+    }\n+}\n+\n+bool DescriptorScriptPubKeyMan::AddDescriptorKeyWithDB(WalletBatch& batch, const CKey& key, const CPubKey &pubkey)\n+{\n+    AssertLockHeld(cs_desc_man);\n+    assert(!m_storage.IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS));\n+\n+    if (m_storage.HasEncryptionKeys()) {\n+        if (m_storage.IsLocked()) {\n+            return false;\n+        }\n+\n+        std::vector<unsigned char> crypted_secret;\n+        CKeyingMaterial secret(key.begin(), key.end());\n+        if (!EncryptSecret(m_storage.GetEncryptionKey(), secret, pubkey.GetHash(), crypted_secret)) {\n+            return false;\n+        }\n+\n+        m_map_crypted_keys[pubkey.GetID()] = make_pair(pubkey, crypted_secret);\n+        batch.WriteCryptedDescriptorKey(GetID(), pubkey, crypted_secret);\n+        return true;\n+    } else {\n+        m_map_keys[pubkey.GetID()] = key;\n+        return batch.WriteDescriptorKey(GetID(), pubkey, key.GetPrivKey());\n+    }\n+}\n+\n+bool DescriptorScriptPubKeyMan::SetupDescriptorGeneration(const CExtKey& master_key)\n+{\n+    LOCK(cs_desc_man);\n+    assert(m_storage.IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS));\n+\n+    // Ignore when there is already a descriptor\n+    if (m_wallet_descriptor.descriptor) {\n+        return false;\n+    }\n+\n+    int64_t creation_time = GetTime();\n+\n+    std::string xpub = EncodeExtPubKey(master_key.Neuter());\n+\n+    // Build descriptor string\n+    std::string desc_prefix;\n+    std::string desc_suffix = \"/*)\";\n+    switch (m_address_type) {\n+    case OutputType::LEGACY: {\n+        desc_prefix = \"pkh(\" + xpub + \"/44'\";\n+        break;\n+    }\n+    case OutputType::P2SH_SEGWIT: {\n+        desc_prefix = \"sh(wpkh(\" + xpub + \"/49'\";\n+        desc_suffix += \")\";\n+        break;\n+    }\n+    case OutputType::BECH32: {\n+        desc_prefix = \"wpkh(\" + xpub + \"/84'\";\n+        break;\n+    }\n+    default: assert(false);\n+    }\n+\n+    // Mainnet derives at 0', testnet and regtest derive at 1'\n+    if (Params().IsTestChain()) {\n+        desc_prefix += \"/1'\";\n+    } else {\n+        desc_prefix += \"/0'\";\n+    }\n+\n+    std::string internal_path = m_internal ? \"/1\" : \"/0\";\n+    std::string desc_str = desc_prefix + \"/0'\" + internal_path + desc_suffix;\n+\n+    // Make the descriptor\n+    FlatSigningProvider keys;\n+    std::string error;\n+    std::unique_ptr<Descriptor> desc = Parse(desc_str, keys, error, false);\n+    WalletDescriptor w_desc(std::move(desc), creation_time, 0, 0, 0);\n+    m_wallet_descriptor = w_desc;\n+\n+    // Store the master private key, and descriptor\n+    WalletBatch batch(m_storage.GetDatabase());\n+    if (!AddDescriptorKeyWithDB(batch, master_key.key, master_key.key.GetPubKey())) {\n+        throw std::runtime_error(std::string(__func__) + \": writing descriptor master private key failed\");\n+    }\n+    if (!batch.WriteDescriptor(GetID(), m_wallet_descriptor)) {\n+        throw std::runtime_error(std::string(__func__) + \": writing descriptor failed\");\n+    }\n+\n+    // TopUp\n+    TopUp();\n+\n+    m_storage.UnsetBlankWalletFlag(batch);\n+    return true;\n+}\n+\n+bool DescriptorScriptPubKeyMan::IsHDEnabled() const\n+{\n+    LOCK(cs_desc_man);\n+    return m_wallet_descriptor.descriptor->IsRange();\n+}\n+\n+bool DescriptorScriptPubKeyMan::CanGetAddresses(bool internal) const\n+{\n+    // We can only give out addresses from descriptors that are single type (not combo), ranged,\n+    // and either has cached keys or can generate more keys (ignoring encryption)\n+    LOCK(cs_desc_man);\n+    return m_wallet_descriptor.descriptor->IsSingleType() &&\n+           m_wallet_descriptor.descriptor->IsRange() &&\n+           (HavePrivateKeys() || m_wallet_descriptor.next_index < m_wallet_descriptor.range_end);\n+}\n+\n+bool DescriptorScriptPubKeyMan::HavePrivateKeys() const\n+{\n+    LOCK(cs_desc_man);\n+    return m_map_keys.size() > 0 || m_map_crypted_keys.size() > 0;\n+}\n+\n+int64_t DescriptorScriptPubKeyMan::GetOldestKeyPoolTime() const\n+{\n+    return 0;\n+}\n+\n+size_t DescriptorScriptPubKeyMan::KeypoolCountExternalKeys() const\n+{\n+    if (m_internal) {\n+        return 0;\n+    }\n+    return GetKeyPoolSize();\n+}\n+\n+unsigned int DescriptorScriptPubKeyMan::GetKeyPoolSize() const\n+{\n+    LOCK(cs_desc_man);\n+    return m_wallet_descriptor.range_end - m_wallet_descriptor.next_index;\n+}\n+\n+int64_t DescriptorScriptPubKeyMan::GetTimeFirstKey() const\n+{\n+    LOCK(cs_desc_man);\n+    return m_wallet_descriptor.creation_time;\n+}\n+\n+std::unique_ptr<FlatSigningProvider> DescriptorScriptPubKeyMan::GetSigningProvider(const CScript& script, bool include_private) const\n+{\n+    LOCK(cs_desc_man);\n+\n+    // Find the index of the script\n+    auto it = m_map_script_pub_keys.find(script);\n+    if (it == m_map_script_pub_keys.end()) {\n+        return nullptr;\n+    }\n+    int32_t index = it->second;\n+\n+    return GetSigningProvider(index, include_private);\n+}\n+\n+std::unique_ptr<FlatSigningProvider> DescriptorScriptPubKeyMan::GetSigningProvider(const CPubKey& pubkey) const\n+{\n+    LOCK(cs_desc_man);\n+\n+    // Find index of the pubkey\n+    auto it = m_map_pubkeys.find(pubkey);\n+    if (it == m_map_pubkeys.end()) {\n+        return nullptr;\n+    }\n+    int32_t index = it->second;\n+\n+    // Always try to get the signing provider with private keys. This function should only be called during signing anyways\n+    return GetSigningProvider(index, true);\n+}\n+\n+std::unique_ptr<FlatSigningProvider> DescriptorScriptPubKeyMan::GetSigningProvider(int32_t index, bool include_private) const\n+{\n+    AssertLockHeld(cs_desc_man);\n+    // Get the scripts, keys, and key origins for this script\n+    std::unique_ptr<FlatSigningProvider> out_keys = MakeUnique<FlatSigningProvider>();\n+    std::vector<CScript> scripts_temp;\n+    if (!m_wallet_descriptor.descriptor->ExpandFromCache(index, m_wallet_descriptor.cache, scripts_temp, *out_keys)) return nullptr;\n+\n+    if (HavePrivateKeys() && include_private) {\n+        FlatSigningProvider master_provider;\n+        master_provider.keys = GetKeys();\n+        bool expanded = m_wallet_descriptor.descriptor->ExpandPrivate(index, master_provider, *out_keys);\n+        assert(expanded);\n+    }\n+\n+    return out_keys;\n+}\n+\n+std::unique_ptr<SigningProvider> DescriptorScriptPubKeyMan::GetSolvingProvider(const CScript& script) const\n+{\n+    return GetSigningProvider(script, false);\n+}\n+\n+bool DescriptorScriptPubKeyMan::CanProvide(const CScript& script, SignatureData& sigdata)\n+{\n+    return IsMine(script);\n+}\n+\n+bool DescriptorScriptPubKeyMan::SignTransaction(CMutableTransaction& tx, const std::map<COutPoint, Coin>& coins, int sighash, std::map<int, std::string>& input_errors) const\n+{\n+    std::unique_ptr<FlatSigningProvider> keys = MakeUnique<FlatSigningProvider>();\n+    for (const auto& coin_pair : coins) {\n+        std::unique_ptr<FlatSigningProvider> coin_keys = GetSigningProvider(coin_pair.second.out.scriptPubKey, true);\n+        if (!coin_keys) {\n+            continue;\n+        }\n+        *keys = Merge(*keys, *coin_keys);\n+    }\n+\n+    return ::SignTransaction(tx, keys.get(), coins, sighash, input_errors);\n+}\n+\n+SigningResult DescriptorScriptPubKeyMan::SignMessage(const std::string& message, const PKHash& pkhash, std::string& str_sig) const\n+{\n+    std::unique_ptr<FlatSigningProvider> keys = GetSigningProvider(GetScriptForDestination(pkhash), true);\n+    if (!keys) {\n+        return SigningResult::PRIVATE_KEY_NOT_AVAILABLE;\n+    }\n+\n+    CKeyID key_id(pkhash);\n+    CKey key;\n+    if (!keys->GetKey(key_id, key)) {\n+        return SigningResult::PRIVATE_KEY_NOT_AVAILABLE;\n+    }\n+\n+    if (!MessageSign(key, message, str_sig)) {\n+        return SigningResult::SIGNING_FAILED;\n+    }\n+    return SigningResult::OK;\n+}\n+\n+TransactionError DescriptorScriptPubKeyMan::FillPSBT(PartiallySignedTransaction& psbtx, int sighash_type, bool sign, bool bip32derivs) const\n+{\n+    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+        const CTxIn& txin = psbtx.tx->vin[i];\n+        PSBTInput& input = psbtx.inputs.at(i);\n+\n+        if (PSBTInputSigned(input)) {\n+            continue;\n+        }\n+\n+        // Verify input looks sane. This will check that we have at most one uxto, witness or non-witness.\n+        if (!input.IsSane()) {\n+            return TransactionError::INVALID_PSBT;\n+        }\n+\n+        // Get the Sighash type\n+        if (sign && input.sighash_type > 0 && input.sighash_type != sighash_type) {\n+            return TransactionError::SIGHASH_MISMATCH;\n+        }\n+\n+        // Get the scriptPubKey to know which SigningProvider to use\n+        CScript script;\n+        if (!input.witness_utxo.IsNull()) {\n+            script = input.witness_utxo.scriptPubKey;\n+        } else if (input.non_witness_utxo) {\n+            if (txin.prevout.n >= input.non_witness_utxo->vout.size()) {\n+                return TransactionError::MISSING_INPUTS;\n+            }\n+            script = input.non_witness_utxo->vout[txin.prevout.n].scriptPubKey;\n+        } else {\n+            // There's no UTXO so we can just skip this now\n+            continue;\n+        }\n+        SignatureData sigdata;\n+        input.FillSignatureData(sigdata);\n+\n+        std::unique_ptr<FlatSigningProvider> keys = MakeUnique<FlatSigningProvider>();\n+        std::unique_ptr<FlatSigningProvider> script_keys = GetSigningProvider(script, sign);\n+        if (script_keys) {\n+            *keys = Merge(*keys, *script_keys);\n+        } else {\n+            // Maybe there are pubkeys listed that we can sign for\n+            script_keys = MakeUnique<FlatSigningProvider>();\n+            for (const auto& pk_pair : input.hd_keypaths) {\n+                const CPubKey& pubkey = pk_pair.first;\n+                std::unique_ptr<FlatSigningProvider> pk_keys = GetSigningProvider(pubkey);\n+                if (pk_keys) {\n+                    *keys = Merge(*keys, *pk_keys);\n+                }\n+            }\n+        }\n+\n+        SignPSBTInput(HidingSigningProvider(keys.get(), !sign, !bip32derivs), psbtx, i, sighash_type);\n+    }\n+\n+    // Fill in the bip32 keypaths and redeemscripts for the outputs so that hardware wallets can identify change\n+    for (unsigned int i = 0; i < psbtx.tx->vout.size(); ++i) {\n+        std::unique_ptr<SigningProvider> keys = GetSolvingProvider(psbtx.tx->vout.at(i).scriptPubKey);\n+        if (!keys) {\n+            continue;\n+        }\n+        UpdatePSBTOutput(HidingSigningProvider(keys.get(), true, !bip32derivs), psbtx, i);\n+    }\n+\n+    return TransactionError::OK;\n+}\n+\n+std::unique_ptr<CKeyMetadata> DescriptorScriptPubKeyMan::GetMetadata(const CTxDestination& dest) const\n+{\n+    std::unique_ptr<SigningProvider> provider = GetSigningProvider(GetScriptForDestination(dest));\n+    if (provider) {\n+        KeyOriginInfo orig;\n+        CKeyID key_id = GetKeyForDestination(*provider, dest);\n+        if (provider->GetKeyOrigin(key_id, orig)) {\n+            LOCK(cs_desc_man);\n+            std::unique_ptr<CKeyMetadata> meta = MakeUnique<CKeyMetadata>();\n+            meta->key_origin = orig;\n+            meta->has_key_origin = true;\n+            meta->nCreateTime = m_wallet_descriptor.creation_time;\n+            return meta;\n+        }\n+    }\n+    return nullptr;\n+}\n+\n+uint256 DescriptorScriptPubKeyMan::GetID() const\n+{\n+    LOCK(cs_desc_man);\n+    std::string desc_str = m_wallet_descriptor.descriptor->ToString();\n+    uint256 id;\n+    CSHA256().Write((unsigned char*)desc_str.data(), desc_str.size()).Finalize(id.begin());\n+    return id;\n+}\n+\n+void DescriptorScriptPubKeyMan::SetType(OutputType type, bool internal)\n+{\n+    this->m_address_type = type;\n+    this->m_internal = internal;\n+}\n+\n+void DescriptorScriptPubKeyMan::SetCache(const DescriptorCache& cache)\n+{\n+    LOCK(cs_desc_man);\n+    m_wallet_descriptor.cache = cache;\n+    for (int32_t i = m_wallet_descriptor.range_start; i < m_wallet_descriptor.range_end; ++i) {\n+        FlatSigningProvider out_keys;\n+        std::vector<CScript> scripts_temp;\n+        if (!m_wallet_descriptor.descriptor->ExpandFromCache(i, m_wallet_descriptor.cache, scripts_temp, out_keys)) {\n+            throw std::runtime_error(\"Error: Unable to expand wallet descriptor from cache\");\n+        }\n+        // Add all of the scriptPubKeys to the scriptPubKey set\n+        for (const CScript& script : scripts_temp) {\n+            if (m_map_script_pub_keys.count(script) != 0) {\n+                throw std::runtime_error(strprintf(\"Error: Already loaded script at index %d as being at index %d\", i, m_map_script_pub_keys[script]));\n+            }\n+            m_map_script_pub_keys[script] = i;\n+        }\n+        for (const auto& pk_pair : out_keys.pubkeys) {\n+            const CPubKey& pubkey = pk_pair.second;\n+            if (m_map_pubkeys.count(pubkey) != 0) {\n+                // We don't need to give an error here.\n+                // It doesn't matter what index the pubkey has, we just need an index where we can derive it and it's private key",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 670,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "e75d67d237241c094f425a999a38e00b5fbba635",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The index matters, I think you mean:\r\n\r\n\"It doesn't matter which of many valid indexes the pubkey has, we just need an index where we can derive it and it's private key\"",
      "created_at": "2020-04-06T13:08:43Z",
      "updated_at": "2020-04-23T18:00:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r404076311",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/404076311"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2107,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/404226781",
      "pull_request_review_id": 388419538,
      "id": 404226781,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIyNjc4MQ==",
      "diff_hunk": "@@ -1497,3 +1493,672 @@ std::set<CKeyID> LegacyScriptPubKeyMan::GetKeys() const\n     }\n     return set_address;\n }\n+\n+void LegacyScriptPubKeyMan::SetType(OutputType type, bool internal) {}\n+\n+bool DescriptorScriptPubKeyMan::GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error)\n+{\n+    // Returns true if this descriptor supports getting new addresses. Conditions where we may be unable to fetch them (e.g. locked) are caught later\n+    if (!CanGetAddresses(m_internal)) {\n+        error = \"No addresses available\";\n+        return false;\n+    }\n+    {\n+        LOCK(cs_desc_man);\n+        assert(m_wallet_descriptor.descriptor->IsSingleType()); // This is a combo descriptor which should not be an active descriptor\n+        if (type != m_address_type) {\n+            throw std::runtime_error(std::string(__func__) + \": Types are inconsistent\");\n+        }\n+\n+        TopUp();\n+\n+        // Get the scriptPubKey from the descriptor\n+        FlatSigningProvider out_keys;\n+        std::vector<CScript> scripts_temp;\n+        if (m_wallet_descriptor.range_end <= m_max_cached_index && !TopUp(1)) {\n+            // We can't generate anymore keys\n+            error = \"Error: Keypool ran out, please call keypoolrefill first\";\n+            return false;\n+        }\n+        if (!m_wallet_descriptor.descriptor->ExpandFromCache(m_wallet_descriptor.next_index, m_wallet_descriptor.cache, scripts_temp, out_keys)) {\n+            // We can't generate anymore keys\n+            error = \"Error: Keypool ran out, please call keypoolrefill first\";\n+            return false;\n+        }\n+\n+        Optional<OutputType> out_script_type = m_wallet_descriptor.descriptor->GetOutputType();\n+        if (out_script_type && out_script_type == type) {\n+            ExtractDestination(scripts_temp[0], dest);\n+        } else {\n+            throw std::runtime_error(std::string(__func__) + \": Types are inconsistent. Stored type does not match type of newly generated address\");\n+        }\n+        m_wallet_descriptor.next_index++;\n+        WalletBatch(m_storage.GetDatabase()).WriteDescriptor(GetID(), m_wallet_descriptor);\n+        return true;\n+    }\n+}\n+\n+isminetype DescriptorScriptPubKeyMan::IsMine(const CScript& script) const\n+{\n+    LOCK(cs_desc_man);\n+    if (m_map_script_pub_keys.count(script) > 0) {\n+        return ISMINE_SPENDABLE;\n+    }\n+    return ISMINE_NO;\n+}\n+\n+bool DescriptorScriptPubKeyMan::CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys)\n+{\n+    {\n+        LOCK(cs_desc_man);\n+        if (!m_map_keys.empty())\n+            return false;\n+\n+        bool keyPass = m_map_crypted_keys.empty(); // Always pass when there are no encrypted keys\n+        bool keyFail = false;\n+        CryptedKeyMap::const_iterator mi = m_map_crypted_keys.begin();\n+        for (; mi != m_map_crypted_keys.end(); ++mi)\n+        {\n+            const CPubKey &pubkey = (*mi).second.first;\n+            const std::vector<unsigned char> &crypted_secret = (*mi).second.second;\n+            CKey key;\n+            if (!DecryptKey(master_key, crypted_secret, pubkey, key))\n+            {\n+                keyFail = true;\n+                break;\n+            }\n+            keyPass = true;\n+            if (m_decryption_thoroughly_checked)\n+                break;\n+        }\n+        if (keyPass && keyFail)\n+        {\n+            LogPrintf(\"The wallet is probably corrupted: Some keys decrypt but not all.\\n\");\n+            throw std::runtime_error(\"Error unlocking wallet: some keys decrypt but not all. Your wallet file may be corrupt.\");\n+        }\n+        if (keyFail || (!keyPass && !accept_no_keys))\n+            return false;\n+        m_decryption_thoroughly_checked = true;\n+    }\n+    return true;\n+}\n+\n+bool DescriptorScriptPubKeyMan::Encrypt(const CKeyingMaterial& master_key, WalletBatch* batch)\n+{\n+    LOCK(cs_desc_man);\n+    if (!m_map_crypted_keys.empty()) {\n+        return false;\n+    }\n+\n+    for (const KeyMap::value_type& key_in : m_map_keys)\n+    {\n+        const CKey &key = key_in.second;\n+        CPubKey pubkey = key.GetPubKey();\n+        CKeyingMaterial secret(key.begin(), key.end());\n+        std::vector<unsigned char> crypted_secret;\n+        if (!EncryptSecret(master_key, secret, pubkey.GetHash(), crypted_secret)) {\n+            return false;\n+        }\n+        m_map_crypted_keys[pubkey.GetID()] = make_pair(pubkey, crypted_secret);\n+        batch->WriteCryptedDescriptorKey(GetID(), pubkey, crypted_secret);\n+    }\n+    m_map_keys.clear();\n+    return true;\n+}\n+\n+bool DescriptorScriptPubKeyMan::GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool)\n+{\n+    LOCK(cs_desc_man);\n+    std::string error;\n+    bool result = GetNewDestination(type, address, error);\n+    index = m_wallet_descriptor.next_index - 1;\n+    return result;\n+}\n+\n+void DescriptorScriptPubKeyMan::ReturnDestination(int64_t index, bool internal, const CTxDestination& addr)\n+{\n+    LOCK(cs_desc_man);\n+    // Only return when the index was the most recent\n+    if (m_wallet_descriptor.next_index - 1 == index) {\n+        m_wallet_descriptor.next_index--;\n+    }\n+    WalletBatch(m_storage.GetDatabase()).WriteDescriptor(GetID(), m_wallet_descriptor);\n+    NotifyCanGetAddressesChanged();\n+}\n+\n+std::map<CKeyID, CKey> DescriptorScriptPubKeyMan::GetKeys() const\n+{\n+    AssertLockHeld(cs_desc_man);\n+    if (m_storage.HasEncryptionKeys() && !m_storage.IsLocked()) {\n+        KeyMap keys;\n+        for (auto key_pair : m_map_crypted_keys) {\n+            const CPubKey& pubkey = key_pair.second.first;\n+            const std::vector<unsigned char>& crypted_secret = key_pair.second.second;\n+            CKey key;\n+            DecryptKey(m_storage.GetEncryptionKey(), crypted_secret, pubkey, key);\n+            keys[pubkey.GetID()] = key;\n+        }\n+        return keys;\n+    }\n+    return m_map_keys;\n+}\n+\n+bool DescriptorScriptPubKeyMan::TopUp(unsigned int size)\n+{\n+    LOCK(cs_desc_man);\n+    unsigned int target_size;\n+    if (size > 0) {\n+        target_size = size;\n+    } else {\n+        target_size = std::max(gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 1);\n+    }\n+\n+    // Calculate the new range_end\n+    int32_t new_range_end = std::max(m_wallet_descriptor.next_index + (int32_t)target_size, m_wallet_descriptor.range_end);\n+\n+    // If the descriptor is not ranged, we actually just want to fill the first cache item\n+    if (!m_wallet_descriptor.descriptor->IsRange()) {\n+        new_range_end = 1;\n+        m_wallet_descriptor.range_end = 1;\n+        m_wallet_descriptor.range_start = 0;\n+    }\n+\n+    FlatSigningProvider provider;\n+    provider.keys = GetKeys();\n+\n+    WalletBatch batch(m_storage.GetDatabase());\n+    uint256 id = GetID();\n+    for (int32_t i = m_max_cached_index + 1; i < new_range_end; ++i) {\n+        FlatSigningProvider out_keys;\n+        std::vector<CScript> scripts_temp;\n+        DescriptorCache temp_cache;\n+        // Maybe we have a cached xpub and we can expand from the cache first\n+        if (!m_wallet_descriptor.descriptor->ExpandFromCache(i, m_wallet_descriptor.cache, scripts_temp, out_keys)) {\n+            if (!m_wallet_descriptor.descriptor->Expand(i, provider, scripts_temp, out_keys, &temp_cache)) return false;\n+        }\n+        // Add all of the scriptPubKeys to the scriptPubKey set\n+        for (const CScript& script : scripts_temp) {\n+            m_map_script_pub_keys[script] = i;\n+        }\n+        for (const auto& pk_pair : out_keys.pubkeys) {\n+            const CPubKey& pubkey = pk_pair.second;\n+            if (m_map_pubkeys.count(pubkey) != 0) {\n+                // We don't need to give an error here.\n+                // It doesn't matter what index the pubkey has, we just need an index where we can derive it and it's private key",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 250,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "e75d67d237241c094f425a999a38e00b5fbba635",
      "in_reply_to_id": 404076184,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-04-06T16:29:52Z",
      "updated_at": "2020-04-23T18:00:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r404226781",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/404226781"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1687,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/404226835",
      "pull_request_review_id": 388419608,
      "id": 404226835,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIyNjgzNQ==",
      "diff_hunk": "@@ -1497,3 +1493,672 @@ std::set<CKeyID> LegacyScriptPubKeyMan::GetKeys() const\n     }\n     return set_address;\n }\n+\n+void LegacyScriptPubKeyMan::SetType(OutputType type, bool internal) {}\n+\n+bool DescriptorScriptPubKeyMan::GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error)\n+{\n+    // Returns true if this descriptor supports getting new addresses. Conditions where we may be unable to fetch them (e.g. locked) are caught later\n+    if (!CanGetAddresses(m_internal)) {\n+        error = \"No addresses available\";\n+        return false;\n+    }\n+    {\n+        LOCK(cs_desc_man);\n+        assert(m_wallet_descriptor.descriptor->IsSingleType()); // This is a combo descriptor which should not be an active descriptor\n+        if (type != m_address_type) {\n+            throw std::runtime_error(std::string(__func__) + \": Types are inconsistent\");\n+        }\n+\n+        TopUp();\n+\n+        // Get the scriptPubKey from the descriptor\n+        FlatSigningProvider out_keys;\n+        std::vector<CScript> scripts_temp;\n+        if (m_wallet_descriptor.range_end <= m_max_cached_index && !TopUp(1)) {\n+            // We can't generate anymore keys\n+            error = \"Error: Keypool ran out, please call keypoolrefill first\";\n+            return false;\n+        }\n+        if (!m_wallet_descriptor.descriptor->ExpandFromCache(m_wallet_descriptor.next_index, m_wallet_descriptor.cache, scripts_temp, out_keys)) {\n+            // We can't generate anymore keys\n+            error = \"Error: Keypool ran out, please call keypoolrefill first\";\n+            return false;\n+        }\n+\n+        Optional<OutputType> out_script_type = m_wallet_descriptor.descriptor->GetOutputType();\n+        if (out_script_type && out_script_type == type) {\n+            ExtractDestination(scripts_temp[0], dest);\n+        } else {\n+            throw std::runtime_error(std::string(__func__) + \": Types are inconsistent. Stored type does not match type of newly generated address\");\n+        }\n+        m_wallet_descriptor.next_index++;\n+        WalletBatch(m_storage.GetDatabase()).WriteDescriptor(GetID(), m_wallet_descriptor);\n+        return true;\n+    }\n+}\n+\n+isminetype DescriptorScriptPubKeyMan::IsMine(const CScript& script) const\n+{\n+    LOCK(cs_desc_man);\n+    if (m_map_script_pub_keys.count(script) > 0) {\n+        return ISMINE_SPENDABLE;\n+    }\n+    return ISMINE_NO;\n+}\n+\n+bool DescriptorScriptPubKeyMan::CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys)\n+{\n+    {\n+        LOCK(cs_desc_man);\n+        if (!m_map_keys.empty())\n+            return false;\n+\n+        bool keyPass = m_map_crypted_keys.empty(); // Always pass when there are no encrypted keys\n+        bool keyFail = false;\n+        CryptedKeyMap::const_iterator mi = m_map_crypted_keys.begin();\n+        for (; mi != m_map_crypted_keys.end(); ++mi)\n+        {\n+            const CPubKey &pubkey = (*mi).second.first;\n+            const std::vector<unsigned char> &crypted_secret = (*mi).second.second;\n+            CKey key;\n+            if (!DecryptKey(master_key, crypted_secret, pubkey, key))\n+            {\n+                keyFail = true;\n+                break;\n+            }\n+            keyPass = true;\n+            if (m_decryption_thoroughly_checked)\n+                break;\n+        }\n+        if (keyPass && keyFail)\n+        {\n+            LogPrintf(\"The wallet is probably corrupted: Some keys decrypt but not all.\\n\");\n+            throw std::runtime_error(\"Error unlocking wallet: some keys decrypt but not all. Your wallet file may be corrupt.\");\n+        }\n+        if (keyFail || (!keyPass && !accept_no_keys))\n+            return false;\n+        m_decryption_thoroughly_checked = true;\n+    }\n+    return true;\n+}\n+\n+bool DescriptorScriptPubKeyMan::Encrypt(const CKeyingMaterial& master_key, WalletBatch* batch)\n+{\n+    LOCK(cs_desc_man);\n+    if (!m_map_crypted_keys.empty()) {\n+        return false;\n+    }\n+\n+    for (const KeyMap::value_type& key_in : m_map_keys)\n+    {\n+        const CKey &key = key_in.second;\n+        CPubKey pubkey = key.GetPubKey();\n+        CKeyingMaterial secret(key.begin(), key.end());\n+        std::vector<unsigned char> crypted_secret;\n+        if (!EncryptSecret(master_key, secret, pubkey.GetHash(), crypted_secret)) {\n+            return false;\n+        }\n+        m_map_crypted_keys[pubkey.GetID()] = make_pair(pubkey, crypted_secret);\n+        batch->WriteCryptedDescriptorKey(GetID(), pubkey, crypted_secret);\n+    }\n+    m_map_keys.clear();\n+    return true;\n+}\n+\n+bool DescriptorScriptPubKeyMan::GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool)\n+{\n+    LOCK(cs_desc_man);\n+    std::string error;\n+    bool result = GetNewDestination(type, address, error);\n+    index = m_wallet_descriptor.next_index - 1;\n+    return result;\n+}\n+\n+void DescriptorScriptPubKeyMan::ReturnDestination(int64_t index, bool internal, const CTxDestination& addr)\n+{\n+    LOCK(cs_desc_man);\n+    // Only return when the index was the most recent\n+    if (m_wallet_descriptor.next_index - 1 == index) {\n+        m_wallet_descriptor.next_index--;\n+    }\n+    WalletBatch(m_storage.GetDatabase()).WriteDescriptor(GetID(), m_wallet_descriptor);\n+    NotifyCanGetAddressesChanged();\n+}\n+\n+std::map<CKeyID, CKey> DescriptorScriptPubKeyMan::GetKeys() const\n+{\n+    AssertLockHeld(cs_desc_man);\n+    if (m_storage.HasEncryptionKeys() && !m_storage.IsLocked()) {\n+        KeyMap keys;\n+        for (auto key_pair : m_map_crypted_keys) {\n+            const CPubKey& pubkey = key_pair.second.first;\n+            const std::vector<unsigned char>& crypted_secret = key_pair.second.second;\n+            CKey key;\n+            DecryptKey(m_storage.GetEncryptionKey(), crypted_secret, pubkey, key);\n+            keys[pubkey.GetID()] = key;\n+        }\n+        return keys;\n+    }\n+    return m_map_keys;\n+}\n+\n+bool DescriptorScriptPubKeyMan::TopUp(unsigned int size)\n+{\n+    LOCK(cs_desc_man);\n+    unsigned int target_size;\n+    if (size > 0) {\n+        target_size = size;\n+    } else {\n+        target_size = std::max(gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 1);\n+    }\n+\n+    // Calculate the new range_end\n+    int32_t new_range_end = std::max(m_wallet_descriptor.next_index + (int32_t)target_size, m_wallet_descriptor.range_end);\n+\n+    // If the descriptor is not ranged, we actually just want to fill the first cache item\n+    if (!m_wallet_descriptor.descriptor->IsRange()) {\n+        new_range_end = 1;\n+        m_wallet_descriptor.range_end = 1;\n+        m_wallet_descriptor.range_start = 0;\n+    }\n+\n+    FlatSigningProvider provider;\n+    provider.keys = GetKeys();\n+\n+    WalletBatch batch(m_storage.GetDatabase());\n+    uint256 id = GetID();\n+    for (int32_t i = m_max_cached_index + 1; i < new_range_end; ++i) {\n+        FlatSigningProvider out_keys;\n+        std::vector<CScript> scripts_temp;\n+        DescriptorCache temp_cache;\n+        // Maybe we have a cached xpub and we can expand from the cache first\n+        if (!m_wallet_descriptor.descriptor->ExpandFromCache(i, m_wallet_descriptor.cache, scripts_temp, out_keys)) {\n+            if (!m_wallet_descriptor.descriptor->Expand(i, provider, scripts_temp, out_keys, &temp_cache)) return false;\n+        }\n+        // Add all of the scriptPubKeys to the scriptPubKey set\n+        for (const CScript& script : scripts_temp) {\n+            m_map_script_pub_keys[script] = i;\n+        }\n+        for (const auto& pk_pair : out_keys.pubkeys) {\n+            const CPubKey& pubkey = pk_pair.second;\n+            if (m_map_pubkeys.count(pubkey) != 0) {\n+                // We don't need to give an error here.\n+                // It doesn't matter what index the pubkey has, we just need an index where we can derive it and it's private key\n+                continue;\n+            }\n+            m_map_pubkeys[pubkey] = i;\n+        }\n+        // Write the cache\n+        for (const auto& parent_xpub_pair : temp_cache.GetCachedParentExtPubKeys()) {\n+            CExtPubKey xpub;\n+            if (m_wallet_descriptor.cache.GetCachedParentExtPubKey(parent_xpub_pair.first, xpub)) {\n+                if (xpub != parent_xpub_pair.second) {\n+                    throw std::runtime_error(std::string(__func__) + \": New cached parent xpub does not match already cached parent xpub\");\n+                }\n+                continue;\n+            }\n+            if (!batch.WriteDescriptorParentCache(id, parent_xpub_pair.first, parent_xpub_pair.second)) {\n+                throw std::runtime_error(std::string(__func__) + \": writing cache item failed\");\n+            }\n+            m_wallet_descriptor.cache.CacheParentExtPubKey(parent_xpub_pair.first, parent_xpub_pair.second);\n+        }\n+        for (const auto& derived_xpub_map_pair : temp_cache.GetCachedDerivedExtPubKeys()) {\n+            for (const auto& derived_xpub_pair : derived_xpub_map_pair.second) {\n+                CExtPubKey xpub;\n+                if (m_wallet_descriptor.cache.GetCachedDerivedExtPubKey(derived_xpub_map_pair.first, derived_xpub_pair.first, xpub)) {\n+                    if (xpub != derived_xpub_pair.second) {\n+                        throw std::runtime_error(std::string(__func__) + \": New cached derived xpub does not match already cached derived xpub\");\n+                    }\n+                    continue;\n+                }\n+                if (!batch.WriteDescriptorDerivedCache(id, derived_xpub_map_pair.first, derived_xpub_pair.first, derived_xpub_pair.second)) {\n+                    throw std::runtime_error(std::string(__func__) + \": writing cache item failed\");\n+                }\n+                m_wallet_descriptor.cache.CacheDerivedExtPubKey(derived_xpub_map_pair.first, derived_xpub_pair.first, derived_xpub_pair.second);\n+            }\n+        }\n+        m_max_cached_index++;\n+    }\n+    m_wallet_descriptor.range_end = new_range_end;\n+    batch.WriteDescriptor(GetID(), m_wallet_descriptor);\n+\n+    // By this point, the cache size should be the size of the entire range\n+    assert(m_wallet_descriptor.range_end - 1 == m_max_cached_index);\n+\n+    NotifyCanGetAddressesChanged();\n+    return true;\n+}\n+\n+void DescriptorScriptPubKeyMan::MarkUnusedAddresses(const CScript& script)\n+{\n+    LOCK(cs_desc_man);\n+    if (IsMine(script)) {\n+        int32_t index = m_map_script_pub_keys[script];\n+        if (index >= m_wallet_descriptor.next_index) {\n+            WalletLogPrintf(\"%s: Detected a used keypool item at index %d, mark all keypool items up to this item as used\\n\", __func__, index);\n+            m_wallet_descriptor.next_index = index + 1;\n+        }\n+        if (!TopUp()) {\n+            WalletLogPrintf(\"%s: Topping up keypool failed (locked wallet)\\n\", __func__);\n+        }\n+    }\n+}\n+\n+void DescriptorScriptPubKeyMan::AddDescriptorKey(const CKey& key, const CPubKey &pubkey)\n+{\n+    LOCK(cs_desc_man);\n+    WalletBatch batch(m_storage.GetDatabase());\n+    if (!AddDescriptorKeyWithDB(batch, key, pubkey)) {\n+        throw std::runtime_error(std::string(__func__) + \": writing descriptor private key failed\");\n+    }\n+}\n+\n+bool DescriptorScriptPubKeyMan::AddDescriptorKeyWithDB(WalletBatch& batch, const CKey& key, const CPubKey &pubkey)\n+{\n+    AssertLockHeld(cs_desc_man);\n+    assert(!m_storage.IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS));\n+\n+    if (m_storage.HasEncryptionKeys()) {\n+        if (m_storage.IsLocked()) {\n+            return false;\n+        }\n+\n+        std::vector<unsigned char> crypted_secret;\n+        CKeyingMaterial secret(key.begin(), key.end());\n+        if (!EncryptSecret(m_storage.GetEncryptionKey(), secret, pubkey.GetHash(), crypted_secret)) {\n+            return false;\n+        }\n+\n+        m_map_crypted_keys[pubkey.GetID()] = make_pair(pubkey, crypted_secret);\n+        batch.WriteCryptedDescriptorKey(GetID(), pubkey, crypted_secret);\n+        return true;\n+    } else {\n+        m_map_keys[pubkey.GetID()] = key;\n+        return batch.WriteDescriptorKey(GetID(), pubkey, key.GetPrivKey());\n+    }\n+}\n+\n+bool DescriptorScriptPubKeyMan::SetupDescriptorGeneration(const CExtKey& master_key)\n+{\n+    LOCK(cs_desc_man);\n+    assert(m_storage.IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS));\n+\n+    // Ignore when there is already a descriptor\n+    if (m_wallet_descriptor.descriptor) {\n+        return false;\n+    }\n+\n+    int64_t creation_time = GetTime();\n+\n+    std::string xpub = EncodeExtPubKey(master_key.Neuter());\n+\n+    // Build descriptor string\n+    std::string desc_prefix;\n+    std::string desc_suffix = \"/*)\";\n+    switch (m_address_type) {\n+    case OutputType::LEGACY: {\n+        desc_prefix = \"pkh(\" + xpub + \"/44'\";\n+        break;\n+    }\n+    case OutputType::P2SH_SEGWIT: {\n+        desc_prefix = \"sh(wpkh(\" + xpub + \"/49'\";\n+        desc_suffix += \")\";\n+        break;\n+    }\n+    case OutputType::BECH32: {\n+        desc_prefix = \"wpkh(\" + xpub + \"/84'\";\n+        break;\n+    }\n+    default: assert(false);\n+    }\n+\n+    // Mainnet derives at 0', testnet and regtest derive at 1'\n+    if (Params().IsTestChain()) {\n+        desc_prefix += \"/1'\";\n+    } else {\n+        desc_prefix += \"/0'\";\n+    }\n+\n+    std::string internal_path = m_internal ? \"/1\" : \"/0\";\n+    std::string desc_str = desc_prefix + \"/0'\" + internal_path + desc_suffix;\n+\n+    // Make the descriptor\n+    FlatSigningProvider keys;\n+    std::string error;\n+    std::unique_ptr<Descriptor> desc = Parse(desc_str, keys, error, false);\n+    WalletDescriptor w_desc(std::move(desc), creation_time, 0, 0, 0);\n+    m_wallet_descriptor = w_desc;\n+\n+    // Store the master private key, and descriptor\n+    WalletBatch batch(m_storage.GetDatabase());\n+    if (!AddDescriptorKeyWithDB(batch, master_key.key, master_key.key.GetPubKey())) {\n+        throw std::runtime_error(std::string(__func__) + \": writing descriptor master private key failed\");\n+    }\n+    if (!batch.WriteDescriptor(GetID(), m_wallet_descriptor)) {\n+        throw std::runtime_error(std::string(__func__) + \": writing descriptor failed\");\n+    }\n+\n+    // TopUp\n+    TopUp();\n+\n+    m_storage.UnsetBlankWalletFlag(batch);\n+    return true;\n+}\n+\n+bool DescriptorScriptPubKeyMan::IsHDEnabled() const\n+{\n+    LOCK(cs_desc_man);\n+    return m_wallet_descriptor.descriptor->IsRange();\n+}\n+\n+bool DescriptorScriptPubKeyMan::CanGetAddresses(bool internal) const\n+{\n+    // We can only give out addresses from descriptors that are single type (not combo), ranged,\n+    // and either has cached keys or can generate more keys (ignoring encryption)\n+    LOCK(cs_desc_man);\n+    return m_wallet_descriptor.descriptor->IsSingleType() &&\n+           m_wallet_descriptor.descriptor->IsRange() &&\n+           (HavePrivateKeys() || m_wallet_descriptor.next_index < m_wallet_descriptor.range_end);\n+}\n+\n+bool DescriptorScriptPubKeyMan::HavePrivateKeys() const\n+{\n+    LOCK(cs_desc_man);\n+    return m_map_keys.size() > 0 || m_map_crypted_keys.size() > 0;\n+}\n+\n+int64_t DescriptorScriptPubKeyMan::GetOldestKeyPoolTime() const\n+{\n+    return 0;\n+}\n+\n+size_t DescriptorScriptPubKeyMan::KeypoolCountExternalKeys() const\n+{\n+    if (m_internal) {\n+        return 0;\n+    }\n+    return GetKeyPoolSize();\n+}\n+\n+unsigned int DescriptorScriptPubKeyMan::GetKeyPoolSize() const\n+{\n+    LOCK(cs_desc_man);\n+    return m_wallet_descriptor.range_end - m_wallet_descriptor.next_index;\n+}\n+\n+int64_t DescriptorScriptPubKeyMan::GetTimeFirstKey() const\n+{\n+    LOCK(cs_desc_man);\n+    return m_wallet_descriptor.creation_time;\n+}\n+\n+std::unique_ptr<FlatSigningProvider> DescriptorScriptPubKeyMan::GetSigningProvider(const CScript& script, bool include_private) const\n+{\n+    LOCK(cs_desc_man);\n+\n+    // Find the index of the script\n+    auto it = m_map_script_pub_keys.find(script);\n+    if (it == m_map_script_pub_keys.end()) {\n+        return nullptr;\n+    }\n+    int32_t index = it->second;\n+\n+    return GetSigningProvider(index, include_private);\n+}\n+\n+std::unique_ptr<FlatSigningProvider> DescriptorScriptPubKeyMan::GetSigningProvider(const CPubKey& pubkey) const\n+{\n+    LOCK(cs_desc_man);\n+\n+    // Find index of the pubkey\n+    auto it = m_map_pubkeys.find(pubkey);\n+    if (it == m_map_pubkeys.end()) {\n+        return nullptr;\n+    }\n+    int32_t index = it->second;\n+\n+    // Always try to get the signing provider with private keys. This function should only be called during signing anyways\n+    return GetSigningProvider(index, true);\n+}\n+\n+std::unique_ptr<FlatSigningProvider> DescriptorScriptPubKeyMan::GetSigningProvider(int32_t index, bool include_private) const\n+{\n+    AssertLockHeld(cs_desc_man);\n+    // Get the scripts, keys, and key origins for this script\n+    std::unique_ptr<FlatSigningProvider> out_keys = MakeUnique<FlatSigningProvider>();\n+    std::vector<CScript> scripts_temp;\n+    if (!m_wallet_descriptor.descriptor->ExpandFromCache(index, m_wallet_descriptor.cache, scripts_temp, *out_keys)) return nullptr;\n+\n+    if (HavePrivateKeys() && include_private) {\n+        FlatSigningProvider master_provider;\n+        master_provider.keys = GetKeys();\n+        bool expanded = m_wallet_descriptor.descriptor->ExpandPrivate(index, master_provider, *out_keys);\n+        assert(expanded);\n+    }\n+\n+    return out_keys;\n+}\n+\n+std::unique_ptr<SigningProvider> DescriptorScriptPubKeyMan::GetSolvingProvider(const CScript& script) const\n+{\n+    return GetSigningProvider(script, false);\n+}\n+\n+bool DescriptorScriptPubKeyMan::CanProvide(const CScript& script, SignatureData& sigdata)\n+{\n+    return IsMine(script);\n+}\n+\n+bool DescriptorScriptPubKeyMan::SignTransaction(CMutableTransaction& tx, const std::map<COutPoint, Coin>& coins, int sighash, std::map<int, std::string>& input_errors) const\n+{\n+    std::unique_ptr<FlatSigningProvider> keys = MakeUnique<FlatSigningProvider>();\n+    for (const auto& coin_pair : coins) {\n+        std::unique_ptr<FlatSigningProvider> coin_keys = GetSigningProvider(coin_pair.second.out.scriptPubKey, true);\n+        if (!coin_keys) {\n+            continue;\n+        }\n+        *keys = Merge(*keys, *coin_keys);\n+    }\n+\n+    return ::SignTransaction(tx, keys.get(), coins, sighash, input_errors);\n+}\n+\n+SigningResult DescriptorScriptPubKeyMan::SignMessage(const std::string& message, const PKHash& pkhash, std::string& str_sig) const\n+{\n+    std::unique_ptr<FlatSigningProvider> keys = GetSigningProvider(GetScriptForDestination(pkhash), true);\n+    if (!keys) {\n+        return SigningResult::PRIVATE_KEY_NOT_AVAILABLE;\n+    }\n+\n+    CKeyID key_id(pkhash);\n+    CKey key;\n+    if (!keys->GetKey(key_id, key)) {\n+        return SigningResult::PRIVATE_KEY_NOT_AVAILABLE;\n+    }\n+\n+    if (!MessageSign(key, message, str_sig)) {\n+        return SigningResult::SIGNING_FAILED;\n+    }\n+    return SigningResult::OK;\n+}\n+\n+TransactionError DescriptorScriptPubKeyMan::FillPSBT(PartiallySignedTransaction& psbtx, int sighash_type, bool sign, bool bip32derivs) const\n+{\n+    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+        const CTxIn& txin = psbtx.tx->vin[i];\n+        PSBTInput& input = psbtx.inputs.at(i);\n+\n+        if (PSBTInputSigned(input)) {\n+            continue;\n+        }\n+\n+        // Verify input looks sane. This will check that we have at most one uxto, witness or non-witness.\n+        if (!input.IsSane()) {\n+            return TransactionError::INVALID_PSBT;\n+        }\n+\n+        // Get the Sighash type\n+        if (sign && input.sighash_type > 0 && input.sighash_type != sighash_type) {\n+            return TransactionError::SIGHASH_MISMATCH;\n+        }\n+\n+        // Get the scriptPubKey to know which SigningProvider to use\n+        CScript script;\n+        if (!input.witness_utxo.IsNull()) {\n+            script = input.witness_utxo.scriptPubKey;\n+        } else if (input.non_witness_utxo) {\n+            if (txin.prevout.n >= input.non_witness_utxo->vout.size()) {\n+                return TransactionError::MISSING_INPUTS;\n+            }\n+            script = input.non_witness_utxo->vout[txin.prevout.n].scriptPubKey;\n+        } else {\n+            // There's no UTXO so we can just skip this now\n+            continue;\n+        }\n+        SignatureData sigdata;\n+        input.FillSignatureData(sigdata);\n+\n+        std::unique_ptr<FlatSigningProvider> keys = MakeUnique<FlatSigningProvider>();\n+        std::unique_ptr<FlatSigningProvider> script_keys = GetSigningProvider(script, sign);\n+        if (script_keys) {\n+            *keys = Merge(*keys, *script_keys);\n+        } else {\n+            // Maybe there are pubkeys listed that we can sign for\n+            script_keys = MakeUnique<FlatSigningProvider>();\n+            for (const auto& pk_pair : input.hd_keypaths) {\n+                const CPubKey& pubkey = pk_pair.first;\n+                std::unique_ptr<FlatSigningProvider> pk_keys = GetSigningProvider(pubkey);\n+                if (pk_keys) {\n+                    *keys = Merge(*keys, *pk_keys);\n+                }\n+            }\n+        }\n+\n+        SignPSBTInput(HidingSigningProvider(keys.get(), !sign, !bip32derivs), psbtx, i, sighash_type);\n+    }\n+\n+    // Fill in the bip32 keypaths and redeemscripts for the outputs so that hardware wallets can identify change\n+    for (unsigned int i = 0; i < psbtx.tx->vout.size(); ++i) {\n+        std::unique_ptr<SigningProvider> keys = GetSolvingProvider(psbtx.tx->vout.at(i).scriptPubKey);\n+        if (!keys) {\n+            continue;\n+        }\n+        UpdatePSBTOutput(HidingSigningProvider(keys.get(), true, !bip32derivs), psbtx, i);\n+    }\n+\n+    return TransactionError::OK;\n+}\n+\n+std::unique_ptr<CKeyMetadata> DescriptorScriptPubKeyMan::GetMetadata(const CTxDestination& dest) const\n+{\n+    std::unique_ptr<SigningProvider> provider = GetSigningProvider(GetScriptForDestination(dest));\n+    if (provider) {\n+        KeyOriginInfo orig;\n+        CKeyID key_id = GetKeyForDestination(*provider, dest);\n+        if (provider->GetKeyOrigin(key_id, orig)) {\n+            LOCK(cs_desc_man);\n+            std::unique_ptr<CKeyMetadata> meta = MakeUnique<CKeyMetadata>();\n+            meta->key_origin = orig;\n+            meta->has_key_origin = true;\n+            meta->nCreateTime = m_wallet_descriptor.creation_time;\n+            return meta;\n+        }\n+    }\n+    return nullptr;\n+}\n+\n+uint256 DescriptorScriptPubKeyMan::GetID() const\n+{\n+    LOCK(cs_desc_man);\n+    std::string desc_str = m_wallet_descriptor.descriptor->ToString();\n+    uint256 id;\n+    CSHA256().Write((unsigned char*)desc_str.data(), desc_str.size()).Finalize(id.begin());\n+    return id;\n+}\n+\n+void DescriptorScriptPubKeyMan::SetType(OutputType type, bool internal)\n+{\n+    this->m_address_type = type;\n+    this->m_internal = internal;\n+}\n+\n+void DescriptorScriptPubKeyMan::SetCache(const DescriptorCache& cache)\n+{\n+    LOCK(cs_desc_man);\n+    m_wallet_descriptor.cache = cache;\n+    for (int32_t i = m_wallet_descriptor.range_start; i < m_wallet_descriptor.range_end; ++i) {\n+        FlatSigningProvider out_keys;\n+        std::vector<CScript> scripts_temp;\n+        if (!m_wallet_descriptor.descriptor->ExpandFromCache(i, m_wallet_descriptor.cache, scripts_temp, out_keys)) {\n+            throw std::runtime_error(\"Error: Unable to expand wallet descriptor from cache\");\n+        }\n+        // Add all of the scriptPubKeys to the scriptPubKey set\n+        for (const CScript& script : scripts_temp) {\n+            if (m_map_script_pub_keys.count(script) != 0) {\n+                throw std::runtime_error(strprintf(\"Error: Already loaded script at index %d as being at index %d\", i, m_map_script_pub_keys[script]));\n+            }\n+            m_map_script_pub_keys[script] = i;\n+        }\n+        for (const auto& pk_pair : out_keys.pubkeys) {\n+            const CPubKey& pubkey = pk_pair.second;\n+            if (m_map_pubkeys.count(pubkey) != 0) {\n+                // We don't need to give an error here.\n+                // It doesn't matter what index the pubkey has, we just need an index where we can derive it and it's private key",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 670,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "e75d67d237241c094f425a999a38e00b5fbba635",
      "in_reply_to_id": 404076311,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-04-06T16:29:57Z",
      "updated_at": "2020-04-23T18:00:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r404226835",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/404226835"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2107,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/406967004",
      "pull_request_review_id": 391689544,
      "id": 406967004,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk2NzAwNA==",
      "diff_hunk": "@@ -1231,6 +1231,12 @@ class CWallet final : public WalletStorage, private interfaces::Chain::Notificat\n \n     //! Create new DescriptorScriptPubKeyMans and add them to the wallet\n     void SetupDescriptorScriptPubKeyMans();\n+\n+    //! Return the DescriptorScriptPubKeyMan for a WalletDescriptor if it is already in the wallet\n+    DescriptorScriptPubKeyMan* GetWalletDescriptor(const WalletDescriptor& desc) const;",
      "path": "src/wallet/wallet.h",
      "position": null,
      "original_position": 6,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "a7a814fb59e05423611ff96f9494eaed85cc289c",
      "in_reply_to_id": null,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think this function should be renamed. It is confusing that there is a function by the same name in `DescriptorScriptPubKeyMan` that actually returns a `WalletDescriptor` while this one returns `DescriptorScriptPubKeyMan`. It becomes especially apparent in `ProcessDescriptorImport` where those functions are called within a few lines of code.",
      "created_at": "2020-04-10T22:21:54Z",
      "updated_at": "2020-04-23T18:00:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r406967004",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/406967004"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1236,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/406969347",
      "pull_request_review_id": 391689544,
      "id": 406969347,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk2OTM0Nw==",
      "diff_hunk": "@@ -1553,12 +1549,61 @@ isminetype DescriptorScriptPubKeyMan::IsMine(const CScript& script) const\n \n bool DescriptorScriptPubKeyMan::CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys)\n {\n-    return false;\n+    {",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 34,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "6edf8249ee458d440dc136cb10c5498d32aab96f",
      "in_reply_to_id": null,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think these brackets can be removed since they only exclude the return",
      "created_at": "2020-04-10T22:31:17Z",
      "updated_at": "2020-04-23T18:00:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r406969347",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/406969347"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1550,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/406970255",
      "pull_request_review_id": 391689544,
      "id": 406970255,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk3MDI1NQ==",
      "diff_hunk": "@@ -1852,7 +1852,7 @@ bool DescriptorScriptPubKeyMan::HavePrivateKeys() const\n \n int64_t DescriptorScriptPubKeyMan::GetOldestKeyPoolTime() const\n {\n-    return GetTime();\n+    return 0;",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 404,
      "original_position": 5,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "7cd657406174743281aac05da60dad3f0803f8b8",
      "in_reply_to_id": null,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think this would deserve a comment on why this is always 0. I also thought maybe the `ScriptPubKeyMan` class could do this instead of `GetTime()` so that it would not need to be overridden but I think that would not help clarity of the code.",
      "created_at": "2020-04-10T22:35:03Z",
      "updated_at": "2020-04-23T18:00:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r406970255",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/406970255"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1874,
      "original_line": 1874,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/406973362",
      "pull_request_review_id": 391689544,
      "id": 406973362,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk3MzM2Mg==",
      "diff_hunk": "@@ -3809,10 +3813,15 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n \n         if (!(wallet_creation_flags & (WALLET_FLAG_DISABLE_PRIVATE_KEYS | WALLET_FLAG_BLANK_WALLET))) {\n             LOCK(walletInstance->cs_wallet);\n-            for (auto spk_man : walletInstance->GetActiveScriptPubKeyMans()) {\n-                if (!spk_man->SetupGeneration()) {\n-                    error = _(\"Unable to generate initial keys\").translated;\n-                    return nullptr;\n+            if (walletInstance->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+                walletInstance->SetupDescriptorScriptPubKeyMans();\n+            } else {\n+                // SetupDescriptorScriptPubKeyMans already calls SetupGeneration for us",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 30,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "4049fe4c83689ac47567d497f629e92e855a7235",
      "in_reply_to_id": null,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I found this comment more confusing than helpful here because it explains something about the descriptor code in a non-descriptor code branch. I think it could just be removed.",
      "created_at": "2020-04-10T22:48:26Z",
      "updated_at": "2020-04-23T18:00:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r406973362",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/406973362"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3819,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/406973806",
      "pull_request_review_id": 391689544,
      "id": 406973806,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk3MzgwNg==",
      "diff_hunk": "@@ -1459,3 +1459,302 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n \n     return response;\n }\n+\n+static UniValue ProcessDescriptorImport(CWallet * const pwallet, const UniValue& data, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    UniValue warnings(UniValue::VARR);\n+    UniValue result(UniValue::VOBJ);\n+\n+    try {\n+        if (!data.exists(\"desc\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Descriptor not found.\");\n+        }\n+\n+        const std::string& descriptor = data[\"desc\"].get_str();\n+        const bool active = data.exists(\"active\") ? data[\"active\"].get_bool() : false;\n+        const bool internal = data.exists(\"internal\") ? data[\"internal\"].get_bool() : false;\n+        const std::string& label = data.exists(\"label\") ? data[\"label\"].get_str() : \"\";\n+\n+        // Parse descriptor string\n+        FlatSigningProvider keys;\n+        std::string error;\n+        auto parsed_desc = Parse(descriptor, keys, error, /* require_checksum = */ true);\n+        if (!parsed_desc) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, error);\n+        }\n+\n+        // Range check\n+        int64_t range_start = 0, range_end = 1, next_index = 0;\n+        if (!parsed_desc->IsRange() && data.exists(\"range\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Range should not be specified for an un-ranged descriptor\");\n+        } else if (parsed_desc->IsRange()) {\n+            if (data.exists(\"range\")) {\n+                auto range = ParseDescriptorRange(data[\"range\"]);\n+                range_start = range.first;\n+                range_end = range.second + 1; // Specified range end is inclusive, but we need range end as exclusive\n+            } else {\n+                warnings.push_back(\"Range not given, using default keypool range\");\n+                range_start = 0;\n+                range_end = gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE);\n+            }\n+            next_index = range_start;\n+\n+            if (data.exists(\"next_index\")) {\n+                next_index = data[\"next_index\"].get_int64();\n+                // bound checks\n+                if (next_index < range_start || next_index >= range_end) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"next_index is out of range\");\n+                }\n+            }\n+        }\n+\n+        // Active descriptors must be ranged\n+        if (active && !parsed_desc->IsRange()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Active descriptor must be ranged\");\n+        }\n+\n+        // Ranged descriptors should not have a label\n+        if (data.exists(\"range\") && data.exists(\"label\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Ranged descriptors should not have a label\");\n+        }\n+\n+        // Internal addresses should not have a label either\n+        if (internal && data.exists(\"label\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Internal addresses should not have a label\");\n+        }\n+\n+        // Combo descriptor check\n+        if (active && !parsed_desc->IsSingleType()) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Combo descriptors cannot be set to active\");\n+        }\n+\n+        // If the wallet disabled private keys, abort if private keys exist\n+        if (pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS) && !keys.keys.empty()) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Cannot import private keys to a wallet with private keys disabled\");\n+        }\n+\n+        // Need to ExpandPrvate to check if private keys are available for all pubkeys",
      "path": "src/wallet/rpcdump.cpp",
      "position": null,
      "original_position": 78,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "a7a814fb59e05423611ff96f9494eaed85cc289c",
      "in_reply_to_id": null,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Typo: `ExpandPrvate`",
      "created_at": "2020-04-10T22:50:24Z",
      "updated_at": "2020-04-23T18:00:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r406973806",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/406973806"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1536,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/411023740",
      "pull_request_review_id": 396079792,
      "id": 411023740,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTAyMzc0MA==",
      "diff_hunk": "@@ -1231,6 +1231,12 @@ class CWallet final : public WalletStorage, private interfaces::Chain::Notificat\n \n     //! Create new DescriptorScriptPubKeyMans and add them to the wallet\n     void SetupDescriptorScriptPubKeyMans();\n+\n+    //! Return the DescriptorScriptPubKeyMan for a WalletDescriptor if it is already in the wallet\n+    DescriptorScriptPubKeyMan* GetWalletDescriptor(const WalletDescriptor& desc) const;",
      "path": "src/wallet/wallet.h",
      "position": null,
      "original_position": 6,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "a7a814fb59e05423611ff96f9494eaed85cc289c",
      "in_reply_to_id": 406967004,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Renamed it to `GetDescriptorScriptPubKeyMan`.",
      "created_at": "2020-04-20T00:09:25Z",
      "updated_at": "2020-04-23T18:00:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r411023740",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/411023740"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1236,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/411023748",
      "pull_request_review_id": 396079803,
      "id": 411023748,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTAyMzc0OA==",
      "diff_hunk": "@@ -1553,12 +1549,61 @@ isminetype DescriptorScriptPubKeyMan::IsMine(const CScript& script) const\n \n bool DescriptorScriptPubKeyMan::CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys)\n {\n-    return false;\n+    {",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 34,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "6edf8249ee458d440dc136cb10c5498d32aab96f",
      "in_reply_to_id": 406969347,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-04-20T00:09:31Z",
      "updated_at": "2020-04-23T18:00:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r411023748",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/411023748"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1550,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/411023778",
      "pull_request_review_id": 396079823,
      "id": 411023778,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTAyMzc3OA==",
      "diff_hunk": "@@ -1852,7 +1852,7 @@ bool DescriptorScriptPubKeyMan::HavePrivateKeys() const\n \n int64_t DescriptorScriptPubKeyMan::GetOldestKeyPoolTime() const\n {\n-    return GetTime();\n+    return 0;",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 404,
      "original_position": 5,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "7cd657406174743281aac05da60dad3f0803f8b8",
      "in_reply_to_id": 406970255,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added a comment.",
      "created_at": "2020-04-20T00:09:41Z",
      "updated_at": "2020-04-23T18:00:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r411023778",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/411023778"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1874,
      "original_line": 1874,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/411023823",
      "pull_request_review_id": 396079851,
      "id": 411023823,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTAyMzgyMw==",
      "diff_hunk": "@@ -3809,10 +3813,15 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n \n         if (!(wallet_creation_flags & (WALLET_FLAG_DISABLE_PRIVATE_KEYS | WALLET_FLAG_BLANK_WALLET))) {\n             LOCK(walletInstance->cs_wallet);\n-            for (auto spk_man : walletInstance->GetActiveScriptPubKeyMans()) {\n-                if (!spk_man->SetupGeneration()) {\n-                    error = _(\"Unable to generate initial keys\").translated;\n-                    return nullptr;\n+            if (walletInstance->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+                walletInstance->SetupDescriptorScriptPubKeyMans();\n+            } else {\n+                // SetupDescriptorScriptPubKeyMans already calls SetupGeneration for us",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 30,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "4049fe4c83689ac47567d497f629e92e855a7235",
      "in_reply_to_id": 406973362,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Moved it and added a better one here.",
      "created_at": "2020-04-20T00:09:52Z",
      "updated_at": "2020-04-23T18:00:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r411023823",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/411023823"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3819,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/411023852",
      "pull_request_review_id": 396079864,
      "id": 411023852,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTAyMzg1Mg==",
      "diff_hunk": "@@ -1459,3 +1459,302 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n \n     return response;\n }\n+\n+static UniValue ProcessDescriptorImport(CWallet * const pwallet, const UniValue& data, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    UniValue warnings(UniValue::VARR);\n+    UniValue result(UniValue::VOBJ);\n+\n+    try {\n+        if (!data.exists(\"desc\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Descriptor not found.\");\n+        }\n+\n+        const std::string& descriptor = data[\"desc\"].get_str();\n+        const bool active = data.exists(\"active\") ? data[\"active\"].get_bool() : false;\n+        const bool internal = data.exists(\"internal\") ? data[\"internal\"].get_bool() : false;\n+        const std::string& label = data.exists(\"label\") ? data[\"label\"].get_str() : \"\";\n+\n+        // Parse descriptor string\n+        FlatSigningProvider keys;\n+        std::string error;\n+        auto parsed_desc = Parse(descriptor, keys, error, /* require_checksum = */ true);\n+        if (!parsed_desc) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, error);\n+        }\n+\n+        // Range check\n+        int64_t range_start = 0, range_end = 1, next_index = 0;\n+        if (!parsed_desc->IsRange() && data.exists(\"range\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Range should not be specified for an un-ranged descriptor\");\n+        } else if (parsed_desc->IsRange()) {\n+            if (data.exists(\"range\")) {\n+                auto range = ParseDescriptorRange(data[\"range\"]);\n+                range_start = range.first;\n+                range_end = range.second + 1; // Specified range end is inclusive, but we need range end as exclusive\n+            } else {\n+                warnings.push_back(\"Range not given, using default keypool range\");\n+                range_start = 0;\n+                range_end = gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE);\n+            }\n+            next_index = range_start;\n+\n+            if (data.exists(\"next_index\")) {\n+                next_index = data[\"next_index\"].get_int64();\n+                // bound checks\n+                if (next_index < range_start || next_index >= range_end) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"next_index is out of range\");\n+                }\n+            }\n+        }\n+\n+        // Active descriptors must be ranged\n+        if (active && !parsed_desc->IsRange()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Active descriptor must be ranged\");\n+        }\n+\n+        // Ranged descriptors should not have a label\n+        if (data.exists(\"range\") && data.exists(\"label\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Ranged descriptors should not have a label\");\n+        }\n+\n+        // Internal addresses should not have a label either\n+        if (internal && data.exists(\"label\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Internal addresses should not have a label\");\n+        }\n+\n+        // Combo descriptor check\n+        if (active && !parsed_desc->IsSingleType()) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Combo descriptors cannot be set to active\");\n+        }\n+\n+        // If the wallet disabled private keys, abort if private keys exist\n+        if (pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS) && !keys.keys.empty()) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Cannot import private keys to a wallet with private keys disabled\");\n+        }\n+\n+        // Need to ExpandPrvate to check if private keys are available for all pubkeys",
      "path": "src/wallet/rpcdump.cpp",
      "position": null,
      "original_position": 78,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "a7a814fb59e05423611ff96f9494eaed85cc289c",
      "in_reply_to_id": 406973806,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed",
      "created_at": "2020-04-20T00:09:59Z",
      "updated_at": "2020-04-23T18:00:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r411023852",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/411023852"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1536,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/413240431",
      "pull_request_review_id": 398487187,
      "id": 413240431,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI0MDQzMQ==",
      "diff_hunk": "@@ -1552,12 +1552,61 @@ isminetype DescriptorScriptPubKeyMan::IsMine(const CScript& script) const\n \n bool DescriptorScriptPubKeyMan::CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys)\n {\n-    return false;\n+    {\n+        LOCK(cs_desc_man);\n+        if (!m_map_keys.empty())\n+            return false;\n+\n+        bool keyPass = m_map_crypted_keys.empty(); // Always pass when there are no encrypted keys\n+        bool keyFail = false;\n+        CryptedKeyMap::const_iterator mi = m_map_crypted_keys.begin();\n+        for (; mi != m_map_crypted_keys.end(); ++mi)",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 13,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "8ae9bf12395b558bf53cc0b8d2f4056424908585",
      "in_reply_to_id": 399487630,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In b4c6a40ac46459a679dabbb84b168101e6cd6c5f I suggested `for (const auto& mi : m_map_crypted_keys) {`, which you did, but not it's gone again in `DescriptorScriptPubKeyMan` (it's there in `LegacyScriptPubKeyMan `). Probably not worth touching the code for, but you may to check if you didn't lose anything else.",
      "created_at": "2020-04-22T18:58:17Z",
      "updated_at": "2020-04-23T18:00:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r413240431",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/413240431"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1558,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/413240854",
      "pull_request_review_id": 398487187,
      "id": 413240854,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI0MDg1NA==",
      "diff_hunk": "@@ -1553,12 +1547,61 @@ isminetype DescriptorScriptPubKeyMan::IsMine(const CScript& script) const\n \n bool DescriptorScriptPubKeyMan::CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys)\n {\n-    return false;\n+    {\n+        LOCK(cs_desc_man);\n+        if (!m_map_keys.empty())\n+            return false;",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 66,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "b4c6a40ac46459a679dabbb84b168101e6cd6c5f",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In  b4c6a40, in case you have to touch this, please use brackets or move `return false` directly after `if`.",
      "created_at": "2020-04-22T18:58:58Z",
      "updated_at": "2020-04-23T18:00:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r413240854",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/413240854"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1553,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/413308224",
      "pull_request_review_id": 398562629,
      "id": 413308224,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzMwODIyNA==",
      "diff_hunk": "@@ -1454,3 +1454,297 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n \n     return response;\n }\n+\n+static UniValue ProcessDescriptorImport(CWallet * const pwallet, const UniValue& data, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    UniValue warnings(UniValue::VARR);\n+    UniValue result(UniValue::VOBJ);\n+\n+    try {\n+        if (!data.exists(\"desc\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Descriptor not found.\");\n+        }\n+\n+        const std::string& descriptor = data[\"desc\"].get_str();\n+        const bool active = data.exists(\"active\") ? data[\"active\"].get_bool() : false;\n+        const bool internal = data.exists(\"internal\") ? data[\"internal\"].get_bool() : false;\n+        const std::string& label = data.exists(\"label\") ? data[\"label\"].get_str() : \"\";\n+\n+        // Parse descriptor string\n+        FlatSigningProvider keys;\n+        std::string error;\n+        auto parsed_desc = Parse(descriptor, keys, error, /* require_checksum = */ true);\n+        if (!parsed_desc) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, error);\n+        }\n+\n+        // Range check\n+        int64_t range_start = 0, range_end = 1, next_index = 0;\n+        if (!parsed_desc->IsRange() && data.exists(\"range\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Range should not be specified for an un-ranged descriptor\");\n+        } else if (parsed_desc->IsRange()) {\n+            if (data.exists(\"range\")) {\n+                auto range = ParseDescriptorRange(data[\"range\"]);\n+                range_start = range.first;\n+                range_end = range.second + 1; // Specified range end is inclusive, but we need range end as exclusive\n+            } else {\n+                warnings.push_back(\"Range not given, using default keypool range\");\n+                range_start = 0;\n+                range_end = gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE);\n+            }\n+            next_index = range_start;\n+\n+            if (data.exists(\"next_index\")) {\n+                next_index = data[\"next_index\"].get_int64();\n+                // bound checks\n+                if (next_index < range_start || next_index >= range_end) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"next_index is out of range\");\n+                }\n+            }\n+        }\n+\n+        // Active descriptors must be ranged\n+        if (active && !parsed_desc->IsRange()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Active descriptor must be ranged\");\n+        }\n+\n+        // Ranged descriptors should not have a label\n+        if (data.exists(\"range\") && data.exists(\"label\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Ranged descriptors should not have a label\");\n+        }\n+\n+        // Internal addresses should not have a label either\n+        if (internal && data.exists(\"label\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Internal addresses should not have a label\");\n+        }\n+\n+        // Combo descriptor check\n+        if (active && !parsed_desc->IsSingleType()) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Combo descriptors cannot be set to active\");\n+        }\n+\n+        // If the wallet disabled private keys, abort if private keys exist\n+        if (pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS) && !keys.keys.empty()) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Cannot import private keys to a wallet with private keys disabled\");\n+        }\n+\n+        // Need to ExpandPrivate to check if private keys are available for all pubkeys\n+        FlatSigningProvider expand_keys;\n+        std::vector<CScript> scripts;\n+        parsed_desc->Expand(0, keys, scripts, expand_keys);\n+        parsed_desc->ExpandPrivate(0, keys, expand_keys);\n+\n+        // Check if all private keys are provided\n+        bool have_all_privkeys = !expand_keys.keys.empty();\n+        for (const auto& entry : expand_keys.origins) {\n+            const CKeyID& key_id = entry.first;\n+            CKey key;\n+            if (!expand_keys.GetKey(key_id, key)) {\n+                have_all_privkeys = false;\n+                break;\n+            }\n+        }\n+\n+        // If private keys are enabled, check some things.\n+        if (!pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n+           if (keys.keys.empty()) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Cannot import descriptor without private keys to a wallet with private keys enabled\");\n+           }\n+           if (!have_all_privkeys) {\n+               warnings.push_back(\"Not all private keys provided. Some wallet functionality may return unexpected errors\");\n+           }\n+        }\n+\n+        WalletDescriptor w_desc(std::move(parsed_desc), timestamp, range_start, range_end, next_index);\n+\n+        // Check if the wallet already contains the descriptor\n+        auto existing_spk_manager = pwallet->GetDescriptorScriptPubKeyMan(w_desc);\n+        if (existing_spk_manager) {\n+            LOCK(existing_spk_manager->cs_desc_man);\n+            if (range_start > existing_spk_manager->GetWalletDescriptor().range_start) {\n+                throw JSONRPCError(RPC_INVALID_PARAMS, strprintf(\"range_start can only decrease; current range = [%d,%d]\", existing_spk_manager->GetWalletDescriptor().range_start, existing_spk_manager->GetWalletDescriptor().range_end));\n+            }\n+        }\n+\n+        // Add descriptor to the wallet\n+        auto spk_manager = pwallet->AddWalletDescriptor(w_desc, keys, label);\n+        if (spk_manager == nullptr) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, strprintf(\"Could not add descriptor '%s'\", descriptor));\n+        }\n+\n+        // Set descriptor as active if necessary\n+        if (active) {\n+            if (!w_desc.descriptor->GetOutputType()) {\n+                warnings.push_back(\"Unknown output type, cannot set descriptor to active.\");\n+            } else {\n+                pwallet->SetActiveScriptPubKeyMan(spk_manager->GetID(), *w_desc.descriptor->GetOutputType(), internal);\n+            }\n+        }\n+\n+        result.pushKV(\"success\", UniValue(true));\n+    } catch (const UniValue& e) {\n+        result.pushKV(\"success\", UniValue(false));\n+        result.pushKV(\"error\", e);\n+    } catch (...) {\n+        result.pushKV(\"success\", UniValue(false));\n+\n+        result.pushKV(\"error\", JSONRPCError(RPC_MISC_ERROR, \"Missing required fields\"));\n+    }\n+    if (warnings.size()) result.pushKV(\"warnings\", warnings);\n+    return result;\n+}\n+\n+UniValue importdescriptors(const JSONRPCRequest& main_request) {\n+    // Acquire the wallet\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(main_request);\n+    CWallet* const pwallet = wallet.get();\n+    if (!EnsureWalletIsAvailable(pwallet, main_request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+            RPCHelpMan{\"importdescriptors\",\n+                \"\\nImport descriptors. This will trigger a rescan of the blockchain based on the earliest timestamp of all descriptors being imported. Requires a new wallet backup.\\n\"\n+            \"\\nNote: This call can take over an hour to complete if using an early timestamp, during that time, other rpc calls\\n\"\n+            \"may report that the imported keys, addresses or scripts exists but related transactions are still missing.\\n\",\n+                {\n+                    {\"requests\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"Data to be imported\",\n+                        {\n+                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                                {\n+                                    {\"desc\", RPCArg::Type::STR, RPCArg::Optional::NO, \"Descriptor to import.\"},\n+                                    {\"active\", RPCArg::Type::BOOL, /* default */ \"false\", \"Set this descriptor to be the active descriptor for the corresponding output type/externality\"},\n+                                    {\"range\", RPCArg::Type::RANGE, RPCArg::Optional::OMITTED, \"If a ranged descriptor is used, this specifies the end or the range (in the form [begin,end]) to import\"},\n+                                    {\"next_index\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"If a ranged descriptor is set to active, this specifies the next index to generate addresses from\"},\n+                                    {\"timestamp\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"Time to start rescanning the blockchain for this descriptor, in seconds since epoch (Jan 1 1970 GMT).\\n\"",
      "path": "src/wallet/rpcdump.cpp",
      "position": null,
      "original_position": 165,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "4c841356c2296cc011bcd678ba71ccba28129a67",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "- Use the `UNIX_EPOCH_TIME` constant when describing UNIX epoch time or timestamps\r\n- s/Time to start/Time from which to start/\r\n\r\ne.g.\r\n```diff\r\n- \"Time to start rescanning the blockchain for this descriptor, in seconds since epoch (Jan 1 1970 GMT).\\n\"\r\n+ \"Time from which to start rescanning the blockchain for this descriptor, in \" + UNIX_EPOCH_TIME + \"\\n\"\r\n```",
      "created_at": "2020-04-22T20:31:14Z",
      "updated_at": "2020-04-23T18:00:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r413308224",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/413308224"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1618,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/413315022",
      "pull_request_review_id": 398562629,
      "id": 413315022,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzMxNTAyMg==",
      "diff_hunk": "@@ -1454,3 +1454,297 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n \n     return response;\n }\n+\n+static UniValue ProcessDescriptorImport(CWallet * const pwallet, const UniValue& data, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    UniValue warnings(UniValue::VARR);\n+    UniValue result(UniValue::VOBJ);\n+\n+    try {\n+        if (!data.exists(\"desc\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Descriptor not found.\");\n+        }\n+\n+        const std::string& descriptor = data[\"desc\"].get_str();\n+        const bool active = data.exists(\"active\") ? data[\"active\"].get_bool() : false;\n+        const bool internal = data.exists(\"internal\") ? data[\"internal\"].get_bool() : false;\n+        const std::string& label = data.exists(\"label\") ? data[\"label\"].get_str() : \"\";\n+\n+        // Parse descriptor string\n+        FlatSigningProvider keys;\n+        std::string error;\n+        auto parsed_desc = Parse(descriptor, keys, error, /* require_checksum = */ true);\n+        if (!parsed_desc) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, error);\n+        }\n+\n+        // Range check\n+        int64_t range_start = 0, range_end = 1, next_index = 0;\n+        if (!parsed_desc->IsRange() && data.exists(\"range\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Range should not be specified for an un-ranged descriptor\");\n+        } else if (parsed_desc->IsRange()) {\n+            if (data.exists(\"range\")) {\n+                auto range = ParseDescriptorRange(data[\"range\"]);\n+                range_start = range.first;\n+                range_end = range.second + 1; // Specified range end is inclusive, but we need range end as exclusive\n+            } else {\n+                warnings.push_back(\"Range not given, using default keypool range\");\n+                range_start = 0;\n+                range_end = gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE);\n+            }\n+            next_index = range_start;\n+\n+            if (data.exists(\"next_index\")) {\n+                next_index = data[\"next_index\"].get_int64();\n+                // bound checks\n+                if (next_index < range_start || next_index >= range_end) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"next_index is out of range\");\n+                }\n+            }\n+        }\n+\n+        // Active descriptors must be ranged\n+        if (active && !parsed_desc->IsRange()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Active descriptor must be ranged\");\n+        }\n+\n+        // Ranged descriptors should not have a label\n+        if (data.exists(\"range\") && data.exists(\"label\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Ranged descriptors should not have a label\");\n+        }\n+\n+        // Internal addresses should not have a label either\n+        if (internal && data.exists(\"label\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Internal addresses should not have a label\");\n+        }\n+\n+        // Combo descriptor check\n+        if (active && !parsed_desc->IsSingleType()) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Combo descriptors cannot be set to active\");\n+        }\n+\n+        // If the wallet disabled private keys, abort if private keys exist\n+        if (pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS) && !keys.keys.empty()) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Cannot import private keys to a wallet with private keys disabled\");\n+        }\n+\n+        // Need to ExpandPrivate to check if private keys are available for all pubkeys\n+        FlatSigningProvider expand_keys;\n+        std::vector<CScript> scripts;\n+        parsed_desc->Expand(0, keys, scripts, expand_keys);\n+        parsed_desc->ExpandPrivate(0, keys, expand_keys);\n+\n+        // Check if all private keys are provided\n+        bool have_all_privkeys = !expand_keys.keys.empty();\n+        for (const auto& entry : expand_keys.origins) {\n+            const CKeyID& key_id = entry.first;\n+            CKey key;\n+            if (!expand_keys.GetKey(key_id, key)) {\n+                have_all_privkeys = false;\n+                break;\n+            }\n+        }\n+\n+        // If private keys are enabled, check some things.\n+        if (!pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n+           if (keys.keys.empty()) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Cannot import descriptor without private keys to a wallet with private keys enabled\");\n+           }\n+           if (!have_all_privkeys) {\n+               warnings.push_back(\"Not all private keys provided. Some wallet functionality may return unexpected errors\");\n+           }\n+        }\n+\n+        WalletDescriptor w_desc(std::move(parsed_desc), timestamp, range_start, range_end, next_index);\n+\n+        // Check if the wallet already contains the descriptor\n+        auto existing_spk_manager = pwallet->GetDescriptorScriptPubKeyMan(w_desc);\n+        if (existing_spk_manager) {\n+            LOCK(existing_spk_manager->cs_desc_man);\n+            if (range_start > existing_spk_manager->GetWalletDescriptor().range_start) {\n+                throw JSONRPCError(RPC_INVALID_PARAMS, strprintf(\"range_start can only decrease; current range = [%d,%d]\", existing_spk_manager->GetWalletDescriptor().range_start, existing_spk_manager->GetWalletDescriptor().range_end));\n+            }\n+        }\n+\n+        // Add descriptor to the wallet\n+        auto spk_manager = pwallet->AddWalletDescriptor(w_desc, keys, label);\n+        if (spk_manager == nullptr) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, strprintf(\"Could not add descriptor '%s'\", descriptor));\n+        }\n+\n+        // Set descriptor as active if necessary\n+        if (active) {\n+            if (!w_desc.descriptor->GetOutputType()) {\n+                warnings.push_back(\"Unknown output type, cannot set descriptor to active.\");\n+            } else {\n+                pwallet->SetActiveScriptPubKeyMan(spk_manager->GetID(), *w_desc.descriptor->GetOutputType(), internal);\n+            }\n+        }\n+\n+        result.pushKV(\"success\", UniValue(true));\n+    } catch (const UniValue& e) {\n+        result.pushKV(\"success\", UniValue(false));\n+        result.pushKV(\"error\", e);\n+    } catch (...) {\n+        result.pushKV(\"success\", UniValue(false));\n+\n+        result.pushKV(\"error\", JSONRPCError(RPC_MISC_ERROR, \"Missing required fields\"));\n+    }\n+    if (warnings.size()) result.pushKV(\"warnings\", warnings);\n+    return result;\n+}\n+\n+UniValue importdescriptors(const JSONRPCRequest& main_request) {\n+    // Acquire the wallet\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(main_request);\n+    CWallet* const pwallet = wallet.get();\n+    if (!EnsureWalletIsAvailable(pwallet, main_request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+            RPCHelpMan{\"importdescriptors\",\n+                \"\\nImport descriptors. This will trigger a rescan of the blockchain based on the earliest timestamp of all descriptors being imported. Requires a new wallet backup.\\n\"\n+            \"\\nNote: This call can take over an hour to complete if using an early timestamp, during that time, other rpc calls\\n\"",
      "path": "src/wallet/rpcdump.cpp",
      "position": null,
      "original_position": 154,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "4c841356c2296cc011bcd678ba71ccba28129a67",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: s/timestamp,/timestamp;/",
      "created_at": "2020-04-22T20:42:22Z",
      "updated_at": "2020-04-23T18:00:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r413315022",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/413315022"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1607,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/413315262",
      "pull_request_review_id": 398562629,
      "id": 413315262,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzMxNTI2Mg==",
      "diff_hunk": "@@ -1454,3 +1454,297 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n \n     return response;\n }\n+\n+static UniValue ProcessDescriptorImport(CWallet * const pwallet, const UniValue& data, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    UniValue warnings(UniValue::VARR);\n+    UniValue result(UniValue::VOBJ);\n+\n+    try {\n+        if (!data.exists(\"desc\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Descriptor not found.\");\n+        }\n+\n+        const std::string& descriptor = data[\"desc\"].get_str();\n+        const bool active = data.exists(\"active\") ? data[\"active\"].get_bool() : false;\n+        const bool internal = data.exists(\"internal\") ? data[\"internal\"].get_bool() : false;\n+        const std::string& label = data.exists(\"label\") ? data[\"label\"].get_str() : \"\";\n+\n+        // Parse descriptor string\n+        FlatSigningProvider keys;\n+        std::string error;\n+        auto parsed_desc = Parse(descriptor, keys, error, /* require_checksum = */ true);\n+        if (!parsed_desc) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, error);\n+        }\n+\n+        // Range check\n+        int64_t range_start = 0, range_end = 1, next_index = 0;\n+        if (!parsed_desc->IsRange() && data.exists(\"range\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Range should not be specified for an un-ranged descriptor\");\n+        } else if (parsed_desc->IsRange()) {\n+            if (data.exists(\"range\")) {\n+                auto range = ParseDescriptorRange(data[\"range\"]);\n+                range_start = range.first;\n+                range_end = range.second + 1; // Specified range end is inclusive, but we need range end as exclusive\n+            } else {\n+                warnings.push_back(\"Range not given, using default keypool range\");\n+                range_start = 0;\n+                range_end = gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE);\n+            }\n+            next_index = range_start;\n+\n+            if (data.exists(\"next_index\")) {\n+                next_index = data[\"next_index\"].get_int64();\n+                // bound checks\n+                if (next_index < range_start || next_index >= range_end) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"next_index is out of range\");\n+                }\n+            }\n+        }\n+\n+        // Active descriptors must be ranged\n+        if (active && !parsed_desc->IsRange()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Active descriptor must be ranged\");\n+        }\n+\n+        // Ranged descriptors should not have a label\n+        if (data.exists(\"range\") && data.exists(\"label\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Ranged descriptors should not have a label\");\n+        }\n+\n+        // Internal addresses should not have a label either\n+        if (internal && data.exists(\"label\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Internal addresses should not have a label\");\n+        }\n+\n+        // Combo descriptor check\n+        if (active && !parsed_desc->IsSingleType()) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Combo descriptors cannot be set to active\");\n+        }\n+\n+        // If the wallet disabled private keys, abort if private keys exist\n+        if (pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS) && !keys.keys.empty()) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Cannot import private keys to a wallet with private keys disabled\");\n+        }\n+\n+        // Need to ExpandPrivate to check if private keys are available for all pubkeys\n+        FlatSigningProvider expand_keys;\n+        std::vector<CScript> scripts;\n+        parsed_desc->Expand(0, keys, scripts, expand_keys);\n+        parsed_desc->ExpandPrivate(0, keys, expand_keys);\n+\n+        // Check if all private keys are provided\n+        bool have_all_privkeys = !expand_keys.keys.empty();\n+        for (const auto& entry : expand_keys.origins) {\n+            const CKeyID& key_id = entry.first;\n+            CKey key;\n+            if (!expand_keys.GetKey(key_id, key)) {\n+                have_all_privkeys = false;\n+                break;\n+            }\n+        }\n+\n+        // If private keys are enabled, check some things.\n+        if (!pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n+           if (keys.keys.empty()) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Cannot import descriptor without private keys to a wallet with private keys enabled\");\n+           }\n+           if (!have_all_privkeys) {\n+               warnings.push_back(\"Not all private keys provided. Some wallet functionality may return unexpected errors\");\n+           }\n+        }\n+\n+        WalletDescriptor w_desc(std::move(parsed_desc), timestamp, range_start, range_end, next_index);\n+\n+        // Check if the wallet already contains the descriptor\n+        auto existing_spk_manager = pwallet->GetDescriptorScriptPubKeyMan(w_desc);\n+        if (existing_spk_manager) {\n+            LOCK(existing_spk_manager->cs_desc_man);\n+            if (range_start > existing_spk_manager->GetWalletDescriptor().range_start) {\n+                throw JSONRPCError(RPC_INVALID_PARAMS, strprintf(\"range_start can only decrease; current range = [%d,%d]\", existing_spk_manager->GetWalletDescriptor().range_start, existing_spk_manager->GetWalletDescriptor().range_end));\n+            }\n+        }\n+\n+        // Add descriptor to the wallet\n+        auto spk_manager = pwallet->AddWalletDescriptor(w_desc, keys, label);\n+        if (spk_manager == nullptr) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, strprintf(\"Could not add descriptor '%s'\", descriptor));\n+        }\n+\n+        // Set descriptor as active if necessary\n+        if (active) {\n+            if (!w_desc.descriptor->GetOutputType()) {\n+                warnings.push_back(\"Unknown output type, cannot set descriptor to active.\");\n+            } else {\n+                pwallet->SetActiveScriptPubKeyMan(spk_manager->GetID(), *w_desc.descriptor->GetOutputType(), internal);\n+            }\n+        }\n+\n+        result.pushKV(\"success\", UniValue(true));\n+    } catch (const UniValue& e) {\n+        result.pushKV(\"success\", UniValue(false));\n+        result.pushKV(\"error\", e);\n+    } catch (...) {\n+        result.pushKV(\"success\", UniValue(false));\n+\n+        result.pushKV(\"error\", JSONRPCError(RPC_MISC_ERROR, \"Missing required fields\"));\n+    }\n+    if (warnings.size()) result.pushKV(\"warnings\", warnings);\n+    return result;\n+}\n+\n+UniValue importdescriptors(const JSONRPCRequest& main_request) {\n+    // Acquire the wallet\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(main_request);\n+    CWallet* const pwallet = wallet.get();\n+    if (!EnsureWalletIsAvailable(pwallet, main_request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+            RPCHelpMan{\"importdescriptors\",\n+                \"\\nImport descriptors. This will trigger a rescan of the blockchain based on the earliest timestamp of all descriptors being imported. Requires a new wallet backup.\\n\"\n+            \"\\nNote: This call can take over an hour to complete if using an early timestamp, during that time, other rpc calls\\n\"\n+            \"may report that the imported keys, addresses or scripts exists but related transactions are still missing.\\n\",",
      "path": "src/wallet/rpcdump.cpp",
      "position": null,
      "original_position": 155,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "4c841356c2296cc011bcd678ba71ccba28129a67",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "s/exists/exist/",
      "created_at": "2020-04-22T20:42:47Z",
      "updated_at": "2020-04-23T18:00:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r413315262",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/413315262"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1608,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/413365313",
      "pull_request_review_id": 398623854,
      "id": 413365313,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM2NTMxMw==",
      "diff_hunk": "@@ -1552,12 +1552,61 @@ isminetype DescriptorScriptPubKeyMan::IsMine(const CScript& script) const\n \n bool DescriptorScriptPubKeyMan::CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys)\n {\n-    return false;\n+    {\n+        LOCK(cs_desc_man);\n+        if (!m_map_keys.empty())\n+            return false;\n+\n+        bool keyPass = m_map_crypted_keys.empty(); // Always pass when there are no encrypted keys\n+        bool keyFail = false;\n+        CryptedKeyMap::const_iterator mi = m_map_crypted_keys.begin();\n+        for (; mi != m_map_crypted_keys.end(); ++mi)",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 13,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "8ae9bf12395b558bf53cc0b8d2f4056424908585",
      "in_reply_to_id": 399487630,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "No, it seems like I've accidentally applied that change to `LegacyScriptPubKeyMan`. Applied these changes to the right place.",
      "created_at": "2020-04-22T22:06:26Z",
      "updated_at": "2020-04-23T18:00:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r413365313",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/413365313"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1558,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/413365384",
      "pull_request_review_id": 398623931,
      "id": 413365384,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM2NTM4NA==",
      "diff_hunk": "@@ -1454,3 +1454,297 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n \n     return response;\n }\n+\n+static UniValue ProcessDescriptorImport(CWallet * const pwallet, const UniValue& data, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    UniValue warnings(UniValue::VARR);\n+    UniValue result(UniValue::VOBJ);\n+\n+    try {\n+        if (!data.exists(\"desc\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Descriptor not found.\");\n+        }\n+\n+        const std::string& descriptor = data[\"desc\"].get_str();\n+        const bool active = data.exists(\"active\") ? data[\"active\"].get_bool() : false;\n+        const bool internal = data.exists(\"internal\") ? data[\"internal\"].get_bool() : false;\n+        const std::string& label = data.exists(\"label\") ? data[\"label\"].get_str() : \"\";\n+\n+        // Parse descriptor string\n+        FlatSigningProvider keys;\n+        std::string error;\n+        auto parsed_desc = Parse(descriptor, keys, error, /* require_checksum = */ true);\n+        if (!parsed_desc) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, error);\n+        }\n+\n+        // Range check\n+        int64_t range_start = 0, range_end = 1, next_index = 0;\n+        if (!parsed_desc->IsRange() && data.exists(\"range\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Range should not be specified for an un-ranged descriptor\");\n+        } else if (parsed_desc->IsRange()) {\n+            if (data.exists(\"range\")) {\n+                auto range = ParseDescriptorRange(data[\"range\"]);\n+                range_start = range.first;\n+                range_end = range.second + 1; // Specified range end is inclusive, but we need range end as exclusive\n+            } else {\n+                warnings.push_back(\"Range not given, using default keypool range\");\n+                range_start = 0;\n+                range_end = gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE);\n+            }\n+            next_index = range_start;\n+\n+            if (data.exists(\"next_index\")) {\n+                next_index = data[\"next_index\"].get_int64();\n+                // bound checks\n+                if (next_index < range_start || next_index >= range_end) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"next_index is out of range\");\n+                }\n+            }\n+        }\n+\n+        // Active descriptors must be ranged\n+        if (active && !parsed_desc->IsRange()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Active descriptor must be ranged\");\n+        }\n+\n+        // Ranged descriptors should not have a label\n+        if (data.exists(\"range\") && data.exists(\"label\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Ranged descriptors should not have a label\");\n+        }\n+\n+        // Internal addresses should not have a label either\n+        if (internal && data.exists(\"label\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Internal addresses should not have a label\");\n+        }\n+\n+        // Combo descriptor check\n+        if (active && !parsed_desc->IsSingleType()) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Combo descriptors cannot be set to active\");\n+        }\n+\n+        // If the wallet disabled private keys, abort if private keys exist\n+        if (pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS) && !keys.keys.empty()) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Cannot import private keys to a wallet with private keys disabled\");\n+        }\n+\n+        // Need to ExpandPrivate to check if private keys are available for all pubkeys\n+        FlatSigningProvider expand_keys;\n+        std::vector<CScript> scripts;\n+        parsed_desc->Expand(0, keys, scripts, expand_keys);\n+        parsed_desc->ExpandPrivate(0, keys, expand_keys);\n+\n+        // Check if all private keys are provided\n+        bool have_all_privkeys = !expand_keys.keys.empty();\n+        for (const auto& entry : expand_keys.origins) {\n+            const CKeyID& key_id = entry.first;\n+            CKey key;\n+            if (!expand_keys.GetKey(key_id, key)) {\n+                have_all_privkeys = false;\n+                break;\n+            }\n+        }\n+\n+        // If private keys are enabled, check some things.\n+        if (!pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n+           if (keys.keys.empty()) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Cannot import descriptor without private keys to a wallet with private keys enabled\");\n+           }\n+           if (!have_all_privkeys) {\n+               warnings.push_back(\"Not all private keys provided. Some wallet functionality may return unexpected errors\");\n+           }\n+        }\n+\n+        WalletDescriptor w_desc(std::move(parsed_desc), timestamp, range_start, range_end, next_index);\n+\n+        // Check if the wallet already contains the descriptor\n+        auto existing_spk_manager = pwallet->GetDescriptorScriptPubKeyMan(w_desc);\n+        if (existing_spk_manager) {\n+            LOCK(existing_spk_manager->cs_desc_man);\n+            if (range_start > existing_spk_manager->GetWalletDescriptor().range_start) {\n+                throw JSONRPCError(RPC_INVALID_PARAMS, strprintf(\"range_start can only decrease; current range = [%d,%d]\", existing_spk_manager->GetWalletDescriptor().range_start, existing_spk_manager->GetWalletDescriptor().range_end));\n+            }\n+        }\n+\n+        // Add descriptor to the wallet\n+        auto spk_manager = pwallet->AddWalletDescriptor(w_desc, keys, label);\n+        if (spk_manager == nullptr) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, strprintf(\"Could not add descriptor '%s'\", descriptor));\n+        }\n+\n+        // Set descriptor as active if necessary\n+        if (active) {\n+            if (!w_desc.descriptor->GetOutputType()) {\n+                warnings.push_back(\"Unknown output type, cannot set descriptor to active.\");\n+            } else {\n+                pwallet->SetActiveScriptPubKeyMan(spk_manager->GetID(), *w_desc.descriptor->GetOutputType(), internal);\n+            }\n+        }\n+\n+        result.pushKV(\"success\", UniValue(true));\n+    } catch (const UniValue& e) {\n+        result.pushKV(\"success\", UniValue(false));\n+        result.pushKV(\"error\", e);\n+    } catch (...) {\n+        result.pushKV(\"success\", UniValue(false));\n+\n+        result.pushKV(\"error\", JSONRPCError(RPC_MISC_ERROR, \"Missing required fields\"));\n+    }\n+    if (warnings.size()) result.pushKV(\"warnings\", warnings);\n+    return result;\n+}\n+\n+UniValue importdescriptors(const JSONRPCRequest& main_request) {\n+    // Acquire the wallet\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(main_request);\n+    CWallet* const pwallet = wallet.get();\n+    if (!EnsureWalletIsAvailable(pwallet, main_request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+            RPCHelpMan{\"importdescriptors\",\n+                \"\\nImport descriptors. This will trigger a rescan of the blockchain based on the earliest timestamp of all descriptors being imported. Requires a new wallet backup.\\n\"\n+            \"\\nNote: This call can take over an hour to complete if using an early timestamp, during that time, other rpc calls\\n\"\n+            \"may report that the imported keys, addresses or scripts exists but related transactions are still missing.\\n\",\n+                {\n+                    {\"requests\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"Data to be imported\",\n+                        {\n+                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                                {\n+                                    {\"desc\", RPCArg::Type::STR, RPCArg::Optional::NO, \"Descriptor to import.\"},\n+                                    {\"active\", RPCArg::Type::BOOL, /* default */ \"false\", \"Set this descriptor to be the active descriptor for the corresponding output type/externality\"},\n+                                    {\"range\", RPCArg::Type::RANGE, RPCArg::Optional::OMITTED, \"If a ranged descriptor is used, this specifies the end or the range (in the form [begin,end]) to import\"},\n+                                    {\"next_index\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"If a ranged descriptor is set to active, this specifies the next index to generate addresses from\"},\n+                                    {\"timestamp\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"Time to start rescanning the blockchain for this descriptor, in seconds since epoch (Jan 1 1970 GMT).\\n\"",
      "path": "src/wallet/rpcdump.cpp",
      "position": null,
      "original_position": 165,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "4c841356c2296cc011bcd678ba71ccba28129a67",
      "in_reply_to_id": 413308224,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-04-22T22:06:36Z",
      "updated_at": "2020-04-23T18:00:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r413365384",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/413365384"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1618,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/413365432",
      "pull_request_review_id": 398623981,
      "id": 413365432,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM2NTQzMg==",
      "diff_hunk": "@@ -1454,3 +1454,297 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n \n     return response;\n }\n+\n+static UniValue ProcessDescriptorImport(CWallet * const pwallet, const UniValue& data, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    UniValue warnings(UniValue::VARR);\n+    UniValue result(UniValue::VOBJ);\n+\n+    try {\n+        if (!data.exists(\"desc\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Descriptor not found.\");\n+        }\n+\n+        const std::string& descriptor = data[\"desc\"].get_str();\n+        const bool active = data.exists(\"active\") ? data[\"active\"].get_bool() : false;\n+        const bool internal = data.exists(\"internal\") ? data[\"internal\"].get_bool() : false;\n+        const std::string& label = data.exists(\"label\") ? data[\"label\"].get_str() : \"\";\n+\n+        // Parse descriptor string\n+        FlatSigningProvider keys;\n+        std::string error;\n+        auto parsed_desc = Parse(descriptor, keys, error, /* require_checksum = */ true);\n+        if (!parsed_desc) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, error);\n+        }\n+\n+        // Range check\n+        int64_t range_start = 0, range_end = 1, next_index = 0;\n+        if (!parsed_desc->IsRange() && data.exists(\"range\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Range should not be specified for an un-ranged descriptor\");\n+        } else if (parsed_desc->IsRange()) {\n+            if (data.exists(\"range\")) {\n+                auto range = ParseDescriptorRange(data[\"range\"]);\n+                range_start = range.first;\n+                range_end = range.second + 1; // Specified range end is inclusive, but we need range end as exclusive\n+            } else {\n+                warnings.push_back(\"Range not given, using default keypool range\");\n+                range_start = 0;\n+                range_end = gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE);\n+            }\n+            next_index = range_start;\n+\n+            if (data.exists(\"next_index\")) {\n+                next_index = data[\"next_index\"].get_int64();\n+                // bound checks\n+                if (next_index < range_start || next_index >= range_end) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"next_index is out of range\");\n+                }\n+            }\n+        }\n+\n+        // Active descriptors must be ranged\n+        if (active && !parsed_desc->IsRange()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Active descriptor must be ranged\");\n+        }\n+\n+        // Ranged descriptors should not have a label\n+        if (data.exists(\"range\") && data.exists(\"label\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Ranged descriptors should not have a label\");\n+        }\n+\n+        // Internal addresses should not have a label either\n+        if (internal && data.exists(\"label\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Internal addresses should not have a label\");\n+        }\n+\n+        // Combo descriptor check\n+        if (active && !parsed_desc->IsSingleType()) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Combo descriptors cannot be set to active\");\n+        }\n+\n+        // If the wallet disabled private keys, abort if private keys exist\n+        if (pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS) && !keys.keys.empty()) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Cannot import private keys to a wallet with private keys disabled\");\n+        }\n+\n+        // Need to ExpandPrivate to check if private keys are available for all pubkeys\n+        FlatSigningProvider expand_keys;\n+        std::vector<CScript> scripts;\n+        parsed_desc->Expand(0, keys, scripts, expand_keys);\n+        parsed_desc->ExpandPrivate(0, keys, expand_keys);\n+\n+        // Check if all private keys are provided\n+        bool have_all_privkeys = !expand_keys.keys.empty();\n+        for (const auto& entry : expand_keys.origins) {\n+            const CKeyID& key_id = entry.first;\n+            CKey key;\n+            if (!expand_keys.GetKey(key_id, key)) {\n+                have_all_privkeys = false;\n+                break;\n+            }\n+        }\n+\n+        // If private keys are enabled, check some things.\n+        if (!pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n+           if (keys.keys.empty()) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Cannot import descriptor without private keys to a wallet with private keys enabled\");\n+           }\n+           if (!have_all_privkeys) {\n+               warnings.push_back(\"Not all private keys provided. Some wallet functionality may return unexpected errors\");\n+           }\n+        }\n+\n+        WalletDescriptor w_desc(std::move(parsed_desc), timestamp, range_start, range_end, next_index);\n+\n+        // Check if the wallet already contains the descriptor\n+        auto existing_spk_manager = pwallet->GetDescriptorScriptPubKeyMan(w_desc);\n+        if (existing_spk_manager) {\n+            LOCK(existing_spk_manager->cs_desc_man);\n+            if (range_start > existing_spk_manager->GetWalletDescriptor().range_start) {\n+                throw JSONRPCError(RPC_INVALID_PARAMS, strprintf(\"range_start can only decrease; current range = [%d,%d]\", existing_spk_manager->GetWalletDescriptor().range_start, existing_spk_manager->GetWalletDescriptor().range_end));\n+            }\n+        }\n+\n+        // Add descriptor to the wallet\n+        auto spk_manager = pwallet->AddWalletDescriptor(w_desc, keys, label);\n+        if (spk_manager == nullptr) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, strprintf(\"Could not add descriptor '%s'\", descriptor));\n+        }\n+\n+        // Set descriptor as active if necessary\n+        if (active) {\n+            if (!w_desc.descriptor->GetOutputType()) {\n+                warnings.push_back(\"Unknown output type, cannot set descriptor to active.\");\n+            } else {\n+                pwallet->SetActiveScriptPubKeyMan(spk_manager->GetID(), *w_desc.descriptor->GetOutputType(), internal);\n+            }\n+        }\n+\n+        result.pushKV(\"success\", UniValue(true));\n+    } catch (const UniValue& e) {\n+        result.pushKV(\"success\", UniValue(false));\n+        result.pushKV(\"error\", e);\n+    } catch (...) {\n+        result.pushKV(\"success\", UniValue(false));\n+\n+        result.pushKV(\"error\", JSONRPCError(RPC_MISC_ERROR, \"Missing required fields\"));\n+    }\n+    if (warnings.size()) result.pushKV(\"warnings\", warnings);\n+    return result;\n+}\n+\n+UniValue importdescriptors(const JSONRPCRequest& main_request) {\n+    // Acquire the wallet\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(main_request);\n+    CWallet* const pwallet = wallet.get();\n+    if (!EnsureWalletIsAvailable(pwallet, main_request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+            RPCHelpMan{\"importdescriptors\",\n+                \"\\nImport descriptors. This will trigger a rescan of the blockchain based on the earliest timestamp of all descriptors being imported. Requires a new wallet backup.\\n\"\n+            \"\\nNote: This call can take over an hour to complete if using an early timestamp, during that time, other rpc calls\\n\"",
      "path": "src/wallet/rpcdump.cpp",
      "position": null,
      "original_position": 154,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "4c841356c2296cc011bcd678ba71ccba28129a67",
      "in_reply_to_id": 413315022,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-04-22T22:06:40Z",
      "updated_at": "2020-04-23T18:00:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r413365432",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/413365432"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1607,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/413365483",
      "pull_request_review_id": 398624038,
      "id": 413365483,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM2NTQ4Mw==",
      "diff_hunk": "@@ -1454,3 +1454,297 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n \n     return response;\n }\n+\n+static UniValue ProcessDescriptorImport(CWallet * const pwallet, const UniValue& data, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    UniValue warnings(UniValue::VARR);\n+    UniValue result(UniValue::VOBJ);\n+\n+    try {\n+        if (!data.exists(\"desc\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Descriptor not found.\");\n+        }\n+\n+        const std::string& descriptor = data[\"desc\"].get_str();\n+        const bool active = data.exists(\"active\") ? data[\"active\"].get_bool() : false;\n+        const bool internal = data.exists(\"internal\") ? data[\"internal\"].get_bool() : false;\n+        const std::string& label = data.exists(\"label\") ? data[\"label\"].get_str() : \"\";\n+\n+        // Parse descriptor string\n+        FlatSigningProvider keys;\n+        std::string error;\n+        auto parsed_desc = Parse(descriptor, keys, error, /* require_checksum = */ true);\n+        if (!parsed_desc) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, error);\n+        }\n+\n+        // Range check\n+        int64_t range_start = 0, range_end = 1, next_index = 0;\n+        if (!parsed_desc->IsRange() && data.exists(\"range\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Range should not be specified for an un-ranged descriptor\");\n+        } else if (parsed_desc->IsRange()) {\n+            if (data.exists(\"range\")) {\n+                auto range = ParseDescriptorRange(data[\"range\"]);\n+                range_start = range.first;\n+                range_end = range.second + 1; // Specified range end is inclusive, but we need range end as exclusive\n+            } else {\n+                warnings.push_back(\"Range not given, using default keypool range\");\n+                range_start = 0;\n+                range_end = gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE);\n+            }\n+            next_index = range_start;\n+\n+            if (data.exists(\"next_index\")) {\n+                next_index = data[\"next_index\"].get_int64();\n+                // bound checks\n+                if (next_index < range_start || next_index >= range_end) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"next_index is out of range\");\n+                }\n+            }\n+        }\n+\n+        // Active descriptors must be ranged\n+        if (active && !parsed_desc->IsRange()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Active descriptor must be ranged\");\n+        }\n+\n+        // Ranged descriptors should not have a label\n+        if (data.exists(\"range\") && data.exists(\"label\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Ranged descriptors should not have a label\");\n+        }\n+\n+        // Internal addresses should not have a label either\n+        if (internal && data.exists(\"label\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Internal addresses should not have a label\");\n+        }\n+\n+        // Combo descriptor check\n+        if (active && !parsed_desc->IsSingleType()) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Combo descriptors cannot be set to active\");\n+        }\n+\n+        // If the wallet disabled private keys, abort if private keys exist\n+        if (pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS) && !keys.keys.empty()) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Cannot import private keys to a wallet with private keys disabled\");\n+        }\n+\n+        // Need to ExpandPrivate to check if private keys are available for all pubkeys\n+        FlatSigningProvider expand_keys;\n+        std::vector<CScript> scripts;\n+        parsed_desc->Expand(0, keys, scripts, expand_keys);\n+        parsed_desc->ExpandPrivate(0, keys, expand_keys);\n+\n+        // Check if all private keys are provided\n+        bool have_all_privkeys = !expand_keys.keys.empty();\n+        for (const auto& entry : expand_keys.origins) {\n+            const CKeyID& key_id = entry.first;\n+            CKey key;\n+            if (!expand_keys.GetKey(key_id, key)) {\n+                have_all_privkeys = false;\n+                break;\n+            }\n+        }\n+\n+        // If private keys are enabled, check some things.\n+        if (!pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n+           if (keys.keys.empty()) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Cannot import descriptor without private keys to a wallet with private keys enabled\");\n+           }\n+           if (!have_all_privkeys) {\n+               warnings.push_back(\"Not all private keys provided. Some wallet functionality may return unexpected errors\");\n+           }\n+        }\n+\n+        WalletDescriptor w_desc(std::move(parsed_desc), timestamp, range_start, range_end, next_index);\n+\n+        // Check if the wallet already contains the descriptor\n+        auto existing_spk_manager = pwallet->GetDescriptorScriptPubKeyMan(w_desc);\n+        if (existing_spk_manager) {\n+            LOCK(existing_spk_manager->cs_desc_man);\n+            if (range_start > existing_spk_manager->GetWalletDescriptor().range_start) {\n+                throw JSONRPCError(RPC_INVALID_PARAMS, strprintf(\"range_start can only decrease; current range = [%d,%d]\", existing_spk_manager->GetWalletDescriptor().range_start, existing_spk_manager->GetWalletDescriptor().range_end));\n+            }\n+        }\n+\n+        // Add descriptor to the wallet\n+        auto spk_manager = pwallet->AddWalletDescriptor(w_desc, keys, label);\n+        if (spk_manager == nullptr) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, strprintf(\"Could not add descriptor '%s'\", descriptor));\n+        }\n+\n+        // Set descriptor as active if necessary\n+        if (active) {\n+            if (!w_desc.descriptor->GetOutputType()) {\n+                warnings.push_back(\"Unknown output type, cannot set descriptor to active.\");\n+            } else {\n+                pwallet->SetActiveScriptPubKeyMan(spk_manager->GetID(), *w_desc.descriptor->GetOutputType(), internal);\n+            }\n+        }\n+\n+        result.pushKV(\"success\", UniValue(true));\n+    } catch (const UniValue& e) {\n+        result.pushKV(\"success\", UniValue(false));\n+        result.pushKV(\"error\", e);\n+    } catch (...) {\n+        result.pushKV(\"success\", UniValue(false));\n+\n+        result.pushKV(\"error\", JSONRPCError(RPC_MISC_ERROR, \"Missing required fields\"));\n+    }\n+    if (warnings.size()) result.pushKV(\"warnings\", warnings);\n+    return result;\n+}\n+\n+UniValue importdescriptors(const JSONRPCRequest& main_request) {\n+    // Acquire the wallet\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(main_request);\n+    CWallet* const pwallet = wallet.get();\n+    if (!EnsureWalletIsAvailable(pwallet, main_request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+            RPCHelpMan{\"importdescriptors\",\n+                \"\\nImport descriptors. This will trigger a rescan of the blockchain based on the earliest timestamp of all descriptors being imported. Requires a new wallet backup.\\n\"\n+            \"\\nNote: This call can take over an hour to complete if using an early timestamp, during that time, other rpc calls\\n\"\n+            \"may report that the imported keys, addresses or scripts exists but related transactions are still missing.\\n\",",
      "path": "src/wallet/rpcdump.cpp",
      "position": null,
      "original_position": 155,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "4c841356c2296cc011bcd678ba71ccba28129a67",
      "in_reply_to_id": 413315262,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-04-22T22:06:47Z",
      "updated_at": "2020-04-23T18:00:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r413365483",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/413365483"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1608,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/413365541",
      "pull_request_review_id": 398624111,
      "id": 413365541,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM2NTU0MQ==",
      "diff_hunk": "@@ -1553,12 +1547,61 @@ isminetype DescriptorScriptPubKeyMan::IsMine(const CScript& script) const\n \n bool DescriptorScriptPubKeyMan::CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys)\n {\n-    return false;\n+    {\n+        LOCK(cs_desc_man);\n+        if (!m_map_keys.empty())\n+            return false;",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 66,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "b4c6a40ac46459a679dabbb84b168101e6cd6c5f",
      "in_reply_to_id": 413240854,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-04-22T22:06:54Z",
      "updated_at": "2020-04-23T18:00:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r413365541",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/413365541"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1553,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/413622392",
      "pull_request_review_id": 398879068,
      "id": 413622392,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzYyMjM5Mg==",
      "diff_hunk": "@@ -27,8 +27,10 @@ const std::string CRYPTED_KEY{\"ckey\"};\n const std::string CSCRIPT{\"cscript\"};\n const std::string DEFAULTKEY{\"defaultkey\"};\n const std::string DESTDATA{\"destdata\"};\n+const std::string ACTIVEEXTERNALSPK{\"activeexternalspk\"};\n const std::string FLAGS{\"flags\"};\n const std::string HDCHAIN{\"hdchain\"};\n+const std::string ACTIVEINTERNALSPK{\"activeinternalspk\"};",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 7,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "ed0113820b498f1e904ca9a0b1205708a6f68dca",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: here and in `walletdb.h` I'm curious why `ACTIVEEXTERNALSPK` AND `ACTIVEINTERNALSPK` are placed here rather than sorted like the others... maybe sort, or comment why",
      "created_at": "2020-04-23T08:34:58Z",
      "updated_at": "2020-04-23T18:00:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r413622392",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/413622392"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 33,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/413629727",
      "pull_request_review_id": 398879068,
      "id": 413629727,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzYyOTcyNw==",
      "diff_hunk": "@@ -179,6 +185,54 @@ bool WalletBatch::WriteMinVersion(int nVersion)\n     return WriteIC(DBKeys::MINVERSION, nVersion);\n }\n \n+bool WalletBatch::WriteActiveScriptPubKeyMan(uint8_t type, const uint256& id, bool internal)\n+{\n+    std::string key = DBKeys::ACTIVEEXTERNALSPK;\n+    if (internal) {\n+        key = DBKeys::ACTIVEINTERNALSPK;\n+    }",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 31,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "ed0113820b498f1e904ca9a0b1205708a6f68dca",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit suggestion\r\n```diff\r\n-    std::string key = DBKeys::ACTIVEEXTERNALSPK;\r\n-    if (internal) {\r\n-        key = DBKeys::ACTIVEINTERNALSPK;\r\n-    }\r\n+    std::string key;\r\n+    key = internal ? DBKeys::ACTIVEINTERNALSPK : DBKeys::ACTIVEEXTERNALSPK;\r\n```\r\nlike what you do below line 473",
      "created_at": "2020-04-23T08:45:16Z",
      "updated_at": "2020-04-23T18:00:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r413629727",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/413629727"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 193,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/413661739",
      "pull_request_review_id": 398879068,
      "id": 413661739,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzY2MTczOQ==",
      "diff_hunk": "@@ -1332,8 +1346,8 @@ CAmount CWallet::GetChange(const CTransaction& tx) const\n bool CWallet::IsHDEnabled() const\n {\n     bool result = true;\n-    for (const auto& spk_man_pair : m_spk_managers) {\n-        result &= spk_man_pair.second->IsHDEnabled();\n+    for (const auto& spk_man : GetActiveScriptPubKeyMans()) {\n+        result &= spk_man->IsHDEnabled();",
      "path": "src/wallet/wallet.cpp",
      "position": 88,
      "original_position": 86,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "ed0113820b498f1e904ca9a0b1205708a6f68dca",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Maybe comment here that all must be true for the result to be true.",
      "created_at": "2020-04-23T09:30:32Z",
      "updated_at": "2020-04-23T18:00:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r413661739",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/413661739"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1351,
      "original_line": 1351,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/413722005",
      "pull_request_review_id": 398879068,
      "id": 413722005,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzcyMjAwNQ==",
      "diff_hunk": "@@ -1497,3 +1497,669 @@ std::set<CKeyID> LegacyScriptPubKeyMan::GetKeys() const\n     }\n     return set_address;\n }\n+\n+void LegacyScriptPubKeyMan::SetType(OutputType type, bool internal) {}\n+\n+bool DescriptorScriptPubKeyMan::GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error)\n+{\n+    // Returns true if this descriptor supports getting new addresses. Conditions where we may be unable to fetch them (e.g. locked) are caught later\n+    if (!CanGetAddresses(m_internal)) {\n+        error = \"No addresses available\";\n+        return false;\n+    }\n+    {\n+        LOCK(cs_desc_man);\n+        assert(m_wallet_descriptor.descriptor->IsSingleType()); // This is a combo descriptor which should not be an active descriptor\n+        if (type != m_address_type) {\n+            throw std::runtime_error(std::string(__func__) + \": Types are inconsistent\");\n+        }\n+\n+        TopUp();\n+\n+        // Get the scriptPubKey from the descriptor\n+        FlatSigningProvider out_keys;\n+        std::vector<CScript> scripts_temp;\n+        if (m_wallet_descriptor.range_end <= m_max_cached_index && !TopUp(1)) {\n+            // We can't generate anymore keys\n+            error = \"Error: Keypool ran out, please call keypoolrefill first\";\n+            return false;\n+        }\n+        if (!m_wallet_descriptor.descriptor->ExpandFromCache(m_wallet_descriptor.next_index, m_wallet_descriptor.cache, scripts_temp, out_keys)) {\n+            // We can't generate anymore keys\n+            error = \"Error: Keypool ran out, please call keypoolrefill first\";\n+            return false;\n+        }\n+\n+        Optional<OutputType> out_script_type = m_wallet_descriptor.descriptor->GetOutputType();\n+        if (out_script_type && out_script_type == type) {\n+            ExtractDestination(scripts_temp[0], dest);\n+        } else {\n+            throw std::runtime_error(std::string(__func__) + \": Types are inconsistent. Stored type does not match type of newly generated address\");\n+        }\n+        m_wallet_descriptor.next_index++;\n+        WalletBatch(m_storage.GetDatabase()).WriteDescriptor(GetID(), m_wallet_descriptor);\n+        return true;\n+    }\n+}\n+\n+isminetype DescriptorScriptPubKeyMan::IsMine(const CScript& script) const\n+{\n+    LOCK(cs_desc_man);\n+    if (m_map_script_pub_keys.count(script) > 0) {\n+        return ISMINE_SPENDABLE;\n+    }\n+    return ISMINE_NO;\n+}\n+\n+bool DescriptorScriptPubKeyMan::CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys)\n+{\n+    LOCK(cs_desc_man);\n+    if (!m_map_keys.empty()) {\n+        return false;\n+    }\n+\n+    bool keyPass = m_map_crypted_keys.empty(); // Always pass when there are no encrypted keys\n+    bool keyFail = false;\n+    for (const auto& mi : m_map_crypted_keys) {\n+        const CPubKey &pubkey = mi.second.first;\n+        const std::vector<unsigned char> &crypted_secret = mi.second.second;\n+        CKey key;\n+        if (!DecryptKey(master_key, crypted_secret, pubkey, key)) {\n+            keyFail = true;\n+            break;\n+        }\n+        keyPass = true;\n+        if (m_decryption_thoroughly_checked)\n+            break;\n+    }\n+    if (keyPass && keyFail) {\n+        LogPrintf(\"The wallet is probably corrupted: Some keys decrypt but not all.\\n\");\n+        throw std::runtime_error(\"Error unlocking wallet: some keys decrypt but not all. Your wallet file may be corrupt.\");\n+    }\n+    if (keyFail || (!keyPass && !accept_no_keys)) {\n+        return false;\n+    }\n+    m_decryption_thoroughly_checked = true;\n+    return true;\n+}\n+\n+bool DescriptorScriptPubKeyMan::Encrypt(const CKeyingMaterial& master_key, WalletBatch* batch)\n+{\n+    LOCK(cs_desc_man);\n+    if (!m_map_crypted_keys.empty()) {\n+        return false;\n+    }\n+\n+    for (const KeyMap::value_type& key_in : m_map_keys)\n+    {\n+        const CKey &key = key_in.second;\n+        CPubKey pubkey = key.GetPubKey();\n+        CKeyingMaterial secret(key.begin(), key.end());\n+        std::vector<unsigned char> crypted_secret;\n+        if (!EncryptSecret(master_key, secret, pubkey.GetHash(), crypted_secret)) {\n+            return false;\n+        }\n+        m_map_crypted_keys[pubkey.GetID()] = make_pair(pubkey, crypted_secret);\n+        batch->WriteCryptedDescriptorKey(GetID(), pubkey, crypted_secret);\n+    }\n+    m_map_keys.clear();\n+    return true;\n+}\n+\n+bool DescriptorScriptPubKeyMan::GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool)\n+{\n+    LOCK(cs_desc_man);\n+    std::string error;\n+    bool result = GetNewDestination(type, address, error);\n+    index = m_wallet_descriptor.next_index - 1;\n+    return result;\n+}\n+\n+void DescriptorScriptPubKeyMan::ReturnDestination(int64_t index, bool internal, const CTxDestination& addr)\n+{\n+    LOCK(cs_desc_man);\n+    // Only return when the index was the most recent\n+    if (m_wallet_descriptor.next_index - 1 == index) {\n+        m_wallet_descriptor.next_index--;\n+    }\n+    WalletBatch(m_storage.GetDatabase()).WriteDescriptor(GetID(), m_wallet_descriptor);\n+    NotifyCanGetAddressesChanged();\n+}\n+\n+std::map<CKeyID, CKey> DescriptorScriptPubKeyMan::GetKeys() const\n+{\n+    AssertLockHeld(cs_desc_man);\n+    if (m_storage.HasEncryptionKeys() && !m_storage.IsLocked()) {\n+        KeyMap keys;\n+        for (auto key_pair : m_map_crypted_keys) {\n+            const CPubKey& pubkey = key_pair.second.first;\n+            const std::vector<unsigned char>& crypted_secret = key_pair.second.second;\n+            CKey key;\n+            DecryptKey(m_storage.GetEncryptionKey(), crypted_secret, pubkey, key);\n+            keys[pubkey.GetID()] = key;\n+        }\n+        return keys;\n+    }\n+    return m_map_keys;\n+}\n+\n+bool DescriptorScriptPubKeyMan::TopUp(unsigned int size)\n+{\n+    LOCK(cs_desc_man);\n+    unsigned int target_size;\n+    if (size > 0) {\n+        target_size = size;\n+    } else {\n+        target_size = std::max(gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 1);\n+    }\n+\n+    // Calculate the new range_end\n+    int32_t new_range_end = std::max(m_wallet_descriptor.next_index + (int32_t)target_size, m_wallet_descriptor.range_end);\n+\n+    // If the descriptor is not ranged, we actually just want to fill the first cache item\n+    if (!m_wallet_descriptor.descriptor->IsRange()) {\n+        new_range_end = 1;\n+        m_wallet_descriptor.range_end = 1;\n+        m_wallet_descriptor.range_start = 0;\n+    }\n+\n+    FlatSigningProvider provider;\n+    provider.keys = GetKeys();\n+\n+    WalletBatch batch(m_storage.GetDatabase());\n+    uint256 id = GetID();\n+    for (int32_t i = m_max_cached_index + 1; i < new_range_end; ++i) {\n+        FlatSigningProvider out_keys;\n+        std::vector<CScript> scripts_temp;\n+        DescriptorCache temp_cache;\n+        // Maybe we have a cached xpub and we can expand from the cache first\n+        if (!m_wallet_descriptor.descriptor->ExpandFromCache(i, m_wallet_descriptor.cache, scripts_temp, out_keys)) {\n+            if (!m_wallet_descriptor.descriptor->Expand(i, provider, scripts_temp, out_keys, &temp_cache)) return false;\n+        }\n+        // Add all of the scriptPubKeys to the scriptPubKey set\n+        for (const CScript& script : scripts_temp) {\n+            m_map_script_pub_keys[script] = i;\n+        }\n+        for (const auto& pk_pair : out_keys.pubkeys) {\n+            const CPubKey& pubkey = pk_pair.second;\n+            if (m_map_pubkeys.count(pubkey) != 0) {\n+                // We don't need to give an error here.\n+                // It doesn't matter which of many valid indexes the pubkey has, we just need an index where we can derive it and it's private key\n+                continue;\n+            }\n+            m_map_pubkeys[pubkey] = i;\n+        }\n+        // Write the cache\n+        for (const auto& parent_xpub_pair : temp_cache.GetCachedParentExtPubKeys()) {\n+            CExtPubKey xpub;\n+            if (m_wallet_descriptor.cache.GetCachedParentExtPubKey(parent_xpub_pair.first, xpub)) {\n+                if (xpub != parent_xpub_pair.second) {\n+                    throw std::runtime_error(std::string(__func__) + \": New cached parent xpub does not match already cached parent xpub\");\n+                }\n+                continue;\n+            }\n+            if (!batch.WriteDescriptorParentCache(id, parent_xpub_pair.first, parent_xpub_pair.second)) {\n+                throw std::runtime_error(std::string(__func__) + \": writing cache item failed\");\n+            }\n+            m_wallet_descriptor.cache.CacheParentExtPubKey(parent_xpub_pair.first, parent_xpub_pair.second);\n+        }\n+        for (const auto& derived_xpub_map_pair : temp_cache.GetCachedDerivedExtPubKeys()) {\n+            for (const auto& derived_xpub_pair : derived_xpub_map_pair.second) {\n+                CExtPubKey xpub;\n+                if (m_wallet_descriptor.cache.GetCachedDerivedExtPubKey(derived_xpub_map_pair.first, derived_xpub_pair.first, xpub)) {\n+                    if (xpub != derived_xpub_pair.second) {\n+                        throw std::runtime_error(std::string(__func__) + \": New cached derived xpub does not match already cached derived xpub\");\n+                    }\n+                    continue;\n+                }\n+                if (!batch.WriteDescriptorDerivedCache(id, derived_xpub_map_pair.first, derived_xpub_pair.first, derived_xpub_pair.second)) {\n+                    throw std::runtime_error(std::string(__func__) + \": writing cache item failed\");\n+                }\n+                m_wallet_descriptor.cache.CacheDerivedExtPubKey(derived_xpub_map_pair.first, derived_xpub_pair.first, derived_xpub_pair.second);\n+            }\n+        }\n+        m_max_cached_index++;\n+    }\n+    m_wallet_descriptor.range_end = new_range_end;\n+    batch.WriteDescriptor(GetID(), m_wallet_descriptor);\n+\n+    // By this point, the cache size should be the size of the entire range\n+    assert(m_wallet_descriptor.range_end - 1 == m_max_cached_index);\n+\n+    NotifyCanGetAddressesChanged();\n+    return true;\n+}\n+\n+void DescriptorScriptPubKeyMan::MarkUnusedAddresses(const CScript& script)\n+{\n+    LOCK(cs_desc_man);\n+    if (IsMine(script)) {\n+        int32_t index = m_map_script_pub_keys[script];\n+        if (index >= m_wallet_descriptor.next_index) {\n+            WalletLogPrintf(\"%s: Detected a used keypool item at index %d, mark all keypool items up to this item as used\\n\", __func__, index);\n+            m_wallet_descriptor.next_index = index + 1;\n+        }\n+        if (!TopUp()) {\n+            WalletLogPrintf(\"%s: Topping up keypool failed (locked wallet)\\n\", __func__);\n+        }\n+    }\n+}\n+\n+void DescriptorScriptPubKeyMan::AddDescriptorKey(const CKey& key, const CPubKey &pubkey)\n+{\n+    LOCK(cs_desc_man);\n+    WalletBatch batch(m_storage.GetDatabase());\n+    if (!AddDescriptorKeyWithDB(batch, key, pubkey)) {\n+        throw std::runtime_error(std::string(__func__) + \": writing descriptor private key failed\");\n+    }\n+}\n+\n+bool DescriptorScriptPubKeyMan::AddDescriptorKeyWithDB(WalletBatch& batch, const CKey& key, const CPubKey &pubkey)\n+{\n+    AssertLockHeld(cs_desc_man);\n+    assert(!m_storage.IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS));\n+\n+    if (m_storage.HasEncryptionKeys()) {\n+        if (m_storage.IsLocked()) {\n+            return false;\n+        }\n+\n+        std::vector<unsigned char> crypted_secret;\n+        CKeyingMaterial secret(key.begin(), key.end());\n+        if (!EncryptSecret(m_storage.GetEncryptionKey(), secret, pubkey.GetHash(), crypted_secret)) {\n+            return false;\n+        }\n+\n+        m_map_crypted_keys[pubkey.GetID()] = make_pair(pubkey, crypted_secret);\n+        batch.WriteCryptedDescriptorKey(GetID(), pubkey, crypted_secret);\n+        return true;\n+    } else {\n+        m_map_keys[pubkey.GetID()] = key;\n+        return batch.WriteDescriptorKey(GetID(), pubkey, key.GetPrivKey());\n+    }\n+}\n+\n+bool DescriptorScriptPubKeyMan::SetupDescriptorGeneration(const CExtKey& master_key)\n+{\n+    LOCK(cs_desc_man);\n+    assert(m_storage.IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS));\n+\n+    // Ignore when there is already a descriptor\n+    if (m_wallet_descriptor.descriptor) {\n+        return false;\n+    }\n+\n+    int64_t creation_time = GetTime();\n+\n+    std::string xpub = EncodeExtPubKey(master_key.Neuter());\n+\n+    // Build descriptor string\n+    std::string desc_prefix;\n+    std::string desc_suffix = \"/*)\";\n+    switch (m_address_type) {\n+    case OutputType::LEGACY: {\n+        desc_prefix = \"pkh(\" + xpub + \"/44'\";\n+        break;\n+    }\n+    case OutputType::P2SH_SEGWIT: {\n+        desc_prefix = \"sh(wpkh(\" + xpub + \"/49'\";\n+        desc_suffix += \")\";\n+        break;\n+    }\n+    case OutputType::BECH32: {\n+        desc_prefix = \"wpkh(\" + xpub + \"/84'\";\n+        break;\n+    }\n+    default: assert(false);\n+    }\n+\n+    // Mainnet derives at 0', testnet and regtest derive at 1'\n+    if (Params().IsTestChain()) {\n+        desc_prefix += \"/1'\";\n+    } else {\n+        desc_prefix += \"/0'\";\n+    }\n+\n+    std::string internal_path = m_internal ? \"/1\" : \"/0\";\n+    std::string desc_str = desc_prefix + \"/0'\" + internal_path + desc_suffix;\n+\n+    // Make the descriptor\n+    FlatSigningProvider keys;\n+    std::string error;\n+    std::unique_ptr<Descriptor> desc = Parse(desc_str, keys, error, false);\n+    WalletDescriptor w_desc(std::move(desc), creation_time, 0, 0, 0);\n+    m_wallet_descriptor = w_desc;\n+\n+    // Store the master private key, and descriptor\n+    WalletBatch batch(m_storage.GetDatabase());\n+    if (!AddDescriptorKeyWithDB(batch, master_key.key, master_key.key.GetPubKey())) {\n+        throw std::runtime_error(std::string(__func__) + \": writing descriptor master private key failed\");\n+    }\n+    if (!batch.WriteDescriptor(GetID(), m_wallet_descriptor)) {\n+        throw std::runtime_error(std::string(__func__) + \": writing descriptor failed\");\n+    }\n+\n+    // TopUp\n+    TopUp();\n+\n+    m_storage.UnsetBlankWalletFlag(batch);\n+    return true;\n+}\n+\n+bool DescriptorScriptPubKeyMan::IsHDEnabled() const\n+{\n+    LOCK(cs_desc_man);\n+    return m_wallet_descriptor.descriptor->IsRange();\n+}\n+\n+bool DescriptorScriptPubKeyMan::CanGetAddresses(bool internal) const\n+{\n+    // We can only give out addresses from descriptors that are single type (not combo), ranged,\n+    // and either has cached keys or can generate more keys (ignoring encryption)",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 388,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "ed0113820b498f1e904ca9a0b1205708a6f68dca",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: s/has/have/",
      "created_at": "2020-04-23T11:03:54Z",
      "updated_at": "2020-04-23T18:00:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r413722005",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/413722005"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1858,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/413732148",
      "pull_request_review_id": 398879068,
      "id": 413732148,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzczMjE0OA==",
      "diff_hunk": "@@ -477,4 +482,111 @@ class LegacySigningProvider : public SigningProvider\n     bool GetKeyOrigin(const CKeyID& keyid, KeyOriginInfo& info) const override { return m_spk_man.GetKeyOrigin(keyid, info); }\n };\n \n+class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n+{\n+private:\n+    WalletDescriptor m_wallet_descriptor GUARDED_BY(cs_desc_man);\n+\n+    using ScriptPubKeyMap = std::map<CScript, int32_t>; // Map of scripts to descriptor range index\n+    using PubKeyMap = std::map<CPubKey, int32_t>; // Map of pubkeys involved in scripts to descriptor range index\n+    using CryptedKeyMap = std::map<CKeyID, std::pair<CPubKey, std::vector<unsigned char>>>;\n+    using KeyMap = std::map<CKeyID, CKey>;\n+\n+    ScriptPubKeyMap m_map_script_pub_keys GUARDED_BY(cs_desc_man);\n+    PubKeyMap m_map_pubkeys GUARDED_BY(cs_desc_man);\n+    int32_t m_max_cached_index = -1;\n+\n+    OutputType m_address_type;\n+    bool m_internal;\n+\n+    KeyMap m_map_keys GUARDED_BY(cs_desc_man);\n+    CryptedKeyMap m_map_crypted_keys GUARDED_BY(cs_desc_man);\n+\n+    bool SetCrypted();\n+\n+    //! keeps track of whether Unlock has run a thorough check before\n+    bool m_decryption_thoroughly_checked = false;\n+\n+    bool AddDescriptorKeyWithDB(WalletBatch& batch, const CKey& key, const CPubKey &pubkey);",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": 73,
      "original_position": 73,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "ed0113820b498f1e904ca9a0b1205708a6f68dca",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Maybe just me, but I find the \"With\" part of the name `AddDescriptorKeyWithDB` confusing.\r\n\r\nSome of these additions could use Doxygen comments, e.g. here and SetCrypted, etc.",
      "created_at": "2020-04-23T11:21:21Z",
      "updated_at": "2020-04-23T18:00:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r413732148",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/413732148"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 510,
      "original_line": 510,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/413736798",
      "pull_request_review_id": 398879068,
      "id": 413736798,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzczNjc5OA==",
      "diff_hunk": "@@ -1497,3 +1497,669 @@ std::set<CKeyID> LegacyScriptPubKeyMan::GetKeys() const\n     }\n     return set_address;\n }\n+\n+void LegacyScriptPubKeyMan::SetType(OutputType type, bool internal) {}\n+\n+bool DescriptorScriptPubKeyMan::GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error)\n+{\n+    // Returns true if this descriptor supports getting new addresses. Conditions where we may be unable to fetch them (e.g. locked) are caught later\n+    if (!CanGetAddresses(m_internal)) {\n+        error = \"No addresses available\";\n+        return false;\n+    }\n+    {\n+        LOCK(cs_desc_man);\n+        assert(m_wallet_descriptor.descriptor->IsSingleType()); // This is a combo descriptor which should not be an active descriptor\n+        if (type != m_address_type) {\n+            throw std::runtime_error(std::string(__func__) + \": Types are inconsistent\");\n+        }\n+\n+        TopUp();\n+\n+        // Get the scriptPubKey from the descriptor\n+        FlatSigningProvider out_keys;\n+        std::vector<CScript> scripts_temp;\n+        if (m_wallet_descriptor.range_end <= m_max_cached_index && !TopUp(1)) {\n+            // We can't generate anymore keys\n+            error = \"Error: Keypool ran out, please call keypoolrefill first\";\n+            return false;\n+        }\n+        if (!m_wallet_descriptor.descriptor->ExpandFromCache(m_wallet_descriptor.next_index, m_wallet_descriptor.cache, scripts_temp, out_keys)) {\n+            // We can't generate anymore keys\n+            error = \"Error: Keypool ran out, please call keypoolrefill first\";\n+            return false;\n+        }\n+\n+        Optional<OutputType> out_script_type = m_wallet_descriptor.descriptor->GetOutputType();\n+        if (out_script_type && out_script_type == type) {\n+            ExtractDestination(scripts_temp[0], dest);\n+        } else {\n+            throw std::runtime_error(std::string(__func__) + \": Types are inconsistent. Stored type does not match type of newly generated address\");\n+        }\n+        m_wallet_descriptor.next_index++;\n+        WalletBatch(m_storage.GetDatabase()).WriteDescriptor(GetID(), m_wallet_descriptor);\n+        return true;\n+    }\n+}\n+\n+isminetype DescriptorScriptPubKeyMan::IsMine(const CScript& script) const\n+{\n+    LOCK(cs_desc_man);\n+    if (m_map_script_pub_keys.count(script) > 0) {\n+        return ISMINE_SPENDABLE;\n+    }\n+    return ISMINE_NO;\n+}\n+\n+bool DescriptorScriptPubKeyMan::CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys)\n+{\n+    LOCK(cs_desc_man);\n+    if (!m_map_keys.empty()) {\n+        return false;\n+    }\n+\n+    bool keyPass = m_map_crypted_keys.empty(); // Always pass when there are no encrypted keys\n+    bool keyFail = false;\n+    for (const auto& mi : m_map_crypted_keys) {\n+        const CPubKey &pubkey = mi.second.first;\n+        const std::vector<unsigned char> &crypted_secret = mi.second.second;\n+        CKey key;\n+        if (!DecryptKey(master_key, crypted_secret, pubkey, key)) {\n+            keyFail = true;\n+            break;\n+        }\n+        keyPass = true;\n+        if (m_decryption_thoroughly_checked)\n+            break;\n+    }\n+    if (keyPass && keyFail) {\n+        LogPrintf(\"The wallet is probably corrupted: Some keys decrypt but not all.\\n\");\n+        throw std::runtime_error(\"Error unlocking wallet: some keys decrypt but not all. Your wallet file may be corrupt.\");\n+    }\n+    if (keyFail || (!keyPass && !accept_no_keys)) {\n+        return false;\n+    }\n+    m_decryption_thoroughly_checked = true;\n+    return true;\n+}\n+\n+bool DescriptorScriptPubKeyMan::Encrypt(const CKeyingMaterial& master_key, WalletBatch* batch)\n+{\n+    LOCK(cs_desc_man);\n+    if (!m_map_crypted_keys.empty()) {\n+        return false;\n+    }\n+\n+    for (const KeyMap::value_type& key_in : m_map_keys)\n+    {\n+        const CKey &key = key_in.second;\n+        CPubKey pubkey = key.GetPubKey();\n+        CKeyingMaterial secret(key.begin(), key.end());\n+        std::vector<unsigned char> crypted_secret;\n+        if (!EncryptSecret(master_key, secret, pubkey.GetHash(), crypted_secret)) {\n+            return false;\n+        }\n+        m_map_crypted_keys[pubkey.GetID()] = make_pair(pubkey, crypted_secret);\n+        batch->WriteCryptedDescriptorKey(GetID(), pubkey, crypted_secret);\n+    }\n+    m_map_keys.clear();\n+    return true;\n+}\n+\n+bool DescriptorScriptPubKeyMan::GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool)\n+{\n+    LOCK(cs_desc_man);\n+    std::string error;\n+    bool result = GetNewDestination(type, address, error);\n+    index = m_wallet_descriptor.next_index - 1;\n+    return result;\n+}\n+\n+void DescriptorScriptPubKeyMan::ReturnDestination(int64_t index, bool internal, const CTxDestination& addr)\n+{\n+    LOCK(cs_desc_man);\n+    // Only return when the index was the most recent\n+    if (m_wallet_descriptor.next_index - 1 == index) {\n+        m_wallet_descriptor.next_index--;\n+    }\n+    WalletBatch(m_storage.GetDatabase()).WriteDescriptor(GetID(), m_wallet_descriptor);\n+    NotifyCanGetAddressesChanged();\n+}\n+\n+std::map<CKeyID, CKey> DescriptorScriptPubKeyMan::GetKeys() const\n+{\n+    AssertLockHeld(cs_desc_man);\n+    if (m_storage.HasEncryptionKeys() && !m_storage.IsLocked()) {\n+        KeyMap keys;\n+        for (auto key_pair : m_map_crypted_keys) {\n+            const CPubKey& pubkey = key_pair.second.first;\n+            const std::vector<unsigned char>& crypted_secret = key_pair.second.second;\n+            CKey key;\n+            DecryptKey(m_storage.GetEncryptionKey(), crypted_secret, pubkey, key);\n+            keys[pubkey.GetID()] = key;\n+        }\n+        return keys;\n+    }\n+    return m_map_keys;\n+}\n+\n+bool DescriptorScriptPubKeyMan::TopUp(unsigned int size)\n+{\n+    LOCK(cs_desc_man);\n+    unsigned int target_size;\n+    if (size > 0) {\n+        target_size = size;\n+    } else {\n+        target_size = std::max(gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 1);\n+    }\n+\n+    // Calculate the new range_end\n+    int32_t new_range_end = std::max(m_wallet_descriptor.next_index + (int32_t)target_size, m_wallet_descriptor.range_end);\n+\n+    // If the descriptor is not ranged, we actually just want to fill the first cache item\n+    if (!m_wallet_descriptor.descriptor->IsRange()) {\n+        new_range_end = 1;\n+        m_wallet_descriptor.range_end = 1;\n+        m_wallet_descriptor.range_start = 0;\n+    }\n+\n+    FlatSigningProvider provider;\n+    provider.keys = GetKeys();\n+\n+    WalletBatch batch(m_storage.GetDatabase());\n+    uint256 id = GetID();\n+    for (int32_t i = m_max_cached_index + 1; i < new_range_end; ++i) {\n+        FlatSigningProvider out_keys;\n+        std::vector<CScript> scripts_temp;\n+        DescriptorCache temp_cache;\n+        // Maybe we have a cached xpub and we can expand from the cache first\n+        if (!m_wallet_descriptor.descriptor->ExpandFromCache(i, m_wallet_descriptor.cache, scripts_temp, out_keys)) {\n+            if (!m_wallet_descriptor.descriptor->Expand(i, provider, scripts_temp, out_keys, &temp_cache)) return false;\n+        }\n+        // Add all of the scriptPubKeys to the scriptPubKey set\n+        for (const CScript& script : scripts_temp) {\n+            m_map_script_pub_keys[script] = i;\n+        }\n+        for (const auto& pk_pair : out_keys.pubkeys) {\n+            const CPubKey& pubkey = pk_pair.second;\n+            if (m_map_pubkeys.count(pubkey) != 0) {\n+                // We don't need to give an error here.\n+                // It doesn't matter which of many valid indexes the pubkey has, we just need an index where we can derive it and it's private key\n+                continue;\n+            }\n+            m_map_pubkeys[pubkey] = i;\n+        }\n+        // Write the cache\n+        for (const auto& parent_xpub_pair : temp_cache.GetCachedParentExtPubKeys()) {\n+            CExtPubKey xpub;\n+            if (m_wallet_descriptor.cache.GetCachedParentExtPubKey(parent_xpub_pair.first, xpub)) {\n+                if (xpub != parent_xpub_pair.second) {\n+                    throw std::runtime_error(std::string(__func__) + \": New cached parent xpub does not match already cached parent xpub\");\n+                }\n+                continue;\n+            }\n+            if (!batch.WriteDescriptorParentCache(id, parent_xpub_pair.first, parent_xpub_pair.second)) {\n+                throw std::runtime_error(std::string(__func__) + \": writing cache item failed\");\n+            }\n+            m_wallet_descriptor.cache.CacheParentExtPubKey(parent_xpub_pair.first, parent_xpub_pair.second);\n+        }\n+        for (const auto& derived_xpub_map_pair : temp_cache.GetCachedDerivedExtPubKeys()) {\n+            for (const auto& derived_xpub_pair : derived_xpub_map_pair.second) {\n+                CExtPubKey xpub;\n+                if (m_wallet_descriptor.cache.GetCachedDerivedExtPubKey(derived_xpub_map_pair.first, derived_xpub_pair.first, xpub)) {\n+                    if (xpub != derived_xpub_pair.second) {\n+                        throw std::runtime_error(std::string(__func__) + \": New cached derived xpub does not match already cached derived xpub\");\n+                    }\n+                    continue;\n+                }\n+                if (!batch.WriteDescriptorDerivedCache(id, derived_xpub_map_pair.first, derived_xpub_pair.first, derived_xpub_pair.second)) {\n+                    throw std::runtime_error(std::string(__func__) + \": writing cache item failed\");\n+                }\n+                m_wallet_descriptor.cache.CacheDerivedExtPubKey(derived_xpub_map_pair.first, derived_xpub_pair.first, derived_xpub_pair.second);\n+            }\n+        }\n+        m_max_cached_index++;\n+    }\n+    m_wallet_descriptor.range_end = new_range_end;\n+    batch.WriteDescriptor(GetID(), m_wallet_descriptor);\n+\n+    // By this point, the cache size should be the size of the entire range\n+    assert(m_wallet_descriptor.range_end - 1 == m_max_cached_index);\n+\n+    NotifyCanGetAddressesChanged();\n+    return true;\n+}\n+\n+void DescriptorScriptPubKeyMan::MarkUnusedAddresses(const CScript& script)\n+{\n+    LOCK(cs_desc_man);\n+    if (IsMine(script)) {\n+        int32_t index = m_map_script_pub_keys[script];\n+        if (index >= m_wallet_descriptor.next_index) {\n+            WalletLogPrintf(\"%s: Detected a used keypool item at index %d, mark all keypool items up to this item as used\\n\", __func__, index);\n+            m_wallet_descriptor.next_index = index + 1;\n+        }\n+        if (!TopUp()) {\n+            WalletLogPrintf(\"%s: Topping up keypool failed (locked wallet)\\n\", __func__);\n+        }\n+    }\n+}\n+\n+void DescriptorScriptPubKeyMan::AddDescriptorKey(const CKey& key, const CPubKey &pubkey)\n+{\n+    LOCK(cs_desc_man);\n+    WalletBatch batch(m_storage.GetDatabase());\n+    if (!AddDescriptorKeyWithDB(batch, key, pubkey)) {\n+        throw std::runtime_error(std::string(__func__) + \": writing descriptor private key failed\");\n+    }\n+}\n+\n+bool DescriptorScriptPubKeyMan::AddDescriptorKeyWithDB(WalletBatch& batch, const CKey& key, const CPubKey &pubkey)\n+{\n+    AssertLockHeld(cs_desc_man);\n+    assert(!m_storage.IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS));\n+\n+    if (m_storage.HasEncryptionKeys()) {\n+        if (m_storage.IsLocked()) {\n+            return false;\n+        }\n+\n+        std::vector<unsigned char> crypted_secret;\n+        CKeyingMaterial secret(key.begin(), key.end());\n+        if (!EncryptSecret(m_storage.GetEncryptionKey(), secret, pubkey.GetHash(), crypted_secret)) {\n+            return false;\n+        }\n+\n+        m_map_crypted_keys[pubkey.GetID()] = make_pair(pubkey, crypted_secret);\n+        batch.WriteCryptedDescriptorKey(GetID(), pubkey, crypted_secret);\n+        return true;",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 305,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "ed0113820b498f1e904ca9a0b1205708a6f68dca",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Why do we not return the result of `batch.WriteCryptedDescriptorKey(GetID(), pubkey, crypted_secret);` here?",
      "created_at": "2020-04-23T11:29:19Z",
      "updated_at": "2020-04-23T18:00:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r413736798",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/413736798"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1775,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/413760834",
      "pull_request_review_id": 398879068,
      "id": 413760834,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc2MDgzNA==",
      "diff_hunk": "@@ -240,11 +246,19 @@ class WalletBatch\n \n     bool WriteMinVersion(int nVersion);\n \n+    bool WriteDescriptorKey(const uint256& desc_id, const CPubKey& pubkey, const CPrivKey& privkey);\n+    bool WriteCryptedDescriptorKey(const uint256& desc_id, const CPubKey& pubkey, const std::vector<unsigned char>& secret);\n+    bool WriteDescriptor(const uint256& desc_id, const WalletDescriptor& descriptor);\n+    bool WriteDescriptorDerivedCache(const uint256& desc_id, uint32_t key_exp_index, uint32_t der_index, const CExtPubKey& xpub);\n+    bool WriteDescriptorParentCache(const uint256& desc_id, uint32_t key_exp_index, const CExtPubKey& xpub);",
      "path": "src/wallet/walletdb.h",
      "position": null,
      "original_position": 37,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "ed0113820b498f1e904ca9a0b1205708a6f68dca",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "What does \"exp\" stand for in `key_exp_index`, expiry/expired?",
      "created_at": "2020-04-23T12:09:51Z",
      "updated_at": "2020-04-23T18:00:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r413760834",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/413760834"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 253,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/413762307",
      "pull_request_review_id": 398879068,
      "id": 413762307,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc2MjMwNw==",
      "diff_hunk": "@@ -240,11 +246,19 @@ class WalletBatch\n \n     bool WriteMinVersion(int nVersion);\n \n+    bool WriteDescriptorKey(const uint256& desc_id, const CPubKey& pubkey, const CPrivKey& privkey);\n+    bool WriteCryptedDescriptorKey(const uint256& desc_id, const CPubKey& pubkey, const std::vector<unsigned char>& secret);\n+    bool WriteDescriptor(const uint256& desc_id, const WalletDescriptor& descriptor);\n+    bool WriteDescriptorDerivedCache(const uint256& desc_id, uint32_t key_exp_index, uint32_t der_index, const CExtPubKey& xpub);",
      "path": "src/wallet/walletdb.h",
      "position": null,
      "original_position": 36,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "ed0113820b498f1e904ca9a0b1205708a6f68dca",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Perhaps put `uint32_t der_index` last, so the first two parameters are the same as in `WriteDescriptorParentCache()` on the following line",
      "created_at": "2020-04-23T12:12:06Z",
      "updated_at": "2020-04-23T18:00:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r413762307",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/413762307"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 252,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/413789802",
      "pull_request_review_id": 398879068,
      "id": 413789802,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc4OTgwMg==",
      "diff_hunk": "@@ -2471,13 +2472,16 @@ static UniValue getwalletinfo(const JSONRPCRequest& request)\n \n     size_t kpExternalSize = pwallet->KeypoolCountExternalKeys();\n     const auto bal = pwallet->GetBalance();\n+    int64_t kp_oldest = pwallet->GetOldestKeyPoolTime();\n     obj.pushKV(\"walletname\", pwallet->GetName());\n     obj.pushKV(\"walletversion\", pwallet->GetVersion());\n     obj.pushKV(\"balance\", ValueFromAmount(bal.m_mine_trusted));\n     obj.pushKV(\"unconfirmed_balance\", ValueFromAmount(bal.m_mine_untrusted_pending));\n     obj.pushKV(\"immature_balance\", ValueFromAmount(bal.m_mine_immature));\n     obj.pushKV(\"txcount\",       (int)pwallet->mapWallet.size());\n-    obj.pushKV(\"keypoololdest\", pwallet->GetOldestKeyPoolTime());\n+    if (kp_oldest > 0) {\n+        obj.pushKV(\"keypoololdest\", kp_oldest);",
      "path": "src/wallet/rpcwallet.cpp",
      "position": 39,
      "original_position": 30,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "ed0113820b498f1e904ca9a0b1205708a6f68dca",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Maybe update getwalletinfo RPCHelpMan that `keypoololdest` is now only displayed for non-descriptor/legacy wallets.",
      "created_at": "2020-04-23T12:52:56Z",
      "updated_at": "2020-04-23T18:00:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r413789802",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/413789802"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2483,
      "original_line": 2483,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/413805809",
      "pull_request_review_id": 399106189,
      "id": 413805809,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzgwNTgwOQ==",
      "diff_hunk": "@@ -1454,3 +1454,297 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n \n     return response;\n }\n+\n+static UniValue ProcessDescriptorImport(CWallet * const pwallet, const UniValue& data, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    UniValue warnings(UniValue::VARR);\n+    UniValue result(UniValue::VOBJ);\n+\n+    try {\n+        if (!data.exists(\"desc\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Descriptor not found.\");\n+        }\n+\n+        const std::string& descriptor = data[\"desc\"].get_str();\n+        const bool active = data.exists(\"active\") ? data[\"active\"].get_bool() : false;\n+        const bool internal = data.exists(\"internal\") ? data[\"internal\"].get_bool() : false;\n+        const std::string& label = data.exists(\"label\") ? data[\"label\"].get_str() : \"\";\n+\n+        // Parse descriptor string\n+        FlatSigningProvider keys;\n+        std::string error;\n+        auto parsed_desc = Parse(descriptor, keys, error, /* require_checksum = */ true);\n+        if (!parsed_desc) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, error);\n+        }\n+\n+        // Range check\n+        int64_t range_start = 0, range_end = 1, next_index = 0;\n+        if (!parsed_desc->IsRange() && data.exists(\"range\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Range should not be specified for an un-ranged descriptor\");\n+        } else if (parsed_desc->IsRange()) {\n+            if (data.exists(\"range\")) {\n+                auto range = ParseDescriptorRange(data[\"range\"]);\n+                range_start = range.first;\n+                range_end = range.second + 1; // Specified range end is inclusive, but we need range end as exclusive\n+            } else {\n+                warnings.push_back(\"Range not given, using default keypool range\");\n+                range_start = 0;\n+                range_end = gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE);\n+            }\n+            next_index = range_start;\n+\n+            if (data.exists(\"next_index\")) {\n+                next_index = data[\"next_index\"].get_int64();\n+                // bound checks\n+                if (next_index < range_start || next_index >= range_end) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"next_index is out of range\");\n+                }\n+            }\n+        }\n+\n+        // Active descriptors must be ranged\n+        if (active && !parsed_desc->IsRange()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Active descriptor must be ranged\");",
      "path": "src/wallet/rpcdump.cpp",
      "position": null,
      "original_position": 55,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "ed0113820b498f1e904ca9a0b1205708a6f68dca",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "s/descriptor/descriptors/ (plural like the other error messages, if you change this be sure to update the functional test as well)",
      "created_at": "2020-04-23T13:42:34Z",
      "updated_at": "2020-04-23T18:00:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r413805809",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/413805809"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1508,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/413811801",
      "pull_request_review_id": 399115594,
      "id": 413811801,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzgxMTgwMQ==",
      "diff_hunk": "@@ -1454,3 +1454,297 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n \n     return response;\n }\n+\n+static UniValue ProcessDescriptorImport(CWallet * const pwallet, const UniValue& data, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    UniValue warnings(UniValue::VARR);\n+    UniValue result(UniValue::VOBJ);\n+\n+    try {\n+        if (!data.exists(\"desc\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Descriptor not found.\");\n+        }\n+\n+        const std::string& descriptor = data[\"desc\"].get_str();\n+        const bool active = data.exists(\"active\") ? data[\"active\"].get_bool() : false;\n+        const bool internal = data.exists(\"internal\") ? data[\"internal\"].get_bool() : false;\n+        const std::string& label = data.exists(\"label\") ? data[\"label\"].get_str() : \"\";\n+\n+        // Parse descriptor string\n+        FlatSigningProvider keys;\n+        std::string error;\n+        auto parsed_desc = Parse(descriptor, keys, error, /* require_checksum = */ true);\n+        if (!parsed_desc) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, error);\n+        }\n+\n+        // Range check\n+        int64_t range_start = 0, range_end = 1, next_index = 0;\n+        if (!parsed_desc->IsRange() && data.exists(\"range\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Range should not be specified for an un-ranged descriptor\");\n+        } else if (parsed_desc->IsRange()) {\n+            if (data.exists(\"range\")) {\n+                auto range = ParseDescriptorRange(data[\"range\"]);\n+                range_start = range.first;\n+                range_end = range.second + 1; // Specified range end is inclusive, but we need range end as exclusive\n+            } else {\n+                warnings.push_back(\"Range not given, using default keypool range\");\n+                range_start = 0;\n+                range_end = gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE);\n+            }\n+            next_index = range_start;\n+\n+            if (data.exists(\"next_index\")) {\n+                next_index = data[\"next_index\"].get_int64();\n+                // bound checks\n+                if (next_index < range_start || next_index >= range_end) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"next_index is out of range\");\n+                }\n+            }\n+        }\n+\n+        // Active descriptors must be ranged\n+        if (active && !parsed_desc->IsRange()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Active descriptor must be ranged\");\n+        }\n+\n+        // Ranged descriptors should not have a label\n+        if (data.exists(\"range\") && data.exists(\"label\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Ranged descriptors should not have a label\");\n+        }\n+\n+        // Internal addresses should not have a label either\n+        if (internal && data.exists(\"label\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Internal addresses should not have a label\");\n+        }\n+\n+        // Combo descriptor check\n+        if (active && !parsed_desc->IsSingleType()) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Combo descriptors cannot be set to active\");\n+        }\n+\n+        // If the wallet disabled private keys, abort if private keys exist\n+        if (pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS) && !keys.keys.empty()) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Cannot import private keys to a wallet with private keys disabled\");\n+        }\n+\n+        // Need to ExpandPrivate to check if private keys are available for all pubkeys\n+        FlatSigningProvider expand_keys;\n+        std::vector<CScript> scripts;\n+        parsed_desc->Expand(0, keys, scripts, expand_keys);\n+        parsed_desc->ExpandPrivate(0, keys, expand_keys);\n+\n+        // Check if all private keys are provided\n+        bool have_all_privkeys = !expand_keys.keys.empty();\n+        for (const auto& entry : expand_keys.origins) {\n+            const CKeyID& key_id = entry.first;\n+            CKey key;\n+            if (!expand_keys.GetKey(key_id, key)) {\n+                have_all_privkeys = false;\n+                break;\n+            }\n+        }\n+\n+        // If private keys are enabled, check some things.\n+        if (!pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n+           if (keys.keys.empty()) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Cannot import descriptor without private keys to a wallet with private keys enabled\");\n+           }\n+           if (!have_all_privkeys) {\n+               warnings.push_back(\"Not all private keys provided. Some wallet functionality may return unexpected errors\");\n+           }\n+        }\n+\n+        WalletDescriptor w_desc(std::move(parsed_desc), timestamp, range_start, range_end, next_index);\n+\n+        // Check if the wallet already contains the descriptor\n+        auto existing_spk_manager = pwallet->GetDescriptorScriptPubKeyMan(w_desc);\n+        if (existing_spk_manager) {\n+            LOCK(existing_spk_manager->cs_desc_man);\n+            if (range_start > existing_spk_manager->GetWalletDescriptor().range_start) {\n+                throw JSONRPCError(RPC_INVALID_PARAMS, strprintf(\"range_start can only decrease; current range = [%d,%d]\", existing_spk_manager->GetWalletDescriptor().range_start, existing_spk_manager->GetWalletDescriptor().range_end));\n+            }\n+        }\n+\n+        // Add descriptor to the wallet\n+        auto spk_manager = pwallet->AddWalletDescriptor(w_desc, keys, label);\n+        if (spk_manager == nullptr) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, strprintf(\"Could not add descriptor '%s'\", descriptor));\n+        }\n+\n+        // Set descriptor as active if necessary\n+        if (active) {\n+            if (!w_desc.descriptor->GetOutputType()) {\n+                warnings.push_back(\"Unknown output type, cannot set descriptor to active.\");\n+            } else {\n+                pwallet->SetActiveScriptPubKeyMan(spk_manager->GetID(), *w_desc.descriptor->GetOutputType(), internal);\n+            }\n+        }\n+\n+        result.pushKV(\"success\", UniValue(true));\n+    } catch (const UniValue& e) {\n+        result.pushKV(\"success\", UniValue(false));\n+        result.pushKV(\"error\", e);\n+    } catch (...) {\n+        result.pushKV(\"success\", UniValue(false));\n+\n+        result.pushKV(\"error\", JSONRPCError(RPC_MISC_ERROR, \"Missing required fields\"));\n+    }\n+    if (warnings.size()) result.pushKV(\"warnings\", warnings);\n+    return result;\n+}\n+\n+UniValue importdescriptors(const JSONRPCRequest& main_request) {\n+    // Acquire the wallet\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(main_request);\n+    CWallet* const pwallet = wallet.get();\n+    if (!EnsureWalletIsAvailable(pwallet, main_request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+            RPCHelpMan{\"importdescriptors\",\n+                \"\\nImport descriptors. This will trigger a rescan of the blockchain based on the earliest timestamp of all descriptors being imported. Requires a new wallet backup.\\n\"\n+            \"\\nNote: This call can take over an hour to complete if using an early timestamp; during that time, other rpc calls\\n\"\n+            \"may report that the imported keys, addresses or scripts exist but related transactions are still missing.\\n\",\n+                {\n+                    {\"requests\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"Data to be imported\",\n+                        {\n+                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                                {\n+                                    {\"desc\", RPCArg::Type::STR, RPCArg::Optional::NO, \"Descriptor to import.\"},\n+                                    {\"active\", RPCArg::Type::BOOL, /* default */ \"false\", \"Set this descriptor to be the active descriptor for the corresponding output type/externality\"},\n+                                    {\"range\", RPCArg::Type::RANGE, RPCArg::Optional::OMITTED, \"If a ranged descriptor is used, this specifies the end or the range (in the form [begin,end]) to import\"},\n+                                    {\"next_index\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"If a ranged descriptor is set to active, this specifies the next index to generate addresses from\"},\n+                                    {\"timestamp\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"Time from which to start rescanning the blockchain for this descriptor, in \" + UNIX_EPOCH_TIME + \"\\n\"\n+        \"                                                              Use the string \\\"now\\\" to substitute the current synced blockchain time.\\n\"\n+        \"                                                              \\\"now\\\" can be specified to bypass scanning, for outputs which are known to never have been used, and\\n\"\n+        \"                                                              0 can be specified to scan the entire blockchain. Blocks up to 2 hours before the earliest timestamp\\n\"\n+        \"                                                              of all descriptors being imported will be scanned.\",\n+                                        /* oneline_description */ \"\", {\"timestamp | \\\"now\\\"\", \"integer / string\"}\n+                                    },\n+                                    {\"internal\", RPCArg::Type::BOOL, /* default */ \"false\", \"Stating whether matching outputs should be treated as not incoming payments (also known as change)\"},",
      "path": "src/wallet/rpcdump.cpp",
      "position": null,
      "original_position": 172,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "ed0113820b498f1e904ca9a0b1205708a6f68dca",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "s/Stating whether/Whether/\r\ns/also known as/e.g./",
      "created_at": "2020-04-23T13:51:00Z",
      "updated_at": "2020-04-23T18:00:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r413811801",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/413811801"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1625,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/413846027",
      "pull_request_review_id": 399157105,
      "id": 413846027,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzg0NjAyNw==",
      "diff_hunk": "@@ -1454,3 +1454,297 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n \n     return response;\n }\n+\n+static UniValue ProcessDescriptorImport(CWallet * const pwallet, const UniValue& data, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    UniValue warnings(UniValue::VARR);\n+    UniValue result(UniValue::VOBJ);\n+\n+    try {\n+        if (!data.exists(\"desc\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Descriptor not found.\");\n+        }\n+\n+        const std::string& descriptor = data[\"desc\"].get_str();\n+        const bool active = data.exists(\"active\") ? data[\"active\"].get_bool() : false;\n+        const bool internal = data.exists(\"internal\") ? data[\"internal\"].get_bool() : false;\n+        const std::string& label = data.exists(\"label\") ? data[\"label\"].get_str() : \"\";\n+\n+        // Parse descriptor string\n+        FlatSigningProvider keys;\n+        std::string error;\n+        auto parsed_desc = Parse(descriptor, keys, error, /* require_checksum = */ true);\n+        if (!parsed_desc) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, error);\n+        }\n+\n+        // Range check\n+        int64_t range_start = 0, range_end = 1, next_index = 0;\n+        if (!parsed_desc->IsRange() && data.exists(\"range\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Range should not be specified for an un-ranged descriptor\");\n+        } else if (parsed_desc->IsRange()) {\n+            if (data.exists(\"range\")) {\n+                auto range = ParseDescriptorRange(data[\"range\"]);\n+                range_start = range.first;\n+                range_end = range.second + 1; // Specified range end is inclusive, but we need range end as exclusive\n+            } else {\n+                warnings.push_back(\"Range not given, using default keypool range\");\n+                range_start = 0;\n+                range_end = gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE);\n+            }\n+            next_index = range_start;\n+\n+            if (data.exists(\"next_index\")) {\n+                next_index = data[\"next_index\"].get_int64();\n+                // bound checks\n+                if (next_index < range_start || next_index >= range_end) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"next_index is out of range\");\n+                }\n+            }\n+        }\n+\n+        // Active descriptors must be ranged\n+        if (active && !parsed_desc->IsRange()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Active descriptor must be ranged\");\n+        }\n+\n+        // Ranged descriptors should not have a label\n+        if (data.exists(\"range\") && data.exists(\"label\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Ranged descriptors should not have a label\");\n+        }\n+\n+        // Internal addresses should not have a label either\n+        if (internal && data.exists(\"label\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Internal addresses should not have a label\");\n+        }\n+\n+        // Combo descriptor check\n+        if (active && !parsed_desc->IsSingleType()) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Combo descriptors cannot be set to active\");\n+        }\n+\n+        // If the wallet disabled private keys, abort if private keys exist\n+        if (pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS) && !keys.keys.empty()) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Cannot import private keys to a wallet with private keys disabled\");\n+        }\n+\n+        // Need to ExpandPrivate to check if private keys are available for all pubkeys\n+        FlatSigningProvider expand_keys;\n+        std::vector<CScript> scripts;\n+        parsed_desc->Expand(0, keys, scripts, expand_keys);\n+        parsed_desc->ExpandPrivate(0, keys, expand_keys);\n+\n+        // Check if all private keys are provided\n+        bool have_all_privkeys = !expand_keys.keys.empty();\n+        for (const auto& entry : expand_keys.origins) {\n+            const CKeyID& key_id = entry.first;\n+            CKey key;\n+            if (!expand_keys.GetKey(key_id, key)) {\n+                have_all_privkeys = false;\n+                break;\n+            }\n+        }\n+\n+        // If private keys are enabled, check some things.\n+        if (!pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n+           if (keys.keys.empty()) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Cannot import descriptor without private keys to a wallet with private keys enabled\");\n+           }\n+           if (!have_all_privkeys) {\n+               warnings.push_back(\"Not all private keys provided. Some wallet functionality may return unexpected errors\");\n+           }\n+        }\n+\n+        WalletDescriptor w_desc(std::move(parsed_desc), timestamp, range_start, range_end, next_index);\n+\n+        // Check if the wallet already contains the descriptor\n+        auto existing_spk_manager = pwallet->GetDescriptorScriptPubKeyMan(w_desc);\n+        if (existing_spk_manager) {\n+            LOCK(existing_spk_manager->cs_desc_man);\n+            if (range_start > existing_spk_manager->GetWalletDescriptor().range_start) {\n+                throw JSONRPCError(RPC_INVALID_PARAMS, strprintf(\"range_start can only decrease; current range = [%d,%d]\", existing_spk_manager->GetWalletDescriptor().range_start, existing_spk_manager->GetWalletDescriptor().range_end));\n+            }\n+        }\n+\n+        // Add descriptor to the wallet\n+        auto spk_manager = pwallet->AddWalletDescriptor(w_desc, keys, label);\n+        if (spk_manager == nullptr) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, strprintf(\"Could not add descriptor '%s'\", descriptor));\n+        }\n+\n+        // Set descriptor as active if necessary\n+        if (active) {\n+            if (!w_desc.descriptor->GetOutputType()) {\n+                warnings.push_back(\"Unknown output type, cannot set descriptor to active.\");\n+            } else {\n+                pwallet->SetActiveScriptPubKeyMan(spk_manager->GetID(), *w_desc.descriptor->GetOutputType(), internal);\n+            }\n+        }\n+\n+        result.pushKV(\"success\", UniValue(true));\n+    } catch (const UniValue& e) {\n+        result.pushKV(\"success\", UniValue(false));\n+        result.pushKV(\"error\", e);\n+    } catch (...) {\n+        result.pushKV(\"success\", UniValue(false));\n+\n+        result.pushKV(\"error\", JSONRPCError(RPC_MISC_ERROR, \"Missing required fields\"));\n+    }\n+    if (warnings.size()) result.pushKV(\"warnings\", warnings);\n+    return result;\n+}\n+\n+UniValue importdescriptors(const JSONRPCRequest& main_request) {\n+    // Acquire the wallet\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(main_request);\n+    CWallet* const pwallet = wallet.get();\n+    if (!EnsureWalletIsAvailable(pwallet, main_request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+            RPCHelpMan{\"importdescriptors\",\n+                \"\\nImport descriptors. This will trigger a rescan of the blockchain based on the earliest timestamp of all descriptors being imported. Requires a new wallet backup.\\n\"\n+            \"\\nNote: This call can take over an hour to complete if using an early timestamp; during that time, other rpc calls\\n\"\n+            \"may report that the imported keys, addresses or scripts exist but related transactions are still missing.\\n\",\n+                {\n+                    {\"requests\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"Data to be imported\",\n+                        {\n+                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                                {\n+                                    {\"desc\", RPCArg::Type::STR, RPCArg::Optional::NO, \"Descriptor to import.\"},\n+                                    {\"active\", RPCArg::Type::BOOL, /* default */ \"false\", \"Set this descriptor to be the active descriptor for the corresponding output type/externality\"},\n+                                    {\"range\", RPCArg::Type::RANGE, RPCArg::Optional::OMITTED, \"If a ranged descriptor is used, this specifies the end or the range (in the form [begin,end]) to import\"},\n+                                    {\"next_index\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"If a ranged descriptor is set to active, this specifies the next index to generate addresses from\"},\n+                                    {\"timestamp\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"Time from which to start rescanning the blockchain for this descriptor, in \" + UNIX_EPOCH_TIME + \"\\n\"\n+        \"                                                              Use the string \\\"now\\\" to substitute the current synced blockchain time.\\n\"\n+        \"                                                              \\\"now\\\" can be specified to bypass scanning, for outputs which are known to never have been used, and\\n\"\n+        \"                                                              0 can be specified to scan the entire blockchain. Blocks up to 2 hours before the earliest timestamp\\n\"\n+        \"                                                              of all descriptors being imported will be scanned.\",\n+                                        /* oneline_description */ \"\", {\"timestamp | \\\"now\\\"\", \"integer / string\"}\n+                                    },\n+                                    {\"internal\", RPCArg::Type::BOOL, /* default */ \"false\", \"Stating whether matching outputs should be treated as not incoming payments (also known as change)\"},\n+                                    {\"label\", RPCArg::Type::STR, /* default */ \"''\", \"Label to assign to the address, only allowed with internal=false\"},\n+                                },\n+                            },\n+                        },\n+                        \"\\\"requests\\\"\"},\n+                },\n+                RPCResult{\n+                    RPCResult::Type::ARR, \"\", \"Response is an array with the same size as the input that has the execution result\",\n+                    {\n+                        {RPCResult::Type::OBJ, \"\", \"\",\n+                        {\n+                            {RPCResult::Type::BOOL, \"success\", \"\"},\n+                            {RPCResult::Type::ARR, \"warnings\", /* optional */ true, \"\",\n+                            {\n+                                {RPCResult::Type::STR, \"\", \"\"},\n+                            }},\n+                            {RPCResult::Type::OBJ, \"error\", /* optional */ true, \"\",\n+                            {\n+                                {RPCResult::Type::ELISION, \"\", \"JSONRPC error\"},\n+                            }},\n+                        }},\n+                    }\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"importdescriptors\", \"'[{ \\\"desc\\\": \\\"<my descriptor>\\\", \\\"timestamp\\\":1455191478, \\\"internal\\\": true }, \"\n+                                          \"{ \\\"desc\\\": \\\"<my desccriptor 2>\\\", \\\"label\\\": \\\"example 2\\\", \\\"timestamp\\\": 1455191480 }]'\") +\n+                    HelpExampleCli(\"importdescriptors\", \"'[{ \\\"desc\\\": \\\"<my descriptor>\\\", \\\"timestamp\\\":1455191478, \\\"active\\\": true, \\\"range\\\": [0,100], \\\"label\\\": \\\"<my bech32 wallet>\\\" }]'\")\n+                },\n+            }.Check(main_request);\n+\n+    //  Make sure wallet is a descriptor wallet\n+    if (!pwallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"importdescriptors is not available for non-descriptor wallets\");\n+    }\n+\n+    RPCTypeCheck(main_request.params, {UniValue::VARR, UniValue::VOBJ});\n+\n+    WalletRescanReserver reserver(*pwallet);\n+    if (!reserver.reserve()) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Wallet is currently rescanning. Abort existing rescan or wait.\");\n+    }\n+\n+    const UniValue& requests = main_request.params[0];\n+    const int64_t minimum_timestamp = 1;\n+    int64_t now = 0;\n+    int64_t lowest_timestamp = 0;\n+    bool rescan = false;\n+    UniValue response(UniValue::VARR);\n+    {\n+        auto locked_chain = pwallet->chain().lock();\n+        LOCK(pwallet->cs_wallet);\n+        EnsureWalletIsUnlocked(pwallet);\n+\n+        CHECK_NONFATAL(pwallet->chain().findBlock(pwallet->GetLastBlockHash(), FoundBlock().time(lowest_timestamp).mtpTime(now)));\n+\n+        // Get all timestamps and extract the lowest timestamp\n+        for (const UniValue& request : requests.getValues()) {\n+            // This throws an error if \"timestamp\" doesn't exist\n+            const int64_t timestamp = std::max(GetImportTimestamp(request, now), minimum_timestamp);\n+            const UniValue result = ProcessDescriptorImport(pwallet, request, timestamp);\n+            response.push_back(result);\n+\n+            if (lowest_timestamp > timestamp ) {\n+                lowest_timestamp = timestamp;\n+            }\n+\n+            // If we know the chain tip, and at least one request was successful then allow rescan\n+            if (!rescan && result[\"success\"].get_bool()) {\n+                rescan = true;\n+            }\n+        }\n+        pwallet->ConnectScriptPubKeyManNotifiers();\n+    }\n+\n+    // Rescan the blockchain using the lowest timestamp\n+    if (rescan) {\n+        int64_t scanned_time = pwallet->RescanFromTime(lowest_timestamp, reserver, true /* update */);\n+        {\n+            auto locked_chain = pwallet->chain().lock();\n+            LOCK(pwallet->cs_wallet);\n+            pwallet->ReacceptWalletTransactions();\n+        }\n+\n+        if (pwallet->IsAbortingRescan()) {\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Rescan aborted by user.\");\n+        }\n+\n+        if (scanned_time > lowest_timestamp) {\n+            std::vector<UniValue> results = response.getValues();\n+            response.clear();\n+            response.setArray();\n+\n+            // Compose the response\n+            for (unsigned int i = 0; i < requests.size(); ++i) {\n+                const UniValue& request = requests.getValues().at(i);\n+\n+                // If the descriptor timestamp is within the successfully scanned\n+                // range, or if the import result already has an error set, let\n+                // the result stand unmodified. Otherwise replace the result\n+                // with an error message.\n+                if (scanned_time <= GetImportTimestamp(request, now) || results.at(i).exists(\"error\")) {\n+                    response.push_back(results.at(i));\n+                } else {\n+                    UniValue result = UniValue(UniValue::VOBJ);\n+                    result.pushKV(\"success\", UniValue(false));\n+                    result.pushKV(\n+                        \"error\",\n+                        JSONRPCError(\n+                            RPC_MISC_ERROR,\n+                            strprintf(\"Rescan failed for descriptor with timestamp %d. There was an error reading a \"\n+                                      \"block from time %d, which is after or within %d seconds of key creation, and \"\n+                                      \"could contain transactions pertaining to the desc. As a result, transactions \"\n+                                      \"and coins using this desc may not appear in the wallet. This error could be \"\n+                                      \"caused by pruning or data corruption (see bitcoind log for details) and could \"\n+                                      \"be dealt with by downloading and rescanning the relevant blocks (see -reindex \"\n+                                      \"and -rescan options).\",\n+                                GetImportTimestamp(request, now), scanned_time - TIMESTAMP_WINDOW - 1, TIMESTAMP_WINDOW)));",
      "path": "src/wallet/rpcdump.cpp",
      "position": 289,
      "original_position": 289,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "ed0113820b498f1e904ca9a0b1205708a6f68dca",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Could avoid calling `GetImportTimestamp()` twice:\r\n```diff\r\n-                if (scanned_time <= GetImportTimestamp(request, now) || results.at(i).exists(\"error\")) {\r\n+                int64_t import_time = GetImportTimestamp(request, now);\r\n+                if (scanned_time <= import_time || results.at(i).exists(\"error\")) {\r\n                     response.push_back(results.at(i));\r\n                 } else {\r\n                     UniValue result = UniValue(UniValue::VOBJ);\r\n@@ -1739,7 +1740,7 @@ UniValue importdescriptors(const JSONRPCRequest& main_request) {\r\n                                       \"caused by pruning or data corruption (see bitcoind log for details) and could \"\r\n                                       \"be dealt with by downloading and rescanning the relevant blocks (see -reindex \"\r\n                                       \"and -rescan options).\",\r\n-                                GetImportTimestamp(request, now), scanned_time - TIMESTAMP_WINDOW - 1, TIMESTAMP_WINDOW)));\r\n+                                import_time, scanned_time - TIMESTAMP_WINDOW - 1, TIMESTAMP_WINDOW)));\r\n```",
      "created_at": "2020-04-23T14:30:34Z",
      "updated_at": "2020-04-23T18:00:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r413846027",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/413846027"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1746,
      "original_line": 1746,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/413849949",
      "pull_request_review_id": 399161804,
      "id": 413849949,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzg0OTk0OQ==",
      "diff_hunk": "@@ -1454,3 +1454,297 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n \n     return response;\n }\n+\n+static UniValue ProcessDescriptorImport(CWallet * const pwallet, const UniValue& data, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    UniValue warnings(UniValue::VARR);\n+    UniValue result(UniValue::VOBJ);\n+\n+    try {\n+        if (!data.exists(\"desc\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Descriptor not found.\");\n+        }\n+\n+        const std::string& descriptor = data[\"desc\"].get_str();\n+        const bool active = data.exists(\"active\") ? data[\"active\"].get_bool() : false;\n+        const bool internal = data.exists(\"internal\") ? data[\"internal\"].get_bool() : false;\n+        const std::string& label = data.exists(\"label\") ? data[\"label\"].get_str() : \"\";\n+\n+        // Parse descriptor string\n+        FlatSigningProvider keys;\n+        std::string error;\n+        auto parsed_desc = Parse(descriptor, keys, error, /* require_checksum = */ true);\n+        if (!parsed_desc) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, error);\n+        }\n+\n+        // Range check\n+        int64_t range_start = 0, range_end = 1, next_index = 0;\n+        if (!parsed_desc->IsRange() && data.exists(\"range\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Range should not be specified for an un-ranged descriptor\");\n+        } else if (parsed_desc->IsRange()) {\n+            if (data.exists(\"range\")) {\n+                auto range = ParseDescriptorRange(data[\"range\"]);\n+                range_start = range.first;\n+                range_end = range.second + 1; // Specified range end is inclusive, but we need range end as exclusive\n+            } else {\n+                warnings.push_back(\"Range not given, using default keypool range\");\n+                range_start = 0;\n+                range_end = gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE);\n+            }\n+            next_index = range_start;\n+\n+            if (data.exists(\"next_index\")) {\n+                next_index = data[\"next_index\"].get_int64();\n+                // bound checks\n+                if (next_index < range_start || next_index >= range_end) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"next_index is out of range\");\n+                }\n+            }\n+        }\n+\n+        // Active descriptors must be ranged\n+        if (active && !parsed_desc->IsRange()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Active descriptor must be ranged\");\n+        }\n+\n+        // Ranged descriptors should not have a label\n+        if (data.exists(\"range\") && data.exists(\"label\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Ranged descriptors should not have a label\");\n+        }\n+\n+        // Internal addresses should not have a label either\n+        if (internal && data.exists(\"label\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Internal addresses should not have a label\");\n+        }\n+\n+        // Combo descriptor check\n+        if (active && !parsed_desc->IsSingleType()) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Combo descriptors cannot be set to active\");\n+        }\n+\n+        // If the wallet disabled private keys, abort if private keys exist\n+        if (pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS) && !keys.keys.empty()) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Cannot import private keys to a wallet with private keys disabled\");\n+        }\n+\n+        // Need to ExpandPrivate to check if private keys are available for all pubkeys\n+        FlatSigningProvider expand_keys;\n+        std::vector<CScript> scripts;\n+        parsed_desc->Expand(0, keys, scripts, expand_keys);\n+        parsed_desc->ExpandPrivate(0, keys, expand_keys);\n+\n+        // Check if all private keys are provided\n+        bool have_all_privkeys = !expand_keys.keys.empty();\n+        for (const auto& entry : expand_keys.origins) {\n+            const CKeyID& key_id = entry.first;\n+            CKey key;\n+            if (!expand_keys.GetKey(key_id, key)) {\n+                have_all_privkeys = false;\n+                break;\n+            }\n+        }\n+\n+        // If private keys are enabled, check some things.\n+        if (!pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n+           if (keys.keys.empty()) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Cannot import descriptor without private keys to a wallet with private keys enabled\");\n+           }\n+           if (!have_all_privkeys) {\n+               warnings.push_back(\"Not all private keys provided. Some wallet functionality may return unexpected errors\");\n+           }\n+        }\n+\n+        WalletDescriptor w_desc(std::move(parsed_desc), timestamp, range_start, range_end, next_index);\n+\n+        // Check if the wallet already contains the descriptor\n+        auto existing_spk_manager = pwallet->GetDescriptorScriptPubKeyMan(w_desc);\n+        if (existing_spk_manager) {\n+            LOCK(existing_spk_manager->cs_desc_man);\n+            if (range_start > existing_spk_manager->GetWalletDescriptor().range_start) {\n+                throw JSONRPCError(RPC_INVALID_PARAMS, strprintf(\"range_start can only decrease; current range = [%d,%d]\", existing_spk_manager->GetWalletDescriptor().range_start, existing_spk_manager->GetWalletDescriptor().range_end));\n+            }\n+        }\n+\n+        // Add descriptor to the wallet\n+        auto spk_manager = pwallet->AddWalletDescriptor(w_desc, keys, label);\n+        if (spk_manager == nullptr) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, strprintf(\"Could not add descriptor '%s'\", descriptor));\n+        }\n+\n+        // Set descriptor as active if necessary\n+        if (active) {\n+            if (!w_desc.descriptor->GetOutputType()) {\n+                warnings.push_back(\"Unknown output type, cannot set descriptor to active.\");\n+            } else {\n+                pwallet->SetActiveScriptPubKeyMan(spk_manager->GetID(), *w_desc.descriptor->GetOutputType(), internal);\n+            }\n+        }\n+\n+        result.pushKV(\"success\", UniValue(true));\n+    } catch (const UniValue& e) {\n+        result.pushKV(\"success\", UniValue(false));\n+        result.pushKV(\"error\", e);\n+    } catch (...) {\n+        result.pushKV(\"success\", UniValue(false));\n+\n+        result.pushKV(\"error\", JSONRPCError(RPC_MISC_ERROR, \"Missing required fields\"));\n+    }\n+    if (warnings.size()) result.pushKV(\"warnings\", warnings);\n+    return result;\n+}\n+\n+UniValue importdescriptors(const JSONRPCRequest& main_request) {\n+    // Acquire the wallet\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(main_request);\n+    CWallet* const pwallet = wallet.get();\n+    if (!EnsureWalletIsAvailable(pwallet, main_request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+            RPCHelpMan{\"importdescriptors\",\n+                \"\\nImport descriptors. This will trigger a rescan of the blockchain based on the earliest timestamp of all descriptors being imported. Requires a new wallet backup.\\n\"\n+            \"\\nNote: This call can take over an hour to complete if using an early timestamp; during that time, other rpc calls\\n\"\n+            \"may report that the imported keys, addresses or scripts exist but related transactions are still missing.\\n\",\n+                {\n+                    {\"requests\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"Data to be imported\",\n+                        {\n+                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                                {\n+                                    {\"desc\", RPCArg::Type::STR, RPCArg::Optional::NO, \"Descriptor to import.\"},\n+                                    {\"active\", RPCArg::Type::BOOL, /* default */ \"false\", \"Set this descriptor to be the active descriptor for the corresponding output type/externality\"},\n+                                    {\"range\", RPCArg::Type::RANGE, RPCArg::Optional::OMITTED, \"If a ranged descriptor is used, this specifies the end or the range (in the form [begin,end]) to import\"},\n+                                    {\"next_index\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"If a ranged descriptor is set to active, this specifies the next index to generate addresses from\"},\n+                                    {\"timestamp\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"Time from which to start rescanning the blockchain for this descriptor, in \" + UNIX_EPOCH_TIME + \"\\n\"\n+        \"                                                              Use the string \\\"now\\\" to substitute the current synced blockchain time.\\n\"\n+        \"                                                              \\\"now\\\" can be specified to bypass scanning, for outputs which are known to never have been used, and\\n\"\n+        \"                                                              0 can be specified to scan the entire blockchain. Blocks up to 2 hours before the earliest timestamp\\n\"\n+        \"                                                              of all descriptors being imported will be scanned.\",\n+                                        /* oneline_description */ \"\", {\"timestamp | \\\"now\\\"\", \"integer / string\"}\n+                                    },\n+                                    {\"internal\", RPCArg::Type::BOOL, /* default */ \"false\", \"Stating whether matching outputs should be treated as not incoming payments (also known as change)\"},\n+                                    {\"label\", RPCArg::Type::STR, /* default */ \"''\", \"Label to assign to the address, only allowed with internal=false\"},\n+                                },\n+                            },\n+                        },\n+                        \"\\\"requests\\\"\"},\n+                },\n+                RPCResult{\n+                    RPCResult::Type::ARR, \"\", \"Response is an array with the same size as the input that has the execution result\",\n+                    {\n+                        {RPCResult::Type::OBJ, \"\", \"\",\n+                        {\n+                            {RPCResult::Type::BOOL, \"success\", \"\"},\n+                            {RPCResult::Type::ARR, \"warnings\", /* optional */ true, \"\",\n+                            {\n+                                {RPCResult::Type::STR, \"\", \"\"},\n+                            }},\n+                            {RPCResult::Type::OBJ, \"error\", /* optional */ true, \"\",\n+                            {\n+                                {RPCResult::Type::ELISION, \"\", \"JSONRPC error\"},\n+                            }},\n+                        }},\n+                    }\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"importdescriptors\", \"'[{ \\\"desc\\\": \\\"<my descriptor>\\\", \\\"timestamp\\\":1455191478, \\\"internal\\\": true }, \"\n+                                          \"{ \\\"desc\\\": \\\"<my desccriptor 2>\\\", \\\"label\\\": \\\"example 2\\\", \\\"timestamp\\\": 1455191480 }]'\") +\n+                    HelpExampleCli(\"importdescriptors\", \"'[{ \\\"desc\\\": \\\"<my descriptor>\\\", \\\"timestamp\\\":1455191478, \\\"active\\\": true, \\\"range\\\": [0,100], \\\"label\\\": \\\"<my bech32 wallet>\\\" }]'\")\n+                },\n+            }.Check(main_request);\n+\n+    //  Make sure wallet is a descriptor wallet\n+    if (!pwallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"importdescriptors is not available for non-descriptor wallets\");\n+    }\n+\n+    RPCTypeCheck(main_request.params, {UniValue::VARR, UniValue::VOBJ});\n+\n+    WalletRescanReserver reserver(*pwallet);\n+    if (!reserver.reserve()) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Wallet is currently rescanning. Abort existing rescan or wait.\");\n+    }\n+\n+    const UniValue& requests = main_request.params[0];\n+    const int64_t minimum_timestamp = 1;\n+    int64_t now = 0;\n+    int64_t lowest_timestamp = 0;\n+    bool rescan = false;\n+    UniValue response(UniValue::VARR);\n+    {\n+        auto locked_chain = pwallet->chain().lock();\n+        LOCK(pwallet->cs_wallet);\n+        EnsureWalletIsUnlocked(pwallet);\n+\n+        CHECK_NONFATAL(pwallet->chain().findBlock(pwallet->GetLastBlockHash(), FoundBlock().time(lowest_timestamp).mtpTime(now)));\n+\n+        // Get all timestamps and extract the lowest timestamp\n+        for (const UniValue& request : requests.getValues()) {\n+            // This throws an error if \"timestamp\" doesn't exist\n+            const int64_t timestamp = std::max(GetImportTimestamp(request, now), minimum_timestamp);\n+            const UniValue result = ProcessDescriptorImport(pwallet, request, timestamp);\n+            response.push_back(result);\n+\n+            if (lowest_timestamp > timestamp ) {\n+                lowest_timestamp = timestamp;\n+            }\n+\n+            // If we know the chain tip, and at least one request was successful then allow rescan\n+            if (!rescan && result[\"success\"].get_bool()) {\n+                rescan = true;\n+            }\n+        }\n+        pwallet->ConnectScriptPubKeyManNotifiers();\n+    }\n+\n+    // Rescan the blockchain using the lowest timestamp\n+    if (rescan) {\n+        int64_t scanned_time = pwallet->RescanFromTime(lowest_timestamp, reserver, true /* update */);\n+        {\n+            auto locked_chain = pwallet->chain().lock();\n+            LOCK(pwallet->cs_wallet);\n+            pwallet->ReacceptWalletTransactions();\n+        }\n+\n+        if (pwallet->IsAbortingRescan()) {\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Rescan aborted by user.\");\n+        }\n+\n+        if (scanned_time > lowest_timestamp) {\n+            std::vector<UniValue> results = response.getValues();\n+            response.clear();\n+            response.setArray();\n+\n+            // Compose the response\n+            for (unsigned int i = 0; i < requests.size(); ++i) {\n+                const UniValue& request = requests.getValues().at(i);\n+\n+                // If the descriptor timestamp is within the successfully scanned\n+                // range, or if the import result already has an error set, let\n+                // the result stand unmodified. Otherwise replace the result\n+                // with an error message.\n+                if (scanned_time <= GetImportTimestamp(request, now) || results.at(i).exists(\"error\")) {\n+                    response.push_back(results.at(i));\n+                } else {\n+                    UniValue result = UniValue(UniValue::VOBJ);\n+                    result.pushKV(\"success\", UniValue(false));\n+                    result.pushKV(\n+                        \"error\",\n+                        JSONRPCError(\n+                            RPC_MISC_ERROR,\n+                            strprintf(\"Rescan failed for descriptor with timestamp %d. There was an error reading a \"\n+                                      \"block from time %d, which is after or within %d seconds of key creation, and \"\n+                                      \"could contain transactions pertaining to the desc. As a result, transactions \"\n+                                      \"and coins using this desc may not appear in the wallet. This error could be \"\n+                                      \"caused by pruning or data corruption (see bitcoind log for details) and could \"\n+                                      \"be dealt with by downloading and rescanning the relevant blocks (see -reindex \"\n+                                      \"and -rescan options).\",\n+                                GetImportTimestamp(request, now), scanned_time - TIMESTAMP_WINDOW - 1, TIMESTAMP_WINDOW)));",
      "path": "src/wallet/rpcdump.cpp",
      "position": 289,
      "original_position": 289,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "ed0113820b498f1e904ca9a0b1205708a6f68dca",
      "in_reply_to_id": 413846027,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Actually nvm, the 40 lines of this section are essentially a duplicate of code in `importmulti`. It's outside the scope of this long PR, but they could be de-duped.",
      "created_at": "2020-04-23T14:35:09Z",
      "updated_at": "2020-04-23T18:00:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r413849949",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/413849949"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1746,
      "original_line": 1746,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/413851526",
      "pull_request_review_id": 399163577,
      "id": 413851526,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzg1MTUyNg==",
      "diff_hunk": "@@ -4314,6 +4324,7 @@ static const CRPCCommand commands[] =\n     { \"wallet\",             \"importprunedfunds\",                &importprunedfunds,             {\"rawtransaction\",\"txoutproof\"} },\n     { \"wallet\",             \"importpubkey\",                     &importpubkey,                  {\"pubkey\",\"label\",\"rescan\"} },\n     { \"wallet\",             \"importwallet\",                     &importwallet,                  {\"filename\"} },\n+    { \"wallet\",             \"importdescriptors\",                &importdescriptors,             {\"requests\"} },",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 91,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "ed0113820b498f1e904ca9a0b1205708a6f68dca",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: sort",
      "created_at": "2020-04-23T14:36:53Z",
      "updated_at": "2020-04-23T18:00:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r413851526",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/413851526"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4327,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/413870149",
      "pull_request_review_id": 399185480,
      "id": 413870149,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzg3MDE0OQ==",
      "diff_hunk": "@@ -4397,3 +4365,152 @@ void CWallet::ConnectScriptPubKeyManNotifiers()\n         spk_man->NotifyCanGetAddressesChanged.connect(NotifyCanGetAddressesChanged);\n     }\n }\n+\n+void CWallet::LoadDescriptorScriptPubKeyMan(uint256 id, WalletDescriptor& desc)\n+{\n+    auto spk_manager = std::unique_ptr<ScriptPubKeyMan>(new DescriptorScriptPubKeyMan(*this, desc));\n+    m_spk_managers[id] = std::move(spk_manager);\n+}\n+\n+void CWallet::SetupDescriptorScriptPubKeyMans()\n+{\n+    AssertLockHeld(cs_wallet);\n+\n+    // Make a seed\n+    CKey seed_key;\n+    seed_key.MakeNewKey(true);\n+    CPubKey seed = seed_key.GetPubKey();\n+    assert(seed_key.VerifyPubKey(seed));\n+\n+    // Get the extended key\n+    CExtKey master_key;\n+    master_key.SetSeed(seed_key.begin(), seed_key.size());\n+\n+    for (bool internal : {false, true}) {\n+        for (OutputType t : OUTPUT_TYPES) {\n+            auto spk_manager = std::unique_ptr<DescriptorScriptPubKeyMan>(new DescriptorScriptPubKeyMan(*this, t, internal));\n+            if (IsCrypted()) {\n+                if (IsLocked()) {\n+                    throw std::runtime_error(std::string(__func__) + \": Wallet is locked, cannot setup new descriptors\");\n+                }\n+                if (!spk_manager->CheckDecryptionKey(vMasterKey) && !spk_manager->Encrypt(vMasterKey, nullptr)) {\n+                    throw std::runtime_error(std::string(__func__) + \": Could not encrypt new descriptors\");\n+                }\n+            }\n+            spk_manager->SetupDescriptorGeneration(master_key);\n+            uint256 id = spk_manager->GetID();\n+            m_spk_managers[id] = std::move(spk_manager);\n+            SetActiveScriptPubKeyMan(id, t, internal);\n+        }\n+    }\n+}\n+\n+void CWallet::SetActiveScriptPubKeyMan(uint256 id, OutputType type, bool internal, bool memonly)\n+{\n+    WalletLogPrintf(\"Setting spkMan to active: id = %s, type = %d, internal = %d\\n\", id.ToString(), static_cast<int>(type), static_cast<int>(internal));\n+    auto& spk_mans = internal ? m_internal_spk_managers : m_external_spk_managers;\n+    auto spk_man = m_spk_managers.at(id).get();\n+    spk_man->SetType(type, internal);\n+    spk_mans[type] = spk_man;\n+\n+    if (!memonly) {\n+        WalletBatch batch(*database);\n+        if (!batch.WriteActiveScriptPubKeyMan(static_cast<uint8_t>(type), id, internal)) {\n+            throw std::runtime_error(std::string(__func__) + \": writing active ScriptPubKeyMan id failed\");\n+        }\n+    }\n+    NotifyCanGetAddressesChanged();\n+}\n+\n+bool CWallet::IsLegacy() const\n+{\n+    if (m_internal_spk_managers.count(OutputType::LEGACY) == 0) {\n+        return false;\n+    }\n+    auto spk_man = dynamic_cast<LegacyScriptPubKeyMan*>(m_internal_spk_managers.at(OutputType::LEGACY));\n+    return spk_man != nullptr;\n+}\n+\n+DescriptorScriptPubKeyMan* CWallet::GetDescriptorScriptPubKeyMan(const WalletDescriptor& desc) const\n+{\n+    for (auto& spk_man_pair : m_spk_managers) {\n+        // Try to downcast to DescriptorScriptPubKeyMan then check if the descriptors match\n+        DescriptorScriptPubKeyMan* spk_manager = dynamic_cast<DescriptorScriptPubKeyMan*>(spk_man_pair.second.get());\n+        if (spk_manager != nullptr && spk_manager->HasWalletDescriptor(desc)) {\n+            return spk_manager;\n+        }\n+    }\n+\n+    return nullptr;\n+}\n+\n+ScriptPubKeyMan* CWallet::AddWalletDescriptor(WalletDescriptor& desc, const FlatSigningProvider& signing_provider, const std::string& label)\n+{\n+    if (!IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+        WalletLogPrintf(\"Cannot add WalletDescriptor to a non-descriptor wallet\\n\");\n+        return nullptr;\n+    }\n+\n+    LOCK(cs_wallet);\n+    auto new_spk_man = std::unique_ptr<DescriptorScriptPubKeyMan>(new DescriptorScriptPubKeyMan(*this, desc));\n+\n+    // If we already have this descriptor, remove it from the maps but add the existing cache to desc\n+    auto old_spk_man = GetDescriptorScriptPubKeyMan(desc);\n+    if (old_spk_man) {\n+        WalletLogPrintf(\"Update existing descriptor: %s\\n\", desc.descriptor->ToString());\n+\n+        {\n+            LOCK(old_spk_man->cs_desc_man);\n+            new_spk_man->SetCache(old_spk_man->GetWalletDescriptor().cache);\n+        }\n+\n+        // Remove from maps of active spkMans\n+        for (bool internal : {false, true}) {\n+            for (OutputType t : OUTPUT_TYPES) {\n+                auto active_spk_man = GetScriptPubKeyMan(t, internal);\n+                if (active_spk_man && active_spk_man->GetID() == old_spk_man->GetID()) {\n+                    if (internal) {\n+                        m_internal_spk_managers.erase(t);\n+                    } else {\n+                        m_external_spk_managers.erase(t);\n+                    }\n+                    break;\n+                }\n+            }\n+        }\n+        m_spk_managers.erase(old_spk_man->GetID());",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 380,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "ed0113820b498f1e904ca9a0b1205708a6f68dca",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "unsure but maybe worth pulling this out of the loop\r\n```diff\r\n+        auto old_spk_man_id {old_spk_man->GetID()};\r\n         for (bool internal : {false, true}) {\r\n             for (OutputType t : OUTPUT_TYPES) {\r\n                 auto active_spk_man = GetScriptPubKeyMan(t, internal);\r\n-                if (active_spk_man && active_spk_man->GetID() == old_spk_man->GetID()) {\r\n+                if (active_spk_man && active_spk_man->GetID() == old_spk_man_id) {\r\n                     if (internal) {\r\n                         m_internal_spk_managers.erase(t);\r\n                     } else {\r\n@@ -4478,7 +4479,7 @@ ScriptPubKeyMan* CWallet::AddWalletDescriptor(WalletDescriptor& desc, const Flat\r\n                 }\r\n             }\r\n         }\r\n-        m_spk_managers.erase(old_spk_man->GetID());\r\n+        m_spk_managers.erase(old_spk_man_id);\r\n```",
      "created_at": "2020-04-23T14:57:50Z",
      "updated_at": "2020-04-23T18:00:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r413870149",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/413870149"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4481,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/413893900",
      "pull_request_review_id": 399213518,
      "id": 413893900,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzg5MzkwMA==",
      "diff_hunk": "@@ -240,11 +246,19 @@ class WalletBatch\n \n     bool WriteMinVersion(int nVersion);\n \n+    bool WriteDescriptorKey(const uint256& desc_id, const CPubKey& pubkey, const CPrivKey& privkey);\n+    bool WriteCryptedDescriptorKey(const uint256& desc_id, const CPubKey& pubkey, const std::vector<unsigned char>& secret);\n+    bool WriteDescriptor(const uint256& desc_id, const WalletDescriptor& descriptor);\n+    bool WriteDescriptorDerivedCache(const uint256& desc_id, uint32_t key_exp_index, uint32_t der_index, const CExtPubKey& xpub);\n+    bool WriteDescriptorParentCache(const uint256& desc_id, uint32_t key_exp_index, const CExtPubKey& xpub);",
      "path": "src/wallet/walletdb.h",
      "position": null,
      "original_position": 37,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "ed0113820b498f1e904ca9a0b1205708a6f68dca",
      "in_reply_to_id": 413760834,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Key expression index, see `descriptor.h`",
      "created_at": "2020-04-23T15:25:25Z",
      "updated_at": "2020-04-23T18:00:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r413893900",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/413893900"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 253,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/413900271",
      "pull_request_review_id": 399221172,
      "id": 413900271,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzkwMDI3MQ==",
      "diff_hunk": "@@ -0,0 +1,143 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test descriptor wallet function.\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error\n+)\n+\n+\n+class WalletDescriptorTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        self.extra_args = [['-keypool=100']]\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        # Make a descriptor wallet\n+        self.log.info(\"Making a descriptor wallet\")\n+        self.nodes[0].createwallet(wallet_name=\"desc1\", descriptors=True)\n+        self.nodes[0].unloadwallet(\"\")\n+\n+        # A descriptor wallet should have 100 addresses * 3 types = 300 keys\n+        self.log.info(\"Checking wallet info\")\n+        wallet_info = self.nodes[0].getwalletinfo()\n+        assert_equal(wallet_info['keypoolsize'], 300)\n+        assert_equal(wallet_info['keypoolsize_hd_internal'], 300)",
      "path": "test/functional/wallet_descriptor.py",
      "position": 33,
      "original_position": 33,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "ed0113820b498f1e904ca9a0b1205708a6f68dca",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "suggest adding:\r\n```diff\r\n         assert_equal(wallet_info['keypoolsize_hd_internal'], 300)\r\n+        # Expect getwalletinfo to not return \"keypoololdest\" for descriptor wallets, only legacy ones\r\n+        assert 'keypoololdest' not in wallet_info.keys()\r\n```",
      "created_at": "2020-04-23T15:33:09Z",
      "updated_at": "2020-04-23T18:00:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r413900271",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/413900271"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 33,
      "original_line": 33,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/413936172",
      "pull_request_review_id": 399263191,
      "id": 413936172,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzkzNjE3Mg==",
      "diff_hunk": "@@ -240,11 +246,19 @@ class WalletBatch\n \n     bool WriteMinVersion(int nVersion);\n \n+    bool WriteDescriptorKey(const uint256& desc_id, const CPubKey& pubkey, const CPrivKey& privkey);\n+    bool WriteCryptedDescriptorKey(const uint256& desc_id, const CPubKey& pubkey, const std::vector<unsigned char>& secret);\n+    bool WriteDescriptor(const uint256& desc_id, const WalletDescriptor& descriptor);\n+    bool WriteDescriptorDerivedCache(const uint256& desc_id, uint32_t key_exp_index, uint32_t der_index, const CExtPubKey& xpub);\n+    bool WriteDescriptorParentCache(const uint256& desc_id, uint32_t key_exp_index, const CExtPubKey& xpub);",
      "path": "src/wallet/walletdb.h",
      "position": null,
      "original_position": 37,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "ed0113820b498f1e904ca9a0b1205708a6f68dca",
      "in_reply_to_id": 413760834,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks @Sjors ",
      "created_at": "2020-04-23T16:18:15Z",
      "updated_at": "2020-04-23T18:00:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r413936172",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/413936172"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 253,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/413990312",
      "pull_request_review_id": 399325062,
      "id": 413990312,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk5MDMxMg==",
      "diff_hunk": "@@ -477,4 +482,111 @@ class LegacySigningProvider : public SigningProvider\n     bool GetKeyOrigin(const CKeyID& keyid, KeyOriginInfo& info) const override { return m_spk_man.GetKeyOrigin(keyid, info); }\n };\n \n+class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n+{\n+private:\n+    WalletDescriptor m_wallet_descriptor GUARDED_BY(cs_desc_man);\n+\n+    using ScriptPubKeyMap = std::map<CScript, int32_t>; // Map of scripts to descriptor range index\n+    using PubKeyMap = std::map<CPubKey, int32_t>; // Map of pubkeys involved in scripts to descriptor range index\n+    using CryptedKeyMap = std::map<CKeyID, std::pair<CPubKey, std::vector<unsigned char>>>;\n+    using KeyMap = std::map<CKeyID, CKey>;\n+\n+    ScriptPubKeyMap m_map_script_pub_keys GUARDED_BY(cs_desc_man);\n+    PubKeyMap m_map_pubkeys GUARDED_BY(cs_desc_man);\n+    int32_t m_max_cached_index = -1;\n+\n+    OutputType m_address_type;\n+    bool m_internal;\n+\n+    KeyMap m_map_keys GUARDED_BY(cs_desc_man);\n+    CryptedKeyMap m_map_crypted_keys GUARDED_BY(cs_desc_man);\n+\n+    bool SetCrypted();\n+\n+    //! keeps track of whether Unlock has run a thorough check before\n+    bool m_decryption_thoroughly_checked = false;\n+\n+    bool AddDescriptorKeyWithDB(WalletBatch& batch, const CKey& key, const CPubKey &pubkey);",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": 73,
      "original_position": 73,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "ed0113820b498f1e904ca9a0b1205708a6f68dca",
      "in_reply_to_id": 413732148,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It follows the naming convention used elsewhere.",
      "created_at": "2020-04-23T17:33:34Z",
      "updated_at": "2020-04-23T18:00:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r413990312",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/413990312"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 510,
      "original_line": 510,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414007475",
      "pull_request_review_id": 399344731,
      "id": 414007475,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAwNzQ3NQ==",
      "diff_hunk": "@@ -27,8 +27,10 @@ const std::string CRYPTED_KEY{\"ckey\"};\n const std::string CSCRIPT{\"cscript\"};\n const std::string DEFAULTKEY{\"defaultkey\"};\n const std::string DESTDATA{\"destdata\"};\n+const std::string ACTIVEEXTERNALSPK{\"activeexternalspk\"};\n const std::string FLAGS{\"flags\"};\n const std::string HDCHAIN{\"hdchain\"};\n+const std::string ACTIVEINTERNALSPK{\"activeinternalspk\"};",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 7,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "ed0113820b498f1e904ca9a0b1205708a6f68dca",
      "in_reply_to_id": 413622392,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Moved. They used to be named differently.",
      "created_at": "2020-04-23T17:58:57Z",
      "updated_at": "2020-04-23T18:00:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r414007475",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414007475"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 33,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414008333",
      "pull_request_review_id": 399345718,
      "id": 414008333,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAwODMzMw==",
      "diff_hunk": "@@ -179,6 +185,54 @@ bool WalletBatch::WriteMinVersion(int nVersion)\n     return WriteIC(DBKeys::MINVERSION, nVersion);\n }\n \n+bool WalletBatch::WriteActiveScriptPubKeyMan(uint8_t type, const uint256& id, bool internal)\n+{\n+    std::string key = DBKeys::ACTIVEEXTERNALSPK;\n+    if (internal) {\n+        key = DBKeys::ACTIVEINTERNALSPK;\n+    }",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 31,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "ed0113820b498f1e904ca9a0b1205708a6f68dca",
      "in_reply_to_id": 413629727,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-04-23T18:00:09Z",
      "updated_at": "2020-04-23T18:00:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r414008333",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414008333"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 193,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414008405",
      "pull_request_review_id": 399345790,
      "id": 414008405,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAwODQwNQ==",
      "diff_hunk": "@@ -1332,8 +1346,8 @@ CAmount CWallet::GetChange(const CTransaction& tx) const\n bool CWallet::IsHDEnabled() const\n {\n     bool result = true;\n-    for (const auto& spk_man_pair : m_spk_managers) {\n-        result &= spk_man_pair.second->IsHDEnabled();\n+    for (const auto& spk_man : GetActiveScriptPubKeyMans()) {\n+        result &= spk_man->IsHDEnabled();",
      "path": "src/wallet/wallet.cpp",
      "position": 88,
      "original_position": 86,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "ed0113820b498f1e904ca9a0b1205708a6f68dca",
      "in_reply_to_id": 413661739,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-04-23T18:00:16Z",
      "updated_at": "2020-04-23T18:00:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r414008405",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414008405"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1351,
      "original_line": 1351,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414008469",
      "pull_request_review_id": 399345860,
      "id": 414008469,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAwODQ2OQ==",
      "diff_hunk": "@@ -1497,3 +1497,669 @@ std::set<CKeyID> LegacyScriptPubKeyMan::GetKeys() const\n     }\n     return set_address;\n }\n+\n+void LegacyScriptPubKeyMan::SetType(OutputType type, bool internal) {}\n+\n+bool DescriptorScriptPubKeyMan::GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error)\n+{\n+    // Returns true if this descriptor supports getting new addresses. Conditions where we may be unable to fetch them (e.g. locked) are caught later\n+    if (!CanGetAddresses(m_internal)) {\n+        error = \"No addresses available\";\n+        return false;\n+    }\n+    {\n+        LOCK(cs_desc_man);\n+        assert(m_wallet_descriptor.descriptor->IsSingleType()); // This is a combo descriptor which should not be an active descriptor\n+        if (type != m_address_type) {\n+            throw std::runtime_error(std::string(__func__) + \": Types are inconsistent\");\n+        }\n+\n+        TopUp();\n+\n+        // Get the scriptPubKey from the descriptor\n+        FlatSigningProvider out_keys;\n+        std::vector<CScript> scripts_temp;\n+        if (m_wallet_descriptor.range_end <= m_max_cached_index && !TopUp(1)) {\n+            // We can't generate anymore keys\n+            error = \"Error: Keypool ran out, please call keypoolrefill first\";\n+            return false;\n+        }\n+        if (!m_wallet_descriptor.descriptor->ExpandFromCache(m_wallet_descriptor.next_index, m_wallet_descriptor.cache, scripts_temp, out_keys)) {\n+            // We can't generate anymore keys\n+            error = \"Error: Keypool ran out, please call keypoolrefill first\";\n+            return false;\n+        }\n+\n+        Optional<OutputType> out_script_type = m_wallet_descriptor.descriptor->GetOutputType();\n+        if (out_script_type && out_script_type == type) {\n+            ExtractDestination(scripts_temp[0], dest);\n+        } else {\n+            throw std::runtime_error(std::string(__func__) + \": Types are inconsistent. Stored type does not match type of newly generated address\");\n+        }\n+        m_wallet_descriptor.next_index++;\n+        WalletBatch(m_storage.GetDatabase()).WriteDescriptor(GetID(), m_wallet_descriptor);\n+        return true;\n+    }\n+}\n+\n+isminetype DescriptorScriptPubKeyMan::IsMine(const CScript& script) const\n+{\n+    LOCK(cs_desc_man);\n+    if (m_map_script_pub_keys.count(script) > 0) {\n+        return ISMINE_SPENDABLE;\n+    }\n+    return ISMINE_NO;\n+}\n+\n+bool DescriptorScriptPubKeyMan::CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys)\n+{\n+    LOCK(cs_desc_man);\n+    if (!m_map_keys.empty()) {\n+        return false;\n+    }\n+\n+    bool keyPass = m_map_crypted_keys.empty(); // Always pass when there are no encrypted keys\n+    bool keyFail = false;\n+    for (const auto& mi : m_map_crypted_keys) {\n+        const CPubKey &pubkey = mi.second.first;\n+        const std::vector<unsigned char> &crypted_secret = mi.second.second;\n+        CKey key;\n+        if (!DecryptKey(master_key, crypted_secret, pubkey, key)) {\n+            keyFail = true;\n+            break;\n+        }\n+        keyPass = true;\n+        if (m_decryption_thoroughly_checked)\n+            break;\n+    }\n+    if (keyPass && keyFail) {\n+        LogPrintf(\"The wallet is probably corrupted: Some keys decrypt but not all.\\n\");\n+        throw std::runtime_error(\"Error unlocking wallet: some keys decrypt but not all. Your wallet file may be corrupt.\");\n+    }\n+    if (keyFail || (!keyPass && !accept_no_keys)) {\n+        return false;\n+    }\n+    m_decryption_thoroughly_checked = true;\n+    return true;\n+}\n+\n+bool DescriptorScriptPubKeyMan::Encrypt(const CKeyingMaterial& master_key, WalletBatch* batch)\n+{\n+    LOCK(cs_desc_man);\n+    if (!m_map_crypted_keys.empty()) {\n+        return false;\n+    }\n+\n+    for (const KeyMap::value_type& key_in : m_map_keys)\n+    {\n+        const CKey &key = key_in.second;\n+        CPubKey pubkey = key.GetPubKey();\n+        CKeyingMaterial secret(key.begin(), key.end());\n+        std::vector<unsigned char> crypted_secret;\n+        if (!EncryptSecret(master_key, secret, pubkey.GetHash(), crypted_secret)) {\n+            return false;\n+        }\n+        m_map_crypted_keys[pubkey.GetID()] = make_pair(pubkey, crypted_secret);\n+        batch->WriteCryptedDescriptorKey(GetID(), pubkey, crypted_secret);\n+    }\n+    m_map_keys.clear();\n+    return true;\n+}\n+\n+bool DescriptorScriptPubKeyMan::GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool)\n+{\n+    LOCK(cs_desc_man);\n+    std::string error;\n+    bool result = GetNewDestination(type, address, error);\n+    index = m_wallet_descriptor.next_index - 1;\n+    return result;\n+}\n+\n+void DescriptorScriptPubKeyMan::ReturnDestination(int64_t index, bool internal, const CTxDestination& addr)\n+{\n+    LOCK(cs_desc_man);\n+    // Only return when the index was the most recent\n+    if (m_wallet_descriptor.next_index - 1 == index) {\n+        m_wallet_descriptor.next_index--;\n+    }\n+    WalletBatch(m_storage.GetDatabase()).WriteDescriptor(GetID(), m_wallet_descriptor);\n+    NotifyCanGetAddressesChanged();\n+}\n+\n+std::map<CKeyID, CKey> DescriptorScriptPubKeyMan::GetKeys() const\n+{\n+    AssertLockHeld(cs_desc_man);\n+    if (m_storage.HasEncryptionKeys() && !m_storage.IsLocked()) {\n+        KeyMap keys;\n+        for (auto key_pair : m_map_crypted_keys) {\n+            const CPubKey& pubkey = key_pair.second.first;\n+            const std::vector<unsigned char>& crypted_secret = key_pair.second.second;\n+            CKey key;\n+            DecryptKey(m_storage.GetEncryptionKey(), crypted_secret, pubkey, key);\n+            keys[pubkey.GetID()] = key;\n+        }\n+        return keys;\n+    }\n+    return m_map_keys;\n+}\n+\n+bool DescriptorScriptPubKeyMan::TopUp(unsigned int size)\n+{\n+    LOCK(cs_desc_man);\n+    unsigned int target_size;\n+    if (size > 0) {\n+        target_size = size;\n+    } else {\n+        target_size = std::max(gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 1);\n+    }\n+\n+    // Calculate the new range_end\n+    int32_t new_range_end = std::max(m_wallet_descriptor.next_index + (int32_t)target_size, m_wallet_descriptor.range_end);\n+\n+    // If the descriptor is not ranged, we actually just want to fill the first cache item\n+    if (!m_wallet_descriptor.descriptor->IsRange()) {\n+        new_range_end = 1;\n+        m_wallet_descriptor.range_end = 1;\n+        m_wallet_descriptor.range_start = 0;\n+    }\n+\n+    FlatSigningProvider provider;\n+    provider.keys = GetKeys();\n+\n+    WalletBatch batch(m_storage.GetDatabase());\n+    uint256 id = GetID();\n+    for (int32_t i = m_max_cached_index + 1; i < new_range_end; ++i) {\n+        FlatSigningProvider out_keys;\n+        std::vector<CScript> scripts_temp;\n+        DescriptorCache temp_cache;\n+        // Maybe we have a cached xpub and we can expand from the cache first\n+        if (!m_wallet_descriptor.descriptor->ExpandFromCache(i, m_wallet_descriptor.cache, scripts_temp, out_keys)) {\n+            if (!m_wallet_descriptor.descriptor->Expand(i, provider, scripts_temp, out_keys, &temp_cache)) return false;\n+        }\n+        // Add all of the scriptPubKeys to the scriptPubKey set\n+        for (const CScript& script : scripts_temp) {\n+            m_map_script_pub_keys[script] = i;\n+        }\n+        for (const auto& pk_pair : out_keys.pubkeys) {\n+            const CPubKey& pubkey = pk_pair.second;\n+            if (m_map_pubkeys.count(pubkey) != 0) {\n+                // We don't need to give an error here.\n+                // It doesn't matter which of many valid indexes the pubkey has, we just need an index where we can derive it and it's private key\n+                continue;\n+            }\n+            m_map_pubkeys[pubkey] = i;\n+        }\n+        // Write the cache\n+        for (const auto& parent_xpub_pair : temp_cache.GetCachedParentExtPubKeys()) {\n+            CExtPubKey xpub;\n+            if (m_wallet_descriptor.cache.GetCachedParentExtPubKey(parent_xpub_pair.first, xpub)) {\n+                if (xpub != parent_xpub_pair.second) {\n+                    throw std::runtime_error(std::string(__func__) + \": New cached parent xpub does not match already cached parent xpub\");\n+                }\n+                continue;\n+            }\n+            if (!batch.WriteDescriptorParentCache(id, parent_xpub_pair.first, parent_xpub_pair.second)) {\n+                throw std::runtime_error(std::string(__func__) + \": writing cache item failed\");\n+            }\n+            m_wallet_descriptor.cache.CacheParentExtPubKey(parent_xpub_pair.first, parent_xpub_pair.second);\n+        }\n+        for (const auto& derived_xpub_map_pair : temp_cache.GetCachedDerivedExtPubKeys()) {\n+            for (const auto& derived_xpub_pair : derived_xpub_map_pair.second) {\n+                CExtPubKey xpub;\n+                if (m_wallet_descriptor.cache.GetCachedDerivedExtPubKey(derived_xpub_map_pair.first, derived_xpub_pair.first, xpub)) {\n+                    if (xpub != derived_xpub_pair.second) {\n+                        throw std::runtime_error(std::string(__func__) + \": New cached derived xpub does not match already cached derived xpub\");\n+                    }\n+                    continue;\n+                }\n+                if (!batch.WriteDescriptorDerivedCache(id, derived_xpub_map_pair.first, derived_xpub_pair.first, derived_xpub_pair.second)) {\n+                    throw std::runtime_error(std::string(__func__) + \": writing cache item failed\");\n+                }\n+                m_wallet_descriptor.cache.CacheDerivedExtPubKey(derived_xpub_map_pair.first, derived_xpub_pair.first, derived_xpub_pair.second);\n+            }\n+        }\n+        m_max_cached_index++;\n+    }\n+    m_wallet_descriptor.range_end = new_range_end;\n+    batch.WriteDescriptor(GetID(), m_wallet_descriptor);\n+\n+    // By this point, the cache size should be the size of the entire range\n+    assert(m_wallet_descriptor.range_end - 1 == m_max_cached_index);\n+\n+    NotifyCanGetAddressesChanged();\n+    return true;\n+}\n+\n+void DescriptorScriptPubKeyMan::MarkUnusedAddresses(const CScript& script)\n+{\n+    LOCK(cs_desc_man);\n+    if (IsMine(script)) {\n+        int32_t index = m_map_script_pub_keys[script];\n+        if (index >= m_wallet_descriptor.next_index) {\n+            WalletLogPrintf(\"%s: Detected a used keypool item at index %d, mark all keypool items up to this item as used\\n\", __func__, index);\n+            m_wallet_descriptor.next_index = index + 1;\n+        }\n+        if (!TopUp()) {\n+            WalletLogPrintf(\"%s: Topping up keypool failed (locked wallet)\\n\", __func__);\n+        }\n+    }\n+}\n+\n+void DescriptorScriptPubKeyMan::AddDescriptorKey(const CKey& key, const CPubKey &pubkey)\n+{\n+    LOCK(cs_desc_man);\n+    WalletBatch batch(m_storage.GetDatabase());\n+    if (!AddDescriptorKeyWithDB(batch, key, pubkey)) {\n+        throw std::runtime_error(std::string(__func__) + \": writing descriptor private key failed\");\n+    }\n+}\n+\n+bool DescriptorScriptPubKeyMan::AddDescriptorKeyWithDB(WalletBatch& batch, const CKey& key, const CPubKey &pubkey)\n+{\n+    AssertLockHeld(cs_desc_man);\n+    assert(!m_storage.IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS));\n+\n+    if (m_storage.HasEncryptionKeys()) {\n+        if (m_storage.IsLocked()) {\n+            return false;\n+        }\n+\n+        std::vector<unsigned char> crypted_secret;\n+        CKeyingMaterial secret(key.begin(), key.end());\n+        if (!EncryptSecret(m_storage.GetEncryptionKey(), secret, pubkey.GetHash(), crypted_secret)) {\n+            return false;\n+        }\n+\n+        m_map_crypted_keys[pubkey.GetID()] = make_pair(pubkey, crypted_secret);\n+        batch.WriteCryptedDescriptorKey(GetID(), pubkey, crypted_secret);\n+        return true;\n+    } else {\n+        m_map_keys[pubkey.GetID()] = key;\n+        return batch.WriteDescriptorKey(GetID(), pubkey, key.GetPrivKey());\n+    }\n+}\n+\n+bool DescriptorScriptPubKeyMan::SetupDescriptorGeneration(const CExtKey& master_key)\n+{\n+    LOCK(cs_desc_man);\n+    assert(m_storage.IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS));\n+\n+    // Ignore when there is already a descriptor\n+    if (m_wallet_descriptor.descriptor) {\n+        return false;\n+    }\n+\n+    int64_t creation_time = GetTime();\n+\n+    std::string xpub = EncodeExtPubKey(master_key.Neuter());\n+\n+    // Build descriptor string\n+    std::string desc_prefix;\n+    std::string desc_suffix = \"/*)\";\n+    switch (m_address_type) {\n+    case OutputType::LEGACY: {\n+        desc_prefix = \"pkh(\" + xpub + \"/44'\";\n+        break;\n+    }\n+    case OutputType::P2SH_SEGWIT: {\n+        desc_prefix = \"sh(wpkh(\" + xpub + \"/49'\";\n+        desc_suffix += \")\";\n+        break;\n+    }\n+    case OutputType::BECH32: {\n+        desc_prefix = \"wpkh(\" + xpub + \"/84'\";\n+        break;\n+    }\n+    default: assert(false);\n+    }\n+\n+    // Mainnet derives at 0', testnet and regtest derive at 1'\n+    if (Params().IsTestChain()) {\n+        desc_prefix += \"/1'\";\n+    } else {\n+        desc_prefix += \"/0'\";\n+    }\n+\n+    std::string internal_path = m_internal ? \"/1\" : \"/0\";\n+    std::string desc_str = desc_prefix + \"/0'\" + internal_path + desc_suffix;\n+\n+    // Make the descriptor\n+    FlatSigningProvider keys;\n+    std::string error;\n+    std::unique_ptr<Descriptor> desc = Parse(desc_str, keys, error, false);\n+    WalletDescriptor w_desc(std::move(desc), creation_time, 0, 0, 0);\n+    m_wallet_descriptor = w_desc;\n+\n+    // Store the master private key, and descriptor\n+    WalletBatch batch(m_storage.GetDatabase());\n+    if (!AddDescriptorKeyWithDB(batch, master_key.key, master_key.key.GetPubKey())) {\n+        throw std::runtime_error(std::string(__func__) + \": writing descriptor master private key failed\");\n+    }\n+    if (!batch.WriteDescriptor(GetID(), m_wallet_descriptor)) {\n+        throw std::runtime_error(std::string(__func__) + \": writing descriptor failed\");\n+    }\n+\n+    // TopUp\n+    TopUp();\n+\n+    m_storage.UnsetBlankWalletFlag(batch);\n+    return true;\n+}\n+\n+bool DescriptorScriptPubKeyMan::IsHDEnabled() const\n+{\n+    LOCK(cs_desc_man);\n+    return m_wallet_descriptor.descriptor->IsRange();\n+}\n+\n+bool DescriptorScriptPubKeyMan::CanGetAddresses(bool internal) const\n+{\n+    // We can only give out addresses from descriptors that are single type (not combo), ranged,\n+    // and either has cached keys or can generate more keys (ignoring encryption)",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 388,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "ed0113820b498f1e904ca9a0b1205708a6f68dca",
      "in_reply_to_id": 413722005,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-04-23T18:00:20Z",
      "updated_at": "2020-04-23T18:00:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r414008469",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414008469"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1858,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414008547",
      "pull_request_review_id": 399345944,
      "id": 414008547,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAwODU0Nw==",
      "diff_hunk": "@@ -1497,3 +1497,669 @@ std::set<CKeyID> LegacyScriptPubKeyMan::GetKeys() const\n     }\n     return set_address;\n }\n+\n+void LegacyScriptPubKeyMan::SetType(OutputType type, bool internal) {}\n+\n+bool DescriptorScriptPubKeyMan::GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error)\n+{\n+    // Returns true if this descriptor supports getting new addresses. Conditions where we may be unable to fetch them (e.g. locked) are caught later\n+    if (!CanGetAddresses(m_internal)) {\n+        error = \"No addresses available\";\n+        return false;\n+    }\n+    {\n+        LOCK(cs_desc_man);\n+        assert(m_wallet_descriptor.descriptor->IsSingleType()); // This is a combo descriptor which should not be an active descriptor\n+        if (type != m_address_type) {\n+            throw std::runtime_error(std::string(__func__) + \": Types are inconsistent\");\n+        }\n+\n+        TopUp();\n+\n+        // Get the scriptPubKey from the descriptor\n+        FlatSigningProvider out_keys;\n+        std::vector<CScript> scripts_temp;\n+        if (m_wallet_descriptor.range_end <= m_max_cached_index && !TopUp(1)) {\n+            // We can't generate anymore keys\n+            error = \"Error: Keypool ran out, please call keypoolrefill first\";\n+            return false;\n+        }\n+        if (!m_wallet_descriptor.descriptor->ExpandFromCache(m_wallet_descriptor.next_index, m_wallet_descriptor.cache, scripts_temp, out_keys)) {\n+            // We can't generate anymore keys\n+            error = \"Error: Keypool ran out, please call keypoolrefill first\";\n+            return false;\n+        }\n+\n+        Optional<OutputType> out_script_type = m_wallet_descriptor.descriptor->GetOutputType();\n+        if (out_script_type && out_script_type == type) {\n+            ExtractDestination(scripts_temp[0], dest);\n+        } else {\n+            throw std::runtime_error(std::string(__func__) + \": Types are inconsistent. Stored type does not match type of newly generated address\");\n+        }\n+        m_wallet_descriptor.next_index++;\n+        WalletBatch(m_storage.GetDatabase()).WriteDescriptor(GetID(), m_wallet_descriptor);\n+        return true;\n+    }\n+}\n+\n+isminetype DescriptorScriptPubKeyMan::IsMine(const CScript& script) const\n+{\n+    LOCK(cs_desc_man);\n+    if (m_map_script_pub_keys.count(script) > 0) {\n+        return ISMINE_SPENDABLE;\n+    }\n+    return ISMINE_NO;\n+}\n+\n+bool DescriptorScriptPubKeyMan::CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys)\n+{\n+    LOCK(cs_desc_man);\n+    if (!m_map_keys.empty()) {\n+        return false;\n+    }\n+\n+    bool keyPass = m_map_crypted_keys.empty(); // Always pass when there are no encrypted keys\n+    bool keyFail = false;\n+    for (const auto& mi : m_map_crypted_keys) {\n+        const CPubKey &pubkey = mi.second.first;\n+        const std::vector<unsigned char> &crypted_secret = mi.second.second;\n+        CKey key;\n+        if (!DecryptKey(master_key, crypted_secret, pubkey, key)) {\n+            keyFail = true;\n+            break;\n+        }\n+        keyPass = true;\n+        if (m_decryption_thoroughly_checked)\n+            break;\n+    }\n+    if (keyPass && keyFail) {\n+        LogPrintf(\"The wallet is probably corrupted: Some keys decrypt but not all.\\n\");\n+        throw std::runtime_error(\"Error unlocking wallet: some keys decrypt but not all. Your wallet file may be corrupt.\");\n+    }\n+    if (keyFail || (!keyPass && !accept_no_keys)) {\n+        return false;\n+    }\n+    m_decryption_thoroughly_checked = true;\n+    return true;\n+}\n+\n+bool DescriptorScriptPubKeyMan::Encrypt(const CKeyingMaterial& master_key, WalletBatch* batch)\n+{\n+    LOCK(cs_desc_man);\n+    if (!m_map_crypted_keys.empty()) {\n+        return false;\n+    }\n+\n+    for (const KeyMap::value_type& key_in : m_map_keys)\n+    {\n+        const CKey &key = key_in.second;\n+        CPubKey pubkey = key.GetPubKey();\n+        CKeyingMaterial secret(key.begin(), key.end());\n+        std::vector<unsigned char> crypted_secret;\n+        if (!EncryptSecret(master_key, secret, pubkey.GetHash(), crypted_secret)) {\n+            return false;\n+        }\n+        m_map_crypted_keys[pubkey.GetID()] = make_pair(pubkey, crypted_secret);\n+        batch->WriteCryptedDescriptorKey(GetID(), pubkey, crypted_secret);\n+    }\n+    m_map_keys.clear();\n+    return true;\n+}\n+\n+bool DescriptorScriptPubKeyMan::GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool)\n+{\n+    LOCK(cs_desc_man);\n+    std::string error;\n+    bool result = GetNewDestination(type, address, error);\n+    index = m_wallet_descriptor.next_index - 1;\n+    return result;\n+}\n+\n+void DescriptorScriptPubKeyMan::ReturnDestination(int64_t index, bool internal, const CTxDestination& addr)\n+{\n+    LOCK(cs_desc_man);\n+    // Only return when the index was the most recent\n+    if (m_wallet_descriptor.next_index - 1 == index) {\n+        m_wallet_descriptor.next_index--;\n+    }\n+    WalletBatch(m_storage.GetDatabase()).WriteDescriptor(GetID(), m_wallet_descriptor);\n+    NotifyCanGetAddressesChanged();\n+}\n+\n+std::map<CKeyID, CKey> DescriptorScriptPubKeyMan::GetKeys() const\n+{\n+    AssertLockHeld(cs_desc_man);\n+    if (m_storage.HasEncryptionKeys() && !m_storage.IsLocked()) {\n+        KeyMap keys;\n+        for (auto key_pair : m_map_crypted_keys) {\n+            const CPubKey& pubkey = key_pair.second.first;\n+            const std::vector<unsigned char>& crypted_secret = key_pair.second.second;\n+            CKey key;\n+            DecryptKey(m_storage.GetEncryptionKey(), crypted_secret, pubkey, key);\n+            keys[pubkey.GetID()] = key;\n+        }\n+        return keys;\n+    }\n+    return m_map_keys;\n+}\n+\n+bool DescriptorScriptPubKeyMan::TopUp(unsigned int size)\n+{\n+    LOCK(cs_desc_man);\n+    unsigned int target_size;\n+    if (size > 0) {\n+        target_size = size;\n+    } else {\n+        target_size = std::max(gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 1);\n+    }\n+\n+    // Calculate the new range_end\n+    int32_t new_range_end = std::max(m_wallet_descriptor.next_index + (int32_t)target_size, m_wallet_descriptor.range_end);\n+\n+    // If the descriptor is not ranged, we actually just want to fill the first cache item\n+    if (!m_wallet_descriptor.descriptor->IsRange()) {\n+        new_range_end = 1;\n+        m_wallet_descriptor.range_end = 1;\n+        m_wallet_descriptor.range_start = 0;\n+    }\n+\n+    FlatSigningProvider provider;\n+    provider.keys = GetKeys();\n+\n+    WalletBatch batch(m_storage.GetDatabase());\n+    uint256 id = GetID();\n+    for (int32_t i = m_max_cached_index + 1; i < new_range_end; ++i) {\n+        FlatSigningProvider out_keys;\n+        std::vector<CScript> scripts_temp;\n+        DescriptorCache temp_cache;\n+        // Maybe we have a cached xpub and we can expand from the cache first\n+        if (!m_wallet_descriptor.descriptor->ExpandFromCache(i, m_wallet_descriptor.cache, scripts_temp, out_keys)) {\n+            if (!m_wallet_descriptor.descriptor->Expand(i, provider, scripts_temp, out_keys, &temp_cache)) return false;\n+        }\n+        // Add all of the scriptPubKeys to the scriptPubKey set\n+        for (const CScript& script : scripts_temp) {\n+            m_map_script_pub_keys[script] = i;\n+        }\n+        for (const auto& pk_pair : out_keys.pubkeys) {\n+            const CPubKey& pubkey = pk_pair.second;\n+            if (m_map_pubkeys.count(pubkey) != 0) {\n+                // We don't need to give an error here.\n+                // It doesn't matter which of many valid indexes the pubkey has, we just need an index where we can derive it and it's private key\n+                continue;\n+            }\n+            m_map_pubkeys[pubkey] = i;\n+        }\n+        // Write the cache\n+        for (const auto& parent_xpub_pair : temp_cache.GetCachedParentExtPubKeys()) {\n+            CExtPubKey xpub;\n+            if (m_wallet_descriptor.cache.GetCachedParentExtPubKey(parent_xpub_pair.first, xpub)) {\n+                if (xpub != parent_xpub_pair.second) {\n+                    throw std::runtime_error(std::string(__func__) + \": New cached parent xpub does not match already cached parent xpub\");\n+                }\n+                continue;\n+            }\n+            if (!batch.WriteDescriptorParentCache(id, parent_xpub_pair.first, parent_xpub_pair.second)) {\n+                throw std::runtime_error(std::string(__func__) + \": writing cache item failed\");\n+            }\n+            m_wallet_descriptor.cache.CacheParentExtPubKey(parent_xpub_pair.first, parent_xpub_pair.second);\n+        }\n+        for (const auto& derived_xpub_map_pair : temp_cache.GetCachedDerivedExtPubKeys()) {\n+            for (const auto& derived_xpub_pair : derived_xpub_map_pair.second) {\n+                CExtPubKey xpub;\n+                if (m_wallet_descriptor.cache.GetCachedDerivedExtPubKey(derived_xpub_map_pair.first, derived_xpub_pair.first, xpub)) {\n+                    if (xpub != derived_xpub_pair.second) {\n+                        throw std::runtime_error(std::string(__func__) + \": New cached derived xpub does not match already cached derived xpub\");\n+                    }\n+                    continue;\n+                }\n+                if (!batch.WriteDescriptorDerivedCache(id, derived_xpub_map_pair.first, derived_xpub_pair.first, derived_xpub_pair.second)) {\n+                    throw std::runtime_error(std::string(__func__) + \": writing cache item failed\");\n+                }\n+                m_wallet_descriptor.cache.CacheDerivedExtPubKey(derived_xpub_map_pair.first, derived_xpub_pair.first, derived_xpub_pair.second);\n+            }\n+        }\n+        m_max_cached_index++;\n+    }\n+    m_wallet_descriptor.range_end = new_range_end;\n+    batch.WriteDescriptor(GetID(), m_wallet_descriptor);\n+\n+    // By this point, the cache size should be the size of the entire range\n+    assert(m_wallet_descriptor.range_end - 1 == m_max_cached_index);\n+\n+    NotifyCanGetAddressesChanged();\n+    return true;\n+}\n+\n+void DescriptorScriptPubKeyMan::MarkUnusedAddresses(const CScript& script)\n+{\n+    LOCK(cs_desc_man);\n+    if (IsMine(script)) {\n+        int32_t index = m_map_script_pub_keys[script];\n+        if (index >= m_wallet_descriptor.next_index) {\n+            WalletLogPrintf(\"%s: Detected a used keypool item at index %d, mark all keypool items up to this item as used\\n\", __func__, index);\n+            m_wallet_descriptor.next_index = index + 1;\n+        }\n+        if (!TopUp()) {\n+            WalletLogPrintf(\"%s: Topping up keypool failed (locked wallet)\\n\", __func__);\n+        }\n+    }\n+}\n+\n+void DescriptorScriptPubKeyMan::AddDescriptorKey(const CKey& key, const CPubKey &pubkey)\n+{\n+    LOCK(cs_desc_man);\n+    WalletBatch batch(m_storage.GetDatabase());\n+    if (!AddDescriptorKeyWithDB(batch, key, pubkey)) {\n+        throw std::runtime_error(std::string(__func__) + \": writing descriptor private key failed\");\n+    }\n+}\n+\n+bool DescriptorScriptPubKeyMan::AddDescriptorKeyWithDB(WalletBatch& batch, const CKey& key, const CPubKey &pubkey)\n+{\n+    AssertLockHeld(cs_desc_man);\n+    assert(!m_storage.IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS));\n+\n+    if (m_storage.HasEncryptionKeys()) {\n+        if (m_storage.IsLocked()) {\n+            return false;\n+        }\n+\n+        std::vector<unsigned char> crypted_secret;\n+        CKeyingMaterial secret(key.begin(), key.end());\n+        if (!EncryptSecret(m_storage.GetEncryptionKey(), secret, pubkey.GetHash(), crypted_secret)) {\n+            return false;\n+        }\n+\n+        m_map_crypted_keys[pubkey.GetID()] = make_pair(pubkey, crypted_secret);\n+        batch.WriteCryptedDescriptorKey(GetID(), pubkey, crypted_secret);\n+        return true;",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 305,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "ed0113820b498f1e904ca9a0b1205708a6f68dca",
      "in_reply_to_id": 413736798,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-04-23T18:00:27Z",
      "updated_at": "2020-04-23T18:00:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r414008547",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414008547"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1775,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414008610",
      "pull_request_review_id": 399346013,
      "id": 414008610,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAwODYxMA==",
      "diff_hunk": "@@ -2471,13 +2472,16 @@ static UniValue getwalletinfo(const JSONRPCRequest& request)\n \n     size_t kpExternalSize = pwallet->KeypoolCountExternalKeys();\n     const auto bal = pwallet->GetBalance();\n+    int64_t kp_oldest = pwallet->GetOldestKeyPoolTime();\n     obj.pushKV(\"walletname\", pwallet->GetName());\n     obj.pushKV(\"walletversion\", pwallet->GetVersion());\n     obj.pushKV(\"balance\", ValueFromAmount(bal.m_mine_trusted));\n     obj.pushKV(\"unconfirmed_balance\", ValueFromAmount(bal.m_mine_untrusted_pending));\n     obj.pushKV(\"immature_balance\", ValueFromAmount(bal.m_mine_immature));\n     obj.pushKV(\"txcount\",       (int)pwallet->mapWallet.size());\n-    obj.pushKV(\"keypoololdest\", pwallet->GetOldestKeyPoolTime());\n+    if (kp_oldest > 0) {\n+        obj.pushKV(\"keypoololdest\", kp_oldest);",
      "path": "src/wallet/rpcwallet.cpp",
      "position": 39,
      "original_position": 30,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "ed0113820b498f1e904ca9a0b1205708a6f68dca",
      "in_reply_to_id": 413789802,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-04-23T18:00:32Z",
      "updated_at": "2020-04-23T18:00:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r414008610",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414008610"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2483,
      "original_line": 2483,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414008955",
      "pull_request_review_id": 399346434,
      "id": 414008955,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAwODk1NQ==",
      "diff_hunk": "@@ -240,11 +246,19 @@ class WalletBatch\n \n     bool WriteMinVersion(int nVersion);\n \n+    bool WriteDescriptorKey(const uint256& desc_id, const CPubKey& pubkey, const CPrivKey& privkey);\n+    bool WriteCryptedDescriptorKey(const uint256& desc_id, const CPubKey& pubkey, const std::vector<unsigned char>& secret);\n+    bool WriteDescriptor(const uint256& desc_id, const WalletDescriptor& descriptor);\n+    bool WriteDescriptorDerivedCache(const uint256& desc_id, uint32_t key_exp_index, uint32_t der_index, const CExtPubKey& xpub);",
      "path": "src/wallet/walletdb.h",
      "position": null,
      "original_position": 36,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "ed0113820b498f1e904ca9a0b1205708a6f68dca",
      "in_reply_to_id": 413762307,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I moved `xpub` to the front so that the only difference is that `WriteDescriptorDerivedCache` has `der_index` at the end.",
      "created_at": "2020-04-23T18:01:02Z",
      "updated_at": "2020-04-23T18:01:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r414008955",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414008955"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 252,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414009029",
      "pull_request_review_id": 399346503,
      "id": 414009029,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAwOTAyOQ==",
      "diff_hunk": "@@ -1454,3 +1454,297 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n \n     return response;\n }\n+\n+static UniValue ProcessDescriptorImport(CWallet * const pwallet, const UniValue& data, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    UniValue warnings(UniValue::VARR);\n+    UniValue result(UniValue::VOBJ);\n+\n+    try {\n+        if (!data.exists(\"desc\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Descriptor not found.\");\n+        }\n+\n+        const std::string& descriptor = data[\"desc\"].get_str();\n+        const bool active = data.exists(\"active\") ? data[\"active\"].get_bool() : false;\n+        const bool internal = data.exists(\"internal\") ? data[\"internal\"].get_bool() : false;\n+        const std::string& label = data.exists(\"label\") ? data[\"label\"].get_str() : \"\";\n+\n+        // Parse descriptor string\n+        FlatSigningProvider keys;\n+        std::string error;\n+        auto parsed_desc = Parse(descriptor, keys, error, /* require_checksum = */ true);\n+        if (!parsed_desc) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, error);\n+        }\n+\n+        // Range check\n+        int64_t range_start = 0, range_end = 1, next_index = 0;\n+        if (!parsed_desc->IsRange() && data.exists(\"range\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Range should not be specified for an un-ranged descriptor\");\n+        } else if (parsed_desc->IsRange()) {\n+            if (data.exists(\"range\")) {\n+                auto range = ParseDescriptorRange(data[\"range\"]);\n+                range_start = range.first;\n+                range_end = range.second + 1; // Specified range end is inclusive, but we need range end as exclusive\n+            } else {\n+                warnings.push_back(\"Range not given, using default keypool range\");\n+                range_start = 0;\n+                range_end = gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE);\n+            }\n+            next_index = range_start;\n+\n+            if (data.exists(\"next_index\")) {\n+                next_index = data[\"next_index\"].get_int64();\n+                // bound checks\n+                if (next_index < range_start || next_index >= range_end) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"next_index is out of range\");\n+                }\n+            }\n+        }\n+\n+        // Active descriptors must be ranged\n+        if (active && !parsed_desc->IsRange()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Active descriptor must be ranged\");\n+        }\n+\n+        // Ranged descriptors should not have a label\n+        if (data.exists(\"range\") && data.exists(\"label\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Ranged descriptors should not have a label\");\n+        }\n+\n+        // Internal addresses should not have a label either\n+        if (internal && data.exists(\"label\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Internal addresses should not have a label\");\n+        }\n+\n+        // Combo descriptor check\n+        if (active && !parsed_desc->IsSingleType()) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Combo descriptors cannot be set to active\");\n+        }\n+\n+        // If the wallet disabled private keys, abort if private keys exist\n+        if (pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS) && !keys.keys.empty()) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Cannot import private keys to a wallet with private keys disabled\");\n+        }\n+\n+        // Need to ExpandPrivate to check if private keys are available for all pubkeys\n+        FlatSigningProvider expand_keys;\n+        std::vector<CScript> scripts;\n+        parsed_desc->Expand(0, keys, scripts, expand_keys);\n+        parsed_desc->ExpandPrivate(0, keys, expand_keys);\n+\n+        // Check if all private keys are provided\n+        bool have_all_privkeys = !expand_keys.keys.empty();\n+        for (const auto& entry : expand_keys.origins) {\n+            const CKeyID& key_id = entry.first;\n+            CKey key;\n+            if (!expand_keys.GetKey(key_id, key)) {\n+                have_all_privkeys = false;\n+                break;\n+            }\n+        }\n+\n+        // If private keys are enabled, check some things.\n+        if (!pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n+           if (keys.keys.empty()) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Cannot import descriptor without private keys to a wallet with private keys enabled\");\n+           }\n+           if (!have_all_privkeys) {\n+               warnings.push_back(\"Not all private keys provided. Some wallet functionality may return unexpected errors\");\n+           }\n+        }\n+\n+        WalletDescriptor w_desc(std::move(parsed_desc), timestamp, range_start, range_end, next_index);\n+\n+        // Check if the wallet already contains the descriptor\n+        auto existing_spk_manager = pwallet->GetDescriptorScriptPubKeyMan(w_desc);\n+        if (existing_spk_manager) {\n+            LOCK(existing_spk_manager->cs_desc_man);\n+            if (range_start > existing_spk_manager->GetWalletDescriptor().range_start) {\n+                throw JSONRPCError(RPC_INVALID_PARAMS, strprintf(\"range_start can only decrease; current range = [%d,%d]\", existing_spk_manager->GetWalletDescriptor().range_start, existing_spk_manager->GetWalletDescriptor().range_end));\n+            }\n+        }\n+\n+        // Add descriptor to the wallet\n+        auto spk_manager = pwallet->AddWalletDescriptor(w_desc, keys, label);\n+        if (spk_manager == nullptr) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, strprintf(\"Could not add descriptor '%s'\", descriptor));\n+        }\n+\n+        // Set descriptor as active if necessary\n+        if (active) {\n+            if (!w_desc.descriptor->GetOutputType()) {\n+                warnings.push_back(\"Unknown output type, cannot set descriptor to active.\");\n+            } else {\n+                pwallet->SetActiveScriptPubKeyMan(spk_manager->GetID(), *w_desc.descriptor->GetOutputType(), internal);\n+            }\n+        }\n+\n+        result.pushKV(\"success\", UniValue(true));\n+    } catch (const UniValue& e) {\n+        result.pushKV(\"success\", UniValue(false));\n+        result.pushKV(\"error\", e);\n+    } catch (...) {\n+        result.pushKV(\"success\", UniValue(false));\n+\n+        result.pushKV(\"error\", JSONRPCError(RPC_MISC_ERROR, \"Missing required fields\"));\n+    }\n+    if (warnings.size()) result.pushKV(\"warnings\", warnings);\n+    return result;\n+}\n+\n+UniValue importdescriptors(const JSONRPCRequest& main_request) {\n+    // Acquire the wallet\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(main_request);\n+    CWallet* const pwallet = wallet.get();\n+    if (!EnsureWalletIsAvailable(pwallet, main_request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+            RPCHelpMan{\"importdescriptors\",\n+                \"\\nImport descriptors. This will trigger a rescan of the blockchain based on the earliest timestamp of all descriptors being imported. Requires a new wallet backup.\\n\"\n+            \"\\nNote: This call can take over an hour to complete if using an early timestamp; during that time, other rpc calls\\n\"\n+            \"may report that the imported keys, addresses or scripts exist but related transactions are still missing.\\n\",\n+                {\n+                    {\"requests\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"Data to be imported\",\n+                        {\n+                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                                {\n+                                    {\"desc\", RPCArg::Type::STR, RPCArg::Optional::NO, \"Descriptor to import.\"},\n+                                    {\"active\", RPCArg::Type::BOOL, /* default */ \"false\", \"Set this descriptor to be the active descriptor for the corresponding output type/externality\"},\n+                                    {\"range\", RPCArg::Type::RANGE, RPCArg::Optional::OMITTED, \"If a ranged descriptor is used, this specifies the end or the range (in the form [begin,end]) to import\"},\n+                                    {\"next_index\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"If a ranged descriptor is set to active, this specifies the next index to generate addresses from\"},\n+                                    {\"timestamp\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"Time from which to start rescanning the blockchain for this descriptor, in \" + UNIX_EPOCH_TIME + \"\\n\"\n+        \"                                                              Use the string \\\"now\\\" to substitute the current synced blockchain time.\\n\"\n+        \"                                                              \\\"now\\\" can be specified to bypass scanning, for outputs which are known to never have been used, and\\n\"\n+        \"                                                              0 can be specified to scan the entire blockchain. Blocks up to 2 hours before the earliest timestamp\\n\"\n+        \"                                                              of all descriptors being imported will be scanned.\",\n+                                        /* oneline_description */ \"\", {\"timestamp | \\\"now\\\"\", \"integer / string\"}\n+                                    },\n+                                    {\"internal\", RPCArg::Type::BOOL, /* default */ \"false\", \"Stating whether matching outputs should be treated as not incoming payments (also known as change)\"},",
      "path": "src/wallet/rpcdump.cpp",
      "position": null,
      "original_position": 172,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "ed0113820b498f1e904ca9a0b1205708a6f68dca",
      "in_reply_to_id": 413811801,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-04-23T18:01:07Z",
      "updated_at": "2020-04-23T18:01:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r414009029",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414009029"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1625,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414009061",
      "pull_request_review_id": 399346532,
      "id": 414009061,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAwOTA2MQ==",
      "diff_hunk": "@@ -1454,3 +1454,297 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n \n     return response;\n }\n+\n+static UniValue ProcessDescriptorImport(CWallet * const pwallet, const UniValue& data, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    UniValue warnings(UniValue::VARR);\n+    UniValue result(UniValue::VOBJ);\n+\n+    try {\n+        if (!data.exists(\"desc\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Descriptor not found.\");\n+        }\n+\n+        const std::string& descriptor = data[\"desc\"].get_str();\n+        const bool active = data.exists(\"active\") ? data[\"active\"].get_bool() : false;\n+        const bool internal = data.exists(\"internal\") ? data[\"internal\"].get_bool() : false;\n+        const std::string& label = data.exists(\"label\") ? data[\"label\"].get_str() : \"\";\n+\n+        // Parse descriptor string\n+        FlatSigningProvider keys;\n+        std::string error;\n+        auto parsed_desc = Parse(descriptor, keys, error, /* require_checksum = */ true);\n+        if (!parsed_desc) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, error);\n+        }\n+\n+        // Range check\n+        int64_t range_start = 0, range_end = 1, next_index = 0;\n+        if (!parsed_desc->IsRange() && data.exists(\"range\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Range should not be specified for an un-ranged descriptor\");\n+        } else if (parsed_desc->IsRange()) {\n+            if (data.exists(\"range\")) {\n+                auto range = ParseDescriptorRange(data[\"range\"]);\n+                range_start = range.first;\n+                range_end = range.second + 1; // Specified range end is inclusive, but we need range end as exclusive\n+            } else {\n+                warnings.push_back(\"Range not given, using default keypool range\");\n+                range_start = 0;\n+                range_end = gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE);\n+            }\n+            next_index = range_start;\n+\n+            if (data.exists(\"next_index\")) {\n+                next_index = data[\"next_index\"].get_int64();\n+                // bound checks\n+                if (next_index < range_start || next_index >= range_end) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"next_index is out of range\");\n+                }\n+            }\n+        }\n+\n+        // Active descriptors must be ranged\n+        if (active && !parsed_desc->IsRange()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Active descriptor must be ranged\");",
      "path": "src/wallet/rpcdump.cpp",
      "position": null,
      "original_position": 55,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "ed0113820b498f1e904ca9a0b1205708a6f68dca",
      "in_reply_to_id": 413805809,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-04-23T18:01:10Z",
      "updated_at": "2020-04-23T18:01:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r414009061",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414009061"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1508,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414009143",
      "pull_request_review_id": 399346639,
      "id": 414009143,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAwOTE0Mw==",
      "diff_hunk": "@@ -4314,6 +4324,7 @@ static const CRPCCommand commands[] =\n     { \"wallet\",             \"importprunedfunds\",                &importprunedfunds,             {\"rawtransaction\",\"txoutproof\"} },\n     { \"wallet\",             \"importpubkey\",                     &importpubkey,                  {\"pubkey\",\"label\",\"rescan\"} },\n     { \"wallet\",             \"importwallet\",                     &importwallet,                  {\"filename\"} },\n+    { \"wallet\",             \"importdescriptors\",                &importdescriptors,             {\"requests\"} },",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 91,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "ed0113820b498f1e904ca9a0b1205708a6f68dca",
      "in_reply_to_id": 413851526,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-04-23T18:01:17Z",
      "updated_at": "2020-04-23T18:01:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r414009143",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414009143"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4327,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414009214",
      "pull_request_review_id": 399346691,
      "id": 414009214,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAwOTIxNA==",
      "diff_hunk": "@@ -4397,3 +4365,152 @@ void CWallet::ConnectScriptPubKeyManNotifiers()\n         spk_man->NotifyCanGetAddressesChanged.connect(NotifyCanGetAddressesChanged);\n     }\n }\n+\n+void CWallet::LoadDescriptorScriptPubKeyMan(uint256 id, WalletDescriptor& desc)\n+{\n+    auto spk_manager = std::unique_ptr<ScriptPubKeyMan>(new DescriptorScriptPubKeyMan(*this, desc));\n+    m_spk_managers[id] = std::move(spk_manager);\n+}\n+\n+void CWallet::SetupDescriptorScriptPubKeyMans()\n+{\n+    AssertLockHeld(cs_wallet);\n+\n+    // Make a seed\n+    CKey seed_key;\n+    seed_key.MakeNewKey(true);\n+    CPubKey seed = seed_key.GetPubKey();\n+    assert(seed_key.VerifyPubKey(seed));\n+\n+    // Get the extended key\n+    CExtKey master_key;\n+    master_key.SetSeed(seed_key.begin(), seed_key.size());\n+\n+    for (bool internal : {false, true}) {\n+        for (OutputType t : OUTPUT_TYPES) {\n+            auto spk_manager = std::unique_ptr<DescriptorScriptPubKeyMan>(new DescriptorScriptPubKeyMan(*this, t, internal));\n+            if (IsCrypted()) {\n+                if (IsLocked()) {\n+                    throw std::runtime_error(std::string(__func__) + \": Wallet is locked, cannot setup new descriptors\");\n+                }\n+                if (!spk_manager->CheckDecryptionKey(vMasterKey) && !spk_manager->Encrypt(vMasterKey, nullptr)) {\n+                    throw std::runtime_error(std::string(__func__) + \": Could not encrypt new descriptors\");\n+                }\n+            }\n+            spk_manager->SetupDescriptorGeneration(master_key);\n+            uint256 id = spk_manager->GetID();\n+            m_spk_managers[id] = std::move(spk_manager);\n+            SetActiveScriptPubKeyMan(id, t, internal);\n+        }\n+    }\n+}\n+\n+void CWallet::SetActiveScriptPubKeyMan(uint256 id, OutputType type, bool internal, bool memonly)\n+{\n+    WalletLogPrintf(\"Setting spkMan to active: id = %s, type = %d, internal = %d\\n\", id.ToString(), static_cast<int>(type), static_cast<int>(internal));\n+    auto& spk_mans = internal ? m_internal_spk_managers : m_external_spk_managers;\n+    auto spk_man = m_spk_managers.at(id).get();\n+    spk_man->SetType(type, internal);\n+    spk_mans[type] = spk_man;\n+\n+    if (!memonly) {\n+        WalletBatch batch(*database);\n+        if (!batch.WriteActiveScriptPubKeyMan(static_cast<uint8_t>(type), id, internal)) {\n+            throw std::runtime_error(std::string(__func__) + \": writing active ScriptPubKeyMan id failed\");\n+        }\n+    }\n+    NotifyCanGetAddressesChanged();\n+}\n+\n+bool CWallet::IsLegacy() const\n+{\n+    if (m_internal_spk_managers.count(OutputType::LEGACY) == 0) {\n+        return false;\n+    }\n+    auto spk_man = dynamic_cast<LegacyScriptPubKeyMan*>(m_internal_spk_managers.at(OutputType::LEGACY));\n+    return spk_man != nullptr;\n+}\n+\n+DescriptorScriptPubKeyMan* CWallet::GetDescriptorScriptPubKeyMan(const WalletDescriptor& desc) const\n+{\n+    for (auto& spk_man_pair : m_spk_managers) {\n+        // Try to downcast to DescriptorScriptPubKeyMan then check if the descriptors match\n+        DescriptorScriptPubKeyMan* spk_manager = dynamic_cast<DescriptorScriptPubKeyMan*>(spk_man_pair.second.get());\n+        if (spk_manager != nullptr && spk_manager->HasWalletDescriptor(desc)) {\n+            return spk_manager;\n+        }\n+    }\n+\n+    return nullptr;\n+}\n+\n+ScriptPubKeyMan* CWallet::AddWalletDescriptor(WalletDescriptor& desc, const FlatSigningProvider& signing_provider, const std::string& label)\n+{\n+    if (!IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+        WalletLogPrintf(\"Cannot add WalletDescriptor to a non-descriptor wallet\\n\");\n+        return nullptr;\n+    }\n+\n+    LOCK(cs_wallet);\n+    auto new_spk_man = std::unique_ptr<DescriptorScriptPubKeyMan>(new DescriptorScriptPubKeyMan(*this, desc));\n+\n+    // If we already have this descriptor, remove it from the maps but add the existing cache to desc\n+    auto old_spk_man = GetDescriptorScriptPubKeyMan(desc);\n+    if (old_spk_man) {\n+        WalletLogPrintf(\"Update existing descriptor: %s\\n\", desc.descriptor->ToString());\n+\n+        {\n+            LOCK(old_spk_man->cs_desc_man);\n+            new_spk_man->SetCache(old_spk_man->GetWalletDescriptor().cache);\n+        }\n+\n+        // Remove from maps of active spkMans\n+        for (bool internal : {false, true}) {\n+            for (OutputType t : OUTPUT_TYPES) {\n+                auto active_spk_man = GetScriptPubKeyMan(t, internal);\n+                if (active_spk_man && active_spk_man->GetID() == old_spk_man->GetID()) {\n+                    if (internal) {\n+                        m_internal_spk_managers.erase(t);\n+                    } else {\n+                        m_external_spk_managers.erase(t);\n+                    }\n+                    break;\n+                }\n+            }\n+        }\n+        m_spk_managers.erase(old_spk_man->GetID());",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 380,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "ed0113820b498f1e904ca9a0b1205708a6f68dca",
      "in_reply_to_id": 413870149,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-04-23T18:01:22Z",
      "updated_at": "2020-04-23T18:01:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r414009214",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414009214"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4481,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414009257",
      "pull_request_review_id": 399346748,
      "id": 414009257,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAwOTI1Nw==",
      "diff_hunk": "@@ -0,0 +1,143 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test descriptor wallet function.\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error\n+)\n+\n+\n+class WalletDescriptorTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        self.extra_args = [['-keypool=100']]\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        # Make a descriptor wallet\n+        self.log.info(\"Making a descriptor wallet\")\n+        self.nodes[0].createwallet(wallet_name=\"desc1\", descriptors=True)\n+        self.nodes[0].unloadwallet(\"\")\n+\n+        # A descriptor wallet should have 100 addresses * 3 types = 300 keys\n+        self.log.info(\"Checking wallet info\")\n+        wallet_info = self.nodes[0].getwalletinfo()\n+        assert_equal(wallet_info['keypoolsize'], 300)\n+        assert_equal(wallet_info['keypoolsize_hd_internal'], 300)",
      "path": "test/functional/wallet_descriptor.py",
      "position": 33,
      "original_position": 33,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "ed0113820b498f1e904ca9a0b1205708a6f68dca",
      "in_reply_to_id": 413900271,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-04-23T18:01:26Z",
      "updated_at": "2020-04-23T18:01:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r414009257",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414009257"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 33,
      "original_line": 33,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/415300520",
      "pull_request_review_id": 400499477,
      "id": 415300520,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMwMDUyMA==",
      "diff_hunk": "@@ -1497,3 +1497,668 @@ std::set<CKeyID> LegacyScriptPubKeyMan::GetKeys() const\n     }\n     return set_address;\n }\n+\n+void LegacyScriptPubKeyMan::SetType(OutputType type, bool internal) {}\n+\n+bool DescriptorScriptPubKeyMan::GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error)\n+{\n+    // Returns true if this descriptor supports getting new addresses. Conditions where we may be unable to fetch them (e.g. locked) are caught later\n+    if (!CanGetAddresses(m_internal)) {\n+        error = \"No addresses available\";\n+        return false;\n+    }\n+    {\n+        LOCK(cs_desc_man);\n+        assert(m_wallet_descriptor.descriptor->IsSingleType()); // This is a combo descriptor which should not be an active descriptor\n+        if (type != m_address_type) {\n+            throw std::runtime_error(std::string(__func__) + \": Types are inconsistent\");\n+        }\n+\n+        TopUp();\n+\n+        // Get the scriptPubKey from the descriptor\n+        FlatSigningProvider out_keys;\n+        std::vector<CScript> scripts_temp;\n+        if (m_wallet_descriptor.range_end <= m_max_cached_index && !TopUp(1)) {\n+            // We can't generate anymore keys\n+            error = \"Error: Keypool ran out, please call keypoolrefill first\";\n+            return false;\n+        }\n+        if (!m_wallet_descriptor.descriptor->ExpandFromCache(m_wallet_descriptor.next_index, m_wallet_descriptor.cache, scripts_temp, out_keys)) {\n+            // We can't generate anymore keys\n+            error = \"Error: Keypool ran out, please call keypoolrefill first\";\n+            return false;\n+        }\n+\n+        Optional<OutputType> out_script_type = m_wallet_descriptor.descriptor->GetOutputType();\n+        if (out_script_type && out_script_type == type) {\n+            ExtractDestination(scripts_temp[0], dest);\n+        } else {\n+            throw std::runtime_error(std::string(__func__) + \": Types are inconsistent. Stored type does not match type of newly generated address\");\n+        }\n+        m_wallet_descriptor.next_index++;\n+        WalletBatch(m_storage.GetDatabase()).WriteDescriptor(GetID(), m_wallet_descriptor);\n+        return true;\n+    }\n+}\n+\n+isminetype DescriptorScriptPubKeyMan::IsMine(const CScript& script) const\n+{\n+    LOCK(cs_desc_man);\n+    if (m_map_script_pub_keys.count(script) > 0) {\n+        return ISMINE_SPENDABLE;\n+    }\n+    return ISMINE_NO;\n+}\n+\n+bool DescriptorScriptPubKeyMan::CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys)\n+{\n+    LOCK(cs_desc_man);\n+    if (!m_map_keys.empty()) {\n+        return false;\n+    }\n+\n+    bool keyPass = m_map_crypted_keys.empty(); // Always pass when there are no encrypted keys\n+    bool keyFail = false;\n+    for (const auto& mi : m_map_crypted_keys) {\n+        const CPubKey &pubkey = mi.second.first;\n+        const std::vector<unsigned char> &crypted_secret = mi.second.second;\n+        CKey key;\n+        if (!DecryptKey(master_key, crypted_secret, pubkey, key)) {\n+            keyFail = true;\n+            break;\n+        }\n+        keyPass = true;\n+        if (m_decryption_thoroughly_checked)\n+            break;\n+    }\n+    if (keyPass && keyFail) {\n+        LogPrintf(\"The wallet is probably corrupted: Some keys decrypt but not all.\\n\");\n+        throw std::runtime_error(\"Error unlocking wallet: some keys decrypt but not all. Your wallet file may be corrupt.\");\n+    }\n+    if (keyFail || (!keyPass && !accept_no_keys)) {\n+        return false;\n+    }\n+    m_decryption_thoroughly_checked = true;\n+    return true;\n+}\n+\n+bool DescriptorScriptPubKeyMan::Encrypt(const CKeyingMaterial& master_key, WalletBatch* batch)\n+{\n+    LOCK(cs_desc_man);\n+    if (!m_map_crypted_keys.empty()) {\n+        return false;\n+    }\n+\n+    for (const KeyMap::value_type& key_in : m_map_keys)\n+    {\n+        const CKey &key = key_in.second;\n+        CPubKey pubkey = key.GetPubKey();\n+        CKeyingMaterial secret(key.begin(), key.end());\n+        std::vector<unsigned char> crypted_secret;\n+        if (!EncryptSecret(master_key, secret, pubkey.GetHash(), crypted_secret)) {\n+            return false;\n+        }\n+        m_map_crypted_keys[pubkey.GetID()] = make_pair(pubkey, crypted_secret);\n+        batch->WriteCryptedDescriptorKey(GetID(), pubkey, crypted_secret);\n+    }\n+    m_map_keys.clear();\n+    return true;\n+}\n+\n+bool DescriptorScriptPubKeyMan::GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool)\n+{\n+    LOCK(cs_desc_man);\n+    std::string error;\n+    bool result = GetNewDestination(type, address, error);\n+    index = m_wallet_descriptor.next_index - 1;\n+    return result;\n+}\n+\n+void DescriptorScriptPubKeyMan::ReturnDestination(int64_t index, bool internal, const CTxDestination& addr)\n+{\n+    LOCK(cs_desc_man);\n+    // Only return when the index was the most recent\n+    if (m_wallet_descriptor.next_index - 1 == index) {\n+        m_wallet_descriptor.next_index--;\n+    }\n+    WalletBatch(m_storage.GetDatabase()).WriteDescriptor(GetID(), m_wallet_descriptor);\n+    NotifyCanGetAddressesChanged();\n+}\n+\n+std::map<CKeyID, CKey> DescriptorScriptPubKeyMan::GetKeys() const\n+{\n+    AssertLockHeld(cs_desc_man);\n+    if (m_storage.HasEncryptionKeys() && !m_storage.IsLocked()) {\n+        KeyMap keys;\n+        for (auto key_pair : m_map_crypted_keys) {\n+            const CPubKey& pubkey = key_pair.second.first;\n+            const std::vector<unsigned char>& crypted_secret = key_pair.second.second;\n+            CKey key;\n+            DecryptKey(m_storage.GetEncryptionKey(), crypted_secret, pubkey, key);\n+            keys[pubkey.GetID()] = key;\n+        }\n+        return keys;\n+    }\n+    return m_map_keys;\n+}\n+\n+bool DescriptorScriptPubKeyMan::TopUp(unsigned int size)\n+{\n+    LOCK(cs_desc_man);\n+    unsigned int target_size;\n+    if (size > 0) {\n+        target_size = size;\n+    } else {\n+        target_size = std::max(gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 1);\n+    }\n+\n+    // Calculate the new range_end\n+    int32_t new_range_end = std::max(m_wallet_descriptor.next_index + (int32_t)target_size, m_wallet_descriptor.range_end);\n+\n+    // If the descriptor is not ranged, we actually just want to fill the first cache item\n+    if (!m_wallet_descriptor.descriptor->IsRange()) {\n+        new_range_end = 1;\n+        m_wallet_descriptor.range_end = 1;\n+        m_wallet_descriptor.range_start = 0;\n+    }\n+\n+    FlatSigningProvider provider;\n+    provider.keys = GetKeys();\n+\n+    WalletBatch batch(m_storage.GetDatabase());\n+    uint256 id = GetID();\n+    for (int32_t i = m_max_cached_index + 1; i < new_range_end; ++i) {\n+        FlatSigningProvider out_keys;\n+        std::vector<CScript> scripts_temp;\n+        DescriptorCache temp_cache;\n+        // Maybe we have a cached xpub and we can expand from the cache first\n+        if (!m_wallet_descriptor.descriptor->ExpandFromCache(i, m_wallet_descriptor.cache, scripts_temp, out_keys)) {\n+            if (!m_wallet_descriptor.descriptor->Expand(i, provider, scripts_temp, out_keys, &temp_cache)) return false;\n+        }\n+        // Add all of the scriptPubKeys to the scriptPubKey set\n+        for (const CScript& script : scripts_temp) {\n+            m_map_script_pub_keys[script] = i;\n+        }\n+        for (const auto& pk_pair : out_keys.pubkeys) {\n+            const CPubKey& pubkey = pk_pair.second;\n+            if (m_map_pubkeys.count(pubkey) != 0) {\n+                // We don't need to give an error here.\n+                // It doesn't matter which of many valid indexes the pubkey has, we just need an index where we can derive it and it's private key\n+                continue;\n+            }\n+            m_map_pubkeys[pubkey] = i;\n+        }\n+        // Write the cache\n+        for (const auto& parent_xpub_pair : temp_cache.GetCachedParentExtPubKeys()) {\n+            CExtPubKey xpub;\n+            if (m_wallet_descriptor.cache.GetCachedParentExtPubKey(parent_xpub_pair.first, xpub)) {\n+                if (xpub != parent_xpub_pair.second) {\n+                    throw std::runtime_error(std::string(__func__) + \": New cached parent xpub does not match already cached parent xpub\");\n+                }\n+                continue;\n+            }\n+            if (!batch.WriteDescriptorParentCache(parent_xpub_pair.second, id, parent_xpub_pair.first)) {\n+                throw std::runtime_error(std::string(__func__) + \": writing cache item failed\");\n+            }\n+            m_wallet_descriptor.cache.CacheParentExtPubKey(parent_xpub_pair.first, parent_xpub_pair.second);\n+        }\n+        for (const auto& derived_xpub_map_pair : temp_cache.GetCachedDerivedExtPubKeys()) {\n+            for (const auto& derived_xpub_pair : derived_xpub_map_pair.second) {\n+                CExtPubKey xpub;\n+                if (m_wallet_descriptor.cache.GetCachedDerivedExtPubKey(derived_xpub_map_pair.first, derived_xpub_pair.first, xpub)) {\n+                    if (xpub != derived_xpub_pair.second) {\n+                        throw std::runtime_error(std::string(__func__) + \": New cached derived xpub does not match already cached derived xpub\");\n+                    }\n+                    continue;\n+                }\n+                if (!batch.WriteDescriptorDerivedCache(derived_xpub_pair.second, id, derived_xpub_map_pair.first, derived_xpub_pair.first)) {\n+                    throw std::runtime_error(std::string(__func__) + \": writing cache item failed\");\n+                }\n+                m_wallet_descriptor.cache.CacheDerivedExtPubKey(derived_xpub_map_pair.first, derived_xpub_pair.first, derived_xpub_pair.second);\n+            }\n+        }\n+        m_max_cached_index++;\n+    }\n+    m_wallet_descriptor.range_end = new_range_end;\n+    batch.WriteDescriptor(GetID(), m_wallet_descriptor);\n+\n+    // By this point, the cache size should be the size of the entire range\n+    assert(m_wallet_descriptor.range_end - 1 == m_max_cached_index);\n+\n+    NotifyCanGetAddressesChanged();\n+    return true;\n+}\n+\n+void DescriptorScriptPubKeyMan::MarkUnusedAddresses(const CScript& script)\n+{\n+    LOCK(cs_desc_man);\n+    if (IsMine(script)) {\n+        int32_t index = m_map_script_pub_keys[script];\n+        if (index >= m_wallet_descriptor.next_index) {\n+            WalletLogPrintf(\"%s: Detected a used keypool item at index %d, mark all keypool items up to this item as used\\n\", __func__, index);\n+            m_wallet_descriptor.next_index = index + 1;\n+        }\n+        if (!TopUp()) {\n+            WalletLogPrintf(\"%s: Topping up keypool failed (locked wallet)\\n\", __func__);\n+        }\n+    }\n+}\n+\n+void DescriptorScriptPubKeyMan::AddDescriptorKey(const CKey& key, const CPubKey &pubkey)\n+{\n+    LOCK(cs_desc_man);\n+    WalletBatch batch(m_storage.GetDatabase());\n+    if (!AddDescriptorKeyWithDB(batch, key, pubkey)) {\n+        throw std::runtime_error(std::string(__func__) + \": writing descriptor private key failed\");\n+    }\n+}\n+\n+bool DescriptorScriptPubKeyMan::AddDescriptorKeyWithDB(WalletBatch& batch, const CKey& key, const CPubKey &pubkey)\n+{\n+    AssertLockHeld(cs_desc_man);\n+    assert(!m_storage.IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS));\n+\n+    if (m_storage.HasEncryptionKeys()) {\n+        if (m_storage.IsLocked()) {\n+            return false;\n+        }\n+\n+        std::vector<unsigned char> crypted_secret;\n+        CKeyingMaterial secret(key.begin(), key.end());\n+        if (!EncryptSecret(m_storage.GetEncryptionKey(), secret, pubkey.GetHash(), crypted_secret)) {\n+            return false;\n+        }\n+\n+        m_map_crypted_keys[pubkey.GetID()] = make_pair(pubkey, crypted_secret);\n+        return batch.WriteCryptedDescriptorKey(GetID(), pubkey, crypted_secret);\n+    } else {\n+        m_map_keys[pubkey.GetID()] = key;\n+        return batch.WriteDescriptorKey(GetID(), pubkey, key.GetPrivKey());\n+    }\n+}\n+\n+bool DescriptorScriptPubKeyMan::SetupDescriptorGeneration(const CExtKey& master_key)\n+{\n+    LOCK(cs_desc_man);\n+    assert(m_storage.IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS));\n+\n+    // Ignore when there is already a descriptor\n+    if (m_wallet_descriptor.descriptor) {\n+        return false;\n+    }\n+\n+    int64_t creation_time = GetTime();\n+\n+    std::string xpub = EncodeExtPubKey(master_key.Neuter());\n+\n+    // Build descriptor string\n+    std::string desc_prefix;\n+    std::string desc_suffix = \"/*)\";\n+    switch (m_address_type) {\n+    case OutputType::LEGACY: {\n+        desc_prefix = \"pkh(\" + xpub + \"/44'\";\n+        break;\n+    }\n+    case OutputType::P2SH_SEGWIT: {\n+        desc_prefix = \"sh(wpkh(\" + xpub + \"/49'\";\n+        desc_suffix += \")\";\n+        break;\n+    }\n+    case OutputType::BECH32: {\n+        desc_prefix = \"wpkh(\" + xpub + \"/84'\";\n+        break;\n+    }\n+    default: assert(false);\n+    }\n+\n+    // Mainnet derives at 0', testnet and regtest derive at 1'\n+    if (Params().IsTestChain()) {\n+        desc_prefix += \"/1'\";\n+    } else {\n+        desc_prefix += \"/0'\";\n+    }\n+\n+    std::string internal_path = m_internal ? \"/1\" : \"/0\";\n+    std::string desc_str = desc_prefix + \"/0'\" + internal_path + desc_suffix;\n+\n+    // Make the descriptor\n+    FlatSigningProvider keys;\n+    std::string error;\n+    std::unique_ptr<Descriptor> desc = Parse(desc_str, keys, error, false);\n+    WalletDescriptor w_desc(std::move(desc), creation_time, 0, 0, 0);\n+    m_wallet_descriptor = w_desc;\n+\n+    // Store the master private key, and descriptor\n+    WalletBatch batch(m_storage.GetDatabase());\n+    if (!AddDescriptorKeyWithDB(batch, master_key.key, master_key.key.GetPubKey())) {\n+        throw std::runtime_error(std::string(__func__) + \": writing descriptor master private key failed\");\n+    }\n+    if (!batch.WriteDescriptor(GetID(), m_wallet_descriptor)) {\n+        throw std::runtime_error(std::string(__func__) + \": writing descriptor failed\");\n+    }\n+\n+    // TopUp",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 371,
      "original_position": 371,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "in_reply_to_id": null,
      "user": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Helpful comment 😅",
      "created_at": "2020-04-26T12:35:47Z",
      "updated_at": "2020-04-26T23:41:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r415300520",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/415300520"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1841,
      "original_line": 1841,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/415300916",
      "pull_request_review_id": 400499477,
      "id": 415300916,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMwMDkxNg==",
      "diff_hunk": "@@ -477,4 +482,111 @@ class LegacySigningProvider : public SigningProvider\n     bool GetKeyOrigin(const CKeyID& keyid, KeyOriginInfo& info) const override { return m_spk_man.GetKeyOrigin(keyid, info); }\n };\n \n+class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n+{\n+private:\n+    WalletDescriptor m_wallet_descriptor GUARDED_BY(cs_desc_man);\n+\n+    using ScriptPubKeyMap = std::map<CScript, int32_t>; // Map of scripts to descriptor range index\n+    using PubKeyMap = std::map<CPubKey, int32_t>; // Map of pubkeys involved in scripts to descriptor range index\n+    using CryptedKeyMap = std::map<CKeyID, std::pair<CPubKey, std::vector<unsigned char>>>;\n+    using KeyMap = std::map<CKeyID, CKey>;\n+\n+    ScriptPubKeyMap m_map_script_pub_keys GUARDED_BY(cs_desc_man);\n+    PubKeyMap m_map_pubkeys GUARDED_BY(cs_desc_man);\n+    int32_t m_max_cached_index = -1;\n+\n+    OutputType m_address_type;\n+    bool m_internal;\n+\n+    KeyMap m_map_keys GUARDED_BY(cs_desc_man);\n+    CryptedKeyMap m_map_crypted_keys GUARDED_BY(cs_desc_man);\n+\n+    bool SetCrypted();",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": 68,
      "original_position": 68,
      "commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "original_commit_id": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "in_reply_to_id": null,
      "user": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't think this should be here should it",
      "created_at": "2020-04-26T12:37:41Z",
      "updated_at": "2020-04-26T23:41:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16528#discussion_r415300916",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/415300916"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16528"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 505,
      "original_line": 505,
      "side": "RIGHT"
    }
  ]
}