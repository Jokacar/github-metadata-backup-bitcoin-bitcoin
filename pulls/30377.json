{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377",
    "id": 1949202161,
    "node_id": "PR_kwDOABII5850Lnbx",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/30377",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/30377.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/30377.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30377",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30377/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/e6b3438aae1bb7311f655d3eeb2331989002cd2f",
    "number": 30377,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "refactor: Add consteval uint256{\"str\"}",
    "user": {
      "login": "hodlinator",
      "id": 172445034,
      "node_id": "U_kgDOCkdNag",
      "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hodlinator",
      "html_url": "https://github.com/hodlinator",
      "followers_url": "https://api.github.com/users/hodlinator/followers",
      "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
      "organizations_url": "https://api.github.com/users/hodlinator/orgs",
      "repos_url": "https://api.github.com/users/hodlinator/repos",
      "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/hodlinator/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "`uint256S()` calls taking C-string literals are (before this PR) littered throughout the code and were executed at runtime to perform parsing unless a given optimizer was surprisingly efficient. While this may not be a hot spot, it's better hygiene *in C++20* to store the parsed data blob directly in the binary, without any parsing at runtime.\r\n\r\n### Alternative implementation possibilities\r\nA user defined `_uint256` literal function would be possible a small change. A `uint256(uint64_t, uint64_t, uint64_t, uint64_t)` constructor would be easier for the compiler but does not allow seamless copy-pasting of hashes.",
    "labels": [
      {
        "id": 135961,
        "node_id": "MDU6TGFiZWwxMzU5NjE=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
        "name": "Refactoring",
        "color": "E6F6D6",
        "default": false
      }
    ],
    "created_at": "2024-07-02T10:50:08Z",
    "updated_at": "2024-07-30T12:51:50Z",
    "mergeable": true,
    "mergeable_state": "blocked",
    "merge_commit_sha": "da218eab00505e637157176c1f61efe14f1b147f",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "hodlinator:2024-07_uint256S_consteval",
      "ref": "2024-07_uint256S_consteval",
      "sha": "e6b3438aae1bb7311f655d3eeb2331989002cd2f",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 813856282,
        "node_id": "R_kgDOMIJ2Gg",
        "name": "bitcoin",
        "full_name": "hodlinator/bitcoin",
        "owner": {
          "login": "hodlinator",
          "id": 172445034,
          "node_id": "U_kgDOCkdNag",
          "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/hodlinator",
          "html_url": "https://github.com/hodlinator",
          "followers_url": "https://api.github.com/users/hodlinator/followers",
          "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
          "organizations_url": "https://api.github.com/users/hodlinator/orgs",
          "repos_url": "https://api.github.com/users/hodlinator/repos",
          "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/hodlinator/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/hodlinator/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/hodlinator/bitcoin",
        "archive_url": "https://api.github.com/repos/hodlinator/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/hodlinator/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/hodlinator/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/hodlinator/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/hodlinator/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/hodlinator/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/hodlinator/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/hodlinator/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/hodlinator/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/hodlinator/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/hodlinator/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/hodlinator/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/hodlinator/bitcoin/events",
        "forks_url": "https://api.github.com/repos/hodlinator/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/hodlinator/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/hodlinator/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/hodlinator/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/hodlinator/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/hodlinator/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/hodlinator/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/hodlinator/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/hodlinator/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/hodlinator/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/hodlinator/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/hodlinator/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/hodlinator/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/hodlinator/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/hodlinator/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/hodlinator/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:hodlinator/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/hodlinator/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/hodlinator/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/hodlinator/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/hodlinator/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/hodlinator/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/hodlinator/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/hodlinator/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/hodlinator/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/hodlinator/bitcoin/hooks",
        "svn_url": "https://github.com/hodlinator/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "forks_count": 0,
        "stargazers_count": 0,
        "watchers_count": 0,
        "size": 222466,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2024-07-29T16:21:06Z",
        "created_at": "2024-06-11T22:00:51Z",
        "updated_at": "2024-06-11T22:00:51Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "30cef53707fb62ab1c9e73c2b5bc8b006e0613d3",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 35679,
        "stargazers_count": 77404,
        "watchers_count": 77404,
        "size": 263962,
        "default_branch": "master",
        "open_issues_count": 671,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2024-07-30T12:37:50Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2024-07-30T11:30:52Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 185,
    "deletions": 139,
    "changed_files": 20,
    "commits": 4,
    "review_comments": 45,
    "comments": 13
  },
  "events": [
    {
      "event": "commented",
      "id": 2202720361,
      "node_id": "IC_kwDOABII586DSthp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2202720361",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-02T10:50:10Z",
      "updated_at": "2024-07-27T13:18:12Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage\nFor detailed information about the code coverage, see the [test coverage report](https://corecheck.dev/bitcoin/bitcoin/pulls/30377).\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| Concept ACK | [maflcko](https://github.com/bitcoin/bitcoin/pull/30377#issuecomment-2208857200), [ryanofsky](https://github.com/bitcoin/bitcoin/pull/30377#issuecomment-2214432177) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#30526](https://github.com/bitcoin/bitcoin/pull/30526) (doc: Correct uint256 hex string endianness by hodlinator)\n* [#29656](https://github.com/bitcoin/bitcoin/pull/29656) (chainparams: Change nChainTx type to uint64_t by fjahr)\n* [#29553](https://github.com/bitcoin/bitcoin/pull/29553) (assumeutxo: Add dumptxoutset height param, remove shell scripts by fjahr)\n* [#27433](https://github.com/bitcoin/bitcoin/pull/27433) (getblocktemplate improvements for segwit and sigops by Sjors)\n* [#27427](https://github.com/bitcoin/bitcoin/pull/27427) (validation: Replace MinBIP9WarningHeight with MinBIP9WarningStartTime by dimitaracev)\n* [#26966](https://github.com/bitcoin/bitcoin/pull/26966) (index: blockfilter initial sync speedup, parallelize process by furszy)\n* [#26201](https://github.com/bitcoin/bitcoin/pull/26201) (Remove Taproot activation height by Sjors)\n* [#24230](https://github.com/bitcoin/bitcoin/pull/24230) (indexes: Stop using node internal types and locking cs_main, improve sync logic by ryanofsky)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#issuecomment-2202720361",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30377"
    },
    {
      "event": "labeled",
      "id": 13363990793,
      "node_id": "LE_lADOABII586ONi66zwAAAAMcjlEJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13363990793",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-02T10:50:12Z",
      "label": {
        "name": "Refactoring",
        "color": "E6F6D6"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13370582119,
      "node_id": "HRFPE_lADOABII586ONi66zwAAAAMc8uRn",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13370582119",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-02T19:10:24Z"
    },
    {
      "event": "labeled",
      "id": 13393384086,
      "node_id": "LE_lADOABII586ONi66zwAAAAMeTtKW",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13393384086",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-04T11:13:36Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2208857200,
      "node_id": "IC_kwDOABII586DqHxw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2208857200",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-04T12:29:51Z",
      "updated_at": "2024-07-04T12:29:51Z",
      "author_association": "MEMBER",
      "body": "> **transaction_identifier.h** - Fixed dormant bug in `TxidFromString()` where the `string_view` length wasn't respected(!).\r\n\r\nThis is known, see https://github.com/bitcoin/bitcoin/pull/28922#discussion_r1404437378. Thanks for picking it up!\r\n\r\nMaybe submit the fix first?\r\n\r\n\r\n\r\n> Realizing my GH history has minimum proof of work, I might have delayed creating a PR, but it felt timely as Testnet 4 is being worked on.\r\n\r\nNot sure what this has to do with testnet 4. May be best to remove unrelated non-technical details from the commits and pull request description. (You can still share them in later comments, if you really want)\r\n\r\n\r\nConcept ACK. The same should be done to `ParseHex`: https://github.com/bitcoin/bitcoin/pull/30048#discussion_r1592108480\r\n",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#issuecomment-2208857200",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30377"
    },
    {
      "event": "commented",
      "id": 2211455306,
      "node_id": "IC_kwDOABII586D0CFK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2211455306",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-05T22:00:08Z",
      "updated_at": "2024-07-05T22:00:08Z",
      "author_association": "CONTRIBUTOR",
      "body": "> > **transaction_identifier.h** - Fixed dormant bug in `TxidFromString()` where the `string_view` length wasn't respected(!).\r\n> \r\n> This is known, see [#28922 (comment)](https://github.com/bitcoin/bitcoin/pull/28922#discussion_r1404437378). Thanks for picking it up!\r\n>\r\n> Maybe submit the fix first?\r\n\r\nAha, good that you are tracking it! I see at least 4 possible fixes:\r\n\r\n1. Switch back to `Txid TxidFromString(const std::string& str)`\r\n2. Make `TxidFromString()` convert from `std::string_view` back to `std::string` internally before calling `uint256S()` to introduce a null-terminator.\r\n3. Carry over the full `SetHex(std::string_view)` implementation from this PR without touching the `SetHex(const char*)` implementation.\r\n4. Like 3 but implement `SetHex(const char* str)` by calling the `std::string_view` version.\r\n\r\nWhich do you recommend?\r\n\r\n> > Realizing my GH history has minimum proof of work, I might have delayed creating a PR, but it felt timely as Testnet 4 is being worked on.\r\n> \r\n> Not sure what this has to do with testnet 4. May be best to remove unrelated non-technical details from the commits and pull request description. (You can still share them in later comments, if you really want)\r\n\r\nThanks for the feedback. The Testnet 4 PR from this weeks review club introduces new hash-literals to the code, but I concede that it's a weak argument.\r\n\r\n> Concept ACK. The same should be done to `ParseHex`: [#30048 (comment)](https://github.com/bitcoin/bitcoin/pull/30048#discussion_r1592108480)\r\n\r\nThanks for having a look and the pointer to `ParseHex`! It was on my radar momentarily but I didn't reconsider it after reaching the current solution for `uint256S()`. Should probably introduce a `consteval ParseHex(const char*)` implementation as part of this PR. Moving to draft for now.",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#issuecomment-2211455306",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30377"
    },
    {
      "event": "convert_to_draft",
      "id": 13409704329,
      "node_id": "CTDE_lADOABII586ONi66zwAAAAMfR9mJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13409704329",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-05T22:00:29Z"
    },
    {
      "event": "commented",
      "id": 2213171483,
      "node_id": "IC_kwDOABII586D6lEb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2213171483",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-08T06:47:17Z",
      "updated_at": "2024-07-08T06:47:17Z",
      "author_association": "MEMBER",
      "body": "> Like 3 but implement `SetHex(const char* str)` by calling the `std::string_view` version.\r\n\r\nI don't think `const char*` overloads will need to be provided when `string_view` exists. Seems fine to just have a single `sting_view` function (and call it a fix at the same time).",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#issuecomment-2213171483",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30377"
    },
    {
      "event": "commented",
      "id": 2214432177,
      "node_id": "IC_kwDOABII586D_Y2x",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2214432177",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-08T15:22:15Z",
      "updated_at": "2024-07-08T15:22:15Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK, and would be very nice for this to cover ParseHex. If it did, it seems like it would fix the unexpected consensus library dependency on the util library that hebasto reported in https://github.com/bitcoin/bitcoin/pull/29015#issuecomment-2209258843: \r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/a83f050dbe1392fc6b1b6c2a140c7346653b40d3/src/pubkey.cpp#L193\r\n\r\n\r\n",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#issuecomment-2214432177",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30377"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13484305210,
      "node_id": "HRFPE_lADOABII586ONi66zwAAAAMjuis6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13484305210",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-12T09:03:00Z"
    },
    {
      "event": "commented",
      "id": 2225154172,
      "node_id": "IC_kwDOABII586EoSh8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2225154172",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-12T09:09:21Z",
      "updated_at": "2024-07-12T09:09:21Z",
      "author_association": "CONTRIBUTOR",
      "body": "> > **transaction_identifier.h** - Fixed dormant bug in `TxidFromString()` where the `string_view` length wasn't respected(!).\r\n> \r\n> This is known, see [#28922 (comment)](https://github.com/bitcoin/bitcoin/pull/28922#discussion_r1404437378). Thanks for picking it up!\r\n> \r\n> Maybe submit the fix first?\r\n\r\nPR up now: #30436",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#issuecomment-2225154172",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30377"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13484471753,
      "node_id": "HRFPE_lADOABII586ONi66zwAAAAMjvLXJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13484471753",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-12T09:16:32Z"
    },
    {
      "event": "unlabeled",
      "id": 13484542575,
      "node_id": "UNLE_lADOABII586ONi66zwAAAAMjvcpv",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13484542575",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-12T09:22:41Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13485120335,
      "node_id": "HRFPE_lADOABII586ONi66zwAAAAMjxptP",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13485120335",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-12T10:10:54Z"
    },
    {
      "event": "renamed",
      "id": 13485134435,
      "node_id": "RTE_lADOABII586ONi66zwAAAAMjxtJj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13485134435",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-12T10:12:12Z",
      "rename": {
        "from": "refactor: Make uint256S(const char*) consteval",
        "to": "refactor: Make uint256S(const char*) and ParseHex(const char*) consteval"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13492563809,
      "node_id": "HRFPE_lADOABII586ONi66zwAAAAMkOC9h",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13492563809",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-12T21:53:42Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13495499192,
      "node_id": "HRFPE_lADOABII586ONi66zwAAAAMkZPm4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13495499192",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-13T13:41:29Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13527003181,
      "node_id": "HRFPE_lADOABII586ONi66zwAAAAMmRbAt",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13527003181",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-16T20:57:00Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13527045694,
      "node_id": "HRFPE_lADOABII586ONi66zwAAAAMmRlY-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13527045694",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-16T21:01:39Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13527449652,
      "node_id": "HRFPE_lADOABII586ONi66zwAAAAMmTIA0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13527449652",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-16T21:51:21Z"
    },
    {
      "event": "commented",
      "id": 2231885215,
      "node_id": "IC_kwDOABII586FB92f",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2231885215",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-16T21:51:26Z",
      "updated_at": "2024-07-16T21:51:26Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/27531471253</sub>\n\n<details><summary>Hints</summary>\n\nMake sure to run all tests locally, according to the documentation.\n\nThe failure may happen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#issuecomment-2231885215",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30377"
    },
    {
      "event": "labeled",
      "id": 13527450250,
      "node_id": "LE_lADOABII586ONi66zwAAAAMmTIKK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13527450250",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-16T21:51:26Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "unlabeled",
      "id": 13530104045,
      "node_id": "UNLE_lADOABII586ONi66zwAAAAMmdQDt",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13530104045",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-17T03:18:15Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 2181892158,
      "node_id": "PRR_kwDOABII586CDQg-",
      "url": null,
      "actor": null,
      "commit_id": "92b0fb059f81959abbfe995b32ea103c2aa8db46",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#pullrequestreview-2181892158",
      "submitted_at": "2024-07-17T05:23:54Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
    },
    {
      "event": "reviewed",
      "id": 2181909441,
      "node_id": "PRR_kwDOABII586CDUvB",
      "url": null,
      "actor": null,
      "commit_id": "92b0fb059f81959abbfe995b32ea103c2aa8db46",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#pullrequestreview-2181909441",
      "submitted_at": "2024-07-17T05:27:52Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
    },
    {
      "event": "reviewed",
      "id": 2181911444,
      "node_id": "PRR_kwDOABII586CDVOU",
      "url": null,
      "actor": null,
      "commit_id": "dc5bf669e9120441d61ad3fa50be2cdca21a3691",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#pullrequestreview-2181911444",
      "submitted_at": "2024-07-17T05:29:39Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13554997074,
      "node_id": "HRFPE_lADOABII586ONi66zwAAAAMn8NdS",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13554997074",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-18T12:39:11Z"
    },
    {
      "event": "renamed",
      "id": 13555194322,
      "node_id": "RTE_lADOABII586ONi66zwAAAAMn89nS",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13555194322",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-18T12:52:54Z",
      "rename": {
        "from": "refactor: Make uint256S(const char*) and ParseHex(const char*) consteval",
        "to": "refactor: Add consteval uint256(const char (&str)[65]) and ParseHex(const char (&s)[Size])"
      }
    },
    {
      "event": "renamed",
      "id": 13555206656,
      "node_id": "RTE_lADOABII586ONi66zwAAAAMn9AoA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13555206656",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-18T12:53:49Z",
      "rename": {
        "from": "refactor: Add consteval uint256(const char (&str)[65]) and ParseHex(const char (&s)[Size])",
        "to": "refactor: Add consteval uint256(\"str\") and ParseHex(\"str\")"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13555896145,
      "node_id": "HRFPE_lADOABII586ONi66zwAAAAMn_o9R",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13555896145",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-18T13:23:33Z"
    },
    {
      "event": "commented",
      "id": 2236516058,
      "node_id": "IC_kwDOABII586FToba",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2236516058",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-18T13:23:39Z",
      "updated_at": "2024-07-18T13:23:39Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/27614934599</sub>\n\n<details><summary>Hints</summary>\n\nMake sure to run all tests locally, according to the documentation.\n\nThe failure may happen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#issuecomment-2236516058",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30377"
    },
    {
      "event": "labeled",
      "id": 13555897438,
      "node_id": "LE_lADOABII586ONi66zwAAAAMn_pRe",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13555897438",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-18T13:23:39Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2236517862,
      "node_id": "IC_kwDOABII586FTo3m",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2236517862",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-18T13:24:34Z",
      "updated_at": "2024-07-18T13:24:34Z",
      "author_association": "CONTRIBUTOR",
      "body": "(Fixed QT/GUI CI errors).",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#issuecomment-2236517862",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30377"
    },
    {
      "event": "reviewed",
      "id": 2185798321,
      "node_id": "PRR_kwDOABII586CSKKx",
      "url": null,
      "actor": null,
      "commit_id": "5f07d3eb9695613fe663470d88c4750d1382692c",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#pullrequestreview-2185798321",
      "submitted_at": "2024-07-18T13:24:36Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13556084342,
      "node_id": "HRFPE_lADOABII586ONi66zwAAAAMoAW52",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13556084342",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-18T13:36:57Z"
    },
    {
      "event": "reviewed",
      "id": 2185885552,
      "node_id": "PRR_kwDOABII586CSfdw",
      "url": null,
      "actor": null,
      "commit_id": "83a4d2f1cfc18733d778d1da72d37152efb463d1",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#pullrequestreview-2185885552",
      "submitted_at": "2024-07-18T13:48:31Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
    },
    {
      "event": "reviewed",
      "id": 2186032755,
      "node_id": "PRR_kwDOABII586CTDZz",
      "url": null,
      "actor": null,
      "commit_id": "83a4d2f1cfc18733d778d1da72d37152efb463d1",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#pullrequestreview-2186032755",
      "submitted_at": "2024-07-18T14:33:38Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
    },
    {
      "event": "unlabeled",
      "id": 13559435019,
      "node_id": "UNLE_lADOABII586ONi66zwAAAAMoNI8L",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13559435019",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-18T16:23:42Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13582174228,
      "node_id": "HRFPE_lADOABII586ONi66zwAAAAMpj4gU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13582174228",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-19T21:38:27Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13593399467,
      "node_id": "HRFPE_lADOABII586ONi66zwAAAAMqOtCr",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13593399467",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-21T19:05:54Z"
    },
    {
      "event": "reviewed",
      "id": 2190864424,
      "node_id": "PRR_kwDOABII586ClfAo",
      "url": null,
      "actor": null,
      "commit_id": "146a2db9e17466b3ff06a66103d5480bda2e6dba",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#pullrequestreview-2190864424",
      "submitted_at": "2024-07-22T07:48:58Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13597363317,
      "node_id": "HRFPE_lADOABII586ONi66zwAAAAMqd0x1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13597363317",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-22T08:15:36Z"
    },
    {
      "event": "referenced",
      "id": 13619712190,
      "node_id": "REFE_lADOABII586ONi66zwAAAAMrzFC-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13619712190",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "7cc00bfc86b4dece2e3baef5b12e910d79c822a1",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7cc00bfc86b4dece2e3baef5b12e910d79c822a1",
      "created_at": "2024-07-23T18:19:35Z"
    },
    {
      "event": "labeled",
      "id": 13621177292,
      "node_id": "LE_lADOABII586ONi66zwAAAAMr4qvM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13621177292",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-23T20:26:56Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDE4MDExZTc1NTZhZjk0ZTlmZTNhOGYwYTFiMGY1OGJiYzFkZDQ2ZTc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/18011e7556af94e9fe3a8f0a1b0f58bbc1dd46e7",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/18011e7556af94e9fe3a8f0a1b0f58bbc1dd46e7",
      "tree": {
        "sha": "35b782559f9480effbae5efb50279d58ad758ecb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/35b782559f9480effbae5efb50279d58ad758ecb"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 35b782559f9480effbae5efb50279d58ad758ecb\nparent 30cef53707fb62ab1c9e73c2b5bc8b006e0613d3\nauthor Hodlinator <172445034+hodlinator@users.noreply.github.com> 1721854421 +0200\ncommitter Hodlinator <172445034+hodlinator@users.noreply.github.com> 1722031124 +0200\n\nrefactor: Use string_view with uint256S()\n",
        "signature": "-----BEGIN SSH SIGNATURE-----\nU1NIU0lHAAAAAQAAADMAAAALc3NoLWVkMjU1MTkAAAAg39Hzirivn9mM3G8qwAOGOKsmHT\ny2f/O2iDRQI8UxEyoAAAADZ2l0AAAAAAAAAAZzaGE1MTIAAABTAAAAC3NzaC1lZDI1NTE5\nAAAAQP7OXGVpuVNPRwriu8+90wzqTY7x202E3azZCll/ZKavlR4IVkOnkQUfPl/bkj216D\ny8ufkfY9t3IJwVhHBkgQY=\n-----END SSH SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/30cef53707fb62ab1c9e73c2b5bc8b006e0613d3",
          "sha": "30cef53707fb62ab1c9e73c2b5bc8b006e0613d3",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/30cef53707fb62ab1c9e73c2b5bc8b006e0613d3"
        }
      ],
      "message": "refactor: Use string_view with uint256S()",
      "committer": {
        "name": "Hodlinator",
        "email": "172445034+hodlinator@users.noreply.github.com",
        "date": "2024-07-26T21:58:44Z"
      },
      "author": {
        "name": "Hodlinator",
        "email": "172445034+hodlinator@users.noreply.github.com",
        "date": "2024-07-24T20:53:41Z"
      },
      "sha": "18011e7556af94e9fe3a8f0a1b0f58bbc1dd46e7"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDkwYzMxYzRiZWViYjhmM2U3ZWNiMWJiYzhmNjk3N2FjZjkzMjBlMWM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/90c31c4beebb8f3e7ecb1bbc8f6977acf9320e1c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/90c31c4beebb8f3e7ecb1bbc8f6977acf9320e1c",
      "tree": {
        "sha": "b10f0ad8fe2264183f78168bb242cf27a3553a41",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b10f0ad8fe2264183f78168bb242cf27a3553a41"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree b10f0ad8fe2264183f78168bb242cf27a3553a41\nparent 18011e7556af94e9fe3a8f0a1b0f58bbc1dd46e7\nauthor Hodlinator <172445034+hodlinator@users.noreply.github.com> 1722031995 +0200\ncommitter Hodlinator <172445034+hodlinator@users.noreply.github.com> 1722032387 +0200\n\nrefactor: Add consteval uint256(const char (&str)[65])\n\nComplements uint256::FromHex() nicely in that it naturally does all error checking at compile time and so doesn't need to return an std::optional.\n\nWill be used in the following 2 commits to replace many calls to uint256S(). uint256S() calls taking C-string literals are littered throughout the codebase and executed at runtime to perform parsing unless a given optimizer was surprisingly efficient. While this may not be a hot spot, it's better hygiene in C++20 to store the parsed data blob directly in the binary, without any parsing at runtime.\n",
        "signature": "-----BEGIN SSH SIGNATURE-----\nU1NIU0lHAAAAAQAAADMAAAALc3NoLWVkMjU1MTkAAAAg39Hzirivn9mM3G8qwAOGOKsmHT\ny2f/O2iDRQI8UxEyoAAAADZ2l0AAAAAAAAAAZzaGE1MTIAAABTAAAAC3NzaC1lZDI1NTE5\nAAAAQD2kEal3kwoIrAbkeDzk5RTS8XPNWi6IR8coEsgBsQcX94SV0/DJrY3bxRg/UCZnhq\nCMOaGYEe0nhu2O+4ibggw=\n-----END SSH SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/18011e7556af94e9fe3a8f0a1b0f58bbc1dd46e7",
          "sha": "18011e7556af94e9fe3a8f0a1b0f58bbc1dd46e7",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/18011e7556af94e9fe3a8f0a1b0f58bbc1dd46e7"
        }
      ],
      "message": "refactor: Add consteval uint256(const char (&str)[65])\n\nComplements uint256::FromHex() nicely in that it naturally does all error checking at compile time and so doesn't need to return an std::optional.\n\nWill be used in the following 2 commits to replace many calls to uint256S(). uint256S() calls taking C-string literals are littered throughout the codebase and executed at runtime to perform parsing unless a given optimizer was surprisingly efficient. While this may not be a hot spot, it's better hygiene in C++20 to store the parsed data blob directly in the binary, without any parsing at runtime.",
      "committer": {
        "name": "Hodlinator",
        "email": "172445034+hodlinator@users.noreply.github.com",
        "date": "2024-07-26T22:19:47Z"
      },
      "author": {
        "name": "Hodlinator",
        "email": "172445034+hodlinator@users.noreply.github.com",
        "date": "2024-07-26T22:13:15Z"
      },
      "sha": "90c31c4beebb8f3e7ecb1bbc8f6977acf9320e1c"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13666516553,
      "node_id": "HRFPE_lADOABII586ONi66zwAAAAMuln5J",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13666516553",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-26T22:21:35Z"
    },
    {
      "event": "renamed",
      "id": 13666518397,
      "node_id": "RTE_lADOABII586ONi66zwAAAAMuloV9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13666518397",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-26T22:22:00Z",
      "rename": {
        "from": "refactor: Add consteval uint256(\"str\") and ParseHex(\"str\")",
        "to": "refactor: Add consteval uint256{\"str\"}"
      }
    },
    {
      "event": "commented",
      "id": 2253592887,
      "node_id": "IC_kwDOABII586GUxk3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2253592887",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-26T22:29:58Z",
      "updated_at": "2024-07-26T22:29:58Z",
      "author_association": "CONTRIBUTOR",
      "body": "I've scaled back this PR again to only concern itself with `uint256` and not `ParseHex` in the hopes of getting it merged.\r\n\r\nEven if it doesn't get merged in favor of work by @stickies-v (https://github.com/bitcoin/bitcoin/pull/30482#discussion_r1693314022) at least it might provide valuable input without too much distraction.\r\n\r\nWill try to make use of discussion around `ParseHex` approaches here in later PR.",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#issuecomment-2253592887",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30377"
    },
    {
      "event": "mentioned",
      "id": 13666554080,
      "node_id": "MEE_lADOABII586ONi66zwAAAAMulxDg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13666554080",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-26T22:29:59Z"
    },
    {
      "event": "subscribed",
      "id": 13666554082,
      "node_id": "SE_lADOABII586ONi66zwAAAAMulxDi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13666554082",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-26T22:30:00Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDZmNDVhZTRjODgzNmZmMjg3YzQ0NjQ3N2U4OTc2OWMwNWQzODFkM2Y",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6f45ae4c8836ff287c446477e89769c05d381d3f",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/6f45ae4c8836ff287c446477e89769c05d381d3f",
      "tree": {
        "sha": "d4c267ced189b3cbc282e10cdc93849d6a5c5db6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d4c267ced189b3cbc282e10cdc93849d6a5c5db6"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree d4c267ced189b3cbc282e10cdc93849d6a5c5db6\nparent 90c31c4beebb8f3e7ecb1bbc8f6977acf9320e1c\nauthor Hodlinator <172445034+hodlinator@users.noreply.github.com> 1722033300 +0200\ncommitter Hodlinator <172445034+hodlinator@users.noreply.github.com> 1722033300 +0200\n\nrefactor: Hand-replace some uint256S -> uint256\n\nchainparams.cpp - workaround for MSVC bug triggering C7595 - Calling consteval constructors in initializer lists fails, but works on GCC (13.2.0) & Clang (17.0.6).\n",
        "signature": "-----BEGIN SSH SIGNATURE-----\nU1NIU0lHAAAAAQAAADMAAAALc3NoLWVkMjU1MTkAAAAg39Hzirivn9mM3G8qwAOGOKsmHT\ny2f/O2iDRQI8UxEyoAAAADZ2l0AAAAAAAAAAZzaGE1MTIAAABTAAAAC3NzaC1lZDI1NTE5\nAAAAQAaUC7dc5dBS4EJSPzYlLmTaJJsKPv7TNXZwBAFULmqXEGAV2SqrQcrcnssltx4ZlE\neSwLucs6tW6OOMW8wh9gI=\n-----END SSH SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/90c31c4beebb8f3e7ecb1bbc8f6977acf9320e1c",
          "sha": "90c31c4beebb8f3e7ecb1bbc8f6977acf9320e1c",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/90c31c4beebb8f3e7ecb1bbc8f6977acf9320e1c"
        }
      ],
      "message": "refactor: Hand-replace some uint256S -> uint256\n\nchainparams.cpp - workaround for MSVC bug triggering C7595 - Calling consteval constructors in initializer lists fails, but works on GCC (13.2.0) & Clang (17.0.6).",
      "committer": {
        "name": "Hodlinator",
        "email": "172445034+hodlinator@users.noreply.github.com",
        "date": "2024-07-26T22:35:00Z"
      },
      "author": {
        "name": "Hodlinator",
        "email": "172445034+hodlinator@users.noreply.github.com",
        "date": "2024-07-26T22:35:00Z"
      },
      "sha": "6f45ae4c8836ff287c446477e89769c05d381d3f"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGU2YjM0MzhhYWUxYmI3MzExZjY1NWQzZWViMjMzMTk4OTAwMmNkMmY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e6b3438aae1bb7311f655d3eeb2331989002cd2f",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/e6b3438aae1bb7311f655d3eeb2331989002cd2f",
      "tree": {
        "sha": "f239943cbddf597f1c9c27bcfe3aae69c59eaba5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f239943cbddf597f1c9c27bcfe3aae69c59eaba5"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree f239943cbddf597f1c9c27bcfe3aae69c59eaba5\nparent 6f45ae4c8836ff287c446477e89769c05d381d3f\nauthor Hodlinator <172445034+hodlinator@users.noreply.github.com> 1722031769 +0200\ncommitter Hodlinator <172445034+hodlinator@users.noreply.github.com> 1722033301 +0200\n\nscripted-diff: Replace uint256S(\"str\") -> uint256{\"str\"}\n\n-BEGIN VERIFY SCRIPT-\nsed -i --regexp-extended -e 's/uint256S\\(\\\"(0x)?([^\\\"]*)\\\"\\)/uint256{\\\"\\2\\\"}/g' $(git grep -l 'uint256S' -- ':src' ':(exclude)src/test/uint256_tests.cpp' ':(exclude)src/test/arith_uint256_tests.cpp')\n-END VERIFY SCRIPT-\n",
        "signature": "-----BEGIN SSH SIGNATURE-----\nU1NIU0lHAAAAAQAAADMAAAALc3NoLWVkMjU1MTkAAAAg39Hzirivn9mM3G8qwAOGOKsmHT\ny2f/O2iDRQI8UxEyoAAAADZ2l0AAAAAAAAAAZzaGE1MTIAAABTAAAAC3NzaC1lZDI1NTE5\nAAAAQNYdMbyUlSeMOfKsEO9ZxWD4DXR5vbfP9MlIGOnnpmvKYLg7Hep+SOmkzPasu8YHxq\nBf7kBShyraupRNj1F3XAY=\n-----END SSH SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6f45ae4c8836ff287c446477e89769c05d381d3f",
          "sha": "6f45ae4c8836ff287c446477e89769c05d381d3f",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/6f45ae4c8836ff287c446477e89769c05d381d3f"
        }
      ],
      "message": "scripted-diff: Replace uint256S(\"str\") -> uint256{\"str\"}\n\n-BEGIN VERIFY SCRIPT-\nsed -i --regexp-extended -e 's/uint256S\\(\\\"(0x)?([^\\\"]*)\\\"\\)/uint256{\\\"\\2\\\"}/g' $(git grep -l 'uint256S' -- ':src' ':(exclude)src/test/uint256_tests.cpp' ':(exclude)src/test/arith_uint256_tests.cpp')\n-END VERIFY SCRIPT-",
      "committer": {
        "name": "Hodlinator",
        "email": "172445034+hodlinator@users.noreply.github.com",
        "date": "2024-07-26T22:35:01Z"
      },
      "author": {
        "name": "Hodlinator",
        "email": "172445034+hodlinator@users.noreply.github.com",
        "date": "2024-07-26T22:09:29Z"
      },
      "sha": "e6b3438aae1bb7311f655d3eeb2331989002cd2f"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13666577770,
      "node_id": "HRFPE_lADOABII586ONi66zwAAAAMul21q",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13666577770",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-26T22:35:26Z"
    },
    {
      "event": "unlabeled",
      "id": 13666915311,
      "node_id": "UNLE_lADOABII586ONi66zwAAAAMunJPv",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13666915311",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-27T00:07:31Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "ready_for_review",
      "id": 13668802827,
      "node_id": "RFRE_lADOABII586ONi66zwAAAAMuuWEL",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13668802827",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-27T13:02:45Z"
    },
    {
      "event": "commented",
      "id": 2257792024,
      "node_id": "IC_kwDOABII586GkywY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2257792024",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-30T08:37:09Z",
      "updated_at": "2024-07-30T08:37:09Z",
      "author_association": "MEMBER",
      "body": "> While this may not be a hot spot, it's better hygiene _in C++20_ to store the parsed data blob directly in the binary, without any parsing at runtime.\r\n\r\nI don't understand the motivation for this change. You seem to imply that this is some vague performance improvement. However, this is  questionable.\r\n\r\n\r\nWithout a benchmark or otherwise steps to reproduce, those claims are hard to follow. Also, I'd argue performance is irrelevant in the touched code parts.\r\n\r\nThe real reason is that there is now strict compile-time checking for full validity of the hex string. Previously, any invalid string was accepted silently. I'd say this should be explained in the motivation and not silently omitted.\r\n\r\nAn alternative to the changes in this pull request would be to change the changed lines to `*Assert(uint256::FromHex(...))` to get some of the same benefits (at runtime).",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#issuecomment-2257792024",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30377"
    },
    {
      "event": "commented",
      "id": 2257802299,
      "node_id": "IC_kwDOABII586Gk1Q7",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2257802299",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-30T08:42:06Z",
      "updated_at": "2024-07-30T08:42:06Z",
      "author_association": "MEMBER",
      "body": "Maybe even close this pull request and open a fresh one, given that most discussion and conceptual feedback is about something that is now dropped from the pull? https://github.com/bitcoin/bitcoin/pull/30377#issuecomment-2214432177",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#issuecomment-2257802299",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30377"
    },
    {
      "event": "commented",
      "id": 2258277800,
      "node_id": "IC_kwDOABII586GmpWo",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2258277800",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-30T12:51:49Z",
      "updated_at": "2024-07-30T12:51:49Z",
      "author_association": "CONTRIBUTOR",
      "body": "I think I don't understand the suggestion to this close PR, or maybe I just disagree with it. It seems like there are a lot of reasons to think this is a good change. It does seem like the main benefit is that constants can be checked at compile time rather than runtime, but this change can also eliminate runtime dependencies(*), make it possible to derive other constants programmatically rather than hardcoding them as opaque binary strings, make the binary smaller, and make it start up faster. The term \"hygiene\" can be a little vague, but if this change enables all of that, it seems like good hygiene to me.\r\n\r\n(*) Even if this change doesn't make ParseHex consteval right now, it seems like it would help make it consteval in the future, unless I'm missing something.\r\n",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#issuecomment-2258277800",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30377"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1680414541",
      "pull_request_review_id": 2181892158,
      "id": 1680414541,
      "node_id": "PRRC_kwDOABII585kKRdN",
      "diff_hunk": "@@ -111,6 +112,47 @@ class uint256 : public base_blob<256> {\n     static const uint256 ONE;\n };\n \n+/* uint256 from const char *.\n+ * Could theoretically have been a constructor but is overload of uint256S() for\n+ * historical reasons.\n+ */\n+consteval uint256 uint256S(const char *str)",
      "path": "src/uint256.h",
      "position": null,
      "original_position": 16,
      "commit_id": "e6b3438aae1bb7311f655d3eeb2331989002cd2f",
      "original_commit_id": "dc5bf669e9120441d61ad3fa50be2cdca21a3691",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "not sure about overloading this. Otherwise, one may get a runtime evaluation when switching from a raw string literal pointer to a consteval string_view, no?\r\n\r\nSeems clearer to make it a constructor taking a string_view? I guess the only confusion could be that the `Span<const unsigned char>` and string_view (aka `Span<const char>`) do different things (one is hex decoding and the other is not), but that should be fine, because both are distinct types.",
      "created_at": "2024-07-17T05:10:45Z",
      "updated_at": "2024-07-17T05:23:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1680414541",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1680414541"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": 115,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 119,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1680415361",
      "pull_request_review_id": 2181892158,
      "id": 1680415361,
      "node_id": "PRRC_kwDOABII585kKRqB",
      "diff_hunk": "@@ -111,6 +112,47 @@ class uint256 : public base_blob<256> {\n     static const uint256 ONE;\n };\n \n+/* uint256 from const char *.\n+ * Could theoretically have been a constructor but is overload of uint256S() for\n+ * historical reasons.\n+ */\n+consteval uint256 uint256S(const char *str)\n+{\n+   // Non lookup table version of HexDigit().\n+    auto from_hex = [](const char c) -> int8_t {\n+        if (c >= '0' && c <= '9')\n+            return c - '0';\n+        else if (c >= 'a' && c <= 'f')\n+            return c - 'a' + 0xA;\n+        else if (c >= 'A' && c <= 'F')\n+            return c - 'A' + 0xA;\n+        else\n+            return -1;\n+    };\n+\n+    // Skip leading spaces.",
      "path": "src/uint256.h",
      "position": null,
      "original_position": 30,
      "commit_id": "e6b3438aae1bb7311f655d3eeb2331989002cd2f",
      "original_commit_id": "dc5bf669e9120441d61ad3fa50be2cdca21a3691",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "What is the point of this? Seems odd to add space before compilation and then remove it during compilation.\r\n\r\nSeems easier to not add the space in the first place and fail compilation when there is one?",
      "created_at": "2024-07-17T05:11:58Z",
      "updated_at": "2024-07-17T05:23:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1680415361",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1680415361"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 133,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1680415419",
      "pull_request_review_id": 2181892158,
      "id": 1680415419,
      "node_id": "PRRC_kwDOABII585kKRq7",
      "diff_hunk": "@@ -111,6 +112,47 @@ class uint256 : public base_blob<256> {\n     static const uint256 ONE;\n };\n \n+/* uint256 from const char *.\n+ * Could theoretically have been a constructor but is overload of uint256S() for\n+ * historical reasons.\n+ */\n+consteval uint256 uint256S(const char *str)\n+{\n+   // Non lookup table version of HexDigit().\n+    auto from_hex = [](const char c) -> int8_t {\n+        if (c >= '0' && c <= '9')\n+            return c - '0';\n+        else if (c >= 'a' && c <= 'f')\n+            return c - 'a' + 0xA;\n+        else if (c >= 'A' && c <= 'F')\n+            return c - 'A' + 0xA;\n+        else\n+            return -1;\n+    };\n+\n+    // Skip leading spaces.\n+    while (IsSpace(*str))\n+        str += 1;\n+    // Skip \"0x\" prefix.",
      "path": "src/uint256.h",
      "position": null,
      "original_position": 33,
      "commit_id": "e6b3438aae1bb7311f655d3eeb2331989002cd2f",
      "original_commit_id": "dc5bf669e9120441d61ad3fa50be2cdca21a3691",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Same",
      "created_at": "2024-07-17T05:12:05Z",
      "updated_at": "2024-07-17T05:23:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1680415419",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1680415419"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 136,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1680419847",
      "pull_request_review_id": 2181892158,
      "id": 1680419847,
      "node_id": "PRRC_kwDOABII585kKSwH",
      "diff_hunk": "@@ -111,6 +112,47 @@ class uint256 : public base_blob<256> {\n     static const uint256 ONE;\n };\n \n+/* uint256 from const char *.\n+ * Could theoretically have been a constructor but is overload of uint256S() for\n+ * historical reasons.\n+ */\n+consteval uint256 uint256S(const char *str)\n+{\n+   // Non lookup table version of HexDigit().\n+    auto from_hex = [](const char c) -> int8_t {\n+        if (c >= '0' && c <= '9')\n+            return c - '0';\n+        else if (c >= 'a' && c <= 'f')\n+            return c - 'a' + 0xA;\n+        else if (c >= 'A' && c <= 'F')\n+            return c - 'A' + 0xA;\n+        else\n+            return -1;\n+    };\n+\n+    // Skip leading spaces.\n+    while (IsSpace(*str))\n+        str += 1;\n+    // Skip \"0x\" prefix.\n+    if (str[0] == '0' && str[1] == 'x')\n+        str += 2;\n+\n+    size_t digits = 0;\n+    while (from_hex(str[digits]) != -1)\n+        ++digits;\n+    // 64 = 32 bytes * 2 chars each. 32 bytes = 256 bits.",
      "path": "src/uint256.h",
      "position": null,
      "original_position": 40,
      "commit_id": "e6b3438aae1bb7311f655d3eeb2331989002cd2f",
      "original_commit_id": "dc5bf669e9120441d61ad3fa50be2cdca21a3691",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Not sure about hardcoding this for every base_blob.\r\n\r\nSeems easier to just implement it once for `base_blob` and then have it available for all?",
      "created_at": "2024-07-17T05:19:01Z",
      "updated_at": "2024-07-17T05:23:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1680419847",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1680419847"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 143,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1680422462",
      "pull_request_review_id": 2181892158,
      "id": 1680422462,
      "node_id": "PRRC_kwDOABII585kKTY-",
      "diff_hunk": "@@ -111,6 +112,47 @@ class uint256 : public base_blob<256> {\n     static const uint256 ONE;\n };\n \n+/* uint256 from const char *.\n+ * Could theoretically have been a constructor but is overload of uint256S() for\n+ * historical reasons.\n+ */\n+consteval uint256 uint256S(const char *str)\n+{\n+   // Non lookup table version of HexDigit().\n+    auto from_hex = [](const char c) -> int8_t {\n+        if (c >= '0' && c <= '9')\n+            return c - '0';\n+        else if (c >= 'a' && c <= 'f')\n+            return c - 'a' + 0xA;\n+        else if (c >= 'A' && c <= 'F')\n+            return c - 'A' + 0xA;\n+        else\n+            return -1;\n+    };\n+\n+    // Skip leading spaces.\n+    while (IsSpace(*str))\n+        str += 1;\n+    // Skip \"0x\" prefix.\n+    if (str[0] == '0' && str[1] == 'x')\n+        str += 2;\n+\n+    size_t digits = 0;\n+    while (from_hex(str[digits]) != -1)\n+        ++digits;\n+    // 64 = 32 bytes * 2 chars each. 32 bytes = 256 bits.\n+    assert(digits <= 64);",
      "path": "src/uint256.h",
      "position": null,
      "original_position": 41,
      "commit_id": "e6b3438aae1bb7311f655d3eeb2331989002cd2f",
      "original_commit_id": "dc5bf669e9120441d61ad3fa50be2cdca21a3691",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Not sure about fuzzy decoding here. Accidentally truncating an `uint256` and thus parsing it as something else seems dangerous.\r\n\r\nThe convenience of being able to truncate leading zeros of a hex-encoded base_blob are never used, are they? The two constants ZERO and ONE are constructed without hex-decoding, so this isn't needed there, and I fail to see another use case right now.\r\n\r\nIt seems easier to just assert WIDTH.",
      "created_at": "2024-07-17T05:23:02Z",
      "updated_at": "2024-07-17T05:23:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1680422462",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1680422462"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 144,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1680425993",
      "pull_request_review_id": 2181909441,
      "id": 1680425993,
      "node_id": "PRRC_kwDOABII585kKUQJ",
      "diff_hunk": "@@ -67,6 +68,87 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/**\n+ * Max size fixed at compile time.\n+ * Created to be used on the border between runtime and compile time which a\n+ * dynamically allocating std::vector cannot cross.\n+ * The type was created in preference over std::array to be able to parse hex\n+ * strings at compile time which may contain whitespace, making exact size()\n+ * unknown ahead of template instantiation.\n+ */\n+template<typename T, size_t N>\n+class FixedVec\n+{\n+    std::array<T, N> m_data{};\n+    size_t m_size{0};\n+\n+public:\n+    constexpr const T* data() const { return m_data.data(); }\n+    constexpr size_t size() const { return m_size; }\n+    constexpr const T* begin() const { return data(); }\n+    constexpr const T* end() const { return data() + m_size; }\n+    constexpr void push_back(const T& v)\n+    {\n+        assert(m_size < N);\n+        m_data[m_size] = v;\n+        ++m_size;\n+    }\n+\n+    /// Enables creation of a runtime allocated vector when necessary.\n+    // NOT just a plain `operator std::vector<T>()` since we want to expose\n+    // allocations.\n+    constexpr std::vector<T> to_dynamic() const\n+    {\n+        return {begin(), end()};\n+    }\n+};\n+\n+template <typename T, size_t N>\n+constexpr bool operator==(const std::vector<T>& a, const FixedVec<T, N>& b)\n+{\n+    return std::ranges::equal(a, b);\n+}\n+\n+constexpr inline bool IsSpace(char c) noexcept;\n+template <typename Byte = uint8_t, size_t Size>\n+consteval FixedVec<Byte, Size / 2> ParseHex(const char (&hex_str)[Size])",
      "path": "src/util/strencodings.h",
      "position": null,
      "original_position": 56,
      "commit_id": "e6b3438aae1bb7311f655d3eeb2331989002cd2f",
      "original_commit_id": "92b0fb059f81959abbfe995b32ea103c2aa8db46",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Same here. Overloading `ParseHex` seems fragile, because a compile time string_view will be evaluate at runtime, while a string literal will be evaluated at compile time.",
      "created_at": "2024-07-17T05:27:52Z",
      "updated_at": "2024-07-17T05:27:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1680425993",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1680425993"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 115,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1680427277",
      "pull_request_review_id": 2181911444,
      "id": 1680427277,
      "node_id": "PRRC_kwDOABII585kKUkN",
      "diff_hunk": "@@ -111,6 +112,47 @@ class uint256 : public base_blob<256> {\n     static const uint256 ONE;\n };\n \n+/* uint256 from const char *.\n+ * Could theoretically have been a constructor but is overload of uint256S() for\n+ * historical reasons.\n+ */\n+consteval uint256 uint256S(const char *str)\n+{\n+   // Non lookup table version of HexDigit().\n+    auto from_hex = [](const char c) -> int8_t {\n+        if (c >= '0' && c <= '9')",
      "path": "src/uint256.h",
      "position": null,
      "original_position": 20,
      "commit_id": "e6b3438aae1bb7311f655d3eeb2331989002cd2f",
      "original_commit_id": "dc5bf669e9120441d61ad3fa50be2cdca21a3691",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Please add `{`, `}` for multiline-if, according to the dev notes.",
      "created_at": "2024-07-17T05:29:39Z",
      "updated_at": "2024-07-17T05:29:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1680427277",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1680427277"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 123,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1680955841",
      "pull_request_review_id": 2182763400,
      "id": 1680955841,
      "node_id": "PRRC_kwDOABII585kMVnB",
      "diff_hunk": "@@ -111,6 +112,47 @@ class uint256 : public base_blob<256> {\n     static const uint256 ONE;\n };\n \n+/* uint256 from const char *.\n+ * Could theoretically have been a constructor but is overload of uint256S() for\n+ * historical reasons.\n+ */\n+consteval uint256 uint256S(const char *str)",
      "path": "src/uint256.h",
      "position": null,
      "original_position": 16,
      "commit_id": "e6b3438aae1bb7311f655d3eeb2331989002cd2f",
      "original_commit_id": "dc5bf669e9120441d61ad3fa50be2cdca21a3691",
      "in_reply_to_id": 1680414541,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks for taking a closer look!\r\n\r\nI want to enforce `consteval` for existing string literals. Ideally the `string_view` overload should be `constexpr` but from my research on MSVC assembly output in the PR summary it seems to handle lookup tables poorly. One possibility would be to remove the lookup table and use `if (c >= '0' && c <= '9')`, sacrificing some performance, but we don't often parse ASCII hex strings in runtime anyway, right?\r\n\r\nThe main purpose of overloading `uint256S()` with a `consteval` version was to avoid changing all the call-sites. If we are okay with changing call-sites, it might be better to introduce a `uint256(uint64_t,uint64_t,uint64_t,uint64_t)` constructor. That way it would be the compiler parsing hexadecimal integer literals directly. See my raw array (54e0213c9c7a7a942dd320264c1f9224c494b777) and span (bfc2fb049f2a12e9936b938fb073738babac0cbb) explorations.",
      "created_at": "2024-07-17T12:21:12Z",
      "updated_at": "2024-07-17T12:21:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1680955841",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1680955841"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": 115,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 119,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1680963050",
      "pull_request_review_id": 2182775665,
      "id": 1680963050,
      "node_id": "PRRC_kwDOABII585kMXXq",
      "diff_hunk": "@@ -111,6 +112,47 @@ class uint256 : public base_blob<256> {\n     static const uint256 ONE;\n };\n \n+/* uint256 from const char *.\n+ * Could theoretically have been a constructor but is overload of uint256S() for\n+ * historical reasons.\n+ */\n+consteval uint256 uint256S(const char *str)\n+{\n+   // Non lookup table version of HexDigit().\n+    auto from_hex = [](const char c) -> int8_t {\n+        if (c >= '0' && c <= '9')\n+            return c - '0';\n+        else if (c >= 'a' && c <= 'f')\n+            return c - 'a' + 0xA;\n+        else if (c >= 'A' && c <= 'F')\n+            return c - 'A' + 0xA;\n+        else\n+            return -1;\n+    };\n+\n+    // Skip leading spaces.",
      "path": "src/uint256.h",
      "position": null,
      "original_position": 30,
      "commit_id": "e6b3438aae1bb7311f655d3eeb2331989002cd2f",
      "original_commit_id": "dc5bf669e9120441d61ad3fa50be2cdca21a3691",
      "in_reply_to_id": 1680415361,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "My first stab at this was much more strict but when I added tests I went for full compatibility with the runtime overload. I'm certainly open to making it less permissive though.",
      "created_at": "2024-07-17T12:27:00Z",
      "updated_at": "2024-07-17T12:27:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1680963050",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1680963050"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 133,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1680963523",
      "pull_request_review_id": 2182776481,
      "id": 1680963523,
      "node_id": "PRRC_kwDOABII585kMXfD",
      "diff_hunk": "@@ -111,6 +112,47 @@ class uint256 : public base_blob<256> {\n     static const uint256 ONE;\n };\n \n+/* uint256 from const char *.\n+ * Could theoretically have been a constructor but is overload of uint256S() for\n+ * historical reasons.\n+ */\n+consteval uint256 uint256S(const char *str)\n+{\n+   // Non lookup table version of HexDigit().\n+    auto from_hex = [](const char c) -> int8_t {\n+        if (c >= '0' && c <= '9')\n+            return c - '0';\n+        else if (c >= 'a' && c <= 'f')\n+            return c - 'a' + 0xA;\n+        else if (c >= 'A' && c <= 'F')\n+            return c - 'A' + 0xA;\n+        else\n+            return -1;\n+    };\n+\n+    // Skip leading spaces.\n+    while (IsSpace(*str))\n+        str += 1;\n+    // Skip \"0x\" prefix.",
      "path": "src/uint256.h",
      "position": null,
      "original_position": 33,
      "commit_id": "e6b3438aae1bb7311f655d3eeb2331989002cd2f",
      "original_commit_id": "dc5bf669e9120441d61ad3fa50be2cdca21a3691",
      "in_reply_to_id": 1680415419,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Same (https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1680963050)",
      "created_at": "2024-07-17T12:27:24Z",
      "updated_at": "2024-07-17T12:27:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1680963523",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1680963523"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 136,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1680966315",
      "pull_request_review_id": 2182781123,
      "id": 1680966315,
      "node_id": "PRRC_kwDOABII585kMYKr",
      "diff_hunk": "@@ -111,6 +112,47 @@ class uint256 : public base_blob<256> {\n     static const uint256 ONE;\n };\n \n+/* uint256 from const char *.\n+ * Could theoretically have been a constructor but is overload of uint256S() for\n+ * historical reasons.\n+ */\n+consteval uint256 uint256S(const char *str)",
      "path": "src/uint256.h",
      "position": null,
      "original_position": 16,
      "commit_id": "e6b3438aae1bb7311f655d3eeb2331989002cd2f",
      "original_commit_id": "dc5bf669e9120441d61ad3fa50be2cdca21a3691",
      "in_reply_to_id": 1680414541,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> `uint256(uint64_t,uint64_t,uint64_t,uint64_t)` constructor. That way it would be the compiler parsing hexadecimal integer literals directly.\r\n\r\nNot sure. That'd make it impossible to grep for a (let's say) block hash. Also, it would be harder to copy-paste one, if the developer has to manually split it into 4 parts and add `0x` prefixes. Finally, truncation checks can't be done, see https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1680422462\r\n\r\n> was to avoid changing all the call-sites. \r\n\r\nHow many are there? Should be trivial to write a scripted-diff to replace `uint256S(\"` with something else, no?\r\n\r\nEdit: There are around 50 instances. Most of them in a single file:\r\n\r\n```\r\n$ git grep 'uint256S(\"' | grep -v 'src/test/' | wc -l \r\n54\r\n$ git grep 'uint256S(\"' src/kernel/chainparams.cpp  | wc -l \r\n48\r\n",
      "created_at": "2024-07-17T12:29:29Z",
      "updated_at": "2024-07-17T12:35:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1680966315",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1680966315"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": 115,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 119,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1680967973",
      "pull_request_review_id": 2182783841,
      "id": 1680967973,
      "node_id": "PRRC_kwDOABII585kMYkl",
      "diff_hunk": "@@ -111,6 +112,47 @@ class uint256 : public base_blob<256> {\n     static const uint256 ONE;\n };\n \n+/* uint256 from const char *.\n+ * Could theoretically have been a constructor but is overload of uint256S() for\n+ * historical reasons.\n+ */\n+consteval uint256 uint256S(const char *str)",
      "path": "src/uint256.h",
      "position": null,
      "original_position": 16,
      "commit_id": "e6b3438aae1bb7311f655d3eeb2331989002cd2f",
      "original_commit_id": "dc5bf669e9120441d61ad3fa50be2cdca21a3691",
      "in_reply_to_id": 1680414541,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> I want to enforce `consteval` for existing string literals. Ideally the `string_view` overload should be `constexpr` but from my research on MSVC assembly output\r\n\r\nI think `string_view` can be used in a consteval context, no?",
      "created_at": "2024-07-17T12:30:47Z",
      "updated_at": "2024-07-17T12:30:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1680967973",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1680967973"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": 115,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 119,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1680976118",
      "pull_request_review_id": 2182797237,
      "id": 1680976118,
      "node_id": "PRRC_kwDOABII585kMaj2",
      "diff_hunk": "@@ -111,6 +112,47 @@ class uint256 : public base_blob<256> {\n     static const uint256 ONE;\n };\n \n+/* uint256 from const char *.\n+ * Could theoretically have been a constructor but is overload of uint256S() for\n+ * historical reasons.\n+ */\n+consteval uint256 uint256S(const char *str)\n+{\n+   // Non lookup table version of HexDigit().\n+    auto from_hex = [](const char c) -> int8_t {\n+        if (c >= '0' && c <= '9')\n+            return c - '0';\n+        else if (c >= 'a' && c <= 'f')\n+            return c - 'a' + 0xA;\n+        else if (c >= 'A' && c <= 'F')\n+            return c - 'A' + 0xA;\n+        else\n+            return -1;\n+    };\n+\n+    // Skip leading spaces.\n+    while (IsSpace(*str))\n+        str += 1;\n+    // Skip \"0x\" prefix.\n+    if (str[0] == '0' && str[1] == 'x')\n+        str += 2;\n+\n+    size_t digits = 0;\n+    while (from_hex(str[digits]) != -1)\n+        ++digits;\n+    // 64 = 32 bytes * 2 chars each. 32 bytes = 256 bits.",
      "path": "src/uint256.h",
      "position": null,
      "original_position": 40,
      "commit_id": "e6b3438aae1bb7311f655d3eeb2331989002cd2f",
      "original_commit_id": "dc5bf669e9120441d61ad3fa50be2cdca21a3691",
      "in_reply_to_id": 1680419847,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "There is no `uint160S()` outside of **uint256_tests.cpp** and only `uint256` and `uint160` use `base_blob` so it felt alright having it here. If we abandon the `uint256S()`-overload approach I agree to change this.",
      "created_at": "2024-07-17T12:36:46Z",
      "updated_at": "2024-07-17T12:36:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1680976118",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1680976118"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 143,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1680983277",
      "pull_request_review_id": 2182810948,
      "id": 1680983277,
      "node_id": "PRRC_kwDOABII585kMcTt",
      "diff_hunk": "@@ -111,6 +112,47 @@ class uint256 : public base_blob<256> {\n     static const uint256 ONE;\n };\n \n+/* uint256 from const char *.\n+ * Could theoretically have been a constructor but is overload of uint256S() for\n+ * historical reasons.\n+ */\n+consteval uint256 uint256S(const char *str)\n+{\n+   // Non lookup table version of HexDigit().\n+    auto from_hex = [](const char c) -> int8_t {\n+        if (c >= '0' && c <= '9')\n+            return c - '0';\n+        else if (c >= 'a' && c <= 'f')\n+            return c - 'a' + 0xA;\n+        else if (c >= 'A' && c <= 'F')\n+            return c - 'A' + 0xA;\n+        else\n+            return -1;\n+    };\n+\n+    // Skip leading spaces.\n+    while (IsSpace(*str))\n+        str += 1;\n+    // Skip \"0x\" prefix.\n+    if (str[0] == '0' && str[1] == 'x')\n+        str += 2;\n+\n+    size_t digits = 0;\n+    while (from_hex(str[digits]) != -1)\n+        ++digits;\n+    // 64 = 32 bytes * 2 chars each. 32 bytes = 256 bits.\n+    assert(digits <= 64);",
      "path": "src/uint256.h",
      "position": null,
      "original_position": 41,
      "commit_id": "e6b3438aae1bb7311f655d3eeb2331989002cd2f",
      "original_commit_id": "dc5bf669e9120441d61ad3fa50be2cdca21a3691",
      "in_reply_to_id": 1680422462,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Generally agree https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1680963050\r\n\r\n(Some call-sites do use \"0x\"-prefix now that I think of it, while others do not, but aligning that would probably be an easy diff to accept).",
      "created_at": "2024-07-17T12:41:46Z",
      "updated_at": "2024-07-17T12:41:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1680983277",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1680983277"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 144,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1680986937",
      "pull_request_review_id": 2182817008,
      "id": 1680986937,
      "node_id": "PRRC_kwDOABII585kMdM5",
      "diff_hunk": "@@ -111,6 +112,47 @@ class uint256 : public base_blob<256> {\n     static const uint256 ONE;\n };\n \n+/* uint256 from const char *.\n+ * Could theoretically have been a constructor but is overload of uint256S() for\n+ * historical reasons.\n+ */\n+consteval uint256 uint256S(const char *str)",
      "path": "src/uint256.h",
      "position": null,
      "original_position": 16,
      "commit_id": "e6b3438aae1bb7311f655d3eeb2331989002cd2f",
      "original_commit_id": "dc5bf669e9120441d61ad3fa50be2cdca21a3691",
      "in_reply_to_id": 1680414541,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> > I want to enforce `consteval` for existing string literals. Ideally the `string_view` overload should be `constexpr` but from my research on MSVC assembly output\r\n> \r\n> I think `string_view` can be used in a consteval context, no?\r\n\r\nYes, it's the rest of that paragraph that poses some concern.",
      "created_at": "2024-07-17T12:44:34Z",
      "updated_at": "2024-07-17T12:44:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1680986937",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1680986937"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": 115,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 119,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1680995968",
      "pull_request_review_id": 2182831735,
      "id": 1680995968,
      "node_id": "PRRC_kwDOABII585kMfaA",
      "diff_hunk": "@@ -111,6 +112,47 @@ class uint256 : public base_blob<256> {\n     static const uint256 ONE;\n };\n \n+/* uint256 from const char *.\n+ * Could theoretically have been a constructor but is overload of uint256S() for\n+ * historical reasons.\n+ */\n+consteval uint256 uint256S(const char *str)",
      "path": "src/uint256.h",
      "position": null,
      "original_position": 16,
      "commit_id": "e6b3438aae1bb7311f655d3eeb2331989002cd2f",
      "original_commit_id": "dc5bf669e9120441d61ad3fa50be2cdca21a3691",
      "in_reply_to_id": 1680414541,
      "user": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> Ideally the string_view overload should be constexpr but from my research on MSVC assembly output\r\n\r\nPlease don't be overly concerned about MSVC. We've had issues with it in the past, where it's failed to optimize code properly, or we've had to write workarounds for it, when code was otherwise fine in Clang or GCC, i.e (https://github.com/bitcoin/bitcoin/pull/28657#discussion_r1360780446). We don't use it as a release compiler (and never will), so if it's failing to do X, that isn't necessarily a blocker to making changes (if X is working correctly in Clang & GCC). MSVC can always be improved later, and shouldn't prevent us from writing better code now.",
      "created_at": "2024-07-17T12:51:13Z",
      "updated_at": "2024-07-17T12:51:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1680995968",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1680995968"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": 115,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 119,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1682767232",
      "pull_request_review_id": 2185699313,
      "id": 1682767232,
      "node_id": "PRRC_kwDOABII585kTP2A",
      "diff_hunk": "@@ -111,6 +112,47 @@ class uint256 : public base_blob<256> {\n     static const uint256 ONE;\n };\n \n+/* uint256 from const char *.\n+ * Could theoretically have been a constructor but is overload of uint256S() for\n+ * historical reasons.\n+ */\n+consteval uint256 uint256S(const char *str)\n+{\n+   // Non lookup table version of HexDigit().\n+    auto from_hex = [](const char c) -> int8_t {\n+        if (c >= '0' && c <= '9')",
      "path": "src/uint256.h",
      "position": null,
      "original_position": 20,
      "commit_id": "e6b3438aae1bb7311f655d3eeb2331989002cd2f",
      "original_commit_id": "dc5bf669e9120441d61ad3fa50be2cdca21a3691",
      "in_reply_to_id": 1680427277,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed as of 10baae11ecc376f2250d4a51d2bbfeea56c0a31d.",
      "created_at": "2024-07-18T12:40:01Z",
      "updated_at": "2024-07-18T12:40:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1682767232",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1682767232"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 123,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1682772285",
      "pull_request_review_id": 2185708052,
      "id": 1682772285,
      "node_id": "PRRC_kwDOABII585kTRE9",
      "diff_hunk": "@@ -111,6 +112,47 @@ class uint256 : public base_blob<256> {\n     static const uint256 ONE;\n };\n \n+/* uint256 from const char *.\n+ * Could theoretically have been a constructor but is overload of uint256S() for\n+ * historical reasons.\n+ */\n+consteval uint256 uint256S(const char *str)",
      "path": "src/uint256.h",
      "position": null,
      "original_position": 16,
      "commit_id": "e6b3438aae1bb7311f655d3eeb2331989002cd2f",
      "original_commit_id": "dc5bf669e9120441d61ad3fa50be2cdca21a3691",
      "in_reply_to_id": 1680414541,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "As of 10baae11ecc376f2250d4a51d2bbfeea56c0a31d I have stopped overloading `uint256S()`:\r\n\r\nChanged from `consteval uint256 uint256S(const char *str)` -> `consteval explicit uint256(const char (&str)[65])` and `base_blob(std::string_view str)`\r\nThis means the string width is enforced at compile time. (The new parsing code is much more strict and also asserts on the length).\r\n\r\nApplied uint256S -> uint256 conversion where applicable, removing \"0x\"-prefixes.\r\nTODO: if there is agreement on the current approach - create scripted diff commit.\r\n\r\nAdded `TxidFromStringS()` to mirror `uint256S()` for runtime use.\r\n\r\nClarified reason for introduction of `FixedVec` in commit message 10baae11ecc376f2250d4a51d2bbfeea56c0a31d.",
      "created_at": "2024-07-18T12:43:11Z",
      "updated_at": "2024-07-18T12:43:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1682772285",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1682772285"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": 115,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 119,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1682773691",
      "pull_request_review_id": 2185710123,
      "id": 1682773691,
      "node_id": "PRRC_kwDOABII585kTRa7",
      "diff_hunk": "@@ -111,6 +112,47 @@ class uint256 : public base_blob<256> {\n     static const uint256 ONE;\n };\n \n+/* uint256 from const char *.\n+ * Could theoretically have been a constructor but is overload of uint256S() for\n+ * historical reasons.\n+ */\n+consteval uint256 uint256S(const char *str)\n+{\n+   // Non lookup table version of HexDigit().\n+    auto from_hex = [](const char c) -> int8_t {\n+        if (c >= '0' && c <= '9')\n+            return c - '0';\n+        else if (c >= 'a' && c <= 'f')\n+            return c - 'a' + 0xA;\n+        else if (c >= 'A' && c <= 'F')\n+            return c - 'A' + 0xA;\n+        else\n+            return -1;\n+    };\n+\n+    // Skip leading spaces.",
      "path": "src/uint256.h",
      "position": null,
      "original_position": 30,
      "commit_id": "e6b3438aae1bb7311f655d3eeb2331989002cd2f",
      "original_commit_id": "dc5bf669e9120441d61ad3fa50be2cdca21a3691",
      "in_reply_to_id": 1680415361,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "More strict as of 10baae11ecc376f2250d4a51d2bbfeea56c0a31d.",
      "created_at": "2024-07-18T12:44:10Z",
      "updated_at": "2024-07-18T12:44:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1682773691",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1682773691"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 133,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1682775910",
      "pull_request_review_id": 2185714766,
      "id": 1682775910,
      "node_id": "PRRC_kwDOABII585kTR9m",
      "diff_hunk": "@@ -111,6 +112,47 @@ class uint256 : public base_blob<256> {\n     static const uint256 ONE;\n };\n \n+/* uint256 from const char *.\n+ * Could theoretically have been a constructor but is overload of uint256S() for\n+ * historical reasons.\n+ */\n+consteval uint256 uint256S(const char *str)\n+{\n+   // Non lookup table version of HexDigit().\n+    auto from_hex = [](const char c) -> int8_t {\n+        if (c >= '0' && c <= '9')\n+            return c - '0';\n+        else if (c >= 'a' && c <= 'f')\n+            return c - 'a' + 0xA;\n+        else if (c >= 'A' && c <= 'F')\n+            return c - 'A' + 0xA;\n+        else\n+            return -1;\n+    };\n+\n+    // Skip leading spaces.\n+    while (IsSpace(*str))\n+        str += 1;\n+    // Skip \"0x\" prefix.\n+    if (str[0] == '0' && str[1] == 'x')\n+        str += 2;\n+\n+    size_t digits = 0;\n+    while (from_hex(str[digits]) != -1)\n+        ++digits;\n+    // 64 = 32 bytes * 2 chars each. 32 bytes = 256 bits.",
      "path": "src/uint256.h",
      "position": null,
      "original_position": 40,
      "commit_id": "e6b3438aae1bb7311f655d3eeb2331989002cd2f",
      "original_commit_id": "dc5bf669e9120441d61ad3fa50be2cdca21a3691",
      "in_reply_to_id": 1680419847,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`consteval` parsing now done inside `base_blob(std::string_view)` as of 10baae11ecc376f2250d4a51d2bbfeea56c0a31d.",
      "created_at": "2024-07-18T12:45:52Z",
      "updated_at": "2024-07-18T12:45:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1682775910",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1682775910"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 143,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1682777414",
      "pull_request_review_id": 2185718006,
      "id": 1682777414,
      "node_id": "PRRC_kwDOABII585kTSVG",
      "diff_hunk": "@@ -111,6 +112,47 @@ class uint256 : public base_blob<256> {\n     static const uint256 ONE;\n };\n \n+/* uint256 from const char *.\n+ * Could theoretically have been a constructor but is overload of uint256S() for\n+ * historical reasons.\n+ */\n+consteval uint256 uint256S(const char *str)\n+{\n+   // Non lookup table version of HexDigit().\n+    auto from_hex = [](const char c) -> int8_t {\n+        if (c >= '0' && c <= '9')\n+            return c - '0';\n+        else if (c >= 'a' && c <= 'f')\n+            return c - 'a' + 0xA;\n+        else if (c >= 'A' && c <= 'F')\n+            return c - 'A' + 0xA;\n+        else\n+            return -1;\n+    };\n+\n+    // Skip leading spaces.\n+    while (IsSpace(*str))\n+        str += 1;\n+    // Skip \"0x\" prefix.\n+    if (str[0] == '0' && str[1] == 'x')\n+        str += 2;\n+\n+    size_t digits = 0;\n+    while (from_hex(str[digits]) != -1)\n+        ++digits;\n+    // 64 = 32 bytes * 2 chars each. 32 bytes = 256 bits.\n+    assert(digits <= 64);",
      "path": "src/uint256.h",
      "position": null,
      "original_position": 41,
      "commit_id": "e6b3438aae1bb7311f655d3eeb2331989002cd2f",
      "original_commit_id": "dc5bf669e9120441d61ad3fa50be2cdca21a3691",
      "in_reply_to_id": 1680422462,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed as of 10baae11ecc376f2250d4a51d2bbfeea56c0a31d.",
      "created_at": "2024-07-18T12:46:59Z",
      "updated_at": "2024-07-18T12:46:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1682777414",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1682777414"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 144,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1682782077",
      "pull_request_review_id": 2185726157,
      "id": 1682782077,
      "node_id": "PRRC_kwDOABII585kTTd9",
      "diff_hunk": "@@ -67,6 +68,87 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/**\n+ * Max size fixed at compile time.\n+ * Created to be used on the border between runtime and compile time which a\n+ * dynamically allocating std::vector cannot cross.\n+ * The type was created in preference over std::array to be able to parse hex\n+ * strings at compile time which may contain whitespace, making exact size()\n+ * unknown ahead of template instantiation.\n+ */\n+template<typename T, size_t N>\n+class FixedVec\n+{\n+    std::array<T, N> m_data{};\n+    size_t m_size{0};\n+\n+public:\n+    constexpr const T* data() const { return m_data.data(); }\n+    constexpr size_t size() const { return m_size; }\n+    constexpr const T* begin() const { return data(); }\n+    constexpr const T* end() const { return data() + m_size; }\n+    constexpr void push_back(const T& v)\n+    {\n+        assert(m_size < N);\n+        m_data[m_size] = v;\n+        ++m_size;\n+    }\n+\n+    /// Enables creation of a runtime allocated vector when necessary.\n+    // NOT just a plain `operator std::vector<T>()` since we want to expose\n+    // allocations.\n+    constexpr std::vector<T> to_dynamic() const\n+    {\n+        return {begin(), end()};\n+    }\n+};\n+\n+template <typename T, size_t N>\n+constexpr bool operator==(const std::vector<T>& a, const FixedVec<T, N>& b)\n+{\n+    return std::ranges::equal(a, b);\n+}\n+\n+constexpr inline bool IsSpace(char c) noexcept;\n+template <typename Byte = uint8_t, size_t Size>\n+consteval FixedVec<Byte, Size / 2> ParseHex(const char (&hex_str)[Size])",
      "path": "src/util/strencodings.h",
      "position": null,
      "original_position": 56,
      "commit_id": "e6b3438aae1bb7311f655d3eeb2331989002cd2f",
      "original_commit_id": "92b0fb059f81959abbfe995b32ea103c2aa8db46",
      "in_reply_to_id": 1680425993,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Still kept it as an overload as of 10baae11ecc376f2250d4a51d2bbfeea56c0a31d. If you prefer different names for runtime/compile time, which do you suggest?",
      "created_at": "2024-07-18T12:50:25Z",
      "updated_at": "2024-07-18T12:50:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1682782077",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1682782077"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 115,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1682825302",
      "pull_request_review_id": 2185798321,
      "id": 1682825302,
      "node_id": "PRRC_kwDOABII585kTeBW",
      "diff_hunk": "@@ -66,9 +66,14 @@ using Txid = transaction_identifier<false>;\n /** Wtxid commits to all transaction fields including the witness. */\n using Wtxid = transaction_identifier<true>;\n \n-inline Txid TxidFromString(std::string_view str)\n+inline Txid TxidFromStringS(std::string_view str)\n {\n-    return Txid::FromUint256(uint256S(str.data()));\n+    return Txid::FromUint256(uint256S(str));\n+}\n+\n+consteval Txid TxidFromString(const char (&str)[65])\n+{\n+    return Txid::FromUint256(uint256(str));\n }",
      "path": "src/util/transaction_identifier.h",
      "position": null,
      "original_position": 32,
      "commit_id": "e6b3438aae1bb7311f655d3eeb2331989002cd2f",
      "original_commit_id": "10baae11ecc376f2250d4a51d2bbfeea56c0a31d",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Why add a consteval overload here? Generally I am not a fan of adding test-only code (code that is only used in tests) to the real program. Performance or exe-size shouldn't matter for tests, unless it is significant. If you still want to add it to the tests, that is fine, but then please move it to the test code. But please change the function name of the test-only function to something else. It seems odd that test-only code forces real code to be renamed.",
      "created_at": "2024-07-18T13:17:40Z",
      "updated_at": "2024-07-18T13:24:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1682825302",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1682825302"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": 69,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 77,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1682843219",
      "pull_request_review_id": 2185826728,
      "id": 1682843219,
      "node_id": "PRRC_kwDOABII585kTiZT",
      "diff_hunk": "@@ -66,9 +66,14 @@ using Txid = transaction_identifier<false>;\n /** Wtxid commits to all transaction fields including the witness. */\n using Wtxid = transaction_identifier<true>;\n \n-inline Txid TxidFromString(std::string_view str)\n+inline Txid TxidFromStringS(std::string_view str)\n {\n-    return Txid::FromUint256(uint256S(str.data()));\n+    return Txid::FromUint256(uint256S(str));\n+}\n+\n+consteval Txid TxidFromString(const char (&str)[65])\n+{\n+    return Txid::FromUint256(uint256(str));\n }",
      "path": "src/util/transaction_identifier.h",
      "position": null,
      "original_position": 32,
      "commit_id": "e6b3438aae1bb7311f655d3eeb2331989002cd2f",
      "original_commit_id": "10baae11ecc376f2250d4a51d2bbfeea56c0a31d",
      "in_reply_to_id": 1682825302,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good call, will fix.",
      "created_at": "2024-07-18T13:28:35Z",
      "updated_at": "2024-07-18T13:28:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1682843219",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1682843219"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": 69,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 77,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1682878016",
      "pull_request_review_id": 2185885552,
      "id": 1682878016,
      "node_id": "PRRC_kwDOABII585kTq5A",
      "diff_hunk": "@@ -108,25 +134,16 @@ class uint256 : public base_blob<256> {\n     constexpr uint256() = default;\n     constexpr explicit uint256(uint8_t v) : base_blob<256>(v) {}\n     constexpr explicit uint256(Span<const unsigned char> vch) : base_blob<256>(vch) {}\n+    consteval explicit uint256(const char (&str)[65]) : base_blob<256>(str) {}",
      "path": "src/uint256.h",
      "position": null,
      "original_position": 55,
      "commit_id": "e6b3438aae1bb7311f655d3eeb2331989002cd2f",
      "original_commit_id": "83a4d2f1cfc18733d778d1da72d37152efb463d1",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "A more flexible alternative would be to just accept a string_view and rely on the length assert. However, I guess this prints a more confusing compile error.\r\n\r\nSeems fine to change later to string_view, if this is needed.\r\n\r\nHowever, I wonder if you can replace `65` by `WIDTH+1`?",
      "created_at": "2024-07-18T13:48:31Z",
      "updated_at": "2024-07-18T13:48:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1682878016",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1682878016"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 137,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1682882026",
      "pull_request_review_id": 2185893269,
      "id": 1682882026,
      "node_id": "PRRC_kwDOABII585kTr3q",
      "diff_hunk": "@@ -108,25 +134,16 @@ class uint256 : public base_blob<256> {\n     constexpr uint256() = default;\n     constexpr explicit uint256(uint8_t v) : base_blob<256>(v) {}\n     constexpr explicit uint256(Span<const unsigned char> vch) : base_blob<256>(vch) {}\n+    consteval explicit uint256(const char (&str)[65]) : base_blob<256>(str) {}",
      "path": "src/uint256.h",
      "position": null,
      "original_position": 55,
      "commit_id": "e6b3438aae1bb7311f655d3eeb2331989002cd2f",
      "original_commit_id": "83a4d2f1cfc18733d778d1da72d37152efb463d1",
      "in_reply_to_id": 1682878016,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Also, I wonder if the three duplicate redirects can be replaced by a single `uinsg base_blob::base_blob;` (or similar) to import all constructors.",
      "created_at": "2024-07-18T13:50:54Z",
      "updated_at": "2024-07-18T13:50:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1682882026",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1682882026"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 137,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1682962565",
      "pull_request_review_id": 2186032755,
      "id": 1682962565,
      "node_id": "PRRC_kwDOABII585kT_iF",
      "diff_hunk": "@@ -67,6 +68,88 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/**\n+ * Max size fixed at compile time.\n+ * Created to be used on the border between runtime and compile time which a\n+ * dynamically allocating std::vector cannot cross.\n+ * The type was created in preference over std::array to be able to parse hex\n+ * strings at compile time which may contain whitespace, making exact size()\n+ * unknown ahead of template instantiation.\n+ */\n+template<typename T, size_t N>\n+class FixedVec\n+{\n+    std::array<T, N> m_data{};\n+    size_t m_size{0};\n+\n+public:\n+    constexpr const T* data() const { return m_data.data(); }\n+    constexpr size_t size() const { return m_size; }\n+    constexpr const T* begin() const { return data(); }\n+    constexpr const T* end() const { return data() + m_size; }\n+    constexpr void push_back(const T& v)\n+    {\n+        assert(m_size < N);\n+        m_data[m_size] = v;\n+        ++m_size;\n+    }\n+\n+    /// Enables creation of a runtime allocated vector when necessary.\n+    // NOT just a plain `operator std::vector<T>()` since we want to expose\n+    // allocations.\n+    constexpr std::vector<T> to_dynamic() const\n+    {\n+        return {begin(), end()};\n+    }\n+};\n+\n+template <typename T, size_t N>\n+constexpr bool operator==(const std::vector<T>& a, const FixedVec<T, N>& b)\n+{\n+    return std::ranges::equal(a, b);\n+}\n+\n+constexpr inline bool IsSpace(char c) noexcept;\n+template <typename Byte = uint8_t, size_t Size>\n+consteval FixedVec<Byte, Size / 2> ParseHex(const char (&hex_str)[Size])\n+{\n+    // Non lookup table version of HexDigit().\n+    auto from_hex = [](const uint8_t c) -> std::optional<uint8_t> {\n+        if (c >= '0' && c <= '9') {\n+            return std::make_optional<uint8_t>(c - '0');\n+        } else if (c >= 'a' && c <= 'f') {\n+            return std::make_optional<uint8_t>(c - uint8_t{'a' - 0xA});\n+        } else if (c >= 'A' && c <= 'F') {\n+            return std::make_optional<uint8_t>(c - uint8_t{'A' - 0xA});\n+        } else {\n+            return std::nullopt;\n+        }\n+    };\n+\n+    FixedVec<Byte, Size / 2> rv;\n+    size_t it = 0;\n+    while (it < (Size - 1)) { // -1 - Assumes null-term at the end.\n+        if (IsSpace(hex_str[it])) {\n+            ++it;\n+            continue;\n+        }\n+        auto c1 = from_hex(hex_str[it++]);\n+        if (it >= Size)\n+            return {};\n+        if (!c1.has_value())\n+            return {};",
      "path": "src/util/strencodings.h",
      "position": null,
      "original_position": 82,
      "commit_id": "e6b3438aae1bb7311f655d3eeb2331989002cd2f",
      "original_commit_id": "83a4d2f1cfc18733d778d1da72d37152efb463d1",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Not sure about these. It should fail compilation instead if non-hex is detected.",
      "created_at": "2024-07-18T14:33:38Z",
      "updated_at": "2024-07-18T14:33:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1682962565",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1682962565"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 141,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1684964695",
      "pull_request_review_id": 2189222906,
      "id": 1684964695,
      "node_id": "PRRC_kwDOABII585kboVX",
      "diff_hunk": "@@ -67,6 +68,88 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/**\n+ * Max size fixed at compile time.\n+ * Created to be used on the border between runtime and compile time which a\n+ * dynamically allocating std::vector cannot cross.\n+ * The type was created in preference over std::array to be able to parse hex\n+ * strings at compile time which may contain whitespace, making exact size()\n+ * unknown ahead of template instantiation.\n+ */\n+template<typename T, size_t N>\n+class FixedVec\n+{\n+    std::array<T, N> m_data{};\n+    size_t m_size{0};\n+\n+public:\n+    constexpr const T* data() const { return m_data.data(); }\n+    constexpr size_t size() const { return m_size; }\n+    constexpr const T* begin() const { return data(); }\n+    constexpr const T* end() const { return data() + m_size; }\n+    constexpr void push_back(const T& v)\n+    {\n+        assert(m_size < N);\n+        m_data[m_size] = v;\n+        ++m_size;\n+    }\n+\n+    /// Enables creation of a runtime allocated vector when necessary.\n+    // NOT just a plain `operator std::vector<T>()` since we want to expose\n+    // allocations.\n+    constexpr std::vector<T> to_dynamic() const\n+    {\n+        return {begin(), end()};\n+    }\n+};\n+\n+template <typename T, size_t N>\n+constexpr bool operator==(const std::vector<T>& a, const FixedVec<T, N>& b)\n+{\n+    return std::ranges::equal(a, b);\n+}\n+\n+constexpr inline bool IsSpace(char c) noexcept;\n+template <typename Byte = uint8_t, size_t Size>\n+consteval FixedVec<Byte, Size / 2> ParseHex(const char (&hex_str)[Size])\n+{\n+    // Non lookup table version of HexDigit().\n+    auto from_hex = [](const uint8_t c) -> std::optional<uint8_t> {\n+        if (c >= '0' && c <= '9') {\n+            return std::make_optional<uint8_t>(c - '0');\n+        } else if (c >= 'a' && c <= 'f') {\n+            return std::make_optional<uint8_t>(c - uint8_t{'a' - 0xA});\n+        } else if (c >= 'A' && c <= 'F') {\n+            return std::make_optional<uint8_t>(c - uint8_t{'A' - 0xA});\n+        } else {\n+            return std::nullopt;\n+        }\n+    };\n+\n+    FixedVec<Byte, Size / 2> rv;\n+    size_t it = 0;\n+    while (it < (Size - 1)) { // -1 - Assumes null-term at the end.\n+        if (IsSpace(hex_str[it])) {\n+            ++it;\n+            continue;\n+        }\n+        auto c1 = from_hex(hex_str[it++]);\n+        if (it >= Size)\n+            return {};\n+        if (!c1.has_value())\n+            return {};",
      "path": "src/util/strencodings.h",
      "position": null,
      "original_position": 82,
      "commit_id": "e6b3438aae1bb7311f655d3eeb2331989002cd2f",
      "original_commit_id": "83a4d2f1cfc18733d778d1da72d37152efb463d1",
      "in_reply_to_id": 1682962565,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think it's more acceptable to diverge on behavior if we call the `consteval` function something different, see https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1682782077",
      "created_at": "2024-07-19T20:55:53Z",
      "updated_at": "2024-07-19T20:55:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1684964695",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1684964695"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 141,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1685019567",
      "pull_request_review_id": 2189378300,
      "id": 1685019567,
      "node_id": "PRRC_kwDOABII585kb1uv",
      "diff_hunk": "@@ -108,25 +134,16 @@ class uint256 : public base_blob<256> {\n     constexpr uint256() = default;\n     constexpr explicit uint256(uint8_t v) : base_blob<256>(v) {}\n     constexpr explicit uint256(Span<const unsigned char> vch) : base_blob<256>(vch) {}\n+    consteval explicit uint256(const char (&str)[65]) : base_blob<256>(str) {}",
      "path": "src/uint256.h",
      "position": null,
      "original_position": 55,
      "commit_id": "e6b3438aae1bb7311f655d3eeb2331989002cd2f",
      "original_commit_id": "83a4d2f1cfc18733d778d1da72d37152efb463d1",
      "in_reply_to_id": 1682878016,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> Seems fine to change later to string_view, if this is needed.\r\n> \r\n> However, I wonder if you can replace `65` by `WIDTH+1`?\r\n\r\nDone now in 79921003ffc858ca4b47e0fb187ed83c1667bc27 along with added comment and more descriptive parameter name.\r\n\r\n> Also, I wonder if the three duplicate redirects can be replaced by a single uinsg base_blob::base_blob; (or similar) to import all constructors.\r\n\r\nI guess that would only be possible if switching the uint256-ctor to `string_view`, which I'd rather hold off on for now.",
      "created_at": "2024-07-19T21:42:41Z",
      "updated_at": "2024-07-19T21:42:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1685019567",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1685019567"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 137,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1686109312",
      "pull_request_review_id": 2190854560,
      "id": 1686109312,
      "node_id": "PRRC_kwDOABII585kf_yA",
      "diff_hunk": "@@ -67,6 +68,88 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/**\n+ * Max size fixed at compile time.\n+ * Created to be used on the border between runtime and compile time which a\n+ * dynamically allocating std::vector cannot cross.\n+ * The type was created in preference over std::array to be able to parse hex\n+ * strings at compile time which may contain whitespace, making exact size()\n+ * unknown ahead of template instantiation.\n+ */\n+template<typename T, size_t N>\n+class FixedVec\n+{\n+    std::array<T, N> m_data{};\n+    size_t m_size{0};\n+\n+public:\n+    constexpr const T* data() const { return m_data.data(); }\n+    constexpr size_t size() const { return m_size; }\n+    constexpr const T* begin() const { return data(); }\n+    constexpr const T* end() const { return data() + m_size; }\n+    constexpr void push_back(const T& v)\n+    {\n+        assert(m_size < N);\n+        m_data[m_size] = v;\n+        ++m_size;\n+    }\n+\n+    /// Enables creation of a runtime allocated vector when necessary.\n+    // NOT just a plain `operator std::vector<T>()` since we want to expose\n+    // allocations.\n+    constexpr std::vector<T> to_dynamic() const\n+    {\n+        return {begin(), end()};\n+    }\n+};\n+\n+template <typename T, size_t N>\n+constexpr bool operator==(const std::vector<T>& a, const FixedVec<T, N>& b)\n+{\n+    return std::ranges::equal(a, b);\n+}\n+\n+constexpr inline bool IsSpace(char c) noexcept;\n+template <typename Byte = uint8_t, size_t Size>\n+consteval FixedVec<Byte, Size / 2> ParseHex(const char (&hex_str)[Size])\n+{\n+    // Non lookup table version of HexDigit().\n+    auto from_hex = [](const uint8_t c) -> std::optional<uint8_t> {\n+        if (c >= '0' && c <= '9') {\n+            return std::make_optional<uint8_t>(c - '0');\n+        } else if (c >= 'a' && c <= 'f') {\n+            return std::make_optional<uint8_t>(c - uint8_t{'a' - 0xA});\n+        } else if (c >= 'A' && c <= 'F') {\n+            return std::make_optional<uint8_t>(c - uint8_t{'A' - 0xA});\n+        } else {\n+            return std::nullopt;\n+        }\n+    };\n+\n+    FixedVec<Byte, Size / 2> rv;\n+    size_t it = 0;\n+    while (it < (Size - 1)) { // -1 - Assumes null-term at the end.\n+        if (IsSpace(hex_str[it])) {\n+            ++it;\n+            continue;\n+        }\n+        auto c1 = from_hex(hex_str[it++]);\n+        if (it >= Size)\n+            return {};\n+        if (!c1.has_value())\n+            return {};",
      "path": "src/util/strencodings.h",
      "position": null,
      "original_position": 82,
      "commit_id": "e6b3438aae1bb7311f655d3eeb2331989002cd2f",
      "original_commit_id": "83a4d2f1cfc18733d778d1da72d37152efb463d1",
      "in_reply_to_id": 1682962565,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Maybe `BytesFromHex`?",
      "created_at": "2024-07-22T07:43:48Z",
      "updated_at": "2024-07-22T07:43:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1686109312",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1686109312"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 141,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1686115679",
      "pull_request_review_id": 2190864424,
      "id": 1686115679,
      "node_id": "PRRC_kwDOABII585kgBVf",
      "diff_hunk": "@@ -88,6 +89,31 @@ class base_blob\n     }\n };\n \n+// No support for \"0x\"-prefix or whitespace, mirroring GetHex().\n+template<unsigned int BITS>\n+consteval base_blob<BITS>::base_blob(std::string_view str)\n+{\n+    // Non-lookup table version of HexDigit().\n+    auto from_hex = [](const char c) -> int8_t {\n+        if (c >= '0' && c <= '9') {\n+            return c - '0';\n+        } else if (c >= 'a' && c <= 'f') {\n+            return c - 'a' + 0xA;\n+        } else if (c >= 'A' && c <= 'F') {\n+            return c - 'A' + 0xA;\n+        }\n+        assert(false);\n+    };\n+\n+    // 2 chars per byte.\n+    assert(str.length() == m_data.size() * 2);\n+    auto writeIt = m_data.begin();",
      "path": "src/uint256.h",
      "position": null,
      "original_position": 41,
      "commit_id": "e6b3438aae1bb7311f655d3eeb2331989002cd2f",
      "original_commit_id": "146a2db9e17466b3ff06a66103d5480bda2e6dba",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: snake_case for new code: `write_it`, `str_it`, according to the dev notes.",
      "created_at": "2024-07-22T07:48:58Z",
      "updated_at": "2024-07-22T07:48:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1686115679",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1686115679"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 110,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1688654352",
      "pull_request_review_id": 2194976610,
      "id": 1688654352,
      "node_id": "PRRC_kwDOABII585kptIQ",
      "diff_hunk": "@@ -67,6 +68,88 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/**\n+ * Max size fixed at compile time.\n+ * Created to be used on the border between runtime and compile time which a\n+ * dynamically allocating std::vector cannot cross.\n+ * The type was created in preference over std::array to be able to parse hex\n+ * strings at compile time which may contain whitespace, making exact size()\n+ * unknown ahead of template instantiation.\n+ */\n+template<typename T, size_t N>\n+class FixedVec\n+{\n+    std::array<T, N> m_data{};\n+    size_t m_size{0};\n+\n+public:\n+    constexpr const T* data() const { return m_data.data(); }\n+    constexpr size_t size() const { return m_size; }\n+    constexpr const T* begin() const { return data(); }\n+    constexpr const T* end() const { return data() + m_size; }\n+    constexpr void push_back(const T& v)\n+    {\n+        assert(m_size < N);\n+        m_data[m_size] = v;\n+        ++m_size;\n+    }\n+\n+    /// Enables creation of a runtime allocated vector when necessary.\n+    // NOT just a plain `operator std::vector<T>()` since we want to expose\n+    // allocations.\n+    constexpr std::vector<T> to_dynamic() const\n+    {\n+        return {begin(), end()};\n+    }\n+};\n+\n+template <typename T, size_t N>\n+constexpr bool operator==(const std::vector<T>& a, const FixedVec<T, N>& b)\n+{\n+    return std::ranges::equal(a, b);\n+}\n+\n+constexpr inline bool IsSpace(char c) noexcept;\n+template <typename Byte = uint8_t, size_t Size>\n+consteval FixedVec<Byte, Size / 2> ParseHex(const char (&hex_str)[Size])\n+{\n+    // Non lookup table version of HexDigit().\n+    auto from_hex = [](const uint8_t c) -> std::optional<uint8_t> {\n+        if (c >= '0' && c <= '9') {\n+            return std::make_optional<uint8_t>(c - '0');\n+        } else if (c >= 'a' && c <= 'f') {\n+            return std::make_optional<uint8_t>(c - uint8_t{'a' - 0xA});\n+        } else if (c >= 'A' && c <= 'F') {\n+            return std::make_optional<uint8_t>(c - uint8_t{'A' - 0xA});\n+        } else {\n+            return std::nullopt;\n+        }\n+    };\n+\n+    FixedVec<Byte, Size / 2> rv;\n+    size_t it = 0;\n+    while (it < (Size - 1)) { // -1 - Assumes null-term at the end.\n+        if (IsSpace(hex_str[it])) {\n+            ++it;\n+            continue;\n+        }\n+        auto c1 = from_hex(hex_str[it++]);\n+        if (it >= Size)\n+            return {};\n+        if (!c1.has_value())\n+            return {};",
      "path": "src/util/strencodings.h",
      "position": null,
      "original_position": 82,
      "commit_id": "e6b3438aae1bb7311f655d3eeb2331989002cd2f",
      "original_commit_id": "83a4d2f1cfc18733d778d1da72d37152efb463d1",
      "in_reply_to_id": 1682962565,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, that would be along the lines of `uint256::FromHex()` that you have in the works in #30482.\r\n\r\nOne thing that comes to mind now though is that `uint256::FromHex()` can return a failure state. Maybe it would be better to have a constructor for this `consteval` thing - rename `FixedVec` into `ByteVec` with an added `consteval` constructor.",
      "created_at": "2024-07-23T20:10:20Z",
      "updated_at": "2024-07-23T20:10:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1688654352",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1688654352"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 141,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1688788130",
      "pull_request_review_id": 2195187288,
      "id": 1688788130,
      "node_id": "PRRC_kwDOABII585kqNyi",
      "diff_hunk": "@@ -67,6 +68,88 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/**\n+ * Max size fixed at compile time.\n+ * Created to be used on the border between runtime and compile time which a\n+ * dynamically allocating std::vector cannot cross.\n+ * The type was created in preference over std::array to be able to parse hex\n+ * strings at compile time which may contain whitespace, making exact size()\n+ * unknown ahead of template instantiation.\n+ */\n+template<typename T, size_t N>\n+class FixedVec\n+{\n+    std::array<T, N> m_data{};\n+    size_t m_size{0};\n+\n+public:\n+    constexpr const T* data() const { return m_data.data(); }\n+    constexpr size_t size() const { return m_size; }\n+    constexpr const T* begin() const { return data(); }\n+    constexpr const T* end() const { return data() + m_size; }\n+    constexpr void push_back(const T& v)\n+    {\n+        assert(m_size < N);\n+        m_data[m_size] = v;\n+        ++m_size;\n+    }\n+\n+    /// Enables creation of a runtime allocated vector when necessary.\n+    // NOT just a plain `operator std::vector<T>()` since we want to expose\n+    // allocations.\n+    constexpr std::vector<T> to_dynamic() const\n+    {\n+        return {begin(), end()};\n+    }\n+};\n+\n+template <typename T, size_t N>\n+constexpr bool operator==(const std::vector<T>& a, const FixedVec<T, N>& b)\n+{\n+    return std::ranges::equal(a, b);\n+}\n+\n+constexpr inline bool IsSpace(char c) noexcept;\n+template <typename Byte = uint8_t, size_t Size>\n+consteval FixedVec<Byte, Size / 2> ParseHex(const char (&hex_str)[Size])\n+{\n+    // Non lookup table version of HexDigit().\n+    auto from_hex = [](const uint8_t c) -> std::optional<uint8_t> {\n+        if (c >= '0' && c <= '9') {\n+            return std::make_optional<uint8_t>(c - '0');\n+        } else if (c >= 'a' && c <= 'f') {\n+            return std::make_optional<uint8_t>(c - uint8_t{'a' - 0xA});\n+        } else if (c >= 'A' && c <= 'F') {\n+            return std::make_optional<uint8_t>(c - uint8_t{'A' - 0xA});\n+        } else {\n+            return std::nullopt;\n+        }\n+    };\n+\n+    FixedVec<Byte, Size / 2> rv;\n+    size_t it = 0;\n+    while (it < (Size - 1)) { // -1 - Assumes null-term at the end.\n+        if (IsSpace(hex_str[it])) {\n+            ++it;\n+            continue;\n+        }\n+        auto c1 = from_hex(hex_str[it++]);\n+        if (it >= Size)\n+            return {};\n+        if (!c1.has_value())\n+            return {};",
      "path": "src/util/strencodings.h",
      "position": null,
      "original_position": 82,
      "commit_id": "e6b3438aae1bb7311f655d3eeb2331989002cd2f",
      "original_commit_id": "83a4d2f1cfc18733d778d1da72d37152efb463d1",
      "in_reply_to_id": 1682962565,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Having problems inferring the size of the underlying `std::array` from the `char`-array size using the constructor approach. Looks like a free function is where it's at for this one. (And maybe going back to raw `std::array` for the container if we fail compilation on whitespace/invalid input).",
      "created_at": "2024-07-23T22:21:42Z",
      "updated_at": "2024-07-23T22:21:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1688788130",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1688788130"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 141,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1689162345",
      "pull_request_review_id": 2195680135,
      "id": 1689162345,
      "node_id": "PRRC_kwDOABII585krpJp",
      "diff_hunk": "@@ -67,6 +68,88 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/**\n+ * Max size fixed at compile time.\n+ * Created to be used on the border between runtime and compile time which a\n+ * dynamically allocating std::vector cannot cross.\n+ * The type was created in preference over std::array to be able to parse hex\n+ * strings at compile time which may contain whitespace, making exact size()\n+ * unknown ahead of template instantiation.\n+ */\n+template<typename T, size_t N>\n+class FixedVec\n+{\n+    std::array<T, N> m_data{};\n+    size_t m_size{0};\n+\n+public:\n+    constexpr const T* data() const { return m_data.data(); }\n+    constexpr size_t size() const { return m_size; }\n+    constexpr const T* begin() const { return data(); }\n+    constexpr const T* end() const { return data() + m_size; }\n+    constexpr void push_back(const T& v)\n+    {\n+        assert(m_size < N);\n+        m_data[m_size] = v;\n+        ++m_size;\n+    }\n+\n+    /// Enables creation of a runtime allocated vector when necessary.\n+    // NOT just a plain `operator std::vector<T>()` since we want to expose\n+    // allocations.\n+    constexpr std::vector<T> to_dynamic() const\n+    {\n+        return {begin(), end()};\n+    }\n+};\n+\n+template <typename T, size_t N>\n+constexpr bool operator==(const std::vector<T>& a, const FixedVec<T, N>& b)\n+{\n+    return std::ranges::equal(a, b);\n+}\n+\n+constexpr inline bool IsSpace(char c) noexcept;\n+template <typename Byte = uint8_t, size_t Size>\n+consteval FixedVec<Byte, Size / 2> ParseHex(const char (&hex_str)[Size])\n+{\n+    // Non lookup table version of HexDigit().\n+    auto from_hex = [](const uint8_t c) -> std::optional<uint8_t> {\n+        if (c >= '0' && c <= '9') {\n+            return std::make_optional<uint8_t>(c - '0');\n+        } else if (c >= 'a' && c <= 'f') {\n+            return std::make_optional<uint8_t>(c - uint8_t{'a' - 0xA});\n+        } else if (c >= 'A' && c <= 'F') {\n+            return std::make_optional<uint8_t>(c - uint8_t{'A' - 0xA});\n+        } else {\n+            return std::nullopt;\n+        }\n+    };\n+\n+    FixedVec<Byte, Size / 2> rv;\n+    size_t it = 0;\n+    while (it < (Size - 1)) { // -1 - Assumes null-term at the end.\n+        if (IsSpace(hex_str[it])) {\n+            ++it;\n+            continue;\n+        }\n+        auto c1 = from_hex(hex_str[it++]);\n+        if (it >= Size)\n+            return {};\n+        if (!c1.has_value())\n+            return {};",
      "path": "src/util/strencodings.h",
      "position": null,
      "original_position": 82,
      "commit_id": "e6b3438aae1bb7311f655d3eeb2331989002cd2f",
      "original_commit_id": "83a4d2f1cfc18733d778d1da72d37152efb463d1",
      "in_reply_to_id": 1682962565,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I am a bit worried that putting the bytes directly onto the stack (or easily allowing the dev to do so) may lead to high stack usage in some code paths and stack overflow on some platforms that have tighter limits.\r\n\r\nMaybe a better overall approach is to validate the hex string at compile time, but then parse into a (heap) vector at runtime?\r\n\r\nI don't think there are any performance concerns where hex parsing is used right now, so doing the parsing at runtime or compile time shouldn't matter. The important thing is compile-time checking, to catch bugs before the code compiles.",
      "created_at": "2024-07-24T05:33:56Z",
      "updated_at": "2024-07-24T05:33:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1689162345",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1689162345"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 141,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1689312472",
      "pull_request_review_id": 2195905666,
      "id": 1689312472,
      "node_id": "PRRC_kwDOABII585ksNzY",
      "diff_hunk": "@@ -67,6 +68,88 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/**\n+ * Max size fixed at compile time.\n+ * Created to be used on the border between runtime and compile time which a\n+ * dynamically allocating std::vector cannot cross.\n+ * The type was created in preference over std::array to be able to parse hex\n+ * strings at compile time which may contain whitespace, making exact size()\n+ * unknown ahead of template instantiation.\n+ */\n+template<typename T, size_t N>\n+class FixedVec\n+{\n+    std::array<T, N> m_data{};\n+    size_t m_size{0};\n+\n+public:\n+    constexpr const T* data() const { return m_data.data(); }\n+    constexpr size_t size() const { return m_size; }\n+    constexpr const T* begin() const { return data(); }\n+    constexpr const T* end() const { return data() + m_size; }\n+    constexpr void push_back(const T& v)\n+    {\n+        assert(m_size < N);\n+        m_data[m_size] = v;\n+        ++m_size;\n+    }\n+\n+    /// Enables creation of a runtime allocated vector when necessary.\n+    // NOT just a plain `operator std::vector<T>()` since we want to expose\n+    // allocations.\n+    constexpr std::vector<T> to_dynamic() const\n+    {\n+        return {begin(), end()};\n+    }\n+};\n+\n+template <typename T, size_t N>\n+constexpr bool operator==(const std::vector<T>& a, const FixedVec<T, N>& b)\n+{\n+    return std::ranges::equal(a, b);\n+}\n+\n+constexpr inline bool IsSpace(char c) noexcept;\n+template <typename Byte = uint8_t, size_t Size>\n+consteval FixedVec<Byte, Size / 2> ParseHex(const char (&hex_str)[Size])\n+{\n+    // Non lookup table version of HexDigit().\n+    auto from_hex = [](const uint8_t c) -> std::optional<uint8_t> {\n+        if (c >= '0' && c <= '9') {\n+            return std::make_optional<uint8_t>(c - '0');\n+        } else if (c >= 'a' && c <= 'f') {\n+            return std::make_optional<uint8_t>(c - uint8_t{'a' - 0xA});\n+        } else if (c >= 'A' && c <= 'F') {\n+            return std::make_optional<uint8_t>(c - uint8_t{'A' - 0xA});\n+        } else {\n+            return std::nullopt;\n+        }\n+    };\n+\n+    FixedVec<Byte, Size / 2> rv;\n+    size_t it = 0;\n+    while (it < (Size - 1)) { // -1 - Assumes null-term at the end.\n+        if (IsSpace(hex_str[it])) {\n+            ++it;\n+            continue;\n+        }\n+        auto c1 = from_hex(hex_str[it++]);\n+        if (it >= Size)\n+            return {};\n+        if (!c1.has_value())\n+            return {};",
      "path": "src/util/strencodings.h",
      "position": null,
      "original_position": 82,
      "commit_id": "e6b3438aae1bb7311f655d3eeb2331989002cd2f",
      "original_commit_id": "83a4d2f1cfc18733d778d1da72d37152efb463d1",
      "in_reply_to_id": 1682962565,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good point.. the compile-time parsed bytes would go into a data section in the binary instead of the hex string literal, which should :tm: make the binary smaller. But when the `std::array` containers are initialized during runtime they will take up stack space, instead of the former `std::vector` taking up heap-space.\r\n\r\nHeap is usually slower than the stack, but if the vector was just allocated in the local function, the data should be \"hot\" anyway.\r\n\r\nNot sure how to elegantly achieve compile time validation + runtime parsing.\r\n\r\nWill ruminate on this, cheers!",
      "created_at": "2024-07-24T07:51:56Z",
      "updated_at": "2024-07-24T07:51:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1689312472",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1689312472"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 141,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1689327270",
      "pull_request_review_id": 2195928300,
      "id": 1689327270,
      "node_id": "PRRC_kwDOABII585ksRam",
      "diff_hunk": "@@ -67,6 +68,88 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/**\n+ * Max size fixed at compile time.\n+ * Created to be used on the border between runtime and compile time which a\n+ * dynamically allocating std::vector cannot cross.\n+ * The type was created in preference over std::array to be able to parse hex\n+ * strings at compile time which may contain whitespace, making exact size()\n+ * unknown ahead of template instantiation.\n+ */\n+template<typename T, size_t N>\n+class FixedVec\n+{\n+    std::array<T, N> m_data{};\n+    size_t m_size{0};\n+\n+public:\n+    constexpr const T* data() const { return m_data.data(); }\n+    constexpr size_t size() const { return m_size; }\n+    constexpr const T* begin() const { return data(); }\n+    constexpr const T* end() const { return data() + m_size; }\n+    constexpr void push_back(const T& v)\n+    {\n+        assert(m_size < N);\n+        m_data[m_size] = v;\n+        ++m_size;\n+    }\n+\n+    /// Enables creation of a runtime allocated vector when necessary.\n+    // NOT just a plain `operator std::vector<T>()` since we want to expose\n+    // allocations.\n+    constexpr std::vector<T> to_dynamic() const\n+    {\n+        return {begin(), end()};\n+    }\n+};\n+\n+template <typename T, size_t N>\n+constexpr bool operator==(const std::vector<T>& a, const FixedVec<T, N>& b)\n+{\n+    return std::ranges::equal(a, b);\n+}\n+\n+constexpr inline bool IsSpace(char c) noexcept;\n+template <typename Byte = uint8_t, size_t Size>\n+consteval FixedVec<Byte, Size / 2> ParseHex(const char (&hex_str)[Size])\n+{\n+    // Non lookup table version of HexDigit().\n+    auto from_hex = [](const uint8_t c) -> std::optional<uint8_t> {\n+        if (c >= '0' && c <= '9') {\n+            return std::make_optional<uint8_t>(c - '0');\n+        } else if (c >= 'a' && c <= 'f') {\n+            return std::make_optional<uint8_t>(c - uint8_t{'a' - 0xA});\n+        } else if (c >= 'A' && c <= 'F') {\n+            return std::make_optional<uint8_t>(c - uint8_t{'A' - 0xA});\n+        } else {\n+            return std::nullopt;\n+        }\n+    };\n+\n+    FixedVec<Byte, Size / 2> rv;\n+    size_t it = 0;\n+    while (it < (Size - 1)) { // -1 - Assumes null-term at the end.\n+        if (IsSpace(hex_str[it])) {\n+            ++it;\n+            continue;\n+        }\n+        auto c1 = from_hex(hex_str[it++]);\n+        if (it >= Size)\n+            return {};\n+        if (!c1.has_value())\n+            return {};",
      "path": "src/util/strencodings.h",
      "position": null,
      "original_position": 82,
      "commit_id": "e6b3438aae1bb7311f655d3eeb2331989002cd2f",
      "original_commit_id": "83a4d2f1cfc18733d778d1da72d37152efb463d1",
      "in_reply_to_id": 1682962565,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> Heap is usually slower than the stack, but if the vector was just allocated in the local function, the data should be \"hot\" anyway.\r\n\r\nRight, and I think there is no performance critical path.\r\n\r\n> Not sure how to elegantly achieve compile time validation + runtime parsing.\r\n\r\n\r\nShould be easy:\r\n\r\n```cpp\r\n\r\nstruct ConstevalHexLiteral {\r\n  const char* const hex;\r\n  consteval ConstevalHexLiteral(const char* str) : hex{str} { assert(IsCHex(str)); }\r\n  consteval ConstevalHexLiteral(std::nullptr_t) = delete;\r\n};\r\n\r\nauto BytesFromHex(ConstevalHexLiteral hex) { return std::vector{*Assert(RuntimeParse(hex))}; }",
      "created_at": "2024-07-24T08:02:42Z",
      "updated_at": "2024-07-24T08:03:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1689327270",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1689327270"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 141,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1689373817",
      "pull_request_review_id": 2196001492,
      "id": 1689373817,
      "node_id": "PRRC_kwDOABII585kscx5",
      "diff_hunk": "@@ -67,6 +68,88 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/**\n+ * Max size fixed at compile time.\n+ * Created to be used on the border between runtime and compile time which a\n+ * dynamically allocating std::vector cannot cross.\n+ * The type was created in preference over std::array to be able to parse hex\n+ * strings at compile time which may contain whitespace, making exact size()\n+ * unknown ahead of template instantiation.\n+ */\n+template<typename T, size_t N>\n+class FixedVec\n+{\n+    std::array<T, N> m_data{};\n+    size_t m_size{0};\n+\n+public:\n+    constexpr const T* data() const { return m_data.data(); }\n+    constexpr size_t size() const { return m_size; }\n+    constexpr const T* begin() const { return data(); }\n+    constexpr const T* end() const { return data() + m_size; }\n+    constexpr void push_back(const T& v)\n+    {\n+        assert(m_size < N);\n+        m_data[m_size] = v;\n+        ++m_size;\n+    }\n+\n+    /// Enables creation of a runtime allocated vector when necessary.\n+    // NOT just a plain `operator std::vector<T>()` since we want to expose\n+    // allocations.\n+    constexpr std::vector<T> to_dynamic() const\n+    {\n+        return {begin(), end()};\n+    }\n+};\n+\n+template <typename T, size_t N>\n+constexpr bool operator==(const std::vector<T>& a, const FixedVec<T, N>& b)\n+{\n+    return std::ranges::equal(a, b);\n+}\n+\n+constexpr inline bool IsSpace(char c) noexcept;\n+template <typename Byte = uint8_t, size_t Size>\n+consteval FixedVec<Byte, Size / 2> ParseHex(const char (&hex_str)[Size])\n+{\n+    // Non lookup table version of HexDigit().\n+    auto from_hex = [](const uint8_t c) -> std::optional<uint8_t> {\n+        if (c >= '0' && c <= '9') {\n+            return std::make_optional<uint8_t>(c - '0');\n+        } else if (c >= 'a' && c <= 'f') {\n+            return std::make_optional<uint8_t>(c - uint8_t{'a' - 0xA});\n+        } else if (c >= 'A' && c <= 'F') {\n+            return std::make_optional<uint8_t>(c - uint8_t{'A' - 0xA});\n+        } else {\n+            return std::nullopt;\n+        }\n+    };\n+\n+    FixedVec<Byte, Size / 2> rv;\n+    size_t it = 0;\n+    while (it < (Size - 1)) { // -1 - Assumes null-term at the end.\n+        if (IsSpace(hex_str[it])) {\n+            ++it;\n+            continue;\n+        }\n+        auto c1 = from_hex(hex_str[it++]);\n+        if (it >= Size)\n+            return {};\n+        if (!c1.has_value())\n+            return {};",
      "path": "src/util/strencodings.h",
      "position": null,
      "original_position": 82,
      "commit_id": "e6b3438aae1bb7311f655d3eeb2331989002cd2f",
      "original_commit_id": "83a4d2f1cfc18733d778d1da72d37152efb463d1",
      "in_reply_to_id": 1682962565,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks! That is a piece of art. :)\r\n\r\n(Think I would put any `Assert()`s and `vector` initialization inside of `RuntimeParse()`).",
      "created_at": "2024-07-24T08:35:41Z",
      "updated_at": "2024-07-24T08:35:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1689373817",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1689373817"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 141,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1689399364",
      "pull_request_review_id": 2196042215,
      "id": 1689399364,
      "node_id": "PRRC_kwDOABII585ksjBE",
      "diff_hunk": "@@ -67,6 +68,88 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/**\n+ * Max size fixed at compile time.\n+ * Created to be used on the border between runtime and compile time which a\n+ * dynamically allocating std::vector cannot cross.\n+ * The type was created in preference over std::array to be able to parse hex\n+ * strings at compile time which may contain whitespace, making exact size()\n+ * unknown ahead of template instantiation.\n+ */\n+template<typename T, size_t N>\n+class FixedVec\n+{\n+    std::array<T, N> m_data{};\n+    size_t m_size{0};\n+\n+public:\n+    constexpr const T* data() const { return m_data.data(); }\n+    constexpr size_t size() const { return m_size; }\n+    constexpr const T* begin() const { return data(); }\n+    constexpr const T* end() const { return data() + m_size; }\n+    constexpr void push_back(const T& v)\n+    {\n+        assert(m_size < N);\n+        m_data[m_size] = v;\n+        ++m_size;\n+    }\n+\n+    /// Enables creation of a runtime allocated vector when necessary.\n+    // NOT just a plain `operator std::vector<T>()` since we want to expose\n+    // allocations.\n+    constexpr std::vector<T> to_dynamic() const\n+    {\n+        return {begin(), end()};\n+    }\n+};\n+\n+template <typename T, size_t N>\n+constexpr bool operator==(const std::vector<T>& a, const FixedVec<T, N>& b)\n+{\n+    return std::ranges::equal(a, b);\n+}\n+\n+constexpr inline bool IsSpace(char c) noexcept;\n+template <typename Byte = uint8_t, size_t Size>\n+consteval FixedVec<Byte, Size / 2> ParseHex(const char (&hex_str)[Size])\n+{\n+    // Non lookup table version of HexDigit().\n+    auto from_hex = [](const uint8_t c) -> std::optional<uint8_t> {\n+        if (c >= '0' && c <= '9') {\n+            return std::make_optional<uint8_t>(c - '0');\n+        } else if (c >= 'a' && c <= 'f') {\n+            return std::make_optional<uint8_t>(c - uint8_t{'a' - 0xA});\n+        } else if (c >= 'A' && c <= 'F') {\n+            return std::make_optional<uint8_t>(c - uint8_t{'A' - 0xA});\n+        } else {\n+            return std::nullopt;\n+        }\n+    };\n+\n+    FixedVec<Byte, Size / 2> rv;\n+    size_t it = 0;\n+    while (it < (Size - 1)) { // -1 - Assumes null-term at the end.\n+        if (IsSpace(hex_str[it])) {\n+            ++it;\n+            continue;\n+        }\n+        auto c1 = from_hex(hex_str[it++]);\n+        if (it >= Size)\n+            return {};\n+        if (!c1.has_value())\n+            return {};",
      "path": "src/util/strencodings.h",
      "position": null,
      "original_position": 82,
      "commit_id": "e6b3438aae1bb7311f655d3eeb2331989002cd2f",
      "original_commit_id": "83a4d2f1cfc18733d778d1da72d37152efb463d1",
      "in_reply_to_id": 1682962565,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yeah, `RuntimeParse` is probably just `TryParseHex`, which returns a vector already, so you can drop the vector-move-constructor from my suggestion.",
      "created_at": "2024-07-24T08:53:14Z",
      "updated_at": "2024-07-24T08:53:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1689399364",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1689399364"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 141,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1692176710",
      "pull_request_review_id": 2200522624,
      "id": 1692176710,
      "node_id": "PRRC_kwDOABII585k3JFG",
      "diff_hunk": "@@ -67,6 +68,88 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/**\n+ * Max size fixed at compile time.\n+ * Created to be used on the border between runtime and compile time which a\n+ * dynamically allocating std::vector cannot cross.\n+ * The type was created in preference over std::array to be able to parse hex\n+ * strings at compile time which may contain whitespace, making exact size()\n+ * unknown ahead of template instantiation.\n+ */\n+template<typename T, size_t N>\n+class FixedVec\n+{\n+    std::array<T, N> m_data{};\n+    size_t m_size{0};\n+\n+public:\n+    constexpr const T* data() const { return m_data.data(); }\n+    constexpr size_t size() const { return m_size; }\n+    constexpr const T* begin() const { return data(); }\n+    constexpr const T* end() const { return data() + m_size; }\n+    constexpr void push_back(const T& v)\n+    {\n+        assert(m_size < N);\n+        m_data[m_size] = v;\n+        ++m_size;\n+    }\n+\n+    /// Enables creation of a runtime allocated vector when necessary.\n+    // NOT just a plain `operator std::vector<T>()` since we want to expose\n+    // allocations.\n+    constexpr std::vector<T> to_dynamic() const\n+    {\n+        return {begin(), end()};\n+    }\n+};\n+\n+template <typename T, size_t N>\n+constexpr bool operator==(const std::vector<T>& a, const FixedVec<T, N>& b)\n+{\n+    return std::ranges::equal(a, b);\n+}\n+\n+constexpr inline bool IsSpace(char c) noexcept;\n+template <typename Byte = uint8_t, size_t Size>\n+consteval FixedVec<Byte, Size / 2> ParseHex(const char (&hex_str)[Size])\n+{\n+    // Non lookup table version of HexDigit().\n+    auto from_hex = [](const uint8_t c) -> std::optional<uint8_t> {\n+        if (c >= '0' && c <= '9') {\n+            return std::make_optional<uint8_t>(c - '0');\n+        } else if (c >= 'a' && c <= 'f') {\n+            return std::make_optional<uint8_t>(c - uint8_t{'a' - 0xA});\n+        } else if (c >= 'A' && c <= 'F') {\n+            return std::make_optional<uint8_t>(c - uint8_t{'A' - 0xA});\n+        } else {\n+            return std::nullopt;\n+        }\n+    };\n+\n+    FixedVec<Byte, Size / 2> rv;\n+    size_t it = 0;\n+    while (it < (Size - 1)) { // -1 - Assumes null-term at the end.\n+        if (IsSpace(hex_str[it])) {\n+            ++it;\n+            continue;\n+        }\n+        auto c1 = from_hex(hex_str[it++]);\n+        if (it >= Size)\n+            return {};\n+        if (!c1.has_value())\n+            return {};",
      "path": "src/util/strencodings.h",
      "position": null,
      "original_position": 82,
      "commit_id": "e6b3438aae1bb7311f655d3eeb2331989002cd2f",
      "original_commit_id": "83a4d2f1cfc18733d778d1da72d37152efb463d1",
      "in_reply_to_id": 1682962565,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> I am a bit worried that putting the bytes directly onto the stack (or easily allowing the dev to do so) may lead to high stack usage in some code paths and stack overflow on some platforms that have tighter limits.\r\n\r\nOutside of tests & benchmarks there would *currently* only be 4 places where `ParseHex()` is replaced with `BytesFromHex`. One has static storage file scope, so wouldn't affect the stack. The longest one is 336 chars, which becomes 168 bytes on the stack.\r\n\r\n<details>\r\n<summary>\r\n\r\n### 4 runtime places tentatively replaced with `BytesFromHex`\r\n\r\n</summary>\r\n\r\n**net_processing.cpp**, the big one:\r\n```C++\r\n// If the peer is old enough to have the old alert system, send it the final alert.\r\nif (greatest_common_version <= 70012) {\r\n    constexpr auto finalAlert{BytesFromHex(\"60010000000000000000000000ffffff7f00000000ffffff7ffeffff7f01ffffff7f00000000ffffff7f00ffffff7f002f555247454e543a20416c657274206b657920636f6d70726f6d697365642c2075706772616465207265717569726564004630440220653febd6410f470f6bae11cad19c48413becb1ac2c17f908fd0fd53bdc3abd5202206d0e9c96fe88d4a0f01ed9dedae2b6f9e00da94cad0fecaae66ecf689bf71b50\")};\r\n    MakeAndPushMessage(pfrom, \"alert\", Span{finalAlert});\r\n}\r\n```\r\n\r\n```C++\r\nconst CScript genesisOutputScript = CScript() << BytesFromHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\") << OP_CHECKSIG;\r\n```\r\n\r\n```C++\r\nbin = ToByteVector(BytesFromHex(\"512103ad5e0edad18cb1f0fc0d28a3d4f1f3e445640337489abb10404f2d1e086be430210359ef5021964fe22d6f8e05b2463c9540ce96883fe3b278760f048f5189f2e6c452ae\"));\r\n```\r\n\r\n```C++\r\nconstexpr XOnlyPubKey XOnlyPubKey::NUMS_H{BytesFromHex(\"50929b74c1a04954b78b4b6035e97a5e078a5a0f28ec96d547bfee9ace803ac0\")};\r\n```\r\n</details>\r\n\r\nFor reference, **src/leveldb/util/posix_logger.h** has:\r\n```C++\r\n    constexpr const int kStackBufferSize = 512;\r\n    char stack_buffer[kStackBufferSize];\r\n```\r\n(But it may be dead code, and would also just be part of a leaf in the call graph).\r\n\r\nOn my workstation I have an 8MB stack (50000x 160 bytes) according to:\r\n```C++\r\n    struct rlimit rl;\r\n    int result = getrlimit(RLIMIT_STACK, &rl);\r\n    if (result == 0) {\r\n        LogInfo(\"Stack size: %ld\", rl.rlim_cur);\r\n    } else {\r\n        LogInfo(\"getrlimit failed: %d\", result);\r\n    }\r\n```\r\n\r\nThis article gives 135168 bytes of stack size (~800x 168 bytes) for unnamed Raspberry Pi device in 2020: https://www.embeddedrelated.com/showarticle/1330.php\r\n",
      "created_at": "2024-07-25T21:49:18Z",
      "updated_at": "2024-07-25T21:49:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1692176710",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1692176710"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 141,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1692203055",
      "pull_request_review_id": 2200551062,
      "id": 1692203055,
      "node_id": "PRRC_kwDOABII585k3Pgv",
      "diff_hunk": "@@ -67,6 +68,88 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/**\n+ * Max size fixed at compile time.\n+ * Created to be used on the border between runtime and compile time which a\n+ * dynamically allocating std::vector cannot cross.\n+ * The type was created in preference over std::array to be able to parse hex\n+ * strings at compile time which may contain whitespace, making exact size()\n+ * unknown ahead of template instantiation.\n+ */\n+template<typename T, size_t N>\n+class FixedVec\n+{\n+    std::array<T, N> m_data{};\n+    size_t m_size{0};\n+\n+public:\n+    constexpr const T* data() const { return m_data.data(); }\n+    constexpr size_t size() const { return m_size; }\n+    constexpr const T* begin() const { return data(); }\n+    constexpr const T* end() const { return data() + m_size; }\n+    constexpr void push_back(const T& v)\n+    {\n+        assert(m_size < N);\n+        m_data[m_size] = v;\n+        ++m_size;\n+    }\n+\n+    /// Enables creation of a runtime allocated vector when necessary.\n+    // NOT just a plain `operator std::vector<T>()` since we want to expose\n+    // allocations.\n+    constexpr std::vector<T> to_dynamic() const\n+    {\n+        return {begin(), end()};\n+    }\n+};\n+\n+template <typename T, size_t N>\n+constexpr bool operator==(const std::vector<T>& a, const FixedVec<T, N>& b)\n+{\n+    return std::ranges::equal(a, b);\n+}\n+\n+constexpr inline bool IsSpace(char c) noexcept;\n+template <typename Byte = uint8_t, size_t Size>\n+consteval FixedVec<Byte, Size / 2> ParseHex(const char (&hex_str)[Size])\n+{\n+    // Non lookup table version of HexDigit().\n+    auto from_hex = [](const uint8_t c) -> std::optional<uint8_t> {\n+        if (c >= '0' && c <= '9') {\n+            return std::make_optional<uint8_t>(c - '0');\n+        } else if (c >= 'a' && c <= 'f') {\n+            return std::make_optional<uint8_t>(c - uint8_t{'a' - 0xA});\n+        } else if (c >= 'A' && c <= 'F') {\n+            return std::make_optional<uint8_t>(c - uint8_t{'A' - 0xA});\n+        } else {\n+            return std::nullopt;\n+        }\n+    };\n+\n+    FixedVec<Byte, Size / 2> rv;\n+    size_t it = 0;\n+    while (it < (Size - 1)) { // -1 - Assumes null-term at the end.\n+        if (IsSpace(hex_str[it])) {\n+            ++it;\n+            continue;\n+        }\n+        auto c1 = from_hex(hex_str[it++]);\n+        if (it >= Size)\n+            return {};\n+        if (!c1.has_value())\n+            return {};",
      "path": "src/util/strencodings.h",
      "position": null,
      "original_position": 82,
      "commit_id": "e6b3438aae1bb7311f655d3eeb2331989002cd2f",
      "original_commit_id": "83a4d2f1cfc18733d778d1da72d37152efb463d1",
      "in_reply_to_id": 1682962565,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "You can also use `std::is_constant_evaluated` to make a function behave differently inside constexpr and outside of it.",
      "created_at": "2024-07-25T22:13:17Z",
      "updated_at": "2024-07-25T22:13:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1692203055",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1692203055"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 141,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1692641088",
      "pull_request_review_id": 2201143973,
      "id": 1692641088,
      "node_id": "PRRC_kwDOABII585k46dA",
      "diff_hunk": "@@ -67,6 +68,88 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/**\n+ * Max size fixed at compile time.\n+ * Created to be used on the border between runtime and compile time which a\n+ * dynamically allocating std::vector cannot cross.\n+ * The type was created in preference over std::array to be able to parse hex\n+ * strings at compile time which may contain whitespace, making exact size()\n+ * unknown ahead of template instantiation.\n+ */\n+template<typename T, size_t N>\n+class FixedVec\n+{\n+    std::array<T, N> m_data{};\n+    size_t m_size{0};\n+\n+public:\n+    constexpr const T* data() const { return m_data.data(); }\n+    constexpr size_t size() const { return m_size; }\n+    constexpr const T* begin() const { return data(); }\n+    constexpr const T* end() const { return data() + m_size; }\n+    constexpr void push_back(const T& v)\n+    {\n+        assert(m_size < N);\n+        m_data[m_size] = v;\n+        ++m_size;\n+    }\n+\n+    /// Enables creation of a runtime allocated vector when necessary.\n+    // NOT just a plain `operator std::vector<T>()` since we want to expose\n+    // allocations.\n+    constexpr std::vector<T> to_dynamic() const\n+    {\n+        return {begin(), end()};\n+    }\n+};\n+\n+template <typename T, size_t N>\n+constexpr bool operator==(const std::vector<T>& a, const FixedVec<T, N>& b)\n+{\n+    return std::ranges::equal(a, b);\n+}\n+\n+constexpr inline bool IsSpace(char c) noexcept;\n+template <typename Byte = uint8_t, size_t Size>\n+consteval FixedVec<Byte, Size / 2> ParseHex(const char (&hex_str)[Size])\n+{\n+    // Non lookup table version of HexDigit().\n+    auto from_hex = [](const uint8_t c) -> std::optional<uint8_t> {\n+        if (c >= '0' && c <= '9') {\n+            return std::make_optional<uint8_t>(c - '0');\n+        } else if (c >= 'a' && c <= 'f') {\n+            return std::make_optional<uint8_t>(c - uint8_t{'a' - 0xA});\n+        } else if (c >= 'A' && c <= 'F') {\n+            return std::make_optional<uint8_t>(c - uint8_t{'A' - 0xA});\n+        } else {\n+            return std::nullopt;\n+        }\n+    };\n+\n+    FixedVec<Byte, Size / 2> rv;\n+    size_t it = 0;\n+    while (it < (Size - 1)) { // -1 - Assumes null-term at the end.\n+        if (IsSpace(hex_str[it])) {\n+            ++it;\n+            continue;\n+        }\n+        auto c1 = from_hex(hex_str[it++]);\n+        if (it >= Size)\n+            return {};\n+        if (!c1.has_value())\n+            return {};",
      "path": "src/util/strencodings.h",
      "position": null,
      "original_position": 82,
      "commit_id": "e6b3438aae1bb7311f655d3eeb2331989002cd2f",
      "original_commit_id": "83a4d2f1cfc18733d778d1da72d37152efb463d1",
      "in_reply_to_id": 1682962565,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, I was experimenting with `std::is_constant_evaluated` early on (don't think it was discussed). If I remember correctly, the reason I abandoned it in favor of `consteval` overloads taking string literals was that I was never getting compile-time evaluation where I expected it. There's also the divergence in behavior that runtime-functions may need to return optional or heap-allocated types, while compile time-functions can keep all error handling internal and need to return stack-allocated types.\r\n\r\nIf we were to go with compile time validation when possible, but always heap-allocation for `ParseHex`, I can see how it may be useful.",
      "created_at": "2024-07-26T07:38:10Z",
      "updated_at": "2024-07-26T07:38:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1692641088",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1692641088"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 141,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1692754289",
      "pull_request_review_id": 2201322541,
      "id": 1692754289,
      "node_id": "PRRC_kwDOABII585k5WFx",
      "diff_hunk": "@@ -67,6 +68,88 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/**\n+ * Max size fixed at compile time.\n+ * Created to be used on the border between runtime and compile time which a\n+ * dynamically allocating std::vector cannot cross.\n+ * The type was created in preference over std::array to be able to parse hex\n+ * strings at compile time which may contain whitespace, making exact size()\n+ * unknown ahead of template instantiation.\n+ */\n+template<typename T, size_t N>\n+class FixedVec\n+{\n+    std::array<T, N> m_data{};\n+    size_t m_size{0};\n+\n+public:\n+    constexpr const T* data() const { return m_data.data(); }\n+    constexpr size_t size() const { return m_size; }\n+    constexpr const T* begin() const { return data(); }\n+    constexpr const T* end() const { return data() + m_size; }\n+    constexpr void push_back(const T& v)\n+    {\n+        assert(m_size < N);\n+        m_data[m_size] = v;\n+        ++m_size;\n+    }\n+\n+    /// Enables creation of a runtime allocated vector when necessary.\n+    // NOT just a plain `operator std::vector<T>()` since we want to expose\n+    // allocations.\n+    constexpr std::vector<T> to_dynamic() const\n+    {\n+        return {begin(), end()};\n+    }\n+};\n+\n+template <typename T, size_t N>\n+constexpr bool operator==(const std::vector<T>& a, const FixedVec<T, N>& b)\n+{\n+    return std::ranges::equal(a, b);\n+}\n+\n+constexpr inline bool IsSpace(char c) noexcept;\n+template <typename Byte = uint8_t, size_t Size>\n+consteval FixedVec<Byte, Size / 2> ParseHex(const char (&hex_str)[Size])\n+{\n+    // Non lookup table version of HexDigit().\n+    auto from_hex = [](const uint8_t c) -> std::optional<uint8_t> {\n+        if (c >= '0' && c <= '9') {\n+            return std::make_optional<uint8_t>(c - '0');\n+        } else if (c >= 'a' && c <= 'f') {\n+            return std::make_optional<uint8_t>(c - uint8_t{'a' - 0xA});\n+        } else if (c >= 'A' && c <= 'F') {\n+            return std::make_optional<uint8_t>(c - uint8_t{'A' - 0xA});\n+        } else {\n+            return std::nullopt;\n+        }\n+    };\n+\n+    FixedVec<Byte, Size / 2> rv;\n+    size_t it = 0;\n+    while (it < (Size - 1)) { // -1 - Assumes null-term at the end.\n+        if (IsSpace(hex_str[it])) {\n+            ++it;\n+            continue;\n+        }\n+        auto c1 = from_hex(hex_str[it++]);\n+        if (it >= Size)\n+            return {};\n+        if (!c1.has_value())\n+            return {};",
      "path": "src/util/strencodings.h",
      "position": null,
      "original_position": 82,
      "commit_id": "e6b3438aae1bb7311f655d3eeb2331989002cd2f",
      "original_commit_id": "83a4d2f1cfc18733d778d1da72d37152efb463d1",
      "in_reply_to_id": 1682962565,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> Outside of tests & benchmarks there would _currently_ only be 4 places where `ParseHex()` is replaced with `BytesFromHex`.\r\n\r\nThanks for enumerating. Looking at them:\r\n\r\n* `finalAlert` -> Shouldn't matter much, either way (Span-serialization doesn't care about the underlying type)\r\n* `genesisOutputScript` -> This must be a vector and can not be an array, because array-serialization is different from vector-serialization\r\n* `ToByteVector` -> Yeah, vector as well\r\n* `XOnlyPubKey` -> Shouldn't matter?\r\n\r\nAgain, up to you what you see is a better fit.\r\n\r\nIf you want to provide a function for arrays and another for vectors, it seems fine as well.",
      "created_at": "2024-07-26T09:12:48Z",
      "updated_at": "2024-07-26T09:12:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1692754289",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1692754289"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 141,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1692958389",
      "pull_request_review_id": 2201654010,
      "id": 1692958389,
      "node_id": "PRRC_kwDOABII585k6H61",
      "diff_hunk": "@@ -67,6 +68,88 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/**\n+ * Max size fixed at compile time.\n+ * Created to be used on the border between runtime and compile time which a\n+ * dynamically allocating std::vector cannot cross.\n+ * The type was created in preference over std::array to be able to parse hex\n+ * strings at compile time which may contain whitespace, making exact size()\n+ * unknown ahead of template instantiation.\n+ */\n+template<typename T, size_t N>\n+class FixedVec\n+{\n+    std::array<T, N> m_data{};\n+    size_t m_size{0};\n+\n+public:\n+    constexpr const T* data() const { return m_data.data(); }\n+    constexpr size_t size() const { return m_size; }\n+    constexpr const T* begin() const { return data(); }\n+    constexpr const T* end() const { return data() + m_size; }\n+    constexpr void push_back(const T& v)\n+    {\n+        assert(m_size < N);\n+        m_data[m_size] = v;\n+        ++m_size;\n+    }\n+\n+    /// Enables creation of a runtime allocated vector when necessary.\n+    // NOT just a plain `operator std::vector<T>()` since we want to expose\n+    // allocations.\n+    constexpr std::vector<T> to_dynamic() const\n+    {\n+        return {begin(), end()};\n+    }\n+};\n+\n+template <typename T, size_t N>\n+constexpr bool operator==(const std::vector<T>& a, const FixedVec<T, N>& b)\n+{\n+    return std::ranges::equal(a, b);\n+}\n+\n+constexpr inline bool IsSpace(char c) noexcept;\n+template <typename Byte = uint8_t, size_t Size>\n+consteval FixedVec<Byte, Size / 2> ParseHex(const char (&hex_str)[Size])\n+{\n+    // Non lookup table version of HexDigit().\n+    auto from_hex = [](const uint8_t c) -> std::optional<uint8_t> {\n+        if (c >= '0' && c <= '9') {\n+            return std::make_optional<uint8_t>(c - '0');\n+        } else if (c >= 'a' && c <= 'f') {\n+            return std::make_optional<uint8_t>(c - uint8_t{'a' - 0xA});\n+        } else if (c >= 'A' && c <= 'F') {\n+            return std::make_optional<uint8_t>(c - uint8_t{'A' - 0xA});\n+        } else {\n+            return std::nullopt;\n+        }\n+    };\n+\n+    FixedVec<Byte, Size / 2> rv;\n+    size_t it = 0;\n+    while (it < (Size - 1)) { // -1 - Assumes null-term at the end.\n+        if (IsSpace(hex_str[it])) {\n+            ++it;\n+            continue;\n+        }\n+        auto c1 = from_hex(hex_str[it++]);\n+        if (it >= Size)\n+            return {};\n+        if (!c1.has_value())\n+            return {};",
      "path": "src/util/strencodings.h",
      "position": null,
      "original_position": 82,
      "commit_id": "e6b3438aae1bb7311f655d3eeb2331989002cd2f",
      "original_commit_id": "83a4d2f1cfc18733d778d1da72d37152efb463d1",
      "in_reply_to_id": 1682962565,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> genesisOutputScript -> This must be a vector and can not be an array, because array-serialization is different from vector-serialization\r\n\r\nThanks for pointing that difference out, already ran into some other issues with local changes in test code regarding this. Seems a bit brittle that `vector`s serialize with the size prefixed while `Span`s don't, as `vector`s can implicitly convert to `Span`s.\r\n\r\nThis difference in behavior affects `DataStream` and possibly other types using **serialize.h**, but as far as I see `CScript` only has `CScript& operator<<(const std::vector<unsigned char>& b)`.\r\n\r\nI am considering proposing the `CScript` method take `std::span` instead. Either way I think `genesisOutputScript` should still be okay.",
      "created_at": "2024-07-26T11:57:45Z",
      "updated_at": "2024-07-26T11:57:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1692958389",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1692958389"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 141,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1692989490",
      "pull_request_review_id": 2201712376,
      "id": 1692989490,
      "node_id": "PRRC_kwDOABII585k6Pgy",
      "diff_hunk": "@@ -67,6 +68,88 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/**\n+ * Max size fixed at compile time.\n+ * Created to be used on the border between runtime and compile time which a\n+ * dynamically allocating std::vector cannot cross.\n+ * The type was created in preference over std::array to be able to parse hex\n+ * strings at compile time which may contain whitespace, making exact size()\n+ * unknown ahead of template instantiation.\n+ */\n+template<typename T, size_t N>\n+class FixedVec\n+{\n+    std::array<T, N> m_data{};\n+    size_t m_size{0};\n+\n+public:\n+    constexpr const T* data() const { return m_data.data(); }\n+    constexpr size_t size() const { return m_size; }\n+    constexpr const T* begin() const { return data(); }\n+    constexpr const T* end() const { return data() + m_size; }\n+    constexpr void push_back(const T& v)\n+    {\n+        assert(m_size < N);\n+        m_data[m_size] = v;\n+        ++m_size;\n+    }\n+\n+    /// Enables creation of a runtime allocated vector when necessary.\n+    // NOT just a plain `operator std::vector<T>()` since we want to expose\n+    // allocations.\n+    constexpr std::vector<T> to_dynamic() const\n+    {\n+        return {begin(), end()};\n+    }\n+};\n+\n+template <typename T, size_t N>\n+constexpr bool operator==(const std::vector<T>& a, const FixedVec<T, N>& b)\n+{\n+    return std::ranges::equal(a, b);\n+}\n+\n+constexpr inline bool IsSpace(char c) noexcept;\n+template <typename Byte = uint8_t, size_t Size>\n+consteval FixedVec<Byte, Size / 2> ParseHex(const char (&hex_str)[Size])\n+{\n+    // Non lookup table version of HexDigit().\n+    auto from_hex = [](const uint8_t c) -> std::optional<uint8_t> {\n+        if (c >= '0' && c <= '9') {\n+            return std::make_optional<uint8_t>(c - '0');\n+        } else if (c >= 'a' && c <= 'f') {\n+            return std::make_optional<uint8_t>(c - uint8_t{'a' - 0xA});\n+        } else if (c >= 'A' && c <= 'F') {\n+            return std::make_optional<uint8_t>(c - uint8_t{'A' - 0xA});\n+        } else {\n+            return std::nullopt;\n+        }\n+    };\n+\n+    FixedVec<Byte, Size / 2> rv;\n+    size_t it = 0;\n+    while (it < (Size - 1)) { // -1 - Assumes null-term at the end.\n+        if (IsSpace(hex_str[it])) {\n+            ++it;\n+            continue;\n+        }\n+        auto c1 = from_hex(hex_str[it++]);\n+        if (it >= Size)\n+            return {};\n+        if (!c1.has_value())\n+            return {};",
      "path": "src/util/strencodings.h",
      "position": null,
      "original_position": 82,
      "commit_id": "e6b3438aae1bb7311f655d3eeb2331989002cd2f",
      "original_commit_id": "83a4d2f1cfc18733d778d1da72d37152efb463d1",
      "in_reply_to_id": 1682962565,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> Seems a bit brittle that `vector`s serialize with the size prefixed while `Span`s don't, as `vector`s can implicitly convert to `Span`s.\r\n\r\nAs for serialize code, an implicit conversion should not happen. If it does anywhere, then that is a bug and should be fixed.\r\n\r\n\r\n\r\n> I am considering proposing the `CScript` method take `std::span` instead. Either way I think `genesisOutputScript` should still be okay.\r\n\r\nI am not sure if it is beneficial to have cscript-serialization differ from streams-serialization here.  In any case, it shouldn't be required for the changes here, or otherwise touch the same lines of code as the changes here?",
      "created_at": "2024-07-26T12:25:45Z",
      "updated_at": "2024-07-26T12:25:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1692989490",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1692989490"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 141,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1696565971",
      "pull_request_review_id": 2207043250,
      "id": 1696565971,
      "node_id": "PRRC_kwDOABII585lH4rT",
      "diff_hunk": "@@ -67,6 +68,88 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/**\n+ * Max size fixed at compile time.\n+ * Created to be used on the border between runtime and compile time which a\n+ * dynamically allocating std::vector cannot cross.\n+ * The type was created in preference over std::array to be able to parse hex\n+ * strings at compile time which may contain whitespace, making exact size()\n+ * unknown ahead of template instantiation.\n+ */\n+template<typename T, size_t N>\n+class FixedVec\n+{\n+    std::array<T, N> m_data{};\n+    size_t m_size{0};\n+\n+public:\n+    constexpr const T* data() const { return m_data.data(); }\n+    constexpr size_t size() const { return m_size; }\n+    constexpr const T* begin() const { return data(); }\n+    constexpr const T* end() const { return data() + m_size; }\n+    constexpr void push_back(const T& v)\n+    {\n+        assert(m_size < N);\n+        m_data[m_size] = v;\n+        ++m_size;\n+    }\n+\n+    /// Enables creation of a runtime allocated vector when necessary.\n+    // NOT just a plain `operator std::vector<T>()` since we want to expose\n+    // allocations.\n+    constexpr std::vector<T> to_dynamic() const\n+    {\n+        return {begin(), end()};\n+    }\n+};\n+\n+template <typename T, size_t N>\n+constexpr bool operator==(const std::vector<T>& a, const FixedVec<T, N>& b)\n+{\n+    return std::ranges::equal(a, b);\n+}\n+\n+constexpr inline bool IsSpace(char c) noexcept;\n+template <typename Byte = uint8_t, size_t Size>\n+consteval FixedVec<Byte, Size / 2> ParseHex(const char (&hex_str)[Size])\n+{\n+    // Non lookup table version of HexDigit().\n+    auto from_hex = [](const uint8_t c) -> std::optional<uint8_t> {\n+        if (c >= '0' && c <= '9') {\n+            return std::make_optional<uint8_t>(c - '0');\n+        } else if (c >= 'a' && c <= 'f') {\n+            return std::make_optional<uint8_t>(c - uint8_t{'a' - 0xA});\n+        } else if (c >= 'A' && c <= 'F') {\n+            return std::make_optional<uint8_t>(c - uint8_t{'A' - 0xA});\n+        } else {\n+            return std::nullopt;\n+        }\n+    };\n+\n+    FixedVec<Byte, Size / 2> rv;\n+    size_t it = 0;\n+    while (it < (Size - 1)) { // -1 - Assumes null-term at the end.\n+        if (IsSpace(hex_str[it])) {\n+            ++it;\n+            continue;\n+        }\n+        auto c1 = from_hex(hex_str[it++]);\n+        if (it >= Size)\n+            return {};\n+        if (!c1.has_value())\n+            return {};",
      "path": "src/util/strencodings.h",
      "position": null,
      "original_position": 82,
      "commit_id": "e6b3438aae1bb7311f655d3eeb2331989002cd2f",
      "original_commit_id": "83a4d2f1cfc18733d778d1da72d37152efb463d1",
      "in_reply_to_id": 1682962565,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "(Feel free to resolve the discussion for now, given that you dropped those changes here for now)",
      "created_at": "2024-07-30T08:39:03Z",
      "updated_at": "2024-07-30T08:39:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1696565971",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1696565971"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 141,
      "side": "RIGHT"
    }
  ]
}