{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28220",
    "id": 1463646666,
    "node_id": "PR_kwDOABII585XPXnK",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/28220",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/28220.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/28220.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28220",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28220/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28220/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28220/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/2774e082f4c57ed433d605d63f8a172f4be23d5b",
    "number": 28220,
    "state": "closed",
    "locked": true,
    "maintainer_can_modify": false,
    "title": "Libstandardness (edition 2023)",
    "user": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This PR proposes to introduce a new interface to allow applications and second layers protocols to verify that their unconfirmed and non-propagated transactions are valid under Bitcoin Core transaction relay policy.\r\n\r\nThis new `libstandardness` interface is designed at the image of the `bitcoinconsensus` library, which already exposes some of the script verification internals to other applications. A new method is introduced `libstandard_verify_transaction` which indicate to the caller if the transaction is valid, i.e can propagate at current chain tip. For now, the policy rules as considered as a \"black box\", there is no detail (i.e `TxValidationState::m_reject_reason`) on thepolicy rule violated.\r\n\r\nThis interface allows second layers like contracting protocols relying on pre-signed transactions and efficient propagation over the network mempools for the security of user funds. E.g for the Lightning Network, counterparties are exchanging signatures for the commitment transaction and second-stage HTLCs during the BOLT2's `commitment_signed` message dance. A policy invalid commitment transaction with pending HTLC outputs not propagating on the network can be source of failure, a serious vulnerability for a Lightning implementation as [CVE-2020-26895](https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-October/002858.html) showed it. Beyond being source of loss of funds, a policy rule violation can be a source of [liquidity griefing](https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-May/003920.html) for a Lightning node participating in a collaborative transaction flow (dual-funding / splicing), where inputs/outputs are freely added by the counterparties.\r\n\r\nFor some contracting protocols, where the pre-signed txn are malleable by the counterparty it doesn't seem computationally plausible to `testmempoolaccept` all the combinationd valid under the protocol template and this would still assume some changes in our current transaction validation interface to bypass some stateful checks such as timelocks and mempool min fee.\r\n\r\nAs of today, there is no straightforward software tooling for applications and second-layers to verify the validity of the policy rules of their transactions, and most of implementations to the best of my knwoledge are re-implementing the policy rules in their backend, or delegate this verification to their bitcoin libraries. Such re-implementation is sometimes imperfect, must be updated at each Bitcoin Core policy rules changes (e.g packages policy rules) and be adapted for each protocol transaction templates (e.g for Lightning, commitment tx, second-stage tx, closing_tx, collaborative tx, legacy/anchor/taproot).\r\n\r\nThe proposed interface is introduced as a shared library rather than a RPC interface, as ideally policy rules could be enforced on embedded / resource constrained platforms such as L2 signers enforcing security rule validation of the second layer state machine (and from where one should be able to extract propagating pre-signed transactions in case of emergency recovery) and generally allow for more flexibility for applications and second layers, e.g on mobile phone where a full-node is not assumed (all caveats reserved on the lower security model in that latter case).\r\n\r\nThis interface has been proposed in the past, see previous PRs\r\n- https://github.com/bitcoin/bitcoin/pull/18797\r\n- https://github.com/bitcoin/bitcoin/pull/21413\r\n- https://github.com/bitcoin/bitcoin/pull/25434\r\n\r\nOpening the PR for now to collect conceptual and implementation-approach feedbacks. If the new interface is judged as relevant and useful, I'll add bindings in rust-bitcoin to test the interface end-to-end with adequate Lightning software.\r\n\r\nTODO:\r\n- write documentation for language bindings write in `doc/shared-libraries.md` and maybe in `doc/policy/`\r\n- integrate as a config flag only feature in build system (e.g `BUILD_BITCOIN_LIBSTANDARDNESS` in `src/Makefile.am` and `configure.ac`)\r\n- initialize the chainstate and its associated mempool with the spent utxos\r\n- some other things",
    "labels": [
      {
        "id": 5334691551,
        "node_id": "LA_kwDOABII588AAAABPfju3w",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/CI%20failed",
        "name": "CI failed",
        "description": "",
        "color": "cccccc",
        "default": false
      }
    ],
    "created_at": "2023-08-05T03:34:40Z",
    "updated_at": "2024-09-26T20:47:37Z",
    "closed_at": "2023-09-27T16:27:30Z",
    "mergeable_state": "unknown",
    "merge_commit_sha": "3a126afbd0026025c13b12b907c8bc166fc22908",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "head": {
      "label": "ariard:2023-07-libstandardness-edition-2023",
      "ref": "2023-07-libstandardness-edition-2023",
      "sha": "2774e082f4c57ed433d605d63f8a172f4be23d5b",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 109855489,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMDk4NTU0ODk=",
        "name": "bitcoin",
        "full_name": "ariard/bitcoin",
        "owner": {
          "login": "ariard",
          "id": 23310655,
          "node_id": "MDQ6VXNlcjIzMzEwNjU1",
          "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/ariard",
          "html_url": "https://github.com/ariard",
          "followers_url": "https://api.github.com/users/ariard/followers",
          "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
          "organizations_url": "https://api.github.com/users/ariard/orgs",
          "repos_url": "https://api.github.com/users/ariard/repos",
          "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/ariard/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/ariard/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/ariard/bitcoin",
        "archive_url": "https://api.github.com/repos/ariard/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/ariard/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/ariard/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/ariard/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/ariard/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/ariard/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/ariard/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/ariard/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/ariard/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/ariard/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/ariard/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/ariard/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/ariard/bitcoin/events",
        "forks_url": "https://api.github.com/repos/ariard/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/ariard/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/ariard/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/ariard/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/ariard/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/ariard/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/ariard/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/ariard/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/ariard/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/ariard/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/ariard/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/ariard/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/ariard/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/ariard/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/ariard/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/ariard/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:ariard/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/ariard/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/ariard/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/ariard/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/ariard/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/ariard/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/ariard/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/ariard/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/ariard/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/ariard/bitcoin/hooks",
        "svn_url": "https://github.com/ariard/bitcoin",
        "homepage": "https://bitcoin.org/en/download",
        "language": "C++",
        "forks_count": 0,
        "stargazers_count": 3,
        "watchers_count": 3,
        "size": 261823,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2024-09-06T19:13:05Z",
        "created_at": "2017-11-07T15:39:59Z",
        "updated_at": "2023-12-04T03:17:48Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "d096743150fd35578b7ed71ef6bced2341927d43",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 36203,
        "stargazers_count": 78556,
        "watchers_count": 78556,
        "size": 269017,
        "default_branch": "master",
        "open_issues_count": 661,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2024-09-26T15:51:36Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2024-09-26T20:32:39Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28220"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": true,
    "additions": 175,
    "deletions": 43,
    "changed_files": 5,
    "commits": 2,
    "review_comments": 2,
    "comments": 10
  },
  "events": [
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDMyZTUyYWE2MDQ3ZDI2N2MxZmNhZDY4MjM2MmEwMjI0MWYxOTQ0YWY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/32e52aa6047d267c1fcad682362a02241f1944af",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/32e52aa6047d267c1fcad682362a02241f1944af",
      "tree": {
        "sha": "7998338f824080256d0c6c52d004ad53680ef676",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7998338f824080256d0c6c52d004ad53680ef676"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7f0b79ea132d22ad5212c1d3ff4325715ca5ac12",
          "sha": "7f0b79ea132d22ad5212c1d3ff4325715ca5ac12",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/7f0b79ea132d22ad5212c1d3ff4325715ca5ac12"
        }
      ],
      "message": "Extract deserialize for share libs usage",
      "committer": {
        "name": "Antoine Riard",
        "email": "dev@ariard.me",
        "date": "2023-08-05T02:31:15Z"
      },
      "author": {
        "name": "Antoine Riard",
        "email": "dev@ariard.me",
        "date": "2023-08-05T02:28:47Z"
      },
      "sha": "32e52aa6047d267c1fcad682362a02241f1944af"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDI3NzRlMDgyZjRjNTdlZDQzM2Q2MDVkNjNmOGExNzJmNGJlMjNkNWI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2774e082f4c57ed433d605d63f8a172f4be23d5b",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/2774e082f4c57ed433d605d63f8a172f4be23d5b",
      "tree": {
        "sha": "d5099fa56bbdd3f5692ceb7999dd1a67ff1dbb2e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d5099fa56bbdd3f5692ceb7999dd1a67ff1dbb2e"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/32e52aa6047d267c1fcad682362a02241f1944af",
          "sha": "32e52aa6047d267c1fcad682362a02241f1944af",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/32e52aa6047d267c1fcad682362a02241f1944af"
        }
      ],
      "message": "Add libstandardness shared library",
      "committer": {
        "name": "Antoine Riard",
        "email": "dev@ariard.me",
        "date": "2023-08-05T02:31:15Z"
      },
      "author": {
        "name": "Antoine Riard",
        "email": "dev@ariard.me",
        "date": "2023-08-03T03:27:12Z"
      },
      "sha": "2774e082f4c57ed433d605d63f8a172f4be23d5b"
    },
    {
      "event": "commented",
      "id": 1666373581,
      "node_id": "IC_kwDOABII585jUtfN",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1666373581",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-05T03:34:42Z",
      "updated_at": "2023-09-27T02:47:52Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| Concept NACK | [luke-jr](https://github.com/bitcoin/bitcoin/pull/28220#issuecomment-1666554027) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#28539](https://github.com/bitcoin/bitcoin/pull/28539) (lib: add taproot support to libconsensus by brunoerg)\n* [#28438](https://github.com/bitcoin/bitcoin/pull/28438) (Use serialization parameters for CTransaction by ajtowns)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28220#issuecomment-1666373581",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28220"
    },
    {
      "event": "convert_to_draft",
      "id": 10014319040,
      "node_id": "CTDE_lADOABII585thtNTzwAAAAJU5mHA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10014319040",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-05T03:35:37Z"
    },
    {
      "event": "labeled",
      "id": 10014488243,
      "node_id": "LE_lADOABII585thtNTzwAAAAJU6Paz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10014488243",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-05T05:32:38Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 1666554027,
      "node_id": "IC_kwDOABII585jVZir",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1666554027",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-05T16:57:55Z",
      "updated_at": "2023-08-05T16:57:55Z",
      "author_association": "MEMBER",
      "body": "Concept NACK.\r\n\r\n> Bitcoin Core transaction relay policy.\r\n\r\nThis is not and should never become a thing. Every node has its own policies, and relying on any specific policy is broken by design.",
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28220#issuecomment-1666554027",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28220"
    },
    {
      "event": "commented",
      "id": 1667028032,
      "node_id": "IC_kwDOABII585jXNRA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1667028032",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-07T00:42:42Z",
      "updated_at": "2023-08-07T00:45:42Z",
      "author_association": "CONTRIBUTOR",
      "body": "> This is not and should never become a thing. Every node has its own policies, and relying on any specific policy is broken by design.\r\n\r\nWhile each node can set its own transaction relay policy, economically rational nodes are expected to follow the set of rules yielding the highest feerate traffic, at the very least for the ones partaking in block template construction if they wish to stay competitive mining entities.\r\n\r\nIf the default set of transaction relay rules do not yield the highest feerate traffic modulo the restrictions for DoS robustness, this is certainly a defect or imperfections that should be fixed, and this in fact the work pursued by BIP331 / nversion3 and its implementation in Bitcoin Core to the best of my understanding.\r\n\r\nIn light of this economical rationality design goal, second-layers protocols can be designed accordingly and issue transactions ensuring they’re understood and relayed by the economically rational nodes on the transaction relay network. If they assume uneconomic transaction-relay behavior in their design and requirements, they should be fixed in consequence.\r\n\r\nIf there is a wish to define further “economically rational” I can propose the lineaments of a game-theory model of Bitcoin transaction-relay, including miners strategy on the mailing list. In the meantime, this work is only exposing our mempool validation interface than one could leverage by direct p2p message to a full-node.",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28220#issuecomment-1667028032",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28220"
    },
    {
      "event": "commented",
      "id": 1674083758,
      "node_id": "IC_kwDOABII585jyH2u",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1674083758",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-11T00:26:49Z",
      "updated_at": "2023-08-11T00:26:49Z",
      "author_association": "CONTRIBUTOR",
      "body": "> This PR proposes to introduce a new interface to allow applications and second layers protocols to verify that their unconfirmed and non-propagated transactions are valid under Bitcoin Core transaction relay policy.\r\n\r\nBetter to use the `testmempoolaccept` rpc for this than introduce a new api: mempool policy is a per-node decision, so having an actual node to ask is fairly natural. If you have a particular expectation on what \"economically rational\" nodes do, then configure that node be an \"economically rational\" one.",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28220#issuecomment-1674083758",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28220"
    },
    {
      "event": "commented",
      "id": 1698355421,
      "node_id": "IC_kwDOABII585lOtjd",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1698355421",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-30T01:24:57Z",
      "updated_at": "2023-08-30T01:24:57Z",
      "author_association": "CONTRIBUTOR",
      "body": "> Better to use the testmempoolaccept rpc for this than introduce a new api: mempool policy is a per-node decision, so\r\n> having an actual node to ask is fairly natural. If you have a particular expectation on what \"economically rational” nodes\r\n> do, then configure that node be an \"economically rational\" one.\r\n\r\nI don’t think you’re explaining how I’m supposed to configure an “economically rational\" node on an embedded or mobile device where computing resources are limited neither are answering the limitations of current testmempoolaccept w.r.t to pre-signed lightning transactions where the feerates / timelocks should be disregarded from the validation model (e.g when you receive counterparty witnesses).\r\n\r\nI think rpc is just an interface like another one (zmq / shared library) and application / protocol dev building on top of Bitcoin Core should be constrained in one interface at the detriment of another already existent one (each interface is coming with timing / throughput limitations). If your concern is about sensible code maintenance, thanks to make it explicit.\r\n\r\nConsidering mempool policy a per-node decision is a limited view in a modern world where you might have redundant transaction rebroadcast and a heterogeneity of time-sensitive second-layers protocols, it’s more a question of transaction-propagation standardness. This position deserves a more in-depth explanation on the mailing list and I’ll do so.\r\n\r\nDuring the meantime, still looking for approach ACK on the proposed libstandardness interface. ",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28220#issuecomment-1698355421",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28220"
    },
    {
      "event": "commented",
      "id": 1699770167,
      "node_id": "IC_kwDOABII585lUG83",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1699770167",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-30T20:09:36Z",
      "updated_at": "2023-08-30T20:09:36Z",
      "author_association": "CONTRIBUTOR",
      "body": "> Better to use the testmempoolaccept rpc for this than introduce a new api: mempool policy is a per-node decision, so having an actual node to ask is fairly natural. If you have a particular expectation on what \"economically rational\" nodes do, then configure that node be an \"economically rational\" one.\r\n\r\nLook at this a different way - this provides `testmempoolaccept` as a library. `libbitcoinconsensus` is incredibly useful in tests, as it avoids all the complexity of actually spawning hundreds of Bitcoin Core instances in tests.\r\n\r\nPolicy may be node-local, but \"minimum viable policy\", or something which lightning nodes can generally rely on existing at least on one or two miners and in a broad enough subset of the network that we can rely on such transactions getting mined is a critical API of Bitcoin Core for many applications. Making that something easy for applications to test against is a pretty important thing for the ecosystem.",
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28220#issuecomment-1699770167",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28220"
    },
    {
      "event": "reviewed",
      "id": 1608498335,
      "node_id": "PRR_kwDOABII585f37yf",
      "url": null,
      "actor": null,
      "commit_id": "2774e082f4c57ed433d605d63f8a172f4be23d5b",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "> spawning hundreds of Bitcoin Core instances in tests\r\n\r\nA single instance per chain tip should be enough, no? If there are many chain tips, you'd also have to keep the state with this proposed lib, no?",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28220#pullrequestreview-1608498335",
      "submitted_at": "2023-09-03T10:32:09Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28220"
    },
    {
      "event": "unsubscribed",
      "id": 10266951903,
      "node_id": "UE_lADOABII585thtNTzwAAAAJj9UDf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10266951903",
      "actor": {
        "login": "erolmez",
        "id": 49597038,
        "node_id": "MDQ6VXNlcjQ5NTk3MDM4",
        "avatar_url": "https://avatars.githubusercontent.com/u/49597038?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/erolmez",
        "html_url": "https://github.com/erolmez",
        "followers_url": "https://api.github.com/users/erolmez/followers",
        "following_url": "https://api.github.com/users/erolmez/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/erolmez/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/erolmez/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/erolmez/subscriptions",
        "organizations_url": "https://api.github.com/users/erolmez/orgs",
        "repos_url": "https://api.github.com/users/erolmez/repos",
        "events_url": "https://api.github.com/users/erolmez/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/erolmez/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-03T18:20:57Z"
    },
    {
      "event": "commented",
      "id": 1716283980,
      "node_id": "IC_kwDOABII585mTGpM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1716283980",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-12T19:17:41Z",
      "updated_at": "2023-09-12T19:25:12Z",
      "author_association": "CONTRIBUTOR",
      "body": "> A single instance per chain tip should be enough, no? If there are many chain tips, you'd also have to keep the state with this proposed lib, no?\r\n\r\nLet’s say you wanna do parallel-fuzzing of all the transactions received from your lightning counterparty to verify that your state machine reject invalid transactions, a library is easier for testing purpose, as you can give the chainstate as a fixed point, I think.",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28220#issuecomment-1716283980",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28220"
    },
    {
      "event": "commented",
      "id": 1736954114,
      "node_id": "IC_kwDOABII585nh9EC",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1736954114",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-27T08:37:02Z",
      "updated_at": "2023-09-27T08:37:02Z",
      "author_association": "MEMBER",
      "body": "I think it's unlikely that we'll introduce a new library for this. More ideally, seeing what falls out of, or, building on top of the work being done for the kernel might be a better approach (I think this was also discussed recently). \n\nA minimal, kernel-based application, built specifically for testing may also alleviate some (not all) of the complexity concerns.",
      "user": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28220#issuecomment-1736954114",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28220"
    },
    {
      "event": "commented",
      "id": 1736977023,
      "node_id": "IC_kwDOABII585niCp_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1736977023",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-27T08:48:54Z",
      "updated_at": "2023-09-27T08:48:54Z",
      "author_association": "MEMBER",
      "body": "I presume the goal here is to provide a library that accepts the list of utxos, as opposed to managing it internally, which libbitcoinkernel is expected to do (to minimize the footgun potential for users).\r\n\r\nThough, I wonder if this can be a build option, or an API marked \"dangerous\", within libbitcoinkernel.",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28220#issuecomment-1736977023",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28220"
    },
    {
      "event": "commented",
      "id": 1737721323,
      "node_id": "IC_kwDOABII585nk4Xr",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1737721323",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-27T16:27:30Z",
      "updated_at": "2023-09-27T16:30:00Z",
      "author_association": "CONTRIBUTOR",
      "body": "Effectively after chatting with the libbitcoinkernel folks, it sounds possible to build this already existent library as a shared one and then add on top the wished standardness validation function. I expect such API to be more footgunish as you’re validating a transaction (or chain of transactions) and not simply managing UTXO, yet with good design and user documentation this concern can be alleviated.\r\n\r\nI think such API can be hidden behind a build / config flag as I see standardness sanitization API being used by downstream project developers, not the average lambda user.\r\n\r\nClosing this PR for now and I’ll propose the same logic hacked on top of libbitcoinkernel soon. To the best of my understanding for now mempool validation is expected to be scoped in the kernel. If it turns out there is some unseen issue integrating with it, we can reconsider approach in this PR.\r\n\r\nI’m still planning to answer on the mailing list the exposed shortcoming by some reviewers of thinking of mempool policy rules design only in term of your local node, and why it matters for lightning / second-layers.",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28220#issuecomment-1737721323",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28220"
    },
    {
      "event": "closed",
      "id": 10489807118,
      "node_id": "CE_lADOABII585thtNTzwAAAAJxPcEO",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10489807118",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-27T16:27:31Z"
    },
    {
      "event": "locked",
      "id": 14422418913,
      "node_id": "LOE_lADOABII585thtNTzwAAAANbpKXh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14422418913",
      "actor": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-26T20:47:37Z"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1314229829",
      "pull_request_review_id": 1608498335,
      "id": 1314229829,
      "node_id": "PRRC_kwDOABII585OVY5F",
      "diff_hunk": "@@ -0,0 +1,83 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <policy/libstandardness.h>\n+\n+#include <chainparams.h>\n+#include <common/args.h>\n+#include <common/shared_lib_utils.h>\n+#include <node/blockstorage.h>\n+#include <node/kernel_notifications.h>\n+#include <policy/fees.h>\n+#include <policy/fees_args.h>\n+#include <timedata.h>\n+#include <validation.h>\n+\n+namespace {\n+\n+inline int set_result(libstandardness_result* ret, libstandardness_result sret)\n+{\n+    if (ret)\n+        *ret = sret;\n+    return 0;\n+}\n+\n+} // namespace\n+\n+int libstandard_verify_transaction(const unsigned char *txTo, unsigned int txToLen, libstandardness_result* result)\n+{\n+    try {\n+        TxInputStream stream(PROTOCOL_VERSION, txTo, txToLen);\n+        CTransaction tx(deserialize, stream);\n+\n+        const auto args = ArgsManager{};\n+        //TODO: pass the chain type as a library argument\n+        const auto chainParams = CreateChainParams(args, ChainType::MAIN);\n+\n+        // We initialize block manager options for the dummy chainstate.\n+        node::BlockManager::Options blockman_opts {\n+            .chainparams = *chainParams,\n+            .blocks_dir = args.GetBlocksDirPath(),\n+        };\n+\n+        // We initialize mempool options and mempool for the dummy chainstate.\n+        const auto fee_estimator = std::make_unique<CBlockPolicyEstimator>(FeeestPath(args));\n+        //TODO: give an adequate value for internal mempool consistency check\n+        CTxMemPool::Options mempool_opts {\n+            .estimator = fee_estimator.get(),\n+            .check_ratio = 0,\n+        };\n+\n+        const auto dummy_mempool = std::make_unique<CTxMemPool>(mempool_opts);\n+\n+        node::KernelNotifications notifications{};\n+        ChainstateManager::Options chainman_opts{\n+            .chainparams = *chainParams,\n+            .datadir = args.GetDataDirNet(), \n+            .adjusted_time_callback = GetAdjustedTime,\n+            .notifications = notifications,\n+        };\n+        const auto chainman = std::make_unique<ChainstateManager>(chainman_opts, blockman_opts);\n+\n+        const auto dummy_chainstate = std::make_unique<Chainstate>(dummy_mempool.get(), chainman->m_blockman, *chainman);\n+        //TODO: initialize dummy_chainstate with chain tip as seen by the caller and spent_UTXO",
      "path": "src/policy/libstandardness.cpp",
      "position": 64,
      "original_position": 64,
      "commit_id": "2774e082f4c57ed433d605d63f8a172f4be23d5b",
      "original_commit_id": "2774e082f4c57ed433d605d63f8a172f4be23d5b",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "How is that different from libbitcoinkernel? Seems odd to add a library for something that can be done with libbitcoinkernel?",
      "created_at": "2023-09-03T10:29:06Z",
      "updated_at": "2023-09-03T10:32:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28220#discussion_r1314229829",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1314229829"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28220"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 64,
      "original_line": 64,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1323455629",
      "pull_request_review_id": 1622951109,
      "id": 1323455629,
      "node_id": "PRRC_kwDOABII585O4lSN",
      "diff_hunk": "@@ -0,0 +1,83 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <policy/libstandardness.h>\n+\n+#include <chainparams.h>\n+#include <common/args.h>\n+#include <common/shared_lib_utils.h>\n+#include <node/blockstorage.h>\n+#include <node/kernel_notifications.h>\n+#include <policy/fees.h>\n+#include <policy/fees_args.h>\n+#include <timedata.h>\n+#include <validation.h>\n+\n+namespace {\n+\n+inline int set_result(libstandardness_result* ret, libstandardness_result sret)\n+{\n+    if (ret)\n+        *ret = sret;\n+    return 0;\n+}\n+\n+} // namespace\n+\n+int libstandard_verify_transaction(const unsigned char *txTo, unsigned int txToLen, libstandardness_result* result)\n+{\n+    try {\n+        TxInputStream stream(PROTOCOL_VERSION, txTo, txToLen);\n+        CTransaction tx(deserialize, stream);\n+\n+        const auto args = ArgsManager{};\n+        //TODO: pass the chain type as a library argument\n+        const auto chainParams = CreateChainParams(args, ChainType::MAIN);\n+\n+        // We initialize block manager options for the dummy chainstate.\n+        node::BlockManager::Options blockman_opts {\n+            .chainparams = *chainParams,\n+            .blocks_dir = args.GetBlocksDirPath(),\n+        };\n+\n+        // We initialize mempool options and mempool for the dummy chainstate.\n+        const auto fee_estimator = std::make_unique<CBlockPolicyEstimator>(FeeestPath(args));\n+        //TODO: give an adequate value for internal mempool consistency check\n+        CTxMemPool::Options mempool_opts {\n+            .estimator = fee_estimator.get(),\n+            .check_ratio = 0,\n+        };\n+\n+        const auto dummy_mempool = std::make_unique<CTxMemPool>(mempool_opts);\n+\n+        node::KernelNotifications notifications{};\n+        ChainstateManager::Options chainman_opts{\n+            .chainparams = *chainParams,\n+            .datadir = args.GetDataDirNet(), \n+            .adjusted_time_callback = GetAdjustedTime,\n+            .notifications = notifications,\n+        };\n+        const auto chainman = std::make_unique<ChainstateManager>(chainman_opts, blockman_opts);\n+\n+        const auto dummy_chainstate = std::make_unique<Chainstate>(dummy_mempool.get(), chainman->m_blockman, *chainman);\n+        //TODO: initialize dummy_chainstate with chain tip as seen by the caller and spent_UTXO",
      "path": "src/policy/libstandardness.cpp",
      "position": 64,
      "original_position": 64,
      "commit_id": "2774e082f4c57ed433d605d63f8a172f4be23d5b",
      "original_commit_id": "2774e082f4c57ed433d605d63f8a172f4be23d5b",
      "in_reply_to_id": 1314229829,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "As of `adc0921ea1`, I think this is very unclear what validation API is offered by libbitcoinkernel. There is no `doc/libbitcoinerkernel` so far and `bitcoin-chainstate.cpp` is just for demo-only purpose so far.\r\n\r\nVerifying the propagation of transactions for use-cases like Lightning and other contracting protocols require more API flexibility than “validation-at-the-tip” as feerates might have to be disregard (i.e they can be added latter with a CPFP) and absolute / relative timelocks ignored (user A funds safety is defined by the ability to broadcast a _valid_ transaction after X though strictly not before X to avoid jeopardizing user B funds safety e.g the htlc-claim / htlc-timeout flow).\r\n\r\nAdditionally, resources-constrained clients like LN mobile might still validate the propagation validity of their transactions while relying on SPV servers (bip157, electrum) for the chainstate, and therefore uncoupled validation libraries give them more flexibility.",
      "created_at": "2023-09-12T19:14:20Z",
      "updated_at": "2023-09-12T19:14:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28220#discussion_r1323455629",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1323455629"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28220"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 64,
      "original_line": 64,
      "side": "RIGHT"
    }
  ]
}