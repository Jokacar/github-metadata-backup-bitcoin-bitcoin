{
  "type": "issue",
  "issue": {
    "id": 2413404329,
    "node_id": "I_kwDOABII586P2aCp",
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30471",
    "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
    "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30471/labels%7B/name%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30471/comments",
    "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30471/events",
    "html_url": "https://github.com/bitcoin/bitcoin/issues/30471",
    "number": 30471,
    "state": "open",
    "state_reason": null,
    "title": "Feature Request: Broadcast Pool",
    "body": "### Please describe the feature you'd like to see added.\n\nThis is a feature request for a broadcast pool. A broadcast pool is a cache local to the node which contains transactions which have been initially broadcast from that node, either from a local wallet or via an RPC like `sendrawtransaction`. Broadcast transactions are retained in this cache until they are included in a block, or expire after the configured `mempoolexpiry` period. The transactions in the broadcast pool are included in views on the mempool, ensuring that transactions broadcast from the node are not lost to the user due to fee rate environment changes. Transaction invalidation and replacement is handled in the same way as in the mempool. Transactions in broadcast pool that are not present in the mempool will occasionally be rebroadcasted, making this existing functionality available to all transactions broadcasted through the node and not just those created by a local wallet.\r\n\r\nAs an additional feature, a future-dated timestamp can be added in metadata associated with a broadcast pool transaction. Should such a timestamp exist, the transaction is only added to the local mempool and broadcast to the network after that date, allowing the user to mitigate timing analysis and obtain greater privacy. Future-dated transactions are also included in views on the mempool, but are marked as `unbroadcast: true` in mempool RPC responses, and are similarly subject to removal via normal transaction invalidation and replacement rules.\n\n### Is your feature related to a problem, if so please describe it.\n\nThe necessary resource limitations on the mempool lead to an unfortunate consequence for wallet developers and users. Because the mempool does not distinguish between transactions broadcast by the user, and all other transactions, broadcasted transactions can be 'lost' to the user due to external fee rate environment changes. These 'lost' transactions are then not available in a wallet interface for view or replacement by fee - they simply (and often unexpectedly) disappear. Further, they may mysteriously reappear, having not been dropped from a larger mempool as typically configured by a miner. This is a poor user experience, and leads users to consider out-of-band solutions, or to increase the size of their local mempool which is resource inefficient and counterproductive to the network as a whole. It is reasonable to assume that a user's broadcasted transactions carry much more economic value to them than most other transactions, and justify protection through some degree of additional resource allocation. This feature request seeks to realise that rationale, providing a better user experience consistent with the health of the network.\r\n\r\nWith respect to privacy, timing analysis is unfortunately a simple and convincing approach to link otherwise unconnected transactions. For example, a common use case is to transfer the funds in one wallet to another, perhaps for security reasons. In order to avoid linking the funds in disparate UTXOs, the user must not only send them one by one from the old wallet to the new, but do so with random (and lengthy) time intervals between each send. Failure to do so will result in a much higher chance of funds being linked onchain simply by the transactions being included in the same or adjacent blocks. Most bitcoin nodes are run as continuously online servers, and therefore are ideal candidates to handle this otherwise onerous task. \r\n\n\n### Describe the solution you'd like\n\nThe broadcast pool is a local cache of usually small but configurable maximum size. A default maximum value of 300 kB is proposed. Similarly to the mempool, the cache is persisted on shutdown and restored on startup. Transactions in the broadcast pool are subject to almost all of the same rules as those in the mempool, except that they are not removed due to mempool size limitations.\r\n\r\nTransactions in the broadcast pool not present in the mempool are occasionally rebroadcast. Optionally, a future-dated timestamp can be specified when broadcasting a transaction. In this case, the transaction is added to the broadcast pool but not to the local mempool or broadcast to the network until after that date has passed. If the node is restarted after the timestamp on a future-dated transaction, the transaction will be immediately broadcast. All transactions in the broadcast pool are included in views on the mempool, and in that sense the broadcast pool can be viewed as an extension of the mempool where different eviction rules apply. Future-dated broadcast transactions are not included in block templates.\r\n\r\nIf the broadcast pool is full and the broadcast is not future-dated, the broadcast will proceed as it does currently but with a warning returned to the user. A future-dated broadcast to a full broadcast pool will fail.\n\n### Describe any alternatives you've considered\n\nIt is possible to try to solve the evicted transaction retention problem on the application layer within a wallet application. Practically however, this is far from ideal. Client wallets are generally opened and closed at indeterminate times, leading to a state conflict with the connected node that must be resolved. Light client protocols are generally not optimized for this use case, leading to significant complexity and performance degradation. Further, consensus logic such as that used for transaction replacement by fee must be replicated in each wallet application. \r\n\r\nWith respect to the timing analysis problem, setting a future-dated broadcast will encourage the user to leave their wallet application open, which is in conflict to the ideal of cold storage. Further, the environment for mobile wallets is not well suited to this long running task.\r\n\r\nIn summary, addressing these problems in a wallet application leads to poor separation of concerns.\r\n\n\n### Please leave any additional context\n\nA short list of related issues from some popular Bitcoin wallets:\r\n\r\n- https://github.com/sparrowwallet/sparrow/issues/847\r\n- https://github.com/sparrowwallet/sparrow/issues/1391\r\n- https://github.com/sparrowwallet/sparrow/issues/1421\r\n- https://github.com/spesmilo/electrum/issues/3595\r\n- https://github.com/BlueWallet/BlueWallet/issues/2753",
    "user": {
      "login": "craigraw",
      "id": 862166,
      "node_id": "MDQ6VXNlcjg2MjE2Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/862166?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/craigraw",
      "html_url": "https://github.com/craigraw",
      "followers_url": "https://api.github.com/users/craigraw/followers",
      "following_url": "https://api.github.com/users/craigraw/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/craigraw/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/craigraw/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/craigraw/subscriptions",
      "organizations_url": "https://api.github.com/users/craigraw/orgs",
      "repos_url": "https://api.github.com/users/craigraw/repos",
      "events_url": "https://api.github.com/users/craigraw/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/craigraw/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 64583,
        "node_id": "MDU6TGFiZWw2NDU4Mw==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Feature",
        "name": "Feature",
        "color": "7cf575",
        "default": false
      }
    ],
    "assignees": [],
    "author_association": "NONE",
    "locked": false,
    "comments": 5,
    "created_at": "2024-07-17T11:49:31Z",
    "updated_at": "2024-07-18T10:41:46Z"
  },
  "events": [
    {
      "event": "labeled",
      "id": 13535470670,
      "node_id": "LE_lADOABII586P2aCpzwAAAAMmxuRO",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13535470670",
      "actor": {
        "login": "craigraw",
        "id": 862166,
        "node_id": "MDQ6VXNlcjg2MjE2Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/862166?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/craigraw",
        "html_url": "https://github.com/craigraw",
        "followers_url": "https://api.github.com/users/craigraw/followers",
        "following_url": "https://api.github.com/users/craigraw/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/craigraw/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/craigraw/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/craigraw/subscriptions",
        "organizations_url": "https://api.github.com/users/craigraw/orgs",
        "repos_url": "https://api.github.com/users/craigraw/repos",
        "events_url": "https://api.github.com/users/craigraw/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/craigraw/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-17T11:49:32Z",
      "label": {
        "name": "Feature",
        "color": "7cf575"
      }
    },
    {
      "event": "commented",
      "id": 2233185138,
      "node_id": "IC_kwDOABII586FG7Ny",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2233185138",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-17T12:18:37Z",
      "updated_at": "2024-07-17T12:18:37Z",
      "author_association": "MEMBER",
      "body": "> making this existing functionality available to all transactions broadcasted through the node and not just those created by a local wallet.\r\n\r\nWould it not be possible to implement this by creating a wallet called `broadcast_pool` and then write simple wrapper functions to implement the broadcast pool features?\r\n\r\n> Future-dated transactions are also included in views on the mempool, but are marked as unbroadcast: true in mempool RPC responses\r\n\r\nI don't think it is possible to include something in the mempool and hide the fact that it is included from remote peers. This is a recurring topic. See e.g. https://github.com/bitcoin/bitcoin/pull/27509#issuecomment-1653599387\r\n\r\n\r\n\r\n> broadcasted transactions can be 'lost' to the user due to external fee rate environment changes. These 'lost' transactions are then not available in a wallet interface for view or replacement by fee - they simply (and often unexpectedly) disappear.\r\n\r\nIf you really care about putting the transaction in the mempool, you can use `prioritisetransaction`. However, that comes with the corresponding downsides as well. (Other, higher-fee transactions may be discarded; privacy leaks; ...).\r\n\r\n\r\nGenerally, my recommendation would be to implement this feature in the wallet: See https://github.com/bitcoin/bitcoin/issues/11887.\r\n\r\nAfter it has been implemented in the wallet, it can likely be ported to another slimmer module, if users think the wallet is too heavy to use for this task.",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/30471#issuecomment-2233185138",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30471"
    },
    {
      "event": "commented",
      "id": 2235889412,
      "node_id": "IC_kwDOABII586FRPcE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2235889412",
      "actor": {
        "login": "craigraw",
        "id": 862166,
        "node_id": "MDQ6VXNlcjg2MjE2Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/862166?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/craigraw",
        "html_url": "https://github.com/craigraw",
        "followers_url": "https://api.github.com/users/craigraw/followers",
        "following_url": "https://api.github.com/users/craigraw/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/craigraw/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/craigraw/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/craigraw/subscriptions",
        "organizations_url": "https://api.github.com/users/craigraw/orgs",
        "repos_url": "https://api.github.com/users/craigraw/repos",
        "events_url": "https://api.github.com/users/craigraw/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/craigraw/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-18T08:07:55Z",
      "updated_at": "2024-07-18T08:07:55Z",
      "author_association": "NONE",
      "body": "> Would it not be possible to implement this by creating a wallet called broadcast_pool and then write simple wrapper functions to implement the broadcast pool features?\r\n\r\nAll of the wallets linked in the issues above (and of course many others) use the Electrum server protocol, and in general rely on Electrum server implementations that do not require or use the wallet functionality. Even if they were to do so, I cannot see how it is practical to broadcast arbitrary transactions via the wallet RPCs.\r\n\r\n> I don't think it is possible to include something in the mempool and hide the fact that it is included from remote peers. This is a recurring topic.\r\n\r\nAn alternative would be to have a broadcast pool RPC. The minimum requirement is that future-dated transactions be retrievable via RPC, so that they can be included in transactions associated with a wallet.\r\n\r\n> If you really care about putting the transaction in the mempool, you can use prioritisetransaction.\r\n\r\nMy understanding from reading the original PR is that this affects inclusion of transactions into a proposed block, and not retention in the mempool. As you suggest though, changing the contents of the mempool for this purpose is not ideal.\r\n\r\n> Generally, my recommendation would be to implement this feature in the wallet\r\n\r\nUnfortunately, I don't think that would address this use case in a practical manner.",
      "user": {
        "login": "craigraw",
        "id": 862166,
        "node_id": "MDQ6VXNlcjg2MjE2Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/862166?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/craigraw",
        "html_url": "https://github.com/craigraw",
        "followers_url": "https://api.github.com/users/craigraw/followers",
        "following_url": "https://api.github.com/users/craigraw/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/craigraw/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/craigraw/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/craigraw/subscriptions",
        "organizations_url": "https://api.github.com/users/craigraw/orgs",
        "repos_url": "https://api.github.com/users/craigraw/repos",
        "events_url": "https://api.github.com/users/craigraw/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/craigraw/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/30471#issuecomment-2235889412",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30471"
    },
    {
      "event": "commented",
      "id": 2236001712,
      "node_id": "IC_kwDOABII586FRq2w",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2236001712",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-18T09:04:25Z",
      "updated_at": "2024-07-18T09:04:25Z",
      "author_association": "MEMBER",
      "body": "> > If you really care about putting the transaction in the mempool, you can use prioritisetransaction.\r\n> \r\n> My understanding from reading the original PR is that this affects inclusion of transactions into a proposed block, and not retention in the mempool. As you suggest though, changing the contents of the mempool for this purpose is not ideal.\r\n\r\nWhile the RPC is placed in the \"mining\" section, it also affects the mempool size trimming calculation. But yeah, using the RPC here may not be ideal.\r\n\r\n\r\n> > I don't think it is possible to include something in the mempool and hide the fact that it is included from remote peers. This is a recurring topic.\r\n> An alternative would be to have a broadcast pool RPC. The minimum requirement is that future-dated transactions be retrievable via RPC, so that they can be included in transactions associated with a wallet.\r\n\r\nIf all you need is just a way to get back a byte blob by asking for its hash, and the byte blobs are sent to `sendrawtranscation` after some time, it would be trivial to implement. However, if you also want to build transaction graphs and do replacements on them, it will be non-trivial. Maybe if you limit yourself to only TRUC v3 transactions, it could be easier to implement, but I haven't checked this. I guess it could help if you specified why you need the transactions to be \"included in views on the mempool\". Do you need the views to determine which transactions are \"active\", for calculating the wallet balance and seeing which coins are spendable in the view?\r\n\r\n\r\n> > Generally, my recommendation would be to implement this feature in the wallet\r\n> \r\n> Unfortunately, I don't think that would address this use case in a practical manner.\r\n\r\nI meant that the general nature of this problem (and its general solution) is sufficiently similar (if not identical), so that having a solution for one is close to having a solution for the other. \r\n",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/30471#issuecomment-2236001712",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30471"
    },
    {
      "event": "commented",
      "id": 2236090225,
      "node_id": "IC_kwDOABII586FSAdx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2236090225",
      "actor": {
        "login": "craigraw",
        "id": 862166,
        "node_id": "MDQ6VXNlcjg2MjE2Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/862166?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/craigraw",
        "html_url": "https://github.com/craigraw",
        "followers_url": "https://api.github.com/users/craigraw/followers",
        "following_url": "https://api.github.com/users/craigraw/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/craigraw/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/craigraw/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/craigraw/subscriptions",
        "organizations_url": "https://api.github.com/users/craigraw/orgs",
        "repos_url": "https://api.github.com/users/craigraw/repos",
        "events_url": "https://api.github.com/users/craigraw/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/craigraw/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-18T09:48:58Z",
      "updated_at": "2024-07-18T09:48:58Z",
      "author_association": "NONE",
      "body": "> Do you need the views to determine which transactions are \"active\", for calculating the wallet balance and seeing which coins are spendable in the view?\r\n\r\nYes - the wallet would consider any UTXOs included in these transactions as spent, and any UTXOs they create would be spendable. Of course there would need to be consideration in a wallet UI to avoid creating a situation where non-existent UTXOs are spent in a broadcasted transaction (which would simply fail on broadcast as it does now). \r\n\r\n> However, if you also want to build transaction graphs and do replacements on them, it will be non-trivial.\r\n\r\nTo clear, future-dated broadcasts are an additional (although powerful) feature request - I added it here because it appeared to fit within the framework of retaining locally broadcast transactions. It could also be built higher up the stack (for example in Electrum servers), since transactions that are restricted to the local environment may more simply be removed in the event of any conflict, without considering specific consensus rules. This is not true for broadcasted transactions, so I would consider that the more critical part of this issue.",
      "user": {
        "login": "craigraw",
        "id": 862166,
        "node_id": "MDQ6VXNlcjg2MjE2Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/862166?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/craigraw",
        "html_url": "https://github.com/craigraw",
        "followers_url": "https://api.github.com/users/craigraw/followers",
        "following_url": "https://api.github.com/users/craigraw/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/craigraw/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/craigraw/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/craigraw/subscriptions",
        "organizations_url": "https://api.github.com/users/craigraw/orgs",
        "repos_url": "https://api.github.com/users/craigraw/repos",
        "events_url": "https://api.github.com/users/craigraw/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/craigraw/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/30471#issuecomment-2236090225",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30471"
    },
    {
      "event": "commented",
      "id": 2236188801,
      "node_id": "IC_kwDOABII586FSYiB",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2236188801",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-18T10:41:44Z",
      "updated_at": "2024-07-18T10:41:44Z",
      "author_association": "MEMBER",
      "body": "> Yes - the wallet would consider any UTXOs included in these transactions as spent, and any UTXOs they create would be spendable. Of course there would need to be consideration in a wallet UI to avoid creating a situation where non-existent UTXOs are spent in a broadcasted transaction (which would simply fail on broadcast as it does now).\r\n\r\nI wonder if the feature helps users in that case. If a set of transactions isn't in \"the mempool\" (the one the wallet is connected to) right now, it will probably not be confirmed any time soon. So indicating to the user that the transactions are fine (and spendable) may be causing more issues than it solves. As a user, I'd probably expect to be notified that a transaction isn't in \"the connected mempool\" and be offered some kind of optional fee-bump (or rebroadcast button, if the transaction hit mempool-expiry).\r\n\r\nObviously, if the fee bump then happens through a child transaction, the transactions will have to be submitted as a package for relay. (Not sure if electrum supports this)\r\n\r\n\r\n\r\n\r\n\r\n> To clear, future-dated broadcasts are an additional (although powerful) feature request - I added it here because it appeared to fit within the framework of retaining locally broadcast transactions.\r\n\r\nLooks like the retaining local transactions issue was fixed in   https://github.com/spesmilo/electrum/issues/3595#issuecomment-363535872 , so it seems possible to implement the future-dated feature there as well?\r\n\r\n\r\n> since transactions that are restricted to the local environment may more simply be removed in the event of any conflict, without considering specific consensus rules. This is not true for broadcasted transactions, so I would consider that the more critical part of this issue.\r\n\r\nI assume when you say \"consensus\" you mean \"policy\". If you want to avoid implementing all the policy code in the local wallet app, you can rely on the `testmempoolaccept`   to try \"mempool-extensions\". However, I don't think there is a way to avoid in the local wallet app the concept of knowing the topology of unconfirmed transactions (and their unspent outputs). I am not sure if it is really easier to keep a remote mempool view of the user's current wallet, rather than letting the user modify the \"view\" locally (transaction replacements, or transaction chains), and then testing their modification via `testmempoolaccept` or a direct submit to the mempool+broadcast.",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/30471#issuecomment-2236188801",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30471"
    }
  ]
}