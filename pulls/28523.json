{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28523",
    "id": 1527476981,
    "node_id": "PR_kwDOABII585bC3L1",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/28523",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/28523.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/28523.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28523",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28523/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28523/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28523/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/4307c8c90b5deb282ffa1b8f899f7638b1a9c989",
    "number": 28523,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "rpc: add getaddrmaninfo verbose to list addrman table entries",
    "user": {
      "login": "0xB10C",
      "id": 19157360,
      "node_id": "MDQ6VXNlcjE5MTU3MzYw",
      "avatar_url": "https://avatars.githubusercontent.com/u/19157360?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/0xB10C",
      "html_url": "https://github.com/0xB10C",
      "followers_url": "https://api.github.com/users/0xB10C/followers",
      "following_url": "https://api.github.com/users/0xB10C/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/0xB10C/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/0xB10C/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/0xB10C/subscriptions",
      "organizations_url": "https://api.github.com/users/0xB10C/orgs",
      "repos_url": "https://api.github.com/users/0xB10C/repos",
      "events_url": "https://api.github.com/users/0xB10C/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/0xB10C/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This extends the hidden/test-only `getaddrmaninfo` (#27511) with a verbose flag. If set, the RPC returns the contents of the addrman new and tried tables in addition to per-network counts. Addrman table contents can be used in tests and during development. \r\n\r\n```\r\nResult (for verbose = true):\r\n{                           (json object) json object with network type, new_table and tried_table as keys\r\n  ...,                      The same output as verbose = false\r\n  \"table\" : [               (json array) list of addresses in a address manager table ( new_table, tried_table )\r\n    {                       (json object) an address manager table entry\r\n      \"address\" : \"str\",    (string) the address\r\n      \"services\" : n,       (numeric) the services the node might support\r\n      \"bucket\" : n,         (numeric) the address manager bucket the address is placed in\r\n      \"position\" : n,       (numeric) the bucket position the address is placed in\r\n      \"source\" : \"str\"      (string) the address that relayed the address to us\r\n    },\r\n    ...\r\n  ],\r\n  ...\r\n}\r\n```\r\n\r\nThe first commit also reduces the white-spaces to something that clang-format likes and can be reviewed with --ignore-all-space.   ",
    "labels": [
      {
        "id": 98279177,
        "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
        "name": "RPC/REST/ZMQ",
        "color": "0052cc",
        "default": false
      }
    ],
    "created_at": "2023-09-23T17:48:13Z",
    "updated_at": "2023-09-28T13:47:42Z",
    "mergeable": true,
    "mergeable_state": "blocked",
    "merge_commit_sha": "b5c0b59cf7c46d2bad7ef530c99bdb8039774e3a",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "0xB10C:2023-09-verbose-getaddrmaninfo",
      "ref": "2023-09-verbose-getaddrmaninfo",
      "sha": "4307c8c90b5deb282ffa1b8f899f7638b1a9c989",
      "user": {
        "login": "0xB10C",
        "id": 19157360,
        "node_id": "MDQ6VXNlcjE5MTU3MzYw",
        "avatar_url": "https://avatars.githubusercontent.com/u/19157360?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/0xB10C",
        "html_url": "https://github.com/0xB10C",
        "followers_url": "https://api.github.com/users/0xB10C/followers",
        "following_url": "https://api.github.com/users/0xB10C/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/0xB10C/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/0xB10C/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/0xB10C/subscriptions",
        "organizations_url": "https://api.github.com/users/0xB10C/orgs",
        "repos_url": "https://api.github.com/users/0xB10C/repos",
        "events_url": "https://api.github.com/users/0xB10C/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/0xB10C/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 184896538,
        "node_id": "MDEwOlJlcG9zaXRvcnkxODQ4OTY1Mzg=",
        "name": "bitcoin",
        "full_name": "0xB10C/bitcoin",
        "owner": {
          "login": "0xB10C",
          "id": 19157360,
          "node_id": "MDQ6VXNlcjE5MTU3MzYw",
          "avatar_url": "https://avatars.githubusercontent.com/u/19157360?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/0xB10C",
          "html_url": "https://github.com/0xB10C",
          "followers_url": "https://api.github.com/users/0xB10C/followers",
          "following_url": "https://api.github.com/users/0xB10C/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/0xB10C/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/0xB10C/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/0xB10C/subscriptions",
          "organizations_url": "https://api.github.com/users/0xB10C/orgs",
          "repos_url": "https://api.github.com/users/0xB10C/repos",
          "events_url": "https://api.github.com/users/0xB10C/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/0xB10C/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/0xB10C/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/0xB10C/bitcoin",
        "archive_url": "https://api.github.com/repos/0xB10C/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/0xB10C/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/0xB10C/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/0xB10C/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/0xB10C/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/0xB10C/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/0xB10C/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/0xB10C/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/0xB10C/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/0xB10C/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/0xB10C/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/0xB10C/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/0xB10C/bitcoin/events",
        "forks_url": "https://api.github.com/repos/0xB10C/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/0xB10C/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/0xB10C/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/0xB10C/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/0xB10C/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/0xB10C/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/0xB10C/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/0xB10C/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/0xB10C/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/0xB10C/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/0xB10C/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/0xB10C/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/0xB10C/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/0xB10C/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/0xB10C/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/0xB10C/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:0xB10C/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/0xB10C/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/0xB10C/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/0xB10C/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/0xB10C/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/0xB10C/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/0xB10C/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/0xB10C/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/0xB10C/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/0xB10C/bitcoin/hooks",
        "svn_url": "https://github.com/0xB10C/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 0,
        "stargazers_count": 1,
        "watchers_count": 1,
        "size": 227722,
        "default_branch": "master",
        "open_issues_count": 1,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-09-27T17:15:05Z",
        "created_at": "2019-05-04T13:11:05Z",
        "updated_at": "2022-08-30T07:36:49Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "c9f288244b8d183e09a917025922b99e3368ef78",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 35769,
        "stargazers_count": 71505,
        "watchers_count": 71505,
        "size": 240226,
        "default_branch": "master",
        "open_issues_count": 642,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-09-28T13:37:47Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-09-28T13:24:48Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28523"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 218,
    "deletions": 43,
    "changed_files": 6,
    "commits": 2,
    "review_comments": 17,
    "comments": 4
  },
  "events": [
    {
      "event": "commented",
      "id": 1732374516,
      "node_id": "IC_kwDOABII585nQe_0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1732374516",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-23T17:48:15Z",
      "updated_at": "2023-09-28T02:52:03Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| Concept ACK | [amitiuttarwar](https://github.com/bitcoin/bitcoin/pull/28523#issuecomment-1732390179), [ajtowns](https://github.com/bitcoin/bitcoin/pull/28523#pullrequestreview-1647790432) |\n| Stale ACK | [brunoerg](https://github.com/bitcoin/bitcoin/pull/28523#pullrequestreview-1644458046) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28523#issuecomment-1732374516",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28523"
    },
    {
      "event": "labeled",
      "id": 10453724785,
      "node_id": "LE_lADOABII585x14OhzwAAAAJvFy5x",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10453724785",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-23T17:48:17Z",
      "label": {
        "name": "RPC/REST/ZMQ",
        "color": "0052cc"
      }
    },
    {
      "event": "commented",
      "id": 1732390179,
      "node_id": "IC_kwDOABII585nQi0j",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1732390179",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-23T19:10:37Z",
      "updated_at": "2023-09-23T19:10:37Z",
      "author_association": "CONTRIBUTOR",
      "body": "concept ACK. I think it makes sense to expose more info about the addrman internals to allow for better observations & tooling ",
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28523#issuecomment-1732390179",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28523"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "0xB10C",
        "id": 19157360,
        "node_id": "MDQ6VXNlcjE5MTU3MzYw",
        "avatar_url": "https://avatars.githubusercontent.com/u/19157360?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/0xB10C",
        "html_url": "https://github.com/0xB10C",
        "followers_url": "https://api.github.com/users/0xB10C/followers",
        "following_url": "https://api.github.com/users/0xB10C/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/0xB10C/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/0xB10C/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/0xB10C/subscriptions",
        "organizations_url": "https://api.github.com/users/0xB10C/orgs",
        "repos_url": "https://api.github.com/users/0xB10C/repos",
        "events_url": "https://api.github.com/users/0xB10C/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/0xB10C/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-24T00:46:09Z",
      "updated_at": "2023-09-24T00:46:09Z",
      "source": {
        "issue": {
          "id": 1678790809,
          "node_id": "PR_kwDOABII585O4GIc",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27511",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27511/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27511/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27511/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/27511",
          "number": 27511,
          "state": "closed",
          "state_reason": null,
          "title": "rpc: Add test-only RPC getaddrmaninfo for new/tried table address count",
          "body": "implements https://github.com/bitcoin/bitcoin/issues/26907. split off from #26988 to keep RPC, CLI discussions separate.\r\n\r\nThis PR introduces a new RPC `getaddrmaninfo`which returns the count of addresses in the new/tried table of a node's addrman broken down by network type. This would be useful for users who want to see the distribution of addresses from different networks across new/tried table in the addrman.\r\n\r\n```jsx\r\n$ getaddrmaninfo\r\n\r\nResult:\r\n{                   (json object) json object with network type as keys\r\n  \"network\" : {     (json object) The network (ipv4, ipv6, onion, i2p, cjdns)\r\n    \"new\" : n,      (numeric) number of addresses in new table\r\n    \"tried\" : n,    (numeric) number of addresses in tried table\r\n    \"total\" : n     (numeric) total number of addresses in both new/tried tables from a network\r\n  },\r\n  ...\r\n}\r\n```\r\n\r\n### additional context from [original PR](https://github.com/bitcoin/bitcoin/pull/26988)\r\n\r\n1. network coverage tests were skipped because there’s a small chance that addresses from different networks could hash to the same bucket and cause count of different network addresses in the tests to fail. see https://github.com/bitcoin/bitcoin/pull/26988#discussion_r1137596851.\r\n2. #26988 uses this RPC in -addrinfo CLI. Slight preference for keeping the RPC hidden since this info will mostly be useful to only super users. see https://github.com/bitcoin/bitcoin/pull/26988#discussion_r1173964808.",
          "user": {
            "login": "stratospher",
            "id": 44024636,
            "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
            "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/stratospher",
            "html_url": "https://github.com/stratospher",
            "followers_url": "https://api.github.com/users/stratospher/followers",
            "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
            "organizations_url": "https://api.github.com/users/stratospher/orgs",
            "repos_url": "https://api.github.com/users/stratospher/repos",
            "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/stratospher/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 98279177,
              "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
              "name": "RPC/REST/ZMQ",
              "color": "0052cc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 24,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27511",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/27511",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/27511.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/27511.patch"
          },
          "closed_at": "2023-09-20T12:25:37Z",
          "created_at": "2023-04-21T16:28:48Z",
          "updated_at": "2023-09-28T12:00:12Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 1732532598,
      "node_id": "IC_kwDOABII585nRFl2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1732532598",
      "actor": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-24T09:43:15Z",
      "updated_at": "2023-09-24T09:43:15Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK",
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28523#issuecomment-1732532598",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28523"
    },
    {
      "event": "reviewed",
      "id": 1641031644,
      "node_id": "PRR_kwDOABII585h0Cfc",
      "url": null,
      "actor": null,
      "commit_id": "48dfc81e7e1e6ecdccb4a165a292bb4c8cf96fbd",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28523#pullrequestreview-1641031644",
      "submitted_at": "2023-09-24T10:06:29Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28523"
    },
    {
      "event": "reviewed",
      "id": 1641040890,
      "node_id": "PRR_kwDOABII585h0Ev6",
      "url": null,
      "actor": null,
      "commit_id": "48dfc81e7e1e6ecdccb4a165a292bb4c8cf96fbd",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28523#pullrequestreview-1641040890",
      "submitted_at": "2023-09-24T11:41:37Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28523"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 10461849132,
      "node_id": "HRFPE_lADOABII585x14OhzwAAAAJvkyYs",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10461849132",
      "actor": {
        "login": "0xB10C",
        "id": 19157360,
        "node_id": "MDQ6VXNlcjE5MTU3MzYw",
        "avatar_url": "https://avatars.githubusercontent.com/u/19157360?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/0xB10C",
        "html_url": "https://github.com/0xB10C",
        "followers_url": "https://api.github.com/users/0xB10C/followers",
        "following_url": "https://api.github.com/users/0xB10C/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/0xB10C/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/0xB10C/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/0xB10C/subscriptions",
        "organizations_url": "https://api.github.com/users/0xB10C/orgs",
        "repos_url": "https://api.github.com/users/0xB10C/repos",
        "events_url": "https://api.github.com/users/0xB10C/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/0xB10C/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-25T12:17:03Z"
    },
    {
      "event": "commented",
      "id": 1733608639,
      "node_id": "IC_kwDOABII585nVMS_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1733608639",
      "actor": {
        "login": "0xB10C",
        "id": 19157360,
        "node_id": "MDQ6VXNlcjE5MTU3MzYw",
        "avatar_url": "https://avatars.githubusercontent.com/u/19157360?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/0xB10C",
        "html_url": "https://github.com/0xB10C",
        "followers_url": "https://api.github.com/users/0xB10C/followers",
        "following_url": "https://api.github.com/users/0xB10C/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/0xB10C/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/0xB10C/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/0xB10C/subscriptions",
        "organizations_url": "https://api.github.com/users/0xB10C/orgs",
        "repos_url": "https://api.github.com/users/0xB10C/repos",
        "events_url": "https://api.github.com/users/0xB10C/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/0xB10C/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-25T12:24:46Z",
      "updated_at": "2023-09-25T12:24:46Z",
      "author_association": "CONTRIBUTOR",
      "body": "- addressed @brunoerg's review\r\n- included  https://github.com/bitcoin/bitcoin/pull/27511#discussion_r1335084087 as I'm touching the line anyway\r\n\r\n\r\nI've also been hacking on a tool that visualizes addrman tables from the getaddrmaninfo verbose output in the browser. A wip version is on https://0xb10c.github.io/addrman-observer ([github.com/0xB10C/addrman-observer](https://github.com/0xB10C/addrman-observer)). You can load dumps produced with `bitcoin-cli getaddrmaninfo true > getaddrmaninfo.json` (all processing happens locally).\r\n\r\n",
      "user": {
        "login": "0xB10C",
        "id": 19157360,
        "node_id": "MDQ6VXNlcjE5MTU3MzYw",
        "avatar_url": "https://avatars.githubusercontent.com/u/19157360?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/0xB10C",
        "html_url": "https://github.com/0xB10C",
        "followers_url": "https://api.github.com/users/0xB10C/followers",
        "following_url": "https://api.github.com/users/0xB10C/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/0xB10C/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/0xB10C/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/0xB10C/subscriptions",
        "organizations_url": "https://api.github.com/users/0xB10C/orgs",
        "repos_url": "https://api.github.com/users/0xB10C/repos",
        "events_url": "https://api.github.com/users/0xB10C/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/0xB10C/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28523#issuecomment-1733608639",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28523"
    },
    {
      "event": "mentioned",
      "id": 10461945642,
      "node_id": "MEE_lADOABII585x14OhzwAAAAJvlJ8q",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10461945642",
      "actor": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-25T12:24:46Z"
    },
    {
      "event": "subscribed",
      "id": 10461945658,
      "node_id": "SE_lADOABII585x14OhzwAAAAJvlJ86",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10461945658",
      "actor": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-25T12:24:46Z"
    },
    {
      "event": "reviewed",
      "id": 1644341592,
      "node_id": "PRR_kwDOABII585iAqlY",
      "url": null,
      "actor": null,
      "commit_id": "da44fd3e499ca53242332ef9cb2907ec31fce1e3",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28523#pullrequestreview-1644341592",
      "submitted_at": "2023-09-26T13:55:01Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28523"
    },
    {
      "event": "reviewed",
      "id": 1644458046,
      "node_id": "PRR_kwDOABII585iBHA-",
      "url": null,
      "actor": null,
      "commit_id": "da44fd3e499ca53242332ef9cb2907ec31fce1e3",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "light ACK da44fd3e499ca53242332ef9cb2907ec31fce1e3\r\n\r\nI intend to do more tests soon. Just tested it on a recent clearnet node and worked as expected.\r\nOutputs: https://gist.github.com/brunoerg/e3643337b4c16923ee0e0f7e66bec4d9",
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28523#pullrequestreview-1644458046",
      "submitted_at": "2023-09-26T14:37:07Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28523"
    },
    {
      "event": "reviewed",
      "id": 1644463026,
      "node_id": "PRR_kwDOABII585iBIOy",
      "url": null,
      "actor": null,
      "commit_id": "da44fd3e499ca53242332ef9cb2907ec31fce1e3",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28523#pullrequestreview-1644463026",
      "submitted_at": "2023-09-26T14:39:12Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28523"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 10490199730,
      "node_id": "HRFPE_lADOABII585x14OhzwAAAAJxQ76y",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10490199730",
      "actor": {
        "login": "0xB10C",
        "id": 19157360,
        "node_id": "MDQ6VXNlcjE5MTU3MzYw",
        "avatar_url": "https://avatars.githubusercontent.com/u/19157360?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/0xB10C",
        "html_url": "https://github.com/0xB10C",
        "followers_url": "https://api.github.com/users/0xB10C/followers",
        "following_url": "https://api.github.com/users/0xB10C/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/0xB10C/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/0xB10C/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/0xB10C/subscriptions",
        "organizations_url": "https://api.github.com/users/0xB10C/orgs",
        "repos_url": "https://api.github.com/users/0xB10C/repos",
        "events_url": "https://api.github.com/users/0xB10C/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/0xB10C/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-27T17:07:16Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDFmNWM4ZGM1YTA5NDI2MGM2MjQ4ZjUwMzg4ZGExNGJjMGJmNGZmNTE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1f5c8dc5a094260c6248f50388da14bc0bf4ff51",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/1f5c8dc5a094260c6248f50388da14bc0bf4ff51",
      "tree": {
        "sha": "d7dfa0aea662fb5ceb4d1a55932acca72b897a71",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d7dfa0aea662fb5ceb4d1a55932acca72b897a71"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree d7dfa0aea662fb5ceb4d1a55932acca72b897a71\nparent 719cb301e69fa15ceed61d6f0fbaebc5eb5c04a9\nauthor 0xb10c <b10c@b10c.me> 1695231465 +0200\ncommitter 0xb10c <b10c@b10c.me> 1695834887 +0200\n\nrpc: getaddrmaninfo verbose for addrman entries\n\nExposing address manager table entries in a hidden RPC allows to introspect\naddrman tables in tests and during development.\n\nAlso ran clang-format-diff.py on my diff to reduce the extra indentation\nfrom the getaddrmaninfo RPC implementation.\n\nCan be reviewed with --ignore-all-space\n\nIncludes a small follow-up from #27511 too which adds `all_networks` to\nthe list of possible \"network\" key's in the JSON response.\nSee https://github.com/bitcoin/bitcoin/pull/27511#discussion_r1335084087\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEDMuq/Xai7OLM0xQd4v/VsdiMqX0FAmUUYwcACgkQ4v/VsdiM\nqX26lQ//RIVXCXey+aHpPvo/tdZXB3XWN3BQf2AuBJNCPWYEXYU4oLaGFKma4Kov\nnsQal8rpC/71q6dCkPRsdtF+wSQMsUMss6CpdHGDC/qTyMELJ2IMpb3H23LzwM9n\n0j6Tpz0QzXP2/RPfHb7QLd/SC45qNZf2+iRHzFQKqFHW9KzM6bzYygzpmMoQPhb7\nsEhHtYxlgfdLGB5D6s/4A6QuJ3EyzU/8ohW5LHLrxOcQw6yasFVxjcFo8HGjoNC3\nHMyROBIv3Z558I8P8AOo12PAQ9KedyarXitz02jGNShY4OHN+bdsl179EOe3om2q\nIIqkPq0X5lvWMoVJbc8oVLJoghZZ2avjq40UKmXux877cGljpJrAMDU5CNCHRK4s\nqpRWmbuPqNkdcPD6w9UUGupvihkr0PCWaB6oFWvBKft1Y287eRrTyDYvYNFLXr5X\nzN9ayVyiwBmjvlmN4py6pb6flTugSVhywwknDDb4bBV07BwiEBE9thNeGGyWs7QR\nADHxCD4EiF8A7yRFKOfLOJFCAQBlg0gNExqZ+xTI5a2Ck8ic4JJuinVhRXUKDDTQ\nA+x/dA5cu5C3ALdgjSlUl+sFlvK6j2T5GO7IEZVvztRM4pyA82PaUr5ANH+Ntd4k\nfp2xUgwc5ahX90VhWezUS1yLV5egqkFPB/U65Xku/5iw/QrfAbs=\n=ftUK\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIPknMUItpkp7i9zP4pNrzQnbwLiOPfSKWo1RpAUrIkb7CP/wEAO2wYYRCwu5\n/SkzeR1/mMAI8CAT7q0zKJe2LTMAKGzDvdkyK47Ao6mhLz2tUpQAfUSTFwjxBGUU\nYwrwCIhPEscqsdPeAIPf4w0u+QyOKShodHRwczovL2Zpbm5leS5jYWxlbmRhci5l\ndGVybml0eXdhbGwuY29t//AQGrp++G4tpKtcjRtNnpRr5QjxBGUUYwnwCA6xgP/A\ny00rAIPf4w0u+QyOIyJodHRwczovL2J0Yy5jYWxlbmRhci5jYXRhbGxheHkuY29t\n//AQkyZ1hWrvuXQstDOBSFv2+gjxIJ+q87+Nmnj/6eaiKkMlROLVjMwbQ42O9Aez\naVI8tzlOCPEEZRRjCvAIbqnvKsPNYIMAg9/jDS75DI4uLWh0dHBzOi8vYWxpY2Uu\nYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZ/AQ0LwgQlwm/mT32kGJNmjt\negjxBGUUYwrwCC/D6yz3lQYzAIPf4w0u+QyOLCtodHRwczovL2JvYi5idGMuY2Fs\nZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/719cb301e69fa15ceed61d6f0fbaebc5eb5c04a9",
          "sha": "719cb301e69fa15ceed61d6f0fbaebc5eb5c04a9",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/719cb301e69fa15ceed61d6f0fbaebc5eb5c04a9"
        }
      ],
      "message": "rpc: getaddrmaninfo verbose for addrman entries\n\nExposing address manager table entries in a hidden RPC allows to introspect\naddrman tables in tests and during development.\n\nAlso ran clang-format-diff.py on my diff to reduce the extra indentation\nfrom the getaddrmaninfo RPC implementation.\n\nCan be reviewed with --ignore-all-space\n\nIncludes a small follow-up from #27511 too which adds `all_networks` to\nthe list of possible \"network\" key's in the JSON response.\nSee https://github.com/bitcoin/bitcoin/pull/27511#discussion_r1335084087",
      "committer": {
        "name": "0xb10c",
        "email": "b10c@b10c.me",
        "date": "2023-09-27T17:14:47Z"
      },
      "author": {
        "name": "0xb10c",
        "email": "b10c@b10c.me",
        "date": "2023-09-20T17:37:45Z"
      },
      "sha": "1f5c8dc5a094260c6248f50388da14bc0bf4ff51"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDQzMDdjOGM5MGI1ZGViMjgyZmZhMWI4Zjg5OWY3NjM4YjFhOWM5ODk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4307c8c90b5deb282ffa1b8f899f7638b1a9c989",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/4307c8c90b5deb282ffa1b8f899f7638b1a9c989",
      "tree": {
        "sha": "71f32e18817d14c98ef23a317c3018e2ea688a32",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/71f32e18817d14c98ef23a317c3018e2ea688a32"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 71f32e18817d14c98ef23a317c3018e2ea688a32\nparent 1f5c8dc5a094260c6248f50388da14bc0bf4ff51\nauthor 0xb10c <b10c@b10c.me> 1695480877 +0200\ncommitter 0xb10c <b10c@b10c.me> 1695834890 +0200\n\ntest: getaddrmaninfo verbose\n\nTest that the getaddrmaninfo with the verbose flag set returns the\naddresses in the new and tried tables. We can't check the buckets and\npositions as these are not deterministic (yet).\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEDMuq/Xai7OLM0xQd4v/VsdiMqX0FAmUUYwoACgkQ4v/VsdiM\nqX275xAAnjlfcPitMa6umHs08LObuJnZSDZOd2sDTmPhqats2rUqxN2jLLZL0LyS\nuCOS/qVFDjrR7zdOElQubgQ4iWkl8NDiJsSJPbtxP0UqIoZuWSfT4s5UT4WPiP56\nu3hXmlX38ZWgDFEHgi8Y00BQ993aLuHtAyvd3l7tBk3905vSu8UEHt/ljtWzIRyr\nfchRm/rFD6t3HHM6or6DVrX3mCfwBGIV9UKd5xbwPsEJjrTbO9lXka+9xszX4i3E\nUacvLqDxCO1UC6XgzAFML9IXdgAYdEOlJWqDSaYGmDXye9gSlKzvVOrtaDdoQHxn\nlL9/daJ6zTVC4ByijSLsNT73C/ukPqPGxRk/xrKjIqRLNN8hS8kcknHnl9cQID4m\nSDey+Lkv1/srdmDtQGm3fii6IQccGe8xC/T1JNtV7KWQavgl9oGPrlt0XNNbGLkz\n/sWJuWcQq81UXfueInETPeNRYdmf5Do1n0JjXER/M8GnLV8jmEQ1fJK51b8EjVWh\n/ZbQhyZHYE5bFM03aY5+5dVEmkogxsMbdfOlCH5A6+8PWp4Ww7NCe21cZuF30pZ2\nSNVaFqphtaESzNnAF9Y5o557n9BF40Flm2tbn/zzOGhaOCN4K1puDTU9bfM5w6vb\naT17OhLJbl8nDmlO10t74yaZXrIeEXPPSKgMbs0k3NntbnnqfPw=\n=eVA5\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIJ6IieogbH+BXRbiCO6sjFSbzwnutuZDQLJ+r+rDKgDICP/wECEFZGTqEAtI\n3FglaCVWGsEI8QRlFGMP8Aj1jOTbtoiEDwCD3+MNLvkMjiMiaHR0cHM6Ly9idGMu\nY2FsZW5kYXIuY2F0YWxsYXh5LmNvbf/wEJIONJjXB4ARZc6qYPpsdpEI8QRlFGMQ\n8Aj+ug6K/wgIkwCD3+MNLvkMjiwraHR0cHM6Ly9ib2IuYnRjLmNhbGVuZGFyLm9w\nZW50aW1lc3RhbXBzLm9yZ//wELT7SLYteQMNuFTvBEhEUQII8SBfugUdisFSpoYB\nrWq2dWsegsn9JEXr6drDd2SOLDe32QjwIMoBy+9f/btBlazU76poJgwWLuJ+PLUQ\n8f6LPzaf/kWyCPEEZRRjEPAI+J9jQGS3Zs8Ag9/jDS75DI4uLWh0dHBzOi8vYWxp\nY2UuYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZ/AQ6Aoz1RUSAWCDPv+9\n05TOyQjwIHfg0o0tIWNc4OocKK5MpjbcNDI/z38fvVhv3cBQLuaQCPAgIRGyEgnl\nekSj2zf1+zADi9DPOAsS2ipo9sFPukQrqWAI8QRlFGMQ8AioH7JR6qgbMQCD3+MN\nLvkMjikoaHR0cHM6Ly9maW5uZXkuY2FsZW5kYXIuZXRlcm5pdHl3YWxsLmNvbQ==\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1f5c8dc5a094260c6248f50388da14bc0bf4ff51",
          "sha": "1f5c8dc5a094260c6248f50388da14bc0bf4ff51",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/1f5c8dc5a094260c6248f50388da14bc0bf4ff51"
        }
      ],
      "message": "test: getaddrmaninfo verbose\n\nTest that the getaddrmaninfo with the verbose flag set returns the\naddresses in the new and tried tables. We can't check the buckets and\npositions as these are not deterministic (yet).",
      "committer": {
        "name": "0xb10c",
        "email": "b10c@b10c.me",
        "date": "2023-09-27T17:14:50Z"
      },
      "author": {
        "name": "0xb10c",
        "email": "b10c@b10c.me",
        "date": "2023-09-23T14:54:37Z"
      },
      "sha": "4307c8c90b5deb282ffa1b8f899f7638b1a9c989"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 10490269028,
      "node_id": "HRFPE_lADOABII585x14OhzwAAAAJxRM1k",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10490269028",
      "actor": {
        "login": "0xB10C",
        "id": 19157360,
        "node_id": "MDQ6VXNlcjE5MTU3MzYw",
        "avatar_url": "https://avatars.githubusercontent.com/u/19157360?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/0xB10C",
        "html_url": "https://github.com/0xB10C",
        "followers_url": "https://api.github.com/users/0xB10C/followers",
        "following_url": "https://api.github.com/users/0xB10C/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/0xB10C/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/0xB10C/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/0xB10C/subscriptions",
        "organizations_url": "https://api.github.com/users/0xB10C/orgs",
        "repos_url": "https://api.github.com/users/0xB10C/repos",
        "events_url": "https://api.github.com/users/0xB10C/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/0xB10C/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-27T17:15:05Z"
    },
    {
      "event": "reviewed",
      "id": 1647790432,
      "node_id": "PRR_kwDOABII585iN0lg",
      "url": null,
      "actor": null,
      "commit_id": "4307c8c90b5deb282ffa1b8f899f7638b1a9c989",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28523#pullrequestreview-1647790432",
      "submitted_at": "2023-09-28T02:52:00Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28523"
    },
    {
      "event": "reviewed",
      "id": 1648439139,
      "node_id": "PRR_kwDOABII585iQS9j",
      "url": null,
      "actor": null,
      "commit_id": "4307c8c90b5deb282ffa1b8f899f7638b1a9c989",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28523#pullrequestreview-1648439139",
      "submitted_at": "2023-09-28T10:39:25Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28523"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1335156026",
      "pull_request_review_id": 1641031644,
      "id": 1335156026,
      "node_id": "PRRC_kwDOABII585PlN06",
      "diff_hunk": "@@ -838,6 +838,25 @@ std::vector<CAddress> AddrManImpl::GetAddr_(size_t max_addresses, size_t max_pct\n     return addresses;\n }\n \n+std::vector<std::tuple<int, int, AddrInfo>> AddrManImpl::GetEntries_(bool from_tried) const\n+{\n+    AssertLockHeld(cs);\n+\n+    const int bucket_count = (from_tried) ? ADDRMAN_TRIED_BUCKET_COUNT : ADDRMAN_NEW_BUCKET_COUNT;",
      "path": "src/addrman.cpp",
      "position": null,
      "original_position": 8,
      "commit_id": "4307c8c90b5deb282ffa1b8f899f7638b1a9c989",
      "original_commit_id": "48dfc81e7e1e6ecdccb4a165a292bb4c8cf96fbd",
      "in_reply_to_id": null,
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit:\r\n```suggestion\r\n    const int bucket_count = from_tried ? ADDRMAN_TRIED_BUCKET_COUNT : ADDRMAN_NEW_BUCKET_COUNT;\r\n```",
      "created_at": "2023-09-24T10:06:28Z",
      "updated_at": "2023-09-24T10:06:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28523#discussion_r1335156026",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1335156026"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28523"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 845,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1335166553",
      "pull_request_review_id": 1641040890,
      "id": 1335166553,
      "node_id": "PRRC_kwDOABII585PlQZZ",
      "diff_hunk": "@@ -1014,52 +1015,105 @@ static RPCHelpMan sendmsgtopeer()\n     };\n }\n \n+UniValue AddrmanEntryToJSON(unsigned int bucket, unsigned int position, const AddrInfo& info)\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    ret.pushKV(\"address\", info.ToStringAddrPort());\n+    ret.pushKV(\"services\", (uint64_t)info.nServices);\n+    ret.pushKV(\"bucket\", bucket);\n+    ret.pushKV(\"position\", position);\n+    ret.pushKV(\"source\", info.source.ToStringAddr());\n+    return ret;\n+}\n+\n static RPCHelpMan getaddrmaninfo()\n {\n     return RPCHelpMan{\"getaddrmaninfo\",\n-                      \"\\nProvides information about the node's address manager by returning the number of \"\n-                      \"addresses in the `new` and `tried` tables and their sum for all networks.\\n\"\n-                      \"This RPC is for testing only.\\n\",\n-                      {},\n-                      RPCResult{\n-                              RPCResult::Type::OBJ_DYN, \"\", \"json object with network type as keys\",\n-                              {\n-                                      {RPCResult::Type::OBJ, \"network\", \"the network (\" + Join(GetNetworkNames(), \", \") + \")\",\n-                                       {\n-                                               {RPCResult::Type::NUM, \"new\", \"number of addresses in the new table, which represent potential peers the node has discovered but hasn't yet successfully connected to.\"},\n-                                               {RPCResult::Type::NUM, \"tried\", \"number of addresses in the tried table, which represent peers the node has successfully connected to in the past.\"},\n-                                               {RPCResult::Type::NUM, \"total\", \"total number of addresses in both new/tried tables\"},\n-                                       }},\n-                              }\n-                      },\n-                      RPCExamples{\n-                              HelpExampleCli(\"getaddrmaninfo\", \"\")\n-                              + HelpExampleRpc(\"getaddrmaninfo\", \"\")\n-                      },\n-                      [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n-                      {\n-                          NodeContext& node = EnsureAnyNodeContext(request.context);\n-                          if (!node.addrman) {\n-                              throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Address manager functionality missing or disabled\");\n-                          }\n-\n-                          UniValue ret(UniValue::VOBJ);\n-                          for (int n = 0; n < NET_MAX; ++n) {\n-                              enum Network network = static_cast<enum Network>(n);\n-                              if (network == NET_UNROUTABLE || network == NET_INTERNAL) continue;\n-                              UniValue obj(UniValue::VOBJ);\n-                              obj.pushKV(\"new\", node.addrman->Size(network, true));\n-                              obj.pushKV(\"tried\", node.addrman->Size(network, false));\n-                              obj.pushKV(\"total\", node.addrman->Size(network));\n-                              ret.pushKV(GetNetworkName(network), obj);\n-                          }\n-                          UniValue obj(UniValue::VOBJ);\n-                          obj.pushKV(\"new\", node.addrman->Size(std::nullopt, true));\n-                          obj.pushKV(\"tried\", node.addrman->Size(std::nullopt, false));\n-                          obj.pushKV(\"total\", node.addrman->Size());\n-                          ret.pushKV(\"all_networks\", obj);\n-                          return ret;\n-                      },\n+        \"\\nProvides information about the node's address manager by returning the number of \"\n+        \"addresses in the `new` and `tried` tables and their sum for all networks.\\n\"\n+        \"When setting the verbose flag, the address manager entries for the new \"\n+        \"and tried table are also returned.\\n\"\n+        \"This RPC is for testing only.\\n\",\n+        {\n+            {\"verbose\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"True for a list of address manager entries by table, false for address counts only\"},\n+        },\n+        {\n+            RPCResult{\"for verbose = false\", RPCResult::Type::OBJ_DYN, \"\", \"json object with network type as keys\",\n+                {\n+                    {RPCResult::Type::OBJ, \"network\", \"the network (\" + Join(GetNetworkNames(), \", \") + \")\", {\n+                        {RPCResult::Type::NUM, \"new\", \"number of addresses in the new table, which represent potential peers the node has discovered but hasn't yet successfully connected to.\"},\n+                        {RPCResult::Type::NUM, \"tried\", \"number of addresses in the tried table, which represent peers the node has successfully connected to in the past.\"},\n+                        {RPCResult::Type::NUM, \"total\", \"total number of addresses in both new/tried tables\"},\n+                    }},\n+                },\n+            },\n+            RPCResult{\"for verbose = true\", RPCResult::Type::OBJ_DYN, \"\", \"json object with network type, new_table and tried_table as keys\",\n+                {\n+                    {RPCResult::Type::ELISION, \"\", \"The same output as verbose = false\"},\n+                    {\n+                        RPCResult::Type::ARR, \"table\", \"list of addresses in a address manager table ( new_table, tried_table )\",",
      "path": "src/rpc/net.cpp",
      "position": null,
      "original_position": 91,
      "commit_id": "4307c8c90b5deb282ffa1b8f899f7638b1a9c989",
      "original_commit_id": "48dfc81e7e1e6ecdccb4a165a292bb4c8cf96fbd",
      "in_reply_to_id": null,
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n                        RPCResult::Type::ARR, \"table\", \"list of addresses in the address manager table ( new_table, tried_table )\",\r\n```",
      "created_at": "2023-09-24T11:41:37Z",
      "updated_at": "2023-09-24T11:41:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28523#discussion_r1335166553",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1335166553"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28523"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1054,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1337253953",
      "pull_request_review_id": 1644341592,
      "id": 1337253953,
      "node_id": "PRRC_kwDOABII585PtOBB",
      "diff_hunk": "@@ -1014,52 +1015,105 @@ static RPCHelpMan sendmsgtopeer()\n     };\n }\n \n+UniValue AddrmanEntryToJSON(unsigned int bucket, unsigned int position, const AddrInfo& info)\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    ret.pushKV(\"address\", info.ToStringAddrPort());\n+    ret.pushKV(\"services\", (uint64_t)info.nServices);\n+    ret.pushKV(\"bucket\", bucket);\n+    ret.pushKV(\"position\", position);\n+    ret.pushKV(\"source\", info.source.ToStringAddr());\n+    return ret;\n+}\n+\n static RPCHelpMan getaddrmaninfo()\n {\n     return RPCHelpMan{\"getaddrmaninfo\",\n-                      \"\\nProvides information about the node's address manager by returning the number of \"\n-                      \"addresses in the `new` and `tried` tables and their sum for all networks.\\n\"\n-                      \"This RPC is for testing only.\\n\",\n-                      {},\n-                      RPCResult{\n-                              RPCResult::Type::OBJ_DYN, \"\", \"json object with network type as keys\",\n-                              {\n-                                      {RPCResult::Type::OBJ, \"network\", \"the network (\" + Join(GetNetworkNames(), \", \") + \")\",\n-                                       {\n-                                               {RPCResult::Type::NUM, \"new\", \"number of addresses in the new table, which represent potential peers the node has discovered but hasn't yet successfully connected to.\"},\n-                                               {RPCResult::Type::NUM, \"tried\", \"number of addresses in the tried table, which represent peers the node has successfully connected to in the past.\"},\n-                                               {RPCResult::Type::NUM, \"total\", \"total number of addresses in both new/tried tables\"},\n-                                       }},\n-                              }\n-                      },\n-                      RPCExamples{\n-                              HelpExampleCli(\"getaddrmaninfo\", \"\")\n-                              + HelpExampleRpc(\"getaddrmaninfo\", \"\")\n-                      },\n-                      [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n-                      {\n-                          NodeContext& node = EnsureAnyNodeContext(request.context);\n-                          if (!node.addrman) {\n-                              throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Address manager functionality missing or disabled\");\n-                          }\n-\n-                          UniValue ret(UniValue::VOBJ);\n-                          for (int n = 0; n < NET_MAX; ++n) {\n-                              enum Network network = static_cast<enum Network>(n);\n-                              if (network == NET_UNROUTABLE || network == NET_INTERNAL) continue;\n-                              UniValue obj(UniValue::VOBJ);\n-                              obj.pushKV(\"new\", node.addrman->Size(network, true));\n-                              obj.pushKV(\"tried\", node.addrman->Size(network, false));\n-                              obj.pushKV(\"total\", node.addrman->Size(network));\n-                              ret.pushKV(GetNetworkName(network), obj);\n-                          }\n-                          UniValue obj(UniValue::VOBJ);\n-                          obj.pushKV(\"new\", node.addrman->Size(std::nullopt, true));\n-                          obj.pushKV(\"tried\", node.addrman->Size(std::nullopt, false));\n-                          obj.pushKV(\"total\", node.addrman->Size());\n-                          ret.pushKV(\"all_networks\", obj);\n-                          return ret;\n-                      },\n+        \"\\nProvides information about the node's address manager by returning the number of \"\n+        \"addresses in the `new` and `tried` tables and their sum for all networks.\\n\"\n+        \"When setting the verbose flag, the address manager entries for the new \"\n+        \"and tried table are also returned.\\n\"\n+        \"This RPC is for testing only.\\n\",\n+        {\n+            {\"verbose\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"True for a list of address manager entries by table, false for address counts only\"},\n+        },\n+        {\n+            RPCResult{\"for verbose = false\", RPCResult::Type::OBJ_DYN, \"\", \"json object with network type as keys\",\n+                {\n+                    {RPCResult::Type::OBJ, \"network\", \"the network (\" + Join(GetNetworkNames(), \", \") + \", all_networks )\", {\n+                        {RPCResult::Type::NUM, \"new\", \"number of addresses in the new table, which represent potential peers the node has discovered but hasn't yet successfully connected to.\"},\n+                        {RPCResult::Type::NUM, \"tried\", \"number of addresses in the tried table, which represent peers the node has successfully connected to in the past.\"},\n+                        {RPCResult::Type::NUM, \"total\", \"total number of addresses in both new/tried tables\"},\n+                    }},\n+                },\n+            },\n+            RPCResult{\"for verbose = true\", RPCResult::Type::OBJ_DYN, \"\", \"json object with network type, new_table and tried_table as keys\",\n+                {\n+                    {RPCResult::Type::ELISION, \"\", \"The same output as verbose = false\"},\n+                    {\n+                        RPCResult::Type::ARR, \"table\", \"list of addresses in the address manager table ( new_table, tried_table )\",\n+                        {\n+                            {RPCResult::Type::OBJ, \"\", \"an address manager table entry\", {\n+                                {RPCResult::Type::STR, \"address\", \"the address\"},\n+                                {RPCResult::Type::NUM, \"services\", \"the services the node might support\"},\n+                                {RPCResult::Type::NUM, \"bucket\", \"the address manager bucket the address is placed in\"},\n+                                {RPCResult::Type::NUM, \"position\", \"the bucket position the address is placed in\"},\n+                                {RPCResult::Type::STR, \"source\", \"the address that relayed the address to us\"},\n+                            }},\n+                        },\n+                    },\n+                },\n+            },\n+        },\n+        RPCExamples{\n+            HelpExampleCli(\"getaddrmaninfo\", \"\")\n+            + HelpExampleCli(\"getaddrmaninfo\", \"true\")\n+            + HelpExampleRpc(\"getaddrmaninfo\", \"\")},",
      "path": "src/rpc/net.cpp",
      "position": null,
      "original_position": 108,
      "commit_id": "4307c8c90b5deb282ffa1b8f899f7638b1a9c989",
      "original_commit_id": "da44fd3e499ca53242332ef9cb2907ec31fce1e3",
      "in_reply_to_id": null,
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 56adcf42805b3007b66396754a9e5dcd0968d027: We could add the 'verbose' example for the RPC.\r\n```suggestion\r\n            + HelpExampleRpc(\"getaddrmaninfo\", \"\")},\r\n            + HelpExampleRpc(\"getaddrmaninfo\", \"true\")}\r\n```",
      "created_at": "2023-09-26T13:55:01Z",
      "updated_at": "2023-09-26T13:55:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28523#discussion_r1337253953",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1337253953"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28523"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1071,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1337326653",
      "pull_request_review_id": 1644463026,
      "id": 1337326653,
      "node_id": "PRRC_kwDOABII585Ptfw9",
      "diff_hunk": "@@ -386,5 +391,70 @@ def test_getaddrmaninfo(self):\n             assert_equal(res[net][\"tried\"], 0)\n             assert_equal(res[net][\"total\"], 0)\n \n+        self.log.debug(\n+            \"Test that verbose keys are not in the default getaddrmaninfo\")\n+        assert \"new_table\" not in res\n+        assert \"tried_table\" not in res\n+\n+        self.log.info(\"Test getaddrmaninfo verbose = True\")\n+        res = node.getaddrmaninfo(verbose=True)\n+\n+        # we expect one addrman new table entry added in a previous test\n+        assert_equal(len(res[\"new_table\"]), 1)\n+        assert_equal(len(res[\"new_table\"]), res[\"all_networks\"][\"new\"])\n+        assert_equal(res[\"new_table\"][0][\"address\"], \"2.0.0.0:8333\")\n+        assert_equal(res[\"new_table\"][0][\"services\"], 9)\n+        assert_equal(res[\"new_table\"][0][\"source\"], \"2.0.0.0\")\n+        assert 0 <= res[\"new_table\"][0][\"bucket\"] < ADDRMAN_NEW_BUCKET_COUNT\n+        assert 0 <= res[\"new_table\"][0][\"position\"] < ADDRMAN_BUCKET_SIZE\n+\n+        # we expect one addrman tried table entry added in a previous test\n+        assert_equal(len(res[\"tried_table\"]), 1)\n+        assert_equal(len(res[\"tried_table\"]), res[\"all_networks\"][\"tried\"])\n+        assert_equal(res[\"tried_table\"][0][\"address\"], \"1.2.3.4:8333\")\n+        assert_equal(res[\"tried_table\"][0][\"services\"], 9)\n+        assert_equal(res[\"tried_table\"][0][\"source\"], \"1.2.3.4\")\n+        assert 0 <= res[\"tried_table\"][0][\"bucket\"] < ADDRMAN_TRIED_BUCKET_COUNT\n+        assert 0 <= res[\"tried_table\"][0][\"position\"] < ADDRMAN_BUCKET_SIZE\n+\n+        self.log.debug(\"Add one new address to each addrman table\")",
      "path": "test/functional/rpc_net.py",
      "position": 42,
      "original_position": 42,
      "commit_id": "4307c8c90b5deb282ffa1b8f899f7638b1a9c989",
      "original_commit_id": "da44fd3e499ca53242332ef9cb2907ec31fce1e3",
      "in_reply_to_id": null,
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In da44fd3e499ca53242332ef9cb2907ec31fce1e3: I think we could addresses from other networks (e.g tor) to test it as well.",
      "created_at": "2023-09-26T14:39:12Z",
      "updated_at": "2023-09-26T14:39:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28523#discussion_r1337326653",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1337326653"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28523"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 420,
      "original_line": 420,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1338934464",
      "pull_request_review_id": 1647192779,
      "id": 1338934464,
      "node_id": "PRRC_kwDOABII585PzoTA",
      "diff_hunk": "@@ -1014,52 +1015,105 @@ static RPCHelpMan sendmsgtopeer()\n     };\n }\n \n+UniValue AddrmanEntryToJSON(unsigned int bucket, unsigned int position, const AddrInfo& info)\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    ret.pushKV(\"address\", info.ToStringAddrPort());\n+    ret.pushKV(\"services\", (uint64_t)info.nServices);\n+    ret.pushKV(\"bucket\", bucket);\n+    ret.pushKV(\"position\", position);\n+    ret.pushKV(\"source\", info.source.ToStringAddr());\n+    return ret;\n+}\n+\n static RPCHelpMan getaddrmaninfo()\n {\n     return RPCHelpMan{\"getaddrmaninfo\",\n-                      \"\\nProvides information about the node's address manager by returning the number of \"\n-                      \"addresses in the `new` and `tried` tables and their sum for all networks.\\n\"\n-                      \"This RPC is for testing only.\\n\",\n-                      {},\n-                      RPCResult{\n-                              RPCResult::Type::OBJ_DYN, \"\", \"json object with network type as keys\",\n-                              {\n-                                      {RPCResult::Type::OBJ, \"network\", \"the network (\" + Join(GetNetworkNames(), \", \") + \")\",\n-                                       {\n-                                               {RPCResult::Type::NUM, \"new\", \"number of addresses in the new table, which represent potential peers the node has discovered but hasn't yet successfully connected to.\"},\n-                                               {RPCResult::Type::NUM, \"tried\", \"number of addresses in the tried table, which represent peers the node has successfully connected to in the past.\"},\n-                                               {RPCResult::Type::NUM, \"total\", \"total number of addresses in both new/tried tables\"},\n-                                       }},\n-                              }\n-                      },\n-                      RPCExamples{\n-                              HelpExampleCli(\"getaddrmaninfo\", \"\")\n-                              + HelpExampleRpc(\"getaddrmaninfo\", \"\")\n-                      },\n-                      [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n-                      {\n-                          NodeContext& node = EnsureAnyNodeContext(request.context);\n-                          if (!node.addrman) {\n-                              throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Address manager functionality missing or disabled\");\n-                          }\n-\n-                          UniValue ret(UniValue::VOBJ);\n-                          for (int n = 0; n < NET_MAX; ++n) {\n-                              enum Network network = static_cast<enum Network>(n);\n-                              if (network == NET_UNROUTABLE || network == NET_INTERNAL) continue;\n-                              UniValue obj(UniValue::VOBJ);\n-                              obj.pushKV(\"new\", node.addrman->Size(network, true));\n-                              obj.pushKV(\"tried\", node.addrman->Size(network, false));\n-                              obj.pushKV(\"total\", node.addrman->Size(network));\n-                              ret.pushKV(GetNetworkName(network), obj);\n-                          }\n-                          UniValue obj(UniValue::VOBJ);\n-                          obj.pushKV(\"new\", node.addrman->Size(std::nullopt, true));\n-                          obj.pushKV(\"tried\", node.addrman->Size(std::nullopt, false));\n-                          obj.pushKV(\"total\", node.addrman->Size());\n-                          ret.pushKV(\"all_networks\", obj);\n-                          return ret;\n-                      },\n+        \"\\nProvides information about the node's address manager by returning the number of \"\n+        \"addresses in the `new` and `tried` tables and their sum for all networks.\\n\"\n+        \"When setting the verbose flag, the address manager entries for the new \"\n+        \"and tried table are also returned.\\n\"\n+        \"This RPC is for testing only.\\n\",\n+        {\n+            {\"verbose\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"True for a list of address manager entries by table, false for address counts only\"},\n+        },\n+        {\n+            RPCResult{\"for verbose = false\", RPCResult::Type::OBJ_DYN, \"\", \"json object with network type as keys\",\n+                {\n+                    {RPCResult::Type::OBJ, \"network\", \"the network (\" + Join(GetNetworkNames(), \", \") + \", all_networks )\", {\n+                        {RPCResult::Type::NUM, \"new\", \"number of addresses in the new table, which represent potential peers the node has discovered but hasn't yet successfully connected to.\"},\n+                        {RPCResult::Type::NUM, \"tried\", \"number of addresses in the tried table, which represent peers the node has successfully connected to in the past.\"},\n+                        {RPCResult::Type::NUM, \"total\", \"total number of addresses in both new/tried tables\"},\n+                    }},\n+                },\n+            },\n+            RPCResult{\"for verbose = true\", RPCResult::Type::OBJ_DYN, \"\", \"json object with network type, new_table and tried_table as keys\",\n+                {\n+                    {RPCResult::Type::ELISION, \"\", \"The same output as verbose = false\"},\n+                    {\n+                        RPCResult::Type::ARR, \"table\", \"list of addresses in the address manager table ( new_table, tried_table )\",\n+                        {\n+                            {RPCResult::Type::OBJ, \"\", \"an address manager table entry\", {\n+                                {RPCResult::Type::STR, \"address\", \"the address\"},\n+                                {RPCResult::Type::NUM, \"services\", \"the services the node might support\"},\n+                                {RPCResult::Type::NUM, \"bucket\", \"the address manager bucket the address is placed in\"},\n+                                {RPCResult::Type::NUM, \"position\", \"the bucket position the address is placed in\"},\n+                                {RPCResult::Type::STR, \"source\", \"the address that relayed the address to us\"},\n+                            }},\n+                        },\n+                    },\n+                },\n+            },\n+        },\n+        RPCExamples{\n+            HelpExampleCli(\"getaddrmaninfo\", \"\")\n+            + HelpExampleCli(\"getaddrmaninfo\", \"true\")\n+            + HelpExampleRpc(\"getaddrmaninfo\", \"\")},",
      "path": "src/rpc/net.cpp",
      "position": null,
      "original_position": 108,
      "commit_id": "4307c8c90b5deb282ffa1b8f899f7638b1a9c989",
      "original_commit_id": "da44fd3e499ca53242332ef9cb2907ec31fce1e3",
      "in_reply_to_id": 1337253953,
      "user": {
        "login": "0xB10C",
        "id": 19157360,
        "node_id": "MDQ6VXNlcjE5MTU3MzYw",
        "avatar_url": "https://avatars.githubusercontent.com/u/19157360?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/0xB10C",
        "html_url": "https://github.com/0xB10C",
        "followers_url": "https://api.github.com/users/0xB10C/followers",
        "following_url": "https://api.github.com/users/0xB10C/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/0xB10C/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/0xB10C/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/0xB10C/subscriptions",
        "organizations_url": "https://api.github.com/users/0xB10C/orgs",
        "repos_url": "https://api.github.com/users/0xB10C/repos",
        "events_url": "https://api.github.com/users/0xB10C/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/0xB10C/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done!",
      "created_at": "2023-09-27T17:03:52Z",
      "updated_at": "2023-09-27T17:03:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28523#discussion_r1338934464",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1338934464"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28523"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1071,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1338939771",
      "pull_request_review_id": 1647199802,
      "id": 1338939771,
      "node_id": "PRRC_kwDOABII585Pzpl7",
      "diff_hunk": "@@ -386,5 +391,70 @@ def test_getaddrmaninfo(self):\n             assert_equal(res[net][\"tried\"], 0)\n             assert_equal(res[net][\"total\"], 0)\n \n+        self.log.debug(\n+            \"Test that verbose keys are not in the default getaddrmaninfo\")\n+        assert \"new_table\" not in res\n+        assert \"tried_table\" not in res\n+\n+        self.log.info(\"Test getaddrmaninfo verbose = True\")\n+        res = node.getaddrmaninfo(verbose=True)\n+\n+        # we expect one addrman new table entry added in a previous test\n+        assert_equal(len(res[\"new_table\"]), 1)\n+        assert_equal(len(res[\"new_table\"]), res[\"all_networks\"][\"new\"])\n+        assert_equal(res[\"new_table\"][0][\"address\"], \"2.0.0.0:8333\")\n+        assert_equal(res[\"new_table\"][0][\"services\"], 9)\n+        assert_equal(res[\"new_table\"][0][\"source\"], \"2.0.0.0\")\n+        assert 0 <= res[\"new_table\"][0][\"bucket\"] < ADDRMAN_NEW_BUCKET_COUNT\n+        assert 0 <= res[\"new_table\"][0][\"position\"] < ADDRMAN_BUCKET_SIZE\n+\n+        # we expect one addrman tried table entry added in a previous test\n+        assert_equal(len(res[\"tried_table\"]), 1)\n+        assert_equal(len(res[\"tried_table\"]), res[\"all_networks\"][\"tried\"])\n+        assert_equal(res[\"tried_table\"][0][\"address\"], \"1.2.3.4:8333\")\n+        assert_equal(res[\"tried_table\"][0][\"services\"], 9)\n+        assert_equal(res[\"tried_table\"][0][\"source\"], \"1.2.3.4\")\n+        assert 0 <= res[\"tried_table\"][0][\"bucket\"] < ADDRMAN_TRIED_BUCKET_COUNT\n+        assert 0 <= res[\"tried_table\"][0][\"position\"] < ADDRMAN_BUCKET_SIZE\n+\n+        self.log.debug(\"Add one new address to each addrman table\")",
      "path": "test/functional/rpc_net.py",
      "position": 42,
      "original_position": 42,
      "commit_id": "4307c8c90b5deb282ffa1b8f899f7638b1a9c989",
      "original_commit_id": "da44fd3e499ca53242332ef9cb2907ec31fce1e3",
      "in_reply_to_id": 1337326653,
      "user": {
        "login": "0xB10C",
        "id": 19157360,
        "node_id": "MDQ6VXNlcjE5MTU3MzYw",
        "avatar_url": "https://avatars.githubusercontent.com/u/19157360?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/0xB10C",
        "html_url": "https://github.com/0xB10C",
        "followers_url": "https://api.github.com/users/0xB10C/followers",
        "following_url": "https://api.github.com/users/0xB10C/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/0xB10C/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/0xB10C/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/0xB10C/subscriptions",
        "organizations_url": "https://api.github.com/users/0xB10C/orgs",
        "repos_url": "https://api.github.com/users/0xB10C/repos",
        "events_url": "https://api.github.com/users/0xB10C/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/0xB10C/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "will do if I re-touch the tests",
      "created_at": "2023-09-27T17:08:25Z",
      "updated_at": "2023-09-27T17:08:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28523#discussion_r1338939771",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1338939771"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28523"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 420,
      "original_line": 420,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1339430595",
      "pull_request_review_id": 1647790432,
      "id": 1339430595,
      "node_id": "PRRC_kwDOABII585P1hbD",
      "diff_hunk": "@@ -1014,52 +1015,107 @@ static RPCHelpMan sendmsgtopeer()\n     };\n }\n \n+UniValue AddrmanEntryToJSON(unsigned int bucket, unsigned int position, const AddrInfo& info)\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    ret.pushKV(\"address\", info.ToStringAddrPort());\n+    ret.pushKV(\"services\", (uint64_t)info.nServices);\n+    ret.pushKV(\"bucket\", bucket);\n+    ret.pushKV(\"position\", position);\n+    ret.pushKV(\"source\", info.source.ToStringAddr());\n+    return ret;\n+}\n+\n static RPCHelpMan getaddrmaninfo()\n {\n     return RPCHelpMan{\"getaddrmaninfo\",\n-                      \"\\nProvides information about the node's address manager by returning the number of \"\n-                      \"addresses in the `new` and `tried` tables and their sum for all networks.\\n\"\n-                      \"This RPC is for testing only.\\n\",\n-                      {},\n-                      RPCResult{\n-                              RPCResult::Type::OBJ_DYN, \"\", \"json object with network type as keys\",\n-                              {\n-                                      {RPCResult::Type::OBJ, \"network\", \"the network (\" + Join(GetNetworkNames(), \", \") + \")\",\n-                                       {\n-                                               {RPCResult::Type::NUM, \"new\", \"number of addresses in the new table, which represent potential peers the node has discovered but hasn't yet successfully connected to.\"},\n-                                               {RPCResult::Type::NUM, \"tried\", \"number of addresses in the tried table, which represent peers the node has successfully connected to in the past.\"},\n-                                               {RPCResult::Type::NUM, \"total\", \"total number of addresses in both new/tried tables\"},\n-                                       }},\n-                              }\n-                      },\n-                      RPCExamples{\n-                              HelpExampleCli(\"getaddrmaninfo\", \"\")\n-                              + HelpExampleRpc(\"getaddrmaninfo\", \"\")\n-                      },\n-                      [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n-                      {\n-                          NodeContext& node = EnsureAnyNodeContext(request.context);\n-                          if (!node.addrman) {\n-                              throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Address manager functionality missing or disabled\");\n-                          }\n-\n-                          UniValue ret(UniValue::VOBJ);\n-                          for (int n = 0; n < NET_MAX; ++n) {\n-                              enum Network network = static_cast<enum Network>(n);\n-                              if (network == NET_UNROUTABLE || network == NET_INTERNAL) continue;\n-                              UniValue obj(UniValue::VOBJ);\n-                              obj.pushKV(\"new\", node.addrman->Size(network, true));\n-                              obj.pushKV(\"tried\", node.addrman->Size(network, false));\n-                              obj.pushKV(\"total\", node.addrman->Size(network));\n-                              ret.pushKV(GetNetworkName(network), obj);\n-                          }\n-                          UniValue obj(UniValue::VOBJ);\n-                          obj.pushKV(\"new\", node.addrman->Size(std::nullopt, true));\n-                          obj.pushKV(\"tried\", node.addrman->Size(std::nullopt, false));\n-                          obj.pushKV(\"total\", node.addrman->Size());\n-                          ret.pushKV(\"all_networks\", obj);\n-                          return ret;\n-                      },\n+        \"\\nProvides information about the node's address manager by returning the number of \"\n+        \"addresses in the `new` and `tried` tables and their sum for all networks.\\n\"\n+        \"When setting the verbose flag, the address manager entries for the new \"\n+        \"and tried table are also returned.\\n\"\n+        \"This RPC is for testing only.\\n\",\n+        {\n+            {\"verbose\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"True for a list of address manager entries by table, false for address counts only\"},\n+        },\n+        {\n+            RPCResult{\"for verbose = false\", RPCResult::Type::OBJ_DYN, \"\", \"json object with network type as keys\",\n+                {\n+                    {RPCResult::Type::OBJ, \"network\", \"the network (\" + Join(GetNetworkNames(), \", \") + \", all_networks )\", {\n+                        {RPCResult::Type::NUM, \"new\", \"number of addresses in the new table, which represent potential peers the node has discovered but hasn't yet successfully connected to.\"},\n+                        {RPCResult::Type::NUM, \"tried\", \"number of addresses in the tried table, which represent peers the node has successfully connected to in the past.\"},\n+                        {RPCResult::Type::NUM, \"total\", \"total number of addresses in both new/tried tables\"},\n+                    }},\n+                },\n+            },\n+            RPCResult{\"for verbose = true\", RPCResult::Type::OBJ_DYN, \"\", \"json object with network type, new_table and tried_table as keys\",\n+                {\n+                    {RPCResult::Type::ELISION, \"\", \"The same output as verbose = false\"},\n+                    {\n+                        RPCResult::Type::ARR, \"table\", \"list of addresses in the address manager table ( new_table, tried_table )\",\n+                        {\n+                            {RPCResult::Type::OBJ, \"\", \"an address manager table entry\", {\n+                                {RPCResult::Type::STR, \"address\", \"the address\"},",
      "path": "src/rpc/net.cpp",
      "position": 94,
      "original_position": 94,
      "commit_id": "4307c8c90b5deb282ffa1b8f899f7638b1a9c989",
      "original_commit_id": "4307c8c90b5deb282ffa1b8f899f7638b1a9c989",
      "in_reply_to_id": null,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`getnodeaddresses` separates this into `address` and `port`; does it make sense to be different here?\r\n\r\n`getnodeaddresses` also includes the last seen time which seems like it might be useful?",
      "created_at": "2023-09-28T02:09:31Z",
      "updated_at": "2023-09-28T02:52:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28523#discussion_r1339430595",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1339430595"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28523"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1057,
      "original_line": 1057,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1339444441",
      "pull_request_review_id": 1647790432,
      "id": 1339444441,
      "node_id": "PRRC_kwDOABII585P1kzZ",
      "diff_hunk": "@@ -1014,52 +1015,107 @@ static RPCHelpMan sendmsgtopeer()\n     };\n }\n \n+UniValue AddrmanEntryToJSON(unsigned int bucket, unsigned int position, const AddrInfo& info)\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    ret.pushKV(\"address\", info.ToStringAddrPort());\n+    ret.pushKV(\"services\", (uint64_t)info.nServices);\n+    ret.pushKV(\"bucket\", bucket);\n+    ret.pushKV(\"position\", position);\n+    ret.pushKV(\"source\", info.source.ToStringAddr());\n+    return ret;\n+}\n+\n static RPCHelpMan getaddrmaninfo()\n {\n     return RPCHelpMan{\"getaddrmaninfo\",\n-                      \"\\nProvides information about the node's address manager by returning the number of \"\n-                      \"addresses in the `new` and `tried` tables and their sum for all networks.\\n\"\n-                      \"This RPC is for testing only.\\n\",\n-                      {},\n-                      RPCResult{\n-                              RPCResult::Type::OBJ_DYN, \"\", \"json object with network type as keys\",\n-                              {\n-                                      {RPCResult::Type::OBJ, \"network\", \"the network (\" + Join(GetNetworkNames(), \", \") + \")\",\n-                                       {\n-                                               {RPCResult::Type::NUM, \"new\", \"number of addresses in the new table, which represent potential peers the node has discovered but hasn't yet successfully connected to.\"},\n-                                               {RPCResult::Type::NUM, \"tried\", \"number of addresses in the tried table, which represent peers the node has successfully connected to in the past.\"},\n-                                               {RPCResult::Type::NUM, \"total\", \"total number of addresses in both new/tried tables\"},\n-                                       }},\n-                              }\n-                      },\n-                      RPCExamples{\n-                              HelpExampleCli(\"getaddrmaninfo\", \"\")\n-                              + HelpExampleRpc(\"getaddrmaninfo\", \"\")\n-                      },\n-                      [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n-                      {\n-                          NodeContext& node = EnsureAnyNodeContext(request.context);\n-                          if (!node.addrman) {\n-                              throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Address manager functionality missing or disabled\");\n-                          }\n-\n-                          UniValue ret(UniValue::VOBJ);\n-                          for (int n = 0; n < NET_MAX; ++n) {\n-                              enum Network network = static_cast<enum Network>(n);\n-                              if (network == NET_UNROUTABLE || network == NET_INTERNAL) continue;\n-                              UniValue obj(UniValue::VOBJ);\n-                              obj.pushKV(\"new\", node.addrman->Size(network, true));\n-                              obj.pushKV(\"tried\", node.addrman->Size(network, false));\n-                              obj.pushKV(\"total\", node.addrman->Size(network));\n-                              ret.pushKV(GetNetworkName(network), obj);\n-                          }\n-                          UniValue obj(UniValue::VOBJ);\n-                          obj.pushKV(\"new\", node.addrman->Size(std::nullopt, true));\n-                          obj.pushKV(\"tried\", node.addrman->Size(std::nullopt, false));\n-                          obj.pushKV(\"total\", node.addrman->Size());\n-                          ret.pushKV(\"all_networks\", obj);\n-                          return ret;\n-                      },\n+        \"\\nProvides information about the node's address manager by returning the number of \"\n+        \"addresses in the `new` and `tried` tables and their sum for all networks.\\n\"\n+        \"When setting the verbose flag, the address manager entries for the new \"\n+        \"and tried table are also returned.\\n\"\n+        \"This RPC is for testing only.\\n\",\n+        {\n+            {\"verbose\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"True for a list of address manager entries by table, false for address counts only\"},\n+        },\n+        {\n+            RPCResult{\"for verbose = false\", RPCResult::Type::OBJ_DYN, \"\", \"json object with network type as keys\",\n+                {\n+                    {RPCResult::Type::OBJ, \"network\", \"the network (\" + Join(GetNetworkNames(), \", \") + \", all_networks )\", {\n+                        {RPCResult::Type::NUM, \"new\", \"number of addresses in the new table, which represent potential peers the node has discovered but hasn't yet successfully connected to.\"},\n+                        {RPCResult::Type::NUM, \"tried\", \"number of addresses in the tried table, which represent peers the node has successfully connected to in the past.\"},\n+                        {RPCResult::Type::NUM, \"total\", \"total number of addresses in both new/tried tables\"},\n+                    }},\n+                },\n+            },\n+            RPCResult{\"for verbose = true\", RPCResult::Type::OBJ_DYN, \"\", \"json object with network type, new_table and tried_table as keys\",\n+                {\n+                    {RPCResult::Type::ELISION, \"\", \"The same output as verbose = false\"},\n+                    {\n+                        RPCResult::Type::ARR, \"table\", \"list of addresses in the address manager table ( new_table, tried_table )\",\n+                        {\n+                            {RPCResult::Type::OBJ, \"\", \"an address manager table entry\", {\n+                                {RPCResult::Type::STR, \"address\", \"the address\"},\n+                                {RPCResult::Type::NUM, \"services\", \"the services the node might support\"},\n+                                {RPCResult::Type::NUM, \"bucket\", \"the address manager bucket the address is placed in\"},\n+                                {RPCResult::Type::NUM, \"position\", \"the bucket position the address is placed in\"},",
      "path": "src/rpc/net.cpp",
      "position": 97,
      "original_position": 97,
      "commit_id": "4307c8c90b5deb282ffa1b8f899f7638b1a9c989",
      "original_commit_id": "4307c8c90b5deb282ffa1b8f899f7638b1a9c989",
      "in_reply_to_id": null,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Could substantially reduce the size of the json output (by about 20%) by changing this to:\r\n\r\n```json\r\n{\r\n  \"new_table\": {\r\n    \"0/2\": {\r\n      \"address\": \"89.78.111.197:8333\",\r\n      \"services\": 1037,\r\n      \"source\": \"34.126.67.135\"\r\n    },\r\n    \"0/5\": {\r\n      \"address\": \"13.228.211.83:8333\",\r\n      \"services\": 1033,\r\n      \"source\": \"34.126.67.135\"\r\n    }\r\n}\r\n```",
      "created_at": "2023-09-28T02:33:38Z",
      "updated_at": "2023-09-28T02:52:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28523#discussion_r1339444441",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1339444441"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28523"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1060,
      "original_line": 1060,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1339450561",
      "pull_request_review_id": 1647790432,
      "id": 1339450561,
      "node_id": "PRRC_kwDOABII585P1mTB",
      "diff_hunk": "@@ -1014,52 +1015,107 @@ static RPCHelpMan sendmsgtopeer()\n     };\n }\n \n+UniValue AddrmanEntryToJSON(unsigned int bucket, unsigned int position, const AddrInfo& info)\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    ret.pushKV(\"address\", info.ToStringAddrPort());\n+    ret.pushKV(\"services\", (uint64_t)info.nServices);\n+    ret.pushKV(\"bucket\", bucket);\n+    ret.pushKV(\"position\", position);\n+    ret.pushKV(\"source\", info.source.ToStringAddr());\n+    return ret;\n+}\n+\n static RPCHelpMan getaddrmaninfo()\n {\n     return RPCHelpMan{\"getaddrmaninfo\",\n-                      \"\\nProvides information about the node's address manager by returning the number of \"\n-                      \"addresses in the `new` and `tried` tables and their sum for all networks.\\n\"\n-                      \"This RPC is for testing only.\\n\",\n-                      {},\n-                      RPCResult{\n-                              RPCResult::Type::OBJ_DYN, \"\", \"json object with network type as keys\",\n-                              {\n-                                      {RPCResult::Type::OBJ, \"network\", \"the network (\" + Join(GetNetworkNames(), \", \") + \")\",\n-                                       {\n-                                               {RPCResult::Type::NUM, \"new\", \"number of addresses in the new table, which represent potential peers the node has discovered but hasn't yet successfully connected to.\"},\n-                                               {RPCResult::Type::NUM, \"tried\", \"number of addresses in the tried table, which represent peers the node has successfully connected to in the past.\"},\n-                                               {RPCResult::Type::NUM, \"total\", \"total number of addresses in both new/tried tables\"},\n-                                       }},\n-                              }\n-                      },\n-                      RPCExamples{\n-                              HelpExampleCli(\"getaddrmaninfo\", \"\")\n-                              + HelpExampleRpc(\"getaddrmaninfo\", \"\")\n-                      },\n-                      [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n-                      {\n-                          NodeContext& node = EnsureAnyNodeContext(request.context);\n-                          if (!node.addrman) {\n-                              throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Address manager functionality missing or disabled\");\n-                          }\n-\n-                          UniValue ret(UniValue::VOBJ);\n-                          for (int n = 0; n < NET_MAX; ++n) {\n-                              enum Network network = static_cast<enum Network>(n);\n-                              if (network == NET_UNROUTABLE || network == NET_INTERNAL) continue;\n-                              UniValue obj(UniValue::VOBJ);\n-                              obj.pushKV(\"new\", node.addrman->Size(network, true));\n-                              obj.pushKV(\"tried\", node.addrman->Size(network, false));\n-                              obj.pushKV(\"total\", node.addrman->Size(network));\n-                              ret.pushKV(GetNetworkName(network), obj);\n-                          }\n-                          UniValue obj(UniValue::VOBJ);\n-                          obj.pushKV(\"new\", node.addrman->Size(std::nullopt, true));\n-                          obj.pushKV(\"tried\", node.addrman->Size(std::nullopt, false));\n-                          obj.pushKV(\"total\", node.addrman->Size());\n-                          ret.pushKV(\"all_networks\", obj);\n-                          return ret;\n-                      },\n+        \"\\nProvides information about the node's address manager by returning the number of \"\n+        \"addresses in the `new` and `tried` tables and their sum for all networks.\\n\"\n+        \"When setting the verbose flag, the address manager entries for the new \"\n+        \"and tried table are also returned.\\n\"\n+        \"This RPC is for testing only.\\n\",\n+        {\n+            {\"verbose\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"True for a list of address manager entries by table, false for address counts only\"},\n+        },\n+        {\n+            RPCResult{\"for verbose = false\", RPCResult::Type::OBJ_DYN, \"\", \"json object with network type as keys\",\n+                {\n+                    {RPCResult::Type::OBJ, \"network\", \"the network (\" + Join(GetNetworkNames(), \", \") + \", all_networks )\", {\n+                        {RPCResult::Type::NUM, \"new\", \"number of addresses in the new table, which represent potential peers the node has discovered but hasn't yet successfully connected to.\"},\n+                        {RPCResult::Type::NUM, \"tried\", \"number of addresses in the tried table, which represent peers the node has successfully connected to in the past.\"},\n+                        {RPCResult::Type::NUM, \"total\", \"total number of addresses in both new/tried tables\"},\n+                    }},\n+                },\n+            },\n+            RPCResult{\"for verbose = true\", RPCResult::Type::OBJ_DYN, \"\", \"json object with network type, new_table and tried_table as keys\",\n+                {\n+                    {RPCResult::Type::ELISION, \"\", \"The same output as verbose = false\"},\n+                    {\n+                        RPCResult::Type::ARR, \"table\", \"list of addresses in the address manager table ( new_table, tried_table )\",\n+                        {\n+                            {RPCResult::Type::OBJ, \"\", \"an address manager table entry\", {\n+                                {RPCResult::Type::STR, \"address\", \"the address\"},\n+                                {RPCResult::Type::NUM, \"services\", \"the services the node might support\"},\n+                                {RPCResult::Type::NUM, \"bucket\", \"the address manager bucket the address is placed in\"},\n+                                {RPCResult::Type::NUM, \"position\", \"the bucket position the address is placed in\"},\n+                                {RPCResult::Type::STR, \"source\", \"the address that relayed the address to us\"},\n+                            }},\n+                        },\n+                    },\n+                },\n+            },\n+        },\n+        RPCExamples{\n+            HelpExampleCli(\"getaddrmaninfo\", \"\")\n+            + HelpExampleCli(\"getaddrmaninfo\", \"true\")\n+            + HelpExampleRpc(\"getaddrmaninfo\", \"\")\n+            + HelpExampleRpc(\"getaddrmaninfo\", \"true\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue {\n+            NodeContext& node = EnsureAnyNodeContext(request.context);\n+            if (!node.addrman) {\n+                throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Address manager functionality missing or disabled\");\n+            }\n+\n+            bool verbose = false;\n+            if (!request.params[0].isNull()) {\n+                verbose = request.params[0].get_bool();\n+            }",
      "path": "src/rpc/net.cpp",
      "position": 120,
      "original_position": 120,
      "commit_id": "4307c8c90b5deb282ffa1b8f899f7638b1a9c989",
      "original_commit_id": "4307c8c90b5deb282ffa1b8f899f7638b1a9c989",
      "in_reply_to_id": null,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Add\r\n\r\n```c++\r\nTMPL_INST(CheckRequiredOrDefault, bool, CHECK_NONFATAL(maybe_arg)->get_bool(););\r\n```\r\n\r\nin rpc/util.cpp and this becomes `const bool verbose = self.Arg<bool>(0);`  (see #28230)",
      "created_at": "2023-09-28T02:44:32Z",
      "updated_at": "2023-09-28T02:52:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28523#discussion_r1339450561",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1339450561"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28523"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1083,
      "original_line": 1083,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1339454178",
      "pull_request_review_id": 1647790432,
      "id": 1339454178,
      "node_id": "PRRC_kwDOABII585P1nLi",
      "diff_hunk": "@@ -1014,52 +1015,107 @@ static RPCHelpMan sendmsgtopeer()\n     };\n }\n \n+UniValue AddrmanEntryToJSON(unsigned int bucket, unsigned int position, const AddrInfo& info)\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    ret.pushKV(\"address\", info.ToStringAddrPort());\n+    ret.pushKV(\"services\", (uint64_t)info.nServices);\n+    ret.pushKV(\"bucket\", bucket);\n+    ret.pushKV(\"position\", position);\n+    ret.pushKV(\"source\", info.source.ToStringAddr());\n+    return ret;\n+}\n+\n static RPCHelpMan getaddrmaninfo()\n {\n     return RPCHelpMan{\"getaddrmaninfo\",\n-                      \"\\nProvides information about the node's address manager by returning the number of \"\n-                      \"addresses in the `new` and `tried` tables and their sum for all networks.\\n\"\n-                      \"This RPC is for testing only.\\n\",\n-                      {},\n-                      RPCResult{\n-                              RPCResult::Type::OBJ_DYN, \"\", \"json object with network type as keys\",\n-                              {\n-                                      {RPCResult::Type::OBJ, \"network\", \"the network (\" + Join(GetNetworkNames(), \", \") + \")\",\n-                                       {\n-                                               {RPCResult::Type::NUM, \"new\", \"number of addresses in the new table, which represent potential peers the node has discovered but hasn't yet successfully connected to.\"},\n-                                               {RPCResult::Type::NUM, \"tried\", \"number of addresses in the tried table, which represent peers the node has successfully connected to in the past.\"},\n-                                               {RPCResult::Type::NUM, \"total\", \"total number of addresses in both new/tried tables\"},\n-                                       }},\n-                              }\n-                      },\n-                      RPCExamples{\n-                              HelpExampleCli(\"getaddrmaninfo\", \"\")\n-                              + HelpExampleRpc(\"getaddrmaninfo\", \"\")\n-                      },\n-                      [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n-                      {\n-                          NodeContext& node = EnsureAnyNodeContext(request.context);\n-                          if (!node.addrman) {\n-                              throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Address manager functionality missing or disabled\");\n-                          }\n-\n-                          UniValue ret(UniValue::VOBJ);\n-                          for (int n = 0; n < NET_MAX; ++n) {\n-                              enum Network network = static_cast<enum Network>(n);\n-                              if (network == NET_UNROUTABLE || network == NET_INTERNAL) continue;\n-                              UniValue obj(UniValue::VOBJ);\n-                              obj.pushKV(\"new\", node.addrman->Size(network, true));\n-                              obj.pushKV(\"tried\", node.addrman->Size(network, false));\n-                              obj.pushKV(\"total\", node.addrman->Size(network));\n-                              ret.pushKV(GetNetworkName(network), obj);\n-                          }\n-                          UniValue obj(UniValue::VOBJ);\n-                          obj.pushKV(\"new\", node.addrman->Size(std::nullopt, true));\n-                          obj.pushKV(\"tried\", node.addrman->Size(std::nullopt, false));\n-                          obj.pushKV(\"total\", node.addrman->Size());\n-                          ret.pushKV(\"all_networks\", obj);\n-                          return ret;\n-                      },\n+        \"\\nProvides information about the node's address manager by returning the number of \"\n+        \"addresses in the `new` and `tried` tables and their sum for all networks.\\n\"\n+        \"When setting the verbose flag, the address manager entries for the new \"\n+        \"and tried table are also returned.\\n\"\n+        \"This RPC is for testing only.\\n\",\n+        {\n+            {\"verbose\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"True for a list of address manager entries by table, false for address counts only\"},\n+        },\n+        {\n+            RPCResult{\"for verbose = false\", RPCResult::Type::OBJ_DYN, \"\", \"json object with network type as keys\",\n+                {\n+                    {RPCResult::Type::OBJ, \"network\", \"the network (\" + Join(GetNetworkNames(), \", \") + \", all_networks )\", {\n+                        {RPCResult::Type::NUM, \"new\", \"number of addresses in the new table, which represent potential peers the node has discovered but hasn't yet successfully connected to.\"},\n+                        {RPCResult::Type::NUM, \"tried\", \"number of addresses in the tried table, which represent peers the node has successfully connected to in the past.\"},\n+                        {RPCResult::Type::NUM, \"total\", \"total number of addresses in both new/tried tables\"},\n+                    }},\n+                },\n+            },\n+            RPCResult{\"for verbose = true\", RPCResult::Type::OBJ_DYN, \"\", \"json object with network type, new_table and tried_table as keys\",\n+                {\n+                    {RPCResult::Type::ELISION, \"\", \"The same output as verbose = false\"},\n+                    {\n+                        RPCResult::Type::ARR, \"table\", \"list of addresses in the address manager table ( new_table, tried_table )\",\n+                        {\n+                            {RPCResult::Type::OBJ, \"\", \"an address manager table entry\", {\n+                                {RPCResult::Type::STR, \"address\", \"the address\"},\n+                                {RPCResult::Type::NUM, \"services\", \"the services the node might support\"},\n+                                {RPCResult::Type::NUM, \"bucket\", \"the address manager bucket the address is placed in\"},\n+                                {RPCResult::Type::NUM, \"position\", \"the bucket position the address is placed in\"},\n+                                {RPCResult::Type::STR, \"source\", \"the address that relayed the address to us\"},\n+                            }},\n+                        },\n+                    },\n+                },\n+            },\n+        },\n+        RPCExamples{\n+            HelpExampleCli(\"getaddrmaninfo\", \"\")\n+            + HelpExampleCli(\"getaddrmaninfo\", \"true\")\n+            + HelpExampleRpc(\"getaddrmaninfo\", \"\")\n+            + HelpExampleRpc(\"getaddrmaninfo\", \"true\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue {\n+            NodeContext& node = EnsureAnyNodeContext(request.context);\n+            if (!node.addrman) {\n+                throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Address manager functionality missing or disabled\");\n+            }\n+\n+            bool verbose = false;\n+            if (!request.params[0].isNull()) {\n+                verbose = request.params[0].get_bool();\n+            }\n+\n+            UniValue ret(UniValue::VOBJ);\n+            for (int n = 0; n < NET_MAX; ++n) {\n+                enum Network network = static_cast<enum Network>(n);\n+                if (network == NET_UNROUTABLE || network == NET_INTERNAL) continue;\n+                UniValue obj(UniValue::VOBJ);\n+                obj.pushKV(\"new\", node.addrman->Size(network, true));\n+                obj.pushKV(\"tried\", node.addrman->Size(network, false));\n+                obj.pushKV(\"total\", node.addrman->Size(network));\n+                ret.pushKV(GetNetworkName(network), obj);\n+            }\n+            UniValue obj(UniValue::VOBJ);\n+            obj.pushKV(\"new\", node.addrman->Size(std::nullopt, true));\n+            obj.pushKV(\"tried\", node.addrman->Size(std::nullopt, false));\n+            obj.pushKV(\"total\", node.addrman->Size());\n+            ret.pushKV(\"all_networks\", obj);\n+\n+            if (verbose) {",
      "path": "src/rpc/net.cpp",
      "position": 138,
      "original_position": 138,
      "commit_id": "4307c8c90b5deb282ffa1b8f899f7638b1a9c989",
      "original_commit_id": "4307c8c90b5deb282ffa1b8f899f7638b1a9c989",
      "in_reply_to_id": null,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "We have `getmempoolinfo` that gives statistics about the mempool and `getrawmempool` that gives the contents of the mempool; wouldn't it make more sense to mirror that arrangement and have two separate RPCs here as well?",
      "created_at": "2023-09-28T02:50:50Z",
      "updated_at": "2023-09-28T02:52:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28523#discussion_r1339454178",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1339454178"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28523"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1101,
      "original_line": 1101,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1339867604",
      "pull_request_review_id": 1648384145,
      "id": 1339867604,
      "node_id": "PRRC_kwDOABII585P3MHU",
      "diff_hunk": "@@ -1014,52 +1015,107 @@ static RPCHelpMan sendmsgtopeer()\n     };\n }\n \n+UniValue AddrmanEntryToJSON(unsigned int bucket, unsigned int position, const AddrInfo& info)\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    ret.pushKV(\"address\", info.ToStringAddrPort());\n+    ret.pushKV(\"services\", (uint64_t)info.nServices);\n+    ret.pushKV(\"bucket\", bucket);\n+    ret.pushKV(\"position\", position);\n+    ret.pushKV(\"source\", info.source.ToStringAddr());\n+    return ret;\n+}\n+\n static RPCHelpMan getaddrmaninfo()\n {\n     return RPCHelpMan{\"getaddrmaninfo\",\n-                      \"\\nProvides information about the node's address manager by returning the number of \"\n-                      \"addresses in the `new` and `tried` tables and their sum for all networks.\\n\"\n-                      \"This RPC is for testing only.\\n\",\n-                      {},\n-                      RPCResult{\n-                              RPCResult::Type::OBJ_DYN, \"\", \"json object with network type as keys\",\n-                              {\n-                                      {RPCResult::Type::OBJ, \"network\", \"the network (\" + Join(GetNetworkNames(), \", \") + \")\",\n-                                       {\n-                                               {RPCResult::Type::NUM, \"new\", \"number of addresses in the new table, which represent potential peers the node has discovered but hasn't yet successfully connected to.\"},\n-                                               {RPCResult::Type::NUM, \"tried\", \"number of addresses in the tried table, which represent peers the node has successfully connected to in the past.\"},\n-                                               {RPCResult::Type::NUM, \"total\", \"total number of addresses in both new/tried tables\"},\n-                                       }},\n-                              }\n-                      },\n-                      RPCExamples{\n-                              HelpExampleCli(\"getaddrmaninfo\", \"\")\n-                              + HelpExampleRpc(\"getaddrmaninfo\", \"\")\n-                      },\n-                      [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n-                      {\n-                          NodeContext& node = EnsureAnyNodeContext(request.context);\n-                          if (!node.addrman) {\n-                              throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Address manager functionality missing or disabled\");\n-                          }\n-\n-                          UniValue ret(UniValue::VOBJ);\n-                          for (int n = 0; n < NET_MAX; ++n) {\n-                              enum Network network = static_cast<enum Network>(n);\n-                              if (network == NET_UNROUTABLE || network == NET_INTERNAL) continue;\n-                              UniValue obj(UniValue::VOBJ);\n-                              obj.pushKV(\"new\", node.addrman->Size(network, true));\n-                              obj.pushKV(\"tried\", node.addrman->Size(network, false));\n-                              obj.pushKV(\"total\", node.addrman->Size(network));\n-                              ret.pushKV(GetNetworkName(network), obj);\n-                          }\n-                          UniValue obj(UniValue::VOBJ);\n-                          obj.pushKV(\"new\", node.addrman->Size(std::nullopt, true));\n-                          obj.pushKV(\"tried\", node.addrman->Size(std::nullopt, false));\n-                          obj.pushKV(\"total\", node.addrman->Size());\n-                          ret.pushKV(\"all_networks\", obj);\n-                          return ret;\n-                      },\n+        \"\\nProvides information about the node's address manager by returning the number of \"\n+        \"addresses in the `new` and `tried` tables and their sum for all networks.\\n\"\n+        \"When setting the verbose flag, the address manager entries for the new \"\n+        \"and tried table are also returned.\\n\"\n+        \"This RPC is for testing only.\\n\",\n+        {\n+            {\"verbose\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"True for a list of address manager entries by table, false for address counts only\"},\n+        },\n+        {\n+            RPCResult{\"for verbose = false\", RPCResult::Type::OBJ_DYN, \"\", \"json object with network type as keys\",\n+                {\n+                    {RPCResult::Type::OBJ, \"network\", \"the network (\" + Join(GetNetworkNames(), \", \") + \", all_networks )\", {\n+                        {RPCResult::Type::NUM, \"new\", \"number of addresses in the new table, which represent potential peers the node has discovered but hasn't yet successfully connected to.\"},\n+                        {RPCResult::Type::NUM, \"tried\", \"number of addresses in the tried table, which represent peers the node has successfully connected to in the past.\"},\n+                        {RPCResult::Type::NUM, \"total\", \"total number of addresses in both new/tried tables\"},\n+                    }},\n+                },\n+            },\n+            RPCResult{\"for verbose = true\", RPCResult::Type::OBJ_DYN, \"\", \"json object with network type, new_table and tried_table as keys\",\n+                {\n+                    {RPCResult::Type::ELISION, \"\", \"The same output as verbose = false\"},\n+                    {\n+                        RPCResult::Type::ARR, \"table\", \"list of addresses in the address manager table ( new_table, tried_table )\",\n+                        {\n+                            {RPCResult::Type::OBJ, \"\", \"an address manager table entry\", {\n+                                {RPCResult::Type::STR, \"address\", \"the address\"},\n+                                {RPCResult::Type::NUM, \"services\", \"the services the node might support\"},\n+                                {RPCResult::Type::NUM, \"bucket\", \"the address manager bucket the address is placed in\"},\n+                                {RPCResult::Type::NUM, \"position\", \"the bucket position the address is placed in\"},",
      "path": "src/rpc/net.cpp",
      "position": 97,
      "original_position": 97,
      "commit_id": "4307c8c90b5deb282ffa1b8f899f7638b1a9c989",
      "original_commit_id": "4307c8c90b5deb282ffa1b8f899f7638b1a9c989",
      "in_reply_to_id": 1339444441,
      "user": {
        "login": "0xB10C",
        "id": 19157360,
        "node_id": "MDQ6VXNlcjE5MTU3MzYw",
        "avatar_url": "https://avatars.githubusercontent.com/u/19157360?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/0xB10C",
        "html_url": "https://github.com/0xB10C",
        "followers_url": "https://api.github.com/users/0xB10C/followers",
        "following_url": "https://api.github.com/users/0xB10C/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/0xB10C/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/0xB10C/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/0xB10C/subscriptions",
        "organizations_url": "https://api.github.com/users/0xB10C/orgs",
        "repos_url": "https://api.github.com/users/0xB10C/repos",
        "events_url": "https://api.github.com/users/0xB10C/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/0xB10C/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'm not a fan of representing two integers as string in JSON key and having downstream figure out how to parse it. However, why not do\r\n\r\n```\r\n\"table\": {\r\n  bucket: {\r\n    position: {\r\n      \"address\": \"13.228.211.83:8333\",\r\n      \"services\": 1033,\r\n      \"source\": \"34.126.67.135\"\r\n    },\r\n  }\r\n}\r\n```\r\nwhere `bucket` and `position` are integer keys.\r\n\r\n ",
      "created_at": "2023-09-28T10:06:59Z",
      "updated_at": "2023-09-28T10:06:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28523#discussion_r1339867604",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1339867604"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28523"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1060,
      "original_line": 1060,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1339908447",
      "pull_request_review_id": 1648439139,
      "id": 1339908447,
      "node_id": "PRRC_kwDOABII585P3WFf",
      "diff_hunk": "@@ -1199,6 +1218,15 @@ std::vector<CAddress> AddrManImpl::GetAddr(size_t max_addresses, size_t max_pct,\n     return addresses;\n }\n \n+std::vector<std::tuple<int, int, AddrInfo>> AddrManImpl::GetEntries(bool from_tried) const",
      "path": "src/addrman.cpp",
      "position": 30,
      "original_position": 30,
      "commit_id": "4307c8c90b5deb282ffa1b8f899f7638b1a9c989",
      "original_commit_id": "4307c8c90b5deb282ffa1b8f899f7638b1a9c989",
      "in_reply_to_id": null,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think it'd be nice to have some sort of named struct instead of using `std::vector<std::tuple<int, int, AddrInfo>>` several times, including from the callers. Especially since having two `int` fields means it's easy for callers to mix up. \r\n\r\nI wonder if it could make sense to use the `AddressPosition` struct defined in `addrman.h`. It's not a perfect mapping, but it's currently only used in the tests, and it seems fine to add the additional info from `AddrInfo` to it to pass to the RPC. that could generally be cleaner, but might be overkill. \r\n\r\nAlternatively just the bucket & position could be pulled out into a small struct (similar to `NewTriedCount`), and that can be used in this tuple. ",
      "created_at": "2023-09-28T10:39:25Z",
      "updated_at": "2023-09-28T10:39:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28523#discussion_r1339908447",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1339908447"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28523"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1221,
      "original_line": 1221,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1340008020",
      "pull_request_review_id": 1648607970,
      "id": 1340008020,
      "node_id": "PRRC_kwDOABII585P3uZU",
      "diff_hunk": "@@ -1014,52 +1015,107 @@ static RPCHelpMan sendmsgtopeer()\n     };\n }\n \n+UniValue AddrmanEntryToJSON(unsigned int bucket, unsigned int position, const AddrInfo& info)\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    ret.pushKV(\"address\", info.ToStringAddrPort());\n+    ret.pushKV(\"services\", (uint64_t)info.nServices);\n+    ret.pushKV(\"bucket\", bucket);\n+    ret.pushKV(\"position\", position);\n+    ret.pushKV(\"source\", info.source.ToStringAddr());\n+    return ret;\n+}\n+\n static RPCHelpMan getaddrmaninfo()\n {\n     return RPCHelpMan{\"getaddrmaninfo\",\n-                      \"\\nProvides information about the node's address manager by returning the number of \"\n-                      \"addresses in the `new` and `tried` tables and their sum for all networks.\\n\"\n-                      \"This RPC is for testing only.\\n\",\n-                      {},\n-                      RPCResult{\n-                              RPCResult::Type::OBJ_DYN, \"\", \"json object with network type as keys\",\n-                              {\n-                                      {RPCResult::Type::OBJ, \"network\", \"the network (\" + Join(GetNetworkNames(), \", \") + \")\",\n-                                       {\n-                                               {RPCResult::Type::NUM, \"new\", \"number of addresses in the new table, which represent potential peers the node has discovered but hasn't yet successfully connected to.\"},\n-                                               {RPCResult::Type::NUM, \"tried\", \"number of addresses in the tried table, which represent peers the node has successfully connected to in the past.\"},\n-                                               {RPCResult::Type::NUM, \"total\", \"total number of addresses in both new/tried tables\"},\n-                                       }},\n-                              }\n-                      },\n-                      RPCExamples{\n-                              HelpExampleCli(\"getaddrmaninfo\", \"\")\n-                              + HelpExampleRpc(\"getaddrmaninfo\", \"\")\n-                      },\n-                      [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n-                      {\n-                          NodeContext& node = EnsureAnyNodeContext(request.context);\n-                          if (!node.addrman) {\n-                              throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Address manager functionality missing or disabled\");\n-                          }\n-\n-                          UniValue ret(UniValue::VOBJ);\n-                          for (int n = 0; n < NET_MAX; ++n) {\n-                              enum Network network = static_cast<enum Network>(n);\n-                              if (network == NET_UNROUTABLE || network == NET_INTERNAL) continue;\n-                              UniValue obj(UniValue::VOBJ);\n-                              obj.pushKV(\"new\", node.addrman->Size(network, true));\n-                              obj.pushKV(\"tried\", node.addrman->Size(network, false));\n-                              obj.pushKV(\"total\", node.addrman->Size(network));\n-                              ret.pushKV(GetNetworkName(network), obj);\n-                          }\n-                          UniValue obj(UniValue::VOBJ);\n-                          obj.pushKV(\"new\", node.addrman->Size(std::nullopt, true));\n-                          obj.pushKV(\"tried\", node.addrman->Size(std::nullopt, false));\n-                          obj.pushKV(\"total\", node.addrman->Size());\n-                          ret.pushKV(\"all_networks\", obj);\n-                          return ret;\n-                      },\n+        \"\\nProvides information about the node's address manager by returning the number of \"\n+        \"addresses in the `new` and `tried` tables and their sum for all networks.\\n\"\n+        \"When setting the verbose flag, the address manager entries for the new \"\n+        \"and tried table are also returned.\\n\"\n+        \"This RPC is for testing only.\\n\",\n+        {\n+            {\"verbose\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"True for a list of address manager entries by table, false for address counts only\"},\n+        },\n+        {\n+            RPCResult{\"for verbose = false\", RPCResult::Type::OBJ_DYN, \"\", \"json object with network type as keys\",\n+                {\n+                    {RPCResult::Type::OBJ, \"network\", \"the network (\" + Join(GetNetworkNames(), \", \") + \", all_networks )\", {\n+                        {RPCResult::Type::NUM, \"new\", \"number of addresses in the new table, which represent potential peers the node has discovered but hasn't yet successfully connected to.\"},\n+                        {RPCResult::Type::NUM, \"tried\", \"number of addresses in the tried table, which represent peers the node has successfully connected to in the past.\"},\n+                        {RPCResult::Type::NUM, \"total\", \"total number of addresses in both new/tried tables\"},\n+                    }},\n+                },\n+            },\n+            RPCResult{\"for verbose = true\", RPCResult::Type::OBJ_DYN, \"\", \"json object with network type, new_table and tried_table as keys\",\n+                {\n+                    {RPCResult::Type::ELISION, \"\", \"The same output as verbose = false\"},\n+                    {\n+                        RPCResult::Type::ARR, \"table\", \"list of addresses in the address manager table ( new_table, tried_table )\",\n+                        {\n+                            {RPCResult::Type::OBJ, \"\", \"an address manager table entry\", {\n+                                {RPCResult::Type::STR, \"address\", \"the address\"},\n+                                {RPCResult::Type::NUM, \"services\", \"the services the node might support\"},\n+                                {RPCResult::Type::NUM, \"bucket\", \"the address manager bucket the address is placed in\"},\n+                                {RPCResult::Type::NUM, \"position\", \"the bucket position the address is placed in\"},",
      "path": "src/rpc/net.cpp",
      "position": 97,
      "original_position": 97,
      "commit_id": "4307c8c90b5deb282ffa1b8f899f7638b1a9c989",
      "original_commit_id": "4307c8c90b5deb282ffa1b8f899f7638b1a9c989",
      "in_reply_to_id": 1339444441,
      "user": {
        "login": "0xB10C",
        "id": 19157360,
        "node_id": "MDQ6VXNlcjE5MTU3MzYw",
        "avatar_url": "https://avatars.githubusercontent.com/u/19157360?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/0xB10C",
        "html_url": "https://github.com/0xB10C",
        "followers_url": "https://api.github.com/users/0xB10C/followers",
        "following_url": "https://api.github.com/users/0xB10C/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/0xB10C/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/0xB10C/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/0xB10C/subscriptions",
        "organizations_url": "https://api.github.com/users/0xB10C/orgs",
        "repos_url": "https://api.github.com/users/0xB10C/repos",
        "events_url": "https://api.github.com/users/0xB10C/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/0xB10C/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "TIL UniValue doesn't support integer keys - only string keys. Still going with this as it's about a 15% size reduction with somewhat empty addrman tables. I assume even more space savings on a full addrman tables, as the `getaddrmaninfo verbose` output would contain more `bucket` keys.\r\n\r\n```\r\n$ ll getrawaddrman.json getaddrmaninfo_verbose.json -h\r\n-rw-r--r-- 1 user group 761K Sep 28 13:37 getrawaddrman.json\r\n-rw-r--r-- 1 user group 881K Sep 28 13:37 getaddrmaninfo_verbose.json\r\n```\r\n",
      "created_at": "2023-09-28T11:53:49Z",
      "updated_at": "2023-09-28T11:54:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28523#discussion_r1340008020",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1340008020"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28523"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1060,
      "original_line": 1060,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1340186430",
      "pull_request_review_id": 1648919768,
      "id": 1340186430,
      "node_id": "PRRC_kwDOABII585P4Z8-",
      "diff_hunk": "@@ -1014,52 +1015,107 @@ static RPCHelpMan sendmsgtopeer()\n     };\n }\n \n+UniValue AddrmanEntryToJSON(unsigned int bucket, unsigned int position, const AddrInfo& info)\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    ret.pushKV(\"address\", info.ToStringAddrPort());\n+    ret.pushKV(\"services\", (uint64_t)info.nServices);\n+    ret.pushKV(\"bucket\", bucket);\n+    ret.pushKV(\"position\", position);\n+    ret.pushKV(\"source\", info.source.ToStringAddr());\n+    return ret;\n+}\n+\n static RPCHelpMan getaddrmaninfo()\n {\n     return RPCHelpMan{\"getaddrmaninfo\",\n-                      \"\\nProvides information about the node's address manager by returning the number of \"\n-                      \"addresses in the `new` and `tried` tables and their sum for all networks.\\n\"\n-                      \"This RPC is for testing only.\\n\",\n-                      {},\n-                      RPCResult{\n-                              RPCResult::Type::OBJ_DYN, \"\", \"json object with network type as keys\",\n-                              {\n-                                      {RPCResult::Type::OBJ, \"network\", \"the network (\" + Join(GetNetworkNames(), \", \") + \")\",\n-                                       {\n-                                               {RPCResult::Type::NUM, \"new\", \"number of addresses in the new table, which represent potential peers the node has discovered but hasn't yet successfully connected to.\"},\n-                                               {RPCResult::Type::NUM, \"tried\", \"number of addresses in the tried table, which represent peers the node has successfully connected to in the past.\"},\n-                                               {RPCResult::Type::NUM, \"total\", \"total number of addresses in both new/tried tables\"},\n-                                       }},\n-                              }\n-                      },\n-                      RPCExamples{\n-                              HelpExampleCli(\"getaddrmaninfo\", \"\")\n-                              + HelpExampleRpc(\"getaddrmaninfo\", \"\")\n-                      },\n-                      [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n-                      {\n-                          NodeContext& node = EnsureAnyNodeContext(request.context);\n-                          if (!node.addrman) {\n-                              throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Address manager functionality missing or disabled\");\n-                          }\n-\n-                          UniValue ret(UniValue::VOBJ);\n-                          for (int n = 0; n < NET_MAX; ++n) {\n-                              enum Network network = static_cast<enum Network>(n);\n-                              if (network == NET_UNROUTABLE || network == NET_INTERNAL) continue;\n-                              UniValue obj(UniValue::VOBJ);\n-                              obj.pushKV(\"new\", node.addrman->Size(network, true));\n-                              obj.pushKV(\"tried\", node.addrman->Size(network, false));\n-                              obj.pushKV(\"total\", node.addrman->Size(network));\n-                              ret.pushKV(GetNetworkName(network), obj);\n-                          }\n-                          UniValue obj(UniValue::VOBJ);\n-                          obj.pushKV(\"new\", node.addrman->Size(std::nullopt, true));\n-                          obj.pushKV(\"tried\", node.addrman->Size(std::nullopt, false));\n-                          obj.pushKV(\"total\", node.addrman->Size());\n-                          ret.pushKV(\"all_networks\", obj);\n-                          return ret;\n-                      },\n+        \"\\nProvides information about the node's address manager by returning the number of \"\n+        \"addresses in the `new` and `tried` tables and their sum for all networks.\\n\"\n+        \"When setting the verbose flag, the address manager entries for the new \"\n+        \"and tried table are also returned.\\n\"\n+        \"This RPC is for testing only.\\n\",\n+        {\n+            {\"verbose\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"True for a list of address manager entries by table, false for address counts only\"},\n+        },\n+        {\n+            RPCResult{\"for verbose = false\", RPCResult::Type::OBJ_DYN, \"\", \"json object with network type as keys\",\n+                {\n+                    {RPCResult::Type::OBJ, \"network\", \"the network (\" + Join(GetNetworkNames(), \", \") + \", all_networks )\", {\n+                        {RPCResult::Type::NUM, \"new\", \"number of addresses in the new table, which represent potential peers the node has discovered but hasn't yet successfully connected to.\"},\n+                        {RPCResult::Type::NUM, \"tried\", \"number of addresses in the tried table, which represent peers the node has successfully connected to in the past.\"},\n+                        {RPCResult::Type::NUM, \"total\", \"total number of addresses in both new/tried tables\"},\n+                    }},\n+                },\n+            },\n+            RPCResult{\"for verbose = true\", RPCResult::Type::OBJ_DYN, \"\", \"json object with network type, new_table and tried_table as keys\",\n+                {\n+                    {RPCResult::Type::ELISION, \"\", \"The same output as verbose = false\"},\n+                    {\n+                        RPCResult::Type::ARR, \"table\", \"list of addresses in the address manager table ( new_table, tried_table )\",\n+                        {\n+                            {RPCResult::Type::OBJ, \"\", \"an address manager table entry\", {\n+                                {RPCResult::Type::STR, \"address\", \"the address\"},\n+                                {RPCResult::Type::NUM, \"services\", \"the services the node might support\"},\n+                                {RPCResult::Type::NUM, \"bucket\", \"the address manager bucket the address is placed in\"},\n+                                {RPCResult::Type::NUM, \"position\", \"the bucket position the address is placed in\"},",
      "path": "src/rpc/net.cpp",
      "position": 97,
      "original_position": 97,
      "commit_id": "4307c8c90b5deb282ffa1b8f899f7638b1a9c989",
      "original_commit_id": "4307c8c90b5deb282ffa1b8f899f7638b1a9c989",
      "in_reply_to_id": 1339444441,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "JSON in general  doesn't support integer keys.\r\n\r\nNot a strong opinion, but there's two advantages of `\"0/5\":` vs `\"0\": {\"5\":` -- one is that if you don't care about the bucket/position, you can just skip through the values directly (`x.values()` vs `sum(x2.values() for x2 in x.values())`), the other is that bucket+position are pretty internal arrangements; if we end up with a different layout in the future, we can just map that to a different string template (eg \"0/5/2\") and only the people who care about the internals have to even notice the change.",
      "created_at": "2023-09-28T13:47:42Z",
      "updated_at": "2023-09-28T13:47:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28523#discussion_r1340186430",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1340186430"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28523"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1060,
      "original_line": 1060,
      "side": "RIGHT"
    }
  ]
}