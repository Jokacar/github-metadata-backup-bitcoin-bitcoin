{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28245",
    "id": 1468490431,
    "node_id": "PR_kwDOABII585Xh2K_",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/28245",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/28245.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/28245.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28245",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28245/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28245/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28245/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/d82bb90a5b9dc1fd48b10514bdcd8f425aced256",
    "number": 28245,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "doc: use llvm-config for bitcoin-tidy example",
    "user": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "An LLVM installation will have `llvm-config` available to query for info. Ask it for the `--libdir`, and use that in our bitcoin-tidy example, rather than listing multiple different (potential) paths per distro/OS etc.",
    "labels": [
      {
        "id": 148216,
        "node_id": "MDU6TGFiZWwxNDgyMTY=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Docs",
        "name": "Docs",
        "color": "02d7e1",
        "default": false
      }
    ],
    "created_at": "2023-08-09T12:07:02Z",
    "updated_at": "2023-08-10T19:56:46Z",
    "mergeable": true,
    "mergeable_state": "blocked",
    "merge_commit_sha": "dd951dcfad6a78e4f94925e9f85238e0415abea0",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "fanquake:bitcoin_tidy_llvm_config_dir",
      "ref": "bitcoin_tidy_llvm_config_dir",
      "sha": "d82bb90a5b9dc1fd48b10514bdcd8f425aced256",
      "user": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 5910539,
        "node_id": "MDEwOlJlcG9zaXRvcnk1OTEwNTM5",
        "name": "bitcoin",
        "full_name": "fanquake/bitcoin",
        "owner": {
          "login": "fanquake",
          "id": 863730,
          "node_id": "MDQ6VXNlcjg2MzczMA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/fanquake",
          "html_url": "https://github.com/fanquake",
          "followers_url": "https://api.github.com/users/fanquake/followers",
          "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
          "organizations_url": "https://api.github.com/users/fanquake/orgs",
          "repos_url": "https://api.github.com/users/fanquake/repos",
          "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/fanquake/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/fanquake/bitcoin",
        "description": "Bitcoin integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/fanquake/bitcoin",
        "archive_url": "https://api.github.com/repos/fanquake/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/fanquake/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/fanquake/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/fanquake/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/fanquake/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/fanquake/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/fanquake/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/fanquake/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/fanquake/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/fanquake/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/fanquake/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/fanquake/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/fanquake/bitcoin/events",
        "forks_url": "https://api.github.com/repos/fanquake/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/fanquake/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/fanquake/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/fanquake/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/fanquake/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/fanquake/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/fanquake/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/fanquake/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/fanquake/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/fanquake/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/fanquake/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/fanquake/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/fanquake/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/fanquake/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/fanquake/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/fanquake/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:fanquake/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/fanquake/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/fanquake/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/fanquake/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/fanquake/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/fanquake/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/fanquake/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/fanquake/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/fanquake/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/fanquake/bitcoin/hooks",
        "svn_url": "https://github.com/fanquake/bitcoin",
        "homepage": "http://www.bitcoincore.org",
        "language": "C++",
        "forks_count": 5,
        "stargazers_count": 13,
        "watchers_count": 13,
        "size": 215608,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": false,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-08-10T13:55:40Z",
        "created_at": "2012-09-22T05:28:42Z",
        "updated_at": "2023-04-27T19:34:01Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "b2ec0326fd76e64a6d0d7e4745506b29f60d0be5",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 35490,
        "stargazers_count": 70694,
        "watchers_count": 70694,
        "size": 236413,
        "default_branch": "master",
        "open_issues_count": 680,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-08-10T19:58:59Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-08-10T19:55:32Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28245"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 5,
    "deletions": 2,
    "changed_files": 1,
    "commits": 1,
    "review_comments": 8,
    "comments": 3
  },
  "events": [
    {
      "event": "commented",
      "id": 1671204341,
      "node_id": "IC_kwDOABII585jnI31",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1671204341",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-09T12:07:04Z",
      "updated_at": "2023-08-10T19:56:45Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| ACK | [TheCharlatan](https://github.com/bitcoin/bitcoin/pull/28245#pullrequestreview-1571755564), [theuni](https://github.com/bitcoin/bitcoin/pull/28245#issuecomment-1673822972) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28245#issuecomment-1671204341",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28245"
    },
    {
      "event": "labeled",
      "id": 10046120154,
      "node_id": "LE_lADOABII585t23k8zwAAAAJWy6Da",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10046120154",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-09T12:07:06Z",
      "label": {
        "name": "Docs",
        "color": "02d7e1"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-09T12:07:13Z",
      "updated_at": "2023-08-09T12:07:13Z",
      "source": {
        "issue": {
          "id": 1405651308,
          "node_id": "PR_kwDOABII585An4JL",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26296",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26296/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26296/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26296/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/26296",
          "number": 26296,
          "state": "closed",
          "state_reason": null,
          "title": "ci: Integrate `bitcoin-tidy` clang-tidy plugin",
          "body": "Demo of integrating the [bitcoin-tidy](https://github.com/theuni/bitcoin-tidy-plugin), [clang-tidy plugin](https://clang.llvm.org/extra/clang-tidy/) written by theuni into our tidy CI job.\r\n\r\nThe plugin currently has a single check, `bitcoin-unterminated-logprintf`. This would replace our current Python driven, `git-grep`-based, `.cpp` file only, lint-logs linter.",
          "user": {
            "login": "fanquake",
            "id": 863730,
            "node_id": "MDQ6VXNlcjg2MzczMA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/fanquake",
            "html_url": "https://github.com/fanquake",
            "followers_url": "https://api.github.com/users/fanquake/followers",
            "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
            "organizations_url": "https://api.github.com/users/fanquake/orgs",
            "repos_url": "https://api.github.com/users/fanquake/repos",
            "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/fanquake/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 62963516,
              "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
              "name": "Tests",
              "color": "d4c5f9",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 52,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26296",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/26296",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/26296.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/26296.patch"
          },
          "closed_at": "2023-08-07T15:14:22Z",
          "created_at": "2022-10-12T06:35:04Z",
          "updated_at": "2023-08-09T12:57:19Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "reviewed",
      "id": 1569411388,
      "node_id": "PRR_kwDOABII585di1E8",
      "url": null,
      "actor": null,
      "commit_id": "8651b998ffc80b2a1b79a47b47f2b54924db0512",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "ACK 8651b998ffc80b2a1b79a47b47f2b54924db0512",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28245#pullrequestreview-1569411388",
      "submitted_at": "2023-08-09T12:12:37Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28245"
    },
    {
      "event": "review_requested",
      "id": 10046913852,
      "node_id": "RRE_lADOABII585t23k8zwAAAAJW1708",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10046913852",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-09T13:22:03Z",
      "requested_reviewer": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "reviewed",
      "id": 1570825005,
      "node_id": "PRR_kwDOABII585doOMt",
      "url": null,
      "actor": null,
      "commit_id": "8651b998ffc80b2a1b79a47b47f2b54924db0512",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28245#pullrequestreview-1570825005",
      "submitted_at": "2023-08-10T00:50:44Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28245"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGQ4MmJiOTBhNWI5ZGMxZmQ0OGIxMDUxNGJkY2Q4ZjQyNWFjZWQyNTY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d82bb90a5b9dc1fd48b10514bdcd8f425aced256",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/d82bb90a5b9dc1fd48b10514bdcd8f425aced256",
      "tree": {
        "sha": "ecc08bec2700edd99569906cc12cffff6177c162",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ecc08bec2700edd99569906cc12cffff6177c162"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree ecc08bec2700edd99569906cc12cffff6177c162\nparent 492257019d6d6e0f4051433e510502e8040fd6d2\nauthor fanquake <fanquake@gmail.com> 1691582600 +0200\ncommitter fanquake <fanquake@gmail.com> 1691663975 +0200\n\ndoc: use llvm-config for bitcoin-tidy example\n\nAn LLVM installation will have `llvm-config` available to query for\ninfo. Ask it for the `--cmakedir`, and use that in our bitcoin-tidy\nexample, rather than listing multiple different (potential) paths per\ndistro/OS etc.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmTUvnAACgkQLuufXMCV\nJsEOEQ/9H+UK4o4R9K4ATVNtolEQdA5MMCQUXh0VsG0l40LGWM+Be4S8kMqB4aFd\nvuneeu95Em3+jlTE4TmK2jjHsCZo9X9TQlovx+FWg7ehK6ZhUVY6Gp7wBN3GooQT\nYa4N4P/3MHZdWfKYC57hOeIyAvLdfOcseHKWGSxbwavvdSxlu3p/qraN/9cYakdn\nUEqObbu8S4lXqGyq3LZr9M/9yKAvf2eqIqDvkck4AtOuQfK8YOyjQ43PQsJSrv95\nfu/yfxcuDZmKk4ngC85QrdMQF33T1xHZhGqxEcAHiD5+IrIXJrOzYKgxPxO0vCGv\nlQclZtcdeGwgXVnq7bZ8JjHvK9WuJn8MBcekEJSIblSTsn9t/7YoKfeQtkdkB9Ri\nULCheRvbHrB9nqi3tDzYTlZdFYKImYXlo7YoZzVQuiINv+wJtwv43DYwIYWw2Dfd\nLisf7gu520YEsYpj/t1iQn/QJP2ZmuGazU10A5Ah0iY4i5tUgslerhPr392NzGeW\n3VNSv+r3xYXYlmuggq0rT/XMJGau9wIIHJAt7HOtc30EBxAOcvE9sZSrn43ihRUx\nou9Kw6yjRONdJgZ/0W06Ko1wZdiSLNAUuAYW1O4OuJTh3fNACMd/lOGcCTh5nNf9\n5rWFEwHjwdb3RCA69jGRgIDAyj4ho84T+J03Biy6Hm/d4Tu108c=\n=BOqp\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/492257019d6d6e0f4051433e510502e8040fd6d2",
          "sha": "492257019d6d6e0f4051433e510502e8040fd6d2",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/492257019d6d6e0f4051433e510502e8040fd6d2"
        }
      ],
      "message": "doc: use llvm-config for bitcoin-tidy example\n\nAn LLVM installation will have `llvm-config` available to query for\ninfo. Ask it for the `--cmakedir`, and use that in our bitcoin-tidy\nexample, rather than listing multiple different (potential) paths per\ndistro/OS etc.",
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2023-08-10T10:39:35Z"
      },
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2023-08-09T12:03:20Z"
      },
      "sha": "d82bb90a5b9dc1fd48b10514bdcd8f425aced256"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 10057808939,
      "node_id": "HRFPE_lADOABII585t23k8zwAAAAJXffwr",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10057808939",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-10T10:40:04Z"
    },
    {
      "event": "commented",
      "id": 1672982779,
      "node_id": "IC_kwDOABII585jt7D7",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1672982779",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-10T10:41:38Z",
      "updated_at": "2023-08-10T10:41:38Z",
      "author_association": "MEMBER",
      "body": "Simplifed this further, given we can actually just ask for `llvm-config --cmakedir`.",
      "user": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28245#issuecomment-1672982779",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28245"
    },
    {
      "event": "reviewed",
      "id": 1571755564,
      "node_id": "PRR_kwDOABII585drxYs",
      "url": null,
      "actor": null,
      "commit_id": "d82bb90a5b9dc1fd48b10514bdcd8f425aced256",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Nice, Re-ACK d82bb90a5b9dc1fd48b10514bdcd8f425aced256",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28245#pullrequestreview-1571755564",
      "submitted_at": "2023-08-10T12:20:15Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28245"
    },
    {
      "event": "commented",
      "id": 1673822972,
      "node_id": "IC_kwDOABII585jxIL8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1673822972",
      "actor": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-10T19:54:03Z",
      "updated_at": "2023-08-10T19:54:03Z",
      "author_association": "MEMBER",
      "body": "Nit: stale description.\r\n\r\n@jonatack's issue is valid but unrelated. I'll PR a fix for that separately once we have it nailed down.\r\n\r\nACK d82bb90a5b9dc1fd48b10514bdcd8f425aced256.",
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28245#issuecomment-1673822972",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28245"
    },
    {
      "event": "mentioned",
      "id": 10063459694,
      "node_id": "MEE_lADOABII585t23k8zwAAAAJX1DVu",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10063459694",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-10T19:54:04Z"
    },
    {
      "event": "subscribed",
      "id": 10063459718,
      "node_id": "SE_lADOABII585t23k8zwAAAAJX1DWG",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10063459718",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-10T19:54:04Z"
    },
    {
      "event": "review_request_removed",
      "id": 10063481597,
      "node_id": "RRRE_lADOABII585t23k8zwAAAAJX1Ir9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10063481597",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-10T19:56:46Z",
      "requested_reviewer": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      }
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1289401710",
      "pull_request_review_id": 1570825005,
      "id": 1289401710,
      "node_id": "PRRC_kwDOABII585M2rVu",
      "diff_hunk": "@@ -3,6 +3,9 @@\n Example Usage:\n \n ```bash\n-cmake -S . -B build -DLLVM_DIR=/path/to/lib/cmake/llvm -DCMAKE_BUILD_TYPE=Release\n-make -C build -j$(nproc)\n+cmake -S . -B build -DLLVM_DIR=$(llvm-config --libdir)/cmake/llvm -DCMAKE_BUILD_TYPE=Release\n+\n+cmake --build build -j$(nproc)",
      "path": "contrib/devtools/bitcoin-tidy/README",
      "position": 8,
      "original_position": 8,
      "commit_id": "d82bb90a5b9dc1fd48b10514bdcd8f425aced256",
      "original_commit_id": "8651b998ffc80b2a1b79a47b47f2b54924db0512",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Concept ACK on improving the example usage. Any tips on how to make it work with macOS 13.5 arm64? Seeing `Undefined symbols for architecture arm64` errors at this step in both versions of this README (thanks!)\r\n\r\n<details><summary>terminal output</summary></p>\r\n\r\n```zsh\r\njon|master =:~/bitcoin/bitcoin/contrib/devtools/bitcoin-tidy$ cmake --version\r\ncmake version 3.27.1\r\njon|master =:~/bitcoin/bitcoin/contrib/devtools/bitcoin-tidy$ cmake -S . -B build -DLLVM_DIR=$(llvm-config --libdir)/cmake/llvm -DCMAKE_BUILD_TYPE=Release\r\n-- The C compiler identification is AppleClang 14.0.3.14030022\r\n-- The CXX compiler identification is AppleClang 14.0.3.14030022\r\n-- Detecting C compiler ABI info\r\n-- Detecting C compiler ABI info - done\r\n-- Check for working C compiler: /opt/homebrew/opt/ccache/libexec/cc - skipped\r\n-- Detecting C compile features\r\n-- Detecting C compile features - done\r\n-- Detecting CXX compiler ABI info\r\n-- Detecting CXX compiler ABI info - done\r\n-- Check for working CXX compiler: /opt/homebrew/opt/ccache/libexec/c++ - skipped\r\n-- Detecting CXX compile features\r\n-- Detecting CXX compile features - done\r\n-- Performing Test HAVE_FFI_CALL\r\n-- Performing Test HAVE_FFI_CALL - Success\r\n-- Found FFI: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/lib/libffi.tbd  \r\n-- Performing Test Terminfo_LINKABLE\r\n-- Performing Test Terminfo_LINKABLE - Success\r\n-- Found Terminfo: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/lib/libcurses.tbd  \r\n-- Found ZLIB: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/lib/libz.tbd (found version \"1.2.11\")  \r\n-- Found zstd: /opt/homebrew/lib/libzstd.dylib  \r\n-- Found LibXml2: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/lib/libxml2.tbd (found version \"2.9.13\") \r\n-- Found LLVM 16.0.6\r\n-- Found clang-tidy: /opt/homebrew/Cellar/llvm/16.0.6/bin/clang-tidy\r\n-- Configuring done (1.1s)\r\n-- Generating done (0.0s)\r\n-- Build files have been written to: /Users/jon/bitcoin/bitcoin/contrib/devtools/bitcoin-tidy/build\r\njon|master =:~/bitcoin/bitcoin/contrib/devtools/bitcoin-tidy$ cmake --build build -j11                                                                    \r\n[ 33%] Building CXX object CMakeFiles/bitcoin-tidy.dir/bitcoin-tidy.cpp.o\r\n[ 66%] Building CXX object CMakeFiles/bitcoin-tidy.dir/logprintf.cpp.o\r\n/Users/jon/bitcoin/bitcoin/contrib/devtools/bitcoin-tidy/logprintf.cpp:12:1: warning: unused parameter 'Finder' [-Wunused-parameter]\r\nAST_MATCHER(clang::StringLiteral, unterminated)\r\n^\r\n/opt/homebrew/Cellar/llvm/16.0.6/include/clang/ASTMatchers/ASTMatchersMacros.h:112:56: note: expanded from macro 'AST_MATCHER'\r\n      ::clang::ast_matchers::internal::ASTMatchFinder *Finder,                 \\\r\n                                                       ^\r\n/Users/jon/bitcoin/bitcoin/contrib/devtools/bitcoin-tidy/logprintf.cpp:12:1: warning: unused parameter 'Builder' [-Wunused-parameter]\r\n/opt/homebrew/Cellar/llvm/16.0.6/include/clang/ASTMatchers/ASTMatchersMacros.h:113:63: note: expanded from macro 'AST_MATCHER'\r\n      ::clang::ast_matchers::internal::BoundNodesTreeBuilder *Builder) const\r\n                                                              ^\r\n2 warnings generated.\r\n[100%] Linking CXX shared module libbitcoin-tidy.so\r\nUndefined symbols for architecture arm64:\r\n  \"llvm::SmallVectorBase<unsigned int>::mallocForGrow(void*, unsigned long, unsigned long, unsigned long&)\", referenced from:\r\n      llvm::SmallVectorTemplateBase<clang::FixItHint, false>::reserveForParamAndGetAddress(clang::FixItHint const&, unsigned long) in logprintf.cpp.o\r\n  \"llvm::DisableABIBreakingChecks\", referenced from:\r\n      llvm::VerifyDisableABIBreakingChecks in bitcoin-tidy.cpp.o\r\n      llvm::VerifyDisableABIBreakingChecks in logprintf.cpp.o\r\n  \"llvm::Registry<clang::tidy::ClangTidyModule>::add_node(llvm::Registry<clang::tidy::ClangTidyModule>::node*)\", referenced from:\r\n      __GLOBAL__sub_I_bitcoin_tidy.cpp in bitcoin-tidy.cpp.o\r\n  \"clang::ASTNodeKind::getFromNode(clang::Decl const&)\", referenced from:\r\n      clang::ast_matchers::internal::HasDeclarationMatcher<clang::QualType, clang::ast_matchers::internal::Matcher<clang::Decl>>::matchesSpecialized(clang::Type const&, clang::ast_matchers::internal::ASTMatchFinder*, clang::ast_matchers::internal::BoundNodesTreeBuilder*) const in logprintf.cpp.o\r\n      clang::ast_matchers::internal::HasDeclarationMatcher<clang::CallExpr, clang::ast_matchers::internal::Matcher<clang::Decl>>::matches(clang::CallExpr const&, clang::ast_matchers::internal::ASTMatchFinder*, clang::ast_matchers::internal::BoundNodesTreeBuilder*) const in logprintf.cpp.o\r\n  \"clang::ASTNodeKind::getFromNode(clang::Stmt const&)\", referenced from:\r\n      clang::ast_matchers::internal::matcher_thisPointerType0Matcher::matches(clang::CXXMemberCallExpr const&, clang::ast_matchers::internal::ASTMatchFinder*, clang::ast_matchers::internal::BoundNodesTreeBuilder*) const in logprintf.cpp.o\r\n      clang::ast_matchers::internal::matcher_onImplicitObjectArgument0Matcher::matches(clang::CXXMemberCallExpr const&, clang::ast_matchers::internal::ASTMatchFinder*, clang::ast_matchers::internal::BoundNodesTreeBuilder*) const in logprintf.cpp.o\r\n      clang::ast_matchers::internal::matcher_hasArgument0Matcher<clang::CallExpr, unsigned int, clang::ast_matchers::internal::Matcher<clang::Expr>>::matches(clang::CallExpr const&, clang::ast_matchers::internal::ASTMatchFinder*, clang::ast_matchers::internal::BoundNodesTreeBuilder*) const in logprintf.cpp.o\r\n      clang::ast_matchers::internal::matcher_callee1Matcher<clang::CallExpr, clang::ast_matchers::internal::Matcher<clang::Decl>>::matches(clang::CallExpr const&, clang::ast_matchers::internal::ASTMatchFinder*, clang::ast_matchers::internal::BoundNodesTreeBuilder*) const in logprintf.cpp.o\r\n      clang::ast_matchers::internal::matcher_callee1Matcher<clang::CXXMemberCallExpr, clang::ast_matchers::internal::Matcher<clang::Decl>>::matches(clang::CXXMemberCallExpr const&, clang::ast_matchers::internal::ASTMatchFinder*, clang::ast_matchers::internal::BoundNodesTreeBuilder*) const in logprintf.cpp.o\r\n      clang::ast_matchers::internal::matcher_hasArgument0Matcher<clang::CXXMemberCallExpr, unsigned int, clang::ast_matchers::internal::Matcher<clang::Expr>>::matches(clang::CXXMemberCallExpr const&, clang::ast_matchers::internal::ASTMatchFinder*, clang::ast_matchers::internal::BoundNodesTreeBuilder*) const in logprintf.cpp.o\r\n  \"clang::ast_matchers::MatchFinder::addMatcher(clang::ast_matchers::internal::Matcher<clang::Stmt> const&, clang::ast_matchers::MatchFinder::MatchCallback*)\", referenced from:\r\n      bitcoin::LogPrintfCheck::registerMatchers(clang::ast_matchers::MatchFinder*) in logprintf.cpp.o\r\n  \"clang::ast_matchers::MatchFinder::MatchCallback::~MatchCallback()\", referenced from:\r\n      bitcoin::LogPrintfCheck::~LogPrintfCheck() in logprintf.cpp.o\r\n      bitcoin::LogPrintfCheck::~LogPrintfCheck() in logprintf.cpp.o\r\n  \"clang::ast_matchers::cxxMemberCallExpr\", referenced from:\r\n      bitcoin::LogPrintfCheck::registerMatchers(clang::ast_matchers::MatchFinder*) in logprintf.cpp.o\r\n  \"clang::ast_matchers::anyOf\", referenced from:\r\n      clang::ast_matchers::internal::matcher_thisPointerType0Matcher::matches(clang::CXXMemberCallExpr const&, clang::ast_matchers::internal::ASTMatchFinder*, clang::ast_matchers::internal::BoundNodesTreeBuilder*) const in logprintf.cpp.o\r\n  \"clang::ast_matchers::callExpr\", referenced from:\r\n      bitcoin::LogPrintfCheck::registerMatchers(clang::ast_matchers::MatchFinder*) in logprintf.cpp.o\r\n  \"clang::ast_matchers::internal::HasNameMatcher::HasNameMatcher(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>)\", referenced from:\r\n      clang::ast_matchers::hasName(llvm::StringRef) in logprintf.cpp.o\r\n  \"clang::ast_matchers::internal::DynTypedMatcher::trueMatcher(clang::ASTNodeKind)\", referenced from:\r\n      clang::ast_matchers::internal::BindableMatcher<clang::QualType> clang::ast_matchers::internal::makeAllOfComposite<clang::QualType>(llvm::ArrayRef<clang::ast_matchers::internal::Matcher<clang::QualType> const*>) in logprintf.cpp.o\r\n      clang::ast_matchers::internal::BindableMatcher<clang::CXXRecordDecl> clang::ast_matchers::internal::makeAllOfComposite<clang::CXXRecordDecl>(llvm::ArrayRef<clang::ast_matchers::internal::Matcher<clang::CXXRecordDecl> const*>) in logprintf.cpp.o\r\n      clang::ast_matchers::internal::BindableMatcher<clang::FunctionDecl> clang::ast_matchers::internal::makeAllOfComposite<clang::FunctionDecl>(llvm::ArrayRef<clang::ast_matchers::internal::Matcher<clang::FunctionDecl> const*>) in logprintf.cpp.o\r\n      clang::ast_matchers::internal::BindableMatcher<clang::StringLiteral> clang::ast_matchers::internal::makeAllOfComposite<clang::StringLiteral>(llvm::ArrayRef<clang::ast_matchers::internal::Matcher<clang::StringLiteral> const*>) in logprintf.cpp.o\r\n      clang::ast_matchers::internal::BindableMatcher<clang::CallExpr> clang::ast_matchers::internal::makeAllOfComposite<clang::CallExpr>(llvm::ArrayRef<clang::ast_matchers::internal::Matcher<clang::CallExpr> const*>) in logprintf.cpp.o\r\n      clang::ast_matchers::internal::BindableMatcher<clang::CXXMethodDecl> clang::ast_matchers::internal::makeAllOfComposite<clang::CXXMethodDecl>(llvm::ArrayRef<clang::ast_matchers::internal::Matcher<clang::CXXMethodDecl> const*>) in logprintf.cpp.o\r\n      clang::ast_matchers::internal::BindableMatcher<clang::CXXMemberCallExpr> clang::ast_matchers::internal::makeAllOfComposite<clang::CXXMemberCallExpr>(llvm::ArrayRef<clang::ast_matchers::internal::Matcher<clang::CXXMemberCallExpr> const*>) in logprintf.cpp.o\r\n      ...\r\n  \"clang::ast_matchers::internal::DynTypedMatcher::constructVariadic(clang::ast_matchers::internal::DynTypedMatcher::VariadicOperator, clang::ASTNodeKind, std::__1::vector<clang::ast_matchers::internal::DynTypedMatcher, std::__1::allocator<clang::ast_matchers::internal::DynTypedMatcher>>)\", referenced from:\r\n      clang::ast_matchers::internal::VariadicOperatorMatcher<clang::ast_matchers::internal::PolymorphicMatcher<clang::ast_matchers::internal::matcher_hasType0Matcher, void (clang::ast_matchers::internal::TypeList<clang::Expr, clang::FriendDecl, clang::TypedefNameDecl, clang::ValueDecl, clang::CXXBaseSpecifier>), clang::ast_matchers::internal::Matcher<clang::QualType>>, clang::ast_matchers::internal::PolymorphicMatcher<clang::ast_matchers::internal::matcher_hasType0Matcher, void (clang::ast_matchers::internal::TypeList<clang::Expr, clang::FriendDecl, clang::TypedefNameDecl, clang::ValueDecl, clang::CXXBaseSpecifier>), clang::ast_matchers::internal::Matcher<clang::QualType>>>::operator clang::ast_matchers::internal::Matcher<clang::Expr><clang::Expr>() && in logprintf.cpp.o\r\n      clang::ast_matchers::internal::BindableMatcher<clang::QualType> clang::ast_matchers::internal::makeAllOfComposite<clang::QualType>(llvm::ArrayRef<clang::ast_matchers::internal::Matcher<clang::QualType> const*>) in logprintf.cpp.o\r\n      clang::ast_matchers::internal::BindableMatcher<clang::CXXRecordDecl> clang::ast_matchers::internal::makeAllOfComposite<clang::CXXRecordDecl>(llvm::ArrayRef<clang::ast_matchers::internal::Matcher<clang::CXXRecordDecl> const*>) in logprintf.cpp.o\r\n      clang::ast_matchers::internal::BindableMatcher<clang::FunctionDecl> clang::ast_matchers::internal::makeAllOfComposite<clang::FunctionDecl>(llvm::ArrayRef<clang::ast_matchers::internal::Matcher<clang::FunctionDecl> const*>) in logprintf.cpp.o\r\n      clang::ast_matchers::internal::BindableMatcher<clang::StringLiteral> clang::ast_matchers::internal::makeAllOfComposite<clang::StringLiteral>(llvm::ArrayRef<clang::ast_matchers::internal::Matcher<clang::StringLiteral> const*>) in logprintf.cpp.o\r\n      clang::ast_matchers::internal::BindableMatcher<clang::CallExpr> clang::ast_matchers::internal::makeAllOfComposite<clang::CallExpr>(llvm::ArrayRef<clang::ast_matchers::internal::Matcher<clang::CallExpr> const*>) in logprintf.cpp.o\r\n      clang::ast_matchers::internal::BindableMatcher<clang::CXXMethodDecl> clang::ast_matchers::internal::makeAllOfComposite<clang::CXXMethodDecl>(llvm::ArrayRef<clang::ast_matchers::internal::Matcher<clang::CXXMethodDecl> const*>) in logprintf.cpp.o\r\n      ...\r\n  \"clang::DiagnosticsEngine::EmitCurrentDiagnostic(bool)\", referenced from:\r\n      bitcoin::LogPrintfCheck::check(clang::ast_matchers::MatchFinder::MatchResult const&) in logprintf.cpp.o\r\n  \"clang::Expr::IgnoreParenImpCasts()\", referenced from:\r\n      clang::ast_matchers::internal::matcher_hasArgument0Matcher<clang::CallExpr, unsigned int, clang::ast_matchers::internal::Matcher<clang::Expr>>::matches(clang::CallExpr const&, clang::ast_matchers::internal::ASTMatchFinder*, clang::ast_matchers::internal::BoundNodesTreeBuilder*) const in logprintf.cpp.o\r\n      clang::ast_matchers::internal::matcher_hasArgument0Matcher<clang::CXXMemberCallExpr, unsigned int, clang::ast_matchers::internal::Matcher<clang::Expr>>::matches(clang::CXXMemberCallExpr const&, clang::ast_matchers::internal::ASTMatchFinder*, clang::ast_matchers::internal::BoundNodesTreeBuilder*) const in logprintf.cpp.o\r\n  \"clang::Expr::getReferencedDeclOfCallee()\", referenced from:\r\n      clang::ast_matchers::internal::HasDeclarationMatcher<clang::CallExpr, clang::ast_matchers::internal::Matcher<clang::Decl>>::matches(clang::CallExpr const&, clang::ast_matchers::internal::ASTMatchFinder*, clang::ast_matchers::internal::BoundNodesTreeBuilder*) const in logprintf.cpp.o\r\n  \"clang::tidy::ClangTidyCheck::run(clang::ast_matchers::MatchFinder::MatchResult const&)\", referenced from:\r\n      vtable for bitcoin::LogPrintfCheck in logprintf.cpp.o\r\n  \"clang::tidy::ClangTidyCheck::diag(clang::SourceLocation, llvm::StringRef, clang::DiagnosticIDs::Level)\", referenced from:\r\n      bitcoin::LogPrintfCheck::check(clang::ast_matchers::MatchFinder::MatchResult const&) in logprintf.cpp.o\r\n  \"clang::tidy::ClangTidyCheck::ClangTidyCheck(llvm::StringRef, clang::tidy::ClangTidyContext*)\", referenced from:\r\n      std::__1::__function::__func<void clang::tidy::ClangTidyCheckFactories::registerCheck<bitcoin::LogPrintfCheck>(llvm::StringRef)::'lambda'(llvm::StringRef, clang::tidy::ClangTidyContext*), std::__1::allocator<void clang::tidy::ClangTidyCheckFactories::registerCheck<bitcoin::LogPrintfCheck>(llvm::StringRef)::'lambda'(llvm::StringRef, clang::tidy::ClangTidyContext*)>, std::__1::unique_ptr<clang::tidy::ClangTidyCheck, std::__1::default_delete<clang::tidy::ClangTidyCheck>> (llvm::StringRef, clang::tidy::ClangTidyContext*)>::operator()(llvm::StringRef&&, clang::tidy::ClangTidyContext*&&) in bitcoin-tidy.cpp.o\r\n  \"clang::tidy::ClangTidyModule::getModuleOptions()\", referenced from:\r\n      vtable for BitcoinModule in bitcoin-tidy.cpp.o\r\n  \"clang::tidy::ClangTidyCheckFactories::registerCheckFactory(llvm::StringRef, std::__1::function<std::__1::unique_ptr<clang::tidy::ClangTidyCheck, std::__1::default_delete<clang::tidy::ClangTidyCheck>> (llvm::StringRef, clang::tidy::ClangTidyContext*)>)\", referenced from:\r\n      BitcoinModule::addCheckFactories(clang::tidy::ClangTidyCheckFactories&) in bitcoin-tidy.cpp.o\r\n  \"clang::ASTNodeKind::isBaseOf(clang::ASTNodeKind, unsigned int*) const\", referenced from:\r\n      bitcoin::LogPrintfCheck::check(clang::ast_matchers::MatchFinder::MatchResult const&) in logprintf.cpp.o\r\n  \"clang::TemplateName::getAsTemplateDecl() const\", referenced from:\r\n      clang::ast_matchers::internal::HasDeclarationMatcher<clang::QualType, clang::ast_matchers::internal::Matcher<clang::Decl>>::matchesSpecialized(clang::Type const&, clang::ast_matchers::internal::ASTMatchFinder*, clang::ast_matchers::internal::BoundNodesTreeBuilder*) const in logprintf.cpp.o\r\n  \"clang::ast_matchers::MatchFinder::MatchCallback::getCheckTraversalKind() const\", referenced from:\r\n      vtable for bitcoin::LogPrintfCheck in logprintf.cpp.o\r\n  \"clang::ast_matchers::internal::ASTMatchFinder::isTraversalIgnoringImplicitNodes() const\", referenced from:\r\n      clang::ast_matchers::internal::HasDeclarationMatcher<clang::QualType, clang::ast_matchers::internal::Matcher<clang::Decl>>::matchesSpecialized(clang::Type const&, clang::ast_matchers::internal::ASTMatchFinder*, clang::ast_matchers::internal::BoundNodesTreeBuilder*) const in logprintf.cpp.o\r\n      clang::ast_matchers::internal::matcher_hasArgument0Matcher<clang::CallExpr, unsigned int, clang::ast_matchers::internal::Matcher<clang::Expr>>::matches(clang::CallExpr const&, clang::ast_matchers::internal::ASTMatchFinder*, clang::ast_matchers::internal::BoundNodesTreeBuilder*) const in logprintf.cpp.o\r\n      clang::ast_matchers::internal::HasDeclarationMatcher<clang::CallExpr, clang::ast_matchers::internal::Matcher<clang::Decl>>::matches(clang::CallExpr const&, clang::ast_matchers::internal::ASTMatchFinder*, clang::ast_matchers::internal::BoundNodesTreeBuilder*) const in logprintf.cpp.o\r\n      clang::ast_matchers::internal::matcher_hasArgument0Matcher<clang::CXXMemberCallExpr, unsigned int, clang::ast_matchers::internal::Matcher<clang::Expr>>::matches(clang::CXXMemberCallExpr const&, clang::ast_matchers::internal::ASTMatchFinder*, clang::ast_matchers::internal::BoundNodesTreeBuilder*) const in logprintf.cpp.o\r\n  \"clang::ast_matchers::internal::DynTypedMatcher::matches(clang::DynTypedNode const&, clang::ast_matchers::internal::ASTMatchFinder*, clang::ast_matchers::internal::BoundNodesTreeBuilder*) const\", referenced from:\r\n      clang::ast_matchers::internal::matcher_thisPointerType0Matcher::matches(clang::CXXMemberCallExpr const&, clang::ast_matchers::internal::ASTMatchFinder*, clang::ast_matchers::internal::BoundNodesTreeBuilder*) const in logprintf.cpp.o\r\n      clang::ast_matchers::internal::matcher_onImplicitObjectArgument0Matcher::matches(clang::CXXMemberCallExpr const&, clang::ast_matchers::internal::ASTMatchFinder*, clang::ast_matchers::internal::BoundNodesTreeBuilder*) const in logprintf.cpp.o\r\n      clang::ast_matchers::internal::matcher_pointsTo0Matcher::matches(clang::QualType const&, clang::ast_matchers::internal::ASTMatchFinder*, clang::ast_matchers::internal::BoundNodesTreeBuilder*) const in logprintf.cpp.o\r\n      clang::ast_matchers::internal::matcher_hasType0Matcher<clang::Expr, clang::ast_matchers::internal::Matcher<clang::QualType>>::matches(clang::Expr const&, clang::ast_matchers::internal::ASTMatchFinder*, clang::ast_matchers::internal::BoundNodesTreeBuilder*) const in logprintf.cpp.o\r\n      clang::ast_matchers::internal::HasDeclarationMatcher<clang::QualType, clang::ast_matchers::internal::Matcher<clang::Decl>>::matchesSpecialized(clang::Type const&, clang::ast_matchers::internal::ASTMatchFinder*, clang::ast_matchers::internal::BoundNodesTreeBuilder*) const in logprintf.cpp.o\r\n      clang::ast_matchers::internal::matcher_hasArgument0Matcher<clang::CallExpr, unsigned int, clang::ast_matchers::internal::Matcher<clang::Expr>>::matches(clang::CallExpr const&, clang::ast_matchers::internal::ASTMatchFinder*, clang::ast_matchers::internal::BoundNodesTreeBuilder*) const in logprintf.cpp.o\r\n      clang::ast_matchers::internal::matcher_callee1Matcher<clang::CallExpr, clang::ast_matchers::internal::Matcher<clang::Decl>>::matches(clang::CallExpr const&, clang::ast_matchers::internal::ASTMatchFinder*, clang::ast_matchers::internal::BoundNodesTreeBuilder*) const in logprintf.cpp.o\r\n      ...\r\n  \"clang::ast_matchers::internal::DynTypedMatcher::tryBind(llvm::StringRef) const\", referenced from:\r\n      bitcoin::LogPrintfCheck::registerMatchers(clang::ast_matchers::MatchFinder*) in logprintf.cpp.o\r\n  \"clang::ast_matchers::internal::DynTypedMatcher::dynCastTo(clang::ASTNodeKind) const\", referenced from:\r\n      bitcoin::LogPrintfCheck::registerMatchers(clang::ast_matchers::MatchFinder*) in logprintf.cpp.o\r\n      clang::ast_matchers::internal::BindableMatcher<clang::Stmt> clang::ast_matchers::internal::VariadicFunction<clang::ast_matchers::internal::BindableMatcher<clang::Stmt>, clang::ast_matchers::internal::Matcher<clang::CallExpr>, &clang::ast_matchers::internal::BindableMatcher<clang::Stmt> clang::ast_matchers::internal::makeDynCastAllOfComposite<clang::Stmt, clang::CallExpr>(llvm::ArrayRef<clang::ast_matchers::internal::Matcher<clang::CallExpr> const*>)>::operator()<clang::ast_matchers::internal::PolymorphicMatcher<clang::ast_matchers::internal::matcher_hasArgument0Matcher, void (clang::ast_matchers::internal::TypeList<clang::CallExpr, clang::CXXConstructExpr, clang::CXXUnresolvedConstructExpr, clang::ObjCMessageExpr>), unsigned int, clang::ast_matchers::internal::Matcher<clang::Expr>>>(clang::ast_matchers::internal::Matcher<clang::CallExpr> const&, clang::ast_matchers::internal::PolymorphicMatcher<clang::ast_matchers::internal::matcher_hasArgument0Matcher, void (clang::ast_matchers::internal::TypeList<clang::CallExpr, clang::CXXConstructExpr, clang::CXXUnresolvedConstructExpr, clang::ObjCMessageExpr>), unsigned int, clang::ast_matchers::internal::Matcher<clang::Expr>> const&) const in logprintf.cpp.o\r\n      clang::ast_matchers::internal::BindableMatcher<clang::Stmt> clang::ast_matchers::internal::VariadicFunction<clang::ast_matchers::internal::BindableMatcher<clang::Stmt>, clang::ast_matchers::internal::Matcher<clang::CXXMemberCallExpr>, &clang::ast_matchers::internal::BindableMatcher<clang::Stmt> clang::ast_matchers::internal::makeDynCastAllOfComposite<clang::Stmt, clang::CXXMemberCallExpr>(llvm::ArrayRef<clang::ast_matchers::internal::Matcher<clang::CXXMemberCallExpr> const*>)>::operator()<clang::ast_matchers::internal::PolymorphicMatcher<clang::ast_matchers::internal::matcher_callee1Matcher, void (clang::ast_matchers::internal::TypeList<clang::ObjCMessageExpr, clang::CallExpr>), clang::ast_matchers::internal::Matcher<clang::Decl>>, clang::ast_matchers::internal::PolymorphicMatcher<clang::ast_matchers::internal::matcher_hasArgument0Matcher, void (clang::ast_matchers::internal::TypeList<clang::CallExpr, clang::CXXConstructExpr, clang::CXXUnresolvedConstructExpr, clang::ObjCMessageExpr>), unsigned int, clang::ast_matchers::internal::Matcher<clang::Expr>>>(clang::ast_matchers::internal::Matcher<clang::CXXMemberCallExpr> const&, clang::ast_matchers::internal::PolymorphicMatcher<clang::ast_matchers::internal::matcher_callee1Matcher, void (clang::ast_matchers::internal::TypeList<clang::ObjCMessageExpr, clang::CallExpr>), clang::ast_matchers::internal::Matcher<clang::Decl>> const&, clang::ast_matchers::internal::PolymorphicMatcher<clang::ast_matchers::internal::matcher_hasArgument0Matcher, void (clang::ast_matchers::internal::TypeList<clang::CallExpr, clang::CXXConstructExpr, clang::CXXUnresolvedConstructExpr, clang::ObjCMessageExpr>), unsigned int, clang::ast_matchers::internal::Matcher<clang::Expr>> const&) const in logprintf.cpp.o\r\n      clang::ast_matchers::internal::VariadicOperatorMatcher<clang::ast_matchers::internal::PolymorphicMatcher<clang::ast_matchers::internal::matcher_hasType0Matcher, void (clang::ast_matchers::internal::TypeList<clang::Expr, clang::FriendDecl, clang::TypedefNameDecl, clang::ValueDecl, clang::CXXBaseSpecifier>), clang::ast_matchers::internal::Matcher<clang::QualType>>, clang::ast_matchers::internal::PolymorphicMatcher<clang::ast_matchers::internal::matcher_hasType0Matcher, void (clang::ast_matchers::internal::TypeList<clang::Expr, clang::FriendDecl, clang::TypedefNameDecl, clang::ValueDecl, clang::CXXBaseSpecifier>), clang::ast_matchers::internal::Matcher<clang::QualType>>>::operator clang::ast_matchers::internal::Matcher<clang::Expr><clang::Expr>() && in logprintf.cpp.o\r\n      clang::ast_matchers::internal::BindableMatcher<clang::QualType> clang::ast_matchers::internal::makeAllOfComposite<clang::QualType>(llvm::ArrayRef<clang::ast_matchers::internal::Matcher<clang::QualType> const*>) in logprintf.cpp.o\r\n      clang::ast_matchers::internal::BindableMatcher<clang::CXXRecordDecl> clang::ast_matchers::internal::makeAllOfComposite<clang::CXXRecordDecl>(llvm::ArrayRef<clang::ast_matchers::internal::Matcher<clang::CXXRecordDecl> const*>) in logprintf.cpp.o\r\n      clang::ast_matchers::internal::BindableMatcher<clang::FunctionDecl> clang::ast_matchers::internal::makeAllOfComposite<clang::FunctionDecl>(llvm::ArrayRef<clang::ast_matchers::internal::Matcher<clang::FunctionDecl> const*>) in logprintf.cpp.o\r\n      ...\r\n  \"clang::StringLiteral::getLocationOfByte(unsigned int, clang::SourceManager const&, clang::LangOptions const&, clang::TargetInfo const&, unsigned int*, unsigned int*) const\", referenced from:\r\n      bitcoin::LogPrintfCheck::check(clang::ast_matchers::MatchFinder::MatchResult const&) in logprintf.cpp.o\r\n  \"clang::CXXMemberCallExpr::getImplicitObjectArgument() const\", referenced from:\r\n      clang::ast_matchers::internal::matcher_onImplicitObjectArgument0Matcher::matches(clang::CXXMemberCallExpr const&, clang::ast_matchers::internal::ASTMatchFinder*, clang::ast_matchers::internal::BoundNodesTreeBuilder*) const in logprintf.cpp.o\r\n  \"clang::ObjCInterfaceType::getDecl() const\", referenced from:\r\n      clang::ast_matchers::internal::HasDeclarationMatcher<clang::QualType, clang::ast_matchers::internal::Matcher<clang::Decl>>::matchesSpecialized(clang::Type const&, clang::ast_matchers::internal::ASTMatchFinder*, clang::ast_matchers::internal::BoundNodesTreeBuilder*) const in logprintf.cpp.o\r\n  \"clang::InjectedClassNameType::getDecl() const\", referenced from:\r\n      clang::ast_matchers::internal::HasDeclarationMatcher<clang::QualType, clang::ast_matchers::internal::Matcher<clang::Decl>>::matchesSpecialized(clang::Type const&, clang::ast_matchers::internal::ASTMatchFinder*, clang::ast_matchers::internal::BoundNodesTreeBuilder*) const in logprintf.cpp.o\r\n  \"clang::Type::getPointeeType() const\", referenced from:\r\n      clang::ast_matchers::internal::matcher_pointsTo0Matcher::matches(clang::QualType const&, clang::ast_matchers::internal::ASTMatchFinder*, clang::ast_matchers::internal::BoundNodesTreeBuilder*) const in logprintf.cpp.o\r\n  \"clang::Type::getUnqualifiedDesugaredType() const\", referenced from:\r\n      clang::ast_matchers::internal::HasDeclarationMatcher<clang::QualType, clang::ast_matchers::internal::Matcher<clang::Decl>>::matchesSpecialized(clang::Type const&, clang::ast_matchers::internal::ASTMatchFinder*, clang::ast_matchers::internal::BoundNodesTreeBuilder*) const in logprintf.cpp.o\r\n  \"clang::TagType::getDecl() const\", referenced from:\r\n      clang::ast_matchers::internal::HasDeclarationMatcher<clang::QualType, clang::ast_matchers::internal::Matcher<clang::Decl>>::matchesSpecialized(clang::Type const&, clang::ast_matchers::internal::ASTMatchFinder*, clang::ast_matchers::internal::BoundNodesTreeBuilder*) const in logprintf.cpp.o\r\n  \"clang::UsingType::getUnderlyingType() const\", referenced from:\r\n      clang::ast_matchers::internal::HasDeclarationMatcher<clang::QualType, clang::ast_matchers::internal::Matcher<clang::Decl>>::matchesSpecialized(clang::Type const&, clang::ast_matchers::internal::ASTMatchFinder*, clang::ast_matchers::internal::BoundNodesTreeBuilder*) const in logprintf.cpp.o\r\n  \"vtable for clang::tidy::ClangTidyCheck\", referenced from:\r\n      bitcoin::LogPrintfCheck::~LogPrintfCheck() in logprintf.cpp.o\r\n      bitcoin::LogPrintfCheck::~LogPrintfCheck() in logprintf.cpp.o\r\n  NOTE: a missing vtable usually means the first non-inline virtual member function has no definition.\r\nld: symbol(s) not found for architecture arm64\r\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\r\nmake[2]: *** [libbitcoin-tidy.so] Error 1\r\nmake[1]: *** [CMakeFiles/bitcoin-tidy.dir/all] Error 2\r\nmake: *** [all] Error 2\r\n```\r\n</p></details>\r\n",
      "created_at": "2023-08-10T00:50:43Z",
      "updated_at": "2023-08-10T00:50:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28245#discussion_r1289401710",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1289401710"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28245"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 8,
      "original_line": 8,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1289566686",
      "pull_request_review_id": 1571041525,
      "id": 1289566686,
      "node_id": "PRRC_kwDOABII585M3Tne",
      "diff_hunk": "@@ -3,6 +3,9 @@\n Example Usage:\n \n ```bash\n-cmake -S . -B build -DLLVM_DIR=/path/to/lib/cmake/llvm -DCMAKE_BUILD_TYPE=Release\n-make -C build -j$(nproc)\n+cmake -S . -B build -DLLVM_DIR=$(llvm-config --libdir)/cmake/llvm -DCMAKE_BUILD_TYPE=Release\n+\n+cmake --build build -j$(nproc)",
      "path": "contrib/devtools/bitcoin-tidy/README",
      "position": 8,
      "original_position": 8,
      "commit_id": "d82bb90a5b9dc1fd48b10514bdcd8f425aced256",
      "original_commit_id": "8651b998ffc80b2a1b79a47b47f2b54924db0512",
      "in_reply_to_id": 1289401710,
      "user": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Use vanilla LLVM/Clang, Not Apple LLVM/Clang.",
      "created_at": "2023-08-10T05:25:25Z",
      "updated_at": "2023-08-10T05:25:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28245#discussion_r1289566686",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1289566686"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28245"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 8,
      "original_line": 8,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1290259830",
      "pull_request_review_id": 1572099197,
      "id": 1290259830,
      "node_id": "PRRC_kwDOABII585M5812",
      "diff_hunk": "@@ -3,6 +3,9 @@\n Example Usage:\n \n ```bash\n-cmake -S . -B build -DLLVM_DIR=/path/to/lib/cmake/llvm -DCMAKE_BUILD_TYPE=Release\n-make -C build -j$(nproc)\n+cmake -S . -B build -DLLVM_DIR=$(llvm-config --libdir)/cmake/llvm -DCMAKE_BUILD_TYPE=Release\n+\n+cmake --build build -j$(nproc)",
      "path": "contrib/devtools/bitcoin-tidy/README",
      "position": 8,
      "original_position": 8,
      "commit_id": "d82bb90a5b9dc1fd48b10514bdcd8f425aced256",
      "original_commit_id": "8651b998ffc80b2a1b79a47b47f2b54924db0512",
      "in_reply_to_id": 1289401710,
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Hmm, LLVM should be header-only, so I think this is indicative of some real problem.\r\n\r\nCould you please paste your link line generated by `make VERBOSE=1`? For Linux mine is:\r\n`/usr/bin/c++ -fPIC -O3 -DNDEBUG -shared  -o libbitcoin-tidy.so \"CMakeFiles/bitcoin-tidy.dir/bitcoin-tidy.cpp.o\" \"CMakeFiles/bitcoin-tidy.dir/logprintf.cpp.o\"`\r\n\r\n---\r\n\r\nA few possibilities:\r\n1. Something about the way it's being compiled/linked makes ld64 grumpy.\r\n2. Something related to [this magic line](https://github.com/bitcoin/bitcoin/blob/master/contrib/devtools/bitcoin-tidy/bitcoin-tidy.cpp#L22).\r\n\r\nFor 1:\r\n\r\nCould you please try this and seeing if anything changes for better or worse (and see how the link-line changes)?\r\n```diff\r\ndiff --git a/contrib/devtools/bitcoin-tidy/CMakeLists.txt b/contrib/devtools/bitcoin-tidy/CMakeLists.txt\r\nindex 9ed18696d4..ae168c77af 100644\r\n--- a/contrib/devtools/bitcoin-tidy/CMakeLists.txt\r\n+++ b/contrib/devtools/bitcoin-tidy/CMakeLists.txt\r\n@@ -14,7 +14,7 @@ find_program(CLANG_TIDY_EXE NAMES \"clang-tidy-${LLVM_VERSION_MAJOR}\" \"clang-tidy\r\n message(STATUS \"Found LLVM ${LLVM_PACKAGE_VERSION}\")\r\n message(STATUS \"Found clang-tidy: ${CLANG_TIDY_EXE}\")\r\n\r\n-add_library(bitcoin-tidy MODULE bitcoin-tidy.cpp logprintf.cpp)\r\n+add_library(bitcoin-tidy SHARED bitcoin-tidy.cpp logprintf.cpp)\r\n target_include_directories(bitcoin-tidy SYSTEM PRIVATE ${LLVM_INCLUDE_DIRS})\r\n\r\n # Disable RTTI and exceptions as necessary\r\n```\r\n\r\nFor 2, I must admit I haven't really looked into what the magic is doing so there's a good chance I didn't get it hooked up correctly. I'm guessing the objects need to reference each-other to keep symbols from being optimized out. Upstream LLVM seems kinda inconsistent about how they use the anchors, but I think [this one would be a good one to follow](https://github.com/llvm/llvm-project/blob/main/clang-tools-extra/clang-tidy/abseil/AbseilTidyModule.cpp#L83):\r\n\r\nCould you please try:\r\n```diff\r\ndiff --git a/contrib/devtools/bitcoin-tidy/bitcoin-tidy.cpp b/contrib/devtools/bitcoin-tidy/bitcoin-tidy.cpp\r\nindex 0f34d37793..ec89590aa8 100644\r\n--- a/contrib/devtools/bitcoin-tidy/bitcoin-tidy.cpp\r\n+++ b/contrib/devtools/bitcoin-tidy/bitcoin-tidy.cpp\r\n@@ -19,4 +19,4 @@ public:\r\n static clang::tidy::ClangTidyModuleRegistry::Add<BitcoinModule>\r\n     X(\"bitcoin-module\", \"Adds bitcoin checks.\");\r\n\r\n-volatile int BitcoinModuleAnchorSource = 0;\r\n+extern volatile int BitcoinModuleAnchorSource;\r\ndiff --git a/contrib/devtools/bitcoin-tidy/logprintf.cpp b/contrib/devtools/bitcoin-tidy/logprintf.cpp\r\nindex 1690c8fde0..b79e6f1486 100644\r\n--- a/contrib/devtools/bitcoin-tidy/logprintf.cpp\r\n+++ b/contrib/devtools/bitcoin-tidy/logprintf.cpp\r\n@@ -60,3 +60,5 @@ void LogPrintfCheck::check(const clang::ast_matchers::MatchFinder::MatchResult&\r\n }\r\n\r\n } // namespace bitcoin\r\n+\r\n+int BitcoinModuleAnchorSource = 0;\r\n```",
      "created_at": "2023-08-10T14:52:22Z",
      "updated_at": "2023-08-10T14:52:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28245#discussion_r1290259830",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1290259830"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28245"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 8,
      "original_line": 8,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1290358956",
      "pull_request_review_id": 1572250536,
      "id": 1290358956,
      "node_id": "PRRC_kwDOABII585M6VCs",
      "diff_hunk": "@@ -3,6 +3,9 @@\n Example Usage:\n \n ```bash\n-cmake -S . -B build -DLLVM_DIR=/path/to/lib/cmake/llvm -DCMAKE_BUILD_TYPE=Release\n-make -C build -j$(nproc)\n+cmake -S . -B build -DLLVM_DIR=$(llvm-config --libdir)/cmake/llvm -DCMAKE_BUILD_TYPE=Release\n+\n+cmake --build build -j$(nproc)",
      "path": "contrib/devtools/bitcoin-tidy/README",
      "position": 8,
      "original_position": 8,
      "commit_id": "d82bb90a5b9dc1fd48b10514bdcd8f425aced256",
      "original_commit_id": "8651b998ffc80b2a1b79a47b47f2b54924db0512",
      "in_reply_to_id": 1289401710,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thank you @fanquake and @theuni. I thought I was using clang/llvm from homebrew (and have `export PATH=\"/opt/homebrew/opt/llvm/bin:$PATH\"` in `.zshrc`) but could be missing something (edit: and the cmake output below prints `AppleClang 14`). Tried 1. and 2. above and still see `Undefined symbols for architecture arm64` at the second step.\r\n\r\n<details><summary>output of <code>make VERBOSE=1</code></summary><p>\r\n\r\n```bash\r\njon|master =:~/bitcoin/bitcoin/contrib/devtools/bitcoin-tidy$ clang --version  \r\nHomebrew clang version 16.0.6\r\nTarget: arm64-apple-darwin22.6.0\r\nThread model: posix\r\nInstalledDir: /opt/homebrew/opt/llvm/bin\r\n\r\njon|master =:~/bitcoin/bitcoin/contrib/devtools/bitcoin-tidy$ which clang      \r\n/opt/homebrew/opt/llvm/bin/clang\r\n\r\njon|master =:~/bitcoin/bitcoin/contrib/devtools/bitcoin-tidy$ rm -rf build\r\n\r\njon|master =:~/bitcoin/bitcoin/contrib/devtools/bitcoin-tidy$ cmake -S . -B build -DLLVM_DIR=$(llvm-config --cmakedir) -DCMAKE_BUILD_TYPE=Release\r\n-- The C compiler identification is AppleClang 14.0.3.14030022\r\n-- The CXX compiler identification is AppleClang 14.0.3.14030022\r\n-- Detecting C compiler ABI info\r\n-- Detecting C compiler ABI info - done\r\n-- Check for working C compiler: /opt/homebrew/opt/ccache/libexec/cc - skipped\r\n-- Detecting C compile features\r\n-- Detecting C compile features - done\r\n-- Detecting CXX compiler ABI info\r\n-- Detecting CXX compiler ABI info - done\r\n-- Check for working CXX compiler: /opt/homebrew/opt/ccache/libexec/c++ - skipped\r\n-- Detecting CXX compile features\r\n-- Detecting CXX compile features - done\r\n-- Performing Test HAVE_FFI_CALL\r\n-- Performing Test HAVE_FFI_CALL - Success\r\n-- Found FFI: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/lib/libffi.tbd  \r\n-- Performing Test Terminfo_LINKABLE\r\n-- Performing Test Terminfo_LINKABLE - Success\r\n-- Found Terminfo: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/lib/libcurses.tbd  \r\n-- Found ZLIB: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/lib/libz.tbd (found version \"1.2.11\")  \r\n-- Found zstd: /opt/homebrew/lib/libzstd.dylib  \r\n-- Found LibXml2: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/lib/libxml2.tbd (found version \"2.9.13\") \r\n-- Found LLVM 16.0.6\r\n-- Found clang-tidy: /opt/homebrew/Cellar/llvm/16.0.6/bin/clang-tidy\r\n-- Configuring done (1.1s)\r\n-- Generating done (0.0s)\r\n-- Build files have been written to: /Users/jon/bitcoin/bitcoin/contrib/devtools/bitcoin-tidy/build\r\n\r\njon|master =:~/bitcoin/bitcoin/contrib/devtools/bitcoin-tidy$ make VERBOSE=1                                                                     \r\nmake: *** No targets specified and no makefile found.  Stop.\r\n\r\njon|master =:~/bitcoin/bitcoin/contrib/devtools/bitcoin-tidy$ cd build\r\n\r\njon|master =:~/bitcoin/bitcoin/contrib/devtools/bitcoin-tidy/build$ make VERBOSE=1\r\n/opt/homebrew/Cellar/cmake/3.27.1/bin/cmake -S/Users/jon/bitcoin/bitcoin/contrib/devtools/bitcoin-tidy -B/Users/jon/bitcoin/bitcoin/contrib/devtools/bitcoin-tidy/build --check-build-system CMakeFiles/Makefile.cmake 0\r\n/opt/homebrew/Cellar/cmake/3.27.1/bin/cmake -E cmake_progress_start /Users/jon/bitcoin/bitcoin/contrib/devtools/bitcoin-tidy/build/CMakeFiles /Users/jon/bitcoin/bitcoin/contrib/devtools/bitcoin-tidy/build//CMakeFiles/progress.marks\r\n/Applications/Xcode.app/Contents/Developer/usr/bin/make  -f CMakeFiles/Makefile2 all\r\n/Applications/Xcode.app/Contents/Developer/usr/bin/make  -f CMakeFiles/bitcoin-tidy.dir/build.make CMakeFiles/bitcoin-tidy.dir/depend\r\ncd /Users/jon/bitcoin/bitcoin/contrib/devtools/bitcoin-tidy/build && /opt/homebrew/Cellar/cmake/3.27.1/bin/cmake -E cmake_depends \"Unix Makefiles\" /Users/jon/bitcoin/bitcoin/contrib/devtools/bitcoin-tidy /Users/jon/bitcoin/bitcoin/contrib/devtools/bitcoin-tidy /Users/jon/bitcoin/bitcoin/contrib/devtools/bitcoin-tidy/build /Users/jon/bitcoin/bitcoin/contrib/devtools/bitcoin-tidy/build /Users/jon/bitcoin/bitcoin/contrib/devtools/bitcoin-tidy/build/CMakeFiles/bitcoin-tidy.dir/DependInfo.cmake \"--color=\"\r\n/Applications/Xcode.app/Contents/Developer/usr/bin/make  -f CMakeFiles/bitcoin-tidy.dir/build.make CMakeFiles/bitcoin-tidy.dir/build\r\n[ 33%] Building CXX object CMakeFiles/bitcoin-tidy.dir/bitcoin-tidy.cpp.o\r\n/opt/homebrew/opt/ccache/libexec/c++ -Dbitcoin_tidy_EXPORTS -isystem /opt/homebrew/Cellar/llvm/16.0.6/include -O3 -DNDEBUG -std=c++17 -arch arm64 -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk -fPIC -fno-rtti -fno-exceptions -Wall -Wextra -MD -MT CMakeFiles/bitcoin-tidy.dir/bitcoin-tidy.cpp.o -MF CMakeFiles/bitcoin-tidy.dir/bitcoin-tidy.cpp.o.d -o CMakeFiles/bitcoin-tidy.dir/bitcoin-tidy.cpp.o -c /Users/jon/bitcoin/bitcoin/contrib/devtools/bitcoin-tidy/bitcoin-tidy.cpp\r\n[ 66%] Building CXX object CMakeFiles/bitcoin-tidy.dir/logprintf.cpp.o\r\n/opt/homebrew/opt/ccache/libexec/c++ -Dbitcoin_tidy_EXPORTS -isystem /opt/homebrew/Cellar/llvm/16.0.6/include -O3 -DNDEBUG -std=c++17 -arch arm64 -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk -fPIC -fno-rtti -fno-exceptions -Wall -Wextra -MD -MT CMakeFiles/bitcoin-tidy.dir/logprintf.cpp.o -MF CMakeFiles/bitcoin-tidy.dir/logprintf.cpp.o.d -o CMakeFiles/bitcoin-tidy.dir/logprintf.cpp.o -c /Users/jon/bitcoin/bitcoin/contrib/devtools/bitcoin-tidy/logprintf.cpp\r\n/Users/jon/bitcoin/bitcoin/contrib/devtools/bitcoin-tidy/logprintf.cpp:12:1: warning: unused parameter 'Finder' [-Wunused-parameter]\r\nAST_MATCHER(clang::StringLiteral, unterminated)\r\n^\r\n/opt/homebrew/Cellar/llvm/16.0.6/include/clang/ASTMatchers/ASTMatchersMacros.h:112:56: note: expanded from macro 'AST_MATCHER'\r\n      ::clang::ast_matchers::internal::ASTMatchFinder *Finder,                 \\\r\n                                                       ^\r\n/Users/jon/bitcoin/bitcoin/contrib/devtools/bitcoin-tidy/logprintf.cpp:12:1: warning: unused parameter 'Builder' [-Wunused-parameter]\r\n/opt/homebrew/Cellar/llvm/16.0.6/include/clang/ASTMatchers/ASTMatchersMacros.h:113:63: note: expanded from macro 'AST_MATCHER'\r\n      ::clang::ast_matchers::internal::BoundNodesTreeBuilder *Builder) const\r\n                                                              ^\r\n2 warnings generated.\r\n[100%] Linking CXX shared module libbitcoin-tidy.so\r\n/opt/homebrew/Cellar/cmake/3.27.1/bin/cmake -E cmake_link_script CMakeFiles/bitcoin-tidy.dir/link.txt --verbose=1\r\n/opt/homebrew/opt/ccache/libexec/c++ -O3 -DNDEBUG -arch arm64 -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk -bundle -Wl,-headerpad_max_install_names -o libbitcoin-tidy.so \"CMakeFiles/bitcoin-tidy.dir/bitcoin-tidy.cpp.o\" \"CMakeFiles/bitcoin-tidy.dir/logprintf.cpp.o\" \r\nUndefined symbols for architecture arm64:\r\n  \"llvm::SmallVectorBase<unsigned int>::mallocForGrow(void*, unsigned long, unsigned long, unsigned long&)\", referenced from:\r\n      llvm::SmallVectorTemplateBase<clang::FixItHint, false>::reserveForParamAndGetAddress(clang::FixItHint const&, unsigned long) in logprintf.cpp.o\r\n  \"llvm::DisableABIBreakingChecks\", referenced from:\r\n      llvm::VerifyDisableABIBreakingChecks in bitcoin-tidy.cpp.o\r\n      llvm::VerifyDisableABIBreakingChecks in logprintf.cpp.o\r\n  \"llvm::Registry<clang::tidy::ClangTidyModule>::add_node(llvm::Registry<clang::tidy::ClangTidyModule>::node*)\", referenced from:\r\n      __GLOBAL__sub_I_bitcoin_tidy.cpp in bitcoin-tidy.cpp.o\r\n  \"clang::ASTNodeKind::getFromNode(clang::Decl const&)\", referenced from:\r\n      clang::ast_matchers::internal::HasDeclarationMatcher<clang::QualType, clang::ast_matchers::internal::Matcher<clang::Decl>>::matchesSpecialized(clang::Type const&, clang::ast_matchers::internal::ASTMatchFinder*, clang::ast_matchers::internal::BoundNodesTreeBuilder*) const in logprintf.cpp.o\r\n      clang::ast_matchers::internal::HasDeclarationMatcher<clang::CallExpr, clang::ast_matchers::internal::Matcher<clang::Decl>>::matches(clang::CallExpr const&, clang::ast_matchers::internal::ASTMatchFinder*, clang::ast_matchers::internal::BoundNodesTreeBuilder*) const in logprintf.cpp.o\r\n  \"clang::ASTNodeKind::getFromNode(clang::Stmt const&)\", referenced from:\r\n      clang::ast_matchers::internal::matcher_thisPointerType0Matcher::matches(clang::CXXMemberCallExpr const&, clang::ast_matchers::internal::ASTMatchFinder*, clang::ast_matchers::internal::BoundNodesTreeBuilder*) const in logprintf.cpp.o\r\n      clang::ast_matchers::internal::matcher_onImplicitObjectArgument0Matcher::matches(clang::CXXMemberCallExpr const&, clang::ast_matchers::internal::ASTMatchFinder*, clang::ast_matchers::internal::BoundNodesTreeBuilder*) const in logprintf.cpp.o\r\n      clang::ast_matchers::internal::matcher_hasArgument0Matcher<clang::CallExpr, unsigned int, clang::ast_matchers::internal::Matcher<clang::Expr>>::matches(clang::CallExpr const&, clang::ast_matchers::internal::ASTMatchFinder*, clang::ast_matchers::internal::BoundNodesTreeBuilder*) const in logprintf.cpp.o\r\n      clang::ast_matchers::internal::matcher_callee1Matcher<clang::CallExpr, clang::ast_matchers::internal::Matcher<clang::Decl>>::matches(clang::CallExpr const&, clang::ast_matchers::internal::ASTMatchFinder*, clang::ast_matchers::internal::BoundNodesTreeBuilder*) const in logprintf.cpp.o\r\n      clang::ast_matchers::internal::matcher_callee1Matcher<clang::CXXMemberCallExpr, clang::ast_matchers::internal::Matcher<clang::Decl>>::matches(clang::CXXMemberCallExpr const&, clang::ast_matchers::internal::ASTMatchFinder*, clang::ast_matchers::internal::BoundNodesTreeBuilder*) const in logprintf.cpp.o\r\n      clang::ast_matchers::internal::matcher_hasArgument0Matcher<clang::CXXMemberCallExpr, unsigned int, clang::ast_matchers::internal::Matcher<clang::Expr>>::matches(clang::CXXMemberCallExpr const&, clang::ast_matchers::internal::ASTMatchFinder*, clang::ast_matchers::internal::BoundNodesTreeBuilder*) const in logprintf.cpp.o\r\n  \"clang::ast_matchers::MatchFinder::addMatcher(clang::ast_matchers::internal::Matcher<clang::Stmt> const&, clang::ast_matchers::MatchFinder::MatchCallback*)\", referenced from:\r\n      bitcoin::LogPrintfCheck::registerMatchers(clang::ast_matchers::MatchFinder*) in logprintf.cpp.o\r\n  \"clang::ast_matchers::MatchFinder::MatchCallback::~MatchCallback()\", referenced from:\r\n      bitcoin::LogPrintfCheck::~LogPrintfCheck() in logprintf.cpp.o\r\n      bitcoin::LogPrintfCheck::~LogPrintfCheck() in logprintf.cpp.o\r\n  \"clang::ast_matchers::cxxMemberCallExpr\", referenced from:\r\n      bitcoin::LogPrintfCheck::registerMatchers(clang::ast_matchers::MatchFinder*) in logprintf.cpp.o\r\n  \"clang::ast_matchers::anyOf\", referenced from:\r\n      clang::ast_matchers::internal::matcher_thisPointerType0Matcher::matches(clang::CXXMemberCallExpr const&, clang::ast_matchers::internal::ASTMatchFinder*, clang::ast_matchers::internal::BoundNodesTreeBuilder*) const in logprintf.cpp.o\r\n  \"clang::ast_matchers::callExpr\", referenced from:\r\n      bitcoin::LogPrintfCheck::registerMatchers(clang::ast_matchers::MatchFinder*) in logprintf.cpp.o\r\n  \"clang::ast_matchers::internal::HasNameMatcher::HasNameMatcher(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>)\", referenced from:\r\n      clang::ast_matchers::hasName(llvm::StringRef) in logprintf.cpp.o\r\n  \"clang::ast_matchers::internal::DynTypedMatcher::trueMatcher(clang::ASTNodeKind)\", referenced from:\r\n      clang::ast_matchers::internal::BindableMatcher<clang::QualType> clang::ast_matchers::internal::makeAllOfComposite<clang::QualType>(llvm::ArrayRef<clang::ast_matchers::internal::Matcher<clang::QualType> const*>) in logprintf.cpp.o\r\n      clang::ast_matchers::internal::BindableMatcher<clang::CXXRecordDecl> clang::ast_matchers::internal::makeAllOfComposite<clang::CXXRecordDecl>(llvm::ArrayRef<clang::ast_matchers::internal::Matcher<clang::CXXRecordDecl> const*>) in logprintf.cpp.o\r\n      clang::ast_matchers::internal::BindableMatcher<clang::FunctionDecl> clang::ast_matchers::internal::makeAllOfComposite<clang::FunctionDecl>(llvm::ArrayRef<clang::ast_matchers::internal::Matcher<clang::FunctionDecl> const*>) in logprintf.cpp.o\r\n      clang::ast_matchers::internal::BindableMatcher<clang::StringLiteral> clang::ast_matchers::internal::makeAllOfComposite<clang::StringLiteral>(llvm::ArrayRef<clang::ast_matchers::internal::Matcher<clang::StringLiteral> const*>) in logprintf.cpp.o\r\n      clang::ast_matchers::internal::BindableMatcher<clang::CallExpr> clang::ast_matchers::internal::makeAllOfComposite<clang::CallExpr>(llvm::ArrayRef<clang::ast_matchers::internal::Matcher<clang::CallExpr> const*>) in logprintf.cpp.o\r\n      clang::ast_matchers::internal::BindableMatcher<clang::CXXMethodDecl> clang::ast_matchers::internal::makeAllOfComposite<clang::CXXMethodDecl>(llvm::ArrayRef<clang::ast_matchers::internal::Matcher<clang::CXXMethodDecl> const*>) in logprintf.cpp.o\r\n      clang::ast_matchers::internal::BindableMatcher<clang::CXXMemberCallExpr> clang::ast_matchers::internal::makeAllOfComposite<clang::CXXMemberCallExpr>(llvm::ArrayRef<clang::ast_matchers::internal::Matcher<clang::CXXMemberCallExpr> const*>) in logprintf.cpp.o\r\n      ...\r\n  \"clang::ast_matchers::internal::DynTypedMatcher::constructVariadic(clang::ast_matchers::internal::DynTypedMatcher::VariadicOperator, clang::ASTNodeKind, std::__1::vector<clang::ast_matchers::internal::DynTypedMatcher, std::__1::allocator<clang::ast_matchers::internal::DynTypedMatcher>>)\", referenced from:\r\n      clang::ast_matchers::internal::VariadicOperatorMatcher<clang::ast_matchers::internal::PolymorphicMatcher<clang::ast_matchers::internal::matcher_hasType0Matcher, void (clang::ast_matchers::internal::TypeList<clang::Expr, clang::FriendDecl, clang::TypedefNameDecl, clang::ValueDecl, clang::CXXBaseSpecifier>), clang::ast_matchers::internal::Matcher<clang::QualType>>, clang::ast_matchers::internal::PolymorphicMatcher<clang::ast_matchers::internal::matcher_hasType0Matcher, void (clang::ast_matchers::internal::TypeList<clang::Expr, clang::FriendDecl, clang::TypedefNameDecl, clang::ValueDecl, clang::CXXBaseSpecifier>), clang::ast_matchers::internal::Matcher<clang::QualType>>>::operator clang::ast_matchers::internal::Matcher<clang::Expr><clang::Expr>() && in logprintf.cpp.o\r\n      clang::ast_matchers::internal::BindableMatcher<clang::QualType> clang::ast_matchers::internal::makeAllOfComposite<clang::QualType>(llvm::ArrayRef<clang::ast_matchers::internal::Matcher<clang::QualType> const*>) in logprintf.cpp.o\r\n      clang::ast_matchers::internal::BindableMatcher<clang::CXXRecordDecl> clang::ast_matchers::internal::makeAllOfComposite<clang::CXXRecordDecl>(llvm::ArrayRef<clang::ast_matchers::internal::Matcher<clang::CXXRecordDecl> const*>) in logprintf.cpp.o\r\n      clang::ast_matchers::internal::BindableMatcher<clang::FunctionDecl> clang::ast_matchers::internal::makeAllOfComposite<clang::FunctionDecl>(llvm::ArrayRef<clang::ast_matchers::internal::Matcher<clang::FunctionDecl> const*>) in logprintf.cpp.o\r\n      clang::ast_matchers::internal::BindableMatcher<clang::StringLiteral> clang::ast_matchers::internal::makeAllOfComposite<clang::StringLiteral>(llvm::ArrayRef<clang::ast_matchers::internal::Matcher<clang::StringLiteral> const*>) in logprintf.cpp.o\r\n      clang::ast_matchers::internal::BindableMatcher<clang::CallExpr> clang::ast_matchers::internal::makeAllOfComposite<clang::CallExpr>(llvm::ArrayRef<clang::ast_matchers::internal::Matcher<clang::CallExpr> const*>) in logprintf.cpp.o\r\n      clang::ast_matchers::internal::BindableMatcher<clang::CXXMethodDecl> clang::ast_matchers::internal::makeAllOfComposite<clang::CXXMethodDecl>(llvm::ArrayRef<clang::ast_matchers::internal::Matcher<clang::CXXMethodDecl> const*>) in logprintf.cpp.o\r\n      ...\r\n  \"clang::DiagnosticsEngine::EmitCurrentDiagnostic(bool)\", referenced from:\r\n      bitcoin::LogPrintfCheck::check(clang::ast_matchers::MatchFinder::MatchResult const&) in logprintf.cpp.o\r\n  \"clang::Expr::IgnoreParenImpCasts()\", referenced from:\r\n      clang::ast_matchers::internal::matcher_hasArgument0Matcher<clang::CallExpr, unsigned int, clang::ast_matchers::internal::Matcher<clang::Expr>>::matches(clang::CallExpr const&, clang::ast_matchers::internal::ASTMatchFinder*, clang::ast_matchers::internal::BoundNodesTreeBuilder*) const in logprintf.cpp.o\r\n      clang::ast_matchers::internal::matcher_hasArgument0Matcher<clang::CXXMemberCallExpr, unsigned int, clang::ast_matchers::internal::Matcher<clang::Expr>>::matches(clang::CXXMemberCallExpr const&, clang::ast_matchers::internal::ASTMatchFinder*, clang::ast_matchers::internal::BoundNodesTreeBuilder*) const in logprintf.cpp.o\r\n  \"clang::Expr::getReferencedDeclOfCallee()\", referenced from:\r\n      clang::ast_matchers::internal::HasDeclarationMatcher<clang::CallExpr, clang::ast_matchers::internal::Matcher<clang::Decl>>::matches(clang::CallExpr const&, clang::ast_matchers::internal::ASTMatchFinder*, clang::ast_matchers::internal::BoundNodesTreeBuilder*) const in logprintf.cpp.o\r\n  \"clang::tidy::ClangTidyCheck::run(clang::ast_matchers::MatchFinder::MatchResult const&)\", referenced from:\r\n      vtable for bitcoin::LogPrintfCheck in logprintf.cpp.o\r\n  \"clang::tidy::ClangTidyCheck::diag(clang::SourceLocation, llvm::StringRef, clang::DiagnosticIDs::Level)\", referenced from:\r\n      bitcoin::LogPrintfCheck::check(clang::ast_matchers::MatchFinder::MatchResult const&) in logprintf.cpp.o\r\n  \"clang::tidy::ClangTidyCheck::ClangTidyCheck(llvm::StringRef, clang::tidy::ClangTidyContext*)\", referenced from:\r\n      std::__1::__function::__func<void clang::tidy::ClangTidyCheckFactories::registerCheck<bitcoin::LogPrintfCheck>(llvm::StringRef)::'lambda'(llvm::StringRef, clang::tidy::ClangTidyContext*), std::__1::allocator<void clang::tidy::ClangTidyCheckFactories::registerCheck<bitcoin::LogPrintfCheck>(llvm::StringRef)::'lambda'(llvm::StringRef, clang::tidy::ClangTidyContext*)>, std::__1::unique_ptr<clang::tidy::ClangTidyCheck, std::__1::default_delete<clang::tidy::ClangTidyCheck>> (llvm::StringRef, clang::tidy::ClangTidyContext*)>::operator()(llvm::StringRef&&, clang::tidy::ClangTidyContext*&&) in bitcoin-tidy.cpp.o\r\n  \"clang::tidy::ClangTidyModule::getModuleOptions()\", referenced from:\r\n      vtable for BitcoinModule in bitcoin-tidy.cpp.o\r\n  \"clang::tidy::ClangTidyCheckFactories::registerCheckFactory(llvm::StringRef, std::__1::function<std::__1::unique_ptr<clang::tidy::ClangTidyCheck, std::__1::default_delete<clang::tidy::ClangTidyCheck>> (llvm::StringRef, clang::tidy::ClangTidyContext*)>)\", referenced from:\r\n      BitcoinModule::addCheckFactories(clang::tidy::ClangTidyCheckFactories&) in bitcoin-tidy.cpp.o\r\n  \"clang::ASTNodeKind::isBaseOf(clang::ASTNodeKind, unsigned int*) const\", referenced from:\r\n      bitcoin::LogPrintfCheck::check(clang::ast_matchers::MatchFinder::MatchResult const&) in logprintf.cpp.o\r\n  \"clang::TemplateName::getAsTemplateDecl() const\", referenced from:\r\n      clang::ast_matchers::internal::HasDeclarationMatcher<clang::QualType, clang::ast_matchers::internal::Matcher<clang::Decl>>::matchesSpecialized(clang::Type const&, clang::ast_matchers::internal::ASTMatchFinder*, clang::ast_matchers::internal::BoundNodesTreeBuilder*) const in logprintf.cpp.o\r\n  \"clang::ast_matchers::MatchFinder::MatchCallback::getCheckTraversalKind() const\", referenced from:\r\n      vtable for bitcoin::LogPrintfCheck in logprintf.cpp.o\r\n  \"clang::ast_matchers::internal::ASTMatchFinder::isTraversalIgnoringImplicitNodes() const\", referenced from:\r\n      clang::ast_matchers::internal::HasDeclarationMatcher<clang::QualType, clang::ast_matchers::internal::Matcher<clang::Decl>>::matchesSpecialized(clang::Type const&, clang::ast_matchers::internal::ASTMatchFinder*, clang::ast_matchers::internal::BoundNodesTreeBuilder*) const in logprintf.cpp.o\r\n      clang::ast_matchers::internal::matcher_hasArgument0Matcher<clang::CallExpr, unsigned int, clang::ast_matchers::internal::Matcher<clang::Expr>>::matches(clang::CallExpr const&, clang::ast_matchers::internal::ASTMatchFinder*, clang::ast_matchers::internal::BoundNodesTreeBuilder*) const in logprintf.cpp.o\r\n      clang::ast_matchers::internal::HasDeclarationMatcher<clang::CallExpr, clang::ast_matchers::internal::Matcher<clang::Decl>>::matches(clang::CallExpr const&, clang::ast_matchers::internal::ASTMatchFinder*, clang::ast_matchers::internal::BoundNodesTreeBuilder*) const in logprintf.cpp.o\r\n      clang::ast_matchers::internal::matcher_hasArgument0Matcher<clang::CXXMemberCallExpr, unsigned int, clang::ast_matchers::internal::Matcher<clang::Expr>>::matches(clang::CXXMemberCallExpr const&, clang::ast_matchers::internal::ASTMatchFinder*, clang::ast_matchers::internal::BoundNodesTreeBuilder*) const in logprintf.cpp.o\r\n  \"clang::ast_matchers::internal::DynTypedMatcher::matches(clang::DynTypedNode const&, clang::ast_matchers::internal::ASTMatchFinder*, clang::ast_matchers::internal::BoundNodesTreeBuilder*) const\", referenced from:\r\n      clang::ast_matchers::internal::matcher_thisPointerType0Matcher::matches(clang::CXXMemberCallExpr const&, clang::ast_matchers::internal::ASTMatchFinder*, clang::ast_matchers::internal::BoundNodesTreeBuilder*) const in logprintf.cpp.o\r\n      clang::ast_matchers::internal::matcher_onImplicitObjectArgument0Matcher::matches(clang::CXXMemberCallExpr const&, clang::ast_matchers::internal::ASTMatchFinder*, clang::ast_matchers::internal::BoundNodesTreeBuilder*) const in logprintf.cpp.o\r\n      clang::ast_matchers::internal::matcher_pointsTo0Matcher::matches(clang::QualType const&, clang::ast_matchers::internal::ASTMatchFinder*, clang::ast_matchers::internal::BoundNodesTreeBuilder*) const in logprintf.cpp.o\r\n      clang::ast_matchers::internal::matcher_hasType0Matcher<clang::Expr, clang::ast_matchers::internal::Matcher<clang::QualType>>::matches(clang::Expr const&, clang::ast_matchers::internal::ASTMatchFinder*, clang::ast_matchers::internal::BoundNodesTreeBuilder*) const in logprintf.cpp.o\r\n      clang::ast_matchers::internal::HasDeclarationMatcher<clang::QualType, clang::ast_matchers::internal::Matcher<clang::Decl>>::matchesSpecialized(clang::Type const&, clang::ast_matchers::internal::ASTMatchFinder*, clang::ast_matchers::internal::BoundNodesTreeBuilder*) const in logprintf.cpp.o\r\n      clang::ast_matchers::internal::matcher_hasArgument0Matcher<clang::CallExpr, unsigned int, clang::ast_matchers::internal::Matcher<clang::Expr>>::matches(clang::CallExpr const&, clang::ast_matchers::internal::ASTMatchFinder*, clang::ast_matchers::internal::BoundNodesTreeBuilder*) const in logprintf.cpp.o\r\n      clang::ast_matchers::internal::matcher_callee1Matcher<clang::CallExpr, clang::ast_matchers::internal::Matcher<clang::Decl>>::matches(clang::CallExpr const&, clang::ast_matchers::internal::ASTMatchFinder*, clang::ast_matchers::internal::BoundNodesTreeBuilder*) const in logprintf.cpp.o\r\n      ...\r\n  \"clang::ast_matchers::internal::DynTypedMatcher::tryBind(llvm::StringRef) const\", referenced from:\r\n      bitcoin::LogPrintfCheck::registerMatchers(clang::ast_matchers::MatchFinder*) in logprintf.cpp.o\r\n  \"clang::ast_matchers::internal::DynTypedMatcher::dynCastTo(clang::ASTNodeKind) const\", referenced from:\r\n      bitcoin::LogPrintfCheck::registerMatchers(clang::ast_matchers::MatchFinder*) in logprintf.cpp.o\r\n      clang::ast_matchers::internal::BindableMatcher<clang::Stmt> clang::ast_matchers::internal::VariadicFunction<clang::ast_matchers::internal::BindableMatcher<clang::Stmt>, clang::ast_matchers::internal::Matcher<clang::CallExpr>, &clang::ast_matchers::internal::BindableMatcher<clang::Stmt> clang::ast_matchers::internal::makeDynCastAllOfComposite<clang::Stmt, clang::CallExpr>(llvm::ArrayRef<clang::ast_matchers::internal::Matcher<clang::CallExpr> const*>)>::operator()<clang::ast_matchers::internal::PolymorphicMatcher<clang::ast_matchers::internal::matcher_hasArgument0Matcher, void (clang::ast_matchers::internal::TypeList<clang::CallExpr, clang::CXXConstructExpr, clang::CXXUnresolvedConstructExpr, clang::ObjCMessageExpr>), unsigned int, clang::ast_matchers::internal::Matcher<clang::Expr>>>(clang::ast_matchers::internal::Matcher<clang::CallExpr> const&, clang::ast_matchers::internal::PolymorphicMatcher<clang::ast_matchers::internal::matcher_hasArgument0Matcher, void (clang::ast_matchers::internal::TypeList<clang::CallExpr, clang::CXXConstructExpr, clang::CXXUnresolvedConstructExpr, clang::ObjCMessageExpr>), unsigned int, clang::ast_matchers::internal::Matcher<clang::Expr>> const&) const in logprintf.cpp.o\r\n      clang::ast_matchers::internal::BindableMatcher<clang::Stmt> clang::ast_matchers::internal::VariadicFunction<clang::ast_matchers::internal::BindableMatcher<clang::Stmt>, clang::ast_matchers::internal::Matcher<clang::CXXMemberCallExpr>, &clang::ast_matchers::internal::BindableMatcher<clang::Stmt> clang::ast_matchers::internal::makeDynCastAllOfComposite<clang::Stmt, clang::CXXMemberCallExpr>(llvm::ArrayRef<clang::ast_matchers::internal::Matcher<clang::CXXMemberCallExpr> const*>)>::operator()<clang::ast_matchers::internal::PolymorphicMatcher<clang::ast_matchers::internal::matcher_callee1Matcher, void (clang::ast_matchers::internal::TypeList<clang::ObjCMessageExpr, clang::CallExpr>), clang::ast_matchers::internal::Matcher<clang::Decl>>, clang::ast_matchers::internal::PolymorphicMatcher<clang::ast_matchers::internal::matcher_hasArgument0Matcher, void (clang::ast_matchers::internal::TypeList<clang::CallExpr, clang::CXXConstructExpr, clang::CXXUnresolvedConstructExpr, clang::ObjCMessageExpr>), unsigned int, clang::ast_matchers::internal::Matcher<clang::Expr>>>(clang::ast_matchers::internal::Matcher<clang::CXXMemberCallExpr> const&, clang::ast_matchers::internal::PolymorphicMatcher<clang::ast_matchers::internal::matcher_callee1Matcher, void (clang::ast_matchers::internal::TypeList<clang::ObjCMessageExpr, clang::CallExpr>), clang::ast_matchers::internal::Matcher<clang::Decl>> const&, clang::ast_matchers::internal::PolymorphicMatcher<clang::ast_matchers::internal::matcher_hasArgument0Matcher, void (clang::ast_matchers::internal::TypeList<clang::CallExpr, clang::CXXConstructExpr, clang::CXXUnresolvedConstructExpr, clang::ObjCMessageExpr>), unsigned int, clang::ast_matchers::internal::Matcher<clang::Expr>> const&) const in logprintf.cpp.o\r\n      clang::ast_matchers::internal::VariadicOperatorMatcher<clang::ast_matchers::internal::PolymorphicMatcher<clang::ast_matchers::internal::matcher_hasType0Matcher, void (clang::ast_matchers::internal::TypeList<clang::Expr, clang::FriendDecl, clang::TypedefNameDecl, clang::ValueDecl, clang::CXXBaseSpecifier>), clang::ast_matchers::internal::Matcher<clang::QualType>>, clang::ast_matchers::internal::PolymorphicMatcher<clang::ast_matchers::internal::matcher_hasType0Matcher, void (clang::ast_matchers::internal::TypeList<clang::Expr, clang::FriendDecl, clang::TypedefNameDecl, clang::ValueDecl, clang::CXXBaseSpecifier>), clang::ast_matchers::internal::Matcher<clang::QualType>>>::operator clang::ast_matchers::internal::Matcher<clang::Expr><clang::Expr>() && in logprintf.cpp.o\r\n      clang::ast_matchers::internal::BindableMatcher<clang::QualType> clang::ast_matchers::internal::makeAllOfComposite<clang::QualType>(llvm::ArrayRef<clang::ast_matchers::internal::Matcher<clang::QualType> const*>) in logprintf.cpp.o\r\n      clang::ast_matchers::internal::BindableMatcher<clang::CXXRecordDecl> clang::ast_matchers::internal::makeAllOfComposite<clang::CXXRecordDecl>(llvm::ArrayRef<clang::ast_matchers::internal::Matcher<clang::CXXRecordDecl> const*>) in logprintf.cpp.o\r\n      clang::ast_matchers::internal::BindableMatcher<clang::FunctionDecl> clang::ast_matchers::internal::makeAllOfComposite<clang::FunctionDecl>(llvm::ArrayRef<clang::ast_matchers::internal::Matcher<clang::FunctionDecl> const*>) in logprintf.cpp.o\r\n      ...\r\n  \"clang::StringLiteral::getLocationOfByte(unsigned int, clang::SourceManager const&, clang::LangOptions const&, clang::TargetInfo const&, unsigned int*, unsigned int*) const\", referenced from:\r\n      bitcoin::LogPrintfCheck::check(clang::ast_matchers::MatchFinder::MatchResult const&) in logprintf.cpp.o\r\n  \"clang::CXXMemberCallExpr::getImplicitObjectArgument() const\", referenced from:\r\n      clang::ast_matchers::internal::matcher_onImplicitObjectArgument0Matcher::matches(clang::CXXMemberCallExpr const&, clang::ast_matchers::internal::ASTMatchFinder*, clang::ast_matchers::internal::BoundNodesTreeBuilder*) const in logprintf.cpp.o\r\n  \"clang::ObjCInterfaceType::getDecl() const\", referenced from:\r\n      clang::ast_matchers::internal::HasDeclarationMatcher<clang::QualType, clang::ast_matchers::internal::Matcher<clang::Decl>>::matchesSpecialized(clang::Type const&, clang::ast_matchers::internal::ASTMatchFinder*, clang::ast_matchers::internal::BoundNodesTreeBuilder*) const in logprintf.cpp.o\r\n  \"clang::InjectedClassNameType::getDecl() const\", referenced from:\r\n      clang::ast_matchers::internal::HasDeclarationMatcher<clang::QualType, clang::ast_matchers::internal::Matcher<clang::Decl>>::matchesSpecialized(clang::Type const&, clang::ast_matchers::internal::ASTMatchFinder*, clang::ast_matchers::internal::BoundNodesTreeBuilder*) const in logprintf.cpp.o\r\n  \"clang::Type::getPointeeType() const\", referenced from:\r\n      clang::ast_matchers::internal::matcher_pointsTo0Matcher::matches(clang::QualType const&, clang::ast_matchers::internal::ASTMatchFinder*, clang::ast_matchers::internal::BoundNodesTreeBuilder*) const in logprintf.cpp.o\r\n  \"clang::Type::getUnqualifiedDesugaredType() const\", referenced from:\r\n      clang::ast_matchers::internal::HasDeclarationMatcher<clang::QualType, clang::ast_matchers::internal::Matcher<clang::Decl>>::matchesSpecialized(clang::Type const&, clang::ast_matchers::internal::ASTMatchFinder*, clang::ast_matchers::internal::BoundNodesTreeBuilder*) const in logprintf.cpp.o\r\n  \"clang::TagType::getDecl() const\", referenced from:\r\n      clang::ast_matchers::internal::HasDeclarationMatcher<clang::QualType, clang::ast_matchers::internal::Matcher<clang::Decl>>::matchesSpecialized(clang::Type const&, clang::ast_matchers::internal::ASTMatchFinder*, clang::ast_matchers::internal::BoundNodesTreeBuilder*) const in logprintf.cpp.o\r\n  \"clang::UsingType::getUnderlyingType() const\", referenced from:\r\n      clang::ast_matchers::internal::HasDeclarationMatcher<clang::QualType, clang::ast_matchers::internal::Matcher<clang::Decl>>::matchesSpecialized(clang::Type const&, clang::ast_matchers::internal::ASTMatchFinder*, clang::ast_matchers::internal::BoundNodesTreeBuilder*) const in logprintf.cpp.o\r\n  \"vtable for clang::tidy::ClangTidyCheck\", referenced from:\r\n      bitcoin::LogPrintfCheck::~LogPrintfCheck() in logprintf.cpp.o\r\n      bitcoin::LogPrintfCheck::~LogPrintfCheck() in logprintf.cpp.o\r\n  NOTE: a missing vtable usually means the first non-inline virtual member function has no definition.\r\nld: symbol(s) not found for architecture arm64\r\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\r\nmake[2]: *** [libbitcoin-tidy.so] Error 1\r\nmake[1]: *** [CMakeFiles/bitcoin-tidy.dir/all] Error 2\r\nmake: *** [all] Error 2\r\n```\r\n</p></details>\r\n",
      "created_at": "2023-08-10T16:01:02Z",
      "updated_at": "2023-08-10T16:04:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28245#discussion_r1290358956",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1290358956"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28245"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 8,
      "original_line": 8,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1290493781",
      "pull_request_review_id": 1572447289,
      "id": 1290493781,
      "node_id": "PRRC_kwDOABII585M619V",
      "diff_hunk": "@@ -3,6 +3,9 @@\n Example Usage:\n \n ```bash\n-cmake -S . -B build -DLLVM_DIR=/path/to/lib/cmake/llvm -DCMAKE_BUILD_TYPE=Release\n-make -C build -j$(nproc)\n+cmake -S . -B build -DLLVM_DIR=$(llvm-config --libdir)/cmake/llvm -DCMAKE_BUILD_TYPE=Release\n+\n+cmake --build build -j$(nproc)",
      "path": "contrib/devtools/bitcoin-tidy/README",
      "position": 8,
      "original_position": 8,
      "commit_id": "d82bb90a5b9dc1fd48b10514bdcd8f425aced256",
      "original_commit_id": "8651b998ffc80b2a1b79a47b47f2b54924db0512",
      "in_reply_to_id": 1289401710,
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ok, I think I see. I can force a similar error on Linux by adding \"-Wl,-no-undefined\" to the link-line.\r\n\r\nI'm guessing ld64 is opinionated about undefined symbols by default. And in this case we're relying on them.\r\n\r\nCould you try messing with undefined symbol behavior and seeing what happens?\r\n\r\n\r\n`/opt/homebrew/opt/ccache/libexec/c++ -O3 -DNDEBUG -arch arm64 -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk -bundle -Wl,-headerpad_max_install_names -o libbitcoin-tidy.so \"CMakeFiles/bitcoin-tidy.dir/bitcoin-tidy.cpp.o\" \"CMakeFiles/bitcoin-tidy.dir/logprintf.cpp.o\" -Wl,-flat_namespace -Wl,-undefined,suppress`\r\n\r\nThat should link either way (assuming I'm correct about the problem), but that doesn't necessarily mean it'll work.\r\n\r\n(You might also try `-Wl,-undefined,dynamic_lookup`)",
      "created_at": "2023-08-10T17:58:12Z",
      "updated_at": "2023-08-10T17:58:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28245#discussion_r1290493781",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1290493781"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28245"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 8,
      "original_line": 8,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1290575196",
      "pull_request_review_id": 1572571695,
      "id": 1290575196,
      "node_id": "PRRC_kwDOABII585M7J1c",
      "diff_hunk": "@@ -3,6 +3,9 @@\n Example Usage:\n \n ```bash\n-cmake -S . -B build -DLLVM_DIR=/path/to/lib/cmake/llvm -DCMAKE_BUILD_TYPE=Release\n-make -C build -j$(nproc)\n+cmake -S . -B build -DLLVM_DIR=$(llvm-config --libdir)/cmake/llvm -DCMAKE_BUILD_TYPE=Release\n+\n+cmake --build build -j$(nproc)",
      "path": "contrib/devtools/bitcoin-tidy/README",
      "position": 8,
      "original_position": 8,
      "commit_id": "d82bb90a5b9dc1fd48b10514bdcd8f425aced256",
      "original_commit_id": "8651b998ffc80b2a1b79a47b47f2b54924db0512",
      "in_reply_to_id": 1289401710,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "(Not sure I'm following your suggestions properly but this might be progress.)\r\n\r\n```bash\r\njon|master:~/bitcoin/bitcoin/contrib/devtools/bitcoin-tidy$ rm -rf build\r\n\r\njon|master:~/bitcoin/bitcoin/contrib/devtools/bitcoin-tidy$ cmake -S . -B build -DLLVM_DIR=$(llvm-config --cmakedir) -DCMAKE_BUILD_TYPE=Release -Wl,-undefined,dynamic_lookup\r\n-- The C compiler identification is AppleClang 14.0.3.14030022\r\n-- The CXX compiler identification is AppleClang 14.0.3.14030022\r\n-- Detecting C compiler ABI info\r\n-- Detecting C compiler ABI info - done\r\n-- Check for working C compiler: /opt/homebrew/opt/ccache/libexec/cc - skipped\r\n-- Detecting C compile features\r\n-- Detecting C compile features - done\r\n-- Detecting CXX compiler ABI info\r\n-- Detecting CXX compiler ABI info - done\r\n-- Check for working CXX compiler: /opt/homebrew/opt/ccache/libexec/c++ - skipped\r\n-- Detecting CXX compile features\r\n-- Detecting CXX compile features - done\r\n-- Performing Test HAVE_FFI_CALL\r\n-- Performing Test HAVE_FFI_CALL - Success\r\n-- Found FFI: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/lib/libffi.tbd  \r\n-- Performing Test Terminfo_LINKABLE\r\n-- Performing Test Terminfo_LINKABLE - Success\r\n-- Found Terminfo: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/lib/libcurses.tbd  \r\n-- Found ZLIB: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/lib/libz.tbd (found version \"1.2.11\")  \r\n-- Found zstd: /opt/homebrew/lib/libzstd.dylib  \r\n-- Found LibXml2: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/lib/libxml2.tbd (found version \"2.9.13\") \r\n-- Found LLVM 16.0.6\r\n-- Found clang-tidy: /opt/homebrew/Cellar/llvm/16.0.6/bin/clang-tidy\r\n-- Configuring done (1.1s)\r\n-- Generating done (0.0s)\r\n-- Build files have been written to: /Users/jon/bitcoin/bitcoin/contrib/devtools/bitcoin-tidy/build\r\n\r\njon|master:~/bitcoin/bitcoin/contrib/devtools/bitcoin-tidy$ cd build\r\njon|master:~/bitcoin/bitcoin/contrib/devtools/bitcoin-tidy/build$ make VERBOSE=1 \r\n...same failing output as before...\r\n\r\njon|master:~/bitcoin/bitcoin/contrib/devtools/bitcoin-tidy/build$ /opt/homebrew/opt/ccache/libexec/c++ -O3 -DNDEBUG -arch arm64 -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk -bundle -Wl,-headerpad_max_install_names -o libbitcoin-tidy.so \"CMakeFiles/bitcoin-tidy.dir/bitcoin-tidy.cpp.o\" \"CMakeFiles/bitcoin-tidy.dir/logprintf.cpp.o\" -Wl,-flat_namespace -Wl,-undefined,suppress\r\n\r\njon|master:~/bitcoin/bitcoin/contrib/devtools/bitcoin-tidy/build$ make VERBOSE=1\r\n/opt/homebrew/Cellar/cmake/3.27.1/bin/cmake -S/Users/jon/bitcoin/bitcoin/contrib/devtools/bitcoin-tidy -B/Users/jon/bitcoin/bitcoin/contrib/devtools/bitcoin-tidy/build --check-build-system CMakeFiles/Makefile.cmake 0\r\n/opt/homebrew/Cellar/cmake/3.27.1/bin/cmake -E cmake_progress_start /Users/jon/bitcoin/bitcoin/contrib/devtools/bitcoin-tidy/build/CMakeFiles /Users/jon/bitcoin/bitcoin/contrib/devtools/bitcoin-tidy/build//CMakeFiles/progress.marks\r\n/Applications/Xcode.app/Contents/Developer/usr/bin/make  -f CMakeFiles/Makefile2 all\r\n/Applications/Xcode.app/Contents/Developer/usr/bin/make  -f CMakeFiles/bitcoin-tidy.dir/build.make CMakeFiles/bitcoin-tidy.dir/depend\r\ncd /Users/jon/bitcoin/bitcoin/contrib/devtools/bitcoin-tidy/build && /opt/homebrew/Cellar/cmake/3.27.1/bin/cmake -E cmake_depends \"Unix Makefiles\" /Users/jon/bitcoin/bitcoin/contrib/devtools/bitcoin-tidy /Users/jon/bitcoin/bitcoin/contrib/devtools/bitcoin-tidy /Users/jon/bitcoin/bitcoin/contrib/devtools/bitcoin-tidy/build /Users/jon/bitcoin/bitcoin/contrib/devtools/bitcoin-tidy/build /Users/jon/bitcoin/bitcoin/contrib/devtools/bitcoin-tidy/build/CMakeFiles/bitcoin-tidy.dir/DependInfo.cmake \"--color=\"\r\nConsolidate compiler generated dependencies of target bitcoin-tidy\r\n/Applications/Xcode.app/Contents/Developer/usr/bin/make  -f CMakeFiles/bitcoin-tidy.dir/build.make CMakeFiles/bitcoin-tidy.dir/build\r\nmake[2]: Nothing to be done for `CMakeFiles/bitcoin-tidy.dir/build'.\r\n[100%] Built target bitcoin-tidy\r\n/opt/homebrew/Cellar/cmake/3.27.1/bin/cmake -E cmake_progress_start /Users/jon/bitcoin/bitcoin/contrib/devtools/bitcoin-tidy/build/CMakeFiles 0\r\n```\r\n",
      "created_at": "2023-08-10T19:12:10Z",
      "updated_at": "2023-08-10T19:14:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28245#discussion_r1290575196",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1290575196"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28245"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 8,
      "original_line": 8,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1290588401",
      "pull_request_review_id": 1572591624,
      "id": 1290588401,
      "node_id": "PRRC_kwDOABII585M7NDx",
      "diff_hunk": "@@ -3,6 +3,9 @@\n Example Usage:\n \n ```bash\n-cmake -S . -B build -DLLVM_DIR=/path/to/lib/cmake/llvm -DCMAKE_BUILD_TYPE=Release\n-make -C build -j$(nproc)\n+cmake -S . -B build -DLLVM_DIR=$(llvm-config --libdir)/cmake/llvm -DCMAKE_BUILD_TYPE=Release\n+\n+cmake --build build -j$(nproc)",
      "path": "contrib/devtools/bitcoin-tidy/README",
      "position": 8,
      "original_position": 8,
      "commit_id": "d82bb90a5b9dc1fd48b10514bdcd8f425aced256",
      "original_commit_id": "8651b998ffc80b2a1b79a47b47f2b54924db0512",
      "in_reply_to_id": 1289401710,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "(The above works with master and 2. above, but not with 1.)",
      "created_at": "2023-08-10T19:26:37Z",
      "updated_at": "2023-08-10T19:26:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28245#discussion_r1290588401",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1290588401"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28245"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 8,
      "original_line": 8,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1290589149",
      "pull_request_review_id": 1572592798,
      "id": 1290589149,
      "node_id": "PRRC_kwDOABII585M7NPd",
      "diff_hunk": "@@ -3,6 +3,9 @@\n Example Usage:\n \n ```bash\n-cmake -S . -B build -DLLVM_DIR=/path/to/lib/cmake/llvm -DCMAKE_BUILD_TYPE=Release\n-make -C build -j$(nproc)\n+cmake -S . -B build -DLLVM_DIR=$(llvm-config --libdir)/cmake/llvm -DCMAKE_BUILD_TYPE=Release\n+\n+cmake --build build -j$(nproc)",
      "path": "contrib/devtools/bitcoin-tidy/README",
      "position": 8,
      "original_position": 8,
      "commit_id": "d82bb90a5b9dc1fd48b10514bdcd8f425aced256",
      "original_commit_id": "8651b998ffc80b2a1b79a47b47f2b54924db0512",
      "in_reply_to_id": 1289401710,
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yep, looks like that worked! And it seems to be correct too, turns out [upstream LLVM does the same thing](https://github.com/llvm/llvm-project/blob/main/llvm/cmake/modules/HandleLLVMOptions.cmake#L178).\r\n\r\nThis should be the actual fix, could you please confirm that building works with it?\r\n\r\n```diff\r\ndiff --git a/contrib/devtools/bitcoin-tidy/CMakeLists.txt b/contrib/devtools/bitcoin-tidy/CMakeLists.txt\r\nindex 9ed18696d4..24216f2fb0 100644\r\n--- a/contrib/devtools/bitcoin-tidy/CMakeLists.txt\r\n+++ b/contrib/devtools/bitcoin-tidy/CMakeLists.txt\r\n@@ -25,6 +25,10 @@ else()\r\n     target_compile_options(bitcoin-tidy PRIVATE -fno-exceptions)\r\n endif()\r\n\r\n+if(CMAKE_HOST_APPLE)\r\n+    set(CMAKE_MODULE_LINKER_FLAGS \"${CMAKE_MODULE_LINKER_FLAGS} -Wl,-flat_namespace -Wl,-undefined -Wl,suppress\")\r\n+endif()\r\n+\r\n # Add warnings\r\n if (MSVC)\r\n     target_compile_options(bitcoin-tidy PRIVATE /W4)\r\n```\r\n\r\n(Making sure that this the only change, as this would conflict with some of my other suggestions for tests above)\r\n\r\nNow that you've got it building, you can see if it actually works with `make bitcoin-tidy-tests`.",
      "created_at": "2023-08-10T19:27:32Z",
      "updated_at": "2023-08-10T19:29:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28245#discussion_r1290589149",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1290589149"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28245"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 8,
      "original_line": 8,
      "side": "RIGHT"
    }
  ]
}