{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390",
    "id": 969286381,
    "node_id": "PR_kwDOABII5845xiLt",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/25390",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/25390.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/25390.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25390",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25390/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/92a444d0d73112d36abfa8875e73e26a06222891",
    "number": 25390,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "sync: introduce a thread-safe generic container and use it to remove a bunch of \"GlobalMutex\"es",
    "user": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Introduce a generic container that provides a thread-safe access to any object by using a mutex which is acquired every time the object accessed.\r\n\r\nFor example:\r\n\r\n```cpp\r\nSynced<std::unordered_map<int, int>> m{{3, 9}, {4, 16}};\r\n\r\n{\r\n    SYNCED_LOCK(m, m_locked);\r\n\r\n    // m_locked represents the internal object, i.e. std::unordered_map,\r\n    // while m_locked is in scope the internal mutex is locked.\r\n\r\n    auto it = m_locked->find(3);\r\n    if (it != m_locked->end()) {\r\n        std::cout << it->second << std::endl;\r\n    }\r\n\r\n    for (auto& [k, v] : *m_locked) {\r\n        std::cout << k << \", \" << v << std::endl;\r\n    }\r\n}\r\n\r\nWITH_SYNCED_LOCK(m, p, p->emplace(5, 25));\r\n```\r\n\r\nRemove the global mutexes `g_maplocalhost_mutex`, `g_deadline_timers_mutex`, `cs_dir_locks`, `g_loading_wallet_mutex`, `g_wallet_release_mutex` and use `Synced<T>` instead.\r\n\r\n## Benefits\r\n\r\n_copied from a [comment below](https://github.com/bitcoin/bitcoin/pull/25390#issuecomment-1169788319):_\r\n\r\nThe `Synced<T>` abstraction is similar to what is suggested in [this comment](https://github.com/bitcoin/bitcoin/pull/24931#discussion_r890636987) but it does so in a generic way to avoid code repetition. Its benefit is:\r\n\r\n1. It avoids code repetition at the implementation sites. See [PR#26151](https://github.com/bitcoin/bitcoin/pull/26151) for a live example. Namely this:\r\n\r\n<details>\r\n<summary>Lots of repetitions (92 lines)</summary>\r\n\r\n```cpp\r\nclass Foo\r\n{\r\npublic:\r\n    void PushBack(x)\r\n    {\r\n        LOCK(m_mutex);\r\n        m_data.push_back(x);\r\n    }\r\n\r\n    size_t Size()\r\n    {\r\n        LOCK(m_mutex);\r\n        return m_data.size();\r\n    }\r\n\r\n    // maybe also other methods if needed...\r\n\r\n    auto Lock()\r\n    {\r\n        return DebugLock<Mutex>{m_mutex, \"Foo::m_mutex\", __FILE__, __LINE__};\r\n    }\r\n\r\nprivate:\r\n    Mutex m_mutex;\r\n    std::vector<int> m_data;\r\n};\r\n\r\nclass Bar\r\n{\r\npublic:\r\n    void PushBack(x)\r\n    {\r\n        LOCK(m_mutex);\r\n        m_data.push_back(x);\r\n    }\r\n\r\n    size_t Size()\r\n    {\r\n        LOCK(m_mutex);\r\n        return m_data.size();\r\n    }\r\n\r\n    // maybe also other methods if needed...\r\n\r\n    auto Lock()\r\n    {\r\n        return DebugLock<Mutex>{m_mutex, \"Bar::m_mutex\", __FILE__, __LINE__};\r\n    }\r\n\r\nprivate:\r\n    Mutex m_mutex;\r\n    std::vector<std::string> m_data;\r\n};\r\n\r\nclass Baz\r\n{\r\npublic:\r\n    void Insert(x)\r\n    {\r\n        LOCK(m_mutex);\r\n        m_data.insert(x);\r\n    }\r\n\r\n    size_t Size()\r\n    {\r\n        LOCK(m_mutex);\r\n        return m_data.size();\r\n    }\r\n\r\n    // maybe also other methods if needed...\r\n\r\n    auto Lock()\r\n    {\r\n        return DebugLock<Mutex>{m_mutex, \"Baz::m_mutex\", __FILE__, __LINE__};\r\n    }\r\n\r\nprivate:\r\n    Mutex m_mutex;\r\n    std::set<std::string> m_data;\r\n};\r\n```\r\n</details>\r\n\r\nbecomes this:\r\n\r\n<details>\r\n<summary>Short (3 lines)</summary>\r\n\r\n```cpp\r\nSynced<std::vector<int>> Foo;\r\nSynced<std::vector<std::string>> Bar;\r\nSynced<std::set<std::string>> Baz;\r\n```\r\n</details>\r\n\r\n2. The mutex is properly encapsulated. With a global mutex and a global variable annotated with `GUARDED_BY()` it is indeed not possible to add new code that accesses the variable without protection (if using Clang and `-Wthread-safety-analysis` and `-Werror`), but it is possible to abuse the mutex and start using it to protect some more, possibly unrelated stuff (we already have this in the current code).\r\n",
    "labels": [
      {
        "id": 98279177,
        "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
        "name": "RPC/REST/ZMQ",
        "color": "0052cc",
        "default": false
      },
      {
        "id": 98298007,
        "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
        "name": "P2P",
        "color": "006b75",
        "default": false
      },
      {
        "id": 1392286103,
        "node_id": "MDU6TGFiZWwxMzkyMjg2MTAz",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20Conceptual%20Review",
        "name": "Needs Conceptual Review",
        "description": "",
        "color": "fef2c0",
        "default": false
      },
      {
        "id": 5334691551,
        "node_id": "LA_kwDOABII588AAAABPfju3w",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/CI%20failed",
        "name": "CI failed",
        "description": "",
        "color": "cccccc",
        "default": false
      }
    ],
    "created_at": "2022-06-16T12:46:53Z",
    "updated_at": "2023-10-23T18:22:23Z",
    "mergeable": true,
    "mergeable_state": "blocked",
    "merge_commit_sha": "5d774cf26b3ddf8059410306fe980e46943275db",
    "assignees": [],
    "requested_reviewers": [
      {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "vasild:ThreadSafePtr",
      "ref": "ThreadSafePtr",
      "sha": "92a444d0d73112d36abfa8875e73e26a06222891",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 120608826,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMjA2MDg4MjY=",
        "name": "bitcoin",
        "full_name": "vasild/bitcoin",
        "owner": {
          "login": "vasild",
          "id": 266751,
          "node_id": "MDQ6VXNlcjI2Njc1MQ==",
          "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/vasild",
          "html_url": "https://github.com/vasild",
          "followers_url": "https://api.github.com/users/vasild/followers",
          "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
          "organizations_url": "https://api.github.com/users/vasild/orgs",
          "repos_url": "https://api.github.com/users/vasild/repos",
          "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/vasild/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/vasild/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/vasild/bitcoin",
        "archive_url": "https://api.github.com/repos/vasild/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/vasild/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/vasild/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/vasild/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/vasild/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/vasild/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/vasild/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/vasild/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/vasild/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/vasild/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/vasild/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/vasild/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/vasild/bitcoin/events",
        "forks_url": "https://api.github.com/repos/vasild/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/vasild/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/vasild/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/vasild/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/vasild/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/vasild/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/vasild/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/vasild/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/vasild/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/vasild/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/vasild/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/vasild/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/vasild/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/vasild/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/vasild/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/vasild/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:vasild/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/vasild/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/vasild/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/vasild/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/vasild/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/vasild/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/vasild/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/vasild/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/vasild/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/vasild/bitcoin/hooks",
        "svn_url": "https://github.com/vasild/bitcoin",
        "homepage": "https://bitcoin.org/en/download",
        "language": "C++",
        "forks_count": 1,
        "stargazers_count": 4,
        "watchers_count": 4,
        "size": 220195,
        "default_branch": "master",
        "open_issues_count": 2,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-10-23T12:24:08Z",
        "created_at": "2018-02-07T11:52:47Z",
        "updated_at": "2023-08-28T12:41:46Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "0046f3dc2709e9887336050c3461e26e3c185965",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 35862,
        "stargazers_count": 71876,
        "watchers_count": 71876,
        "size": 242177,
        "default_branch": "master",
        "open_issues_count": 630,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-10-23T16:41:26Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-10-23T16:28:33Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 126,
    "deletions": 65,
    "changed_files": 8,
    "commits": 9,
    "review_comments": 46,
    "comments": 27
  },
  "events": [
    {
      "event": "review_requested",
      "id": 6820901534,
      "node_id": "RRE_lADOABII585L6FX5zwAAAAGWjrKe",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6820901534",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-16T13:08:11Z",
      "requested_reviewer": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "review_requested",
      "id": 6820901551,
      "node_id": "RRE_lADOABII585L6FX5zwAAAAGWjrKv",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6820901551",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-16T13:08:11Z",
      "requested_reviewer": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "labeled",
      "id": 6820993731,
      "node_id": "LE_lADOABII585L6FX5zwAAAAGWkBrD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6820993731",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-16T13:20:15Z",
      "label": {
        "name": "P2P",
        "color": "006b75"
      }
    },
    {
      "event": "labeled",
      "id": 6820993732,
      "node_id": "LE_lADOABII585L6FX5zwAAAAGWkBrE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6820993732",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-16T13:20:15Z",
      "label": {
        "name": "RPC/REST/ZMQ",
        "color": "0052cc"
      }
    },
    {
      "event": "reviewed",
      "id": 1009041664,
      "node_id": "PRR_kwDOABII5848JMEA",
      "url": null,
      "actor": null,
      "commit_id": "e577177a339d5a833ba82c9656fa0291ad05b001",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Approach ACK",
      "user": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#pullrequestreview-1009041664",
      "submitted_at": "2022-06-16T13:28:06Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
    },
    {
      "event": "commented",
      "id": 1157765950,
      "node_id": "IC_kwDOABII585FAhs-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1157765950",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-16T15:04:02Z",
      "updated_at": "2023-10-23T18:22:23Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage\nFor detailed information about the code coverage, see the [test coverage report](https://corecheck.dev/bitcoin/bitcoin/pulls/25390).\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| Concept ACK | [hebasto](https://github.com/bitcoin/bitcoin/pull/25390#issuecomment-1557425242) |\n| Approach ACK | [w0xlt](https://github.com/bitcoin/bitcoin/pull/25390#pullrequestreview-1009041664), [ajtowns](https://github.com/bitcoin/bitcoin/pull/25390#pullrequestreview-1145740612) |\n| Stale ACK | [jonatack](https://github.com/bitcoin/bitcoin/pull/25390#pullrequestreview-1390434676) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#28075](https://github.com/bitcoin/bitcoin/pull/28075) (util: Remove DirIsWritable, GetUniquePath by maflcko)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#issuecomment-1157765950",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25390"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-16T15:52:26Z",
      "updated_at": "2022-06-16T15:52:26Z",
      "source": {
        "issue": {
          "id": 1265228553,
          "node_id": "PR_kwDOABII5845WE79",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25314",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25314/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25314/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25314/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/25314",
          "number": 25314,
          "state": "closed",
          "state_reason": null,
          "title": "p2p: always set nTime for self-advertisements",
          "body": "This logic was recently changed in https://github.com/bitcoin/bitcoin/commit/0cfc0cd32239d3c08d2121e028b297022450b320 to overwrite `addrLocal` with the address they gave us when self-advertising to an inbound peer. But if we don't also change `nTime` again from the default `TIME_INIT`, our peer will not relay our advertised address any further.",
          "user": {
            "login": "mzumsande",
            "id": 48763452,
            "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
            "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mzumsande",
            "html_url": "https://github.com/mzumsande",
            "followers_url": "https://api.github.com/users/mzumsande/followers",
            "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
            "organizations_url": "https://api.github.com/users/mzumsande/orgs",
            "repos_url": "https://api.github.com/users/mzumsande/repos",
            "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/mzumsande/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 98298007,
              "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
              "name": "P2P",
              "color": "006b75",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "milestone": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/54",
            "html_url": "https://github.com/bitcoin/bitcoin/milestone/54",
            "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/54/labels",
            "id": 7150037,
            "node_id": "MI_kwDOABII584AbRnV",
            "number": 54,
            "state": "closed",
            "title": "24.0",
            "description": "",
            "creator": {
              "login": "laanwj",
              "id": 126646,
              "node_id": "MDQ6VXNlcjEyNjY0Ng==",
              "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/laanwj",
              "html_url": "https://github.com/laanwj",
              "followers_url": "https://api.github.com/users/laanwj/followers",
              "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
              "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
              "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
              "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
              "organizations_url": "https://api.github.com/users/laanwj/orgs",
              "repos_url": "https://api.github.com/users/laanwj/repos",
              "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
              "received_events_url": "https://api.github.com/users/laanwj/received_events",
              "type": "User",
              "site_admin": false
            },
            "open_issues": 0,
            "closed_issues": 159,
            "created_at": "2021-09-14T08:27:02Z",
            "updated_at": "2022-11-29T15:44:44Z",
            "closed_at": "2022-11-29T15:44:44Z"
          },
          "locked": true,
          "comments": 10,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25314",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/25314",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/25314.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/25314.patch"
          },
          "closed_at": "2022-06-21T22:01:00Z",
          "created_at": "2022-06-08T19:55:34Z",
          "updated_at": "2023-07-21T10:13:50Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-16T15:53:50Z",
      "updated_at": "2022-06-16T15:53:50Z",
      "source": {
        "issue": {
          "id": 1267245458,
          "node_id": "I_kwDOABII585LiKGS",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25330",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25330/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25330/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25330/events",
          "html_url": "https://github.com/bitcoin/bitcoin/issues/25330",
          "number": 25330,
          "state": "closed",
          "state_reason": "completed",
          "title": "How to avoid logic races (and recursive mutexes)?",
          "body": "Currently many mutexes are recursive to accommodate for callers that have the mutex already locked. However, people seem not to like recursive mutexes, see also #19303.\r\n\r\nMoreover, there are many logic races in the codebase. (Not data races, which are UB, but code that returns valid, but logically inconsistent data. For example #25077).\r\n\r\nFor example, if a method wants to return the latest block hash and the height of that block, it could do:\r\n\r\n```\r\nreturn { chain.tip_hash(), chain.tip_height() };\r\n```\r\n\r\nAssuming that `chain` has a private lock, which is acquired in its member methods. Though, in a multi-threaded context this may return a stale hash, which does not correspond to the height. So it would be nice to have a way to fix that, even if all locks are private and non-recursive.\r\n\r\nSo I was thinking about a helper that returns a locked chain to the caller:\r\n\r\n```\r\nauto lc{chain.locked()};\r\nreturn { lc.tip_hash(), lc.tip_height() };\r\n```\r\n\r\nDoes this sound like a good idea?\r\n\r\n",
          "user": {
            "login": "maflcko",
            "id": 6399679,
            "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maflcko",
            "html_url": "https://github.com/maflcko",
            "followers_url": "https://api.github.com/users/maflcko/followers",
            "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
            "organizations_url": "https://api.github.com/users/maflcko/orgs",
            "repos_url": "https://api.github.com/users/maflcko/repos",
            "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/maflcko/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 64584,
              "node_id": "MDU6TGFiZWw2NDU4NA==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Brainstorming",
              "name": "Brainstorming",
              "color": "ebd775",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "comments": 16,
          "closed_at": "2022-06-21T14:01:36Z",
          "created_at": "2022-06-10T08:42:13Z",
          "updated_at": "2023-06-21T10:07:30Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-16T17:18:25Z",
      "updated_at": "2022-06-16T17:18:25Z",
      "source": {
        "issue": {
          "id": 1238159102,
          "node_id": "PR_kwDOABII58437rQt",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25152",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25152/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25152/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25152/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/25152",
          "number": 25152,
          "state": "closed",
          "state_reason": null,
          "title": "refactor: Split util/system into exception, shell, and fs-specific files",
          "body": "This is an attempt to significantly improve code organization while making changes as simple as possible to review.\r\n\r\nHere I split four files out of `util/system`:\r\n* `util/exception`, holding `PrintExceptionContinue`\r\n* `util/shell`, holding `ShellEscape`, `runCommand`\r\n* `util/fs`, holding various file, folder, and path-specific functions (building on `fs.h` and `filesystem`)\r\n* `util/args`, holding `ArgsManager` and related functions\r\n\r\nThe goal was to minimize review burden, so I made an effort to minimize the diffs and only modify the code when it was easy to confirm that the change would not have negative consequences.\r\n\r\nThat said, sourcing all of the windows-related headers was not straightforward, so I expect I'll need to touch this up to correct any issues there.",
          "user": {
            "login": "Empact",
            "id": 5470,
            "node_id": "MDQ6VXNlcjU0NzA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Empact",
            "html_url": "https://github.com/Empact",
            "followers_url": "https://api.github.com/users/Empact/followers",
            "following_url": "https://api.github.com/users/Empact/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/Empact/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/Empact/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
            "organizations_url": "https://api.github.com/users/Empact/orgs",
            "repos_url": "https://api.github.com/users/Empact/repos",
            "events_url": "https://api.github.com/users/Empact/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/Empact/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 9,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25152",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/25152",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/25152.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/25152.patch"
          },
          "closed_at": "2023-03-14T11:37:18Z",
          "created_at": "2022-05-17T06:52:25Z",
          "updated_at": "2023-03-14T11:37:19Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 1157945376,
      "node_id": "IC_kwDOABII585FBNgg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1157945376",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-16T17:28:36Z",
      "updated_at": "2022-06-16T17:28:36Z",
      "author_association": "CONTRIBUTOR",
      "body": "This seems like a potentially useful alternative to clang thread safety annotations. The `ThreadSafePtr<T>` class forces code to lock a mutex when accessing data, just like TSA annotations do, except unlike TSA annotations, it doesn't rely on a nonstandard compiler extension, or suffer from quirks that come from doing a limited static analysis.\r\n\r\n`ThreadSafePtr<T>` is obviously not a complete substitute for thread safety annotations since it only handles the simple case where a single non-recursive Mutex is used to protect access to a single variable. But the variable can have any C++ type (primitive, container, or struct), so it's probably flexible enough for a lot of cases.\r\n\r\nI don't think the `ThreadSafePtr<T>` is the best name because `xxx_ptr<T>` implies the type is some kind of lightweight reference to the `T`, not a container which holds the `T`. I would call it something like `Synced<T>` or `LockedData<T>`. (An analogy here would be `std::optional<T>`, which is not called `std::optional_ptr<T>`, even though it has `*` and `->` members, because it's purpose is to be a container, not a pointer. The class is named after what it's used for not what kind of members it has.)",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#issuecomment-1157945376",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25390"
    },
    {
      "event": "reviewed",
      "id": 1009459470,
      "node_id": "PRR_kwDOABII5848KyEO",
      "url": null,
      "actor": null,
      "commit_id": "e577177a339d5a833ba82c9656fa0291ad05b001",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#pullrequestreview-1009459470",
      "submitted_at": "2022-06-16T18:02:52Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-16T21:48:03Z",
      "updated_at": "2022-06-16T21:48:03Z",
      "source": {
        "issue": {
          "id": 1055516750,
          "node_id": "PR_kwDOABII584un2D2",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23531",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23531/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23531/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23531/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/23531",
          "number": 23531,
          "state": "closed",
          "state_reason": null,
          "title": "Add Yggdrasil support",
          "body": "Heavily inspired by https://github.com/bitcoin/bitcoin/pull/23077 + https://github.com/bitcoin/bitcoin/pull/23324 + https://github.com/bitcoin/bitcoin/pull/23175 which add CJDNS support\r\n\r\n# Yggdrasil overview \r\n\r\nYggdrasil is an implementation of a new name-independent routing scheme and functions as an end-to-end encrypted IPv6 network. It shares very similar goals to CJDNS. It uses an address range of `0200::/8` (as opposed to `fc00::/8` used by CJDNS).\r\n\r\n# Motivation\r\n\r\nDespite Yggdrasil is being considered an alpha quality software, it seems to be much more maintained than CJDNS.\r\n\r\nCJDNS contributions chart:\r\n\r\n<img width=\"911\" alt=\"Screenshot 2021-11-17 at 10 02 06\" src=\"https://user-images.githubusercontent.com/42201/142169775-992aaae1-f50f-4546-9ddc-ab3dafe5ca27.png\">\r\n\r\nYggdrasil contributions chart:\r\n\r\n<img width=\"911\" alt=\"Screenshot 2021-11-17 at 10 02 21\" src=\"https://user-images.githubusercontent.com/42201/142169846-4730eb7a-4e76-4ddb-924b-4da5977cdeed.png\">\r\n\r\nIt is also much easier to get it Yggdrasil working on variety of systems and architectures (macOS, Windows, Android, ARM64, MIPS) because it is written in pure Go, while it is hard to get CJDNS working on anything else than x86_64 Linux.\r\n\r\n# Yggdrasil resources\r\n\r\n* homepage: https://yggdrasil-network.github.io\r\n* more about Yggdrasil history: https://yggdrasil-network.github.io/2019/01/09/history.html\r\n* FAQ: https://yggdrasil-network.github.io/faq.html\r\n* source code: https://github.com/yggdrasil-network/yggdrasil-go\r\n* releases: https://github.com/yggdrasil-network/yggdrasil-go/releases\r\n",
          "user": {
            "login": "prusnak",
            "id": 42201,
            "node_id": "MDQ6VXNlcjQyMjAx",
            "avatar_url": "https://avatars.githubusercontent.com/u/42201?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/prusnak",
            "html_url": "https://github.com/prusnak",
            "followers_url": "https://api.github.com/users/prusnak/followers",
            "following_url": "https://api.github.com/users/prusnak/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/prusnak/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/prusnak/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/prusnak/subscriptions",
            "organizations_url": "https://api.github.com/users/prusnak/orgs",
            "repos_url": "https://api.github.com/users/prusnak/repos",
            "events_url": "https://api.github.com/users/prusnak/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/prusnak/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135946,
              "node_id": "MDU6TGFiZWwxMzU5NDY=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/GUI",
              "name": "GUI",
              "color": "02d7e1",
              "default": false
            },
            {
              "id": 98298007,
              "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
              "name": "P2P",
              "color": "006b75",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 35,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23531",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/23531",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/23531.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/23531.patch"
          },
          "closed_at": "2022-09-27T13:52:25Z",
          "created_at": "2021-11-16T23:04:07Z",
          "updated_at": "2022-11-15T17:42:42Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 1158434634,
      "node_id": "IC_kwDOABII585FDE9K",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1158434634",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-17T02:55:13Z",
      "updated_at": "2022-06-17T02:55:13Z",
      "author_association": "CONTRIBUTOR",
      "body": "This seems like a non-starter to me? It's not even able to detect obvious double locks at compile-time:\r\n\r\n```c++\r\n    ThreadSafePtr<std::map<int, int>> m;\r\n    m->emplace(5, 25);\r\n    {\r\n        auto m_locked = *m;\r\n        m_locked->emplace(6, 36);\r\n        m->emplace(7, 49);  // double lock\r\n\r\n        auto m_locked2 = *m; // double lock\r\n        m_locked->emplace(9, 81);\r\n        m_locked2->emplace(10, 100);\r\n    }\r\n```\r\n\r\nEven if it weren't worse at catching bugs, it doesn't seem like an improvement over writing:\r\n\r\n```c++\r\n    Mutex mut;\r\n    std::map<int, int> m GUARDED_BY(mut);\r\n\r\n    WITH_LOCK(mut, m.emplace(5, 25));\r\n    {\r\n        LOCK(mut);\r\n        m.emplace(6, 36);\r\n        m.emplace(7, 49);  // no double lock\r\n\r\n        LOCK(mut); // double lock - detected at compile time\r\n        m.emplace(9, 81);\r\n        m.emplace(10, 100);\r\n    }\r\n```",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#issuecomment-1158434634",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25390"
    },
    {
      "event": "commented",
      "id": 1158475359,
      "node_id": "IC_kwDOABII585FDO5f",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1158475359",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-17T04:21:50Z",
      "updated_at": "2022-06-17T04:21:50Z",
      "author_association": "CONTRIBUTOR",
      "body": "> It's not even able to detect obvious double locks at compile-time: \r\n\r\nI assume it can be annotated just like any other lock. Agree implementation should fix this, though.\r\n\r\n> Even if it weren't worse at catching bugs, it doesn't seem like an improvement over writing\r\n\r\nWell one improvement is that it enforces locking on all compilers, unlike the clang annotations. The code itself doesn't seem much better or worse in this case for this very simple data structure, but it's probably is worth experimenting with for chains and chainstates and mempools, etc to be able to avoid logic bugs, distinguish different uses of cs_main for different purposes, and not just have LOCK(cs_main) everywhere what no indication about what exactly is being locked or why.\r\n\r\nLooking at your examples, though I would even more want to replace the `*m` syntax with `m.Lock()` as suggested previously to make usage more obvious.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#issuecomment-1158475359",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25390"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6840954196,
      "node_id": "HRFPE_lADOABII585L6FX5zwAAAAGXwK1U",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6840954196",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-20T16:46:35Z"
    },
    {
      "event": "commented",
      "id": 1160665973,
      "node_id": "IC_kwDOABII585FLlt1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1160665973",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-20T16:54:39Z",
      "updated_at": "2022-06-20T16:54:39Z",
      "author_association": "CONTRIBUTOR",
      "body": "`e577177a33...a870b2b891`: address suggestions and remove optional commit that was a kind of scope creep for this PR - `net: simplify logic around reachable networks and -onlynet`, it will make it in a followup.\r\n\r\n@ryanofsky very insightful review, thanks for the suggestions!\r\n\r\n> This seems like a potentially useful alternative to clang thread safety annotations. The `ThreadSafePtr<T>` class forces code to lock a mutex when accessing data, just like TSA annotations do, except...\r\n\r\nHmm, right, I did not think of this from that perspective. In addition - TSA do not actually \"force\" anything, they emit a mere warning if compiled with `clang`. They do nothing for gcc. And if `-Werror` is not used to turn the warning into an error, then they can be missed/ignored.\r\n\r\nI see this as a complementary to TSA.\r\n\r\n> I don't think the `ThreadSafePtr<T>` is the best name because `xxx_ptr<T>` implies the type is some kind of lightweight reference to the `T`, not a container which holds the `T`. I would call it something like `Synced<T>` ...\r\n\r\nRenamed to `Synced<T>`, thanks!",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#issuecomment-1160665973",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25390"
    },
    {
      "event": "mentioned",
      "id": 6840991617,
      "node_id": "MEE_lADOABII585L6FX5zwAAAAGXwT-B",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6840991617",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-20T16:54:40Z"
    },
    {
      "event": "subscribed",
      "id": 6840991619,
      "node_id": "SE_lADOABII585L6FX5zwAAAAGXwT-D",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6840991619",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-20T16:54:40Z"
    },
    {
      "event": "commented",
      "id": 1164151295,
      "node_id": "IC_kwDOABII585FY4n_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1164151295",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-23T09:06:42Z",
      "updated_at": "2022-06-23T11:17:33Z",
      "author_association": "CONTRIBUTOR",
      "body": "> I assume it can be annotated just like any other lock. Agree implementation should fix this, though.\r\n\r\nI think you'd have to mark the `Synced` object as being lock itself (`LOCKABLE`), and mark the `Proxy` class as being a RAII guard (`SCOPED_LOCKABLE`), with the constructor/destructor annotated appropriately (`EXCLUSIVE_LOCK_FUNCTION(ref_to_scoped_obj)` and `UNLOCK_FUNCTION()`), and with the functions that create the Proxy (`Lock` and `operator->`) annotated with negative constraints (`EXCLUSIVE_LOCKS_REQUIRED(!this)`)? I've got pretty low confidence that that will actually work as hoped/expected though...\r\n\r\n> Well one improvement is that it enforces locking on all compilers, unlike the clang annotations.\r\n\r\nWe already enforce locking is correct via compiling with clang in CI; it's certainly an improvement to get those warnings earlier for anyone who's not using clang or doesn't have the options enabled, but [EDIT: oops, didn't finish the thought:] not at the cost of losing some checks entirely.\r\n",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#issuecomment-1164151295",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25390"
    },
    {
      "event": "commented",
      "id": 1164194609,
      "node_id": "IC_kwDOABII585FZDMx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1164194609",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-23T09:49:07Z",
      "updated_at": "2022-06-23T09:49:07Z",
      "author_association": "MEMBER",
      "body": "I don't see any obvious benefit here, looking at the comparison with current code in https://github.com/bitcoin/bitcoin/pull/25390#issuecomment-1158434634 ",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#issuecomment-1164194609",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25390"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-25T15:26:14Z",
      "updated_at": "2022-06-25T15:26:14Z",
      "source": {
        "issue": {
          "id": 1284565812,
          "node_id": "PR_kwDOABII5846WpgA",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25472",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25472/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25472/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25472/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/25472",
          "number": 25472,
          "state": "closed",
          "state_reason": null,
          "title": "build: Increase MS Visual Studio minimum version",
          "body": "Visual Studio 2022 with `/std:c++20` supports [designated initializers](https://github.com/bitcoin/bitcoin/pull/24531).",
          "user": {
            "login": "hebasto",
            "id": 32963518,
            "node_id": "MDQ6VXNlcjMyOTYzNTE4",
            "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hebasto",
            "html_url": "https://github.com/hebasto",
            "followers_url": "https://api.github.com/users/hebasto/followers",
            "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
            "organizations_url": "https://api.github.com/users/hebasto/orgs",
            "repos_url": "https://api.github.com/users/hebasto/repos",
            "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/hebasto/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "milestone": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/54",
            "html_url": "https://github.com/bitcoin/bitcoin/milestone/54",
            "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/54/labels",
            "id": 7150037,
            "node_id": "MI_kwDOABII584AbRnV",
            "number": 54,
            "state": "closed",
            "title": "24.0",
            "description": "",
            "creator": {
              "login": "laanwj",
              "id": 126646,
              "node_id": "MDQ6VXNlcjEyNjY0Ng==",
              "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/laanwj",
              "html_url": "https://github.com/laanwj",
              "followers_url": "https://api.github.com/users/laanwj/followers",
              "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
              "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
              "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
              "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
              "organizations_url": "https://api.github.com/users/laanwj/orgs",
              "repos_url": "https://api.github.com/users/laanwj/repos",
              "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
              "received_events_url": "https://api.github.com/users/laanwj/received_events",
              "type": "User",
              "site_admin": false
            },
            "open_issues": 0,
            "closed_issues": 159,
            "created_at": "2021-09-14T08:27:02Z",
            "updated_at": "2022-11-29T15:44:44Z",
            "closed_at": "2022-11-29T15:44:44Z"
          },
          "locked": false,
          "comments": 21,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25472",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/25472",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/25472.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/25472.patch"
          },
          "closed_at": "2022-07-13T15:18:56Z",
          "created_at": "2022-06-25T12:01:16Z",
          "updated_at": "2023-02-13T19:41:03Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6900955645,
      "node_id": "HRFPE_lADOABII585L6FX5zwAAAAGbVDn9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6900955645",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-29T10:01:18Z"
    },
    {
      "event": "commented",
      "id": 1169788319,
      "node_id": "IC_kwDOABII585FuY2f",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1169788319",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-29T10:04:33Z",
      "updated_at": "2022-07-13T06:29:48Z",
      "author_association": "CONTRIBUTOR",
      "body": "`a870b2b891...7b05e787cf`: use `LOCK(synced)` at call sites and remove more `GlobalMutex`es.\r\n\r\nThe benefit is not at the call sites - they can use different flavors of syntax sugar but all of them more or less boil down to the same thing. I changed it to use `{ LOCK(foo); foo->Method1(); foo->Method2(); ... }` so that it is not possible to misuse like @ajtowns suggested [above](https://github.com/bitcoin/bitcoin/pull/25390#issuecomment-1158434634).\r\n\r\nThe `Synced<T>` abstraction is similar to what is suggested in [this comment](https://github.com/bitcoin/bitcoin/pull/24931#discussion_r890636987) but it does so in a generic way to avoid code repetition. Its benefit is twofold:\r\n\r\n1. It avoids code repetition at the implementation sites. Namely this:\r\n\r\n<details>\r\n<summary>Lots of repetitions (92 lines)</summary>\r\n\r\n```cpp\r\nclass Foo\r\n{\r\npublic:\r\n    void PushBack(x)\r\n    {\r\n        LOCK(m_mutex);\r\n        m_data.push_back(x);\r\n    }\r\n\r\n    size_t Size()\r\n    {\r\n        LOCK(m_mutex);\r\n        return m_data.size();\r\n    }\r\n\r\n    // maybe also other methods if needed...\r\n\r\n    auto Lock()\r\n    {\r\n        return DebugLock<Mutex>{m_mutex, \"Foo::m_mutex\", __FILE__, __LINE__};\r\n    }\r\n\r\nprivate:\r\n    Mutex m_mutex;\r\n    std::vector<int> m_data;\r\n};\r\n\r\nclass Bar\r\n{\r\npublic:\r\n    void PushBack(x)\r\n    {\r\n        LOCK(m_mutex);\r\n        m_data.push_back(x);\r\n    }\r\n\r\n    size_t Size()\r\n    {\r\n        LOCK(m_mutex);\r\n        return m_data.size();\r\n    }\r\n\r\n    // maybe also other methods if needed...\r\n\r\n    auto Lock()\r\n    {\r\n        return DebugLock<Mutex>{m_mutex, \"Bar::m_mutex\", __FILE__, __LINE__};\r\n    }\r\n\r\nprivate:\r\n    Mutex m_mutex;\r\n    std::vector<std::string> m_data;\r\n};\r\n\r\nclass Baz\r\n{\r\npublic:\r\n    void Insert(x)\r\n    {\r\n        LOCK(m_mutex);\r\n        m_data.insert(x);\r\n    }\r\n\r\n    size_t Size()\r\n    {\r\n        LOCK(m_mutex);\r\n        return m_data.size();\r\n    }\r\n\r\n    // maybe also other methods if needed...\r\n\r\n    auto Lock()\r\n    {\r\n        return DebugLock<Mutex>{m_mutex, \"Baz::m_mutex\", __FILE__, __LINE__};\r\n    }\r\n\r\nprivate:\r\n    Mutex m_mutex;\r\n    std::set<std::string> m_data;\r\n};\r\n```\r\n</details>\r\n\r\nbecomes this:\r\n\r\n<details>\r\n<summary>Short (3 lines)</summary>\r\n\r\n```cpp\r\nSynced<std::vector<int>> Foo;\r\nSynced<std::vector<std::string>> Bar;\r\nSynced<std::set<std::string>> Baz;\r\n```\r\n</details>\r\n\r\n2. The mutex is properly encapsulated. With a global mutex and a global variable annotated with `GUARDED_BY()` it is indeed not possible to add new code that accesses the variable without protection (if using Clang and `-Wthread-safety-analysis` and `-Werror`), but it is possible to abuse the mutex and start using it to protect some more, possibly unrelated stuff (we already have this in the current code).\r\n",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#issuecomment-1169788319",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25390"
    },
    {
      "event": "mentioned",
      "id": 6900979995,
      "node_id": "MEE_lADOABII585L6FX5zwAAAAGbVJkb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6900979995",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-29T10:04:33Z"
    },
    {
      "event": "subscribed",
      "id": 6900980000,
      "node_id": "SE_lADOABII585L6FX5zwAAAAGbVJkg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6900980000",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-29T10:04:33Z"
    },
    {
      "event": "commented",
      "id": 1169797417,
      "node_id": "IC_kwDOABII585FubEp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1169797417",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-29T10:13:30Z",
      "updated_at": "2022-06-29T10:13:30Z",
      "author_association": "MEMBER",
      "body": "Ah, looks like this is `std::atomic` for structs/classes then",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#issuecomment-1169797417",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25390"
    },
    {
      "event": "commented",
      "id": 1169846509,
      "node_id": "IC_kwDOABII585FunDt",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1169846509",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-29T11:06:41Z",
      "updated_at": "2022-06-29T11:07:10Z",
      "author_association": "CONTRIBUTOR",
      "body": "> Ah, looks like this is `std::atomic` for structs/classes then\r\n\r\nRight, kind of. `std::atomic` can be used for any trivially copyable structs/classes too and if necessary it will use a mutex internally. The difference is that reading from an `atomic` would read it in a safe way from the memory and would return a copy of the stored object. So if we call a method of the stored object the mutex will be released before the method is called and the method will be called on the copy. `atomic` also does not provide a way to lock for longer time, spanning calls to multiple methods.",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#issuecomment-1169846509",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25390"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-30T07:25:09Z",
      "updated_at": "2022-06-30T07:25:09Z",
      "source": {
        "issue": {
          "id": 1247071697,
          "node_id": "PR_kwDOABII5844ZBvy",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25203",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25203/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25203/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25203/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/25203",
          "number": 25203,
          "state": "open",
          "state_reason": null,
          "title": "Severity-based logging -- parent PR",
          "body": "This is a parent PR for continuing updates to severity-based logging. See https://github.com/bitcoin/bitcoin/issues/20576 for motivation and https://github.com/bitcoin/bitcoin/pull/25306 for discussion.\r\n\r\n- [x] https://github.com/bitcoin/bitcoin/pull/24464\r\n- [x] https://github.com/bitcoin/bitcoin/pull/25286\r\n- [x] #25306\r\n- [x] https://github.com/bitcoin/bitcoin/issues/25614\r\n- [x] https://github.com/bitcoin/bitcoin/pull/26957\r\n- [x] https://github.com/bitcoin/bitcoin/pull/27632\r\n- #27231 \r\n- print the wallet name more clearly in wallet logging to distinguish it from category/level\r\n- unconditionally log `Info` severity level messages\r\n- replace the hardcoded `LogLevelsList()` vector with a programmatic one derived from the `Level` enum class\r\n- convert `GetLogCategory()` to `std::optional`\r\n- deduplicate the `LogCategory` code\r\n- update to severity-based logging in the following areas, dropping the use of `LogPrintf` and `LogPrint`: addrdb, addrman, banman, i2p, mempool, netbase, net, net_processing, timedata, torcontrol\r\n- when we're ready to drop the other logging macros, rename `LogPrintLevel` to simply `Log`, which will be the only log macro needed after migration from the other macros is complete\r\n",
          "user": {
            "login": "jonatack",
            "id": 2415484,
            "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jonatack",
            "html_url": "https://github.com/jonatack",
            "followers_url": "https://api.github.com/users/jonatack/followers",
            "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
            "organizations_url": "https://api.github.com/users/jonatack/orgs",
            "repos_url": "https://api.github.com/users/jonatack/repos",
            "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/jonatack/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 18,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25203",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/25203",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/25203.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/25203.patch"
          },
          "created_at": "2022-05-24T20:08:49Z",
          "updated_at": "2023-09-01T00:49:51Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "renamed",
      "id": 6933944067,
      "node_id": "RTE_lADOABII585L6FX5zwAAAAGdS5cD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6933944067",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-05T12:16:26Z",
      "rename": {
        "from": "sync: introduce a thread-safe smart pointer and use it to remove g_maplocalhost_mutex",
        "to": "sync: introduce a thread-safe smart container and use it to remove g_maplocalhost_mutex"
      }
    },
    {
      "event": "renamed",
      "id": 6933949045,
      "node_id": "RTE_lADOABII585L6FX5zwAAAAGdS6p1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6933949045",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-05T12:17:03Z",
      "rename": {
        "from": "sync: introduce a thread-safe smart container and use it to remove g_maplocalhost_mutex",
        "to": "sync: introduce a thread-safe smart container and use it to remove a bunch of \"GlobalMutex\"es"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-12T15:14:36Z",
      "updated_at": "2022-07-12T15:14:36Z",
      "source": {
        "issue": {
          "id": 1280835519,
          "node_id": "PR_kwDOABII5846KHb5",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25454",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25454/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25454/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25454/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/25454",
          "number": 25454,
          "state": "closed",
          "state_reason": null,
          "title": "p2p: Avoid multiple getheaders messages in flight to the same peer",
          "body": "Change `getheaders` messages so that we wait up to 2 minutes for a response to a prior `getheaders` message before issuing a new one.\r\n\r\nAlso change the handling of the `getheaders` message sent in response to a block INV, so that we no longer use the hashstop variable (including the hash stop will just mean that if our peer's headers chain is longer, then we won't learn\r\nit, so there's no benefit to using hashstop).\r\n\r\nAlso, now respond to a `getheaders` during IBD with an empty headers message (rather than nothing) -- this better conforms to the intent of the new logic that it's better to not ignore a peer's `getheaders` message, even if you have nothing to give. This also avoids a lot of functional tests breaking.\r\n\r\nThis PR also reworks the headers processing logic to make it more readable.",
          "user": {
            "login": "sdaftuar",
            "id": 7463573,
            "node_id": "MDQ6VXNlcjc0NjM1NzM=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sdaftuar",
            "html_url": "https://github.com/sdaftuar",
            "followers_url": "https://api.github.com/users/sdaftuar/followers",
            "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
            "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
            "repos_url": "https://api.github.com/users/sdaftuar/repos",
            "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 98298007,
              "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
              "name": "P2P",
              "color": "006b75",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "milestone": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/54",
            "html_url": "https://github.com/bitcoin/bitcoin/milestone/54",
            "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/54/labels",
            "id": 7150037,
            "node_id": "MI_kwDOABII584AbRnV",
            "number": 54,
            "state": "closed",
            "title": "24.0",
            "description": "",
            "creator": {
              "login": "laanwj",
              "id": 126646,
              "node_id": "MDQ6VXNlcjEyNjY0Ng==",
              "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/laanwj",
              "html_url": "https://github.com/laanwj",
              "followers_url": "https://api.github.com/users/laanwj/followers",
              "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
              "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
              "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
              "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
              "organizations_url": "https://api.github.com/users/laanwj/orgs",
              "repos_url": "https://api.github.com/users/laanwj/repos",
              "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
              "received_events_url": "https://api.github.com/users/laanwj/received_events",
              "type": "User",
              "site_admin": false
            },
            "open_issues": 0,
            "closed_issues": 159,
            "created_at": "2021-09-14T08:27:02Z",
            "updated_at": "2022-11-29T15:44:44Z",
            "closed_at": "2022-11-29T15:44:44Z"
          },
          "locked": false,
          "comments": 9,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/25454",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/25454.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/25454.patch"
          },
          "closed_at": "2022-07-04T20:28:46Z",
          "created_at": "2022-06-22T20:25:22Z",
          "updated_at": "2023-03-30T11:04:55Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "reviewed",
      "id": 1036036999,
      "node_id": "PRR_kwDOABII5849wKuH",
      "url": null,
      "actor": null,
      "commit_id": "7b05e787cfc43494f0cea6364928f184c98e3fae",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "I think right now I am at \"concept -0.5\" on this PR at 7b05e787cfc43494f0cea6364928f184c98e3fae. If other people think this change is a good idea, it seems fine, but I think the complexity it adds to sync.h isn't really justified by the minor code simplifications it enables elsewhere. Maybe if changes to `sync.h` were simplified or if a compelling use-case were explained, this would look like a better tradeoff.\r\n\r\n---\r\n\r\nre: https://github.com/bitcoin/bitcoin/pull/25390#issuecomment-1158434634\r\n\r\n> This seems like a non-starter to me? It's not even able to detect obvious double locks at compile-time:\r\n\r\nThis is fixed now by allowing double locking. Following test passes `test_bitcoin -t sync_tests/synced_double_lock`\r\n\r\n```diff\r\ndiff --git a/src/test/sync_tests.cpp b/src/test/sync_tests.cpp\r\nindex 55c2c5108de..3c225847529 100644\r\n--- a/src/test/sync_tests.cpp\r\n+++ b/src/test/sync_tests.cpp\r\n@@ -140,4 +140,18 @@ BOOST_AUTO_TEST_CASE(inconsistent_lock_order_detected)\r\n #endif // DEBUG_LOCKORDER\r\n }\r\n \r\n+BOOST_AUTO_TEST_CASE(synced_double_lock)\r\n+{\r\n+    Synced<std::map<int, int>> m;\r\n+    m->emplace(5, 25);\r\n+    {\r\n+        auto m_locked = m.Lock();\r\n+        m_locked->emplace(6, 36);\r\n+        m->emplace(7, 49);  // double lock\r\n+        auto m_locked2 = m.Lock(); // double lock\r\n+        m_locked->emplace(9, 81);\r\n+        m_locked2->emplace(10, 100);\r\n+    }\r\n+}\r\n+\r\n BOOST_AUTO_TEST_SUITE_END()\r\n\r\n```",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#pullrequestreview-1036036999",
      "submitted_at": "2022-07-12T16:06:54Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6984094388,
      "node_id": "HRFPE_lADOABII585L6FX5zwAAAAGgSNK0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6984094388",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-13T08:55:46Z"
    },
    {
      "event": "commented",
      "id": 1182955925,
      "node_id": "IC_kwDOABII585GgnmV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1182955925",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-13T08:57:39Z",
      "updated_at": "2022-07-13T08:57:39Z",
      "author_association": "CONTRIBUTOR",
      "body": "`7b05e787cf...acb21a5a24`: simplify the implementation of `Synced`, as suggested [above](https://github.com/bitcoin/bitcoin/pull/25390#discussion_r919129254).",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#issuecomment-1182955925",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25390"
    },
    {
      "event": "labeled",
      "id": 6987494072,
      "node_id": "LE_lADOABII585L6FX5zwAAAAGgfLK4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6987494072",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-13T16:27:40Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-13T21:59:23Z",
      "updated_at": "2022-07-13T21:59:23Z",
      "source": {
        "issue": {
          "id": 1059245454,
          "node_id": "PR_kwDOABII584uzo7R",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23561",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23561/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23561/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23561/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/23561",
          "number": 23561,
          "state": "closed",
          "state_reason": null,
          "title": "BIP324: Handshake prerequisites",
          "body": "Depends on #25361 for some constants, and on https://github.com/bitcoin-core/secp256k1/pull/1129 for ellswift integrated XDH but can be reviewed independently. Only the last 5 commits belong to this PR.\r\n\r\nThis PR adds xonly [ECDH](https://gist.github.com/dhruv/5b1275751bc98f3b64bcafce7876b489#Initial_handshake) and [HKDF](https://gist.github.com/dhruv/5b1275751bc98f3b64bcafce7876b489#keys-and-session-id-derivation) key derivation code for BIP324. Unit, bench and fuzz tests are included.\r\n\r\nThe dependency tree for BIP324 PRs is [here](https://bip324.com/sections/code-review/).",
          "user": {
            "login": "dhruv",
            "id": 856960,
            "node_id": "MDQ6VXNlcjg1Njk2MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dhruv",
            "html_url": "https://github.com/dhruv",
            "followers_url": "https://api.github.com/users/dhruv/followers",
            "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
            "organizations_url": "https://api.github.com/users/dhruv/orgs",
            "repos_url": "https://api.github.com/users/dhruv/repos",
            "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/dhruv/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 61889416,
              "node_id": "MDU6TGFiZWw2MTg4OTQxNg==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Build%20system",
              "name": "Build system",
              "color": "5319e7",
              "default": false
            },
            {
              "id": 241832923,
              "node_id": "MDU6TGFiZWwyNDE4MzI5MjM=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Utils/log/libs",
              "name": "Utils/log/libs",
              "description": "",
              "color": "5319e7",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 31,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23561",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/23561",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/23561.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/23561.patch"
          },
          "closed_at": "2023-04-18T08:50:23Z",
          "created_at": "2021-11-20T22:50:38Z",
          "updated_at": "2023-04-18T08:50:23Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6991741695,
      "node_id": "HRFPE_lADOABII585L6FX5zwAAAAGgvYL_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6991741695",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-14T07:18:02Z"
    },
    {
      "event": "commented",
      "id": 1184085863,
      "node_id": "IC_kwDOABII585Gk7dn",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1184085863",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-14T07:18:30Z",
      "updated_at": "2022-07-14T07:18:30Z",
      "author_association": "CONTRIBUTOR",
      "body": "`acb21a5a24...4b870a1538`: rebase due to conflicts",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#issuecomment-1184085863",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25390"
    },
    {
      "event": "unlabeled",
      "id": 6992525473,
      "node_id": "UNLE_lADOABII585L6FX5zwAAAAGgyXih",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6992525473",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-14T09:12:47Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-16T01:44:52Z",
      "updated_at": "2022-07-16T01:44:52Z",
      "source": {
        "issue": {
          "id": 1306008117,
          "node_id": "PR_kwDOABII5847eDJ6",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25619",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25619/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25619/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25619/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/25619",
          "number": 25619,
          "state": "closed",
          "state_reason": null,
          "title": "net: avoid overriding non-virtual ToString() in CService and use better naming",
          "body": "Before this PR we had the somewhat confusing combination of methods:\r\n\r\n`CNetAddr::ToStringIP()`\r\n`CNetAddr::ToString()` (duplicate of the above)\r\n`CService::ToStringIPPort()`\r\n`CService::ToString()` (duplicate of the above, overrides a non-virtual method from `CNetAddr`)\r\n`CService::ToStringPort()`\r\n\r\nAvoid [overriding non-virtual methods](https://github.com/bitcoin/bitcoin/pull/25349/#issuecomment-1185226396).\r\n\r\n\"IP\" stands for \"Internet Protocol\" and while sometimes \"IP addresses\" are called just \"IPs\", it is incorrect to call Tor or I2P addresses \"IPs\". Thus use \"Addr\" instead of \"IP\".\r\n\r\nChange the above to:\r\n\r\n`CNetAddr::ToStringAddr()`\r\n`CService::ToStringAddrPort()`\r\n\r\nThe changes touch a lot of files, but are mostly mechanical.",
          "user": {
            "login": "vasild",
            "id": 266751,
            "node_id": "MDQ6VXNlcjI2Njc1MQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vasild",
            "html_url": "https://github.com/vasild",
            "followers_url": "https://api.github.com/users/vasild/followers",
            "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
            "organizations_url": "https://api.github.com/users/vasild/orgs",
            "repos_url": "https://api.github.com/users/vasild/repos",
            "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/vasild/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 98298007,
              "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
              "name": "P2P",
              "color": "006b75",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 20,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25619",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/25619",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/25619.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/25619.patch"
          },
          "closed_at": "2023-02-17T18:34:58Z",
          "created_at": "2022-07-15T12:58:23Z",
          "updated_at": "2023-02-20T09:48:54Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7037018200,
      "node_id": "HRFPE_lADOABII585L6FX5zwAAAAGjcGBY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7037018200",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-21T10:20:26Z"
    },
    {
      "event": "commented",
      "id": 1191312357,
      "node_id": "IC_kwDOABII585HAfvl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1191312357",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-21T10:22:40Z",
      "updated_at": "2022-07-21T10:22:40Z",
      "author_association": "CONTRIBUTOR",
      "body": "`4b870a1538...135ca49e24`: Further simplify the `Synced` class:\r\n\r\n* Inherit `Synced` from `RecursiveMutex`. This allows the removal of the member `Synced::m_mutex` and the type `Synced::UniqueLock`\r\n* Inherit `Synced::Proxy` from `::UniqueLock<RecursiveMutex>`. This allows the removal of the member `Synced::Proxy::m_lock`.\r\n\r\nAfter the above changes there are two methods with similar names:\r\n* `Synced::lock()`, inherited from `RecursiveMutex`, it just locks the object\r\n* `Synced::Lock()`, it locks the object and returns a scoped lockable.\r\n\r\nTo avoid confusion, rename the latter to `operator*()`. This way constructs like `foo.Lock()[x]` become `(*foo)[x]` which looks better to me.\r\n\r\nNow the `Synced` class is 47 lines (excluding comments).\r\n",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#issuecomment-1191312357",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25390"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7037434218,
      "node_id": "HRFPE_lADOABII585L6FX5zwAAAAGjdrlq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7037434218",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-21T11:24:27Z"
    },
    {
      "event": "commented",
      "id": 1191366795,
      "node_id": "IC_kwDOABII585HAtCL",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1191366795",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-21T11:25:21Z",
      "updated_at": "2022-07-21T11:25:21Z",
      "author_association": "CONTRIBUTOR",
      "body": "`135ca49e24...11ac578f91`: use `MutexType` instead of `M` in templates because `MutexType` is already used elsewhere in `sync.h`",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#issuecomment-1191366795",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25390"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-22T13:06:16Z",
      "updated_at": "2022-07-22T13:06:16Z",
      "source": {
        "issue": {
          "id": 1314985354,
          "node_id": "PR_kwDOABII58478unm",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25676",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25676/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25676/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25676/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/25676",
          "number": 25676,
          "state": "closed",
          "state_reason": null,
          "title": "sync: simplify and remove unused code from sync.h",
          "body": "Summary:\r\n\r\n* Reduce 4 of the `MaybeCheckNotHeld()` definitions to 2 by using a template.\r\n* Remove unused template parameter from `::UniqueLock`.\r\n* Use `MutexType` instead of `Mutex` for a template parameter name to avoid overlap/confusion with the `Mutex` class.\r\n* Rename `AnnotatedMixin::UniqueLock` to `AnnotatedMixin::unique_lock` to avoid overlap/confusion with the global `UniqueLock` and for consistency with `UniqueLock::reverse_lock`.\r\n\r\nThe first commit `sync: simplify MaybeCheckNotHeld() definitions by using a template` is also part of https://github.com/bitcoin/bitcoin/pull/25390",
          "user": {
            "login": "vasild",
            "id": 266751,
            "node_id": "MDQ6VXNlcjI2Njc1MQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vasild",
            "html_url": "https://github.com/vasild",
            "followers_url": "https://api.github.com/users/vasild/followers",
            "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
            "organizations_url": "https://api.github.com/users/vasild/orgs",
            "repos_url": "https://api.github.com/users/vasild/repos",
            "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/vasild/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": true,
          "comments": 8,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25676",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/25676",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/25676.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/25676.patch"
          },
          "closed_at": "2022-10-11T01:19:27Z",
          "created_at": "2022-07-22T13:06:16Z",
          "updated_at": "2023-10-12T12:14:01Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-26T07:46:14Z",
      "updated_at": "2022-07-26T07:46:14Z",
      "source": {
        "issue": {
          "id": 1313204802,
          "node_id": "PR_kwDOABII58472hm-",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25665",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25665/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25665/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25665/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/25665",
          "number": 25665,
          "state": "open",
          "state_reason": null,
          "title": "refactor: Add util::Result failure values, multiple error and warning messages",
          "body": "Add `util::Result` support for returning more error information and make use of it in [LoadChainstate method](https://github.com/bitcoin/bitcoin/pull/25665/commits/60d8893608deb113b44446cdc2c35107a5b3eb3f) as an initial application. Followup PR [#25722](https://github.com/bitcoin/bitcoin/pull/25722) uses it more broadly to return errors and warnings from wallet loading functions as well.\r\n\r\nThis change adds two major features to the result class:\r\n\r\n- For better error handling, adds the ability to return a value on failure, not just a value on success. This is a key missing feature that makes the result class not useful for functions like `LoadChainstate()` which produce different errors that need to be handled differently [^1].\r\n\r\n[^1]: Ability to return error values was actually present in the original implementation of [#25218](https://github.com/bitcoin/bitcoin/pull/25218), but unfortunately removed in later iterations.\r\n\r\n- For better error reporting, adds the ability to return warning messages and multiple errors, not just a single error string. This provides a way for functions to report errors and warnings in a standard way, and simplifies interfaces:\r\n\r\n    ```diff\r\n    -virtual std::unique_ptr<Wallet> loadWallet(const std::string& name, bilingual_str& error, std::vector<bilingual_str>& warnings) = 0;\r\n    +virtual util::Result<std::unique_ptr<Wallet>> loadWallet(const std::string& name) = 0;\r\n    ```\r\n\r\n    ```diff\r\n    -std::unique_ptr<WalletDatabase> MakeDatabase(const fs::path& path, const DatabaseOptions& options, DatabaseStatus& status, bilingual_str& error);\r\n    +util::Result<std::unique_ptr<WalletDatabase>, DatabaseError> MakeDatabase(const fs::path& path, const DatabaseOptions& options);\r\n   ```\r\n\r\nThis change also makes some more minor improvements:\r\n\r\n- Smaller type size. `util::Result<int>` is 16 bytes, and `util::Result<void>` is 8 bytes. Previously both were 72 bytes.\r\n\r\n- Broader type compatibility. Supports noncopyable and nonmovable success and error types.\r\n\r\n### Alternatives & design notes\r\n\r\nThe main goal for the `util::Result` class is to provide a standard way for functions to report error and warnings strings. The interface tries to make it easy to provide detailed error feedback to end users, without cluttering code or making it harder to return other result information. There have been multiple iterations of the design using different internal representations and providing different capabilities:\r\n\r\n|   | Representation (approximate)                   | Notes |\r\n|---|------------------------------------------------|-------|\r\n| _(1)_ | `tuple<T,optional<bilingual_str>>`        | Original #25218 implementation in da98fd2efc1a6b9c6e876cf3e227a8c2e9a10827. Good capabilities, but larger type size. Supports error standardized error reporting and customized error handling with failure values. |\r\n| _(2)_ | `variant<T,bilingual_str>`                | Final #25218 implementation in 7a45c33d1f8a758850cf8e7bd6ad508939ba5c0d. No support for returning failure values so not useful in many cases.\r\n| _(3)_ | `variant<monostate,T,F>`                 | Pending #25601 implementation that allows choosing whether to use standardized error reporting or return custom failure values, but doesn't support having both at the same time, like approaches _(1)_, _(4)_, _(5)_, _(6)_ do. |\r\n | _(4)_ | `tuple<variant<T,F>,bilingual_str>`      | Original #25608 implementation in c29d3008de9314dd463ed08e8bff39fe55324498. Basically the same as _(1)_ except it uses separate success and failure types instead of the same type. Using separate success and failure types makes the result class a little less flexible but can help avoid some ambiguity and inconsistent result states. |\r\n| _(5)_ | `tuple<T,optional<bilingual_str>>`        | Final #25608 implementation in dd91f294206ac87b213d23bb76656a0a5f0f4781. Essentially the same as original implementation _(1)_ except has some usability improvements. |\r\n| _(6)_ | `tuple<T,unique_ptr<tuple<F,bilingual_str>>` | Pending #25665 implementation (this PR). Supports returning failure values, uses separate success and failure types to avoid ambiguity, uses `unique_ptr` to reduce result type size, and avoids heap allocation in the happy path. |\r\n\r\n### Prior discussions & history\r\n\r\n- _furszy_ introduced a `BResult` class providing a standard error reporting mechanism in [#25218](https://github.com/bitcoin/bitcoin/pull/25218). It was renamed to `util::Result` in [#25721](https://github.com/bitcoin/bitcoin/pull/25721) but kept the same representation and capabilities.\r\n\r\n- _MarcoFalke_ suggested using `BResult` for the `LoadChainstate` function in [#25308 (comment)](https://github.com/bitcoin/bitcoin/pull/25308#issuecomment-1181674645). Inability to use `BResult` there due to lack of support for failure values led to initial work on [#25608](https://github.com/bitcoin/bitcoin/pull/25608).\r\n\r\n- _w0xlt_ wrote a `StructuredResult` class in [#25308](https://github.com/bitcoin/bitcoin/pull/25601) adding the ability to return failure values but sacrificing standard error reporting, which led to more work on [#25608](https://github.com/bitcoin/bitcoin/pull/25608).\r\n\r\n- _martinus_ suggested a space optimization in [#25608 (comment)](https://github.com/bitcoin/bitcoin/pull/25608#discussion_r921049409) that also made it easier to support distinct failure & success types, leading to [#25665](https://github.com/bitcoin/bitcoin/pull/25665) as a replacement for [#25608](https://github.com/bitcoin/bitcoin/pull/25608).",
          "user": {
            "login": "ryanofsky",
            "id": 7133040,
            "node_id": "MDQ6VXNlcjcxMzMwNDA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ryanofsky",
            "html_url": "https://github.com/ryanofsky",
            "followers_url": "https://api.github.com/users/ryanofsky/followers",
            "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
            "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
            "repos_url": "https://api.github.com/users/ryanofsky/repos",
            "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 26,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/25665",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/25665.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/25665.patch"
          },
          "created_at": "2022-07-21T12:46:09Z",
          "updated_at": "2023-10-20T20:40:23Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-27T20:53:45Z",
      "updated_at": "2022-07-27T20:53:45Z",
      "source": {
        "issue": {
          "id": 1320033494,
          "node_id": "PR_kwDOABII5848NBt5",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25722",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25722/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25722/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25722/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/25722",
          "number": 25722,
          "state": "open",
          "state_reason": null,
          "title": "refactor: Use util::Result class for wallet loading",
          "body": "**This is based on #25665.** The non-base commits are:\r\n\r\n- [`1b2a5f12b425` refactor: Use util::Result class for wallet loading](https://github.com/bitcoin/bitcoin/pull/25722/commits/1b2a5f12b42543d13a4bcafb9585e3d1df488914)\r\n\r\n---\r\n\r\nWallet loading functions up and down the stack have lots of error and warning parameters, and return error information in different ways. This PR makes them uniformly return `util::Result`, without changing behavior.",
          "user": {
            "login": "ryanofsky",
            "id": 7133040,
            "node_id": "MDQ6VXNlcjcxMzMwNDA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ryanofsky",
            "html_url": "https://github.com/ryanofsky",
            "followers_url": "https://api.github.com/users/ryanofsky/followers",
            "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
            "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
            "repos_url": "https://api.github.com/users/ryanofsky/repos",
            "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            },
            {
              "id": 5334691551,
              "node_id": "LA_kwDOABII588AAAABPfju3w",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/CI%20failed",
              "name": "CI failed",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 5,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25722",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/25722",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/25722.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/25722.patch"
          },
          "created_at": "2022-07-27T19:26:58Z",
          "updated_at": "2023-10-16T16:19:00Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-13T22:57:18Z",
      "updated_at": "2022-09-13T22:57:18Z",
      "source": {
        "issue": {
          "id": 1167366626,
          "node_id": "PR_kwDOABII5840WLLa",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24545",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24545/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24545/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24545/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/24545",
          "number": 24545,
          "state": "closed",
          "state_reason": null,
          "title": "BIP324: Enable v2 P2P encrypted transport",
          "body": "This PR brings together all other BIP324 PRs and enables v2 encrypted P2P transport.\r\n\r\nBuilds on top of PRs: #25361, #23233, #23561, #23432. It looks like there's a lot of commits, but **only the last 12 commits belong in this PR**. The rest will be merged with upstream PRs.\r\n\r\nThe dependency tree for BIP324 PRs is [here](https://bip324.com/sections/code-review/).\r\n\r\nBIP324 is [here](https://github.com/bitcoin/bips/blob/master/bip-0324.mediawiki).\r\n\r\n### Running a v2 node\r\n#### Get the code\r\n```\r\ngit remote add bip324 git@github.com:dhruv/bitcoin.git\r\ngit fetch bip324\r\ngit checkout bip324/bip324-enable\r\n```\r\n\r\n#### Build for your OS\r\n\r\nFollow the appropriate instructions [here](https://github.com/bitcoin/bitcoin/blob/master/doc/README.md)\r\n\r\n#### Run the node\r\n\r\n```\r\nsrc/bitcoind -conf=CONFIG_FILE -v2transport=1\r\n```\r\n\r\n#### Connect with a friend's v2 node\r\n```\r\nsrc/bitcoin-cli -conf=CONFIG_FILE addnode \"FRIEND_IP:FRIEND_PORT\" \"add\" true\r\n```\r\nThe last parameter(`p2p_v2:true`) signals to your node that the peer is running a v2 supportive client and we should attempt to make an encrypted P2P connection (you're simulating the `NODE_P2P_V2` service flag advertisement manually). Should that fail however (say because the peer told you mistakenly, lied, etc.), this code will downgrade the connection to unencrypted v1 transport.\r\n\r\n### Things you are helpful to test\r\n\r\n* If your friend's node is a v2 node, you can see with wireshark that the bytes are pseudorandom (the easiest way to confirm this is that with a v1 connection, wireshark will tell you it has detected a Bitcoin connection and it'll even parse out the metadata like message type, etc; with v2, wireshark has no idea -- of course that _could_ be because wireshark does simply not know v2, but it is because the bytestream is pseudorandom)\r\n* Compare the v2 encrypted session id exposed via `getpeerinfo` as `v2_session_id` with your friend.\r\n* Add another peer that is actually v1, but try `addnode` still indicating v2 support. You should see with wireshark that after a failed attempt at a v2 handshake, the connection is downgraded to unencrypted v1 and wireshark can parse it.\r\n\r\nI've been told there are v2 nodes running at (happy to update the list as more people run persistent v2 nodes; message me and I'll add it here):\r\n```\r\nbe.anyone.eu.org\r\nrp7k2go3s5lyj3fnj6zn62ktarlrsft2ohlsxkyd7v3e3idqyptvread.onion:8333\r\njdcoysubtxazi7dketpyb5rnjorvxad4onftveohash2pdwkgw4bvnqd.onion:8333\r\nxci6cphki2pdb5qe7axzrcxcxabkbm24z4zlv2hn4ziy6grquqco2kyd.onion:8333\r\nslvtesfgg3mkksqqzh67al4sq6dx3rhlzqepa4ny7jonzuckg6msf3id.onion:8333\r\ngifm4fnj3vua664xhgeanx5fnpco3txkqy4amr4txbfsciiyrkxpf2qd.onion:8333\r\n300:5ecb:6b8a:d837::3:8333\r\n300:5ecb:6b8a:d837::a6d6:8333\r\n2001:470:1f1a:365::2:8333\r\n2001:470:1f1b:365:aa20:66ff:fe3f:1909:8333\r\n184.74.240.157:8533\r\n95.179.145.232:8333\r\n```",
          "user": {
            "login": "dhruv",
            "id": 856960,
            "node_id": "MDQ6VXNlcjg1Njk2MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dhruv",
            "html_url": "https://github.com/dhruv",
            "followers_url": "https://api.github.com/users/dhruv/followers",
            "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
            "organizations_url": "https://api.github.com/users/dhruv/orgs",
            "repos_url": "https://api.github.com/users/dhruv/repos",
            "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/dhruv/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 98298007,
              "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
              "name": "P2P",
              "color": "006b75",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 47,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24545",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/24545",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/24545.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/24545.patch"
          },
          "closed_at": "2023-05-06T11:14:46Z",
          "created_at": "2022-03-12T18:43:06Z",
          "updated_at": "2023-09-15T02:47:56Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-23T04:34:19Z",
      "updated_at": "2022-09-23T04:34:19Z",
      "source": {
        "issue": {
          "id": 1381442729,
          "node_id": "PR_kwDOABII584_YLq7",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26151",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26151/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26151/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26151/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/26151",
          "number": 26151,
          "state": "closed",
          "state_reason": null,
          "title": "refactor: Guard TxRequestTracker by its own lock instead of cs_main",
          "body": "I don't see the need to have the `TxRequestTracker` guarded by `cs_main` which would also be more in line with our developer docs.\r\n\r\nFrom `developer-notes.md`:\r\n\r\n```\r\nRe-architecting the core code so there are better-defined interfaces between\r\nthe various components is a goal, with any necessary locking done by the\r\ncomponents (e.g. see the self-contained FillableSigningProvider class and its\r\ncs_KeyStore lock for example).\r\n```\r\n\r\nThis PR gives `TxRequestTracker` its own mutex, thereby removing the need to guard `PeerManagerImpl::m_txrequest` using `cs_main`.\r\n",
          "user": {
            "login": "dergoegge",
            "id": 8077169,
            "node_id": "MDQ6VXNlcjgwNzcxNjk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dergoegge",
            "html_url": "https://github.com/dergoegge",
            "followers_url": "https://api.github.com/users/dergoegge/followers",
            "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
            "organizations_url": "https://api.github.com/users/dergoegge/orgs",
            "repos_url": "https://api.github.com/users/dergoegge/repos",
            "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/dergoegge/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 98298007,
              "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
              "name": "P2P",
              "color": "006b75",
              "default": false
            },
            {
              "id": 749416508,
              "node_id": "MDU6TGFiZWw3NDk0MTY1MDg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Up%20for%20grabs",
              "name": "Up for grabs",
              "color": "99a810",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 14,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26151",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/26151",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/26151.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/26151.patch"
          },
          "closed_at": "2023-05-30T14:56:26Z",
          "created_at": "2022-09-21T20:15:15Z",
          "updated_at": "2023-05-30T15:22:49Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "reviewed",
      "id": 1117913698,
      "node_id": "PRR_kwDOABII585CogJi",
      "url": null,
      "actor": null,
      "commit_id": "11ac578f9132ed76191d03d5100fc88b6ada6a8a",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "I'm still Approach NACK on this. :(",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#pullrequestreview-1117913698",
      "submitted_at": "2022-09-28T17:07:12Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
    },
    {
      "event": "referenced",
      "id": 7558068169,
      "node_id": "REFE_lADOABII585L6FX5zwAAAAHCfvfJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7558068169",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "2e77dff7449af6b46b284c75ce6e1d53a134bc8e",
      "commit_url": "https://api.github.com/repos/bitcoin-core/gui/commits/2e77dff7449af6b46b284c75ce6e1d53a134bc8e",
      "created_at": "2022-10-11T01:19:09Z"
    },
    {
      "event": "labeled",
      "id": 7558439948,
      "node_id": "LE_lADOABII585L6FX5zwAAAAHChKQM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7558439948",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-10-11T03:08:58Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7570192028,
      "node_id": "HRFPE_lADOABII585L6FX5zwAAAAHDN_ac",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7570192028",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-10-12T09:49:37Z"
    },
    {
      "event": "commented",
      "id": 1275894327,
      "node_id": "IC_kwDOABII585MDJo3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1275894327",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-10-12T09:50:22Z",
      "updated_at": "2022-10-12T09:50:22Z",
      "author_association": "CONTRIBUTOR",
      "body": "`11ac578f91...70dac32e76`: rebase due to conflicts + update as per the discussion in https://github.com/bitcoin/bitcoin/pull/25390#discussion_r978269158\r\n",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#issuecomment-1275894327",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25390"
    },
    {
      "event": "renamed",
      "id": 7570297133,
      "node_id": "RTE_lADOABII585L6FX5zwAAAAHDOZEt",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7570297133",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-10-12T10:02:28Z",
      "rename": {
        "from": "sync: introduce a thread-safe smart container and use it to remove a bunch of \"GlobalMutex\"es",
        "to": "sync: introduce a thread-safe generic container and use it to remove a bunch of \"GlobalMutex\"es"
      }
    },
    {
      "event": "unlabeled",
      "id": 7570612879,
      "node_id": "UNLE_lADOABII585L6FX5zwAAAAHDPmKP",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7570612879",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-10-12T10:43:16Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 1145740612,
      "node_id": "PRR_kwDOABII585ESp1E",
      "url": null,
      "actor": null,
      "commit_id": "70dac32e76dc87d87d0d23f2da0ff5532d5bf040",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Approach ACK\r\n\r\nDon't think the bool-array to unordered_set makes much sense, otherwise looks good.",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#pullrequestreview-1145740612",
      "submitted_at": "2022-10-19T08:05:33Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
    },
    {
      "event": "referenced",
      "id": 7648533848,
      "node_id": "REFE_lADOABII585L6FX5zwAAAAHH411Y",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7648533848",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "5984166da695ad241a3affb56e8e8a5f71fb1108",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/5984166da695ad241a3affb56e8e8a5f71fb1108",
      "created_at": "2022-10-23T15:26:47Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-10-27T14:09:15Z",
      "updated_at": "2022-10-27T14:09:15Z",
      "source": {
        "issue": {
          "id": 1424919689,
          "node_id": "PR_kwDOABII585BoQWg",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26399",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26399/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26399/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26399/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/26399",
          "number": 26399,
          "state": "closed",
          "state_reason": null,
          "title": "Fix #24049: signed integer overflow in `SeenLocal`",
          "body": "This commit makes the behavior defined (unsigned integer overflow as if: \r\n`it->second.nscore = static_cast<int>(static_cast<unsigned> (it->second.nscore) + 1U);`)\r\nSee: Issue #24049; Discussion on [stackoverflow](https://stackoverflow.com/q/74102221/9282847).",
          "user": {
            "login": "ViralTaco",
            "id": 7462994,
            "node_id": "MDQ6VXNlcjc0NjI5OTQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7462994?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ViralTaco",
            "html_url": "https://github.com/ViralTaco",
            "followers_url": "https://api.github.com/users/ViralTaco/followers",
            "following_url": "https://api.github.com/users/ViralTaco/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/ViralTaco/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/ViralTaco/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/ViralTaco/subscriptions",
            "organizations_url": "https://api.github.com/users/ViralTaco/orgs",
            "repos_url": "https://api.github.com/users/ViralTaco/repos",
            "events_url": "https://api.github.com/users/ViralTaco/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/ViralTaco/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "NONE",
          "locked": false,
          "comments": 6,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26399",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/26399",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/26399.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/26399.patch"
          },
          "closed_at": "2022-11-18T14:33:41Z",
          "created_at": "2022-10-27T02:09:30Z",
          "updated_at": "2022-11-20T19:42:27Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7723201388,
      "node_id": "HRFPE_lADOABII585L6FX5zwAAAAHMVrNs",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7723201388",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-02T13:08:09Z"
    },
    {
      "event": "commented",
      "id": 1300379783,
      "node_id": "IC_kwDOABII585NgjiH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1300379783",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-02T13:08:29Z",
      "updated_at": "2022-11-02T13:08:29Z",
      "author_association": "CONTRIBUTOR",
      "body": "`70dac32e76...c3e4c34219`: rebase and address suggestions",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#issuecomment-1300379783",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25390"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7762587818,
      "node_id": "HRFPE_lADOABII585L6FX5zwAAAAHOr7Cq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7762587818",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-08T13:07:52Z"
    },
    {
      "event": "commented",
      "id": 1307191594,
      "node_id": "IC_kwDOABII585N6ikq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1307191594",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-08T13:08:42Z",
      "updated_at": "2022-11-08T13:08:42Z",
      "author_association": "CONTRIBUTOR",
      "body": "`c3e4c34219...0f457d2bdd`: rebase and go back to a single macro `SYNCED_LOCK()` with 2 arguments.",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#issuecomment-1307191594",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25390"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7764694659,
      "node_id": "HRFPE_lADOABII585L6FX5zwAAAAHOz9aD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7764694659",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-08T16:33:53Z"
    },
    {
      "event": "commented",
      "id": 1307499020,
      "node_id": "IC_kwDOABII585N7toM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1307499020",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-08T16:34:10Z",
      "updated_at": "2022-11-08T16:34:10Z",
      "author_association": "CONTRIBUTOR",
      "body": "`0f457d2bdd...6c0bcd0928`: update comment",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#issuecomment-1307499020",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25390"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7792646438,
      "node_id": "HRFPE_lADOABII585L6FX5zwAAAAHQelkm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7792646438",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-11T14:40:55Z"
    },
    {
      "event": "commented",
      "id": 1311779599,
      "node_id": "IC_kwDOABII585OMCsP",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1311779599",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-11T14:45:52Z",
      "updated_at": "2022-11-11T14:45:52Z",
      "author_association": "CONTRIBUTOR",
      "body": "`6c0bcd0928...f8f7e62f81`: don't change the type of the variable that holds the list of reachable networks (an array of `bool`s), see https://github.com/bitcoin/bitcoin/pull/25390#discussion_r998202653",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#issuecomment-1311779599",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25390"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-28T20:35:35Z",
      "updated_at": "2022-11-28T20:35:35Z",
      "source": {
        "issue": {
          "id": 1466603610,
          "node_id": "PR_kwDOABII585Dz_Yh",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26590",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26590/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26590/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26590/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/26590",
          "number": 26590,
          "state": "closed",
          "state_reason": null,
          "title": "net, refactor: Kill proxy globals",
          "body": "This PR moves the proxy info globals into their own component `ProxyManager` which `CConnman` is made to hold an instance of.\r\n\r\nThe alternative here would be to move the proxy info data directly into `CConnman` but it seems a little nicer for testing to have this be a self contained component.",
          "user": {
            "login": "dergoegge",
            "id": 8077169,
            "node_id": "MDQ6VXNlcjgwNzcxNjk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dergoegge",
            "html_url": "https://github.com/dergoegge",
            "followers_url": "https://api.github.com/users/dergoegge/followers",
            "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
            "organizations_url": "https://api.github.com/users/dergoegge/orgs",
            "repos_url": "https://api.github.com/users/dergoegge/repos",
            "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/dergoegge/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 5,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26590",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/26590",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/26590.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/26590.patch"
          },
          "closed_at": "2022-12-07T11:52:53Z",
          "created_at": "2022-11-28T15:14:48Z",
          "updated_at": "2022-12-09T15:32:53Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-12-17T13:33:34Z",
      "updated_at": "2022-12-17T13:33:34Z",
      "source": {
        "issue": {
          "id": 1191033673,
          "node_id": "PR_kwDOABII5841jAnn",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24748",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24748/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24748/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24748/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/24748",
          "number": 24748,
          "state": "open",
          "state_reason": null,
          "title": "test/BIP324: functional tests for v2 P2P encryption",
          "body": "This PR introduces support for v2 P2P encryption(BIP 324) in the existing functional test framework and adds functional tests for the same.\r\n\r\nIt's built on top of:\r\n* #28374\r\n\r\nOnly the last 13 commits belong to this PR. (from `[rpc/net] Allow v2 p2p support in addconnection`  to `[test] Check whether v2 TestNode performs downgrading` )\r\n\r\n### commits overview\r\n1. introduces a new class `EncryptedP2PState` to store the keys, functions for performing the initial v2 handshake and encryption/decryption.\r\n3. this class is used by `P2PConnection` in inbound/outbound connections to perform the initial v2 handshake before the v1 version handshake. Only after the initial v2 handshake is performed do application layer P2P messages(version, verack etc..) get exchanged. (in a v2 connection)\r\n    - `v2_state` is the object of class `EncryptedP2PState` in `P2PConnection` used to store its keys, session-id etc.\r\n    - a node [advertising](https://github.com/stratospher/blogosphere/blob/main/integration_test_bip324.md#advertising-to-support-v2-p2p) support for  v2 P2P is different from a node actually [supporting v2 P2P](https://github.com/stratospher/blogosphere/blob/main/integration_test_bip324.md#supporting-v2-p2p) (differ when false advertisement of services occur)\r\n        - introduce a boolean variable `supports_v2_p2p` in `P2PConnection` to denote if it supports v2 P2P.\r\n        - introduce a boolean variable `advertises_v2_p2p` to denote whether `P2PConnection` which mimics peer behaviour advertises V2 P2P support. Default option is `False`.\r\n    - In the test framework, you can create Inbound and Outbound connections to `TestNode`\r\n        1. During **Inbound Connections**, `P2PConnection` is the initiator [`TestNode` <--------- `P2PConnection`]\r\n            - Case 1:\r\n                - if the `TestNode` advertises/signals v2 P2P support (means `self.nodes[i]` set up with `\"-v2transport=1\"`), different behaviour will be exhibited based on whether:\r\n                    1. `P2PConnection` supports v2 P2P\r\n                    2. `P2PConnection` does not support v2 P2P\r\n               - In a real world scenario, the initiator node would intrinsically know if they support v2 P2P based on whatever code they choose to run. However, in the test scenario where we mimic peer behaviour, we have no way of knowing if `P2PConnection` should support v2 P2P or not. So `supports_v2_p2p` boolean variable is used as an option to enable support for v2 P2P in `P2PConnection`.\r\n              - Since the `TestNode` advertises v2 P2P support (using \"-v2transport=1\"), our initiator `P2PConnection` would send:\r\n                1. (if the `P2PConnection` supports v2 P2P) ellswift + garbage bytes to initiate the connection\r\n                2. (if the `P2PConnection` does not support v2 P2P) version message to initiate the connection\r\n           - Case 2:\r\n                - if the `TestNode` doesn't signal v2 P2P support; `P2PConnection` being the initiator would send version message to initiate a connection.\r\n       2. During **Outbound Connections** [TestNode --------> P2PConnection]\r\n           - initiator `TestNode` would send:\r\n                - (if the `P2PConnection` advertises v2 P2P) ellswift + garbage bytes to initiate the connection\r\n                - (if the `P2PConnection` advertises v2 P2P) version message to initiate the connection\r\n          - Suppose `P2PConnection` advertises v2 P2P support when it actually doesn't support v2 P2P (false advertisement scenario)\r\n               - `TestNode` sends ellswift + garbage bytes\r\n               - `P2PConnection` receives but can't process it and disconnects.\r\n               - `TestNode` then tries using v1 P2P and sends version message\r\n               - `P2PConnection` receives/processes this successfully and they communicate on v1 P2P\r\n\r\n4. the encrypted P2P messages follow a different format - 3 byte length + 1-13 byte message_type + payload + 16 byte MAC\r\n5. includes support for testing decoy messages and v2 connection downgrade(using false advertisement - when a v2 node makes an outbound connection to a node which doesn't support v2 but is advertised as v2 by some malicious\r\nintermediary)\r\n\r\n### run the tests\r\n* functional test - `test/functional/p2p_v2_encrypted.py` `test/functional/p2p_v2_earlykeyresponse.py`\r\n\r\nI'm also super grateful to @ dhruv for his really valuable feedback on this branch.\r\nAlso written a more elaborate explanation here - https://github.com/stratospher/blogosphere/blob/main/integration_test_bip324.md",
          "user": {
            "login": "stratospher",
            "id": 44024636,
            "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
            "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/stratospher",
            "html_url": "https://github.com/stratospher",
            "followers_url": "https://api.github.com/users/stratospher/followers",
            "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
            "organizations_url": "https://api.github.com/users/stratospher/orgs",
            "repos_url": "https://api.github.com/users/stratospher/repos",
            "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/stratospher/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 5334691551,
              "node_id": "LA_kwDOABII588AAAABPfju3w",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/CI%20failed",
              "name": "CI failed",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 8,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24748",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/24748",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/24748.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/24748.patch"
          },
          "created_at": "2022-04-03T20:14:51Z",
          "updated_at": "2023-10-19T15:53:18Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-12-22T05:51:02Z",
      "updated_at": "2022-12-22T05:51:02Z",
      "source": {
        "issue": {
          "id": 1277080263,
          "node_id": "PR_kwDOABII58459Rfx",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25429",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25429/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25429/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25429/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/25429",
          "number": 25429,
          "state": "closed",
          "state_reason": null,
          "title": "refactor: Avoid UniValue copies",
          "body": "UniValue copies have been a source of performance related bugs and regressions, so it would be good to remove the copy constructors.\r\n\r\nThis is the first change toward the goal. This change uses a `const UniValue&` where possible.\r\n\r\nSee also:\r\n\r\n* https://github.com/bitcoin-core/univalue-subtree/pull/27\r\n* https://github.com/bitcoin/bitcoin/pull/15974",
          "user": {
            "login": "maflcko",
            "id": 6399679,
            "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maflcko",
            "html_url": "https://github.com/maflcko",
            "followers_url": "https://api.github.com/users/maflcko/followers",
            "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
            "organizations_url": "https://api.github.com/users/maflcko/orgs",
            "repos_url": "https://api.github.com/users/maflcko/repos",
            "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/maflcko/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 12,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25429",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/25429",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/25429.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/25429.patch"
          },
          "closed_at": "2023-02-23T17:51:57Z",
          "created_at": "2022-06-20T15:17:09Z",
          "updated_at": "2023-02-23T17:52:03Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-06T18:33:19Z",
      "updated_at": "2023-01-06T18:33:19Z",
      "source": {
        "issue": {
          "id": 1522925178,
          "node_id": "PR_kwDOABII585G1ozs",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26837",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26837/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26837/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26837/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/26837",
          "number": 26837,
          "state": "closed",
          "state_reason": null,
          "title": "I2P network optimizations",
          "body": "* Reuse an I2P transient session instead of discarding it if we failed to connect to the desired peer. This means we never used the generated address (destination), whose creation is not cheap. This does not mean that we will use the same address for more than one peer.\r\n* Lower the number of tunnels for transient sessions.\r\n* Explicitly specify the number of tunnels for persistent sessions instead of relying on the defaults which differ between I2P routers. This way we get consistent behavior with all routers.\r\n\r\nAlleviates: https://github.com/bitcoin/bitcoin/issues/26754\r\n\r\n(I have not tested this with i2pd, yet)",
          "user": {
            "login": "vasild",
            "id": 266751,
            "node_id": "MDQ6VXNlcjI2Njc1MQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vasild",
            "html_url": "https://github.com/vasild",
            "followers_url": "https://api.github.com/users/vasild/followers",
            "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
            "organizations_url": "https://api.github.com/users/vasild/orgs",
            "repos_url": "https://api.github.com/users/vasild/repos",
            "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/vasild/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 27,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26837",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/26837",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/26837.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/26837.patch"
          },
          "closed_at": "2023-02-22T17:58:53Z",
          "created_at": "2023-01-06T17:43:48Z",
          "updated_at": "2023-02-27T14:10:30Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-25T16:48:47Z",
      "updated_at": "2023-01-25T16:48:47Z",
      "source": {
        "issue": {
          "id": 1556251310,
          "node_id": "PR_kwDOABII585IfgqH",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26965",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26965/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26965/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26965/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/26965",
          "number": 26965,
          "state": "closed",
          "state_reason": null,
          "title": "refactor: Remove stray cs_main redundant declaration",
          "body": "Looks like this was forgotten when introducing kernel/cs_main ?\r\n\r\nAlso, there is a commit to export threadsafety.h from sync.h.",
          "user": {
            "login": "maflcko",
            "id": 6399679,
            "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maflcko",
            "html_url": "https://github.com/maflcko",
            "followers_url": "https://api.github.com/users/maflcko/followers",
            "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
            "organizations_url": "https://api.github.com/users/maflcko/orgs",
            "repos_url": "https://api.github.com/users/maflcko/repos",
            "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/maflcko/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 8,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26965",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/26965",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/26965.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/26965.patch"
          },
          "closed_at": "2023-01-30T17:27:59Z",
          "created_at": "2023-01-25T08:36:07Z",
          "updated_at": "2023-01-31T11:10:51Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "labeled",
      "id": 8391634226,
      "node_id": "LE_lADOABII585L6FX5zwAAAAH0Li0y",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8391634226",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-30T19:15:33Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8411365291,
      "node_id": "HRFPE_lADOABII585L6FX5zwAAAAH1Wz-r",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8411365291",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-01T15:02:45Z"
    },
    {
      "event": "commented",
      "id": 1412208407,
      "node_id": "IC_kwDOABII585ULJcX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1412208407",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-01T15:04:14Z",
      "updated_at": "2023-02-01T15:04:14Z",
      "author_association": "CONTRIBUTOR",
      "body": "`f8f7e62f81...3db109e794`: rebase due to conflicts\r\n\r\n@ajtowns, I think I addressed all your suggestions?",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#issuecomment-1412208407",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25390"
    },
    {
      "event": "mentioned",
      "id": 8411383294,
      "node_id": "MEE_lADOABII585L6FX5zwAAAAH1W4X-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8411383294",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-01T15:04:15Z"
    },
    {
      "event": "subscribed",
      "id": 8411383316,
      "node_id": "SE_lADOABII585L6FX5zwAAAAH1W4YU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8411383316",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-01T15:04:15Z"
    },
    {
      "event": "unlabeled",
      "id": 8412022687,
      "node_id": "UNLE_lADOABII585L6FX5zwAAAAH1ZUef",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8412022687",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-01T16:02:58Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-10T14:44:53Z",
      "updated_at": "2023-02-10T14:44:53Z",
      "source": {
        "issue": {
          "id": 1579504924,
          "node_id": "PR_kwDOABII585Js_-Z",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27071",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27071/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27071/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27071/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/27071",
          "number": 27071,
          "state": "closed",
          "state_reason": null,
          "title": "Handle CJDNS from LookupSubNet()",
          "body": "`LookupSubNet()` would treat addresses that start with `fc` as IPv6 even if `-cjdnsreachable` is set. This creates the following problems where it is called:\r\n\r\n* `NetWhitelistPermissions::TryParse()`: otherwise `-whitelist=` fails to white list CJDNS addresses: when a CJDNS peer connects to us, it will be matched against IPv6 `fc...` subnet and the match will never succeed.\r\n\r\n* `BanMapFromJson()`: CJDNS bans are stored as just IPv6 addresses in `banlist.json`. Upon reading from disk they have to be converted back to CJDNS, otherwise, after restart, a ban entry like (`fc00::1`, IPv6) would not match a peer (`fc00::1`, CJDNS).\r\n    \r\n* `RPCConsole::unbanSelectedNode()`: in the GUI the ban entries go through `CSubNet::ToString()` and back via `LookupSubNet()`. Then it must match whatever is stored in `BanMan`, otherwise it is impossible to unban via the GUI.\r\n\r\nThese were uncovered by https://github.com/bitcoin/bitcoin/pull/26859.\r\n\r\nThus, flip the result of `LookupSubNet()` to CJDNS if the network base address starts with `fc` and `-cjdnsreachable` is set. Since subnetting/masking does not make sense for CJDNS (the address is \"random\" bytes, like Tor and I2P, there is no hierarchy) treat `fc.../mask` as an invalid `CSubNet`.\r\n\r\nTo achieve that, `MaybeFlipIPv6toCJDNS()` has to be moved from `net` to `netbase` and thus also `IsReachable()`. In the process of moving `IsReachable()`, `SetReachable()` and `vfLimited[]` encapsulate those in a class.",
          "user": {
            "login": "vasild",
            "id": 266751,
            "node_id": "MDQ6VXNlcjI2Njc1MQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vasild",
            "html_url": "https://github.com/vasild",
            "followers_url": "https://api.github.com/users/vasild/followers",
            "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
            "organizations_url": "https://api.github.com/users/vasild/orgs",
            "repos_url": "https://api.github.com/users/vasild/repos",
            "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/vasild/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "milestone": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/60",
            "html_url": "https://github.com/bitcoin/bitcoin/milestone/60",
            "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/60/labels",
            "id": 9286970,
            "node_id": "MI_kwDOABII584AjbU6",
            "number": 60,
            "state": "open",
            "title": "26.0",
            "description": "",
            "creator": {
              "login": "fanquake",
              "id": 863730,
              "node_id": "MDQ6VXNlcjg2MzczMA==",
              "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/fanquake",
              "html_url": "https://github.com/fanquake",
              "followers_url": "https://api.github.com/users/fanquake/followers",
              "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
              "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
              "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
              "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
              "organizations_url": "https://api.github.com/users/fanquake/orgs",
              "repos_url": "https://api.github.com/users/fanquake/repos",
              "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
              "received_events_url": "https://api.github.com/users/fanquake/received_events",
              "type": "User",
              "site_admin": false
            },
            "open_issues": 7,
            "closed_issues": 97,
            "created_at": "2023-04-15T11:36:05Z",
            "updated_at": "2023-10-23T14:36:43Z"
          },
          "locked": false,
          "comments": 24,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27071",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/27071",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/27071.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/27071.patch"
          },
          "closed_at": "2023-10-19T16:49:02Z",
          "created_at": "2023-02-10T11:20:45Z",
          "updated_at": "2023-10-23T12:24:09Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "labeled",
      "id": 8550190113,
      "node_id": "LE_lADOABII585L6FX5zwAAAAH9oYwh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8550190113",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-17T19:16:30Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8602239815,
      "node_id": "HRFPE_lADOABII585L6FX5zwAAAAIAu8NH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8602239815",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-24T14:09:08Z"
    },
    {
      "event": "commented",
      "id": 1443734529,
      "node_id": "IC_kwDOABII585WDaQB",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1443734529",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-24T14:09:44Z",
      "updated_at": "2023-02-24T14:09:44Z",
      "author_association": "CONTRIBUTOR",
      "body": "`3db109e794...e42ce20c65`: rebase due to conflicts",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#issuecomment-1443734529",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25390"
    },
    {
      "event": "unlabeled",
      "id": 8602857508,
      "node_id": "UNLE_lADOABII585L6FX5zwAAAAIAxTAk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8602857508",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-24T15:07:34Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-14T17:23:09Z",
      "updated_at": "2023-03-14T17:23:09Z",
      "source": {
        "issue": {
          "id": 1623253674,
          "node_id": "PR_kwDOABII585L_JCH",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27254",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27254/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27254/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27254/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/27254",
          "number": 27254,
          "state": "closed",
          "state_reason": null,
          "title": "refactor: Extract util/fs from util/system",
          "body": "This pull request is part of the `libbitcoinkernel` project https://github.com/bitcoin/bitcoin/issues/24303 https://github.com/bitcoin/bitcoin/projects/18 and more specifically its \"Step 2: Decouple most non-consensus code from libbitcoinkernel\". This commit was originally authored by empact and is taken from its parent PR #25152.\r\n\r\n#### Context\r\n\r\nThere is an ongoing effort to decouple the `ArgsManager` used for command line parsing user-provided arguments from the libbitcoinkernel library (https://github.com/bitcoin/bitcoin/pull/25290, https://github.com/bitcoin/bitcoin/pull/25487, https://github.com/bitcoin/bitcoin/pull/25527, https://github.com/bitcoin/bitcoin/pull/25862, https://github.com/bitcoin/bitcoin/pull/26177, and https://github.com/bitcoin/bitcoin/pull/27125). The `ArgsManager` is defined in `system.h`. A similar pull request extracting functionality from `system.h` has been merged in https://github.com/bitcoin/bitcoin/pull/27238.\r\n\r\n#### Changes\r\n\r\nNext to providing better code organization, this PR removes some reliance of the tree of libbitcoinkernel header includes on `system.h` (and thus the `ArgsManager` definition) by moving filesystem related functions out of the `system.*` files. \r\n\r\nThere is already a pair of `fs.h` / `fs.cpp` in the top-level `src/` directory. They were not combined with the files introduced here, to keep the patch cleaner and more importantly because they are often included without the utility functions. The new files are therefore named `fs_helpers` and the existing `fs` files are moved into the util directory.\r\n\r\nFurther commits splitting more functionality out of `system.h` are still in #25152 and will be submitted in separate PRs once this PR has been processed.",
          "user": {
            "login": "TheCharlatan",
            "id": 8421793,
            "node_id": "MDQ6VXNlcjg0MjE3OTM=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/TheCharlatan",
            "html_url": "https://github.com/TheCharlatan",
            "followers_url": "https://api.github.com/users/TheCharlatan/followers",
            "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
            "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
            "repos_url": "https://api.github.com/users/TheCharlatan/repos",
            "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 11,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27254",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/27254",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/27254.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/27254.patch"
          },
          "closed_at": "2023-04-03T13:41:34Z",
          "created_at": "2023-03-14T11:11:00Z",
          "updated_at": "2023-04-03T13:41:35Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "labeled",
      "id": 8913432756,
      "node_id": "LE_lADOABII585L6FX5zwAAAAITSDC0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8913432756",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-03T14:05:39Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8954837008,
      "node_id": "HRFPE_lADOABII585L6FX5zwAAAAIVv_gQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8954837008",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-07T16:20:54Z"
    },
    {
      "event": "commented",
      "id": 1500433830,
      "node_id": "IC_kwDOABII585Zbs2m",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1500433830",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-07T16:21:08Z",
      "updated_at": "2023-04-07T16:21:08Z",
      "author_association": "CONTRIBUTOR",
      "body": "`e42ce20c65...ebfe47e594`: rebase due to conflicts",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#issuecomment-1500433830",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25390"
    },
    {
      "event": "unlabeled",
      "id": 8954909041,
      "node_id": "UNLE_lADOABII585L6FX5zwAAAAIVwRFx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8954909041",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-07T16:36:43Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-13T01:33:28Z",
      "updated_at": "2023-04-13T01:33:28Z",
      "source": {
        "issue": {
          "id": 1652681372,
          "node_id": "PR_kwDOABII585NhcBe",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27411",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27411/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27411/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27411/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/27411",
          "number": 27411,
          "state": "closed",
          "state_reason": null,
          "title": "p2p: Restrict self-advertisements with privacy networks to avoid fingerprinting",
          "body": "The current logic for self-advertisements works such that we detect as many local addresses as we can, and then, using the scoring matrix from `CNetAddr::GetReachabilityFrom()`, self-advertise with the address that fits best to our peer.\r\nIt is in general not hard for our peers to distinguish our self-advertisements from other addrs we send them, because we self-advertise every ~24h and because the first addr we send over a connection is likely our self-advertisement. \r\n\r\n`GetReachabilityFrom()` currently only takes into account actual reachability, but not whether we'd _want_ to announce our identity for one network to peers from other networks, which is not straightforward in connection with privacy networks. \r\n\r\nWhile the general approach is to prefer self-advertising with the address for the network our peer is on, there are several special situations in which we don't have one, and as a result could allow self-advertise other local addresses, for example:\r\n\r\nA) We run i2p and clearnet, use `-i2pacceptincoming=0` (so we have no local i2p address), and we have a local ipv4 address. In this case, we'd advertise the ipv4 address to our outbound i2p peers.\r\n\r\nB) Our `-discover` logic cannot detect any local clearnet addresses in our network environment, but we are actually reachable over clearnet. If we ran bitcoind clearnet-only, we'd always advertise the address our peer sees us with instead, and could get inbound peers this way. Now, if we also have an onion service running (but aren't using tor as a proxy for clearnet connections), we could advertise our onion address to clearnet peers, so that they would be able to connect our clearnet and onion identities. \r\n\r\nThis PR tries to avoid these situations by \r\n1.) never advertising our local Tor or I2P address to peers from other networks.\r\n2.) never advertising local addresses from non-anonymity networks to peers from Tor or I2P\r\n\r\nNote that this affects only our own self-advertisements, the rules to forward other people's addrs are not changed.\r\n\r\n[Edit] after Initial [discussion](https://github.com/bitcoin/bitcoin/pull/27411#issuecomment-1497176155): CJDNS is not being treated like Tor and I2P at least for now, because it has different privacy properties and for the practical reason that it has still very few bitcoin nodes.\r\n",
          "user": {
            "login": "mzumsande",
            "id": 48763452,
            "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
            "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mzumsande",
            "html_url": "https://github.com/mzumsande",
            "followers_url": "https://api.github.com/users/mzumsande/followers",
            "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
            "organizations_url": "https://api.github.com/users/mzumsande/orgs",
            "repos_url": "https://api.github.com/users/mzumsande/repos",
            "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/mzumsande/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 98298007,
              "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
              "name": "P2P",
              "color": "006b75",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 14,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27411",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/27411",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/27411.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/27411.patch"
          },
          "closed_at": "2023-07-13T17:51:24Z",
          "created_at": "2023-04-03T19:56:42Z",
          "updated_at": "2023-08-17T13:31:05Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 1513345887,
      "node_id": "IC_kwDOABII585aM9Nf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1513345887",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-18T15:17:58Z",
      "updated_at": "2023-04-18T15:17:58Z",
      "author_association": "CONTRIBUTOR",
      "body": "Light Approach ACK after reading the code and the excellent review discussions. It looks like this has been progressively honed and improved quite a bit. Will test and review.",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#issuecomment-1513345887",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25390"
    },
    {
      "event": "reviewed",
      "id": 1390434676,
      "node_id": "PRR_kwDOABII585S4Fl0",
      "url": null,
      "actor": null,
      "commit_id": "ebfe47e5942fa5e0ce21b44511258b6dfa4cf621",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Light initial ACK ebfe47e5942fa5e0ce21b44511258b6dfa4cf621 modulo poking around with the thread safety coverage/guarantees to break them. Compiled and ran unit tests at each commit with ARM64 clang 16 (except the scripted-diff ones).\r\n\r\nFeel free to ignore the comments below unless you need to repush.",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#pullrequestreview-1390434676",
      "submitted_at": "2023-04-18T16:09:38Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
    },
    {
      "event": "commented",
      "id": 1557425242,
      "node_id": "IC_kwDOABII585c1Gxa",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1557425242",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-22T15:26:38Z",
      "updated_at": "2023-05-22T15:26:38Z",
      "author_association": "MEMBER",
      "body": "Concept ~0. While the first commit introduces new code in `sync.h` that needs maintaining and unit test coverage, the following commits do not demonstrate convincing reasons for it.\r\n\r\n> but it is possible to abuse the mutex and start using it to protect some more, possibly unrelated stuff (we already have this in the current code).\r\n\r\nConcept ACK on improving this.",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#issuecomment-1557425242",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25390"
    },
    {
      "event": "unsubscribed",
      "id": 9304393598,
      "node_id": "UE_lADOABII585L6FX5zwAAAAIqlcd-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9304393598",
      "actor": {
        "login": "joostjager",
        "id": 4638168,
        "node_id": "MDQ6VXNlcjQ2MzgxNjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4638168?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/joostjager",
        "html_url": "https://github.com/joostjager",
        "followers_url": "https://api.github.com/users/joostjager/followers",
        "following_url": "https://api.github.com/users/joostjager/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/joostjager/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/joostjager/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/joostjager/subscriptions",
        "organizations_url": "https://api.github.com/users/joostjager/orgs",
        "repos_url": "https://api.github.com/users/joostjager/repos",
        "events_url": "https://api.github.com/users/joostjager/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/joostjager/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-22T15:51:38Z"
    },
    {
      "event": "labeled",
      "id": 9382045097,
      "node_id": "LE_lADOABII585L6FX5zwAAAAIvNqWp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9382045097",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-30T19:14:48Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "unlabeled",
      "id": 9391459478,
      "node_id": "UNLE_lADOABII585L6FX5zwAAAAIvxkyW",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9391459478",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-31T14:37:04Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-29T21:51:53Z",
      "updated_at": "2023-06-29T21:51:53Z",
      "source": {
        "issue": {
          "id": 1781424558,
          "node_id": "PR_kwDOABII585URgZF",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28007",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28007/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28007/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28007/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/28007",
          "number": 28007,
          "state": "closed",
          "state_reason": null,
          "title": "fix: delay in TimeOffset applied to AdjustedTime caused by send/recei…",
          "body": "On busy VPS and shared host with limited resources, the time between when a messages is sent to the tcpip send or receive \r\nqueue and when it is sent in the case of send queue, or when it is processed (ProcessMessage) can be in excess of 30 seconds. \r\nThis delay introduces a skew in AdjustedTime.\r\n\r\nFor the receive queue, the post processing uses the receive time prior to entering the queue to calculate TimeOffset rather than Now()  which currently includes the delay in the queue.\r\n\r\nFor the send queue, the queued message is altered to update the nTime of the message to the actual time it is being sent rather than the time at which it was queued\r\n\r\nWas tested on an hp 370 G6 24 core 3ghz 192gb host with the daemon launched with -par=2 to restrict the resources of the \r\ndaemon. Logging was added pre-patch to document the delay through the queue and was observed for both send and receive to be occasionally > 30 seconds when the daemon was busy following the tip or during reorgs when the cup utilization for the assigned core  approached 100%.  Significant queue delay occurs most often in the receive queue (several times a minute) and infrequently in the send queue ( 1 observation in several hours of testing ).\r\n\r\n## Checklist:\r\n  _Go over all the following points, and put an `x` in all the boxes that apply._\r\n- [X ] I have performed a self-review of my own code\r\n- [X ] I have commented my code, particularly in hard-to-understand areas\r\n- [ ] I have added or updated relevant unit/integration/functional/e2e tests\r\n- [ ] I have made corresponding changes to the documentation\r\n- [ ] I have assigned this pull request to a milestone _(for repository code-owners and collaborators only)_\r\n",
          "user": {
            "login": "techy2",
            "id": 72998170,
            "node_id": "MDQ6VXNlcjcyOTk4MTcw",
            "avatar_url": "https://avatars.githubusercontent.com/u/72998170?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/techy2",
            "html_url": "https://github.com/techy2",
            "followers_url": "https://api.github.com/users/techy2/followers",
            "following_url": "https://api.github.com/users/techy2/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/techy2/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/techy2/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/techy2/subscriptions",
            "organizations_url": "https://api.github.com/users/techy2/orgs",
            "repos_url": "https://api.github.com/users/techy2/repos",
            "events_url": "https://api.github.com/users/techy2/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/techy2/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 5334691551,
              "node_id": "LA_kwDOABII588AAAABPfju3w",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/CI%20failed",
              "name": "CI failed",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "NONE",
          "locked": false,
          "comments": 4,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28007",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/28007",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/28007.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/28007.patch"
          },
          "closed_at": "2023-06-29T23:53:34Z",
          "created_at": "2023-06-29T20:02:40Z",
          "updated_at": "2023-06-29T23:53:34Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "labeled",
      "id": 9814890398,
      "node_id": "LE_lADOABII585L6FX5zwAAAAJJA1ee",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9814890398",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-13T19:32:04Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-19T04:55:21Z",
      "updated_at": "2023-07-19T04:55:21Z",
      "source": {
        "issue": {
          "id": 1763237710,
          "node_id": "PR_kwDOABII585TUzpd",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27912",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27912/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27912/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27912/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/27912",
          "number": 27912,
          "state": "open",
          "state_reason": null,
          "title": "net: disconnect inside AttemptToEvictConnection",
          "body": "Fixes #27843\r\n\r\nTo avoid overflowing `-maxconnections` disconnect nodes marked for eviction directly inside of `AttemptToEvictConnection()`. This has the end result that new connections will only be accepted _after_ an existing connection is dropped, otherwise the new connection is dropped.\r\n\r\nPreviously the number of connected nodes could overflow `nMaxInbound` as (multiple) new connections could be accepted from `ThreadI2PAccept` -- each marking an existing connection to drop (in the future) -- before `ThreadSocketHandler` looped through to `DisconnectNodes()` and took care of the disconnections.\r\n\r\nNode disconnection and deletion are broken out into individual functions which handle a single node so they can be called both from `DisconnectNodes()` and `AttemptToEvictConnection`. This will result in more un/locking operations to perform mass disconnections, but as this only really happens when the network becomes inactive it should not be a problem.",
          "user": {
            "login": "willcl-ark",
            "id": 6606587,
            "node_id": "MDQ6VXNlcjY2MDY1ODc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6606587?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/willcl-ark",
            "html_url": "https://github.com/willcl-ark",
            "followers_url": "https://api.github.com/users/willcl-ark/followers",
            "following_url": "https://api.github.com/users/willcl-ark/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/willcl-ark/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/willcl-ark/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/willcl-ark/subscriptions",
            "organizations_url": "https://api.github.com/users/willcl-ark/orgs",
            "repos_url": "https://api.github.com/users/willcl-ark/repos",
            "events_url": "https://api.github.com/users/willcl-ark/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/willcl-ark/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 98298007,
              "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
              "name": "P2P",
              "color": "006b75",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 10,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27912",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/27912",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/27912.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/27912.patch"
          },
          "created_at": "2023-06-19T10:26:52Z",
          "updated_at": "2023-08-06T17:47:00Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9863768569,
      "node_id": "HRFPE_lADOABII585L6FX5zwAAAAJL7Sn5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9863768569",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-19T15:01:19Z"
    },
    {
      "event": "commented",
      "id": 1642275801,
      "node_id": "IC_kwDOABII585h4yPZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1642275801",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-19T15:11:26Z",
      "updated_at": "2023-07-19T15:11:26Z",
      "author_association": "CONTRIBUTOR",
      "body": "`ebfe47e594...38c0d628e0`: rebase due to conflicts\r\n\r\n@hebasto, if the purpose of the low level code is to make the higher level code more robust and less bug-prone, then I think `Synced` achieves this. The pattern:\r\n\r\n```cpp\r\nMutex m;\r\nType my_variable GUARDED_BY(m);\r\n```\r\n\r\nis very common. The `Synced` structure encapsulates both, enforces the idiom and makes it impossible to \"to abuse the mutex and start using it to protect some more, possibly unrelated stuff\".\r\n\r\nIt also helps remove `GlobalMutex` usages. `GlobalMutex` could be [confusing](https://github.com/bitcoin/bitcoin/pull/27912#discussion_r1259704670).",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#issuecomment-1642275801",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25390"
    },
    {
      "event": "mentioned",
      "id": 9863891612,
      "node_id": "MEE_lADOABII585L6FX5zwAAAAJL7wqc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9863891612",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-19T15:11:27Z"
    },
    {
      "event": "subscribed",
      "id": 9863891630,
      "node_id": "SE_lADOABII585L6FX5zwAAAAJL7wqu",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9863891630",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-19T15:11:27Z"
    },
    {
      "event": "unlabeled",
      "id": 9864471473,
      "node_id": "UNLE_lADOABII585L6FX5zwAAAAJL9-Ox",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9864471473",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-19T16:04:55Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-20T01:17:29Z",
      "updated_at": "2023-07-20T01:17:29Z",
      "source": {
        "issue": {
          "id": 1805228255,
          "node_id": "PR_kwDOABII585VieNH",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28078",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28078/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28078/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28078/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/28078",
          "number": 28078,
          "state": "closed",
          "state_reason": null,
          "title": "net, refactor: remove unneeded exports, use helpers over low-level code, use optional",
          "body": "and other improvements noticed while reviewing #27411.\r\n\r\nAddresses https://github.com/bitcoin/bitcoin/pull/27411#discussion_r1263969104 and https://github.com/bitcoin/bitcoin/pull/27411#discussion_r1263967598.\r\n\r\nSee commit messages for details.",
          "user": {
            "login": "jonatack",
            "id": 2415484,
            "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jonatack",
            "html_url": "https://github.com/jonatack",
            "followers_url": "https://api.github.com/users/jonatack/followers",
            "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
            "organizations_url": "https://api.github.com/users/jonatack/orgs",
            "repos_url": "https://api.github.com/users/jonatack/repos",
            "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/jonatack/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 11,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28078",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/28078",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/28078.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/28078.patch"
          },
          "closed_at": "2023-09-21T15:26:38Z",
          "created_at": "2023-07-14T17:27:45Z",
          "updated_at": "2023-09-21T19:16:43Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-20T01:22:07Z",
      "updated_at": "2023-07-20T01:22:07Z",
      "source": {
        "issue": {
          "id": 1804628458,
          "node_id": "PR_kwDOABII585Vgaql",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28075",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28075/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28075/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28075/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/28075",
          "number": 28075,
          "state": "open",
          "state_reason": null,
          "title": "util: Remove DirIsWritable, GetUniquePath",
          "body": "`GetUniquePath` is only used in tests and in `DirIsWritable`. The check by `DirIsWritable` is redundant with the check done in `LockDirectory`.\r\n\r\nFix the redundancy by removing everything, except `LockDirectory`.",
          "user": {
            "login": "maflcko",
            "id": 6399679,
            "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maflcko",
            "html_url": "https://github.com/maflcko",
            "followers_url": "https://api.github.com/users/maflcko/followers",
            "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
            "organizations_url": "https://api.github.com/users/maflcko/orgs",
            "repos_url": "https://api.github.com/users/maflcko/repos",
            "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/maflcko/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 241832923,
              "node_id": "MDU6TGFiZWwyNDE4MzI5MjM=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Utils/log/libs",
              "name": "Utils/log/libs",
              "description": "",
              "color": "5319e7",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 5,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28075",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/28075",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/28075.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/28075.patch"
          },
          "created_at": "2023-07-14T10:26:23Z",
          "updated_at": "2023-10-23T17:02:14Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "labeled",
      "id": 10425822548,
      "node_id": "LE_lADOABII585L6FX5zwAAAAJtbW1U",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10425822548",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-20T17:08:55Z",
      "label": {
        "name": "Needs Conceptual Review",
        "color": "fef2c0"
      }
    },
    {
      "event": "labeled",
      "id": 10438502582,
      "node_id": "LE_lADOABII585L6FX5zwAAAAJuLui2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10438502582",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-21T17:29:28Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 1748920813,
      "node_id": "IC_kwDOABII585oPmnt",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1748920813",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-10-05T13:38:31Z",
      "updated_at": "2023-10-05T13:38:31Z",
      "author_association": "CONTRIBUTOR",
      "body": "`38c0d628e0...b749c4d2ca`: rebase due to conflicts",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#issuecomment-1748920813",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25390"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 10564001965,
      "node_id": "HRFPE_lADOABII585L6FX5zwAAAAJ1qeCt",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10564001965",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-10-05T13:38:36Z"
    },
    {
      "event": "unlabeled",
      "id": 10564784936,
      "node_id": "UNLE_lADOABII585L6FX5zwAAAAJ1tdMo",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10564784936",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-10-05T14:35:15Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 10715699663,
      "node_id": "LE_lADOABII585L6FX5zwAAAAJ-tJnP",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10715699663",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-10-19T18:36:28Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGZkNmQ5NTk0YjdhZDE4ZGJkYWYwYzEzZTc0NGZhYThmMjQ3OTdiOWE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fd6d9594b7ad18dbdaf0c13e744faa8f24797b9a",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/fd6d9594b7ad18dbdaf0c13e744faa8f24797b9a",
      "tree": {
        "sha": "733d44ffd1e5fdd8e5db127d25b6e60c6ab329c6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/733d44ffd1e5fdd8e5db127d25b6e60c6ab329c6"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 733d44ffd1e5fdd8e5db127d25b6e60c6ab329c6\nparent 0046f3dc2709e9887336050c3461e26e3c185965\nauthor Vasil Dimov <vd@FreeBSD.org> 1655310458 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1698059448 +0200\n\nsync: introduce a thread safe generic container\n\nIt can contain anything, encapsulates a mutex to synchronize access to\nit and enfoces access through it.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmU2VLgACgkQVN8G9ktV\ny7+g+B//eAovcPIPSDfPH0zdXfNIethIHjHXMzp0q178wRWnQVROZYhRuSZ0gX0u\ncmmkY5p03DvOtVW6AB6azvWPRx6iqFLwcCWabueV8vbhNiS34s0q2Y93eF6FoxRk\nmBo33mLIdb5n8rvwPRdgREVyNk4LAfnLUBOHNe2pVCBByJSCA50P73RfK5TTfvtu\nojXTgEKn/Y+FYMOIr8ihphaRrIm85L1BhvPoN7D2nB7mIcl9Hu+LCJLbHz0HWsqF\nuCX+4WuihpMMgRGEfQJ7msBmlFXZgmM4IO9h5/8njkpRpElFHCNsGV5vsdLMSton\nQxcXybPGJCbAmrDIhmFrnaD8SZMIxqdkUVlD4s5iA5bkQdMyTixAa/vEvotTU5o4\nrgAD4cKhCcTwyfSyEXgKVTTyaxHQq4WY85gxo81CXDAEqe7YhfPS8UDuRrdGFQVe\niDp/DhPVSB20PoDTKSlyQ4JfslxUTKFcdU9DVBjCh0i+hVwutPmBMECp20dJXJZS\nx7ESAhMMx2WFRKoP40DSpOUMPla/TPZ4rT4TnQo6fbQFrg750u8VW6kwj80D009N\nm8Y7d+ETaGkKosFRyoUuvLks+cnBmnRGnMFb4/pO0j4rz5RRJVKE6v7kkjqyXgPM\nMSXWV6wezOfYiX/tagE+2WoXMCgmJDoDsg61mHwq/WXHDMSXQ7faNJ6B5QrVWYN0\n96VCG6qttbDP6dRvPamOTfPOaqdeOko7BRxdesNTLbsvravPEOgrmxAtt825n9/s\ncekQTc3oC5Bx8DD3+QBqQizY+o8MWh++rFfpVJpRyTPyTAXPHr7DnCxSD7U48bBp\nusUTGh74DFzLxBYHAQzrvwIpP0JDh2A0tpp5Zk3LxUaMwv2wGXIo3ljZ4SVrEzCM\nCW21v36XCk0LIWpeBOyTU49G7qITuoNAOiq5N+0VRqXrnjjW0G3s5ozsQloDclrd\n7II+sYFtG+S8xnQdn7rsSP+WOJLkAMXoJBpJzFBTGavVFNGw6EPVKn5jUbzaqYmJ\ncQOcbhqymJUEj2fznH31EQbwJaR2+l84lzfTeQo+mJ2UHq20w6jwN/KPZXuOJZPk\nEjHxsX6f+2O4gOjy4ADIXCNE5MjlqdDs2KJFuGnwA7vHPeRZC2oLuGelIL5mfGkA\n41ABBH7DdzHZqXdca9MtSZBZT9dYtEdCGzRP6TmCbQtWQvE1xhaTxD7Dx1SVJ4Lr\nxxM7v4e1Qo/YOLpcuFGxjyLyvR8286wtPaqiQ5/QMm94Cd1f8Hs+HxXYgLKs7FY2\n2rEPzMtqD1pwcJ/xNtE2jUxcwt5/8frThcj5T+zxVkyQ5V7KSEdV0Rg/0BFQ9pNW\n+t2gWCRIBm0nMakE+J6zBfJj/kyNMw==\n=YtXd\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0046f3dc2709e9887336050c3461e26e3c185965",
          "sha": "0046f3dc2709e9887336050c3461e26e3c185965",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/0046f3dc2709e9887336050c3461e26e3c185965"
        }
      ],
      "message": "sync: introduce a thread safe generic container\n\nIt can contain anything, encapsulates a mutex to synchronize access to\nit and enfoces access through it.",
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2023-10-23T11:10:48Z"
      },
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2022-06-15T16:27:38Z"
      },
      "sha": "fd6d9594b7ad18dbdaf0c13e744faa8f24797b9a"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDFhY2E4ZDgyZDJiMzE4NjMyYjdkNTA4ZGVhOGMyOTg1MDRmMzY2MTE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1aca8d82d2b318632b7d508dea8c298504f36611",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/1aca8d82d2b318632b7d508dea8c298504f36611",
      "tree": {
        "sha": "7d088c0d3d27fbd5f4bc4cfc63320b953d5b69de",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7d088c0d3d27fbd5f4bc4cfc63320b953d5b69de"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 7d088c0d3d27fbd5f4bc4cfc63320b953d5b69de\nparent fd6d9594b7ad18dbdaf0c13e744faa8f24797b9a\nauthor Vasil Dimov <vd@FreeBSD.org> 1656494852 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1698062962 +0200\n\nscripted-diff: rename mapLocalHost to g_my_net_addr\n\n-BEGIN VERIFY SCRIPT-\nsed -i -e 's/mapLocalHost/g_my_net_addr/g' $(git grep -l mapLocalHost)\n-END VERIFY SCRIPT-\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmU2YnYACgkQVN8G9ktV\ny78CJx/9G1edTksuc/NI+wUx3X8abwjL+WJliqkMLghnXEZyaAKcSjULckHQJ24W\nwdYSv48FvN/AvPqlk5j2T4I2RxHbjH4zfuPAG6RQI9x/BUHLDHLC+1b/KKKmf6b9\nK1bpzHaYlgELE/b4OjoaNC4RCvSOx80mDCAKqj+Gga2UYd8v21Uxx9SEvjh1CZLB\n6fj6dkKCavZ7rWbpLFe8d8raPmaPLE96K4GjlmdnUoEZ7EOFDKyTSf0gzlY5BSEG\n8iGjw4uwwMQla2uUN989fvT4MIQ9C14aHVuquY1Lc3p+Qds1jt6+R23bxJkmuZF4\njweYkr4bLhB/S5OVfBeajowhUjq95uKd+wcQ1PDWw82Avn6HsPv3CvOmdU9az9Qz\nML1msw48UVyALAR67Xcws33viMGKyNbmYr4aQS77esfhOEPJrjflQbONClLTUT+Z\n05ir0DFpyyGB8hZt46ac/2nuuuIOPT9i9hH9TslyiUvOOY7oUx3jC2PgD8+eJ+d2\nx/dY7gqXPO8IV0JfSbAoTQxm7M74GJQ5oTqh2WyFn58gw0VxBK3QsnLutXsJYupu\nYA+kHFuu2hAGbhiGCU2Mui42/8nsr6jds5OJfWREIm8HYt6uYSUOGYp9GzWG/EEd\nfIx3cCB2uCLxiWVjGiUV0AbtWpuIsVqCG5BlUePJOqqt8OZQe3snMGuAjhTRCXHy\nTeL//0ikaW4u/E/5/oZlOf45rtFZfHmIO0ULXGkCkdmpgrS/b5n3NEpC96L48NHv\nhdagG/STEG8GL0QpFG9uSOmDnCdATde60RwjIMGJ8ukybyYmod8yVUO3yG3Ylu5e\neMJPp91d2Tf9RgwjUbNd+Wj+E6J64Ww6Yp1TFhEIvQsv4LnD/84rp2sfXzUHN6yG\nAFM9ekDw2UG90acN0ppYr1dzlzM9NTFVONXG5+yBOSg2u1VY6blz7fWpCIiK9jTo\n4IabiwdjIThbr6lMqYpZeNzHThYOIMXTQZZfUUoGO41mIwrDpPk7DZA9ImvUG63y\nn6bBeZcpBhaXJq7bHAyLg7C7kTvWPCqTMPB1oJfuu2/pZrqmPOjbNm7V7RWPby6T\nHYdLAQs28d4VldvHFQ1E/mJP/M+x5SsR84Ah/RCuTMWTmWl+/nVf8cQmjFcJ+nn0\ntyZRcfy+PLHpIQpOOOO9gEiSIqC/br7U+sZXTBSFxYg7uFKouT69tgpvNvik4TUz\nv/YOdYGlb/wKGh0/zW63F8+Gg9GT4dnnxgkXnBTo7h1ZuhDJdlnmOTCD0fY0Xk/q\nhfmDTIWOb2YLU7BInP7sKsQ7Du2U+K/OtcERbIBzaELgV4Slg0XFOioToouDzyV4\nxaR0ITR3arDYyfJ8FF96D9TK9Lck2Q==\n=+7Iy\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fd6d9594b7ad18dbdaf0c13e744faa8f24797b9a",
          "sha": "fd6d9594b7ad18dbdaf0c13e744faa8f24797b9a",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/fd6d9594b7ad18dbdaf0c13e744faa8f24797b9a"
        }
      ],
      "message": "scripted-diff: rename mapLocalHost to g_my_net_addr\n\n-BEGIN VERIFY SCRIPT-\nsed -i -e 's/mapLocalHost/g_my_net_addr/g' $(git grep -l mapLocalHost)\n-END VERIFY SCRIPT-",
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2023-10-23T12:09:22Z"
      },
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2022-06-29T09:27:32Z"
      },
      "sha": "1aca8d82d2b318632b7d508dea8c298504f36611"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGY1MTcwZmRlZjI0ZTRhZjkxZGJlZjA5YTYzOTBmM2Q1NTllZjNmMDI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f5170fdef24e4af91dbef09a6390f3d559ef3f02",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/f5170fdef24e4af91dbef09a6390f3d559ef3f02",
      "tree": {
        "sha": "8ee4a87e0f3fbb598faacafe1cb55372e795f695",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8ee4a87e0f3fbb598faacafe1cb55372e795f695"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 8ee4a87e0f3fbb598faacafe1cb55372e795f695\nparent 1aca8d82d2b318632b7d508dea8c298504f36611\nauthor Vasil Dimov <vd@FreeBSD.org> 1655367186 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1698063120 +0200\n\nnet: use Synced<T> for g_my_net_addr and remove g_maplocalhost_mutex\n\nConvert `g_my_net_addr` to use `Synced<T>` and ditch the global mutex\n`g_maplocalhost_mutex`.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmU2YxQACgkQVN8G9ktV\ny78NgB//Qe0UwJ3L586zWLW04kKtHbSJFUk1mSWSZQPKjctS0z9MJzUaRaOfdEcX\nzeAdfTo+2BEVQePjR8EFtiW5Y+dzk1KluhzaMIyA7l8PTbHBBmu3z8VyU2Dv98wx\n1kWumkVGmuIHoCRfP2lA4D3sr4XyrG6Rfrz1zATTUt5rn+4qjCAJ2jfARoxraeDw\nseS/J73VmUViVxP0eUsXuGvSHJfVWrTkcR/menEfnHkHFX4ewhJ9pMNKt+EdrvYr\npWLkwcJAW3dLpnepay+TEyIvQ+yhPKC4YSrbqmQGBEmtP57p7ci3VhugbbmaWO/y\nzN4wh+21K8WED63duokjDs44bHY357fi04ydrrDswLDzeZRkuw+QSl7Qd0vWsabw\ncSPWVDDuhrBINSbs15jYAxDwd43ktzDlYw4KwBAEmAr0pTQbOgt1KiKml8MjPbZQ\nZmLeFnshiWYNUxtWUu9W7N52srpO/fRTYVfqaE6utLZ7iivIjzxQYbmlN4QaZU6P\nkZohWk1/wjbcJM8uopxbCTSEOzngGfkjj8IyB3Ax5OkpVqJMgSF1i8CAT613IKA/\n6TZTSMmU8AMyrZY8O9mxQ1HQGcpy6YKBctjDrb5IhnsgwqMWWprRLtwNLpE+79Fl\n2rpEiXi96yWtcf3N18CsBUJTeC8pQozFf3l6IjCcXgd0hSOb2J9pYV9m8GgI6HHD\nrRC+8oKwmt0gHDU+nAP/vlxXSyIqAPRWzzlkbJSw/ZbSzlBfdEJK0VUnU1ok/YDx\nFTdi9JrwtlL1HqU6rgF2etOwRwowtxBuJEyNdcOTc7YbNgW0W2k3jHlH5TQaz6RL\nfNmUYwNhFCce2I/OrfzgI2AQyGIy4eWM2a79J9cv5iTMZreQwgJdWmaqCBexoEd1\nuKQxy+bYsp6gkWAlmXD0JSU1X6ngzqQqnl1jyOCKYkOf4t7opG/n8VTDIqEapDEA\n3009ZUfx9kNdpcwFTuzVsLHbZxRKh7aFSFegIG6OtOKKioweN6KwvF1Gj0qdk1dX\nzAmPe/T3tHJTbdWzjCaCjjEdQYu7QyaTfjZq8k4VsZVac3vkZDy5lrah6g5DnGq0\nepareA2e9tWPeQDrJ6jyLn/suKBAL1LRUkkUao2eSx9TZb1RwRQlKjIzw4kDl/xq\nAVumj89n9eG2+Pi130aPi608KUcfjP8g7QabyiHLMnEBih6aPUfbWDkNdr5Y9jQ7\nrk3IVWHVa2hsVyg5ZqRkdWmHk9K3A4oSRj0kP00pW3LsuRUYrAXsRt2cbS9KzpV/\nsBWcrXBi2UhySjNEK0bV62j6yMoNfPQRniksuzEAO1A/AL9KMgh6QpIfxjbwGRLs\nE0Z1Oo235h3TLTsalOskLLeRejru+A==\n=oCix\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1aca8d82d2b318632b7d508dea8c298504f36611",
          "sha": "1aca8d82d2b318632b7d508dea8c298504f36611",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/1aca8d82d2b318632b7d508dea8c298504f36611"
        }
      ],
      "message": "net: use Synced<T> for g_my_net_addr and remove g_maplocalhost_mutex\n\nConvert `g_my_net_addr` to use `Synced<T>` and ditch the global mutex\n`g_maplocalhost_mutex`.",
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2023-10-23T12:12:00Z"
      },
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2022-06-16T08:13:06Z"
      },
      "sha": "f5170fdef24e4af91dbef09a6390f3d559ef3f02"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDVkNjhjMWE3YmRhMmQyYTY0NjVlYzA1MmJhZTQ5YmM4YTM3ZjU5NDQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5d68c1a7bda2d2a6465ec052bae49bc8a37f5944",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/5d68c1a7bda2d2a6465ec052bae49bc8a37f5944",
      "tree": {
        "sha": "fb9dab2267a5429bbb9c16d218ba38a83cb1bc96",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fb9dab2267a5429bbb9c16d218ba38a83cb1bc96"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree fb9dab2267a5429bbb9c16d218ba38a83cb1bc96\nparent f5170fdef24e4af91dbef09a6390f3d559ef3f02\nauthor Vasil Dimov <vd@FreeBSD.org> 1656334725 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1698063124 +0200\n\nscripted-diff: rename deadlineTimers to g_deadline_timers\n\n-BEGIN VERIFY SCRIPT-\nsed -i -e 's/deadlineTimers/g_deadline_timers/g' $(git grep -l deadlineTimers)\n-END VERIFY SCRIPT-\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmU2YxUACgkQVN8G9ktV\ny79Soh/9EEqPUocy3nzwmh5FNPA+bLgQT6JZjmlOUD2SmbIIsQiHbBu6MTwRJK/3\nB8uA3U4BkqWA7+uUT4ls1aLghiXmi8tvxeNkDtmrM2lxtDCh3oOOI5Y/zzO5GURP\nW6hNbqsrij1B6gXGSJx0t5dAr+77HnX1YZ4TL3nQ2gqXaf3EcinoY72+4YxdXMCL\nrInNHoo7Q02Us9WrgK8P87GmKmRRTLKCRchou58kpiBDJiOBDzlly2ZJgIP+Fa5h\nQt7Lj8EmEUA2qdZZ4922Sc0kC3gNagBVTlTLu+b3OM4T87cPNdyAiWfCoMU8i5Vh\nQlAmP3PexcUgYHUpk1pFSc8dCC1L4D7A1kVSVxLVyHthMHFGEKPhHT8mIXzpFNjW\n9JVaR+ooSir6ruxeJQylNqx8E4FxpG+7JSqDUfY4j3uqLX2AkH2vaPpLEnyPPkeT\nUA//ifMfxj+jUsrqwks02miEUoWOFnAXpmPzZwyJX13iOqGOmFB2FEGSBkoRS3Iz\nxS8vwqPUUj1AFQkKZPQc0Sah2Pi1QSPHQ5Kduuyh8y/jmCYuhOd1hzqPkSCSDRvA\n06zDtibZOJCH7VrBQiULYwtB/uhwKy9BUydG+3oSlGGxbbC35Q4o48MVq8HOGkBR\nYZnna8JXg5mh4Eozm9N2eptqZbdnFGdcnV51Cgl5ZiNf+dZNgCVOf4sIbaaPNs8K\nM2mavcq79DYQjfy2y+p/ilnxmVVjqEdY/jpC3rHFBmnsab5BdkdOtwkrPKH8kf1h\nXZ8NYpc7MxqZVN6xF6BN3dL+Bu+S1hiNj8l8A1K5FnFBMDMqZegSKd9C2g0OU2+k\nEd5DLyw8SexLnzYLBIaWIG201lPf/2YHMUcaXoFeB6KjeJPjbwCP+ZzX87+1eCmS\n+fFX0DM2l8ubPtPqLN6KEw4uRPXx/nuMz2kH/dmHKZffXM8uzbqEr6tZpK0vR+Gq\nqBtQdFyzHgU1fB77U/Ci5uKCKkKHvin5tp/TR2nEVmmGgLXOMB60HFTAYR4t8l66\nIyMX4Ctuz13KUGHFWNPqsipcRLyMaxgT8rnZL/OyeEHeK4EcBPjZgmmmzUVIBQnW\ntrWAcCsSI3gC8RMau45m6BiIPGBrr58B0QEIfzpV4JkJaBcVfmhi2ewu1W3Zxr8O\n14U+1IVBZMn/UQRRpX549YLv2bA2iZ9bKRpRWVPERqyjiNlO4YOy334UUmb5vbku\nSC4wrHq3vfWEOb3KsiDBStLeI40AjIkruLZ0DESoayRDJr1+TgCkB8euJhJzQazF\nr695n6uLQU2fD4RwWWX57zDJ6OPGq60rudgKkm0cb4hj7qpqNpZ1mvRQnZIk+8Ov\naQWeLmpFb10PkJ3wd8Apv3eTseyNAg==\n=pYXh\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f5170fdef24e4af91dbef09a6390f3d559ef3f02",
          "sha": "f5170fdef24e4af91dbef09a6390f3d559ef3f02",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/f5170fdef24e4af91dbef09a6390f3d559ef3f02"
        }
      ],
      "message": "scripted-diff: rename deadlineTimers to g_deadline_timers\n\n-BEGIN VERIFY SCRIPT-\nsed -i -e 's/deadlineTimers/g_deadline_timers/g' $(git grep -l deadlineTimers)\n-END VERIFY SCRIPT-",
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2023-10-23T12:12:04Z"
      },
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2022-06-27T12:58:45Z"
      },
      "sha": "5d68c1a7bda2d2a6465ec052bae49bc8a37f5944"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGNmYWUwZGU0NTIxMDc1ZWJiNzViYjE3YTNlOTIwZGE4MzhiYWE1NzY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cfae0de4521075ebb75bb17a3e920da838baa576",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/cfae0de4521075ebb75bb17a3e920da838baa576",
      "tree": {
        "sha": "654e9fe73ce2ccf7064bec73fc81f4d09906db05",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/654e9fe73ce2ccf7064bec73fc81f4d09906db05"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 654e9fe73ce2ccf7064bec73fc81f4d09906db05\nparent 5d68c1a7bda2d2a6465ec052bae49bc8a37f5944\nauthor Vasil Dimov <vd@FreeBSD.org> 1656334971 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1698063125 +0200\n\nrpc: use Synced<T> for g_deadline_timers and remove g_deadline_timers_mutex\n\nConvert `g_deadline_timers` to use `Synced<T>` and ditch the global mutex\n`g_deadline_timers_mutex`.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmU2YxUACgkQVN8G9ktV\ny7+42yAAjDvM7VUswU93WEyBbl7IMNOUlyeND3xCynoiRU+VUeHVImnlTqVpWBWc\nDJSvtPb88xxvAays9v0SP2YD5+bO1d95nEKnm4u+uk5gCqneGM6UJYZuZWCEUQN/\n/Ydz0AzhnEB0abfZbgSGcuayV5CbpkKjXipVZQkXSkwmB36iA81G4q1juMQq4AqB\nR+J/BbcCctAY47rx/32bS+GmeFzBtLy4b9TNw2DeWj50s1Cy0qLT3jLXSgKwq/XG\nPOzWZEPctf03sP07U+rJQmM3+jVou8aG6gabs3xAklMQ39MdM8J7jEySQ94dv3xT\n9v0nZKTiGCKmz1L9ykQaqIywp0agnjuymCuP1VndeIPL1TdUxOBZs6S7iHTyXIQ3\nRzHT1YGUINKnBxa+pP7bPcKlIlR8QGOF0jyxvw3iZxIITAMsQzdAPB3a182hhW/0\nbRFd5Wc98RzIQOROOYifzos4kGYnB7yidTlNyc4HsIgjMfN3GrRbAj2hv14lAi3P\n8mzu4NswIy+Ec8IVsjTTWopo8cnxp1oPtRbR8/V9YWV+5/9wIN4WUay0j/zW4iHN\nHSiTo1/RDXQyJV/eJHivM7BFce4zlgRuLqicZJhuLSWbgrVhIIRRbGv0EN6XWHCj\nMQv+sUmQbkwt5skJS9D/uorQHI8yqzrIqNsQuiWPWooIpEUuKIZQuImRCwVpf5mn\n4pUA0pNHQ0G+qqX8fYcDVmM0tV0i+/fOEpOZO0GkYrFIL/wXGJMyXIAm4ip2RcG5\nIkM3Q83L9RsfTuJI9f3jhvNkoMgg32kW4HS13XZm79Y+d+U7zOn/j+6f9IjtWhL8\nulqY9W5PEeSgLL5pT3oIezKuQP4FMtrO5cc9zn3LEJE28HEjsTAWYQaUwj4E5BpJ\n/2LupC9McXwhTCJ1B8e4HHkJQuOZnYMBo3KVXXByHNs8+5SO/b4W9g9efuexLQuL\nk59HYKEEDTox+KXwwbaXf98ketvwnZeswuWVA3ngyc2k81TbcOmrdUB/Ae75ycuT\nwjEgaJQIpr65gaz/78fU1y2U6EdzsI0EqZmwxrAN0x5VxnkkCJSMTgDp95/w3u0i\nowQlMt85yiqQzBqUDDGh6pNwTkWZ4Lt3om76U5j1Z+YtKXtUe/YsNzf4WQLghG8U\nMJTDkjieiW+/ieCAkiXX7osfmEBs+YC4IPIGfdmN0AFIiGNbl2tjXx8aFRuc8IAk\n6wxgS8szzOdu05D+n0MLsHeCFVmQkhnmVCspE00fWBULyQpXLRYoixAq7etYPG1P\n1XMAmu2yBiMKz36RvhfcLpsMVJ1f5wNDBuRgq6Ly8TukRtjNGGj6eotF3Dyf9Upv\nOE3K33VbyuZQOybxiXdVoik/oX2zaw==\n=oDE9\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5d68c1a7bda2d2a6465ec052bae49bc8a37f5944",
          "sha": "5d68c1a7bda2d2a6465ec052bae49bc8a37f5944",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/5d68c1a7bda2d2a6465ec052bae49bc8a37f5944"
        }
      ],
      "message": "rpc: use Synced<T> for g_deadline_timers and remove g_deadline_timers_mutex\n\nConvert `g_deadline_timers` to use `Synced<T>` and ditch the global mutex\n`g_deadline_timers_mutex`.",
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2023-10-23T12:12:05Z"
      },
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2022-06-27T13:02:51Z"
      },
      "sha": "cfae0de4521075ebb75bb17a3e920da838baa576"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDFlZGY3NThjODVjODhmNmYyMmIxOTgzNWMwMzU1NDdjOTQyNGMwNWM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1edf758c85c88f6f22b19835c035547c9424c05c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/1edf758c85c88f6f22b19835c035547c9424c05c",
      "tree": {
        "sha": "e8b7271a524bef860804ca664ecbe9d1588af52e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e8b7271a524bef860804ca664ecbe9d1588af52e"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree e8b7271a524bef860804ca664ecbe9d1588af52e\nparent cfae0de4521075ebb75bb17a3e920da838baa576\nauthor Vasil Dimov <vd@FreeBSD.org> 1656335931 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1698063125 +0200\n\nscripted-diff: rename dir_locks to g_dir_locks\n\n-BEGIN VERIFY SCRIPT-\nsed -i -e 's/\\<dir_locks\\>/g_dir_locks/g' $(git grep -l dir_locks)\n-END VERIFY SCRIPT-\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmU2YxYACgkQVN8G9ktV\ny7//yCAAiYqFAM3oulP6rzq+T7BreAwC1pzhU0BtOMI5PVJTt8fny5+viu0OvbXB\nwXrVmF+Se5ntidw2mxfyN7gHzUVkgfO/oA/8Z/HPJn/4ZhrFIxKzxuCdZX32mGAb\n5Uyl9R7PUw67imIFjErZ7UZK1EQNJHunsTM8qEa8mvKMjk/dH6sb+SUd3XkOPUki\ne0AQkTmQ/Zomm4NBdMM4mbU7SPj/aNvqKjImOUB5iNOaEtz7VtGySt5CVs7vqssB\nx/fcvQ9zMbT9K9ltTtwABLcLTt8iV108YSv8lWr0IBlsHXGtQl/uS/ScT8OkHGGs\nU1JC/+Av48EA5oGhOQUp0ZY8zFgojp4eTRvi0CBQ8mOoQdr2tnngz1nJV/myPIgr\nARx04PZtAQiaGJxeimu3ox/Li9T0KE7Fp9MZin9LprG/K8VusTmQuXwdgCgIwk0n\ndrl1Bc564YvEkmGND2WR+4W5gr2qHhtTCfCmANMm77xRhXjyqxHXGY+itLVO7Qjb\nfA9GJk2bJpZdHRedUVLQaPwseShPqp+1YakV4tyrIB6laQiX48iv8e8SLFg1F+vP\nMXqmCbedSTj32SIZf4DO1zX3BSdHqpKCPJlWkbvBxsi6rhtSExsGYwFaISCi6ooE\ncaEELp3G7kd9Np2PaDjDTyXKhCgJ3fQZ/sFhU/pUGlRE2KzN6wv0UsE0PgZNB/VJ\nc3GY1Tx3cytnonvLOB99UHf3VovoYyW8DAQYhUshglX+Kte0AxACwY1e1sm2hlq0\nsVhCZlQhuGzobZb8JQMxxF45YP3ZHp9UV4VFVlGc0pRdwVthCCcw0V2pJ0RcgXUq\nWQSHhJs8rj9isEdUQiRCOnwebpMU3q9LsudB6wU/YV1svtgx6qfuB1ZXt7gzXEiQ\nl0vHPOdY88Q0BSJgKAwYDrx5eLwRK1EJivNoHRHlva0BsGmsaOyOMVrKEzXIdGoK\nRnFb9+u72Aybm4cxj0tX39X8PPNNp6qZlsErUtCarKOOuQue2/GkXO+Y6eJ/xHge\noUsRd34QvYWYQVNbXnA7s5M+xP1MUvkZxuyuM1cvQxhjWUUidY4OtD5r6tHXWIBx\nFYpCECMc8SrwIM1TnDZ6lHZfytzHkzRkTwHbb+WIunla8lUo5L11xhN/VwI/pIeu\nJqIZxf/Hz0VTjRykUwXj/aVn5IbXnmRnq8oAEva6AvzaucUrno8LYfnv6YNucJKY\nau2HuR6n7+CzeV7+1UZHFlZMpn9qVwJVX9veoVJ5hj9lS9ZA3x4a4tnxyenFRD9o\nKCsrJ40xqFSAqe+o1xvmjgGM11VnMgtK/Xf8WMUnALjGFqH2MFuXRil6hXspDrAM\nU4WpnHwO67ebW49t3hRVzHOT1Wg5RA==\n=O3bT\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cfae0de4521075ebb75bb17a3e920da838baa576",
          "sha": "cfae0de4521075ebb75bb17a3e920da838baa576",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/cfae0de4521075ebb75bb17a3e920da838baa576"
        }
      ],
      "message": "scripted-diff: rename dir_locks to g_dir_locks\n\n-BEGIN VERIFY SCRIPT-\nsed -i -e 's/\\<dir_locks\\>/g_dir_locks/g' $(git grep -l dir_locks)\n-END VERIFY SCRIPT-",
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2023-10-23T12:12:05Z"
      },
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2022-06-27T13:18:51Z"
      },
      "sha": "1edf758c85c88f6f22b19835c035547c9424c05c"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGMyZTU0OWY0ZjU2MjBkMTAxY2EyYTEyYzNhMGE2YWUxZjJkOTAwMjc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c2e549f4f5620d101ca2a12c3a0a6ae1f2d90027",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/c2e549f4f5620d101ca2a12c3a0a6ae1f2d90027",
      "tree": {
        "sha": "51f68b909eea3d1b9d27c64d4e770dbc980eb901",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/51f68b909eea3d1b9d27c64d4e770dbc980eb901"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 51f68b909eea3d1b9d27c64d4e770dbc980eb901\nparent 1edf758c85c88f6f22b19835c035547c9424c05c\nauthor Vasil Dimov <vd@FreeBSD.org> 1656336083 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1698063126 +0200\n\nrpc: use Synced<T> for g_dir_locks and remove cs_dir_locks\n\nConvert `g_dir_locks` to use `Synced<T>` and ditch the global mutex\n`cs_dir_locks`.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmU2YxYACgkQVN8G9ktV\ny7/EoSAAkESvIDHyElYoKqms2EtZqb9qY2JoDekVdQ76lKffBvL3bWk2m3C1vmjd\nOidojo2O1POF3EtzuhKHnHBhlYjkSj9eT09IWMSwuDXEG1brxuXZ8o80q3a3aZ5X\nEBpPm1KwoYPlPAZs8GsmPy8QttT+mLrKACYjZKvsbqP9DZO/qXzOlyQU/VL4RIqd\n3cqUaJp+qGy3GGQvQ3SWrD+CMMBdQAeFkDWXzjXtx00hlpbRfbnC4chx9e+K3Qpj\n1HQnAHbeJUx3ECEpJbo11ZpKbVhl4vJUU9X/tmlHy9xFrUs0z/q1yhXMYRkYGDxp\nJJwwMCTGMOoySkRFUgHfyVJHfHY3H1aJk3xXkt2hQ+LnvQGV0XqYysmjBEwZadiy\n51J3VhJ5vSF+s0AKnfp0IIqdhmRj4pBWKgF/JFtu5HMqSmqIfemWdi9Ip0yKUggv\nW+C+uisBvCfZML+U5yQZ6VBlNKyH7YHBbE1slnZAE+eAiaLRFqMLKHG9zm7XKxZp\nNI0tnEreTRij4Z0fuRWNov7AH8fHS1dvF3RRHbSYk4LAdYNeOmAvLkqQ7VdEOJxp\n4LkDk/yTBm65MSkdqmELRKuQzf4+D/i4+h6zVj4WSSS0rEjpLBvMnyMbMylnmWQO\no/UKBXHhY5G5Dm3CWQIit3GppSJI8DLsFEdfUwDfcuPt1sGurEbwPry2S3C+OvFG\n/t92jVTt4oJ0esy4MIKZCyRn2Z0CCUzoMUf2ZUy6vhiaeMA5X78B9xQeb1ZZ2yIK\nMkXR4GlDmQcOT3K0Ys8iV2dpijtYzEhJyyWBsIki7nQnSPruzJXLPCz7vnjqbQeT\nsFqNHvctpvJHxe6z/CFjjK/8yjaD1HYwU4DbhR6Qlkbb3vlterXXxhXmyGbJ+loC\nl9VbNHJuvZvdfnLhZ8tBkPGtCJYzFn92aGot1Qt1SipRRifuVb9vJPnE9ntuHZQh\n8ZJgW2naekF4kBH6lM5VJcwVrbyTEFturEWUrQxUvDjOcSY/N3otrgtOk2qe+un/\nXGHNfCfFgis91tplPG5RktJrUxWPC8M9zK8TRegaIIIauirgcB34p86Q5wCQIfIY\n+LX4kfXe3o8GjaS9OjIMJS2rNpk+VOwPXcWQAIj1v3U1uPl6x+5cb/8GdrPInoa5\nWEfmeNTuKnnHCxkHDHm7AF7re7mv/TyAmpVAm7Zcb+grXkmrpBEJy90LbegUAoqz\nlJ5v9HsNJYiY89svJAzrnvdMzmAq1hWcXH0jE6Tt/QRnVK7b/qCqJc4Rb48OB4U0\nWCiySSQnR1ObOIFK6hpY8BijArWAz9zEgrKGe/Ng99cbm8/wUeiaOjhQa/fFL9wE\n7fbA3lo5tSpIyHEZdp/IBU6DlGjQgw==\n=NpC9\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1edf758c85c88f6f22b19835c035547c9424c05c",
          "sha": "1edf758c85c88f6f22b19835c035547c9424c05c",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/1edf758c85c88f6f22b19835c035547c9424c05c"
        }
      ],
      "message": "rpc: use Synced<T> for g_dir_locks and remove cs_dir_locks\n\nConvert `g_dir_locks` to use `Synced<T>` and ditch the global mutex\n`cs_dir_locks`.",
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2023-10-23T12:12:06Z"
      },
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2022-06-27T13:21:23Z"
      },
      "sha": "c2e549f4f5620d101ca2a12c3a0a6ae1f2d90027"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDRiOWY5MDBkZmUxYTY0YjlhMjlmNzdlODhjYWQyMWNiYjk2ZTNjYzM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4b9f900dfe1a64b9a29f77e88cad21cbb96e3cc3",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/4b9f900dfe1a64b9a29f77e88cad21cbb96e3cc3",
      "tree": {
        "sha": "803f1ff5845928ceb337045ad522a7017e102fea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/803f1ff5845928ceb337045ad522a7017e102fea"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 803f1ff5845928ceb337045ad522a7017e102fea\nparent c2e549f4f5620d101ca2a12c3a0a6ae1f2d90027\nauthor Vasil Dimov <vd@FreeBSD.org> 1656336877 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1698063126 +0200\n\nwallet: use Synced<T> for g_loading_wallet_set and remove g_loading_wallet_mutex\n\nConvert `g_loading_wallet_set` to use `Synced<T>` and ditch the global mutex\n`g_loading_wallet_mutex`.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmU2YxcACgkQVN8G9ktV\ny78Mzx//SB8lyi+UL1Oref6idhTMDQ9KzctFSsji+9WooUEgdOcsPUZdiws3iEvv\ns5tTvCDWnnurURI1AOQreV7SGW14pwKbTG1FMqB7Nzm029NB0vcY20GhL8HiGzyh\n3ahh1FbOUYVwuHG3dRoZajeVDvn/jt9nlTwOMek18ewQfSEQQFNGL7IpvzbnVDBf\n42GVELTleoZ77PO050EuQ8FuUgqf0GchpGN7g+628NcToCvc5cfCzvWelh1Zw/K+\nf84r+BKtuPz9zzhAtGI0bc5OAsjSSTI5uJfMYW3bCbz1s2Ooe1xbIa0F+SDKoxmG\njtdQEv5KOIS95m7fC83VqcLB1CzdJOtkNs3q1XAj965lG7mVEmiVrTsER/bzOiUC\nVhou2fQVXpfl6fmzMYRELUz4mAP/nIr7eT941AwpwBM4DtkzTd5i5HCQh8xszyPM\n/opyyx9Rt2QKKRpTlTXJJ6/NpuK7qy64QBietaF852zehvu7MN+xcPmK6wjaP0FU\nAsL200ADhN8fg7b7/c3AOa5VlQRT/ZDx8P8vMgNBFY+TYvsCxOwF0T2TltoHEM0v\nGIUaRgNMv5d4ClTRIdusdwevyC1YmURaMo+p8ReSvRSsI8XPJA21kb2rmjPZ3gWn\n7/6gnfUp5id6zUsd4V6pmdLR6pepC5zLva8auB9Nl5PZLbwCmo4F/BEEmISEAeIY\nC6n7Yv6dWsFIRy2ZyBzNW2g43HMgBFUBj6Obfo46378zq9KaNIRPYYit79B4EN2N\nF41NxtjlQ6OY1Bzl5/07T5urJ44yiI8drY78mxA/0PX2+DWJ4ZgzCkLKqCfm9mBm\naMfNCoeaSXy2hA6PuyVYPJ5jsEDVirj0vSZIAG2VPRMqXDxedbR2tJKi39EBIEYe\nNy9W14gPGxMqYdqojQ3stjt+Cap/O6R9PSA6bhGbAT4uaF5uoYDQwLf9iquoX0ek\nA/LE6/2aEfaz55NGnG0QytMYB8EscU0gaQ01Zl9irSk3e1SoLNt3akbdil9LJfVl\nN11sboRRgRQvadQITFa3V7BC1v2bThLDVB93MKAT+mUmsS3X1M/r/Ce8TGTXNbxH\nvncwatigoRsJ71kpze5hY5YiIqOaJC4LwS29uj+m74kAWABd1gqiG0VJzUdwcq/Q\nzHsiVsfulk7YrOw6aJ6/Fr22bdGXxKC9zIsR/SFDXmY3DF3tn5+BP+um+CaFeXdQ\nMMdg2a7kfZhrhJKnwWiRLxVe2rFyoudFx8PoJKoXWFNs4HAKPSNph6f0AyPNciYN\nVm6xcMwXKHmNcZB+CPCSr6/2ZeenQF5PqVtSS/uim10ASUK0ZZm13TZKmW5hHR/s\nfJDr6x7oNSDQWv8wTSCQFY7UkkoJng==\n=f5ht\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c2e549f4f5620d101ca2a12c3a0a6ae1f2d90027",
          "sha": "c2e549f4f5620d101ca2a12c3a0a6ae1f2d90027",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/c2e549f4f5620d101ca2a12c3a0a6ae1f2d90027"
        }
      ],
      "message": "wallet: use Synced<T> for g_loading_wallet_set and remove g_loading_wallet_mutex\n\nConvert `g_loading_wallet_set` to use `Synced<T>` and ditch the global mutex\n`g_loading_wallet_mutex`.",
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2023-10-23T12:12:06Z"
      },
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2022-06-27T13:34:37Z"
      },
      "sha": "4b9f900dfe1a64b9a29f77e88cad21cbb96e3cc3"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDkyYTQ0NGQwZDczMTEyZDM2YWJmYTg4NzVlNzNlMjZhMDYyMjI4OTE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/92a444d0d73112d36abfa8875e73e26a06222891",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/92a444d0d73112d36abfa8875e73e26a06222891",
      "tree": {
        "sha": "3b3bdc2b6293afa1bca4317189687bf852be056a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3b3bdc2b6293afa1bca4317189687bf852be056a"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 3b3bdc2b6293afa1bca4317189687bf852be056a\nparent 4b9f900dfe1a64b9a29f77e88cad21cbb96e3cc3\nauthor Vasil Dimov <vd@FreeBSD.org> 1656337162 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1698063127 +0200\n\nwallet: use Synced<T> for g_unloading_wallet_set and remove g_wallet_release_mutex\n\nConvert `g_unloading_wallet_set` to use `Synced<T>` and ditch the global mutex\n`g_wallet_release_mutex`.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmU2YxgACgkQVN8G9ktV\ny7+3jCAAqusQHuKT+732rLEPO1sSHyyctZ+9iZDvwBjfDD2TCAmJVno4dUMZ+Mro\nFnaqd/HPp4yNBg3YvP+1jXgfiT0NZ5oAE5VN9pxsunAFKvxkm/LIh/ycefV0H0ce\nhZAqdWoUGvzLuasFEkG1ywvDuIMetwJC7/0tU4NXBQUMPUjumlEtN8hoxiH4KsTT\n1u7nWTcpw+xQyMVaK265dbLs/2NhzwWkwv0ZS0p0f5fWkPdY+c7Y0Zwc65w6rhtK\n8aeIKM4qP/Y/8NUdmsYBq8pYrrZTO5YmfwquJ5POYsCilmz6PNMrWLse1q2LmDc8\n6bVofzRDzLAkOUQbuVKZ9Q+dCnq5wtTVRDD3+pnb/kF+4/WaSo9YZgo30SAClQ9H\n0rp6E4wy4+zMxfJ5kKEd5N8SneIR2Ixr16PNLc6BEI2WEp2kowvlHdGnbwnzaVlm\n7OxO8HJwFKpDerFGoHX3N8VyHDM/eW9ZZ9mnFQB8DBRNsXuhwsYjfSddAyzb8+Ey\nVg12wqfFIrstdcgXCgVjbWG6adao92zRBV8hm+AU5lVkW0PS4cAwDH2QmMYQhORg\nKYDz5AqPCE3SdL7H39WEdwVxTlj8XA/F8v0quGRnjwzEPrfBKFP5UGPqStaUZAhO\n4Mo3N/JzRNqRap+SUcldCQjKy2cyrvlYo11hL006mtANWCtecslrozJ2IhQ65p75\nhDySQIbirbHDeOVVZseDHdt772KWlzA65nBYb/CSWUzNy456MDvC85Sb9q27ROsO\nqy+RVi7OxNE4ggrBWt1FXQIwYBdhNFARl8L6Ojiij0hySFpVhvs6pEzFWX2gAbek\njXwZ3vtg18rjX2UpGGggR/kUFF0gUBRjhLC1xtwwmLxENS69ffwyqlhOESyYehfu\nDKIlQsrJolomKh3v0qgfzN1/p+7P1kzId5uxL97XvGNpbirZVTJfkUmg3Ap04Goa\nmInehxVb0PULDqo6hUF7HAMHojiOCjE2pPLjkwyYJfiQce5SdVSb62vUBd2KNti/\n3ZTX7SLORiKiTB4dkpG7xdyEQoOiXIk/LD5EQtT6fhVr78YX4XF5tdMYDjm9rnD2\nfgc9RWTSjH2fp1Gz0e+rp5gGdkW6I5DkXwV6veeerIBEp4Shb72XAlzDfjmK88iw\npZbLlJ/TPys2C+erDsDkQc8TBTC0EtbSwfm10Kq7UWo2JuDVhKUuyFZYW2z1fRl4\nJ19pVSYvF20QoNrToJz1NH3deOw5mXLqAvKP00taOoH3YmhXWQiMgCKOuYDMZX85\nNbLHOiyDJl6m/JzEMaRl/Xav1+EVIFnxLAgmQ1Ts0js6pvWTdyUCisABrKKbjskf\nqVTjwvC9EGzin1i9DRbxphaVSvgEQw==\n=W63e\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4b9f900dfe1a64b9a29f77e88cad21cbb96e3cc3",
          "sha": "4b9f900dfe1a64b9a29f77e88cad21cbb96e3cc3",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/4b9f900dfe1a64b9a29f77e88cad21cbb96e3cc3"
        }
      ],
      "message": "wallet: use Synced<T> for g_unloading_wallet_set and remove g_wallet_release_mutex\n\nConvert `g_unloading_wallet_set` to use `Synced<T>` and ditch the global mutex\n`g_wallet_release_mutex`.",
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2023-10-23T12:12:07Z"
      },
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2022-06-27T13:39:22Z"
      },
      "sha": "92a444d0d73112d36abfa8875e73e26a06222891"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 10739905966,
      "node_id": "HRFPE_lADOABII585L6FX5zwAAAAKAJfWu",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10739905966",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-10-23T12:13:53Z"
    },
    {
      "event": "commented",
      "id": 1775072072,
      "node_id": "IC_kwDOABII585pzXNI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1775072072",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-10-23T12:21:34Z",
      "updated_at": "2023-10-23T12:21:34Z",
      "author_association": "CONTRIBUTOR",
      "body": "`b749c4d2ca...92a444d0d7`: rebase due to conflicts, drop commit 93e60b9a0c3ee44fbf1f64c91e908c3e507d1d7f `net: detach vfLimited from g_maplocalhost_mutex` because `vfLimited` + `SetReachable()` have already been encapsulated (see 6e308651c441cbf8763c67cc099c538c333c2872 from #27071).",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#issuecomment-1775072072",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25390"
    },
    {
      "event": "unlabeled",
      "id": 10740433300,
      "node_id": "UNLE_lADOABII585L6FX5zwAAAAKALgGU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10740433300",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-10-23T12:58:16Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 10741585424,
      "node_id": "LE_lADOABII585L6FX5zwAAAAKAP5YQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10741585424",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-10-23T14:17:18Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/899366531",
      "pull_request_review_id": 1009459470,
      "id": 899366531,
      "node_id": "PRRC_kwDOABII5841mz6D",
      "diff_hunk": "@@ -400,4 +400,98 @@ class CSemaphoreGrant\n     }\n };\n \n+/**\n+ * A smart pointer that protects the owned object with a mutex.\n+ * Every time the pointer is dereferenced a mutex is acquired and held locked\n+ * for the duration of the method being executed. For example, the following is\n+ * safe:\n+ * @code{.cpp}\n+ * ThreadSafePtr<std::vector<int>> v;\n+ *\n+ * std::thread t1{[&v]() { v->push_back(5); }};\n+ * std::thread t2{[&v]() { v->push_back(6); }};\n+ * @endcode\n+ *\n+ * It is possible so acquire the mutex for longer time than just for a single call:\n+ * @code{.cpp}\n+ * ThreadSafePtr<std::vector<int>> v{5, 6, 7, 8};\n+ *\n+ * {\n+ *     auto v_locked = *v;  // acquires the mutex\n+ *     for (auto& i : v_locked) {\n+ *         i *= 10;\n+ *     }\n+ *     // the mutex is released when `v_locked` is destroyed\n+ * }\n+ * // will result in `v` being `{50, 60, 70, 80}`\n+ * @endcode\n+ */\n+template <typename T>\n+class ThreadSafePtr\n+{\n+public:\n+    /**\n+     * Construct the smart pointer and its internal object of type T,\n+     * passing `args...` to its constructor.\n+     */\n+    template <typename... Args>\n+    ThreadSafePtr(Args... args) : m_obj{args...}\n+    {\n+    }\n+\n+    /**\n+     * An auxiliary class that holds a mutex locked for the duration of its\n+     * lifetime and provides access to another object. For exaple:\n+     * @code{.cpp}\n+     * Proxy p{mutex, obj}; // acquires the mutex\n+     *\n+     * p->foo(); // `foo()` is a method of `obj`, the mutex is still locked\n+     * p->bar(); // `bar()` is a method of `obj`, the mutex is still locked\n+     *\n+     * // if `obj` provides `operator[]` (e.g. `std::map`), then the following is also ok:\n+     * p[5] = 10; // the mutex is still locked\n+     *\n+     * // if `obj` provides `begin()`/`end()` methods, then the following is also ok:\n+     * for (auto& x : p) { ... } // the mutex is still locked\n+     *\n+     * // the mutex is released when `p` is destroyed\n+     * @endcode\n+     */\n+    class Proxy\n+    {\n+    public:\n+        Proxy(Mutex& mutex, T& obj)\n+            : m_lock{mutex, \"ThreadSafePtrMutex\", __FILE__, __LINE__},\n+              m_raw_ptr_to_obj{&obj}\n+        {\n+        }\n+\n+        T* operator->() { return m_raw_ptr_to_obj; }\n+        const T* operator->() const { return m_raw_ptr_to_obj; }\n+\n+        template <typename Key>\n+        auto& operator[](Key key)\n+        {\n+            return (*m_raw_ptr_to_obj)[key];\n+        }\n+\n+        auto begin() { return m_raw_ptr_to_obj->begin(); }\n+        auto end() { return m_raw_ptr_to_obj->end(); }\n+\n+    private:\n+        const UniqueLock<Mutex> m_lock;\n+        T* const m_raw_ptr_to_obj;\n+    };\n+\n+    Proxy operator->() { return Proxy{m_mutex, m_obj}; }\n+    const Proxy operator->() const { return Proxy{m_mutex, m_obj}; }\n+\n+    Proxy operator*() { return Proxy{m_mutex, m_obj}; }\n+    const Proxy operator*() const { return Proxy{m_mutex, m_obj}; }",
      "path": "src/sync.h",
      "position": null,
      "original_position": 91,
      "commit_id": "92a444d0d73112d36abfa8875e73e26a06222891",
      "original_commit_id": "3d77fdb3127649d560c8f39d8ab83d32c9d0dff6",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"sync: introduce a thread safe smart pointer\" (3d77fdb3127649d560c8f39d8ab83d32c9d0dff6)\r\n\r\nI think it would be an improvement to just give these methods a normal name like `Lock` instead of making them operators. Calling code would change from:\r\n\r\n```c++\r\nauto v_locked = *v;\r\nfor (auto& i : v_locked) ...\r\n```\r\n\r\nto \r\n\r\n```c++\r\nauto v_locked = v.Lock();\r\nfor (auto& i : v_locked) ...\r\n```\r\n\r\nwhich would be clearer and simpler. Proxy class is the actual class acting like a pointer so it needs `*` and `->` methods. But outer `ThreadSafePtr` class is not really a pointer at all, but a container, so there is not a concrete reason it needs to have `*` and `->` members unless that's an aesthetic preference.",
      "created_at": "2022-06-16T17:42:39Z",
      "updated_at": "2022-06-16T18:02:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#discussion_r899366531",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/899366531"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
        }
      },
      "start_line": null,
      "original_start_line": 486,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 490,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/899380437",
      "pull_request_review_id": 1009459470,
      "id": 899380437,
      "node_id": "PRRC_kwDOABII5841m3TV",
      "diff_hunk": "@@ -400,4 +400,98 @@ class CSemaphoreGrant\n     }\n };\n \n+/**\n+ * A smart pointer that protects the owned object with a mutex.\n+ * Every time the pointer is dereferenced a mutex is acquired and held locked\n+ * for the duration of the method being executed. For example, the following is\n+ * safe:\n+ * @code{.cpp}\n+ * ThreadSafePtr<std::vector<int>> v;\n+ *\n+ * std::thread t1{[&v]() { v->push_back(5); }};\n+ * std::thread t2{[&v]() { v->push_back(6); }};\n+ * @endcode\n+ *\n+ * It is possible so acquire the mutex for longer time than just for a single call:\n+ * @code{.cpp}\n+ * ThreadSafePtr<std::vector<int>> v{5, 6, 7, 8};\n+ *\n+ * {\n+ *     auto v_locked = *v;  // acquires the mutex\n+ *     for (auto& i : v_locked) {\n+ *         i *= 10;\n+ *     }\n+ *     // the mutex is released when `v_locked` is destroyed\n+ * }\n+ * // will result in `v` being `{50, 60, 70, 80}`\n+ * @endcode\n+ */\n+template <typename T>\n+class ThreadSafePtr\n+{\n+public:\n+    /**\n+     * Construct the smart pointer and its internal object of type T,\n+     * passing `args...` to its constructor.\n+     */\n+    template <typename... Args>\n+    ThreadSafePtr(Args... args) : m_obj{args...}\n+    {\n+    }\n+\n+    /**\n+     * An auxiliary class that holds a mutex locked for the duration of its\n+     * lifetime and provides access to another object. For exaple:\n+     * @code{.cpp}\n+     * Proxy p{mutex, obj}; // acquires the mutex\n+     *\n+     * p->foo(); // `foo()` is a method of `obj`, the mutex is still locked\n+     * p->bar(); // `bar()` is a method of `obj`, the mutex is still locked\n+     *\n+     * // if `obj` provides `operator[]` (e.g. `std::map`), then the following is also ok:\n+     * p[5] = 10; // the mutex is still locked\n+     *\n+     * // if `obj` provides `begin()`/`end()` methods, then the following is also ok:\n+     * for (auto& x : p) { ... } // the mutex is still locked\n+     *\n+     * // the mutex is released when `p` is destroyed\n+     * @endcode\n+     */\n+    class Proxy\n+    {\n+    public:\n+        Proxy(Mutex& mutex, T& obj)\n+            : m_lock{mutex, \"ThreadSafePtrMutex\", __FILE__, __LINE__},\n+              m_raw_ptr_to_obj{&obj}\n+        {\n+        }\n+\n+        T* operator->() { return m_raw_ptr_to_obj; }\n+        const T* operator->() const { return m_raw_ptr_to_obj; }\n+\n+        template <typename Key>\n+        auto& operator[](Key key)\n+        {\n+            return (*m_raw_ptr_to_obj)[key];\n+        }\n+\n+        auto begin() { return m_raw_ptr_to_obj->begin(); }\n+        auto end() { return m_raw_ptr_to_obj->end(); }\n+\n+    private:\n+        const UniqueLock<Mutex> m_lock;\n+        T* const m_raw_ptr_to_obj;\n+    };\n+\n+    Proxy operator->() { return Proxy{m_mutex, m_obj}; }\n+    const Proxy operator->() const { return Proxy{m_mutex, m_obj}; }",
      "path": "src/sync.h",
      "position": null,
      "original_position": 88,
      "commit_id": "92a444d0d73112d36abfa8875e73e26a06222891",
      "original_commit_id": "3d77fdb3127649d560c8f39d8ab83d32c9d0dff6",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"sync: introduce a thread safe smart pointer\" (3d77fdb3127649d560c8f39d8ab83d32c9d0dff6)\r\n\r\nI'm pretty sure the const version of these -> and * methods are unusable and will always lead to compile errors if you ever tried to call them. If you want to allow accessing contents of const `ThreadSafePtr` objects, probably you need to introduce Proxy/ConstProxy classes similar to c++ iterator/const_interator classes. Otherwise you could drop these const methods.",
      "created_at": "2022-06-16T17:59:12Z",
      "updated_at": "2022-06-16T18:02:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#discussion_r899380437",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/899380437"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 487,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/901851921",
      "pull_request_review_id": 1012544031,
      "id": 901851921,
      "node_id": "PRRC_kwDOABII5841wSsR",
      "diff_hunk": "@@ -400,4 +400,98 @@ class CSemaphoreGrant\n     }\n };\n \n+/**\n+ * A smart pointer that protects the owned object with a mutex.\n+ * Every time the pointer is dereferenced a mutex is acquired and held locked\n+ * for the duration of the method being executed. For example, the following is\n+ * safe:\n+ * @code{.cpp}\n+ * ThreadSafePtr<std::vector<int>> v;\n+ *\n+ * std::thread t1{[&v]() { v->push_back(5); }};\n+ * std::thread t2{[&v]() { v->push_back(6); }};\n+ * @endcode\n+ *\n+ * It is possible so acquire the mutex for longer time than just for a single call:\n+ * @code{.cpp}\n+ * ThreadSafePtr<std::vector<int>> v{5, 6, 7, 8};\n+ *\n+ * {\n+ *     auto v_locked = *v;  // acquires the mutex\n+ *     for (auto& i : v_locked) {\n+ *         i *= 10;\n+ *     }\n+ *     // the mutex is released when `v_locked` is destroyed\n+ * }\n+ * // will result in `v` being `{50, 60, 70, 80}`\n+ * @endcode\n+ */\n+template <typename T>\n+class ThreadSafePtr\n+{\n+public:\n+    /**\n+     * Construct the smart pointer and its internal object of type T,\n+     * passing `args...` to its constructor.\n+     */\n+    template <typename... Args>\n+    ThreadSafePtr(Args... args) : m_obj{args...}\n+    {\n+    }\n+\n+    /**\n+     * An auxiliary class that holds a mutex locked for the duration of its\n+     * lifetime and provides access to another object. For exaple:\n+     * @code{.cpp}\n+     * Proxy p{mutex, obj}; // acquires the mutex\n+     *\n+     * p->foo(); // `foo()` is a method of `obj`, the mutex is still locked\n+     * p->bar(); // `bar()` is a method of `obj`, the mutex is still locked\n+     *\n+     * // if `obj` provides `operator[]` (e.g. `std::map`), then the following is also ok:\n+     * p[5] = 10; // the mutex is still locked\n+     *\n+     * // if `obj` provides `begin()`/`end()` methods, then the following is also ok:\n+     * for (auto& x : p) { ... } // the mutex is still locked\n+     *\n+     * // the mutex is released when `p` is destroyed\n+     * @endcode\n+     */\n+    class Proxy\n+    {\n+    public:\n+        Proxy(Mutex& mutex, T& obj)\n+            : m_lock{mutex, \"ThreadSafePtrMutex\", __FILE__, __LINE__},\n+              m_raw_ptr_to_obj{&obj}\n+        {\n+        }\n+\n+        T* operator->() { return m_raw_ptr_to_obj; }\n+        const T* operator->() const { return m_raw_ptr_to_obj; }\n+\n+        template <typename Key>\n+        auto& operator[](Key key)\n+        {\n+            return (*m_raw_ptr_to_obj)[key];\n+        }\n+\n+        auto begin() { return m_raw_ptr_to_obj->begin(); }\n+        auto end() { return m_raw_ptr_to_obj->end(); }\n+\n+    private:\n+        const UniqueLock<Mutex> m_lock;\n+        T* const m_raw_ptr_to_obj;\n+    };\n+\n+    Proxy operator->() { return Proxy{m_mutex, m_obj}; }\n+    const Proxy operator->() const { return Proxy{m_mutex, m_obj}; }",
      "path": "src/sync.h",
      "position": null,
      "original_position": 88,
      "commit_id": "92a444d0d73112d36abfa8875e73e26a06222891",
      "original_commit_id": "3d77fdb3127649d560c8f39d8ab83d32c9d0dff6",
      "in_reply_to_id": 899380437,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I removed them because they are not needed (currently). In a previous incarnation of this I had it working with `const ThreadSafePtr`, but removed the complications that were required for that.\r\n\r\nCan always extend it (restore these) if `const` objects are necessary.",
      "created_at": "2022-06-20T16:43:10Z",
      "updated_at": "2022-06-20T16:43:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#discussion_r901851921",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/901851921"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 487,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/901853708",
      "pull_request_review_id": 1012546455,
      "id": 901853708,
      "node_id": "PRRC_kwDOABII5841wTIM",
      "diff_hunk": "@@ -400,4 +400,98 @@ class CSemaphoreGrant\n     }\n };\n \n+/**\n+ * A smart pointer that protects the owned object with a mutex.\n+ * Every time the pointer is dereferenced a mutex is acquired and held locked\n+ * for the duration of the method being executed. For example, the following is\n+ * safe:\n+ * @code{.cpp}\n+ * ThreadSafePtr<std::vector<int>> v;\n+ *\n+ * std::thread t1{[&v]() { v->push_back(5); }};\n+ * std::thread t2{[&v]() { v->push_back(6); }};\n+ * @endcode\n+ *\n+ * It is possible so acquire the mutex for longer time than just for a single call:\n+ * @code{.cpp}\n+ * ThreadSafePtr<std::vector<int>> v{5, 6, 7, 8};\n+ *\n+ * {\n+ *     auto v_locked = *v;  // acquires the mutex\n+ *     for (auto& i : v_locked) {\n+ *         i *= 10;\n+ *     }\n+ *     // the mutex is released when `v_locked` is destroyed\n+ * }\n+ * // will result in `v` being `{50, 60, 70, 80}`\n+ * @endcode\n+ */\n+template <typename T>\n+class ThreadSafePtr\n+{\n+public:\n+    /**\n+     * Construct the smart pointer and its internal object of type T,\n+     * passing `args...` to its constructor.\n+     */\n+    template <typename... Args>\n+    ThreadSafePtr(Args... args) : m_obj{args...}\n+    {\n+    }\n+\n+    /**\n+     * An auxiliary class that holds a mutex locked for the duration of its\n+     * lifetime and provides access to another object. For exaple:\n+     * @code{.cpp}\n+     * Proxy p{mutex, obj}; // acquires the mutex\n+     *\n+     * p->foo(); // `foo()` is a method of `obj`, the mutex is still locked\n+     * p->bar(); // `bar()` is a method of `obj`, the mutex is still locked\n+     *\n+     * // if `obj` provides `operator[]` (e.g. `std::map`), then the following is also ok:\n+     * p[5] = 10; // the mutex is still locked\n+     *\n+     * // if `obj` provides `begin()`/`end()` methods, then the following is also ok:\n+     * for (auto& x : p) { ... } // the mutex is still locked\n+     *\n+     * // the mutex is released when `p` is destroyed\n+     * @endcode\n+     */\n+    class Proxy\n+    {\n+    public:\n+        Proxy(Mutex& mutex, T& obj)\n+            : m_lock{mutex, \"ThreadSafePtrMutex\", __FILE__, __LINE__},\n+              m_raw_ptr_to_obj{&obj}\n+        {\n+        }\n+\n+        T* operator->() { return m_raw_ptr_to_obj; }\n+        const T* operator->() const { return m_raw_ptr_to_obj; }\n+\n+        template <typename Key>\n+        auto& operator[](Key key)\n+        {\n+            return (*m_raw_ptr_to_obj)[key];\n+        }\n+\n+        auto begin() { return m_raw_ptr_to_obj->begin(); }\n+        auto end() { return m_raw_ptr_to_obj->end(); }\n+\n+    private:\n+        const UniqueLock<Mutex> m_lock;\n+        T* const m_raw_ptr_to_obj;\n+    };\n+\n+    Proxy operator->() { return Proxy{m_mutex, m_obj}; }\n+    const Proxy operator->() const { return Proxy{m_mutex, m_obj}; }\n+\n+    Proxy operator*() { return Proxy{m_mutex, m_obj}; }\n+    const Proxy operator*() const { return Proxy{m_mutex, m_obj}; }",
      "path": "src/sync.h",
      "position": null,
      "original_position": 91,
      "commit_id": "92a444d0d73112d36abfa8875e73e26a06222891",
      "original_commit_id": "3d77fdb3127649d560c8f39d8ab83d32c9d0dff6",
      "in_reply_to_id": 899366531,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Renamed `operator*()` to `Lock()`. The `operator->()` is needed in order to cause a chained `->` calls.\r\n\r\nNotice that the call:\r\n\r\n```cpp\r\n(*g_my_net_addr)[my_net_addr_entry] = lsi;\r\n```\r\n\r\nnow becomes:\r\n\r\n```cpp\r\ng_my_net_addr.Lock()[my_net_addr_entry] = lsi;\r\n```",
      "created_at": "2022-06-20T16:46:10Z",
      "updated_at": "2022-06-20T16:46:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#discussion_r901853708",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/901853708"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
        }
      },
      "start_line": null,
      "original_start_line": 486,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 490,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/919129254",
      "pull_request_review_id": 1036036999,
      "id": 919129254,
      "node_id": "PRRC_kwDOABII5842yMym",
      "diff_hunk": "@@ -400,4 +405,178 @@ class CSemaphoreGrant\n     }\n };\n \n+/**\n+ * A smart container that protects the owned object with a mutex.\n+ * Every time the container is dereferenced a mutex is acquired and held locked\n+ * for the duration of the method being executed. For example, the following is\n+ * safe:\n+ * @code{.cpp}\n+ * Synced<std::vector<int>> v;\n+ *\n+ * std::thread t1{[&v]() { v->push_back(5); }};\n+ * std::thread t2{[&v]() { v->push_back(6); }};\n+ * @endcode\n+ *\n+ * It is possible so acquire the mutex for longer time than just for a single call:\n+ * @code{.cpp}\n+ * Synced<std::vector<int>> v{5, 6, 7, 8};\n+ *\n+ * for (auto& i : v.Lock()) {\n+ *     i *= 10;\n+ * }\n+ *\n+ * {\n+ *     LOCK(v);\n+ *     size_t size = v->size();\n+ *     // The container will not change between the two size() calls.\n+ *     assert(size == v->size());\n+ * }\n+ * @endcode\n+ */\n+template <typename T>\n+class Synced\n+{\n+public:\n+    /**\n+     * Construct the smart container and its internal object of type T,\n+     * passing `args...` to T's constructor.\n+     */\n+    template <typename... Args>\n+    Synced(Args... args) : m_owner{}, m_obj{args...}\n+    {\n+    }\n+\n+    /**\n+     * An auxiliary class that holds a mutex locked for the duration of its\n+     * lifetime and provides access to another object.\n+     */\n+    class Proxy\n+    {\n+    public:\n+        Proxy(Synced& parent, const char* mutex_name, const char* file_name, int line)\n+            // Avoid double-lock if the current thread is already the owner.\n+            // This read of parent.m_owner is unprotected but that is ok because\n+            // the result of the comparison to the current thread cannot be\n+            // changed by other, concurrently executing, threads.\n+            : m_lock{parent.m_owner == std::this_thread::get_id() ? nullptr : &parent.m_mutex,\n+                     mutex_name,\n+                     file_name,\n+                     line},",
      "path": "src/sync.h",
      "position": null,
      "original_position": 79,
      "commit_id": "92a444d0d73112d36abfa8875e73e26a06222891",
      "original_commit_id": "618809ab6b1f1c67ea3e299626f1ccb89f55d9f1",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"sync: introduce a thread safe smart container\" (618809ab6b1f1c67ea3e299626f1ccb89f55d9f1)\r\n\r\nIt seems like you could avoid this `m_owner` stuff by just replacing `Mutex` with `RecursiveMutex` below. Otherwise this code just seems like it is implementing `RecursiveMutex` on top of `Mutex`, which only makes it more complex and probably less efficient than using `RecursiveMutex` directly.\r\n\r\nMaybe it would be better to disallow double locking and use clang thread annotations to prevent obvious cases of double locking at compile time. But maybe this is not possible. And allowing double locking doesn't seem like an inherently bad thing here apart from the slight performance overhead. Code fragility problems associated with recursive mutex usage don't seem like they would be an problem here since the mutex is private and the class has a limited interface.",
      "created_at": "2022-07-12T15:44:27Z",
      "updated_at": "2022-07-12T16:06:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#discussion_r919129254",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/919129254"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
        }
      },
      "start_line": null,
      "original_start_line": 457,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 464,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/919824769",
      "pull_request_review_id": 1037006128,
      "id": 919824769,
      "node_id": "PRRC_kwDOABII584202mB",
      "diff_hunk": "@@ -400,4 +405,178 @@ class CSemaphoreGrant\n     }\n };\n \n+/**\n+ * A smart container that protects the owned object with a mutex.\n+ * Every time the container is dereferenced a mutex is acquired and held locked\n+ * for the duration of the method being executed. For example, the following is\n+ * safe:\n+ * @code{.cpp}\n+ * Synced<std::vector<int>> v;\n+ *\n+ * std::thread t1{[&v]() { v->push_back(5); }};\n+ * std::thread t2{[&v]() { v->push_back(6); }};\n+ * @endcode\n+ *\n+ * It is possible so acquire the mutex for longer time than just for a single call:\n+ * @code{.cpp}\n+ * Synced<std::vector<int>> v{5, 6, 7, 8};\n+ *\n+ * for (auto& i : v.Lock()) {\n+ *     i *= 10;\n+ * }\n+ *\n+ * {\n+ *     LOCK(v);\n+ *     size_t size = v->size();\n+ *     // The container will not change between the two size() calls.\n+ *     assert(size == v->size());\n+ * }\n+ * @endcode\n+ */\n+template <typename T>\n+class Synced\n+{\n+public:\n+    /**\n+     * Construct the smart container and its internal object of type T,\n+     * passing `args...` to T's constructor.\n+     */\n+    template <typename... Args>\n+    Synced(Args... args) : m_owner{}, m_obj{args...}\n+    {\n+    }\n+\n+    /**\n+     * An auxiliary class that holds a mutex locked for the duration of its\n+     * lifetime and provides access to another object.\n+     */\n+    class Proxy\n+    {\n+    public:\n+        Proxy(Synced& parent, const char* mutex_name, const char* file_name, int line)\n+            // Avoid double-lock if the current thread is already the owner.\n+            // This read of parent.m_owner is unprotected but that is ok because\n+            // the result of the comparison to the current thread cannot be\n+            // changed by other, concurrently executing, threads.\n+            : m_lock{parent.m_owner == std::this_thread::get_id() ? nullptr : &parent.m_mutex,\n+                     mutex_name,\n+                     file_name,\n+                     line},",
      "path": "src/sync.h",
      "position": null,
      "original_position": 79,
      "commit_id": "92a444d0d73112d36abfa8875e73e26a06222891",
      "original_commit_id": "618809ab6b1f1c67ea3e299626f1ccb89f55d9f1",
      "in_reply_to_id": 919129254,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I agree. Simplified this by removing `m_owner` and using `RecursiveMutex`.\r\n\r\nThis reduced the `Synced` implementation from 110 to 58 lines (excluding comments).\r\n\r\nIt is possible to further reduce it by removing `Synced::UniqueLock` but then call sites would have to use `auto lock = foo.Lock();` instead of the sweet `LOCK(foo);`. I think either way is fine.\r\n\r\n> Maybe it would be better to disallow double locking and use clang thread annotations to prevent obvious cases of double locking at compile time. But maybe this is not possible.\r\n\r\nI will look at this again, but last time I tried I couldn't do that - stumbled on some limitations and bizarre behavior that looked like a bug in the thread safety annotations. Notice that even now some cases are prevented at compile time, like:\r\n\r\n```cpp\r\nLOCK(foo);\r\n...\r\nLOCK(foo);\r\n```",
      "created_at": "2022-07-13T08:54:51Z",
      "updated_at": "2022-07-13T08:54:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#discussion_r919824769",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/919824769"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
        }
      },
      "start_line": null,
      "original_start_line": 457,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 464,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/978269158",
      "pull_request_review_id": 1117913698,
      "id": 978269158,
      "node_id": "PRRC_kwDOABII5846TzPm",
      "diff_hunk": "@@ -398,4 +398,104 @@ class CSemaphoreGrant\n     }\n };\n \n+/**\n+ * A smart container that protects an owned object with a mutex.\n+ * This is like a mutex with an extension - owning an object of arbitrary type\n+ * and providing a dereference operation which gives access to the owned object\n+ * and transparently locks the mutex for the duration of the access.\n+ * For example, the following is safe:\n+ * @code{.cpp}\n+ * Synced<std::vector<int>> v;\n+ *\n+ * std::thread t1{[&v]() { v->push_back(5); }};\n+ * std::thread t2{[&v]() { v->push_back(6); }};\n+ * @endcode\n+ *\n+ * It is possible so acquire the mutex for longer time than just for a single call:\n+ * @code{.cpp}\n+ * Synced<std::vector<int>> v{5, 6, 7, 8};\n+ *\n+ * // v is locked for the entire duration of the loop\n+ * for (auto& i : *v) {\n+ *     i *= 10;\n+ * }\n+ *\n+ * {\n+ *     LOCK(v);\n+ *     size_t size = v->size();\n+ *     // The container will not be changed by another thread between the two size() calls.\n+ *     assert(size == v->size());\n+ * }\n+ * @endcode\n+ */\n+template <typename T>\n+class Synced : public RecursiveMutex\n+{\n+public:\n+    /**\n+     * Construct the smart container and its internal object of type T,\n+     * passing `args...` to T's constructor.\n+     */\n+    template <typename... Args>\n+    Synced(Args... args) : m_obj{args...}\n+    {\n+    }\n+\n+    /**\n+     * An auxiliary class that holds the parent locked for the duration of its\n+     * lifetime and provides access to the internal object.\n+     */\n+    class Proxy : ::UniqueLock<RecursiveMutex>\n+    {\n+    public:\n+        Proxy(Synced& parent, const char* mutex_name, const char* file_name, int line)\n+            : ::UniqueLock<RecursiveMutex>{parent, mutex_name, file_name, line},\n+              m_obj_ref{parent.m_obj}\n+        {\n+        }\n+\n+        T* operator->() { return &m_obj_ref; }\n+\n+        template <typename Key>\n+        auto& operator[](Key key)\n+        {\n+            return m_obj_ref[key];\n+        }\n+\n+        auto begin() { return m_obj_ref.begin(); }\n+\n+        auto end() { return m_obj_ref.end(); }\n+\n+    private:\n+        T& m_obj_ref;\n+    };\n+\n+    /**\n+     * Access `m_obj`, holding `this` locked for the duration of the access.\n+     * This causes a chain of `operator->()` calls:\n+     * 1. `Synced::operator->()` is called, which returns `Proxy` (the\n+     * constructor of `Proxy` locks `this`), then\n+     * 2. `Proxy::operator->()` is called, which returns a raw pointer to\n+     * `m_obj` which is dereferenced in order to call the relevant method.\n+     */\n+    Proxy operator->()\n+    {\n+        return Proxy{*this, \"Synced::operator->()\", __FILE__, __LINE__};",
      "path": "src/sync.h",
      "position": null,
      "original_position": 95,
      "commit_id": "92a444d0d73112d36abfa8875e73e26a06222891",
      "original_commit_id": "bca6b06341b089c89fbd5647fdc868258b8c9d5a",
      "in_reply_to_id": null,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "After a lot of poking at this, I believe what's necessary to make clang's thread safety logic actually notice that this function grabs a lock is to annotate the move constructor of `Proxy`, ie `Proxy(Proxy&&) EXCLUSIVE_LOCK_FUNCTION(mutex) = default`. https://reviews.llvm.org/D41933?id=129496\r\n\r\nUnfortunately, I don't think that's sufficient to avoid clang getting confused about aliasing; at least the ways I've tried haven't worked.",
      "created_at": "2022-09-23T05:07:40Z",
      "updated_at": "2022-09-28T17:07:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#discussion_r978269158",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/978269158"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 483,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/982661098",
      "pull_request_review_id": 1117913698,
      "id": 982661098,
      "node_id": "PRRC_kwDOABII5846kjfq",
      "diff_hunk": "@@ -400,4 +398,104 @@ class CSemaphoreGrant\n     }\n };\n \n+/**\n+ * A smart container that protects an owned object with a mutex.\n+ * This is like a mutex with an extension - owning an object of arbitrary type\n+ * and providing a dereference operation which gives access to the owned object\n+ * and transparently locks the mutex for the duration of the access.\n+ * For example, the following is safe:\n+ * @code{.cpp}\n+ * Synced<std::vector<int>> v;\n+ *\n+ * std::thread t1{[&v]() { v->push_back(5); }};\n+ * std::thread t2{[&v]() { v->push_back(6); }};\n+ * @endcode\n+ *\n+ * It is possible so acquire the mutex for longer time than just for a single call:\n+ * @code{.cpp}\n+ * Synced<std::vector<int>> v{5, 6, 7, 8};\n+ *\n+ * // v is locked for the entire duration of the loop\n+ * for (auto& i : *v) {\n+ *     i *= 10;\n+ * }\n+ *\n+ * {\n+ *     LOCK(v);\n+ *     size_t size = v->size();\n+ *     // The container will not be changed by another thread between the two size() calls.\n+ *     assert(size == v->size());\n+ * }\n+ * @endcode\n+ */\n+template <typename T>\n+class Synced : public RecursiveMutex",
      "path": "src/sync.h",
      "position": null,
      "original_position": 56,
      "commit_id": "92a444d0d73112d36abfa8875e73e26a06222891",
      "original_commit_id": "11ac578f9132ed76191d03d5100fc88b6ada6a8a",
      "in_reply_to_id": null,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't think we should be doing more recursive mutex stuff (they're harder to reason about, and less efficient any time that matters). I haven't been able to figure out a way of doing this sensibly otherwise, however -- clang just gets too confused about aliasing.",
      "created_at": "2022-09-28T17:03:13Z",
      "updated_at": "2022-09-28T17:07:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#discussion_r982661098",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/982661098"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 432,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/983367668",
      "pull_request_review_id": 1125046640,
      "id": 983367668,
      "node_id": "PRRC_kwDOABII5846nP_0",
      "diff_hunk": "@@ -398,4 +398,104 @@ class CSemaphoreGrant\n     }\n };\n \n+/**\n+ * A smart container that protects an owned object with a mutex.\n+ * This is like a mutex with an extension - owning an object of arbitrary type\n+ * and providing a dereference operation which gives access to the owned object\n+ * and transparently locks the mutex for the duration of the access.\n+ * For example, the following is safe:\n+ * @code{.cpp}\n+ * Synced<std::vector<int>> v;\n+ *\n+ * std::thread t1{[&v]() { v->push_back(5); }};\n+ * std::thread t2{[&v]() { v->push_back(6); }};\n+ * @endcode\n+ *\n+ * It is possible so acquire the mutex for longer time than just for a single call:\n+ * @code{.cpp}\n+ * Synced<std::vector<int>> v{5, 6, 7, 8};\n+ *\n+ * // v is locked for the entire duration of the loop\n+ * for (auto& i : *v) {\n+ *     i *= 10;\n+ * }\n+ *\n+ * {\n+ *     LOCK(v);\n+ *     size_t size = v->size();\n+ *     // The container will not be changed by another thread between the two size() calls.\n+ *     assert(size == v->size());\n+ * }\n+ * @endcode\n+ */\n+template <typename T>\n+class Synced : public RecursiveMutex\n+{\n+public:\n+    /**\n+     * Construct the smart container and its internal object of type T,\n+     * passing `args...` to T's constructor.\n+     */\n+    template <typename... Args>\n+    Synced(Args... args) : m_obj{args...}\n+    {\n+    }\n+\n+    /**\n+     * An auxiliary class that holds the parent locked for the duration of its\n+     * lifetime and provides access to the internal object.\n+     */\n+    class Proxy : ::UniqueLock<RecursiveMutex>\n+    {\n+    public:\n+        Proxy(Synced& parent, const char* mutex_name, const char* file_name, int line)\n+            : ::UniqueLock<RecursiveMutex>{parent, mutex_name, file_name, line},\n+              m_obj_ref{parent.m_obj}\n+        {\n+        }\n+\n+        T* operator->() { return &m_obj_ref; }\n+\n+        template <typename Key>\n+        auto& operator[](Key key)\n+        {\n+            return m_obj_ref[key];\n+        }\n+\n+        auto begin() { return m_obj_ref.begin(); }\n+\n+        auto end() { return m_obj_ref.end(); }\n+\n+    private:\n+        T& m_obj_ref;\n+    };\n+\n+    /**\n+     * Access `m_obj`, holding `this` locked for the duration of the access.\n+     * This causes a chain of `operator->()` calls:\n+     * 1. `Synced::operator->()` is called, which returns `Proxy` (the\n+     * constructor of `Proxy` locks `this`), then\n+     * 2. `Proxy::operator->()` is called, which returns a raw pointer to\n+     * `m_obj` which is dereferenced in order to call the relevant method.\n+     */\n+    Proxy operator->()\n+    {\n+        return Proxy{*this, \"Synced::operator->()\", __FILE__, __LINE__};",
      "path": "src/sync.h",
      "position": null,
      "original_position": 95,
      "commit_id": "92a444d0d73112d36abfa8875e73e26a06222891",
      "original_commit_id": "bca6b06341b089c89fbd5647fdc868258b8c9d5a",
      "in_reply_to_id": 978269158,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yeah, me too. Clang keeps emitting bogus warnings about loops like `for (auto& a : *obj)` for everything I tried, so I gave up. It has its limitations after all.",
      "created_at": "2022-09-29T10:30:58Z",
      "updated_at": "2022-09-29T10:30:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#discussion_r983367668",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/983367668"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 483,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/983384482",
      "pull_request_review_id": 1125068091,
      "id": 983384482,
      "node_id": "PRRC_kwDOABII5846nUGi",
      "diff_hunk": "@@ -400,4 +398,104 @@ class CSemaphoreGrant\n     }\n };\n \n+/**\n+ * A smart container that protects an owned object with a mutex.\n+ * This is like a mutex with an extension - owning an object of arbitrary type\n+ * and providing a dereference operation which gives access to the owned object\n+ * and transparently locks the mutex for the duration of the access.\n+ * For example, the following is safe:\n+ * @code{.cpp}\n+ * Synced<std::vector<int>> v;\n+ *\n+ * std::thread t1{[&v]() { v->push_back(5); }};\n+ * std::thread t2{[&v]() { v->push_back(6); }};\n+ * @endcode\n+ *\n+ * It is possible so acquire the mutex for longer time than just for a single call:\n+ * @code{.cpp}\n+ * Synced<std::vector<int>> v{5, 6, 7, 8};\n+ *\n+ * // v is locked for the entire duration of the loop\n+ * for (auto& i : *v) {\n+ *     i *= 10;\n+ * }\n+ *\n+ * {\n+ *     LOCK(v);\n+ *     size_t size = v->size();\n+ *     // The container will not be changed by another thread between the two size() calls.\n+ *     assert(size == v->size());\n+ * }\n+ * @endcode\n+ */\n+template <typename T>\n+class Synced : public RecursiveMutex",
      "path": "src/sync.h",
      "position": null,
      "original_position": 56,
      "commit_id": "92a444d0d73112d36abfa8875e73e26a06222891",
      "original_commit_id": "11ac578f9132ed76191d03d5100fc88b6ada6a8a",
      "in_reply_to_id": 982661098,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It used `Mutex` before and mimicked a `RecursiveMutex`, but I totally agree with @ryanofsky's [comment](https://github.com/bitcoin/bitcoin/pull/25390#discussion_r919129254) and changed it to `RecursiveMutex`.\r\n\r\nEven before that there was another approach which did not need a recursive mutex, and double locking was not allowed, but [you did not like that](https://github.com/bitcoin/bitcoin/pull/25390#issuecomment-1158434634).",
      "created_at": "2022-09-29T10:48:14Z",
      "updated_at": "2022-09-29T10:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#discussion_r983384482",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/983384482"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 432,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/983877979",
      "pull_request_review_id": 1125785021,
      "id": 983877979,
      "node_id": "PRRC_kwDOABII5846pMlb",
      "diff_hunk": "@@ -400,4 +398,104 @@ class CSemaphoreGrant\n     }\n };\n \n+/**\n+ * A smart container that protects an owned object with a mutex.\n+ * This is like a mutex with an extension - owning an object of arbitrary type\n+ * and providing a dereference operation which gives access to the owned object\n+ * and transparently locks the mutex for the duration of the access.\n+ * For example, the following is safe:\n+ * @code{.cpp}\n+ * Synced<std::vector<int>> v;\n+ *\n+ * std::thread t1{[&v]() { v->push_back(5); }};\n+ * std::thread t2{[&v]() { v->push_back(6); }};\n+ * @endcode\n+ *\n+ * It is possible so acquire the mutex for longer time than just for a single call:\n+ * @code{.cpp}\n+ * Synced<std::vector<int>> v{5, 6, 7, 8};\n+ *\n+ * // v is locked for the entire duration of the loop\n+ * for (auto& i : *v) {\n+ *     i *= 10;\n+ * }\n+ *\n+ * {\n+ *     LOCK(v);\n+ *     size_t size = v->size();\n+ *     // The container will not be changed by another thread between the two size() calls.\n+ *     assert(size == v->size());\n+ * }\n+ * @endcode\n+ */\n+template <typename T>\n+class Synced : public RecursiveMutex",
      "path": "src/sync.h",
      "position": null,
      "original_position": 56,
      "commit_id": "92a444d0d73112d36abfa8875e73e26a06222891",
      "original_commit_id": "11ac578f9132ed76191d03d5100fc88b6ada6a8a",
      "in_reply_to_id": 982661098,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In my opinion: we shouldn't allow double locking (for almost all locks), and should give compile time errors when double locking is attempted. I'd love to see a variant of this that achieved both those things.",
      "created_at": "2022-09-29T18:06:47Z",
      "updated_at": "2022-09-29T18:06:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#discussion_r983877979",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/983877979"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 432,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/983913168",
      "pull_request_review_id": 1125836760,
      "id": 983913168,
      "node_id": "PRRC_kwDOABII5846pVLQ",
      "diff_hunk": "@@ -398,4 +398,104 @@ class CSemaphoreGrant\n     }\n };\n \n+/**\n+ * A smart container that protects an owned object with a mutex.\n+ * This is like a mutex with an extension - owning an object of arbitrary type\n+ * and providing a dereference operation which gives access to the owned object\n+ * and transparently locks the mutex for the duration of the access.\n+ * For example, the following is safe:\n+ * @code{.cpp}\n+ * Synced<std::vector<int>> v;\n+ *\n+ * std::thread t1{[&v]() { v->push_back(5); }};\n+ * std::thread t2{[&v]() { v->push_back(6); }};\n+ * @endcode\n+ *\n+ * It is possible so acquire the mutex for longer time than just for a single call:\n+ * @code{.cpp}\n+ * Synced<std::vector<int>> v{5, 6, 7, 8};\n+ *\n+ * // v is locked for the entire duration of the loop\n+ * for (auto& i : *v) {\n+ *     i *= 10;\n+ * }\n+ *\n+ * {\n+ *     LOCK(v);\n+ *     size_t size = v->size();\n+ *     // The container will not be changed by another thread between the two size() calls.\n+ *     assert(size == v->size());\n+ * }\n+ * @endcode\n+ */\n+template <typename T>\n+class Synced : public RecursiveMutex\n+{\n+public:\n+    /**\n+     * Construct the smart container and its internal object of type T,\n+     * passing `args...` to T's constructor.\n+     */\n+    template <typename... Args>\n+    Synced(Args... args) : m_obj{args...}\n+    {\n+    }\n+\n+    /**\n+     * An auxiliary class that holds the parent locked for the duration of its\n+     * lifetime and provides access to the internal object.\n+     */\n+    class Proxy : ::UniqueLock<RecursiveMutex>\n+    {\n+    public:\n+        Proxy(Synced& parent, const char* mutex_name, const char* file_name, int line)\n+            : ::UniqueLock<RecursiveMutex>{parent, mutex_name, file_name, line},\n+              m_obj_ref{parent.m_obj}\n+        {\n+        }\n+\n+        T* operator->() { return &m_obj_ref; }\n+\n+        template <typename Key>\n+        auto& operator[](Key key)\n+        {\n+            return m_obj_ref[key];\n+        }\n+\n+        auto begin() { return m_obj_ref.begin(); }\n+\n+        auto end() { return m_obj_ref.end(); }\n+\n+    private:\n+        T& m_obj_ref;\n+    };\n+\n+    /**\n+     * Access `m_obj`, holding `this` locked for the duration of the access.\n+     * This causes a chain of `operator->()` calls:\n+     * 1. `Synced::operator->()` is called, which returns `Proxy` (the\n+     * constructor of `Proxy` locks `this`), then\n+     * 2. `Proxy::operator->()` is called, which returns a raw pointer to\n+     * `m_obj` which is dereferenced in order to call the relevant method.\n+     */\n+    Proxy operator->()\n+    {\n+        return Proxy{*this, \"Synced::operator->()\", __FILE__, __LINE__};",
      "path": "src/sync.h",
      "position": null,
      "original_position": 95,
      "commit_id": "92a444d0d73112d36abfa8875e73e26a06222891",
      "original_commit_id": "bca6b06341b089c89fbd5647fdc868258b8c9d5a",
      "in_reply_to_id": 978269158,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Oh!! How about this:\r\n\r\n```c++\r\ntemplate<typename T>\r\nstruct Guarded\r\n{\r\nprivate:\r\n    mutable Mutex m;\r\n    T obj GUARDED_BY(m);\r\npublic:\r\n    class SCOPED_LOCKABLE Proxy\r\n    {\r\n    private:\r\n        Guarded& g;\r\n    public:\r\n        Proxy(Guarded& g) EXCLUSIVE_LOCK_FUNCTION(g.m) : g{g}\r\n        {\r\n            g.m.lock();\r\n        }\r\n        ~Proxy() UNLOCK_FUNCTION() { g.m.unlock(); }\r\n\r\n        T& operator*() { return g.obj; }\r\n        T* operator->() { return &g.obj; }\r\n    };\r\n};\r\n\r\n#define PROXY(name, guarded) decltype(guarded)::Proxy name{guarded};\r\n\r\nGuarded<uint32_t> global_i;\r\nGuarded<std::vector<uint32_t>> global_nums;\r\nvoid foo()\r\n{\r\n    PROXY(p, global_i);\r\n    *p = 5;\r\n    *p += 6;\r\n    // PROXY(p2, global_i); // error: acquiring mutex 'global_i.m' that is already held [-Werror,-Wthread-safety-analysis]\r\n    // *p2 = 9;\r\n}\r\n\r\nint64_t lock_already_held(Guarded<std::vector<uint32_t>>::Proxy &p)\r\n{\r\n    int64_t j = 0;\r\n    for (auto i : *p) { j += i; }\r\n    return j;\r\n}\r\n\r\nint64_t bar()\r\n{\r\n    PROXY(p, global_nums);\r\n    int64_t j = 0;\r\n    for (auto i : *p) { j += i; }\r\n    return j + lock_already_held(p);\r\n}\r\n```\r\n\r\nThat:\r\n\r\n * gives compile time errors if you try accessing without a lock\r\n * doesn't require recursive locks\r\n * gives clang compile time errors if you try double locking\r\n\r\nwhich hits everything I wanted, and doesn't even seem too klunky. Perhaps needs some additional work to handle `const`.",
      "created_at": "2022-09-29T18:48:14Z",
      "updated_at": "2022-09-29T18:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#discussion_r983913168",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/983913168"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 483,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/984000714",
      "pull_request_review_id": 1125965581,
      "id": 984000714,
      "node_id": "PRRC_kwDOABII5846pqjK",
      "diff_hunk": "@@ -398,4 +398,104 @@ class CSemaphoreGrant\n     }\n };\n \n+/**\n+ * A smart container that protects an owned object with a mutex.\n+ * This is like a mutex with an extension - owning an object of arbitrary type\n+ * and providing a dereference operation which gives access to the owned object\n+ * and transparently locks the mutex for the duration of the access.\n+ * For example, the following is safe:\n+ * @code{.cpp}\n+ * Synced<std::vector<int>> v;\n+ *\n+ * std::thread t1{[&v]() { v->push_back(5); }};\n+ * std::thread t2{[&v]() { v->push_back(6); }};\n+ * @endcode\n+ *\n+ * It is possible so acquire the mutex for longer time than just for a single call:\n+ * @code{.cpp}\n+ * Synced<std::vector<int>> v{5, 6, 7, 8};\n+ *\n+ * // v is locked for the entire duration of the loop\n+ * for (auto& i : *v) {\n+ *     i *= 10;\n+ * }\n+ *\n+ * {\n+ *     LOCK(v);\n+ *     size_t size = v->size();\n+ *     // The container will not be changed by another thread between the two size() calls.\n+ *     assert(size == v->size());\n+ * }\n+ * @endcode\n+ */\n+template <typename T>\n+class Synced : public RecursiveMutex\n+{\n+public:\n+    /**\n+     * Construct the smart container and its internal object of type T,\n+     * passing `args...` to T's constructor.\n+     */\n+    template <typename... Args>\n+    Synced(Args... args) : m_obj{args...}\n+    {\n+    }\n+\n+    /**\n+     * An auxiliary class that holds the parent locked for the duration of its\n+     * lifetime and provides access to the internal object.\n+     */\n+    class Proxy : ::UniqueLock<RecursiveMutex>\n+    {\n+    public:\n+        Proxy(Synced& parent, const char* mutex_name, const char* file_name, int line)\n+            : ::UniqueLock<RecursiveMutex>{parent, mutex_name, file_name, line},\n+              m_obj_ref{parent.m_obj}\n+        {\n+        }\n+\n+        T* operator->() { return &m_obj_ref; }\n+\n+        template <typename Key>\n+        auto& operator[](Key key)\n+        {\n+            return m_obj_ref[key];\n+        }\n+\n+        auto begin() { return m_obj_ref.begin(); }\n+\n+        auto end() { return m_obj_ref.end(); }\n+\n+    private:\n+        T& m_obj_ref;\n+    };\n+\n+    /**\n+     * Access `m_obj`, holding `this` locked for the duration of the access.\n+     * This causes a chain of `operator->()` calls:\n+     * 1. `Synced::operator->()` is called, which returns `Proxy` (the\n+     * constructor of `Proxy` locks `this`), then\n+     * 2. `Proxy::operator->()` is called, which returns a raw pointer to\n+     * `m_obj` which is dereferenced in order to call the relevant method.\n+     */\n+    Proxy operator->()\n+    {\n+        return Proxy{*this, \"Synced::operator->()\", __FILE__, __LINE__};",
      "path": "src/sync.h",
      "position": null,
      "original_position": 95,
      "commit_id": "92a444d0d73112d36abfa8875e73e26a06222891",
      "original_commit_id": "bca6b06341b089c89fbd5647fdc868258b8c9d5a",
      "in_reply_to_id": 978269158,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re; https://github.com/bitcoin/bitcoin/pull/25390#discussion_r983913168\r\n\r\nThis suggestion seems very good. I'm still not sure how broadly useful this locking container would be, but I agree having recursive mutex semantics (however they are implemented) would make using it less safe, so better to avoid that if possible.\r\n\r\nAbout the `Guarded`/`PROXY` suggestion specifically:\r\n\r\n- I wonder if `PROXY` macro is necessary. Could `Guarded` class just have a `auto Lock() { return Proxy{*this}; }` method instead? It seems like that could work just as well in a `for` loop or `auto nums = global_nums->Lock()` statement.\r\n- Maybe rename `s/PROXY/GUARDED_LOCK/` so macro name and class name match. This would also be more consistent with other locking macro names `WAIT_LOCK` and `TRY_LOCK` \r\n- Maybe switch `PROXY(name, guarded)` argument order for consistency with `WAIT_LOCK` and `TRY_LOCK` where the new variable name argument is last, and the existing mutex argument is first.\r\n",
      "created_at": "2022-09-29T20:35:14Z",
      "updated_at": "2022-09-29T20:35:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#discussion_r984000714",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/984000714"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 483,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/984106710",
      "pull_request_review_id": 1126113893,
      "id": 984106710,
      "node_id": "PRRC_kwDOABII5846qEbW",
      "diff_hunk": "@@ -398,4 +398,104 @@ class CSemaphoreGrant\n     }\n };\n \n+/**\n+ * A smart container that protects an owned object with a mutex.\n+ * This is like a mutex with an extension - owning an object of arbitrary type\n+ * and providing a dereference operation which gives access to the owned object\n+ * and transparently locks the mutex for the duration of the access.\n+ * For example, the following is safe:\n+ * @code{.cpp}\n+ * Synced<std::vector<int>> v;\n+ *\n+ * std::thread t1{[&v]() { v->push_back(5); }};\n+ * std::thread t2{[&v]() { v->push_back(6); }};\n+ * @endcode\n+ *\n+ * It is possible so acquire the mutex for longer time than just for a single call:\n+ * @code{.cpp}\n+ * Synced<std::vector<int>> v{5, 6, 7, 8};\n+ *\n+ * // v is locked for the entire duration of the loop\n+ * for (auto& i : *v) {\n+ *     i *= 10;\n+ * }\n+ *\n+ * {\n+ *     LOCK(v);\n+ *     size_t size = v->size();\n+ *     // The container will not be changed by another thread between the two size() calls.\n+ *     assert(size == v->size());\n+ * }\n+ * @endcode\n+ */\n+template <typename T>\n+class Synced : public RecursiveMutex\n+{\n+public:\n+    /**\n+     * Construct the smart container and its internal object of type T,\n+     * passing `args...` to T's constructor.\n+     */\n+    template <typename... Args>\n+    Synced(Args... args) : m_obj{args...}\n+    {\n+    }\n+\n+    /**\n+     * An auxiliary class that holds the parent locked for the duration of its\n+     * lifetime and provides access to the internal object.\n+     */\n+    class Proxy : ::UniqueLock<RecursiveMutex>\n+    {\n+    public:\n+        Proxy(Synced& parent, const char* mutex_name, const char* file_name, int line)\n+            : ::UniqueLock<RecursiveMutex>{parent, mutex_name, file_name, line},\n+              m_obj_ref{parent.m_obj}\n+        {\n+        }\n+\n+        T* operator->() { return &m_obj_ref; }\n+\n+        template <typename Key>\n+        auto& operator[](Key key)\n+        {\n+            return m_obj_ref[key];\n+        }\n+\n+        auto begin() { return m_obj_ref.begin(); }\n+\n+        auto end() { return m_obj_ref.end(); }\n+\n+    private:\n+        T& m_obj_ref;\n+    };\n+\n+    /**\n+     * Access `m_obj`, holding `this` locked for the duration of the access.\n+     * This causes a chain of `operator->()` calls:\n+     * 1. `Synced::operator->()` is called, which returns `Proxy` (the\n+     * constructor of `Proxy` locks `this`), then\n+     * 2. `Proxy::operator->()` is called, which returns a raw pointer to\n+     * `m_obj` which is dereferenced in order to call the relevant method.\n+     */\n+    Proxy operator->()\n+    {\n+        return Proxy{*this, \"Synced::operator->()\", __FILE__, __LINE__};",
      "path": "src/sync.h",
      "position": null,
      "original_position": 95,
      "commit_id": "92a444d0d73112d36abfa8875e73e26a06222891",
      "original_commit_id": "bca6b06341b089c89fbd5647fdc868258b8c9d5a",
      "in_reply_to_id": 978269158,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think the macro is necessary -- otherwise `return Proxy{*this}` means you have to annotate the `Proxy(Proxy&&)` move constructor, but the only thing you can annotate that with is locking its internal reference to `g.m` but that then creates an alias of the mutex which prevents clang from detecting when double locking is happening since clang can't tell that two different invocations are locking aliases of the same lock.\r\n\r\nChanging the name and the argument order makes lots of sense, I just posted it as soon as I found something that worked. `Guarded<T>` probably isn't a great name either. (I think it makes sense for `Proxy` to match whatever the macro is named)",
      "created_at": "2022-09-30T00:01:59Z",
      "updated_at": "2022-09-30T00:01:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#discussion_r984106710",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/984106710"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 483,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/985802251",
      "pull_request_review_id": 1128402641,
      "id": 985802251,
      "node_id": "PRRC_kwDOABII5846wiYL",
      "diff_hunk": "@@ -398,4 +398,104 @@ class CSemaphoreGrant\n     }\n };\n \n+/**\n+ * A smart container that protects an owned object with a mutex.\n+ * This is like a mutex with an extension - owning an object of arbitrary type\n+ * and providing a dereference operation which gives access to the owned object\n+ * and transparently locks the mutex for the duration of the access.\n+ * For example, the following is safe:\n+ * @code{.cpp}\n+ * Synced<std::vector<int>> v;\n+ *\n+ * std::thread t1{[&v]() { v->push_back(5); }};\n+ * std::thread t2{[&v]() { v->push_back(6); }};\n+ * @endcode\n+ *\n+ * It is possible so acquire the mutex for longer time than just for a single call:\n+ * @code{.cpp}\n+ * Synced<std::vector<int>> v{5, 6, 7, 8};\n+ *\n+ * // v is locked for the entire duration of the loop\n+ * for (auto& i : *v) {\n+ *     i *= 10;\n+ * }\n+ *\n+ * {\n+ *     LOCK(v);\n+ *     size_t size = v->size();\n+ *     // The container will not be changed by another thread between the two size() calls.\n+ *     assert(size == v->size());\n+ * }\n+ * @endcode\n+ */\n+template <typename T>\n+class Synced : public RecursiveMutex\n+{\n+public:\n+    /**\n+     * Construct the smart container and its internal object of type T,\n+     * passing `args...` to T's constructor.\n+     */\n+    template <typename... Args>\n+    Synced(Args... args) : m_obj{args...}\n+    {\n+    }\n+\n+    /**\n+     * An auxiliary class that holds the parent locked for the duration of its\n+     * lifetime and provides access to the internal object.\n+     */\n+    class Proxy : ::UniqueLock<RecursiveMutex>\n+    {\n+    public:\n+        Proxy(Synced& parent, const char* mutex_name, const char* file_name, int line)\n+            : ::UniqueLock<RecursiveMutex>{parent, mutex_name, file_name, line},\n+              m_obj_ref{parent.m_obj}\n+        {\n+        }\n+\n+        T* operator->() { return &m_obj_ref; }\n+\n+        template <typename Key>\n+        auto& operator[](Key key)\n+        {\n+            return m_obj_ref[key];\n+        }\n+\n+        auto begin() { return m_obj_ref.begin(); }\n+\n+        auto end() { return m_obj_ref.end(); }\n+\n+    private:\n+        T& m_obj_ref;\n+    };\n+\n+    /**\n+     * Access `m_obj`, holding `this` locked for the duration of the access.\n+     * This causes a chain of `operator->()` calls:\n+     * 1. `Synced::operator->()` is called, which returns `Proxy` (the\n+     * constructor of `Proxy` locks `this`), then\n+     * 2. `Proxy::operator->()` is called, which returns a raw pointer to\n+     * `m_obj` which is dereferenced in order to call the relevant method.\n+     */\n+    Proxy operator->()\n+    {\n+        return Proxy{*this, \"Synced::operator->()\", __FILE__, __LINE__};",
      "path": "src/sync.h",
      "position": null,
      "original_position": 95,
      "commit_id": "92a444d0d73112d36abfa8875e73e26a06222891",
      "original_commit_id": "bca6b06341b089c89fbd5647fdc868258b8c9d5a",
      "in_reply_to_id": 978269158,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "What about this:\r\n\r\n```cpp\r\ntemplate <typename T>\r\nclass Synced\r\n{\r\npublic:\r\n    template <typename... Args>\r\n    Synced(Args... args) : m_obj{args...}\r\n    {\r\n    }\r\n\r\n    class SCOPED_LOCKABLE Proxy : ::UniqueLock<Mutex>\r\n    {\r\n    public:\r\n        Proxy(Synced& parent) EXCLUSIVE_LOCK_FUNCTION(parent.m_mutex)\r\n            : ::UniqueLock<Mutex>{parent.m_mutex, \"...\", \"...\", 123}, m_parent{parent}\r\n        {\r\n        }\r\n\r\n        ~Proxy() UNLOCK_FUNCTION() {}\r\n\r\n        T& operator*()\r\n        {\r\n            return m_parent.m_obj;\r\n        }\r\n\r\n        T* operator->()\r\n        {\r\n            return &m_parent.m_obj;\r\n        }\r\n\r\n    private:\r\n        Synced& m_parent;\r\n    };\r\n\r\nprivate:\r\n    mutable Mutex m_mutex;\r\n    T m_obj GUARDED_BY(m_mutex);\r\n};\r\n\r\n#define SYNCED_LOCK(synced, name) decltype(synced)::Proxy name{synced}\r\n```\r\n\r\nWith example usage:\r\n\r\n```cpp\r\nSynced<std::vector<int>> synced{1, 2, 3, 4};\r\n\r\n{\r\n    SYNCED_LOCK(synced, p);\r\n\r\n    p->push_back(5);\r\n}\r\n\r\n{\r\n    SYNCED_LOCK(synced, p);\r\n\r\n    std::cout << (*p)[0] << std::endl;\r\n\r\n    for (auto& i : *p) {\r\n        std::cout << i << std::endl;\r\n    }\r\n}\r\n```\r\n\r\nWe lose the sweet syntax:\r\n\r\n```cpp\r\nSynced<std::vector<int>> synced{1, 2, 3, 4};\r\n\r\nsynced->push_back(5);\r\n```\r\n\r\ncompared to the other variants, but this would still offer simplifications in higher level code and if you are ok with it, then I am fine.\r\n",
      "created_at": "2022-10-03T13:46:53Z",
      "updated_at": "2022-10-03T13:51:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#discussion_r985802251",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/985802251"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 483,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/986153213",
      "pull_request_review_id": 1128915124,
      "id": 986153213,
      "node_id": "PRRC_kwDOABII5846x4D9",
      "diff_hunk": "@@ -398,4 +398,104 @@ class CSemaphoreGrant\n     }\n };\n \n+/**\n+ * A smart container that protects an owned object with a mutex.\n+ * This is like a mutex with an extension - owning an object of arbitrary type\n+ * and providing a dereference operation which gives access to the owned object\n+ * and transparently locks the mutex for the duration of the access.\n+ * For example, the following is safe:\n+ * @code{.cpp}\n+ * Synced<std::vector<int>> v;\n+ *\n+ * std::thread t1{[&v]() { v->push_back(5); }};\n+ * std::thread t2{[&v]() { v->push_back(6); }};\n+ * @endcode\n+ *\n+ * It is possible so acquire the mutex for longer time than just for a single call:\n+ * @code{.cpp}\n+ * Synced<std::vector<int>> v{5, 6, 7, 8};\n+ *\n+ * // v is locked for the entire duration of the loop\n+ * for (auto& i : *v) {\n+ *     i *= 10;\n+ * }\n+ *\n+ * {\n+ *     LOCK(v);\n+ *     size_t size = v->size();\n+ *     // The container will not be changed by another thread between the two size() calls.\n+ *     assert(size == v->size());\n+ * }\n+ * @endcode\n+ */\n+template <typename T>\n+class Synced : public RecursiveMutex\n+{\n+public:\n+    /**\n+     * Construct the smart container and its internal object of type T,\n+     * passing `args...` to T's constructor.\n+     */\n+    template <typename... Args>\n+    Synced(Args... args) : m_obj{args...}\n+    {\n+    }\n+\n+    /**\n+     * An auxiliary class that holds the parent locked for the duration of its\n+     * lifetime and provides access to the internal object.\n+     */\n+    class Proxy : ::UniqueLock<RecursiveMutex>\n+    {\n+    public:\n+        Proxy(Synced& parent, const char* mutex_name, const char* file_name, int line)\n+            : ::UniqueLock<RecursiveMutex>{parent, mutex_name, file_name, line},\n+              m_obj_ref{parent.m_obj}\n+        {\n+        }\n+\n+        T* operator->() { return &m_obj_ref; }\n+\n+        template <typename Key>\n+        auto& operator[](Key key)\n+        {\n+            return m_obj_ref[key];\n+        }\n+\n+        auto begin() { return m_obj_ref.begin(); }\n+\n+        auto end() { return m_obj_ref.end(); }\n+\n+    private:\n+        T& m_obj_ref;\n+    };\n+\n+    /**\n+     * Access `m_obj`, holding `this` locked for the duration of the access.\n+     * This causes a chain of `operator->()` calls:\n+     * 1. `Synced::operator->()` is called, which returns `Proxy` (the\n+     * constructor of `Proxy` locks `this`), then\n+     * 2. `Proxy::operator->()` is called, which returns a raw pointer to\n+     * `m_obj` which is dereferenced in order to call the relevant method.\n+     */\n+    Proxy operator->()\n+    {\n+        return Proxy{*this, \"Synced::operator->()\", __FILE__, __LINE__};",
      "path": "src/sync.h",
      "position": null,
      "original_position": 95,
      "commit_id": "92a444d0d73112d36abfa8875e73e26a06222891",
      "original_commit_id": "bca6b06341b089c89fbd5647fdc868258b8c9d5a",
      "in_reply_to_id": 978269158,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'm not sure what the differences are between you're quoting above vs what I suggested? They currently look pretty much the same to me? (I was going to check that `begin`/`end`/`op[]` didn't create double locking issues, but you've gotten rid of them already)\r\n\r\nI think it'd be worth adding `LIFETIMEBOUND` annotations (from attributes.h) as well. Perhaps you should delete the move constructor for `Synced`?\r\n\r\nI agree `synced->push_back(5)` is pretty, but it seems likely to be bug prone to me: consider `it = synced_map->find(key)` -- the lock will be released as soon as the iterator is returned, allowing `it` to be immediately invalidated. So I kind of think we should just count ourselves lucky that we can't make it work and callers have to be explicit about the lock scope...",
      "created_at": "2022-10-03T19:37:33Z",
      "updated_at": "2022-10-03T19:37:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#discussion_r986153213",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/986153213"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 483,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/986156191",
      "pull_request_review_id": 1128919465,
      "id": 986156191,
      "node_id": "PRRC_kwDOABII5846x4yf",
      "diff_hunk": "@@ -398,4 +398,104 @@ class CSemaphoreGrant\n     }\n };\n \n+/**\n+ * A smart container that protects an owned object with a mutex.\n+ * This is like a mutex with an extension - owning an object of arbitrary type\n+ * and providing a dereference operation which gives access to the owned object\n+ * and transparently locks the mutex for the duration of the access.\n+ * For example, the following is safe:\n+ * @code{.cpp}\n+ * Synced<std::vector<int>> v;\n+ *\n+ * std::thread t1{[&v]() { v->push_back(5); }};\n+ * std::thread t2{[&v]() { v->push_back(6); }};\n+ * @endcode\n+ *\n+ * It is possible so acquire the mutex for longer time than just for a single call:\n+ * @code{.cpp}\n+ * Synced<std::vector<int>> v{5, 6, 7, 8};\n+ *\n+ * // v is locked for the entire duration of the loop\n+ * for (auto& i : *v) {\n+ *     i *= 10;\n+ * }\n+ *\n+ * {\n+ *     LOCK(v);\n+ *     size_t size = v->size();\n+ *     // The container will not be changed by another thread between the two size() calls.\n+ *     assert(size == v->size());\n+ * }\n+ * @endcode\n+ */\n+template <typename T>\n+class Synced : public RecursiveMutex\n+{\n+public:\n+    /**\n+     * Construct the smart container and its internal object of type T,\n+     * passing `args...` to T's constructor.\n+     */\n+    template <typename... Args>\n+    Synced(Args... args) : m_obj{args...}\n+    {\n+    }\n+\n+    /**\n+     * An auxiliary class that holds the parent locked for the duration of its\n+     * lifetime and provides access to the internal object.\n+     */\n+    class Proxy : ::UniqueLock<RecursiveMutex>\n+    {\n+    public:\n+        Proxy(Synced& parent, const char* mutex_name, const char* file_name, int line)\n+            : ::UniqueLock<RecursiveMutex>{parent, mutex_name, file_name, line},\n+              m_obj_ref{parent.m_obj}\n+        {\n+        }\n+\n+        T* operator->() { return &m_obj_ref; }\n+\n+        template <typename Key>\n+        auto& operator[](Key key)\n+        {\n+            return m_obj_ref[key];\n+        }\n+\n+        auto begin() { return m_obj_ref.begin(); }\n+\n+        auto end() { return m_obj_ref.end(); }\n+\n+    private:\n+        T& m_obj_ref;\n+    };\n+\n+    /**\n+     * Access `m_obj`, holding `this` locked for the duration of the access.\n+     * This causes a chain of `operator->()` calls:\n+     * 1. `Synced::operator->()` is called, which returns `Proxy` (the\n+     * constructor of `Proxy` locks `this`), then\n+     * 2. `Proxy::operator->()` is called, which returns a raw pointer to\n+     * `m_obj` which is dereferenced in order to call the relevant method.\n+     */\n+    Proxy operator->()\n+    {\n+        return Proxy{*this, \"Synced::operator->()\", __FILE__, __LINE__};",
      "path": "src/sync.h",
      "position": null,
      "original_position": 95,
      "commit_id": "92a444d0d73112d36abfa8875e73e26a06222891",
      "original_commit_id": "bca6b06341b089c89fbd5647fdc868258b8c9d5a",
      "in_reply_to_id": 978269158,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It might be nice to have a `ConstProxy` variant too, so that if you have a `const` reference to an object containing a `Synced<foo>` you can still access have synced access to the object as `const foo`. On the other hand, maybe better to worry about that when an actual use comes up.",
      "created_at": "2022-10-03T19:41:27Z",
      "updated_at": "2022-10-03T19:41:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#discussion_r986156191",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/986156191"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 483,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/986218855",
      "pull_request_review_id": 1129009189,
      "id": 986218855,
      "node_id": "PRRC_kwDOABII5846yIFn",
      "diff_hunk": "@@ -398,4 +398,104 @@ class CSemaphoreGrant\n     }\n };\n \n+/**\n+ * A smart container that protects an owned object with a mutex.\n+ * This is like a mutex with an extension - owning an object of arbitrary type\n+ * and providing a dereference operation which gives access to the owned object\n+ * and transparently locks the mutex for the duration of the access.\n+ * For example, the following is safe:\n+ * @code{.cpp}\n+ * Synced<std::vector<int>> v;\n+ *\n+ * std::thread t1{[&v]() { v->push_back(5); }};\n+ * std::thread t2{[&v]() { v->push_back(6); }};\n+ * @endcode\n+ *\n+ * It is possible so acquire the mutex for longer time than just for a single call:\n+ * @code{.cpp}\n+ * Synced<std::vector<int>> v{5, 6, 7, 8};\n+ *\n+ * // v is locked for the entire duration of the loop\n+ * for (auto& i : *v) {\n+ *     i *= 10;\n+ * }\n+ *\n+ * {\n+ *     LOCK(v);\n+ *     size_t size = v->size();\n+ *     // The container will not be changed by another thread between the two size() calls.\n+ *     assert(size == v->size());\n+ * }\n+ * @endcode\n+ */\n+template <typename T>\n+class Synced : public RecursiveMutex\n+{\n+public:\n+    /**\n+     * Construct the smart container and its internal object of type T,\n+     * passing `args...` to T's constructor.\n+     */\n+    template <typename... Args>\n+    Synced(Args... args) : m_obj{args...}\n+    {\n+    }\n+\n+    /**\n+     * An auxiliary class that holds the parent locked for the duration of its\n+     * lifetime and provides access to the internal object.\n+     */\n+    class Proxy : ::UniqueLock<RecursiveMutex>\n+    {\n+    public:\n+        Proxy(Synced& parent, const char* mutex_name, const char* file_name, int line)\n+            : ::UniqueLock<RecursiveMutex>{parent, mutex_name, file_name, line},\n+              m_obj_ref{parent.m_obj}\n+        {\n+        }\n+\n+        T* operator->() { return &m_obj_ref; }\n+\n+        template <typename Key>\n+        auto& operator[](Key key)\n+        {\n+            return m_obj_ref[key];\n+        }\n+\n+        auto begin() { return m_obj_ref.begin(); }\n+\n+        auto end() { return m_obj_ref.end(); }\n+\n+    private:\n+        T& m_obj_ref;\n+    };\n+\n+    /**\n+     * Access `m_obj`, holding `this` locked for the duration of the access.\n+     * This causes a chain of `operator->()` calls:\n+     * 1. `Synced::operator->()` is called, which returns `Proxy` (the\n+     * constructor of `Proxy` locks `this`), then\n+     * 2. `Proxy::operator->()` is called, which returns a raw pointer to\n+     * `m_obj` which is dereferenced in order to call the relevant method.\n+     */\n+    Proxy operator->()\n+    {\n+        return Proxy{*this, \"Synced::operator->()\", __FILE__, __LINE__};",
      "path": "src/sync.h",
      "position": null,
      "original_position": 95,
      "commit_id": "92a444d0d73112d36abfa8875e73e26a06222891",
      "original_commit_id": "bca6b06341b089c89fbd5647fdc868258b8c9d5a",
      "in_reply_to_id": 978269158,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`Proxy : ::UniqueLock<Mutex>` -- isn't it better to say `private` explicitly? (Guess who just assumed it defaulted to `public` until the compiler told him otherwise...)",
      "created_at": "2022-10-03T20:52:05Z",
      "updated_at": "2022-10-03T20:52:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#discussion_r986218855",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/986218855"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 483,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/986548377",
      "pull_request_review_id": 1129459998,
      "id": 986548377,
      "node_id": "PRRC_kwDOABII5846zYiZ",
      "diff_hunk": "@@ -398,4 +398,104 @@ class CSemaphoreGrant\n     }\n };\n \n+/**\n+ * A smart container that protects an owned object with a mutex.\n+ * This is like a mutex with an extension - owning an object of arbitrary type\n+ * and providing a dereference operation which gives access to the owned object\n+ * and transparently locks the mutex for the duration of the access.\n+ * For example, the following is safe:\n+ * @code{.cpp}\n+ * Synced<std::vector<int>> v;\n+ *\n+ * std::thread t1{[&v]() { v->push_back(5); }};\n+ * std::thread t2{[&v]() { v->push_back(6); }};\n+ * @endcode\n+ *\n+ * It is possible so acquire the mutex for longer time than just for a single call:\n+ * @code{.cpp}\n+ * Synced<std::vector<int>> v{5, 6, 7, 8};\n+ *\n+ * // v is locked for the entire duration of the loop\n+ * for (auto& i : *v) {\n+ *     i *= 10;\n+ * }\n+ *\n+ * {\n+ *     LOCK(v);\n+ *     size_t size = v->size();\n+ *     // The container will not be changed by another thread between the two size() calls.\n+ *     assert(size == v->size());\n+ * }\n+ * @endcode\n+ */\n+template <typename T>\n+class Synced : public RecursiveMutex\n+{\n+public:\n+    /**\n+     * Construct the smart container and its internal object of type T,\n+     * passing `args...` to T's constructor.\n+     */\n+    template <typename... Args>\n+    Synced(Args... args) : m_obj{args...}\n+    {\n+    }\n+\n+    /**\n+     * An auxiliary class that holds the parent locked for the duration of its\n+     * lifetime and provides access to the internal object.\n+     */\n+    class Proxy : ::UniqueLock<RecursiveMutex>\n+    {\n+    public:\n+        Proxy(Synced& parent, const char* mutex_name, const char* file_name, int line)\n+            : ::UniqueLock<RecursiveMutex>{parent, mutex_name, file_name, line},\n+              m_obj_ref{parent.m_obj}\n+        {\n+        }\n+\n+        T* operator->() { return &m_obj_ref; }\n+\n+        template <typename Key>\n+        auto& operator[](Key key)\n+        {\n+            return m_obj_ref[key];\n+        }\n+\n+        auto begin() { return m_obj_ref.begin(); }\n+\n+        auto end() { return m_obj_ref.end(); }\n+\n+    private:\n+        T& m_obj_ref;\n+    };\n+\n+    /**\n+     * Access `m_obj`, holding `this` locked for the duration of the access.\n+     * This causes a chain of `operator->()` calls:\n+     * 1. `Synced::operator->()` is called, which returns `Proxy` (the\n+     * constructor of `Proxy` locks `this`), then\n+     * 2. `Proxy::operator->()` is called, which returns a raw pointer to\n+     * `m_obj` which is dereferenced in order to call the relevant method.\n+     */\n+    Proxy operator->()\n+    {\n+        return Proxy{*this, \"Synced::operator->()\", __FILE__, __LINE__};",
      "path": "src/sync.h",
      "position": null,
      "original_position": 95,
      "commit_id": "92a444d0d73112d36abfa8875e73e26a06222891",
      "original_commit_id": "bca6b06341b089c89fbd5647fdc868258b8c9d5a",
      "in_reply_to_id": 978269158,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> I'm not sure what the differences are between you're quoting above vs what I suggested?\r\n\r\nYes, they are pretty much the same. The question was maybe more directed to @ryanofsky - if he is ok with that. I want to avoid pushing another iteration of this PR and it to be shot by somebody shortly after :) If you both agree on the above, then lets do that!\r\n\r\nTo-polish: LIFETIMEBOUND, delete the Synced move constructor, consider const, explicit inheritance type.",
      "created_at": "2022-10-04T07:59:19Z",
      "updated_at": "2022-10-04T07:59:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#discussion_r986548377",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/986548377"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 483,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/987678673",
      "pull_request_review_id": 1131084530,
      "id": 987678673,
      "node_id": "PRRC_kwDOABII58463sfR",
      "diff_hunk": "@@ -398,4 +398,104 @@ class CSemaphoreGrant\n     }\n };\n \n+/**\n+ * A smart container that protects an owned object with a mutex.\n+ * This is like a mutex with an extension - owning an object of arbitrary type\n+ * and providing a dereference operation which gives access to the owned object\n+ * and transparently locks the mutex for the duration of the access.\n+ * For example, the following is safe:\n+ * @code{.cpp}\n+ * Synced<std::vector<int>> v;\n+ *\n+ * std::thread t1{[&v]() { v->push_back(5); }};\n+ * std::thread t2{[&v]() { v->push_back(6); }};\n+ * @endcode\n+ *\n+ * It is possible so acquire the mutex for longer time than just for a single call:\n+ * @code{.cpp}\n+ * Synced<std::vector<int>> v{5, 6, 7, 8};\n+ *\n+ * // v is locked for the entire duration of the loop\n+ * for (auto& i : *v) {\n+ *     i *= 10;\n+ * }\n+ *\n+ * {\n+ *     LOCK(v);\n+ *     size_t size = v->size();\n+ *     // The container will not be changed by another thread between the two size() calls.\n+ *     assert(size == v->size());\n+ * }\n+ * @endcode\n+ */\n+template <typename T>\n+class Synced : public RecursiveMutex\n+{\n+public:\n+    /**\n+     * Construct the smart container and its internal object of type T,\n+     * passing `args...` to T's constructor.\n+     */\n+    template <typename... Args>\n+    Synced(Args... args) : m_obj{args...}\n+    {\n+    }\n+\n+    /**\n+     * An auxiliary class that holds the parent locked for the duration of its\n+     * lifetime and provides access to the internal object.\n+     */\n+    class Proxy : ::UniqueLock<RecursiveMutex>\n+    {\n+    public:\n+        Proxy(Synced& parent, const char* mutex_name, const char* file_name, int line)\n+            : ::UniqueLock<RecursiveMutex>{parent, mutex_name, file_name, line},\n+              m_obj_ref{parent.m_obj}\n+        {\n+        }\n+\n+        T* operator->() { return &m_obj_ref; }\n+\n+        template <typename Key>\n+        auto& operator[](Key key)\n+        {\n+            return m_obj_ref[key];\n+        }\n+\n+        auto begin() { return m_obj_ref.begin(); }\n+\n+        auto end() { return m_obj_ref.end(); }\n+\n+    private:\n+        T& m_obj_ref;\n+    };\n+\n+    /**\n+     * Access `m_obj`, holding `this` locked for the duration of the access.\n+     * This causes a chain of `operator->()` calls:\n+     * 1. `Synced::operator->()` is called, which returns `Proxy` (the\n+     * constructor of `Proxy` locks `this`), then\n+     * 2. `Proxy::operator->()` is called, which returns a raw pointer to\n+     * `m_obj` which is dereferenced in order to call the relevant method.\n+     */\n+    Proxy operator->()\n+    {\n+        return Proxy{*this, \"Synced::operator->()\", __FILE__, __LINE__};",
      "path": "src/sync.h",
      "position": null,
      "original_position": 95,
      "commit_id": "92a444d0d73112d36abfa8875e73e26a06222891",
      "original_commit_id": "bca6b06341b089c89fbd5647fdc868258b8c9d5a",
      "in_reply_to_id": 978269158,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "If you made `m_obj` and `m_mutex` be protected instead of private, that would allow you to write:\r\n\r\n```c++\r\nclass MyFoo : public Synced<foo>\r\n{\r\npublic:\r\n    int pretty() EXCLUSIVE_LOCKS_REQUIRED(!m_mutex) { LOCK(m_mutex); return m_obj.pretty(); }\r\n};\r\n```\r\n\r\nand then do `i = myfoo.pretty();` -- gets you the same end result as the `synced->pretty()` stuff, but only for things you explicitly add a wrapper for, which at least also gives you a chance to make sure it's actually safe to be used in isolation?",
      "created_at": "2022-10-05T08:43:45Z",
      "updated_at": "2022-10-05T08:44:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#discussion_r987678673",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/987678673"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 483,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/987701975",
      "pull_request_review_id": 1131117742,
      "id": 987701975,
      "node_id": "PRRC_kwDOABII58463yLX",
      "diff_hunk": "@@ -398,4 +398,104 @@ class CSemaphoreGrant\n     }\n };\n \n+/**\n+ * A smart container that protects an owned object with a mutex.\n+ * This is like a mutex with an extension - owning an object of arbitrary type\n+ * and providing a dereference operation which gives access to the owned object\n+ * and transparently locks the mutex for the duration of the access.\n+ * For example, the following is safe:\n+ * @code{.cpp}\n+ * Synced<std::vector<int>> v;\n+ *\n+ * std::thread t1{[&v]() { v->push_back(5); }};\n+ * std::thread t2{[&v]() { v->push_back(6); }};\n+ * @endcode\n+ *\n+ * It is possible so acquire the mutex for longer time than just for a single call:\n+ * @code{.cpp}\n+ * Synced<std::vector<int>> v{5, 6, 7, 8};\n+ *\n+ * // v is locked for the entire duration of the loop\n+ * for (auto& i : *v) {\n+ *     i *= 10;\n+ * }\n+ *\n+ * {\n+ *     LOCK(v);\n+ *     size_t size = v->size();\n+ *     // The container will not be changed by another thread between the two size() calls.\n+ *     assert(size == v->size());\n+ * }\n+ * @endcode\n+ */\n+template <typename T>\n+class Synced : public RecursiveMutex\n+{\n+public:\n+    /**\n+     * Construct the smart container and its internal object of type T,\n+     * passing `args...` to T's constructor.\n+     */\n+    template <typename... Args>\n+    Synced(Args... args) : m_obj{args...}\n+    {\n+    }\n+\n+    /**\n+     * An auxiliary class that holds the parent locked for the duration of its\n+     * lifetime and provides access to the internal object.\n+     */\n+    class Proxy : ::UniqueLock<RecursiveMutex>\n+    {\n+    public:\n+        Proxy(Synced& parent, const char* mutex_name, const char* file_name, int line)\n+            : ::UniqueLock<RecursiveMutex>{parent, mutex_name, file_name, line},\n+              m_obj_ref{parent.m_obj}\n+        {\n+        }\n+\n+        T* operator->() { return &m_obj_ref; }\n+\n+        template <typename Key>\n+        auto& operator[](Key key)\n+        {\n+            return m_obj_ref[key];\n+        }\n+\n+        auto begin() { return m_obj_ref.begin(); }\n+\n+        auto end() { return m_obj_ref.end(); }\n+\n+    private:\n+        T& m_obj_ref;\n+    };\n+\n+    /**\n+     * Access `m_obj`, holding `this` locked for the duration of the access.\n+     * This causes a chain of `operator->()` calls:\n+     * 1. `Synced::operator->()` is called, which returns `Proxy` (the\n+     * constructor of `Proxy` locks `this`), then\n+     * 2. `Proxy::operator->()` is called, which returns a raw pointer to\n+     * `m_obj` which is dereferenced in order to call the relevant method.\n+     */\n+    Proxy operator->()\n+    {\n+        return Proxy{*this, \"Synced::operator->()\", __FILE__, __LINE__};",
      "path": "src/sync.h",
      "position": null,
      "original_position": 95,
      "commit_id": "92a444d0d73112d36abfa8875e73e26a06222891",
      "original_commit_id": "bca6b06341b089c89fbd5647fdc868258b8c9d5a",
      "in_reply_to_id": 978269158,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ok, I wouldn't add features that are not used anywhere, but `s/private/protected` is not actually more code. Makes sense if somebody wants to inherit it and do more involved things.\r\n\r\nTo-polish: LIFETIMEBOUND, delete the Synced move constructor, consider const, explicit inheritance type, protected `m_mutex` and `m_obj`.\r\n\r\n@ryanofsky, what do you think?",
      "created_at": "2022-10-05T09:09:05Z",
      "updated_at": "2022-10-05T09:09:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#discussion_r987701975",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/987701975"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 483,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/988059337",
      "pull_request_review_id": 1131632960,
      "id": 988059337,
      "node_id": "PRRC_kwDOABII58465JbJ",
      "diff_hunk": "@@ -398,4 +398,104 @@ class CSemaphoreGrant\n     }\n };\n \n+/**\n+ * A smart container that protects an owned object with a mutex.\n+ * This is like a mutex with an extension - owning an object of arbitrary type\n+ * and providing a dereference operation which gives access to the owned object\n+ * and transparently locks the mutex for the duration of the access.\n+ * For example, the following is safe:\n+ * @code{.cpp}\n+ * Synced<std::vector<int>> v;\n+ *\n+ * std::thread t1{[&v]() { v->push_back(5); }};\n+ * std::thread t2{[&v]() { v->push_back(6); }};\n+ * @endcode\n+ *\n+ * It is possible so acquire the mutex for longer time than just for a single call:\n+ * @code{.cpp}\n+ * Synced<std::vector<int>> v{5, 6, 7, 8};\n+ *\n+ * // v is locked for the entire duration of the loop\n+ * for (auto& i : *v) {\n+ *     i *= 10;\n+ * }\n+ *\n+ * {\n+ *     LOCK(v);\n+ *     size_t size = v->size();\n+ *     // The container will not be changed by another thread between the two size() calls.\n+ *     assert(size == v->size());\n+ * }\n+ * @endcode\n+ */\n+template <typename T>\n+class Synced : public RecursiveMutex\n+{\n+public:\n+    /**\n+     * Construct the smart container and its internal object of type T,\n+     * passing `args...` to T's constructor.\n+     */\n+    template <typename... Args>\n+    Synced(Args... args) : m_obj{args...}\n+    {\n+    }\n+\n+    /**\n+     * An auxiliary class that holds the parent locked for the duration of its\n+     * lifetime and provides access to the internal object.\n+     */\n+    class Proxy : ::UniqueLock<RecursiveMutex>\n+    {\n+    public:\n+        Proxy(Synced& parent, const char* mutex_name, const char* file_name, int line)\n+            : ::UniqueLock<RecursiveMutex>{parent, mutex_name, file_name, line},\n+              m_obj_ref{parent.m_obj}\n+        {\n+        }\n+\n+        T* operator->() { return &m_obj_ref; }\n+\n+        template <typename Key>\n+        auto& operator[](Key key)\n+        {\n+            return m_obj_ref[key];\n+        }\n+\n+        auto begin() { return m_obj_ref.begin(); }\n+\n+        auto end() { return m_obj_ref.end(); }\n+\n+    private:\n+        T& m_obj_ref;\n+    };\n+\n+    /**\n+     * Access `m_obj`, holding `this` locked for the duration of the access.\n+     * This causes a chain of `operator->()` calls:\n+     * 1. `Synced::operator->()` is called, which returns `Proxy` (the\n+     * constructor of `Proxy` locks `this`), then\n+     * 2. `Proxy::operator->()` is called, which returns a raw pointer to\n+     * `m_obj` which is dereferenced in order to call the relevant method.\n+     */\n+    Proxy operator->()\n+    {\n+        return Proxy{*this, \"Synced::operator->()\", __FILE__, __LINE__};",
      "path": "src/sync.h",
      "position": null,
      "original_position": 95,
      "commit_id": "92a444d0d73112d36abfa8875e73e26a06222891",
      "original_commit_id": "bca6b06341b089c89fbd5647fdc868258b8c9d5a",
      "in_reply_to_id": 978269158,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> To-polish: LIFETIMEBOUND, delete the Synced move constructor, consider const, explicit inheritance type, protected `m_mutex` and `m_obj`.\r\n> \r\n> @ryanofsky, what do you think?\r\n\r\nAll of these tweaks sound good to me.\r\n\r\nGenerally speaking about the PR as a whole, I'm skeptical the `Synced` class will be broadly useful, but I think it's a simple enough utility that can be used in a few places without many drawbacks, and that it's worth experimenting with. I was more interested in the class previously when I thought it was a locking pointer enforcing use of an external mutex (that could be used to migrate code away from using `cs_main`), than a locking container that just used an internal mutex. But it seems like a good thing to use in places where it fits.",
      "created_at": "2022-10-05T15:26:01Z",
      "updated_at": "2022-10-05T15:27:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#discussion_r988059337",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/988059337"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 483,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/993246868",
      "pull_request_review_id": 1138790112,
      "id": 993246868,
      "node_id": "PRRC_kwDOABII5847M76U",
      "diff_hunk": "@@ -400,4 +398,104 @@ class CSemaphoreGrant\n     }\n };\n \n+/**\n+ * A smart container that protects an owned object with a mutex.\n+ * This is like a mutex with an extension - owning an object of arbitrary type\n+ * and providing a dereference operation which gives access to the owned object\n+ * and transparently locks the mutex for the duration of the access.\n+ * For example, the following is safe:\n+ * @code{.cpp}\n+ * Synced<std::vector<int>> v;\n+ *\n+ * std::thread t1{[&v]() { v->push_back(5); }};\n+ * std::thread t2{[&v]() { v->push_back(6); }};\n+ * @endcode\n+ *\n+ * It is possible so acquire the mutex for longer time than just for a single call:\n+ * @code{.cpp}\n+ * Synced<std::vector<int>> v{5, 6, 7, 8};\n+ *\n+ * // v is locked for the entire duration of the loop\n+ * for (auto& i : *v) {\n+ *     i *= 10;\n+ * }\n+ *\n+ * {\n+ *     LOCK(v);\n+ *     size_t size = v->size();\n+ *     // The container will not be changed by another thread between the two size() calls.\n+ *     assert(size == v->size());\n+ * }\n+ * @endcode\n+ */\n+template <typename T>\n+class Synced : public RecursiveMutex",
      "path": "src/sync.h",
      "position": null,
      "original_position": 56,
      "commit_id": "92a444d0d73112d36abfa8875e73e26a06222891",
      "original_commit_id": "11ac578f9132ed76191d03d5100fc88b6ada6a8a",
      "in_reply_to_id": 982661098,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done - in the latest incarnation no double locking is allowed.",
      "created_at": "2022-10-12T09:51:05Z",
      "updated_at": "2022-10-12T09:51:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#discussion_r993246868",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/993246868"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 432,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/993256070",
      "pull_request_review_id": 1138803669,
      "id": 993256070,
      "node_id": "PRRC_kwDOABII5847M-KG",
      "diff_hunk": "@@ -398,4 +398,104 @@ class CSemaphoreGrant\n     }\n };\n \n+/**\n+ * A smart container that protects an owned object with a mutex.\n+ * This is like a mutex with an extension - owning an object of arbitrary type\n+ * and providing a dereference operation which gives access to the owned object\n+ * and transparently locks the mutex for the duration of the access.\n+ * For example, the following is safe:\n+ * @code{.cpp}\n+ * Synced<std::vector<int>> v;\n+ *\n+ * std::thread t1{[&v]() { v->push_back(5); }};\n+ * std::thread t2{[&v]() { v->push_back(6); }};\n+ * @endcode\n+ *\n+ * It is possible so acquire the mutex for longer time than just for a single call:\n+ * @code{.cpp}\n+ * Synced<std::vector<int>> v{5, 6, 7, 8};\n+ *\n+ * // v is locked for the entire duration of the loop\n+ * for (auto& i : *v) {\n+ *     i *= 10;\n+ * }\n+ *\n+ * {\n+ *     LOCK(v);\n+ *     size_t size = v->size();\n+ *     // The container will not be changed by another thread between the two size() calls.\n+ *     assert(size == v->size());\n+ * }\n+ * @endcode\n+ */\n+template <typename T>\n+class Synced : public RecursiveMutex\n+{\n+public:\n+    /**\n+     * Construct the smart container and its internal object of type T,\n+     * passing `args...` to T's constructor.\n+     */\n+    template <typename... Args>\n+    Synced(Args... args) : m_obj{args...}\n+    {\n+    }\n+\n+    /**\n+     * An auxiliary class that holds the parent locked for the duration of its\n+     * lifetime and provides access to the internal object.\n+     */\n+    class Proxy : ::UniqueLock<RecursiveMutex>\n+    {\n+    public:\n+        Proxy(Synced& parent, const char* mutex_name, const char* file_name, int line)\n+            : ::UniqueLock<RecursiveMutex>{parent, mutex_name, file_name, line},\n+              m_obj_ref{parent.m_obj}\n+        {\n+        }\n+\n+        T* operator->() { return &m_obj_ref; }\n+\n+        template <typename Key>\n+        auto& operator[](Key key)\n+        {\n+            return m_obj_ref[key];\n+        }\n+\n+        auto begin() { return m_obj_ref.begin(); }\n+\n+        auto end() { return m_obj_ref.end(); }\n+\n+    private:\n+        T& m_obj_ref;\n+    };\n+\n+    /**\n+     * Access `m_obj`, holding `this` locked for the duration of the access.\n+     * This causes a chain of `operator->()` calls:\n+     * 1. `Synced::operator->()` is called, which returns `Proxy` (the\n+     * constructor of `Proxy` locks `this`), then\n+     * 2. `Proxy::operator->()` is called, which returns a raw pointer to\n+     * `m_obj` which is dereferenced in order to call the relevant method.\n+     */\n+    Proxy operator->()\n+    {\n+        return Proxy{*this, \"Synced::operator->()\", __FILE__, __LINE__};",
      "path": "src/sync.h",
      "position": null,
      "original_position": 95,
      "commit_id": "92a444d0d73112d36abfa8875e73e26a06222891",
      "original_commit_id": "bca6b06341b089c89fbd5647fdc868258b8c9d5a",
      "in_reply_to_id": 978269158,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Updated, I only left the `const` stuff away, since it is not needed now and can be added later if needed.\r\n\r\nFor the usefulness of the `Synced` class, see the OP, I updated it with some of the benefits.",
      "created_at": "2022-10-12T10:00:23Z",
      "updated_at": "2022-10-12T10:22:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#discussion_r993256070",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/993256070"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 483,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/997762368",
      "pull_request_review_id": 1145151729,
      "id": 997762368,
      "node_id": "PRRC_kwDOABII5847eKVA",
      "diff_hunk": "@@ -398,4 +398,104 @@ class CSemaphoreGrant\n     }\n };\n \n+/**\n+ * A smart container that protects an owned object with a mutex.\n+ * This is like a mutex with an extension - owning an object of arbitrary type\n+ * and providing a dereference operation which gives access to the owned object\n+ * and transparently locks the mutex for the duration of the access.\n+ * For example, the following is safe:\n+ * @code{.cpp}\n+ * Synced<std::vector<int>> v;\n+ *\n+ * std::thread t1{[&v]() { v->push_back(5); }};\n+ * std::thread t2{[&v]() { v->push_back(6); }};\n+ * @endcode\n+ *\n+ * It is possible so acquire the mutex for longer time than just for a single call:\n+ * @code{.cpp}\n+ * Synced<std::vector<int>> v{5, 6, 7, 8};\n+ *\n+ * // v is locked for the entire duration of the loop\n+ * for (auto& i : *v) {\n+ *     i *= 10;\n+ * }\n+ *\n+ * {\n+ *     LOCK(v);\n+ *     size_t size = v->size();\n+ *     // The container will not be changed by another thread between the two size() calls.\n+ *     assert(size == v->size());\n+ * }\n+ * @endcode\n+ */\n+template <typename T>\n+class Synced : public RecursiveMutex\n+{\n+public:\n+    /**\n+     * Construct the smart container and its internal object of type T,\n+     * passing `args...` to T's constructor.\n+     */\n+    template <typename... Args>\n+    Synced(Args... args) : m_obj{args...}\n+    {\n+    }\n+\n+    /**\n+     * An auxiliary class that holds the parent locked for the duration of its\n+     * lifetime and provides access to the internal object.\n+     */\n+    class Proxy : ::UniqueLock<RecursiveMutex>\n+    {\n+    public:\n+        Proxy(Synced& parent, const char* mutex_name, const char* file_name, int line)\n+            : ::UniqueLock<RecursiveMutex>{parent, mutex_name, file_name, line},\n+              m_obj_ref{parent.m_obj}\n+        {\n+        }\n+\n+        T* operator->() { return &m_obj_ref; }\n+\n+        template <typename Key>\n+        auto& operator[](Key key)\n+        {\n+            return m_obj_ref[key];\n+        }\n+\n+        auto begin() { return m_obj_ref.begin(); }\n+\n+        auto end() { return m_obj_ref.end(); }\n+\n+    private:\n+        T& m_obj_ref;\n+    };\n+\n+    /**\n+     * Access `m_obj`, holding `this` locked for the duration of the access.\n+     * This causes a chain of `operator->()` calls:\n+     * 1. `Synced::operator->()` is called, which returns `Proxy` (the\n+     * constructor of `Proxy` locks `this`), then\n+     * 2. `Proxy::operator->()` is called, which returns a raw pointer to\n+     * `m_obj` which is dereferenced in order to call the relevant method.\n+     */\n+    Proxy operator->()\n+    {\n+        return Proxy{*this, \"Synced::operator->()\", __FILE__, __LINE__};",
      "path": "src/sync.h",
      "position": null,
      "original_position": 95,
      "commit_id": "92a444d0d73112d36abfa8875e73e26a06222891",
      "original_commit_id": "bca6b06341b089c89fbd5647fdc868258b8c9d5a",
      "in_reply_to_id": 978269158,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Hmm, when used with shared locks, it seems like clang's thread safety analysis doesn't actually prevent you from calling non-const member functions of a `GUARDED_BY` object when only holding the lock in shared mode (it does prevent you from doing `a = b`, just not `a.set(b)`). So if you take a shared lock over a vector, then resize it and invalidate everyone elses iterators, clang thinks it's all fine.\r\n\r\nWhich I think means that if we wanted to do shared locking more broadly, then this method might be the safest way we have of it: ie have `SYNCED_SHARED(foo,  fooproxy)` take a shared lock and have `*fooproxy` give a `const Foo&` so you can't accidently modify `foo` while you're potentially sharing it with other threads.\r\n\r\nEDIT: for possible future reference, just doing this looks like it works sensibly:\r\n\r\n```c++\r\nclass Synced\r\n{\r\n...\r\n    class SCOPED_LOCKABLE ConstProxy : public ::UniqueLock<Mutex>\r\n    {\r\n    public:\r\n        ConstProxy(const Synced& parent LIFETIMEBOUND, const char* name, const char* file, int line)\r\n            EXCLUSIVE_LOCK_FUNCTION(parent.m_mutex)\r\n            : ::UniqueLock<Mutex>{parent.m_mutex, name, file, line}, m_parent{parent}\r\n        {\r\n        }\r\n\r\n        ~ConstProxy() UNLOCK_FUNCTION() {}\r\n\r\n        const T& operator*() LIFETIMEBOUND { return m_parent.m_obj; }\r\n\r\n        const T* operator->() LIFETIMEBOUND { return &m_parent.m_obj; }\r\n\r\n    private:\r\n        const Synced& m_parent;\r\n    };\r\n...\r\n};\r\n\r\n#define SYNCED_SHARED(synced, name) decltype(synced)::ConstProxy name{synced, #synced, __FILE__, __LINE__}\r\n```\r\n\r\nTweaking that to use a `std::shared_lock` instead of `unique_lock` and marking it as `SHARED_LOCK_FUNCTION` instead of exclusive would let us use shared locks pretty easily and safely, I think.\r\n",
      "created_at": "2022-10-18T06:21:09Z",
      "updated_at": "2022-10-18T12:35:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#discussion_r997762368",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/997762368"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 483,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/998159732",
      "pull_request_review_id": 1145740612,
      "id": 998159732,
      "node_id": "PRRC_kwDOABII5847frV0",
      "diff_hunk": "@@ -325,14 +330,17 @@ void SetReachable(enum Network net, bool reachable)\n {\n     if (net == NET_UNROUTABLE || net == NET_INTERNAL)\n         return;\n-    LOCK(g_maplocalhost_mutex);\n-    vfLimited[net] = !reachable;\n+    SYNCED_LOCK(g_reachable_networks, p);\n+    if (reachable) {\n+        p->insert(net);\n+    } else {\n+        p->erase(net);\n+    }\n }\n \n bool IsReachable(enum Network net)\n {\n-    LOCK(g_maplocalhost_mutex);\n-    return !vfLimited[net];\n+    return WITH_SYNCED_LOCK(g_reachable_networks, p, return p->count(net) > 0);",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 46,
      "commit_id": "92a444d0d73112d36abfa8875e73e26a06222891",
      "original_commit_id": "121bee1947f86ebab858cf016ae28ae6c11663ab",
      "in_reply_to_id": null,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Seems clearer to write that as two lines (`SYNCED_LOCK(); return ..`) to me.",
      "created_at": "2022-10-18T12:44:56Z",
      "updated_at": "2022-10-19T08:05:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#discussion_r998159732",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/998159732"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 343,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/998164319",
      "pull_request_review_id": 1145740612,
      "id": 998164319,
      "node_id": "PRRC_kwDOABII5847fsdf",
      "diff_hunk": "@@ -397,4 +398,77 @@ class CSemaphoreGrant\n     }\n };\n \n+/**\n+ * A generic container that protects an owned object with a mutex.\n+ * This is like a mutex with an extension - owning an object of arbitrary type\n+ * and providing a dereference operation which gives access to the owned object\n+ * and transparently locks the mutex for the duration of the access. For example:\n+ *\n+ * @code{.cpp}\n+ * Synced<std::vector<int>> v{4, 5, 6};\n+ *\n+ * std::thread t1{[&v]() { SYNCED_LOCK(v, p); p->push_back(7); }};\n+ * std::thread t2{[&v]() { SYNCED_LOCK(v, p); p->push_back(8); }};\n+ *\n+ * SYNCED_LOCK(v, p);\n+ * const size_t size = p->size();\n+ * for (auto& i : *p) {\n+ *     i *= 10;\n+ * }\n+ * // The container will not be changed by another thread between the two size() calls.\n+ * assert(size == p->size());\n+ *\n+ * std::cout << (*p)[0] << std::endl;\n+ *\n+ * @endcode\n+ */\n+template <typename T>\n+class Synced\n+{\n+public:\n+    /**\n+     * Construct the container and its internal object of type T,\n+     * passing `args...` to T's constructor.\n+     */\n+    template <typename... Args>\n+    Synced(Args... args) : m_obj{args...}\n+    {\n+    }\n+\n+    /**\n+     * An auxiliary class that holds the parent locked for the duration of its\n+     * lifetime and provides access to the internal object.\n+     */\n+    class SCOPED_LOCKABLE Proxy : public ::UniqueLock<Mutex>\n+    {\n+    public:\n+        Proxy(Synced& parent LIFETIMEBOUND, const char* name, const char* file, int line)\n+            EXCLUSIVE_LOCK_FUNCTION(parent.m_mutex)\n+            : ::UniqueLock<Mutex>{parent.m_mutex, name, file, line}, m_parent{parent}\n+        {\n+        }\n+\n+        ~Proxy() UNLOCK_FUNCTION() {}\n+\n+        T& operator*() LIFETIMEBOUND { return m_parent.m_obj; }\n+\n+        T* operator->() LIFETIMEBOUND { return &m_parent.m_obj; }\n+\n+    private:\n+        Synced& m_parent;\n+    };\n+\n+protected:\n+    mutable Mutex m_mutex;\n+    T m_obj GUARDED_BY(m_mutex);\n+};\n+\n+#define SYNCED_LOCK(synced, name) decltype(synced)::Proxy name{synced, #synced, __FILE__, __LINE__}",
      "path": "src/sync.h",
      "position": 77,
      "original_position": 77,
      "commit_id": "92a444d0d73112d36abfa8875e73e26a06222891",
      "original_commit_id": "c6f1d58b0489c733b6029cca9a70606145155b32",
      "in_reply_to_id": null,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I wonder if hardcoding the proxy name would be better; something like:\r\n\r\n```c++\r\n#define SYNCED_LOCK(synced) decltype(synced)::Proxy synced##_proxy{synced, #synced, __FILE__, __LINE__}\r\n``` \r\n\r\nthen you write `SYNCED_LOCK(foo); foo_proxy->bar()` and don't have to choose a name, and don't have to worry about remembering what `p` was a proxy for.",
      "created_at": "2022-10-18T12:48:54Z",
      "updated_at": "2022-10-19T08:05:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#discussion_r998164319",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/998164319"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 497,
      "original_line": 497,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/998202653",
      "pull_request_review_id": 1145740612,
      "id": 998202653,
      "node_id": "PRRC_kwDOABII5847f10d",
      "diff_hunk": "@@ -115,7 +117,10 @@ bool fDiscover = true;\n bool fListen = true;\n GlobalMutex g_maplocalhost_mutex;\n std::map<CNetAddr, LocalServiceInfo> mapLocalHost GUARDED_BY(g_maplocalhost_mutex);\n-static bool vfLimited[NET_MAX] GUARDED_BY(g_maplocalhost_mutex) = {};\n+\n+static Synced<std::unordered_set<Network>> g_reachable_networks{\n+    NET_UNROUTABLE, NET_IPV4, NET_IPV6, NET_ONION, NET_I2P, NET_CJDNS, NET_INTERNAL};",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 23,
      "commit_id": "92a444d0d73112d36abfa8875e73e26a06222891",
      "original_commit_id": "121bee1947f86ebab858cf016ae28ae6c11663ab",
      "in_reply_to_id": null,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Changing this from a bool array to an unordered set seems surprising, and inverting the logic means introducing an extra place that has to be modified when adding new nets. Wouldn't `Synced<std::bitset<NET_MAX>> g_limited_networks` make more sense?",
      "created_at": "2022-10-18T13:14:38Z",
      "updated_at": "2022-10-19T08:05:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#discussion_r998202653",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/998202653"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 125,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/998213646",
      "pull_request_review_id": 1145740612,
      "id": 998213646,
      "node_id": "PRRC_kwDOABII5847f4gO",
      "diff_hunk": "@@ -115,7 +117,10 @@ bool fDiscover = true;\n bool fListen = true;\n GlobalMutex g_maplocalhost_mutex;\n std::map<CNetAddr, LocalServiceInfo> mapLocalHost GUARDED_BY(g_maplocalhost_mutex);\n-static bool vfLimited[NET_MAX] GUARDED_BY(g_maplocalhost_mutex) = {};\n+\n+static Synced<std::unordered_set<Network>> g_reachable_networks{\n+    NET_UNROUTABLE, NET_IPV4, NET_IPV6, NET_ONION, NET_I2P, NET_CJDNS, NET_INTERNAL};\n+",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "92a444d0d73112d36abfa8875e73e26a06222891",
      "original_commit_id": "121bee1947f86ebab858cf016ae28ae6c11663ab",
      "in_reply_to_id": null,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "An alternative approach to splitting these two entries between separate mutexes would be to create an additional struct:\r\n\r\n```c++\r\nstruct NetworkReachability\r\n{\r\n    std::map<CNetAddr, LocalServiceInfo> local_addrs;\r\n    std::set<Network> reachable_nets;\r\n};\r\nSynced<NetworkReachability> g_network_reachability;\r\n```\r\n\r\nand then `SYNCED_LOCK(g_network_reachability, p);` lets you access `p->local_addrs` or `p->reachable_nets`. Hard to see it making much practical difference here either way though.",
      "created_at": "2022-10-18T13:21:56Z",
      "updated_at": "2022-10-19T08:05:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#discussion_r998213646",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/998213646"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 124,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1011738259",
      "pull_request_review_id": 1165214971,
      "id": 1011738259,
      "node_id": "PRRC_kwDOABII5848TeaT",
      "diff_hunk": "@@ -325,14 +330,17 @@ void SetReachable(enum Network net, bool reachable)\n {\n     if (net == NET_UNROUTABLE || net == NET_INTERNAL)\n         return;\n-    LOCK(g_maplocalhost_mutex);\n-    vfLimited[net] = !reachable;\n+    SYNCED_LOCK(g_reachable_networks, p);\n+    if (reachable) {\n+        p->insert(net);\n+    } else {\n+        p->erase(net);\n+    }\n }\n \n bool IsReachable(enum Network net)\n {\n-    LOCK(g_maplocalhost_mutex);\n-    return !vfLimited[net];\n+    return WITH_SYNCED_LOCK(g_reachable_networks, p, return p->count(net) > 0);",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 46,
      "commit_id": "92a444d0d73112d36abfa8875e73e26a06222891",
      "original_commit_id": "121bee1947f86ebab858cf016ae28ae6c11663ab",
      "in_reply_to_id": 998159732,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2022-11-02T13:08:53Z",
      "updated_at": "2022-11-02T13:08:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#discussion_r1011738259",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1011738259"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 343,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1011742090",
      "pull_request_review_id": 1165219536,
      "id": 1011742090,
      "node_id": "PRRC_kwDOABII5848TfWK",
      "diff_hunk": "@@ -397,4 +398,77 @@ class CSemaphoreGrant\n     }\n };\n \n+/**\n+ * A generic container that protects an owned object with a mutex.\n+ * This is like a mutex with an extension - owning an object of arbitrary type\n+ * and providing a dereference operation which gives access to the owned object\n+ * and transparently locks the mutex for the duration of the access. For example:\n+ *\n+ * @code{.cpp}\n+ * Synced<std::vector<int>> v{4, 5, 6};\n+ *\n+ * std::thread t1{[&v]() { SYNCED_LOCK(v, p); p->push_back(7); }};\n+ * std::thread t2{[&v]() { SYNCED_LOCK(v, p); p->push_back(8); }};\n+ *\n+ * SYNCED_LOCK(v, p);\n+ * const size_t size = p->size();\n+ * for (auto& i : *p) {\n+ *     i *= 10;\n+ * }\n+ * // The container will not be changed by another thread between the two size() calls.\n+ * assert(size == p->size());\n+ *\n+ * std::cout << (*p)[0] << std::endl;\n+ *\n+ * @endcode\n+ */\n+template <typename T>\n+class Synced\n+{\n+public:\n+    /**\n+     * Construct the container and its internal object of type T,\n+     * passing `args...` to T's constructor.\n+     */\n+    template <typename... Args>\n+    Synced(Args... args) : m_obj{args...}\n+    {\n+    }\n+\n+    /**\n+     * An auxiliary class that holds the parent locked for the duration of its\n+     * lifetime and provides access to the internal object.\n+     */\n+    class SCOPED_LOCKABLE Proxy : public ::UniqueLock<Mutex>\n+    {\n+    public:\n+        Proxy(Synced& parent LIFETIMEBOUND, const char* name, const char* file, int line)\n+            EXCLUSIVE_LOCK_FUNCTION(parent.m_mutex)\n+            : ::UniqueLock<Mutex>{parent.m_mutex, name, file, line}, m_parent{parent}\n+        {\n+        }\n+\n+        ~Proxy() UNLOCK_FUNCTION() {}\n+\n+        T& operator*() LIFETIMEBOUND { return m_parent.m_obj; }\n+\n+        T* operator->() LIFETIMEBOUND { return &m_parent.m_obj; }\n+\n+    private:\n+        Synced& m_parent;\n+    };\n+\n+protected:\n+    mutable Mutex m_mutex;\n+    T m_obj GUARDED_BY(m_mutex);\n+};\n+\n+#define SYNCED_LOCK(synced, name) decltype(synced)::Proxy name{synced, #synced, __FILE__, __LINE__}",
      "path": "src/sync.h",
      "position": 77,
      "original_position": 77,
      "commit_id": "92a444d0d73112d36abfa8875e73e26a06222891",
      "original_commit_id": "c6f1d58b0489c733b6029cca9a70606145155b32",
      "in_reply_to_id": 998164319,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Sometimes the hardcoded name could become too long/verbose for a too short scope: e.g. `g_reachable_networks_proxy` or `g_reachable_networks_locked` when it is just used on the line below and nowhere else.\r\n\r\nI added now the possibility to call `SYNCED_LOCK()` with 1 or 2 arguments and opted for a `_locked` suffix instead of `_proxy` for the 1-arg case. So the callers have complete flexibility on how to call it.",
      "created_at": "2022-11-02T13:11:43Z",
      "updated_at": "2022-11-02T13:11:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#discussion_r1011742090",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1011742090"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 497,
      "original_line": 497,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1011743933",
      "pull_request_review_id": 1165221632,
      "id": 1011743933,
      "node_id": "PRRC_kwDOABII5848Tfy9",
      "diff_hunk": "@@ -115,7 +117,10 @@ bool fDiscover = true;\n bool fListen = true;\n GlobalMutex g_maplocalhost_mutex;\n std::map<CNetAddr, LocalServiceInfo> mapLocalHost GUARDED_BY(g_maplocalhost_mutex);\n-static bool vfLimited[NET_MAX] GUARDED_BY(g_maplocalhost_mutex) = {};\n+\n+static Synced<std::unordered_set<Network>> g_reachable_networks{\n+    NET_UNROUTABLE, NET_IPV4, NET_IPV6, NET_ONION, NET_I2P, NET_CJDNS, NET_INTERNAL};",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 23,
      "commit_id": "92a444d0d73112d36abfa8875e73e26a06222891",
      "original_commit_id": "121bee1947f86ebab858cf016ae28ae6c11663ab",
      "in_reply_to_id": 998202653,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "My reasoning is that the most natural way to express this is to have a list of networks that are reachable (or unreachable if the logic is to be inverted) and `std::set` is the best way to do that. Having an array of `bool`s is a bit hackish as it requires that all enums are sequential and start at `0` and requires the existence of `NET_MAX` which smells bad. My plan is to remove `NET_MAX`. Ideally, enum lables should be used without depending on their specific integer values.\r\n\r\nAnyway, if this is controveral I will ditch that change and leave it as `vfLimited[NET_MAX]` since it is not the main topic of this PR. Should I?",
      "created_at": "2022-11-02T13:13:04Z",
      "updated_at": "2022-11-02T13:13:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#discussion_r1011743933",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1011743933"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 125,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1011745178",
      "pull_request_review_id": 1165223092,
      "id": 1011745178,
      "node_id": "PRRC_kwDOABII5848TgGa",
      "diff_hunk": "@@ -115,7 +117,10 @@ bool fDiscover = true;\n bool fListen = true;\n GlobalMutex g_maplocalhost_mutex;\n std::map<CNetAddr, LocalServiceInfo> mapLocalHost GUARDED_BY(g_maplocalhost_mutex);\n-static bool vfLimited[NET_MAX] GUARDED_BY(g_maplocalhost_mutex) = {};\n+\n+static Synced<std::unordered_set<Network>> g_reachable_networks{\n+    NET_UNROUTABLE, NET_IPV4, NET_IPV6, NET_ONION, NET_I2P, NET_CJDNS, NET_INTERNAL};\n+",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "92a444d0d73112d36abfa8875e73e26a06222891",
      "original_commit_id": "121bee1947f86ebab858cf016ae28ae6c11663ab",
      "in_reply_to_id": 998213646,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> ... separate mutexes ...\r\n\r\nWhat you propose will use just one mutex? Anyway, the list of reachable networks is unrelated to the list of local addresses. I do not think they should be grouped into one `struct` or protected by the same mutex.\r\n",
      "created_at": "2022-11-02T13:13:59Z",
      "updated_at": "2022-11-02T13:13:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#discussion_r1011745178",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1011745178"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 124,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1011820462",
      "pull_request_review_id": 1165317969,
      "id": 1011820462,
      "node_id": "PRRC_kwDOABII5848Tyeu",
      "diff_hunk": "@@ -397,4 +398,77 @@ class CSemaphoreGrant\n     }\n };\n \n+/**\n+ * A generic container that protects an owned object with a mutex.\n+ * This is like a mutex with an extension - owning an object of arbitrary type\n+ * and providing a dereference operation which gives access to the owned object\n+ * and transparently locks the mutex for the duration of the access. For example:\n+ *\n+ * @code{.cpp}\n+ * Synced<std::vector<int>> v{4, 5, 6};\n+ *\n+ * std::thread t1{[&v]() { SYNCED_LOCK(v, p); p->push_back(7); }};\n+ * std::thread t2{[&v]() { SYNCED_LOCK(v, p); p->push_back(8); }};\n+ *\n+ * SYNCED_LOCK(v, p);\n+ * const size_t size = p->size();\n+ * for (auto& i : *p) {\n+ *     i *= 10;\n+ * }\n+ * // The container will not be changed by another thread between the two size() calls.\n+ * assert(size == p->size());\n+ *\n+ * std::cout << (*p)[0] << std::endl;\n+ *\n+ * @endcode\n+ */\n+template <typename T>\n+class Synced\n+{\n+public:\n+    /**\n+     * Construct the container and its internal object of type T,\n+     * passing `args...` to T's constructor.\n+     */\n+    template <typename... Args>\n+    Synced(Args... args) : m_obj{args...}\n+    {\n+    }\n+\n+    /**\n+     * An auxiliary class that holds the parent locked for the duration of its\n+     * lifetime and provides access to the internal object.\n+     */\n+    class SCOPED_LOCKABLE Proxy : public ::UniqueLock<Mutex>\n+    {\n+    public:\n+        Proxy(Synced& parent LIFETIMEBOUND, const char* name, const char* file, int line)\n+            EXCLUSIVE_LOCK_FUNCTION(parent.m_mutex)\n+            : ::UniqueLock<Mutex>{parent.m_mutex, name, file, line}, m_parent{parent}\n+        {\n+        }\n+\n+        ~Proxy() UNLOCK_FUNCTION() {}\n+\n+        T& operator*() LIFETIMEBOUND { return m_parent.m_obj; }\n+\n+        T* operator->() LIFETIMEBOUND { return &m_parent.m_obj; }\n+\n+    private:\n+        Synced& m_parent;\n+    };\n+\n+protected:\n+    mutable Mutex m_mutex;\n+    T m_obj GUARDED_BY(m_mutex);\n+};\n+\n+#define SYNCED_LOCK(synced, name) decltype(synced)::Proxy name{synced, #synced, __FILE__, __LINE__}",
      "path": "src/sync.h",
      "position": 77,
      "original_position": 77,
      "commit_id": "92a444d0d73112d36abfa8875e73e26a06222891",
      "original_commit_id": "c6f1d58b0489c733b6029cca9a70606145155b32",
      "in_reply_to_id": 998164319,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "That does not compile on windows: https://cirrus-ci.com/task/4559637407072256?logs=build#L814 :-/\r\n\r\nIf you are ok with this, I will fall back to the 2-arg macro. Then the caller can pick the name depending on their preferences - `p`, `foo_proxy`, `foo_locked` or whatever.",
      "created_at": "2022-11-02T14:06:32Z",
      "updated_at": "2022-11-02T14:06:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#discussion_r1011820462",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1011820462"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 497,
      "original_line": 497,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1012389456",
      "pull_request_review_id": 1166137516,
      "id": 1012389456,
      "node_id": "PRRC_kwDOABII5848V9ZQ",
      "diff_hunk": "@@ -115,7 +117,10 @@ bool fDiscover = true;\n bool fListen = true;\n GlobalMutex g_maplocalhost_mutex;\n std::map<CNetAddr, LocalServiceInfo> mapLocalHost GUARDED_BY(g_maplocalhost_mutex);\n-static bool vfLimited[NET_MAX] GUARDED_BY(g_maplocalhost_mutex) = {};\n+\n+static Synced<std::unordered_set<Network>> g_reachable_networks{\n+    NET_UNROUTABLE, NET_IPV4, NET_IPV6, NET_ONION, NET_I2P, NET_CJDNS, NET_INTERNAL};\n+",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "92a444d0d73112d36abfa8875e73e26a06222891",
      "original_commit_id": "121bee1947f86ebab858cf016ae28ae6c11663ab",
      "in_reply_to_id": 998213646,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, it was an \"alternative .. to .. separate mutexes\". Mostly intended to show using this pattern doesn't require moving everything to a dedicated mutex if that's not desired. In this case, like I said \"hard to see it making much practical difference\" though.",
      "created_at": "2022-11-02T23:50:53Z",
      "updated_at": "2022-11-02T23:50:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#discussion_r1012389456",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1012389456"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 124,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1012393276",
      "pull_request_review_id": 1166142677,
      "id": 1012393276,
      "node_id": "PRRC_kwDOABII5848V-U8",
      "diff_hunk": "@@ -397,4 +398,77 @@ class CSemaphoreGrant\n     }\n };\n \n+/**\n+ * A generic container that protects an owned object with a mutex.\n+ * This is like a mutex with an extension - owning an object of arbitrary type\n+ * and providing a dereference operation which gives access to the owned object\n+ * and transparently locks the mutex for the duration of the access. For example:\n+ *\n+ * @code{.cpp}\n+ * Synced<std::vector<int>> v{4, 5, 6};\n+ *\n+ * std::thread t1{[&v]() { SYNCED_LOCK(v, p); p->push_back(7); }};\n+ * std::thread t2{[&v]() { SYNCED_LOCK(v, p); p->push_back(8); }};\n+ *\n+ * SYNCED_LOCK(v, p);\n+ * const size_t size = p->size();\n+ * for (auto& i : *p) {\n+ *     i *= 10;\n+ * }\n+ * // The container will not be changed by another thread between the two size() calls.\n+ * assert(size == p->size());\n+ *\n+ * std::cout << (*p)[0] << std::endl;\n+ *\n+ * @endcode\n+ */\n+template <typename T>\n+class Synced\n+{\n+public:\n+    /**\n+     * Construct the container and its internal object of type T,\n+     * passing `args...` to T's constructor.\n+     */\n+    template <typename... Args>\n+    Synced(Args... args) : m_obj{args...}\n+    {\n+    }\n+\n+    /**\n+     * An auxiliary class that holds the parent locked for the duration of its\n+     * lifetime and provides access to the internal object.\n+     */\n+    class SCOPED_LOCKABLE Proxy : public ::UniqueLock<Mutex>\n+    {\n+    public:\n+        Proxy(Synced& parent LIFETIMEBOUND, const char* name, const char* file, int line)\n+            EXCLUSIVE_LOCK_FUNCTION(parent.m_mutex)\n+            : ::UniqueLock<Mutex>{parent.m_mutex, name, file, line}, m_parent{parent}\n+        {\n+        }\n+\n+        ~Proxy() UNLOCK_FUNCTION() {}\n+\n+        T& operator*() LIFETIMEBOUND { return m_parent.m_obj; }\n+\n+        T* operator->() LIFETIMEBOUND { return &m_parent.m_obj; }\n+\n+    private:\n+        Synced& m_parent;\n+    };\n+\n+protected:\n+    mutable Mutex m_mutex;\n+    T m_obj GUARDED_BY(m_mutex);\n+};\n+\n+#define SYNCED_LOCK(synced, name) decltype(synced)::Proxy name{synced, #synced, __FILE__, __LINE__}",
      "path": "src/sync.h",
      "position": 77,
      "original_position": 77,
      "commit_id": "92a444d0d73112d36abfa8875e73e26a06222891",
      "original_commit_id": "c6f1d58b0489c733b6029cca9a70606145155b32",
      "in_reply_to_id": 998164319,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "If you want naming it to be optional, probably better to have different macros, same as `LOCK(m)` and `WAIT_LOCK(m,g)`. I'm not really sure what I prefer here.",
      "created_at": "2022-11-03T00:00:19Z",
      "updated_at": "2022-11-03T00:00:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#discussion_r1012393276",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1012393276"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 497,
      "original_line": 497,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1016616242",
      "pull_request_review_id": 1172097338,
      "id": 1016616242,
      "node_id": "PRRC_kwDOABII5848mFUy",
      "diff_hunk": "@@ -115,7 +117,10 @@ bool fDiscover = true;\n bool fListen = true;\n GlobalMutex g_maplocalhost_mutex;\n std::map<CNetAddr, LocalServiceInfo> mapLocalHost GUARDED_BY(g_maplocalhost_mutex);\n-static bool vfLimited[NET_MAX] GUARDED_BY(g_maplocalhost_mutex) = {};\n+\n+static Synced<std::unordered_set<Network>> g_reachable_networks{\n+    NET_UNROUTABLE, NET_IPV4, NET_IPV6, NET_ONION, NET_I2P, NET_CJDNS, NET_INTERNAL};\n+",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "92a444d0d73112d36abfa8875e73e26a06222891",
      "original_commit_id": "121bee1947f86ebab858cf016ae28ae6c11663ab",
      "in_reply_to_id": 998213646,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ok, I am leaving it as it is and marking this as resolved. I think it is natural to guard unrelated things with separate mutexes.",
      "created_at": "2022-11-08T13:12:33Z",
      "updated_at": "2022-11-08T13:12:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#discussion_r1016616242",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1016616242"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 124,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1016618877",
      "pull_request_review_id": 1172101345,
      "id": 1016618877,
      "node_id": "PRRC_kwDOABII5848mF99",
      "diff_hunk": "@@ -397,4 +398,77 @@ class CSemaphoreGrant\n     }\n };\n \n+/**\n+ * A generic container that protects an owned object with a mutex.\n+ * This is like a mutex with an extension - owning an object of arbitrary type\n+ * and providing a dereference operation which gives access to the owned object\n+ * and transparently locks the mutex for the duration of the access. For example:\n+ *\n+ * @code{.cpp}\n+ * Synced<std::vector<int>> v{4, 5, 6};\n+ *\n+ * std::thread t1{[&v]() { SYNCED_LOCK(v, p); p->push_back(7); }};\n+ * std::thread t2{[&v]() { SYNCED_LOCK(v, p); p->push_back(8); }};\n+ *\n+ * SYNCED_LOCK(v, p);\n+ * const size_t size = p->size();\n+ * for (auto& i : *p) {\n+ *     i *= 10;\n+ * }\n+ * // The container will not be changed by another thread between the two size() calls.\n+ * assert(size == p->size());\n+ *\n+ * std::cout << (*p)[0] << std::endl;\n+ *\n+ * @endcode\n+ */\n+template <typename T>\n+class Synced\n+{\n+public:\n+    /**\n+     * Construct the container and its internal object of type T,\n+     * passing `args...` to T's constructor.\n+     */\n+    template <typename... Args>\n+    Synced(Args... args) : m_obj{args...}\n+    {\n+    }\n+\n+    /**\n+     * An auxiliary class that holds the parent locked for the duration of its\n+     * lifetime and provides access to the internal object.\n+     */\n+    class SCOPED_LOCKABLE Proxy : public ::UniqueLock<Mutex>\n+    {\n+    public:\n+        Proxy(Synced& parent LIFETIMEBOUND, const char* name, const char* file, int line)\n+            EXCLUSIVE_LOCK_FUNCTION(parent.m_mutex)\n+            : ::UniqueLock<Mutex>{parent.m_mutex, name, file, line}, m_parent{parent}\n+        {\n+        }\n+\n+        ~Proxy() UNLOCK_FUNCTION() {}\n+\n+        T& operator*() LIFETIMEBOUND { return m_parent.m_obj; }\n+\n+        T* operator->() LIFETIMEBOUND { return &m_parent.m_obj; }\n+\n+    private:\n+        Synced& m_parent;\n+    };\n+\n+protected:\n+    mutable Mutex m_mutex;\n+    T m_obj GUARDED_BY(m_mutex);\n+};\n+\n+#define SYNCED_LOCK(synced, name) decltype(synced)::Proxy name{synced, #synced, __FILE__, __LINE__}",
      "path": "src/sync.h",
      "position": 77,
      "original_position": 77,
      "commit_id": "92a444d0d73112d36abfa8875e73e26a06222891",
      "original_commit_id": "c6f1d58b0489c733b6029cca9a70606145155b32",
      "in_reply_to_id": 998164319,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I went back to what it was before - `SYNCED_LOCK(object, name)`. The 1-arg macro was used in just one place and it did not compile on windows, not worth it. By selecting the name the caller can choose whether to use a short one for small scopes of a few lines, or a longer and more descriptive one for bigger scopes.",
      "created_at": "2022-11-08T13:15:05Z",
      "updated_at": "2022-11-08T13:15:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#discussion_r1016618877",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1016618877"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 497,
      "original_line": 497,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1017546338",
      "pull_request_review_id": 1173494530,
      "id": 1017546338,
      "node_id": "PRRC_kwDOABII5848poZi",
      "diff_hunk": "@@ -115,7 +117,10 @@ bool fDiscover = true;\n bool fListen = true;\n GlobalMutex g_maplocalhost_mutex;\n std::map<CNetAddr, LocalServiceInfo> mapLocalHost GUARDED_BY(g_maplocalhost_mutex);\n-static bool vfLimited[NET_MAX] GUARDED_BY(g_maplocalhost_mutex) = {};\n+\n+static Synced<std::unordered_set<Network>> g_reachable_networks{\n+    NET_UNROUTABLE, NET_IPV4, NET_IPV6, NET_ONION, NET_I2P, NET_CJDNS, NET_INTERNAL};",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 23,
      "commit_id": "92a444d0d73112d36abfa8875e73e26a06222891",
      "original_commit_id": "121bee1947f86ebab858cf016ae28ae6c11663ab",
      "in_reply_to_id": 998202653,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "enums are sequential and automatically start at 0; and `NET_MAX` is added for precisely that purpose. That's the way these things are designed to be used, it's not hackish or a bad smell...",
      "created_at": "2022-11-09T07:48:35Z",
      "updated_at": "2022-11-09T07:48:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#discussion_r1017546338",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1017546338"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 125,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1020279585",
      "pull_request_review_id": 1177431099,
      "id": 1020279585,
      "node_id": "PRRC_kwDOABII58480Dsh",
      "diff_hunk": "@@ -115,7 +117,10 @@ bool fDiscover = true;\n bool fListen = true;\n GlobalMutex g_maplocalhost_mutex;\n std::map<CNetAddr, LocalServiceInfo> mapLocalHost GUARDED_BY(g_maplocalhost_mutex);\n-static bool vfLimited[NET_MAX] GUARDED_BY(g_maplocalhost_mutex) = {};\n+\n+static Synced<std::unordered_set<Network>> g_reachable_networks{\n+    NET_UNROUTABLE, NET_IPV4, NET_IPV6, NET_ONION, NET_I2P, NET_CJDNS, NET_INTERNAL};",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 23,
      "commit_id": "92a444d0d73112d36abfa8875e73e26a06222891",
      "original_commit_id": "121bee1947f86ebab858cf016ae28ae6c11663ab",
      "in_reply_to_id": 998202653,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I disagree, but that discussion is for another PR. I reverted it back to what it is in `master` - an array of `bool`s.",
      "created_at": "2022-11-11T14:43:04Z",
      "updated_at": "2022-11-11T14:43:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#discussion_r1020279585",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1020279585"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 125,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1170236041",
      "pull_request_review_id": 1390434676,
      "id": 1170236041,
      "node_id": "PRRC_kwDOABII585FwGKJ",
      "diff_hunk": "@@ -115,9 +116,14 @@ static const uint64_t RANDOMIZER_ID_ADDRCACHE = 0x1cf2e4ddd306dda9ULL; // SHA256\n //\n bool fDiscover = true;\n bool fListen = true;\n-GlobalMutex g_maplocalhost_mutex;\n-std::map<CNetAddr, LocalServiceInfo> mapLocalHost GUARDED_BY(g_maplocalhost_mutex);\n-static bool vfLimited[NET_MAX] GUARDED_BY(g_maplocalhost_mutex) = {};\n+\n+/**\n+ * The local network addresses of this node.\n+ */\n+Synced<std::map<CNetAddr, LocalServiceInfo>> g_my_net_addr;",
      "path": "src/net.cpp",
      "position": 10,
      "original_position": 19,
      "commit_id": "92a444d0d73112d36abfa8875e73e26a06222891",
      "original_commit_id": "ebfe47e5942fa5e0ce21b44511258b6dfa4cf621",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "a49907318fff6d Naming nit, would this be better plural i.e. `g_my_net_addrs`, `g_local_addrs` or `g_my_local_addrs`?",
      "created_at": "2023-04-18T15:46:01Z",
      "updated_at": "2023-04-18T16:09:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#discussion_r1170236041",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1170236041"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 120,
      "original_line": 120,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1170240470",
      "pull_request_review_id": 1390434676,
      "id": 1170240470,
      "node_id": "PRRC_kwDOABII585FwHPW",
      "diff_hunk": "@@ -318,23 +323,20 @@ bool AddLocal(const CNetAddr &addr, int nScore)\n \n void RemoveLocal(const CService& addr)\n {\n-    LOCK(g_maplocalhost_mutex);\n     LogPrintf(\"RemoveLocal(%s)\\n\", addr.ToStringAddrPort());\n-    mapLocalHost.erase(addr);\n+    WITH_SYNCED_LOCK(g_my_net_addr, p, p->erase(addr));",
      "path": "src/net.cpp",
      "position": 57,
      "original_position": 69,
      "commit_id": "92a444d0d73112d36abfa8875e73e26a06222891",
      "original_commit_id": "ebfe47e5942fa5e0ce21b44511258b6dfa4cf621",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Style nit, unsure, would it be a good idea to use named args in the `WITH_SYNCED_LOCK` and `SYNCED_LOCK` calls? More verbose but more clear, though it's not too non-intuitive.\r\n\r\n```suggestion\r\n    WITH_SYNCED_LOCK(g_my_net_addr, /*name=*/p, /*code=*/p->erase(addr));\r\n```",
      "created_at": "2023-04-18T15:48:44Z",
      "updated_at": "2023-04-18T16:22:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#discussion_r1170240470",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1170240470"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 313,
      "original_line": 313,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1170242796",
      "pull_request_review_id": 1390434676,
      "id": 1170242796,
      "node_id": "PRRC_kwDOABII585FwHzs",
      "diff_hunk": "@@ -660,13 +660,12 @@ static RPCHelpMan getnetworkinfo()\n     }\n     UniValue localAddresses(UniValue::VARR);\n     {\n-        LOCK(g_maplocalhost_mutex);\n-        for (const std::pair<const CNetAddr, LocalServiceInfo> &item : mapLocalHost)\n-        {\n+        SYNCED_LOCK(g_my_net_addr, p);\n+        for (const auto& [addr, service_info] : *p) {",
      "path": "src/rpc/net.cpp",
      "position": 8,
      "original_position": 8,
      "commit_id": "92a444d0d73112d36abfa8875e73e26a06222891",
      "original_commit_id": "ebfe47e5942fa5e0ce21b44511258b6dfa4cf621",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Nice cleanup.",
      "created_at": "2023-04-18T15:50:07Z",
      "updated_at": "2023-04-18T16:09:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#discussion_r1170242796",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1170242796"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 680,
      "original_line": 680,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1170250884",
      "pull_request_review_id": 1390434676,
      "id": 1170250884,
      "node_id": "PRRC_kwDOABII585FwJyE",
      "diff_hunk": "@@ -397,4 +398,77 @@ class CSemaphoreGrant\n     }\n };\n \n+/**\n+ * A generic container that protects an owned object with a mutex.\n+ * This is like a mutex with an extension - owning an object of arbitrary type\n+ * and providing a dereference operation which gives access to the owned object\n+ * and transparently locks the mutex for the duration of the access. For example:\n+ *\n+ * @code{.cpp}\n+ * Synced<std::vector<int>> v{4, 5, 6};\n+ *\n+ * std::thread t1{[&v]() { WITH_SYNCED_LOCK(v, p, p->push_back(7); }};\n+ * std::thread t2{[&v]() { WITH_SYNCED_LOCK(v, p, p->push_back(8); }};\n+ *\n+ * SYNCED_LOCK(v, v_locked);\n+ * const size_t size = v_locked->size();\n+ * for (auto& i : *v_locked) {\n+ *     i *= 10;\n+ * }\n+ * // The container will not be changed by another thread between the two size() calls.\n+ * assert(size == v_locked->size());\n+ *\n+ * std::cout << (*v_locked)[0] << std::endl;\n+ *\n+ * @endcode\n+ */\n+template <typename T>\n+class Synced\n+{\n+public:\n+    /**\n+     * Construct the container and its internal object of type T,\n+     * passing `args...` to T's constructor.\n+     */\n+    template <typename... Args>\n+    Synced(Args... args) : m_obj{args...}\n+    {\n+    }\n+\n+    /**\n+     * An auxiliary class that holds the parent locked for the duration of its\n+     * lifetime and provides access to the internal object.\n+     */\n+    class SCOPED_LOCKABLE Proxy : public ::UniqueLock<Mutex>\n+    {\n+    public:\n+        Proxy(Synced& parent LIFETIMEBOUND, const char* name, const char* file, int line)\n+            EXCLUSIVE_LOCK_FUNCTION(parent.m_mutex)\n+            : ::UniqueLock<Mutex>{parent.m_mutex, name, file, line}, m_parent{parent}\n+        {\n+        }\n+\n+        ~Proxy() UNLOCK_FUNCTION() {}\n+\n+        T& operator*() LIFETIMEBOUND { return m_parent.m_obj; }\n+\n+        T* operator->() LIFETIMEBOUND { return &m_parent.m_obj; }\n+\n+    private:\n+        Synced& m_parent;\n+    };\n+\n+protected:\n+    mutable Mutex m_mutex;\n+    T m_obj GUARDED_BY(m_mutex);\n+};\n+\n+#define SYNCED_LOCK(synced, name) decltype(synced)::Proxy name{synced, #synced, __FILE__, __LINE__}",
      "path": "src/sync.h",
      "position": 77,
      "original_position": 77,
      "commit_id": "92a444d0d73112d36abfa8875e73e26a06222891",
      "original_commit_id": "ebfe47e5942fa5e0ce21b44511258b6dfa4cf621",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "373df61bc56 Style nit, unsure, would something like `local_instance` or `local_name` read better than `name` if callers use named args? Feel free to ignore.",
      "created_at": "2023-04-18T15:54:57Z",
      "updated_at": "2023-04-18T16:09:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#discussion_r1170250884",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1170250884"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 497,
      "original_line": 497,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1170892009",
      "pull_request_review_id": 1391381278,
      "id": 1170892009,
      "node_id": "PRRC_kwDOABII585FymTp",
      "diff_hunk": "@@ -318,23 +323,20 @@ bool AddLocal(const CNetAddr &addr, int nScore)\n \n void RemoveLocal(const CService& addr)\n {\n-    LOCK(g_maplocalhost_mutex);\n     LogPrintf(\"RemoveLocal(%s)\\n\", addr.ToStringAddrPort());\n-    mapLocalHost.erase(addr);\n+    WITH_SYNCED_LOCK(g_my_net_addr, p, p->erase(addr));",
      "path": "src/net.cpp",
      "position": 57,
      "original_position": 69,
      "commit_id": "92a444d0d73112d36abfa8875e73e26a06222891",
      "original_commit_id": "ebfe47e5942fa5e0ce21b44511258b6dfa4cf621",
      "in_reply_to_id": 1170240470,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think that's a bit too verbose.",
      "created_at": "2023-04-19T07:02:21Z",
      "updated_at": "2023-04-19T07:02:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#discussion_r1170892009",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1170892009"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 313,
      "original_line": 313,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1170894501",
      "pull_request_review_id": 1391385235,
      "id": 1170894501,
      "node_id": "PRRC_kwDOABII585Fym6l",
      "diff_hunk": "@@ -397,4 +398,77 @@ class CSemaphoreGrant\n     }\n };\n \n+/**\n+ * A generic container that protects an owned object with a mutex.\n+ * This is like a mutex with an extension - owning an object of arbitrary type\n+ * and providing a dereference operation which gives access to the owned object\n+ * and transparently locks the mutex for the duration of the access. For example:\n+ *\n+ * @code{.cpp}\n+ * Synced<std::vector<int>> v{4, 5, 6};\n+ *\n+ * std::thread t1{[&v]() { WITH_SYNCED_LOCK(v, p, p->push_back(7); }};\n+ * std::thread t2{[&v]() { WITH_SYNCED_LOCK(v, p, p->push_back(8); }};\n+ *\n+ * SYNCED_LOCK(v, v_locked);\n+ * const size_t size = v_locked->size();\n+ * for (auto& i : *v_locked) {\n+ *     i *= 10;\n+ * }\n+ * // The container will not be changed by another thread between the two size() calls.\n+ * assert(size == v_locked->size());\n+ *\n+ * std::cout << (*v_locked)[0] << std::endl;\n+ *\n+ * @endcode\n+ */\n+template <typename T>\n+class Synced\n+{\n+public:\n+    /**\n+     * Construct the container and its internal object of type T,\n+     * passing `args...` to T's constructor.\n+     */\n+    template <typename... Args>\n+    Synced(Args... args) : m_obj{args...}\n+    {\n+    }\n+\n+    /**\n+     * An auxiliary class that holds the parent locked for the duration of its\n+     * lifetime and provides access to the internal object.\n+     */\n+    class SCOPED_LOCKABLE Proxy : public ::UniqueLock<Mutex>\n+    {\n+    public:\n+        Proxy(Synced& parent LIFETIMEBOUND, const char* name, const char* file, int line)\n+            EXCLUSIVE_LOCK_FUNCTION(parent.m_mutex)\n+            : ::UniqueLock<Mutex>{parent.m_mutex, name, file, line}, m_parent{parent}\n+        {\n+        }\n+\n+        ~Proxy() UNLOCK_FUNCTION() {}\n+\n+        T& operator*() LIFETIMEBOUND { return m_parent.m_obj; }\n+\n+        T* operator->() LIFETIMEBOUND { return &m_parent.m_obj; }\n+\n+    private:\n+        Synced& m_parent;\n+    };\n+\n+protected:\n+    mutable Mutex m_mutex;\n+    T m_obj GUARDED_BY(m_mutex);\n+};\n+\n+#define SYNCED_LOCK(synced, name) decltype(synced)::Proxy name{synced, #synced, __FILE__, __LINE__}",
      "path": "src/sync.h",
      "position": 77,
      "original_position": 77,
      "commit_id": "92a444d0d73112d36abfa8875e73e26a06222891",
      "original_commit_id": "ebfe47e5942fa5e0ce21b44511258b6dfa4cf621",
      "in_reply_to_id": 1170250884,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Named args at call sites look too verbose to me and here a short `name` is ok because the scope if very limited - only used on one line.",
      "created_at": "2023-04-19T07:05:09Z",
      "updated_at": "2023-04-19T07:05:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25390#discussion_r1170894501",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1170894501"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25390"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 497,
      "original_line": 497,
      "side": "RIGHT"
    }
  ]
}