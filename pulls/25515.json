{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25515",
    "id": 984143455,
    "node_id": "PR_kwDOABII5846qNZf",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/25515",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/25515.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/25515.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25515",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25515/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25515/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25515/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/9c04c32101cd458c336de1d66ad296dc7f1cf35d",
    "number": 25515,
    "state": "closed",
    "locked": false,
    "maintainer_can_modify": false,
    "title": "net, test: Virtualise CConnman and add initial PeerManager unit tests",
    "user": {
      "login": "dergoegge",
      "id": 8077169,
      "node_id": "MDQ6VXNlcjgwNzcxNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dergoegge",
      "html_url": "https://github.com/dergoegge",
      "followers_url": "https://api.github.com/users/dergoegge/followers",
      "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
      "organizations_url": "https://api.github.com/users/dergoegge/orgs",
      "repos_url": "https://api.github.com/users/dergoegge/repos",
      "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/dergoegge/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This PR creates an abstract `ConnectionsInterface` class that is used as an interface for interacting with the connection manager. The `PeerManager` is made to hold a reference to a `ConnectionsInterface` instead of `CConnman`, which makes it possible for us to mock the connection manager in the newly introduced `PeerManager` unit tests. Two initial unit tests are added for the version handshake and ping/pong logic.",
    "labels": [
      {
        "id": 98298007,
        "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
        "name": "P2P",
        "color": "006b75",
        "default": false
      },
      {
        "id": 955867938,
        "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
        "name": "Needs rebase",
        "description": "",
        "color": "cccccc",
        "default": false
      }
    ],
    "created_at": "2022-06-30T18:04:58Z",
    "updated_at": "2023-08-10T14:23:29Z",
    "closed_at": "2023-08-10T14:23:28Z",
    "mergeable": false,
    "mergeable_state": "dirty",
    "merge_commit_sha": "a99eb00855d762f2f466432d738c2fc40290b2fb",
    "assignees": [],
    "requested_reviewers": [
      {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "requested_teams": [],
    "rebaseable": false,
    "head": {
      "label": "dergoegge:2022-06-virt-connman",
      "ref": "2022-06-virt-connman",
      "sha": "9c04c32101cd458c336de1d66ad296dc7f1cf35d",
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 315023492,
        "node_id": "MDEwOlJlcG9zaXRvcnkzMTUwMjM0OTI=",
        "name": "bitcoin",
        "full_name": "dergoegge/bitcoin",
        "owner": {
          "login": "dergoegge",
          "id": 8077169,
          "node_id": "MDQ6VXNlcjgwNzcxNjk=",
          "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/dergoegge",
          "html_url": "https://github.com/dergoegge",
          "followers_url": "https://api.github.com/users/dergoegge/followers",
          "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
          "organizations_url": "https://api.github.com/users/dergoegge/orgs",
          "repos_url": "https://api.github.com/users/dergoegge/repos",
          "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/dergoegge/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/dergoegge/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/dergoegge/bitcoin",
        "archive_url": "https://api.github.com/repos/dergoegge/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/dergoegge/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/dergoegge/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/dergoegge/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/dergoegge/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/dergoegge/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/dergoegge/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/dergoegge/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/dergoegge/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/dergoegge/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/dergoegge/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/dergoegge/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/dergoegge/bitcoin/events",
        "forks_url": "https://api.github.com/repos/dergoegge/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/dergoegge/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/dergoegge/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/dergoegge/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/dergoegge/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/dergoegge/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/dergoegge/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/dergoegge/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/dergoegge/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/dergoegge/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/dergoegge/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/dergoegge/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/dergoegge/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/dergoegge/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/dergoegge/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/dergoegge/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:dergoegge/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/dergoegge/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/dergoegge/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/dergoegge/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/dergoegge/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/dergoegge/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/dergoegge/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/dergoegge/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/dergoegge/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/dergoegge/bitcoin/hooks",
        "svn_url": "https://github.com/dergoegge/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 0,
        "stargazers_count": 1,
        "watchers_count": 1,
        "size": 224640,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-08-09T11:02:38Z",
        "created_at": "2020-11-22T11:41:30Z",
        "updated_at": "2023-05-05T12:10:28Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "6d4048468430d9d1fe5e7c5fcda13708879d1083",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 35488,
        "stargazers_count": 70691,
        "watchers_count": 70691,
        "size": 236413,
        "default_branch": "master",
        "open_issues_count": 679,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-08-10T14:56:04Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-08-10T14:43:00Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25515"
      }
    },
    "author_association": "MEMBER",
    "draft": true,
    "additions": 397,
    "deletions": 67,
    "changed_files": 5,
    "commits": 4,
    "review_comments": 25,
    "comments": 12
  },
  "events": [
    {
      "event": "labeled",
      "id": 6912967288,
      "node_id": "LE_lADOABII585M6xw_zwAAAAGcC4J4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6912967288",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-30T18:05:13Z",
      "label": {
        "name": "P2P",
        "color": "006b75"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-30T18:05:32Z",
      "updated_at": "2022-06-30T18:05:32Z",
      "source": {
        "issue": {
          "id": 1290473405,
          "node_id": "PR_kwDOABII5846qMtw",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25514",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25514/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25514/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25514/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/25514",
          "number": 25514,
          "state": "closed",
          "state_reason": null,
          "title": "net processing: Move CNode::nServices and CNode::nLocalServices to Peer",
          "body": "Another step in #19398. Which services we offer to a peer and which services they offer to us is application layer data and should not be stored on `CNode`.\r\n\r\nThis is also a prerequisite for adding `PeerManager` unit tests (See #25515).",
          "user": {
            "login": "dergoegge",
            "id": 8077169,
            "node_id": "MDQ6VXNlcjgwNzcxNjk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dergoegge",
            "html_url": "https://github.com/dergoegge",
            "followers_url": "https://api.github.com/users/dergoegge/followers",
            "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
            "organizations_url": "https://api.github.com/users/dergoegge/orgs",
            "repos_url": "https://api.github.com/users/dergoegge/repos",
            "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/dergoegge/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 98298007,
              "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
              "name": "P2P",
              "color": "006b75",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "comments": 8,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25514",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/25514",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/25514.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/25514.patch"
          },
          "closed_at": "2022-07-19T06:33:58Z",
          "created_at": "2022-06-30T18:01:24Z",
          "updated_at": "2023-07-25T10:16:36Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 1171614818,
      "node_id": "IC_kwDOABII585F1Wxi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1171614818",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-30T19:50:44Z",
      "updated_at": "2023-04-19T16:12:26Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| ACK | [rajarshimaitra](https://github.com/bitcoin/bitcoin/pull/25515#pullrequestreview-1152333262) |\n| Concept ACK | [jnewbery](https://github.com/bitcoin/bitcoin/pull/25515#issuecomment-1173474399), [jamesob](https://github.com/bitcoin/bitcoin/pull/25515#issuecomment-1175229773), [naumenkogs](https://github.com/bitcoin/bitcoin/pull/25515#issuecomment-1226927000), [fanquake](https://github.com/bitcoin/bitcoin/pull/25515#issuecomment-1266933218), [theStack](https://github.com/bitcoin/bitcoin/pull/25515#issuecomment-1279056559), [hernanmarino](https://github.com/bitcoin/bitcoin/pull/25515#pullrequestreview-1190434606), [pablomartin4btc](https://github.com/bitcoin/bitcoin/pull/25515#pullrequestreview-1190475886), [jonatack](https://github.com/bitcoin/bitcoin/pull/25515#issuecomment-1515003669) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#26837](https://github.com/bitcoin/bitcoin/pull/26837) (I2P network optimizations by vasild)\n* [#26441](https://github.com/bitcoin/bitcoin/pull/26441) (rpc, p2p: add `addpermissionflags` RPC and allow whitelisting outbound by brunoerg)\n* [#25572](https://github.com/bitcoin/bitcoin/pull/25572) (refactor: Introduce EvictionManager and use it for the inbound eviction logic by dergoegge)\n* [#25268](https://github.com/bitcoin/bitcoin/pull/25268) (refactor: Introduce EvictionManager by dergoegge)\n* [#24748](https://github.com/bitcoin/bitcoin/pull/24748) (test/BIP324: functional tests for v2 P2P encryption by stratospher)\n* [#24545](https://github.com/bitcoin/bitcoin/pull/24545) (BIP324: Enable v2 P2P encrypted transport by dhruv)\n* [#24170](https://github.com/bitcoin/bitcoin/pull/24170) (p2p, rpc: Manual block-relay-only connections with addnode by mzumsande)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25515#issuecomment-1171614818",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25515"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-30T20:25:30Z",
      "updated_at": "2022-06-30T20:25:30Z",
      "source": {
        "issue": {
          "id": 1284565812,
          "node_id": "PR_kwDOABII5846WpgA",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25472",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25472/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25472/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25472/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/25472",
          "number": 25472,
          "state": "closed",
          "state_reason": null,
          "title": "build: Increase MS Visual Studio minimum version",
          "body": "Visual Studio 2022 with `/std:c++20` supports [designated initializers](https://github.com/bitcoin/bitcoin/pull/24531).",
          "user": {
            "login": "hebasto",
            "id": 32963518,
            "node_id": "MDQ6VXNlcjMyOTYzNTE4",
            "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hebasto",
            "html_url": "https://github.com/hebasto",
            "followers_url": "https://api.github.com/users/hebasto/followers",
            "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
            "organizations_url": "https://api.github.com/users/hebasto/orgs",
            "repos_url": "https://api.github.com/users/hebasto/repos",
            "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/hebasto/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "milestone": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/54",
            "html_url": "https://github.com/bitcoin/bitcoin/milestone/54",
            "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/54/labels",
            "id": 7150037,
            "node_id": "MI_kwDOABII584AbRnV",
            "number": 54,
            "state": "closed",
            "title": "24.0",
            "description": "",
            "creator": {
              "login": "laanwj",
              "id": 126646,
              "node_id": "MDQ6VXNlcjEyNjY0Ng==",
              "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/laanwj",
              "html_url": "https://github.com/laanwj",
              "followers_url": "https://api.github.com/users/laanwj/followers",
              "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
              "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
              "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
              "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
              "organizations_url": "https://api.github.com/users/laanwj/orgs",
              "repos_url": "https://api.github.com/users/laanwj/repos",
              "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
              "received_events_url": "https://api.github.com/users/laanwj/received_events",
              "type": "User",
              "site_admin": false
            },
            "open_issues": 0,
            "closed_issues": 159,
            "created_at": "2021-09-14T08:27:02Z",
            "updated_at": "2022-11-29T15:44:44Z",
            "closed_at": "2022-11-29T15:44:44Z"
          },
          "locked": false,
          "comments": 21,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25472",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/25472",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/25472.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/25472.patch"
          },
          "closed_at": "2022-07-13T15:18:56Z",
          "created_at": "2022-06-25T12:01:16Z",
          "updated_at": "2023-02-13T19:41:03Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-30T20:38:38Z",
      "updated_at": "2022-06-30T20:38:38Z",
      "source": {
        "issue": {
          "id": 1280835519,
          "node_id": "PR_kwDOABII5846KHb5",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25454",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25454/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25454/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25454/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/25454",
          "number": 25454,
          "state": "closed",
          "state_reason": null,
          "title": "p2p: Avoid multiple getheaders messages in flight to the same peer",
          "body": "Change `getheaders` messages so that we wait up to 2 minutes for a response to a prior `getheaders` message before issuing a new one.\r\n\r\nAlso change the handling of the `getheaders` message sent in response to a block INV, so that we no longer use the hashstop variable (including the hash stop will just mean that if our peer's headers chain is longer, then we won't learn\r\nit, so there's no benefit to using hashstop).\r\n\r\nAlso, now respond to a `getheaders` during IBD with an empty headers message (rather than nothing) -- this better conforms to the intent of the new logic that it's better to not ignore a peer's `getheaders` message, even if you have nothing to give. This also avoids a lot of functional tests breaking.\r\n\r\nThis PR also reworks the headers processing logic to make it more readable.",
          "user": {
            "login": "sdaftuar",
            "id": 7463573,
            "node_id": "MDQ6VXNlcjc0NjM1NzM=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sdaftuar",
            "html_url": "https://github.com/sdaftuar",
            "followers_url": "https://api.github.com/users/sdaftuar/followers",
            "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
            "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
            "repos_url": "https://api.github.com/users/sdaftuar/repos",
            "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 98298007,
              "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
              "name": "P2P",
              "color": "006b75",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "milestone": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/54",
            "html_url": "https://github.com/bitcoin/bitcoin/milestone/54",
            "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/54/labels",
            "id": 7150037,
            "node_id": "MI_kwDOABII584AbRnV",
            "number": 54,
            "state": "closed",
            "title": "24.0",
            "description": "",
            "creator": {
              "login": "laanwj",
              "id": 126646,
              "node_id": "MDQ6VXNlcjEyNjY0Ng==",
              "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/laanwj",
              "html_url": "https://github.com/laanwj",
              "followers_url": "https://api.github.com/users/laanwj/followers",
              "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
              "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
              "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
              "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
              "organizations_url": "https://api.github.com/users/laanwj/orgs",
              "repos_url": "https://api.github.com/users/laanwj/repos",
              "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
              "received_events_url": "https://api.github.com/users/laanwj/received_events",
              "type": "User",
              "site_admin": false
            },
            "open_issues": 0,
            "closed_issues": 159,
            "created_at": "2021-09-14T08:27:02Z",
            "updated_at": "2022-11-29T15:44:44Z",
            "closed_at": "2022-11-29T15:44:44Z"
          },
          "locked": false,
          "comments": 9,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/25454",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/25454.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/25454.patch"
          },
          "closed_at": "2022-07-04T20:28:46Z",
          "created_at": "2022-06-22T20:25:22Z",
          "updated_at": "2023-03-30T11:04:55Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-30T21:03:30Z",
      "updated_at": "2022-06-30T21:03:30Z",
      "source": {
        "issue": {
          "id": 1269088229,
          "node_id": "PR_kwDOABII5845izNn",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25355",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25355/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25355/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25355/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/25355",
          "number": 25355,
          "state": "closed",
          "state_reason": null,
          "title": "I2P: add support for transient addresses for outbound connections",
          "body": "Add support for generating a transient, one-time I2P address for ourselves when making I2P outbound connection and discard it once the connection is closed.\r\n\r\nBackground\r\n---\r\nIn I2P connections, the host that receives the connection knows the I2P address of the connection initiator. This is unlike the Tor network where the recipient does not know who is connecting to them, not even the initiator's Tor address.\r\n\r\nPersistent vs transient I2P addresses\r\n---\r\nEven if an I2P node is not accepting incoming connections, they are known to other nodes by their outgoing I2P address. This creates an opportunity to white-list given nodes or treat them differently based on their I2P address. However, this also creates an opportunity to fingerprint or analyze a given node because it always uses the same I2P address when it connects to other nodes. Thus, if a node is not accepting incoming I2P connections (`-i2pacceptincoming=0`) we will generate a transient (disposable), one-time I2P address for each new outgoing connection. That address is never going to be reused again, not even if reconnecting to the same peer later. If `-i2pacceptincoming=1` is used then we will use the persistent listening address for outgoing connections and will advertise it to the peers we connect to (like before this PR).",
          "user": {
            "login": "vasild",
            "id": 266751,
            "node_id": "MDQ6VXNlcjI2Njc1MQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vasild",
            "html_url": "https://github.com/vasild",
            "followers_url": "https://api.github.com/users/vasild/followers",
            "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
            "organizations_url": "https://api.github.com/users/vasild/orgs",
            "repos_url": "https://api.github.com/users/vasild/repos",
            "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/vasild/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 98298007,
              "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
              "name": "P2P",
              "color": "006b75",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "milestone": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/54",
            "html_url": "https://github.com/bitcoin/bitcoin/milestone/54",
            "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/54/labels",
            "id": 7150037,
            "node_id": "MI_kwDOABII584AbRnV",
            "number": 54,
            "state": "closed",
            "title": "24.0",
            "description": "",
            "creator": {
              "login": "laanwj",
              "id": 126646,
              "node_id": "MDQ6VXNlcjEyNjY0Ng==",
              "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/laanwj",
              "html_url": "https://github.com/laanwj",
              "followers_url": "https://api.github.com/users/laanwj/followers",
              "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
              "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
              "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
              "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
              "organizations_url": "https://api.github.com/users/laanwj/orgs",
              "repos_url": "https://api.github.com/users/laanwj/repos",
              "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
              "received_events_url": "https://api.github.com/users/laanwj/received_events",
              "type": "User",
              "site_admin": false
            },
            "open_issues": 0,
            "closed_issues": 159,
            "created_at": "2021-09-14T08:27:02Z",
            "updated_at": "2022-11-29T15:44:44Z",
            "closed_at": "2022-11-29T15:44:44Z"
          },
          "locked": false,
          "comments": 28,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25355",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/25355",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/25355.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/25355.patch"
          },
          "closed_at": "2022-08-26T20:34:29Z",
          "created_at": "2022-06-13T08:27:20Z",
          "updated_at": "2022-09-12T07:09:33Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6914313313,
      "node_id": "HRFPE_lADOABII585M6xw_zwAAAAGcIAxh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6914313313",
      "actor": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-30T22:09:29Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-30T22:13:49Z",
      "updated_at": "2022-06-30T22:13:49Z",
      "source": {
        "issue": {
          "id": 1258121997,
          "node_id": "PR_kwDOABII5844-S2D",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25268",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25268/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25268/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25268/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/25268",
          "number": 25268,
          "state": "open",
          "state_reason": null,
          "title": "refactor: Introduce EvictionManager",
          "body": "At the moment, the eviction logic is mangled across two different components (`CConnman`, `PeerManager`), so we can't really test it in isolation. This is not completely true for the inbound eviction logic as it exists as static functions in `net.{h.cpp}` for which tests already exist. However, the outbound eviction logic is not covered by any fuzz tests and is only testable by spinning up both a connman and peerman.\r\n\r\nThis PR splits out the eviction logic into its own component `EvictionManager`. In addition to isolating the eviction logic, we get rid of several layer violations (e.g. `CConnman::ForEachNode/ForNode` calls, `CNode::m_last_block_time`, etc.) between `net` and `net processing`.\r\n\r\nOne instance of the `EvictionManager` is created at start up and passed as a reference to the connection and peer managers. The connection and peer managers report all eviction relevant information to the eviction manager who ultimately suggests nodes to evict as the result of `EvictionManager::SelectInboundNodeToEvict` and `EvictionManager::SelectOutboundNodesToEvict`.",
          "user": {
            "login": "dergoegge",
            "id": 8077169,
            "node_id": "MDQ6VXNlcjgwNzcxNjk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dergoegge",
            "html_url": "https://github.com/dergoegge",
            "followers_url": "https://api.github.com/users/dergoegge/followers",
            "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
            "organizations_url": "https://api.github.com/users/dergoegge/orgs",
            "repos_url": "https://api.github.com/users/dergoegge/repos",
            "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/dergoegge/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 12,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25268",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/25268",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/25268.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/25268.patch"
          },
          "created_at": "2022-06-02T12:34:15Z",
          "updated_at": "2023-08-06T17:48:48Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-30T22:43:09Z",
      "updated_at": "2022-06-30T22:43:09Z",
      "source": {
        "issue": {
          "id": 1247071697,
          "node_id": "PR_kwDOABII5844ZBvy",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25203",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25203/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25203/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25203/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/25203",
          "number": 25203,
          "state": "closed",
          "state_reason": null,
          "title": "Severity-based logging -- parent PR",
          "body": "This is a parent PR for continuing updates to severity-based logging. See https://github.com/bitcoin/bitcoin/issues/20576 for motivation and https://github.com/bitcoin/bitcoin/pull/25306 for discussion.\r\n\r\nSeveral of the initial changes here have been merged. The current remaining ones are:\r\n\r\n- simplify the `BCLog::Level` enum class and the `LogLevelToStr()` function, and add documentation\r\n- add a `-loglevel` configuration option and release note\r\n- add a `BCLog::Level::Trace` log severity level, add test coverage, and update the test framework\r\n- print the wallet name more clearly in wallet logging to distinguish it from category/level\r\n- unconditionally log `Info` severity level messages\r\n- replace the hardcoded `LogLevelsList()` vector with a programmatic one derived from the `Level` enum class\r\n- convert `GetLogCategory()` to `std::optional`\r\n- deduplicate the `LogCategory` code\r\n- update to severity-based logging in the following areas, dropping the use of `LogPrintf` and `LogPrint`: addrdb, addrman, banman, i2p, mempool, netbase, net, net_processing, timedata, torcontrol\r\n\r\nThe first step in this list is https://github.com/bitcoin/bitcoin/issues/25614.",
          "user": {
            "login": "jonatack",
            "id": 2415484,
            "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jonatack",
            "html_url": "https://github.com/jonatack",
            "followers_url": "https://api.github.com/users/jonatack/followers",
            "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
            "organizations_url": "https://api.github.com/users/jonatack/orgs",
            "repos_url": "https://api.github.com/users/jonatack/repos",
            "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/jonatack/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 16,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25203",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/25203",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/25203.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/25203.patch"
          },
          "closed_at": "2023-04-25T11:09:43Z",
          "created_at": "2022-05-24T20:08:49Z",
          "updated_at": "2023-04-25T11:09:44Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-30T22:45:24Z",
      "updated_at": "2022-06-30T22:45:24Z",
      "source": {
        "issue": {
          "id": 1242398616,
          "node_id": "PR_kwDOABII5844Jwn5",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25174",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25174/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25174/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25174/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/25174",
          "number": 25174,
          "state": "closed",
          "state_reason": null,
          "title": "net/net_processing: Add thread safety related annotations for CNode and Peer",
          "body": "Adds `GUARDED_BY` and `const` annotations to document how we currently ensure various members of `CNode` and `Peer` aren't subject to race conditions.",
          "user": {
            "login": "ajtowns",
            "id": 127186,
            "node_id": "MDQ6VXNlcjEyNzE4Ng==",
            "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ajtowns",
            "html_url": "https://github.com/ajtowns",
            "followers_url": "https://api.github.com/users/ajtowns/followers",
            "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
            "organizations_url": "https://api.github.com/users/ajtowns/orgs",
            "repos_url": "https://api.github.com/users/ajtowns/repos",
            "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/ajtowns/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 8,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25174",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/25174",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/25174.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/25174.patch"
          },
          "closed_at": "2022-08-30T09:37:01Z",
          "created_at": "2022-05-19T22:35:26Z",
          "updated_at": "2022-08-31T08:18:54Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-01T00:43:30Z",
      "updated_at": "2022-07-01T00:43:30Z",
      "source": {
        "issue": {
          "id": 1169929317,
          "node_id": "PR_kwDOABII5840ed8t",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24571",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24571/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24571/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24571/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/24571",
          "number": 24571,
          "state": "closed",
          "state_reason": null,
          "title": "p2p: Prevent block index fingerprinting by sending additional getheaders messages",
          "body": "The block index might contain stale blocks that are not part of the main chain. If a malicious peer is able to probe a node's block index for certain stale blocks then it can use this information to fingerprint the node.\r\n\r\nWhen receiving headers (either through a `cmpctblock` or `headers` messages) a node will send `getheaders` if the predecessor of the first header does not exist. This leaks information from the block index if the predecessor of the header is a stale block because no `getheaders` will be sent in that case revealing that the stale block exists in the index.\r\n\r\nThis PR prevents this fingerprinting by sending additional `getheaders` messages in cases where not doing so leaks the existence of stale blocks. To determine when additional messages should be send, we introduce the `PeerManagerImpl::m_chain_tips_sets` map which keeps track of seen chain tips per network, effectively creating a per network view of the node's global block index.  We only try to accept new headers if they connect to anything in our global index and they connect to our active chain or to a chain that was previously sent to us by a peer on the same network. We send a `getheaders` message should these conditions not be met.",
          "user": {
            "login": "dergoegge",
            "id": 8077169,
            "node_id": "MDQ6VXNlcjgwNzcxNjk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dergoegge",
            "html_url": "https://github.com/dergoegge",
            "followers_url": "https://api.github.com/users/dergoegge/followers",
            "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
            "organizations_url": "https://api.github.com/users/dergoegge/orgs",
            "repos_url": "https://api.github.com/users/dergoegge/repos",
            "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/dergoegge/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 98298007,
              "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
              "name": "P2P",
              "color": "006b75",
              "default": false
            },
            {
              "id": 749416508,
              "node_id": "MDU6TGFiZWw3NDk0MTY1MDg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Up%20for%20grabs",
              "name": "Up for grabs",
              "color": "99a810",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 23,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24571",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/24571",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/24571.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/24571.patch"
          },
          "closed_at": "2023-05-30T15:21:38Z",
          "created_at": "2022-03-15T16:47:34Z",
          "updated_at": "2023-05-30T15:22:31Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-01T01:39:43Z",
      "updated_at": "2022-07-01T01:39:43Z",
      "source": {
        "issue": {
          "id": 1115473885,
          "node_id": "PR_kwDOABII584xo1eC",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24170",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24170/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24170/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24170/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/24170",
          "number": 24170,
          "state": "closed",
          "state_reason": null,
          "title": "p2p, rpc: Manual block-relay-only connections with addnode",
          "body": "This implements the suggestion from #23763 to introduce an option to establish block-relay-connections manually with the `-addnode` RPC.\r\nAdding these can make sense for a node operator that wants to be connected to a anonymity networks like Tor or I2P, but also wants to have additional protection against eclipse attacks: Following the best chain can be more of an issue on anonymity networks because these are smaller and it can be easier to create a lot of sybil nodes there.\r\n\r\nIn that situation, manual block-relay-only connections to peers on clearnet networks can help us staying connected to the best chain, but in contrast to normal manual connections, transactions and addresses aren't transmitted on these links - in particular not our own address or transaction from our wallet. This increases privacy and will also make it harder to perform fingerprinting attacks (connecting our identities over different networks).\r\n\r\nManual Block-Relay connections:\r\n- can be specified with `-addnode` RPC, both with the `add` and `onetry` command\r\n- can be specified with the `-addnode` bitcoind arg (or in bitcoin.conf) with `<IP>=manual-block-relay`\r\n- don't participate in transaction and address relay\r\n- don't get discouraged / punished for misbehavior (but will still get disconnected for sending TX/tx-INV as automatic block-relay-only peers do)\r\n- are not subject to outbound eviction logic (unlike automatic block-relay-only-peers)\r\n",
          "user": {
            "login": "mzumsande",
            "id": 48763452,
            "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
            "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mzumsande",
            "html_url": "https://github.com/mzumsande",
            "followers_url": "https://api.github.com/users/mzumsande/followers",
            "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
            "organizations_url": "https://api.github.com/users/mzumsande/orgs",
            "repos_url": "https://api.github.com/users/mzumsande/repos",
            "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/mzumsande/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 98279177,
              "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
              "name": "RPC/REST/ZMQ",
              "color": "0052cc",
              "default": false
            },
            {
              "id": 98298007,
              "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
              "name": "P2P",
              "color": "006b75",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 42,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24170",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/24170",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/24170.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/24170.patch"
          },
          "closed_at": "2023-06-04T19:11:17Z",
          "created_at": "2022-01-26T20:32:07Z",
          "updated_at": "2023-06-04T19:11:18Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-01T02:19:40Z",
      "updated_at": "2022-07-01T02:19:40Z",
      "source": {
        "issue": {
          "id": 1096591544,
          "node_id": "PR_kwDOABII584wrFC4",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24008",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24008/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24008/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24008/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/24008",
          "number": 24008,
          "state": "closed",
          "state_reason": null,
          "title": "assumeutxo: net_processing changes",
          "body": "This is part of the [assumeutxo project](https://github.com/bitcoin/bitcoin/projects/11) (parent PR: #27596) \r\n\r\n---\r\n\r\nThis PR includes the changes necessary to perform network functionality with multiple chainstates in use. Various pieces of net_processing logic have to be modified in order to support block download that is simultaneous across numerous chainstates.\r\n\r\nChanges include\r\n\r\n- Modify FindNextBlocksToDownload() to parameterize the chainstate\r\n  being worked on.\r\n\r\n- Change GetNodeStateStats to take the max nCommonHeight per peer across\r\n  all chainstates.\r\n\r\n- Add CNodeState::chainstate_to_last_common_block\r\n  * we need this to allow handling for a single peer to distinguish\r\n    between separate chainstates we're simultaneously downloading blocks for\r\n\r\n- Share `requests_available` across chainstates when finding the next blocks\r\n  to download (during calls to FindNextBlocksToDownload()).\r\n\r\n---\r\n\r\nThis PR shares commit https://github.com/jamesob/bitcoin/commit/17906dd52543fb75d2c45de884799b35ec5721f4 with #24006, and is included here so that the two changes can be reviewed in parallel.\r\n\r\nThis PR excludes a small net_processing commit, https://github.com/jamesob/bitcoin/commit/3e6164d96f9a42ecbf34359f6fd1af5413346933, which will be proposed for merge after #24006 since it relies on the introduction of the `BackgroundBlockConnected()` validationinterface event that the indexing changes introduce.\r\n\r\n---\r\n\r\nSome commits here are best reviewed with `--ignore-space-change`.\r\n\r\nUnit-testing net_processing is notoriously difficult and with that in mind I haven't included any unittests here, but in parallel with review of these changes I will attempt to write some tests. Note that this behavior is covered in the functional tests included in the parent PR: https://github.com/jamesob/bitcoin/commit/c4949f2daf05289e76123b3c705277bf735a79d6",
          "user": {
            "login": "jamesob",
            "id": 73197,
            "node_id": "MDQ6VXNlcjczMTk3",
            "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jamesob",
            "html_url": "https://github.com/jamesob",
            "followers_url": "https://api.github.com/users/jamesob/followers",
            "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
            "organizations_url": "https://api.github.com/users/jamesob/orgs",
            "repos_url": "https://api.github.com/users/jamesob/repos",
            "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/jamesob/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 98298007,
              "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
              "name": "P2P",
              "color": "006b75",
              "default": false
            },
            {
              "id": 118379652,
              "node_id": "MDU6TGFiZWwxMTgzNzk2NTI=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Validation",
              "name": "Validation",
              "color": "6060aa",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 17,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24008",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/24008",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/24008.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/24008.patch"
          },
          "closed_at": "2023-05-26T21:26:05Z",
          "created_at": "2022-01-07T19:08:10Z",
          "updated_at": "2023-06-25T04:22:13Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-01T03:18:10Z",
      "updated_at": "2022-07-01T03:18:10Z",
      "source": {
        "issue": {
          "id": 1045818438,
          "node_id": "PR_kwDOABII584uJavG",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23443",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23443/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23443/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23443/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/23443",
          "number": 23443,
          "state": "closed",
          "state_reason": null,
          "title": "p2p: Erlay support signaling",
          "body": "This is a part of the Erlay project:\r\n- [parent PR](https://github.com/bitcoin/bitcoin/pull/21515)\r\n- [associated BIP-330](https://github.com/bitcoin/bips/pull/1376).\r\n\r\n-------\r\n\r\nThis PR adds a new p2p message `sendtxrcncl` signaling for reconciliation support.\r\nBefore sending that message, a node is supposed to \"pre-register\" the peer by generating and storing an associated reconciliation salt component.\r\nOnce the salts are exchanged within this new message, nodes \"register\" each other for future reconciliations by computing and storing the aggregate salt, along with the reconciliation parameters based on the connection direction.",
          "user": {
            "login": "naumenkogs",
            "id": 7975071,
            "node_id": "MDQ6VXNlcjc5NzUwNzE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/naumenkogs",
            "html_url": "https://github.com/naumenkogs",
            "followers_url": "https://api.github.com/users/naumenkogs/followers",
            "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
            "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
            "repos_url": "https://api.github.com/users/naumenkogs/repos",
            "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 98298007,
              "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
              "name": "P2P",
              "color": "006b75",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 33,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/23443",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/23443.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/23443.patch"
          },
          "closed_at": "2022-10-17T17:11:41Z",
          "created_at": "2021-11-05T12:51:10Z",
          "updated_at": "2022-10-25T00:42:29Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-01T06:34:52Z",
      "updated_at": "2022-07-01T06:34:52Z",
      "source": {
        "issue": {
          "id": 508111913,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MzI4OTY4NzY1",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17167",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17167/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17167/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17167/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/17167",
          "number": 17167,
          "state": "closed",
          "state_reason": null,
          "title": "Allow whitelisting outgoing connections",
          "body": "Rethinking/rewrite of #10594 in light of whitelist flags: new flags are added for \"in\" and \"out\" to specify the connection direction matched. Both can be specified to match either direction.",
          "user": {
            "login": "luke-jr",
            "id": 1095675,
            "node_id": "MDQ6VXNlcjEwOTU2NzU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/luke-jr",
            "html_url": "https://github.com/luke-jr",
            "followers_url": "https://api.github.com/users/luke-jr/followers",
            "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
            "organizations_url": "https://api.github.com/users/luke-jr/orgs",
            "repos_url": "https://api.github.com/users/luke-jr/repos",
            "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/luke-jr/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 98298007,
              "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
              "name": "P2P",
              "color": "006b75",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 19,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17167",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/17167",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/17167.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/17167.patch"
          },
          "closed_at": "2022-10-12T18:03:24Z",
          "created_at": "2019-10-16T21:35:01Z",
          "updated_at": "2022-11-02T09:51:18Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6918128158,
      "node_id": "HRFPE_lADOABII585M6xw_zwAAAAGcWkIe",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6918128158",
      "actor": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-01T12:22:44Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6918577596,
      "node_id": "HRFPE_lADOABII585M6xw_zwAAAAGcYR28",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6918577596",
      "actor": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-01T13:29:55Z"
    },
    {
      "event": "commented",
      "id": 1173474399,
      "node_id": "IC_kwDOABII585F8cxf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1173474399",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-04T07:51:28Z",
      "updated_at": "2022-07-04T07:51:28Z",
      "author_association": "MEMBER",
      "body": "Obvious concept ACK from me. This was one of the big motivators for #19398.",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25515#issuecomment-1173474399",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25515"
    },
    {
      "event": "labeled",
      "id": 6930127672,
      "node_id": "LE_lADOABII585M6xw_zwAAAAGdEVs4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6930127672",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-04T21:06:21Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6935520223,
      "node_id": "HRFPE_lADOABII585M6xw_zwAAAAGdY6Pf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6935520223",
      "actor": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-05T15:35:33Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6935556187,
      "node_id": "HRFPE_lADOABII585M6xw_zwAAAAGdZDBb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6935556187",
      "actor": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-05T15:40:28Z"
    },
    {
      "event": "unlabeled",
      "id": 6935670702,
      "node_id": "UNLE_lADOABII585M6xw_zwAAAAGdZe-u",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6935670702",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-05T15:55:57Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 1175229773,
      "node_id": "IC_kwDOABII585GDJVN",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1175229773",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-05T16:03:58Z",
      "updated_at": "2022-07-05T16:03:58Z",
      "author_association": "MEMBER",
      "body": "Nice, concept ACK",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25515#issuecomment-1175229773",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25515"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-06T01:07:02Z",
      "updated_at": "2022-07-06T01:07:02Z",
      "source": {
        "issue": {
          "id": 1183587266,
          "node_id": "PR_kwDOABII5841Kd7I",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24697",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24697/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24697/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24697/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/24697",
          "number": 24697,
          "state": "closed",
          "state_reason": null,
          "title": "refactor address relay time",
          "body": "Those refactors are overlapping with, but otherwise largely unrelated to #24662.",
          "user": {
            "login": "MarcoFalke",
            "id": 6399679,
            "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/MarcoFalke",
            "html_url": "https://github.com/MarcoFalke",
            "followers_url": "https://api.github.com/users/MarcoFalke/followers",
            "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
            "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
            "repos_url": "https://api.github.com/users/MarcoFalke/repos",
            "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            },
            {
              "id": 98298007,
              "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
              "name": "P2P",
              "color": "006b75",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "comments": 12,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24697",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/24697",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/24697.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/24697.patch"
          },
          "closed_at": "2022-07-27T09:30:54Z",
          "created_at": "2022-03-28T15:10:54Z",
          "updated_at": "2023-07-29T10:17:20Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-07T03:13:38Z",
      "updated_at": "2022-07-07T03:13:38Z",
      "source": {
        "issue": {
          "id": 1295972399,
          "node_id": "PR_kwDOABII58468cbk",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25555",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25555/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25555/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25555/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/25555",
          "number": 25555,
          "state": "closed",
          "state_reason": null,
          "title": "refactor: Move m_num_unconnecting_headers_msgs out of cs_main guard",
          "body": "The variable does not need to be guarded by cs_main, so move it out of the cs_main scope. It is not used for validation-specific state, but only for headers-processing internal state and logging.",
          "user": {
            "login": "MarcoFalke",
            "id": 6399679,
            "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/MarcoFalke",
            "html_url": "https://github.com/MarcoFalke",
            "followers_url": "https://api.github.com/users/MarcoFalke/followers",
            "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
            "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
            "repos_url": "https://api.github.com/users/MarcoFalke/repos",
            "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 3,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25555",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/25555",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/25555.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/25555.patch"
          },
          "closed_at": "2022-10-24T13:15:54Z",
          "created_at": "2022-07-06T15:01:24Z",
          "updated_at": "2022-10-24T13:18:20Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-08T22:31:14Z",
      "updated_at": "2022-07-08T22:31:14Z",
      "source": {
        "issue": {
          "id": 1299238264,
          "node_id": "PR_kwDOABII5847Ho23",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25572",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25572/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25572/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25572/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/25572",
          "number": 25572,
          "state": "open",
          "state_reason": null,
          "title": "refactor: Introduce EvictionManager and use it for the inbound eviction logic",
          "body": "This PR splits off the next couple commits from #25268 that introduce the `EvictionManager` and use it for  the inbound eviction logic.\r\n\r\nOne instance of the `EvictionManager` is created at start up and passed as a reference to the connection and peer managers. The connection and peer managers report all eviction relevant information (for inbound connections) to the eviction manager who ultimately suggests nodes to evict as the result of `EvictionManager::SelectNodeToEvict`.",
          "user": {
            "login": "dergoegge",
            "id": 8077169,
            "node_id": "MDQ6VXNlcjgwNzcxNjk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dergoegge",
            "html_url": "https://github.com/dergoegge",
            "followers_url": "https://api.github.com/users/dergoegge/followers",
            "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
            "organizations_url": "https://api.github.com/users/dergoegge/orgs",
            "repos_url": "https://api.github.com/users/dergoegge/repos",
            "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/dergoegge/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            },
            {
              "id": 98298007,
              "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
              "name": "P2P",
              "color": "006b75",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 10,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25572",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/25572",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/25572.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/25572.patch"
          },
          "created_at": "2022-07-08T16:39:49Z",
          "updated_at": "2023-08-06T17:48:41Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-12T07:44:10Z",
      "updated_at": "2022-07-12T07:44:10Z",
      "source": {
        "issue": {
          "id": 1301613651,
          "node_id": "PR_kwDOABII5847Pa3X",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25591",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25591/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25591/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25591/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/25591",
          "number": 25591,
          "state": "closed",
          "state_reason": null,
          "title": "move-only: Version handshake to libtest_util",
          "body": "The version handshake after setting up a peer is an integral part of (unit) testing net processing logic.\r\n\r\nThus, make the helper accessible in libtest_util.\r\n\r\nAlso, remove the peerman argument from `FillNode`, as it must be equal to connman's peerman, which can then be used instead.",
          "user": {
            "login": "MarcoFalke",
            "id": 6399679,
            "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/MarcoFalke",
            "html_url": "https://github.com/MarcoFalke",
            "followers_url": "https://api.github.com/users/MarcoFalke/followers",
            "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
            "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
            "repos_url": "https://api.github.com/users/MarcoFalke/repos",
            "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            },
            {
              "id": 62963516,
              "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
              "name": "Tests",
              "color": "d4c5f9",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "comments": 2,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25591",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/25591",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/25591.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/25591.patch"
          },
          "closed_at": "2022-07-12T15:06:44Z",
          "created_at": "2022-07-12T06:45:10Z",
          "updated_at": "2022-07-13T09:56:15Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "labeled",
      "id": 6978564796,
      "node_id": "LE_lADOABII585M6xw_zwAAAAGf9HK8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6978564796",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-12T15:14:34Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "referenced",
      "id": 7017805143,
      "node_id": "REFE_lADOABII585M6xw_zwAAAAGiSzVX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7017805143",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "2bdce7f7adbdec018405cb993d16cecb5fb429f6",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2bdce7f7adbdec018405cb993d16cecb5fb429f6",
      "created_at": "2022-07-19T06:33:53Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7020172879,
      "node_id": "HRFPE_lADOABII585M6xw_zwAAAAGib1ZP",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7020172879",
      "actor": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-19T12:16:24Z"
    },
    {
      "event": "renamed",
      "id": 7020231311,
      "node_id": "RTE_lADOABII585M6xw_zwAAAAGicDqP",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7020231311",
      "actor": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-19T12:24:27Z",
      "rename": {
        "from": "[draft] PeerManager unit tests",
        "to": "net, test: Virtualise CConnman and add initial PeerManager unit tests"
      }
    },
    {
      "event": "ready_for_review",
      "id": 7020238441,
      "node_id": "RFRE_lADOABII585M6xw_zwAAAAGicFZp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7020238441",
      "actor": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-19T12:25:27Z"
    },
    {
      "event": "commented",
      "id": 1188989697,
      "node_id": "IC_kwDOABII585G3osB",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1188989697",
      "actor": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-19T12:26:57Z",
      "updated_at": "2022-07-19T12:26:57Z",
      "author_association": "MEMBER",
      "body": "This PR is ready for review!",
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25515#issuecomment-1188989697",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25515"
    },
    {
      "event": "unlabeled",
      "id": 7020427945,
      "node_id": "UNLE_lADOABII585M6xw_zwAAAAGiczqp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7020427945",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-19T12:51:31Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 1226927000,
      "node_id": "IC_kwDOABII585JIWuY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1226927000",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-25T08:10:19Z",
      "updated_at": "2022-08-25T08:10:19Z",
      "author_association": "MEMBER",
      "body": "Concept ACK, light code review ACK 87fd3609ba87a74fa6ca74c56ffbdb39fd941ebf",
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25515#issuecomment-1226927000",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25515"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-01T10:36:28Z",
      "updated_at": "2022-09-01T10:36:28Z",
      "source": {
        "issue": {
          "id": 1344091938,
          "node_id": "PR_kwDOABII5849camF",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25871",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25871/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25871/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25871/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/25871",
          "number": 25871,
          "state": "closed",
          "state_reason": null,
          "title": "contrib: add vasild to trusted keys",
          "body": "_(this is a followup from yesterday's [IRC discussion](https://www.erisian.com.au/bitcoin-core-dev/log-2022-08-18.html#l-299))_\r\n\r\nFor Networking scope maintenance.\r\n\r\nI have been signing commits with that key and it is available at `keys.openpgp.org`.",
          "user": {
            "login": "vasild",
            "id": 266751,
            "node_id": "MDQ6VXNlcjI2Njc1MQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vasild",
            "html_url": "https://github.com/vasild",
            "followers_url": "https://api.github.com/users/vasild/followers",
            "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
            "organizations_url": "https://api.github.com/users/vasild/orgs",
            "repos_url": "https://api.github.com/users/vasild/repos",
            "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/vasild/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 231994551,
              "node_id": "MDU6TGFiZWwyMzE5OTQ1NTE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Scripts%20and%20tools",
              "name": "Scripts and tools",
              "color": "ffffee",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 65,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25871",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/25871",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/25871.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/25871.patch"
          },
          "closed_at": "2023-01-14T08:29:04Z",
          "created_at": "2022-08-19T08:02:03Z",
          "updated_at": "2023-01-14T08:29:05Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-13T22:57:18Z",
      "updated_at": "2022-09-13T22:57:18Z",
      "source": {
        "issue": {
          "id": 1167366626,
          "node_id": "PR_kwDOABII5840WLLa",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24545",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24545/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24545/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24545/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/24545",
          "number": 24545,
          "state": "closed",
          "state_reason": null,
          "title": "BIP324: Enable v2 P2P encrypted transport",
          "body": "This PR brings together all other BIP324 PRs and enables v2 encrypted P2P transport.\r\n\r\nBuilds on top of PRs: #25361, #23233, #23561, #23432. It looks like there's a lot of commits, but **only the last 12 commits belong in this PR**. The rest will be merged with upstream PRs.\r\n\r\nThe dependency tree for BIP324 PRs is [here](https://bip324.com/sections/code-review/).\r\n\r\nBIP324 is [here](https://github.com/bitcoin/bips/blob/master/bip-0324.mediawiki).\r\n\r\n### Running a v2 node\r\n#### Get the code\r\n```\r\ngit remote add bip324 git@github.com:dhruv/bitcoin.git\r\ngit fetch bip324\r\ngit checkout bip324/bip324-enable\r\n```\r\n\r\n#### Build for your OS\r\n\r\nFollow the appropriate instructions [here](https://github.com/bitcoin/bitcoin/blob/master/doc/README.md)\r\n\r\n#### Run the node\r\n\r\n```\r\nsrc/bitcoind -conf=CONFIG_FILE -v2transport=1\r\n```\r\n\r\n#### Connect with a friend's v2 node\r\n```\r\nsrc/bitcoin-cli -conf=CONFIG_FILE addnode \"FRIEND_IP:FRIEND_PORT\" \"add\" true\r\n```\r\nThe last parameter(`p2p_v2:true`) signals to your node that the peer is running a v2 supportive client and we should attempt to make an encrypted P2P connection (you're simulating the `NODE_P2P_V2` service flag advertisement manually). Should that fail however (say because the peer told you mistakenly, lied, etc.), this code will downgrade the connection to unencrypted v1 transport.\r\n\r\n### Things you are helpful to test\r\n\r\n* If your friend's node is a v2 node, you can see with wireshark that the bytes are pseudorandom (the easiest way to confirm this is that with a v1 connection, wireshark will tell you it has detected a Bitcoin connection and it'll even parse out the metadata like message type, etc; with v2, wireshark has no idea -- of course that _could_ be because wireshark does simply not know v2, but it is because the bytestream is pseudorandom)\r\n* Compare the v2 encrypted session id exposed via `getpeerinfo` as `v2_session_id` with your friend.\r\n* Add another peer that is actually v1, but try `addnode` still indicating v2 support. You should see with wireshark that after a failed attempt at a v2 handshake, the connection is downgraded to unencrypted v1 and wireshark can parse it.\r\n\r\nI've been told there are v2 nodes running at (happy to update the list as more people run persistent v2 nodes; message me and I'll add it here):\r\n```\r\nbe.anyone.eu.org\r\nrp7k2go3s5lyj3fnj6zn62ktarlrsft2ohlsxkyd7v3e3idqyptvread.onion:8333\r\njdcoysubtxazi7dketpyb5rnjorvxad4onftveohash2pdwkgw4bvnqd.onion:8333\r\nxci6cphki2pdb5qe7axzrcxcxabkbm24z4zlv2hn4ziy6grquqco2kyd.onion:8333\r\nslvtesfgg3mkksqqzh67al4sq6dx3rhlzqepa4ny7jonzuckg6msf3id.onion:8333\r\ngifm4fnj3vua664xhgeanx5fnpco3txkqy4amr4txbfsciiyrkxpf2qd.onion:8333\r\n300:5ecb:6b8a:d837::3:8333\r\n300:5ecb:6b8a:d837::a6d6:8333\r\n2001:470:1f1a:365::2:8333\r\n2001:470:1f1b:365:aa20:66ff:fe3f:1909:8333\r\n184.74.240.157:8533\r\n95.179.145.232:8333\r\n```",
          "user": {
            "login": "dhruv",
            "id": 856960,
            "node_id": "MDQ6VXNlcjg1Njk2MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dhruv",
            "html_url": "https://github.com/dhruv",
            "followers_url": "https://api.github.com/users/dhruv/followers",
            "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
            "organizations_url": "https://api.github.com/users/dhruv/orgs",
            "repos_url": "https://api.github.com/users/dhruv/repos",
            "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/dhruv/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 98298007,
              "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
              "name": "P2P",
              "color": "006b75",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 47,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24545",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/24545",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/24545.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/24545.patch"
          },
          "closed_at": "2023-05-06T11:14:46Z",
          "created_at": "2022-03-12T18:43:06Z",
          "updated_at": "2023-05-06T11:14:46Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7385858814,
      "node_id": "HRFPE_lADOABII585M6xw_zwAAAAG4O0L-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7385858814",
      "actor": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-14T13:24:52Z"
    },
    {
      "event": "commented",
      "id": 1246762839,
      "node_id": "IC_kwDOABII585KUBdX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1246762839",
      "actor": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-14T13:25:26Z",
      "updated_at": "2022-09-14T13:25:26Z",
      "author_association": "MEMBER",
      "body": "Rebased.",
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25515#issuecomment-1246762839",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25515"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDRmMjUzM2M1ZmQxOGFlYThhZjg2NjIzYjI5MDRlN2Y5ODc0NjVhNTk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4f2533c5fd18aea8af86623b2904e7f987465a59",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/4f2533c5fd18aea8af86623b2904e7f987465a59",
      "tree": {
        "sha": "dd9a1730570e961b09136eccd6149d3622db64d1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dd9a1730570e961b09136eccd6149d3622db64d1"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9fcdb9f3a044330d3d7515fa35709102c98534d2",
          "sha": "9fcdb9f3a044330d3d7515fa35709102c98534d2",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/9fcdb9f3a044330d3d7515fa35709102c98534d2"
        }
      ],
      "message": "[net] Define ConnectionsInterface",
      "committer": {
        "name": "dergoegge",
        "email": "n.goeggi@gmail.com",
        "date": "2022-09-27T11:52:23Z"
      },
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2022-02-10T10:52:40Z"
      },
      "sha": "4f2533c5fd18aea8af86623b2904e7f987465a59"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDllZmNkOTY2OGQxNDNhZmEyZTgyMTNhN2JhY2Y5NGRhN2Y2NDVlNGM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9efcd9668d143afa2e8213a7bacf94da7f645e4c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/9efcd9668d143afa2e8213a7bacf94da7f645e4c",
      "tree": {
        "sha": "d367232e65dec8728c886090cbfe4e44101e0359",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d367232e65dec8728c886090cbfe4e44101e0359"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4f2533c5fd18aea8af86623b2904e7f987465a59",
          "sha": "4f2533c5fd18aea8af86623b2904e7f987465a59",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/4f2533c5fd18aea8af86623b2904e7f987465a59"
        }
      ],
      "message": "[net processing] PeerManager holds a ConnectionsInterface&, not a CConnman&",
      "committer": {
        "name": "dergoegge",
        "email": "n.goeggi@gmail.com",
        "date": "2022-09-27T11:52:23Z"
      },
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2022-03-29T13:56:08Z"
      },
      "sha": "9efcd9668d143afa2e8213a7bacf94da7f645e4c"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7467924678,
      "node_id": "HRFPE_lADOABII585M6xw_zwAAAAG9H3zG",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7467924678",
      "actor": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-27T12:10:03Z"
    },
    {
      "event": "review_requested",
      "id": 7516092812,
      "node_id": "RRE_lADOABII585M6xw_zwAAAAG__nmM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7516092812",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-10-04T12:39:45Z",
      "requested_reviewer": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "commented",
      "id": 1266933218,
      "node_id": "IC_kwDOABII585Lg93i",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1266933218",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-10-04T12:40:18Z",
      "updated_at": "2022-10-04T12:40:18Z",
      "author_association": "MEMBER",
      "body": "Concept ACK",
      "user": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25515#issuecomment-1266933218",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25515"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-10-05T14:52:25Z",
      "updated_at": "2022-10-05T14:52:25Z",
      "source": {
        "issue": {
          "id": 1397931094,
          "node_id": "PR_kwDOCxEqnM5AOMmR",
          "url": "https://api.github.com/repos/bitcoin-core-review-club/website/issues/566",
          "repository_url": "https://api.github.com/repos/bitcoin-core-review-club/website",
          "labels_url": "https://api.github.com/repos/bitcoin-core-review-club/website/issues/566/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin-core-review-club/website/issues/566/comments",
          "events_url": "https://api.github.com/repos/bitcoin-core-review-club/website/issues/566/events",
          "html_url": "https://github.com/bitcoin-core-review-club/website/pull/566",
          "number": 566,
          "state": "closed",
          "state_reason": null,
          "title": "announce 25515",
          "body": "https://github.com/bitcoin/bitcoin/pull/25515\r\n@dergoegge",
          "user": {
            "login": "LarryRuane",
            "id": 8321330,
            "node_id": "MDQ6VXNlcjgzMjEzMzA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/LarryRuane",
            "html_url": "https://github.com/LarryRuane",
            "followers_url": "https://api.github.com/users/LarryRuane/followers",
            "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
            "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
            "repos_url": "https://api.github.com/users/LarryRuane/repos",
            "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 4,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin-core-review-club/website/pulls/566",
            "html_url": "https://github.com/bitcoin-core-review-club/website/pull/566",
            "diff_url": "https://github.com/bitcoin-core-review-club/website/pull/566.diff",
            "patch_url": "https://github.com/bitcoin-core-review-club/website/pull/566.patch"
          },
          "closed_at": "2022-10-05T15:08:57Z",
          "created_at": "2022-10-05T14:52:25Z",
          "updated_at": "2022-10-18T08:38:03Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 1279056559,
      "node_id": "IC_kwDOABII585MPNqv",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1279056559",
      "actor": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-10-14T14:05:46Z",
      "updated_at": "2022-10-14T14:05:46Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25515#issuecomment-1279056559",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25515"
    },
    {
      "event": "reviewed",
      "id": 1144030805,
      "node_id": "PRR_kwDOABII585EMIZV",
      "url": null,
      "actor": null,
      "commit_id": "f98a4e8d891dd7374ef7dc4c723797bf0705075f",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK.. I made a first pass and changes look good to me.. I believe its helpful to separate out the interface, and possibly add more thorough unit testing later on? \r\n\r\nI will go through the test logic more thoroughly, for now just two observations. ",
      "user": {
        "login": "rajarshimaitra",
        "id": 36541669,
        "node_id": "MDQ6VXNlcjM2NTQxNjY5",
        "avatar_url": "https://avatars.githubusercontent.com/u/36541669?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rajarshimaitra",
        "html_url": "https://github.com/rajarshimaitra",
        "followers_url": "https://api.github.com/users/rajarshimaitra/followers",
        "following_url": "https://api.github.com/users/rajarshimaitra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rajarshimaitra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rajarshimaitra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rajarshimaitra/subscriptions",
        "organizations_url": "https://api.github.com/users/rajarshimaitra/orgs",
        "repos_url": "https://api.github.com/users/rajarshimaitra/repos",
        "events_url": "https://api.github.com/users/rajarshimaitra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rajarshimaitra/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25515#pullrequestreview-1144030805",
      "submitted_at": "2022-10-17T12:30:38Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25515"
    },
    {
      "event": "reviewed",
      "id": 1148067232,
      "node_id": "PRR_kwDOABII585Ebh2g",
      "url": null,
      "actor": null,
      "commit_id": "f98a4e8d891dd7374ef7dc4c723797bf0705075f",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "tested ACK 👍",
      "user": {
        "login": "hernanmarino",
        "id": 87907936,
        "node_id": "MDQ6VXNlcjg3OTA3OTM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/87907936?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hernanmarino",
        "html_url": "https://github.com/hernanmarino",
        "followers_url": "https://api.github.com/users/hernanmarino/followers",
        "following_url": "https://api.github.com/users/hernanmarino/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hernanmarino/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hernanmarino/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hernanmarino/subscriptions",
        "organizations_url": "https://api.github.com/users/hernanmarino/orgs",
        "repos_url": "https://api.github.com/users/hernanmarino/repos",
        "events_url": "https://api.github.com/users/hernanmarino/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hernanmarino/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25515#pullrequestreview-1148067232",
      "submitted_at": "2022-10-19T18:10:27Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25515"
    },
    {
      "event": "reviewed",
      "id": 1147655474,
      "node_id": "PRR_kwDOABII585EZ9Uy",
      "url": null,
      "actor": null,
      "commit_id": "f98a4e8d891dd7374ef7dc4c723797bf0705075f",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "One more question.. ",
      "user": {
        "login": "rajarshimaitra",
        "id": 36541669,
        "node_id": "MDQ6VXNlcjM2NTQxNjY5",
        "avatar_url": "https://avatars.githubusercontent.com/u/36541669?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rajarshimaitra",
        "html_url": "https://github.com/rajarshimaitra",
        "followers_url": "https://api.github.com/users/rajarshimaitra/followers",
        "following_url": "https://api.github.com/users/rajarshimaitra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rajarshimaitra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rajarshimaitra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rajarshimaitra/subscriptions",
        "organizations_url": "https://api.github.com/users/rajarshimaitra/orgs",
        "repos_url": "https://api.github.com/users/rajarshimaitra/repos",
        "events_url": "https://api.github.com/users/rajarshimaitra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rajarshimaitra/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25515#pullrequestreview-1147655474",
      "submitted_at": "2022-10-19T18:36:34Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25515"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGJkZmUxMzRlZDZiMTNlNjliZWNjNDNjOWUwYThmOTU4ZTg5MzFiMGE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bdfe134ed6b13e69becc43c9e0a8f958e8931b0a",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/bdfe134ed6b13e69becc43c9e0a8f958e8931b0a",
      "tree": {
        "sha": "88886c1346370bab85591387bcc16da6178ebd9f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/88886c1346370bab85591387bcc16da6178ebd9f"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9efcd9668d143afa2e8213a7bacf94da7f645e4c",
          "sha": "9efcd9668d143afa2e8213a7bacf94da7f645e4c",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/9efcd9668d143afa2e8213a7bacf94da7f645e4c"
        }
      ],
      "message": "[test] Add unit test for version handshake",
      "committer": {
        "name": "dergoegge",
        "email": "n.goeggi@gmail.com",
        "date": "2022-10-21T13:13:18Z"
      },
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2022-02-10T22:11:57Z"
      },
      "sha": "bdfe134ed6b13e69becc43c9e0a8f958e8931b0a"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDljMDRjMzIxMDFjZDQ1OGMzMzZkZTFkNjZhZDI5NmRjN2YxY2YzNWQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9c04c32101cd458c336de1d66ad296dc7f1cf35d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/9c04c32101cd458c336de1d66ad296dc7f1cf35d",
      "tree": {
        "sha": "63561a1ddbccaa8ecc04d9d34fd605b3e0f28863",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/63561a1ddbccaa8ecc04d9d34fd605b3e0f28863"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bdfe134ed6b13e69becc43c9e0a8f958e8931b0a",
          "sha": "bdfe134ed6b13e69becc43c9e0a8f958e8931b0a",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/bdfe134ed6b13e69becc43c9e0a8f958e8931b0a"
        }
      ],
      "message": "[test] Add unit test for ping/pong logic",
      "committer": {
        "name": "dergoegge",
        "email": "n.goeggi@gmail.com",
        "date": "2022-10-21T13:13:18Z"
      },
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2022-02-12T12:12:02Z"
      },
      "sha": "9c04c32101cd458c336de1d66ad296dc7f1cf35d"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7640610985,
      "node_id": "HRFPE_lADOABII585M6xw_zwAAAAHHanip",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7640610985",
      "actor": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-10-21T13:17:46Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-10-21T22:26:55Z",
      "updated_at": "2022-10-21T22:26:55Z",
      "source": {
        "issue": {
          "id": 1344836194,
          "node_id": "PR_kwDOABII5849e6tz",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25880",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25880/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25880/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25880/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/25880",
          "number": 25880,
          "state": "closed",
          "state_reason": null,
          "title": "p2p: Make stalling timeout adaptive during IBD",
          "body": "During IBD, there is the following stalling mechanism if we can't proceed with assigning blocks from a 1024 lookahead window because all of these blocks are either already downloaded or in-flight: We'll mark the peer from which we expect the current block that would allow us to advance our tip (and thereby move the 1024 window ahead) as a possible staller. We then give this peer 2 more seconds to deliver a block (`BLOCK_STALLING_TIMEOUT`) and if it doesn't, disconnect it and assign the critical block we need to another peer. \r\n\r\nNow the problem is that this second peer is immediately marked as a potential staller using the same mechanism and given 2 seconds as well - if our own connection is so slow that it simply takes us more than 2 seconds to download this block, that peer will also be disconnected (and so on...), leading to repeated disconnections and no progress in IBD. This has been described in #9213, and I have observed this when doing IBD  on slower connections or with Tor - sometimes there would be several minutes without progress, where all we did was disconnect peers and find new ones.\r\n\r\nThe `2s` stalling timeout was introduced in #4468, when blocks weren't full and before Segwit increased the maximum possible physical size of blocks - so I think it made a lot of sense back then.\r\nBut it would be good to revisit this timeout now. \r\n\r\nThis PR makes the timout adaptive (idea by sipa):\r\nIf we disconnect a peer for stalling, we now double the timeout for the next peer (up to a maximum of 64s). If we connect a block, we half it again up to the old value of 2 seconds. That way, peers that are comparatively slower will still get disconnected, but long phases of disconnecting all peers shouldn't happen anymore.\r\n\r\nFixes #9213",
          "user": {
            "login": "mzumsande",
            "id": 48763452,
            "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
            "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mzumsande",
            "html_url": "https://github.com/mzumsande",
            "followers_url": "https://api.github.com/users/mzumsande/followers",
            "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
            "organizations_url": "https://api.github.com/users/mzumsande/orgs",
            "repos_url": "https://api.github.com/users/mzumsande/repos",
            "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/mzumsande/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 98298007,
              "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
              "name": "P2P",
              "color": "006b75",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 20,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/25880",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/25880.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/25880.patch"
          },
          "closed_at": "2023-01-27T06:54:24Z",
          "created_at": "2022-08-19T19:44:59Z",
          "updated_at": "2023-01-27T20:56:15Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "reviewed",
      "id": 1152333262,
      "node_id": "PRR_kwDOABII585ErzXO",
      "url": null,
      "actor": null,
      "commit_id": "9c04c32101cd458c336de1d66ad296dc7f1cf35d",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "tACK 9c04c32101cd458c336de1d66ad296dc7f1cf35d",
      "user": {
        "login": "rajarshimaitra",
        "id": 36541669,
        "node_id": "MDQ6VXNlcjM2NTQxNjY5",
        "avatar_url": "https://avatars.githubusercontent.com/u/36541669?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rajarshimaitra",
        "html_url": "https://github.com/rajarshimaitra",
        "followers_url": "https://api.github.com/users/rajarshimaitra/followers",
        "following_url": "https://api.github.com/users/rajarshimaitra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rajarshimaitra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rajarshimaitra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rajarshimaitra/subscriptions",
        "organizations_url": "https://api.github.com/users/rajarshimaitra/orgs",
        "repos_url": "https://api.github.com/users/rajarshimaitra/repos",
        "events_url": "https://api.github.com/users/rajarshimaitra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rajarshimaitra/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25515#pullrequestreview-1152333262",
      "submitted_at": "2022-10-23T16:33:56Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25515"
    },
    {
      "event": "reviewed",
      "id": 1152716506,
      "node_id": "PRR_kwDOABII585EtQ7a",
      "url": null,
      "actor": null,
      "commit_id": "bdfe134ed6b13e69becc43c9e0a8f958e8931b0a",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25515#pullrequestreview-1152716506",
      "submitted_at": "2022-10-24T08:17:50Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25515"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-01T22:39:34Z",
      "updated_at": "2022-11-01T22:39:34Z",
      "source": {
        "issue": {
          "id": 1431883486,
          "node_id": "PR_kwDOABII585B_agw",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26441",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26441/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26441/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26441/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/26441",
          "number": 26441,
          "state": "open",
          "state_reason": null,
          "title": "rpc, p2p: add `addpermissionflags` RPC and allow whitelisting outbound",
          "body": "Built this PR on top of #17167 (that's been closed due to inactivity but had some Concept ACK). So, it allows whitelisting outbound peers.\r\n\r\nThis PR adds a new RPC `addpermissionflags` to be able to set up permission flags -`whitelist` thru RPC, so we don't need to restart our node if we want to add new flags.\r\n\r\nE.g.\r\n```sh\r\n$ ./src/bitcoin-cli addpermissionflags [\"noban\", \"mempool\", \"in\", \"out\"] \"127.0.0.1\"\r\n```",
          "user": {
            "login": "brunoerg",
            "id": 19480819,
            "node_id": "MDQ6VXNlcjE5NDgwODE5",
            "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/brunoerg",
            "html_url": "https://github.com/brunoerg",
            "followers_url": "https://api.github.com/users/brunoerg/followers",
            "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
            "organizations_url": "https://api.github.com/users/brunoerg/orgs",
            "repos_url": "https://api.github.com/users/brunoerg/repos",
            "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/brunoerg/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 98279177,
              "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
              "name": "RPC/REST/ZMQ",
              "color": "0052cc",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 6,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26441",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/26441",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/26441.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/26441.patch"
          },
          "created_at": "2022-11-01T18:26:06Z",
          "updated_at": "2023-05-23T01:16:21Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "reviewed",
      "id": 1167285173,
      "node_id": "PRR_kwDOABII585Fk1u1",
      "url": null,
      "actor": null,
      "commit_id": "9c04c32101cd458c336de1d66ad296dc7f1cf35d",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Reviewed up to 9efcd9668d143afa2e8213a7bacf94da7f645e4c, still have to look a bit deeper how the unit tests exactly work. To get the ball rolling, maybe it's worth it to split up the PR into two, one for virtualising CConnman (which is I think is way easier to review and could be merged pretty fast), and one for the unit tests?\r\n\r\nFor the latter, [as Marco pointed out](https://github.com/bitcoin/bitcoin/pull/25515#discussion_r1003010273), it seems like there is potential for deduplication with the routines in `test/util/net.cpp`. Left also two minor review comments below.",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25515#pullrequestreview-1167285173",
      "submitted_at": "2022-11-03T16:44:09Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25515"
    },
    {
      "event": "reviewed",
      "id": 1166581907,
      "node_id": "PRR_kwDOABII585FiKCT",
      "url": null,
      "actor": null,
      "commit_id": "9c04c32101cd458c336de1d66ad296dc7f1cf35d",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25515#pullrequestreview-1166581907",
      "submitted_at": "2022-11-04T15:00:13Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25515"
    },
    {
      "event": "reviewed",
      "id": 1190434606,
      "node_id": "PRR_kwDOABII585G9Jcu",
      "url": null,
      "actor": null,
      "commit_id": "9c04c32101cd458c336de1d66ad296dc7f1cf35d",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "cr 9c04c32101cd458c336de1d66ad296dc7f1cf35d . Mostly ACK in my opinion, but i agree with some of the others suggestions ( most of @vasild 's and some other's I marked with a thumbs up)",
      "user": {
        "login": "hernanmarino",
        "id": 87907936,
        "node_id": "MDQ6VXNlcjg3OTA3OTM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/87907936?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hernanmarino",
        "html_url": "https://github.com/hernanmarino",
        "followers_url": "https://api.github.com/users/hernanmarino/followers",
        "following_url": "https://api.github.com/users/hernanmarino/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hernanmarino/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hernanmarino/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hernanmarino/subscriptions",
        "organizations_url": "https://api.github.com/users/hernanmarino/orgs",
        "repos_url": "https://api.github.com/users/hernanmarino/repos",
        "events_url": "https://api.github.com/users/hernanmarino/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hernanmarino/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25515#pullrequestreview-1190434606",
      "submitted_at": "2022-11-22T16:40:06Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25515"
    },
    {
      "event": "reviewed",
      "id": 1190475886,
      "node_id": "PRR_kwDOABII585G9Thu",
      "url": null,
      "actor": null,
      "commit_id": "9c04c32101cd458c336de1d66ad296dc7f1cf35d",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Tested ACK.\r\n\r\nI'm not very comfortable using `friend class` as it breaks encapsulation, perhaps it's something we could avoid at some point looking forward.",
      "user": {
        "login": "pablomartin4btc",
        "id": 110166421,
        "node_id": "U_kgDOBpEBlQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/110166421?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pablomartin4btc",
        "html_url": "https://github.com/pablomartin4btc",
        "followers_url": "https://api.github.com/users/pablomartin4btc/followers",
        "following_url": "https://api.github.com/users/pablomartin4btc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pablomartin4btc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pablomartin4btc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pablomartin4btc/subscriptions",
        "organizations_url": "https://api.github.com/users/pablomartin4btc/orgs",
        "repos_url": "https://api.github.com/users/pablomartin4btc/repos",
        "events_url": "https://api.github.com/users/pablomartin4btc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pablomartin4btc/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25515#pullrequestreview-1190475886",
      "submitted_at": "2022-11-22T17:05:50Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25515"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-26T17:04:16Z",
      "updated_at": "2022-11-26T17:04:16Z",
      "source": {
        "issue": {
          "id": 1465206057,
          "node_id": "PR_kwDOABII585Dvb10",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26583",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26583/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26583/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26583/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/26583",
          "number": 26583,
          "state": "closed",
          "state_reason": null,
          "title": "net: Make CNode message process queue private",
          "body": "This PR makes the `CNode` message processing queue private and provides an interface for polling it through `CConnman`. This would be useful in the context of #25515 to mock the message processing queue but also serves as a little improvement on the networking module interface.",
          "user": {
            "login": "dergoegge",
            "id": 8077169,
            "node_id": "MDQ6VXNlcjgwNzcxNjk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dergoegge",
            "html_url": "https://github.com/dergoegge",
            "followers_url": "https://api.github.com/users/dergoegge/followers",
            "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
            "organizations_url": "https://api.github.com/users/dergoegge/orgs",
            "repos_url": "https://api.github.com/users/dergoegge/repos",
            "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/dergoegge/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 98298007,
              "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
              "name": "P2P",
              "color": "006b75",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 3,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26583",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/26583",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/26583.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/26583.patch"
          },
          "closed_at": "2022-12-07T11:55:28Z",
          "created_at": "2022-11-26T17:04:16Z",
          "updated_at": "2022-12-07T11:55:28Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-28T15:56:10Z",
      "updated_at": "2022-11-28T15:56:10Z",
      "source": {
        "issue": {
          "id": 1463745958,
          "node_id": "PR_kwDOABII585DquNr",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26569",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26569/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26569/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26569/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/26569",
          "number": 26569,
          "state": "closed",
          "state_reason": null,
          "title": "p2p: Ensure transaction announcements are only queued for fully connected peers",
          "body": "`TxRelay::m_next_inv_send_time` is initialized to 0, which means that any txids in `TxRelay::m_tx_inventory_to_send` will be announced on the first call to `PeerManagerImpl::SendMessages` for a fully connected peer (i.e. it completed the version handshake).\r\n\r\nPrior to #21160, `TxRelay::m_tx_inventory_to_send` was guaranteed to be empty on the first `SendMessages` call, as transaction announcements were only queued for fully connected peers. #21160 replaced a `CConnman::ForEachNode` call with a loop over `PeerManagerImpl::m_peer_map`, in which the txid for a transaction to be relayed is added to `TxRelay::m_tx_inventory_to_send` for all peers. Even for those peers that have not completed the version handshake. Prior to the PR this was not the case as `ForEachNode` has a \"fully connected check\" before calling a function for each node.",
          "user": {
            "login": "dergoegge",
            "id": 8077169,
            "node_id": "MDQ6VXNlcjgwNzcxNjk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dergoegge",
            "html_url": "https://github.com/dergoegge",
            "followers_url": "https://api.github.com/users/dergoegge/followers",
            "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
            "organizations_url": "https://api.github.com/users/dergoegge/orgs",
            "repos_url": "https://api.github.com/users/dergoegge/repos",
            "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/dergoegge/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 98298007,
              "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
              "name": "P2P",
              "color": "006b75",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "milestone": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/59",
            "html_url": "https://github.com/bitcoin/bitcoin/milestone/59",
            "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/59/labels",
            "id": 8702801,
            "node_id": "MI_kwDOABII584AhMtR",
            "number": 59,
            "state": "closed",
            "title": "24.0.1",
            "description": "",
            "creator": {
              "login": "fanquake",
              "id": 863730,
              "node_id": "MDQ6VXNlcjg2MzczMA==",
              "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/fanquake",
              "html_url": "https://github.com/fanquake",
              "followers_url": "https://api.github.com/users/fanquake/followers",
              "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
              "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
              "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
              "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
              "organizations_url": "https://api.github.com/users/fanquake/orgs",
              "repos_url": "https://api.github.com/users/fanquake/repos",
              "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
              "received_events_url": "https://api.github.com/users/fanquake/received_events",
              "type": "User",
              "site_admin": false
            },
            "open_issues": 0,
            "closed_issues": 6,
            "created_at": "2022-11-29T15:44:19Z",
            "updated_at": "2022-12-07T10:57:12Z",
            "closed_at": "2022-12-07T10:57:12Z"
          },
          "locked": false,
          "comments": 7,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26569",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/26569",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/26569.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/26569.patch"
          },
          "closed_at": "2022-12-02T15:13:54Z",
          "created_at": "2022-11-24T19:42:47Z",
          "updated_at": "2022-12-03T00:10:44Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-28T20:35:35Z",
      "updated_at": "2022-11-28T20:35:35Z",
      "source": {
        "issue": {
          "id": 1466603610,
          "node_id": "PR_kwDOABII585Dz_Yh",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26590",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26590/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26590/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26590/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/26590",
          "number": 26590,
          "state": "closed",
          "state_reason": null,
          "title": "net, refactor: Kill proxy globals",
          "body": "This PR moves the proxy info globals into their own component `ProxyManager` which `CConnman` is made to hold an instance of.\r\n\r\nThe alternative here would be to move the proxy info data directly into `CConnman` but it seems a little nicer for testing to have this be a self contained component.",
          "user": {
            "login": "dergoegge",
            "id": 8077169,
            "node_id": "MDQ6VXNlcjgwNzcxNjk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dergoegge",
            "html_url": "https://github.com/dergoegge",
            "followers_url": "https://api.github.com/users/dergoegge/followers",
            "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
            "organizations_url": "https://api.github.com/users/dergoegge/orgs",
            "repos_url": "https://api.github.com/users/dergoegge/repos",
            "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/dergoegge/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 5,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26590",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/26590",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/26590.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/26590.patch"
          },
          "closed_at": "2022-12-07T11:52:53Z",
          "created_at": "2022-11-28T15:14:48Z",
          "updated_at": "2022-12-09T15:32:53Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "convert_to_draft",
      "id": 7934595986,
      "node_id": "CTDE_lADOABII585M6xw_zwAAAAHY8FOS",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7934595986",
      "actor": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-12-01T18:29:12Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-12-17T13:33:34Z",
      "updated_at": "2022-12-17T13:33:34Z",
      "source": {
        "issue": {
          "id": 1191033673,
          "node_id": "PR_kwDOABII5841jAnn",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24748",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24748/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24748/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24748/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/24748",
          "number": 24748,
          "state": "open",
          "state_reason": null,
          "title": "test/BIP324: functional tests for v2 P2P encryption",
          "body": "This PR introduces support for v2 P2P encryption(BIP 324) in the existing functional test framework and adds functional tests for the same.\r\n\r\nIt's built on top of:\r\n* #24545 \r\n* #24005\r\n\r\nThe first 2 commits help the CI pass since the secp256k1 subtree directory is touched by the parent PR 24545.\r\nThe next 2 commits bring in the mentioned parent PRs. They'll all be removed when the parent PRs get merged.\r\n\r\n### commits overview\r\n1. Introducing cryptographic constructs(HKDF, ECDH, ChaCha20, Poly1305, FSChaCha20 and FSChaCha20Poly1305) in the test framework to help with P2P encryption.\r\n2. Performing v2 P2P encryption in a v2 connection.\r\n    * introduces a new class `EncryptedP2PState` to store the keys, functions for performing the initial v2 handshake and encryption/decryption.\r\n    * this class is used by `P2PConnection` in inbound/outbound connections to perform the initial v2 handshake before the v1 version handshake. Only after the initial v2 handshake is performed do application layer P2P messages(version, verack etc..) get exchanged. (in a v2 connection)\r\n    * the encrypted P2P messages follow a different format - 3 byte length + 1-13 byte message_type + payload + 16 byte MAC\r\n    * includes support for testing decoy messages and v2 connection downgrade(using false advertisement - when a v2 node makes an outbound connection to a node which doesn't support v2 but is advertised as v2 by some malicious\r\nintermediary)\r\n\r\n### run the tests\r\n* functional test - `test/functional/p2p_v2_encrypted.py` `test/functional/p2p_v2_earlykeyresponse.py`\r\n\r\nI'm also super grateful to @ dhruv for his really valuable feedback on this branch.",
          "user": {
            "login": "stratospher",
            "id": 44024636,
            "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
            "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/stratospher",
            "html_url": "https://github.com/stratospher",
            "followers_url": "https://api.github.com/users/stratospher/followers",
            "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
            "organizations_url": "https://api.github.com/users/stratospher/orgs",
            "repos_url": "https://api.github.com/users/stratospher/repos",
            "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/stratospher/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 9,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24748",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/24748",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/24748.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/24748.patch"
          },
          "created_at": "2022-04-03T20:14:51Z",
          "updated_at": "2023-08-01T18:12:18Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-04T14:46:27Z",
      "updated_at": "2023-01-04T14:46:27Z",
      "source": {
        "issue": {
          "id": 1519092836,
          "node_id": "PR_kwDOABII585Godbn",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26812",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26812/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26812/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26812/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/26812",
          "number": 26812,
          "state": "open",
          "state_reason": null,
          "title": "test: add end-to-end tests for CConnman and PeerManager",
          "body": "Add fuzz and unit tests that write (fuzzed) data to a mocked socket and inspect what CConnman/PeerManager have written back to the socket, or check the internal state to verify that the behavior is as expected.\r\n\r\nThis is now possible, after most of https://github.com/bitcoin/bitcoin/pull/21878 has been merged - we don't do any syscalls (e.g. `connect()`, `recv()`) from the high level code and using a mocked socket allows testing the entire networking stack without opening actual network connections.",
          "user": {
            "login": "vasild",
            "id": 266751,
            "node_id": "MDQ6VXNlcjI2Njc1MQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vasild",
            "html_url": "https://github.com/vasild",
            "followers_url": "https://api.github.com/users/vasild/followers",
            "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
            "organizations_url": "https://api.github.com/users/vasild/orgs",
            "repos_url": "https://api.github.com/users/vasild/repos",
            "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/vasild/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 62963516,
              "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
              "name": "Tests",
              "color": "d4c5f9",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 17,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/26812",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/26812.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/26812.patch"
          },
          "created_at": "2023-01-04T14:39:37Z",
          "updated_at": "2023-08-07T09:14:01Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-06T21:01:19Z",
      "updated_at": "2023-01-06T21:01:19Z",
      "source": {
        "issue": {
          "id": 1522925178,
          "node_id": "PR_kwDOABII585G1ozs",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26837",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26837/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26837/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26837/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/26837",
          "number": 26837,
          "state": "closed",
          "state_reason": null,
          "title": "I2P network optimizations",
          "body": "* Reuse an I2P transient session instead of discarding it if we failed to connect to the desired peer. This means we never used the generated address (destination), whose creation is not cheap. This does not mean that we will use the same address for more than one peer.\r\n* Lower the number of tunnels for transient sessions.\r\n* Explicitly specify the number of tunnels for persistent sessions instead of relying on the defaults which differ between I2P routers. This way we get consistent behavior with all routers.\r\n\r\nAlleviates: https://github.com/bitcoin/bitcoin/issues/26754\r\n\r\n(I have not tested this with i2pd, yet)",
          "user": {
            "login": "vasild",
            "id": 266751,
            "node_id": "MDQ6VXNlcjI2Njc1MQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vasild",
            "html_url": "https://github.com/vasild",
            "followers_url": "https://api.github.com/users/vasild/followers",
            "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
            "organizations_url": "https://api.github.com/users/vasild/orgs",
            "repos_url": "https://api.github.com/users/vasild/repos",
            "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/vasild/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 27,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26837",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/26837",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/26837.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/26837.patch"
          },
          "closed_at": "2023-02-22T17:58:53Z",
          "created_at": "2023-01-06T17:43:48Z",
          "updated_at": "2023-02-27T14:10:30Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "labeled",
      "id": 8584297356,
      "node_id": "LE_lADOABII585M6xw_zwAAAAH_qfuM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8584297356",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-22T18:47:26Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 1440611051,
      "node_id": "IC_kwDOABII585V3frr",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1440611051",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-22T18:47:27Z",
      "updated_at": "2023-02-22T18:47:27Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--cf906140f33d8803c4a75a2196329ecb-->\n🐙 This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25515#issuecomment-1440611051",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25515"
    },
    {
      "event": "reviewed",
      "id": 1339941979,
      "node_id": "PRR_kwDOABII585P3eRb",
      "url": null,
      "actor": null,
      "commit_id": "bdfe134ed6b13e69becc43c9e0a8f958e8931b0a",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25515#pullrequestreview-1339941979",
      "submitted_at": "2023-03-14T17:49:26Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25515"
    },
    {
      "event": "commented",
      "id": 1515003669,
      "node_id": "IC_kwDOABII585aTR8V",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1515003669",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-19T16:12:23Z",
      "updated_at": "2023-04-19T16:12:23Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK on adding testing modulo the comments above and https://github.com/bitcoin/bitcoin/pull/25515#discussion_r1171566094. Built and ran a green make check on each commit. Needs rebase.",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25515#issuecomment-1515003669",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25515"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-20T16:06:11Z",
      "updated_at": "2023-04-20T16:06:11Z",
      "source": {
        "issue": {
          "id": 1677018572,
          "node_id": "I_kwDOABII585j9UXM",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27502",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27502/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27502/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27502/events",
          "html_url": "https://github.com/bitcoin/bitcoin/issues/27502",
          "number": 27502,
          "state": "open",
          "state_reason": null,
          "title": "meta: Isolated fuzzing of net processing",
          "body": "Efficient isolated fuzzing of our message processing code (net processing) would be very valuable. However, to make that deterministic, fast and fuzzer friendly it appears that extensive refactoring is required. There are three main blockers: module separation (net/net processing/validation split), determinism, performance.\r\n\r\nI am gonna use this issue to track and motivate the work that needs to be done. It would be great if we can achieve the same outcome with less refactoring but I don't see how at the moment. Open to suggestions and feedback.\r\n\r\n### Module separation\r\n\r\nOnce we have a clean separation between our net, net processing and validation modules, we can fuzz/test them in isolation to maximize the bug yield (🐛, 🪲, 🪳). By design, most fuzzing engines are not great at finding bugs when the scope of the targets is too large (e.g. fuzzing net, net processing and validation all at once).\r\n\r\n* net / net processing split\r\n  * Move application layer data from net to net processing ([#19398](https://github.com/bitcoin/bitcoin/issues/19398))\r\n    - [ ] https://github.com/bitcoin/bitcoin/pull/26621\r\n  * Define a clean interface between net processing <-> net \r\n    - [ ] https://github.com/bitcoin/bitcoin/pull/25268\r\n      - [x] https://github.com/bitcoin/bitcoin/pull/25500\r\n      - [ ] https://github.com/bitcoin/bitcoin/pull/25572\r\n    - [ ] https://github.com/bitcoin/bitcoin/pull/25515\r\n    - [ ] https://github.com/bitcoin/bitcoin/pull/27407\r\n    - [x] https://github.com/bitcoin/bitcoin/pull/27257\r\n* net processing / validation split (lots of overlap with kernel)\r\n  * Reduce `cs_main` usage in net processing\r\n    - [ ] https://github.com/bitcoin/bitcoin/pull/26151\r\n    - [x] https://github.com/bitcoin/bitcoin/pull/26140\r\n    - [ ] Kill CNodeState\r\n  * Define a clean interface between net processing <-> validation\r\n\r\n### Determinism\r\n\r\nNon-deterministic fuzz targets are less efficient at finding bugs and debugging non-reproducible bugs is annoying/costly.\r\n\r\n* All required components should be newly setup for each target execution\r\n  * Can be done currently using our testing setup suite but that's waaaay too slow for fuzzing.\r\n* Avoid  `GetRand()` (mock it?)\r\n* Avoid globals (are there any globals left in net processing?)\r\n\r\n### Performance\r\n\r\nFuzzing is a search, the faster the search - the better.\r\n\r\n* LevelDB (is in memory but still slow?)\r\n  * Probably solved by mocking out validation?\r\n* PeerManager construction is expensive because it requires multi megabyte allocations each time (mostly due to large bloom filters)\r\n* Disk usage\r\n  * Block storage\r\n    - [ ] https://github.com/bitcoin/bitcoin/pull/27125\r\n    - [ ] Create a mock of BlockManager for in memory block storage?\r\n  * BanMan (banlist is written to disk)\r\n\r\n### Misc\r\n\r\n* Decouple net processing from ArgsMan (args setup is slow)\r\n  * Allows to fuzz the peerman options without depending on the global args man \r\n  - [ ] https://github.com/bitcoin/bitcoin/pull/27499\r\n\r\n---\r\n\r\nPlease let me know if you think there are PRs that aren't listed here but should be.\r\n",
          "user": {
            "login": "dergoegge",
            "id": 8077169,
            "node_id": "MDQ6VXNlcjgwNzcxNjk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dergoegge",
            "html_url": "https://github.com/dergoegge",
            "followers_url": "https://api.github.com/users/dergoegge/followers",
            "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
            "organizations_url": "https://api.github.com/users/dergoegge/orgs",
            "repos_url": "https://api.github.com/users/dergoegge/repos",
            "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/dergoegge/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 64584,
              "node_id": "MDU6TGFiZWw2NDU4NA==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Brainstorming",
              "name": "Brainstorming",
              "color": "ebd775",
              "default": false
            },
            {
              "id": 62963516,
              "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
              "name": "Tests",
              "color": "d4c5f9",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 2,
          "created_at": "2023-04-20T16:06:11Z",
          "updated_at": "2023-04-21T09:23:08Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 1639167459,
      "node_id": "IC_kwDOABII585hs7Xj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1639167459",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-18T02:05:54Z",
      "updated_at": "2023-07-18T02:05:54Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--13523179cfe9479db18ec6c5d236f789-->\nThere hasn't been much activity lately and the patch still needs rebase. What is the status here?\n\n* Is it still relevant? ➡️ Please solve the conflicts to make it ready for review and to ensure the CI passes.\n* Is it no longer relevant? ➡️ Please close.\n* Did the author lose interest or time to work on this? ➡️ Please close it and mark it 'Up for grabs' with the label, so that it can be picked up in the future.\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25515#issuecomment-1639167459",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25515"
    },
    {
      "event": "commented",
      "id": 1673322410,
      "node_id": "IC_kwDOABII585jvN-q",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1673322410",
      "actor": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-10T14:23:28Z",
      "updated_at": "2023-08-10T14:23:28Z",
      "author_association": "MEMBER",
      "body": "Closing for now, I want to do some interface work before adding the tests and will open a large meta PR soon that includes all the refactoring + tests at the end.",
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25515#issuecomment-1673322410",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25515"
    },
    {
      "event": "closed",
      "id": 10060155676,
      "node_id": "CE_lADOABII585M6xw_zwAAAAJXocsc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10060155676",
      "actor": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-10T14:23:28Z"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/996975101",
      "pull_request_review_id": 1144030805,
      "id": 996975101,
      "node_id": "PRRC_kwDOABII5847bKH9",
      "diff_hunk": "@@ -0,0 +1,307 @@\n+// Copyright (c) 2011-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <arith_uint256.h>\n+#include <banman.h>\n+#include <chainparams.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <netmessagemaker.h>\n+#include <pubkey.h>\n+#include <script/sign.h>\n+#include <script/signingprovider.h>\n+#include <script/standard.h>\n+#include <serialize.h>\n+#include <span.h>\n+#include <test/util/net.h>\n+#include <test/util/setup_common.h>\n+#include <util/string.h>\n+#include <util/system.h>\n+#include <util/time.h>\n+#include <timedata.h>\n+#include <validation.h>\n+\n+#include <array>\n+#include <optional>\n+#include <stdint.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+static CService ip(uint32_t i)\n+{\n+    struct in_addr s;\n+    s.s_addr = i;\n+    return CService(CNetAddr(s), Params().GetDefaultPort());\n+}\n+\n+static void AdvanceMockTime(int64_t delta)\n+{\n+    auto time_before{GetMockTime()};\n+    SetMockTime(time_before + std::chrono::seconds(delta));\n+}\n+\n+/** Mock the connections interface. */\n+class ConnectionsInterfaceMock : public ConnectionsInterface\n+{\n+public:\n+    bool ForNode(NodeId id, std::function<bool(CNode* pnode)> func) override { return true; };\n+    using NodeFn = std::function<void(CNode*)>;\n+    void ForEachNode(const NodeFn& func) override {};\n+    void ForEachNode(const NodeFn& func) const override {};\n+    void PushMessage(CNode* pnode, CSerializedNetMsg&& msg) override;\n+    CSipHasher GetDeterministicRandomizer(uint64_t id) const override { return {0, 0}; };\n+    void WakeMessageHandler() override {};\n+    bool OutboundTargetReached(bool historicalBlockServingLimit) const override { return true; };\n+    std::vector<CAddress> GetAddresses(size_t max_addresses,\n+                                       size_t max_pct,\n+                                       std::optional<Network> network) const override { return {}; };\n+    std::vector<CAddress> GetAddresses(CNode& requestor, size_t max_addresses, size_t max_pct) override { return {}; };\n+    bool DisconnectNode(const CNetAddr& addr) override { return true; };\n+    unsigned int GetReceiveFloodSize() const override { return 0; };\n+    int GetExtraFullOutboundCount() const override { return 0; };\n+    int GetExtraBlockRelayCount() const override { return 0; };\n+    void SetTryNewOutboundPeer(bool flag) override {};\n+    bool GetTryNewOutboundPeer() const override { return true; };\n+    bool GetNetworkActive() const override { return true; };\n+    bool GetUseAddrmanOutgoing() const override { return true; };\n+    void StartExtraBlockRelayPeers() override {};\n+    bool ShouldRunInactivityChecks(const CNode& node, std::chrono::seconds now) const override { return true; };\n+    bool CheckIncomingNonce(uint64_t nonce) override { return true; };\n+\n+    void NodeReceiveMsgBytes(CNode& node, Span<const uint8_t> msg_bytes, bool& complete) const;\n+    bool ReceiveMsgFrom(CNode& node, CSerializedNetMsg& ser_msg) const;\n+    void OnPing(CDataStream& data);\n+\n+    virtual ~ConnectionsInterfaceMock() {}\n+\n+    /** Count of number of each message type sent */\n+    std::map<std::string, uint64_t> m_message_types_sent;\n+    /** Most recent ping nonce received. */\n+    uint64_t m_ping_nonce{0};\n+\n+};\n+\n+void ConnectionsInterfaceMock::PushMessage(CNode* pnode, CSerializedNetMsg&& msg)\n+{\n+    BOOST_TEST_MESSAGE(strprintf(\"received message %s from peer %d\", msg.m_type, pnode->GetId()));",
      "path": "src/test/peerman_tests.cpp",
      "position": null,
      "original_position": 87,
      "commit_id": "9c04c32101cd458c336de1d66ad296dc7f1cf35d",
      "original_commit_id": "f98a4e8d891dd7374ef7dc4c723797bf0705075f",
      "in_reply_to_id": null,
      "user": {
        "login": "rajarshimaitra",
        "id": 36541669,
        "node_id": "MDQ6VXNlcjM2NTQxNjY5",
        "avatar_url": "https://avatars.githubusercontent.com/u/36541669?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rajarshimaitra",
        "html_url": "https://github.com/rajarshimaitra",
        "followers_url": "https://api.github.com/users/rajarshimaitra/followers",
        "following_url": "https://api.github.com/users/rajarshimaitra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rajarshimaitra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rajarshimaitra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rajarshimaitra/subscriptions",
        "organizations_url": "https://api.github.com/users/rajarshimaitra/orgs",
        "repos_url": "https://api.github.com/users/rajarshimaitra/repos",
        "events_url": "https://api.github.com/users/rajarshimaitra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rajarshimaitra/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Maybe I am missing something, but shouldn't this be `sending message %s to peer %d`?? ",
      "created_at": "2022-10-17T12:03:30Z",
      "updated_at": "2022-10-17T12:30:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25515#discussion_r996975101",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/996975101"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25515"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 87,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/996987379",
      "pull_request_review_id": 1144030805,
      "id": 996987379,
      "node_id": "PRRC_kwDOABII5847bNHz",
      "diff_hunk": "@@ -0,0 +1,307 @@\n+// Copyright (c) 2011-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <arith_uint256.h>\n+#include <banman.h>\n+#include <chainparams.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <netmessagemaker.h>\n+#include <pubkey.h>\n+#include <script/sign.h>\n+#include <script/signingprovider.h>\n+#include <script/standard.h>\n+#include <serialize.h>\n+#include <span.h>\n+#include <test/util/net.h>\n+#include <test/util/setup_common.h>\n+#include <util/string.h>\n+#include <util/system.h>\n+#include <util/time.h>\n+#include <timedata.h>\n+#include <validation.h>\n+\n+#include <array>\n+#include <optional>\n+#include <stdint.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+static CService ip(uint32_t i)\n+{\n+    struct in_addr s;\n+    s.s_addr = i;\n+    return CService(CNetAddr(s), Params().GetDefaultPort());\n+}\n+\n+static void AdvanceMockTime(int64_t delta)\n+{\n+    auto time_before{GetMockTime()};\n+    SetMockTime(time_before + std::chrono::seconds(delta));\n+}\n+\n+/** Mock the connections interface. */\n+class ConnectionsInterfaceMock : public ConnectionsInterface\n+{\n+public:\n+    bool ForNode(NodeId id, std::function<bool(CNode* pnode)> func) override { return true; };\n+    using NodeFn = std::function<void(CNode*)>;\n+    void ForEachNode(const NodeFn& func) override {};\n+    void ForEachNode(const NodeFn& func) const override {};\n+    void PushMessage(CNode* pnode, CSerializedNetMsg&& msg) override;\n+    CSipHasher GetDeterministicRandomizer(uint64_t id) const override { return {0, 0}; };\n+    void WakeMessageHandler() override {};\n+    bool OutboundTargetReached(bool historicalBlockServingLimit) const override { return true; };\n+    std::vector<CAddress> GetAddresses(size_t max_addresses,\n+                                       size_t max_pct,\n+                                       std::optional<Network> network) const override { return {}; };\n+    std::vector<CAddress> GetAddresses(CNode& requestor, size_t max_addresses, size_t max_pct) override { return {}; };\n+    bool DisconnectNode(const CNetAddr& addr) override { return true; };\n+    unsigned int GetReceiveFloodSize() const override { return 0; };\n+    int GetExtraFullOutboundCount() const override { return 0; };\n+    int GetExtraBlockRelayCount() const override { return 0; };\n+    void SetTryNewOutboundPeer(bool flag) override {};\n+    bool GetTryNewOutboundPeer() const override { return true; };\n+    bool GetNetworkActive() const override { return true; };\n+    bool GetUseAddrmanOutgoing() const override { return true; };\n+    void StartExtraBlockRelayPeers() override {};\n+    bool ShouldRunInactivityChecks(const CNode& node, std::chrono::seconds now) const override { return true; };\n+    bool CheckIncomingNonce(uint64_t nonce) override { return true; };\n+\n+    void NodeReceiveMsgBytes(CNode& node, Span<const uint8_t> msg_bytes, bool& complete) const;\n+    bool ReceiveMsgFrom(CNode& node, CSerializedNetMsg& ser_msg) const;\n+    void OnPing(CDataStream& data);\n+\n+    virtual ~ConnectionsInterfaceMock() {}\n+\n+    /** Count of number of each message type sent */\n+    std::map<std::string, uint64_t> m_message_types_sent;\n+    /** Most recent ping nonce received. */\n+    uint64_t m_ping_nonce{0};\n+\n+};\n+\n+void ConnectionsInterfaceMock::PushMessage(CNode* pnode, CSerializedNetMsg&& msg)\n+{\n+    BOOST_TEST_MESSAGE(strprintf(\"received message %s from peer %d\", msg.m_type, pnode->GetId()));\n+    m_message_types_sent[msg.m_type]++;\n+\n+    CDataStream data{msg.data, SER_NETWORK, PROTOCOL_VERSION};\n+    if (msg.m_type == NetMsgType::PING) OnPing(data);\n+}\n+\n+void ConnectionsInterfaceMock::OnPing(CDataStream& data)\n+{\n+    data >> m_ping_nonce;\n+    BOOST_TEST_MESSAGE(strprintf(\"received ping. Nonce:%d\", m_ping_nonce));\n+}\n+\n+void ConnectionsInterfaceMock::NodeReceiveMsgBytes(CNode& node, Span<const uint8_t> msg_bytes, bool& complete) const\n+{\n+    assert(node.ReceiveMsgBytes(msg_bytes, complete));\n+    if (complete) {\n+        size_t nSizeAdded = 0;\n+        auto it(node.vRecvMsg.begin());\n+        for (; it != node.vRecvMsg.end(); ++it) {\n+            // vRecvMsg contains only completed CNetMessage\n+            // the single possible partially deserialized message are held by TransportDeserializer\n+            nSizeAdded += it->m_raw_message_size;\n+        }\n+        {\n+            LOCK(node.cs_vProcessMsg);\n+            node.vProcessMsg.splice(node.vProcessMsg.end(), node.vRecvMsg, node.vRecvMsg.begin(), it);\n+            node.nProcessQueueSize += nSizeAdded;\n+        }\n+    }\n+}\n+\n+bool ConnectionsInterfaceMock::ReceiveMsgFrom(CNode& node, CSerializedNetMsg& ser_msg) const\n+{\n+    std::vector<uint8_t> ser_msg_header;\n+    node.m_serializer->prepareForTransport(ser_msg, ser_msg_header);\n+\n+    bool complete;\n+    NodeReceiveMsgBytes(node, ser_msg_header, complete);\n+    NodeReceiveMsgBytes(node, ser_msg.data, complete);\n+    return complete;\n+}\n+\n+BOOST_FIXTURE_TEST_SUITE(peerman_tests, TestingSetup)\n+\n+static void SendMessage(ConnectionsInterfaceMock& connman, PeerManager& peerman, CNode& node, CSerializedNetMsg& msg)\n+{\n+    std::atomic<bool> interrupt{false};\n+    (void)connman.ReceiveMsgFrom(node, msg);\n+    node.fPauseSend = false;\n+    LOCK(NetEventsInterface::g_msgproc_mutex);\n+    peerman.ProcessMessages(&node, interrupt);\n+    peerman.SendMessages(&node);\n+}\n+\n+using HandshakeHookFn = std::function<void(ConnectionsInterfaceMock& connman, PeerManager& peerman, CNode& node)>;\n+static void Handshake(\n+    ConnectionsInterfaceMock& connman, PeerManager& peerman,\n+    CNode& node, ServiceFlags their_services,\n+    HandshakeHookFn pre_verack_hook = [](ConnectionsInterfaceMock& connman, PeerManager& peerman, CNode& node) {}) noexcept\n+{\n+    // Send version message\n+    const CNetMsgMaker mm{0};\n+    CSerializedNetMsg msg_version{\n+        mm.Make(NetMsgType::VERSION,\n+                PROTOCOL_VERSION,                              // current p2p version\n+                Using<CustomUintFormatter<8>>(their_services), // their service flags\n+                GetTime(),                                     // dummy time\n+                int64_t{},                                     // ignored service bits\n+                CService{},                                    // dummy\n+                int64_t{},                                     // ignored service bits\n+                CService{},                                    // ignored\n+                uint64_t{1},                                   // dummy nonce\n+                std::string{},                                 // dummy subver\n+                int32_t{},                                     // dummy starting_height\n+                true),                                         // fRelay\n+    };\n+    SendMessage(connman, peerman, node, msg_version);\n+    BOOST_CHECK(!node.fDisconnect);\n+    BOOST_CHECK_EQUAL(node.nVersion, PROTOCOL_VERSION);\n+    BOOST_CHECK_EQUAL(node.GetCommonVersion(), PROTOCOL_VERSION);\n+    CNodeStateStats stats;\n+    bool ret = peerman.GetNodeStateStats(node.GetId(), stats);\n+    BOOST_CHECK_EQUAL(ret, true);\n+    BOOST_CHECK_EQUAL(stats.their_services, their_services);\n+\n+    pre_verack_hook(connman, peerman, node);\n+\n+    // Send verack message\n+    CSerializedNetMsg msg_verack{mm.Make(NetMsgType::VERACK)};\n+    SendMessage(connman, peerman, node, msg_verack);\n+    BOOST_CHECK_EQUAL(node.fSuccessfullyConnected, true);\n+\n+    TestOnlyResetTimeData();\n+}\n+\n+BOOST_AUTO_TEST_CASE(version_handshake)\n+{\n+    auto connman = std::make_unique<ConnectionsInterfaceMock>();\n+    auto peerman = PeerManager::make(*connman, *m_node.addrman, nullptr,\n+                                     *m_node.chainman, *m_node.mempool, false);\n+\n+    // Mock an outbound peer\n+    CAddress addr1(ip(0xa0b0c001), NODE_NONE);\n+    CNode node{/*id=*/0, /*sock=*/nullptr, addr1, /*nKeyedNetGroupIn=*/0, /*nLocalHostNonceIn=*/0, CAddress(),\n+               /*addrNameIn=*/\"\", ConnectionType::OUTBOUND_FULL_RELAY, /*inbound_onion=*/false};\n+\n+    peerman->InitializeNode(node, /*our_services=*/ServiceFlags(NODE_NETWORK | NODE_WITNESS));\n+    Handshake(*connman, *peerman, node, /*their_services=*/ServiceFlags(NODE_NETWORK | NODE_WITNESS));\n+\n+    BOOST_CHECK_EQUAL(connman->m_message_types_sent[NetMsgType::VERSION], 1);\n+    BOOST_CHECK_EQUAL(connman->m_message_types_sent[NetMsgType::WTXIDRELAY], 1);\n+    BOOST_CHECK_EQUAL(connman->m_message_types_sent[NetMsgType::SENDADDRV2], 1);\n+    BOOST_CHECK_EQUAL(connman->m_message_types_sent[NetMsgType::VERACK], 1);\n+    BOOST_CHECK_EQUAL(connman->m_message_types_sent[NetMsgType::GETADDR], 1);\n+    BOOST_CHECK_EQUAL(connman->m_message_types_sent[NetMsgType::SENDCMPCT], 1);\n+    BOOST_CHECK_EQUAL(connman->m_message_types_sent[NetMsgType::GETHEADERS], 1);\n+    BOOST_CHECK_EQUAL(connman->m_message_types_sent[NetMsgType::FEEFILTER], 1);\n+\n+    peerman->FinalizeNode(node);\n+}\n+\n+static void CheckPingTimes(CNode& node, PeerManager& peerman,\n+                           std::chrono::microseconds min_ping_time, std::chrono::microseconds last_ping_time, std::chrono::microseconds ping_wait)\n+{\n+    // Check min and last ping times\n+    BOOST_CHECK_EQUAL(node.m_min_ping_time.load().count(), min_ping_time.count());\n+    BOOST_CHECK_EQUAL(node.m_last_ping_time.load().count(), last_ping_time.count());\n+\n+    // Check if and how long current ping has been pending\n+    CNodeStateStats stats;\n+    peerman.GetNodeStateStats(node.GetId(), stats);\n+    BOOST_CHECK_EQUAL(stats.m_ping_wait.count(), ping_wait.count());\n+}\n+\n+static void SendPong(CNode& node, ConnectionsInterfaceMock& connman,\n+                     PeerManager& peerman, std::optional<int64_t> nonce = {})\n+{\n+    const CNetMsgMaker mm{0};\n+    CSerializedNetMsg msg_pong = nonce ? mm.Make(NetMsgType::PONG, nonce.value()) : mm.Make(NetMsgType::PONG);\n+    SendMessage(connman, peerman, node, msg_pong);\n+}\n+\n+BOOST_AUTO_TEST_CASE(ping)\n+{\n+    // See PING_INTERVAL in net_processing.cpp\n+    constexpr int64_t PING_INTERVAL{2 * 60};\n+\n+    auto connman = std::make_unique<ConnectionsInterfaceMock>();\n+    auto peerman = PeerManager::make(*connman, *m_node.addrman, nullptr,\n+                                     *m_node.chainman, *m_node.mempool, false);\n+\n+    // Mock an outbound peer\n+    CNode node{/*id=*/0, /*sock=*/nullptr, CAddress(), /*nKeyedNetGroupIn=*/0, /*nLocalHostNonceIn=*/0, CAddress(),\n+               /*addrNameIn=*/\"\", ConnectionType::OUTBOUND_FULL_RELAY, /*inbound_onion=*/false};\n+\n+    peerman->InitializeNode(node, /*our_services=*/ServiceFlags(NODE_NETWORK | NODE_WITNESS));\n+\n+    // Use mock time to control pings from node\n+    SetMockTime(GetTime());\n+\n+    Handshake(*connman, *peerman, node, /*their_services=*/ServiceFlags(NODE_NETWORK | NODE_WITNESS));\n+\n+    BOOST_TEST_MESSAGE(\"Advanced mocktime and check that ping is sent after connection is established\");\n+    AdvanceMockTime(1);\n+    BOOST_CHECK_EQUAL(connman->m_message_types_sent[NetMsgType::PING], 1);\n+\n+    // The ping nonce should be non-zero\n+    BOOST_CHECK(connman->m_ping_nonce != 0);\n+\n+    // No pong response has been received yet, and current ping is outstanding\n+    CheckPingTimes(node, *peerman, std::chrono::microseconds::max(), 0us, 1s);\n+\n+    BOOST_TEST_MESSAGE(\"Reply without nonce cancels ping\");\n+    SendPong(node, *connman, *peerman, std::nullopt);\n+\n+    // Ping metrics have not been updated on the CNode object, and there is no ping outstanding\n+    CheckPingTimes(node, *peerman, std::chrono::microseconds::max(), 0us, 0us);\n+\n+    BOOST_TEST_MESSAGE(\"Reply without ping\");\n+    SendPong(node, *connman, *peerman, 0);\n+\n+    // Ping metrics have not been updated on the CNode object, and there is no ping outstanding\n+    CheckPingTimes(node, *peerman, std::chrono::microseconds::max(), 0us, 0us);\n+\n+    // Wait for next ping\n+    AdvanceMockTime(PING_INTERVAL + 1);\n+    connman->m_message_types_sent[NetMsgType::PING] = 0;\n+    WITH_LOCK(NetEventsInterface::g_msgproc_mutex, peerman->SendMessages(&node));\n+    BOOST_CHECK_EQUAL(connman->m_message_types_sent[NetMsgType::PING], 1);\n+\n+    BOOST_TEST_MESSAGE(\"Reply with wrong nonce does not cancel ping\");\n+    SendPong(node, *connman, *peerman, connman->m_ping_nonce + 1);\n+    AdvanceMockTime(1);\n+\n+    // Ping metrics have not been updated on the CNode object, and there is a ping outstandgin",
      "path": "src/test/peerman_tests.cpp",
      "position": null,
      "original_position": 282,
      "commit_id": "9c04c32101cd458c336de1d66ad296dc7f1cf35d",
      "original_commit_id": "f98a4e8d891dd7374ef7dc4c723797bf0705075f",
      "in_reply_to_id": null,
      "user": {
        "login": "rajarshimaitra",
        "id": 36541669,
        "node_id": "MDQ6VXNlcjM2NTQxNjY5",
        "avatar_url": "https://avatars.githubusercontent.com/u/36541669?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rajarshimaitra",
        "html_url": "https://github.com/rajarshimaitra",
        "followers_url": "https://api.github.com/users/rajarshimaitra/followers",
        "following_url": "https://api.github.com/users/rajarshimaitra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rajarshimaitra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rajarshimaitra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rajarshimaitra/subscriptions",
        "organizations_url": "https://api.github.com/users/rajarshimaitra/orgs",
        "repos_url": "https://api.github.com/users/rajarshimaitra/repos",
        "events_url": "https://api.github.com/users/rajarshimaitra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rajarshimaitra/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit:\r\n```suggestion\r\n    // Ping metrics have not been updated on the CNode object, and there is a ping outstanding\r\n```",
      "created_at": "2022-10-17T12:17:05Z",
      "updated_at": "2022-10-17T12:30:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25515#discussion_r996987379",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/996987379"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25515"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 282,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/999513116",
      "pull_request_review_id": 1147655474,
      "id": 999513116,
      "node_id": "PRRC_kwDOABII5847k1wc",
      "diff_hunk": "@@ -0,0 +1,307 @@\n+// Copyright (c) 2011-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <arith_uint256.h>\n+#include <banman.h>\n+#include <chainparams.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <netmessagemaker.h>\n+#include <pubkey.h>\n+#include <script/sign.h>\n+#include <script/signingprovider.h>\n+#include <script/standard.h>\n+#include <serialize.h>\n+#include <span.h>\n+#include <test/util/net.h>\n+#include <test/util/setup_common.h>\n+#include <util/string.h>\n+#include <util/system.h>\n+#include <util/time.h>\n+#include <timedata.h>\n+#include <validation.h>\n+\n+#include <array>\n+#include <optional>\n+#include <stdint.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+static CService ip(uint32_t i)\n+{\n+    struct in_addr s;\n+    s.s_addr = i;\n+    return CService(CNetAddr(s), Params().GetDefaultPort());\n+}\n+\n+static void AdvanceMockTime(int64_t delta)\n+{\n+    auto time_before{GetMockTime()};\n+    SetMockTime(time_before + std::chrono::seconds(delta));\n+}\n+\n+/** Mock the connections interface. */\n+class ConnectionsInterfaceMock : public ConnectionsInterface\n+{\n+public:\n+    bool ForNode(NodeId id, std::function<bool(CNode* pnode)> func) override { return true; };\n+    using NodeFn = std::function<void(CNode*)>;\n+    void ForEachNode(const NodeFn& func) override {};\n+    void ForEachNode(const NodeFn& func) const override {};\n+    void PushMessage(CNode* pnode, CSerializedNetMsg&& msg) override;\n+    CSipHasher GetDeterministicRandomizer(uint64_t id) const override { return {0, 0}; };\n+    void WakeMessageHandler() override {};\n+    bool OutboundTargetReached(bool historicalBlockServingLimit) const override { return true; };\n+    std::vector<CAddress> GetAddresses(size_t max_addresses,\n+                                       size_t max_pct,\n+                                       std::optional<Network> network) const override { return {}; };\n+    std::vector<CAddress> GetAddresses(CNode& requestor, size_t max_addresses, size_t max_pct) override { return {}; };\n+    bool DisconnectNode(const CNetAddr& addr) override { return true; };\n+    unsigned int GetReceiveFloodSize() const override { return 0; };\n+    int GetExtraFullOutboundCount() const override { return 0; };\n+    int GetExtraBlockRelayCount() const override { return 0; };\n+    void SetTryNewOutboundPeer(bool flag) override {};\n+    bool GetTryNewOutboundPeer() const override { return true; };\n+    bool GetNetworkActive() const override { return true; };\n+    bool GetUseAddrmanOutgoing() const override { return true; };\n+    void StartExtraBlockRelayPeers() override {};\n+    bool ShouldRunInactivityChecks(const CNode& node, std::chrono::seconds now) const override { return true; };\n+    bool CheckIncomingNonce(uint64_t nonce) override { return true; };\n+\n+    void NodeReceiveMsgBytes(CNode& node, Span<const uint8_t> msg_bytes, bool& complete) const;\n+    bool ReceiveMsgFrom(CNode& node, CSerializedNetMsg& ser_msg) const;\n+    void OnPing(CDataStream& data);\n+\n+    virtual ~ConnectionsInterfaceMock() {}\n+\n+    /** Count of number of each message type sent */\n+    std::map<std::string, uint64_t> m_message_types_sent;\n+    /** Most recent ping nonce received. */\n+    uint64_t m_ping_nonce{0};\n+\n+};\n+\n+void ConnectionsInterfaceMock::PushMessage(CNode* pnode, CSerializedNetMsg&& msg)\n+{\n+    BOOST_TEST_MESSAGE(strprintf(\"received message %s from peer %d\", msg.m_type, pnode->GetId()));\n+    m_message_types_sent[msg.m_type]++;\n+\n+    CDataStream data{msg.data, SER_NETWORK, PROTOCOL_VERSION};\n+    if (msg.m_type == NetMsgType::PING) OnPing(data);\n+}\n+\n+void ConnectionsInterfaceMock::OnPing(CDataStream& data)\n+{\n+    data >> m_ping_nonce;\n+    BOOST_TEST_MESSAGE(strprintf(\"received ping. Nonce:%d\", m_ping_nonce));\n+}\n+\n+void ConnectionsInterfaceMock::NodeReceiveMsgBytes(CNode& node, Span<const uint8_t> msg_bytes, bool& complete) const\n+{\n+    assert(node.ReceiveMsgBytes(msg_bytes, complete));",
      "path": "src/test/peerman_tests.cpp",
      "position": 102,
      "original_position": 102,
      "commit_id": "9c04c32101cd458c336de1d66ad296dc7f1cf35d",
      "original_commit_id": "f98a4e8d891dd7374ef7dc4c723797bf0705075f",
      "in_reply_to_id": null,
      "user": {
        "login": "rajarshimaitra",
        "id": 36541669,
        "node_id": "MDQ6VXNlcjM2NTQxNjY5",
        "avatar_url": "https://avatars.githubusercontent.com/u/36541669?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rajarshimaitra",
        "html_url": "https://github.com/rajarshimaitra",
        "followers_url": "https://api.github.com/users/rajarshimaitra/followers",
        "following_url": "https://api.github.com/users/rajarshimaitra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rajarshimaitra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rajarshimaitra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rajarshimaitra/subscriptions",
        "organizations_url": "https://api.github.com/users/rajarshimaitra/orgs",
        "repos_url": "https://api.github.com/users/rajarshimaitra/repos",
        "events_url": "https://api.github.com/users/rajarshimaitra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rajarshimaitra/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Do we need to pass in the `complete` flag here?? Seems like we are overriding it anyway into `node.ReceiveMsgBytes`.. So can't we just initiate it locally??",
      "created_at": "2022-10-19T14:09:54Z",
      "updated_at": "2022-10-19T18:36:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25515#discussion_r999513116",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/999513116"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25515"
        }
      },
      "start_line": 100,
      "original_start_line": 100,
      "start_side": "RIGHT",
      "line": 102,
      "original_line": 102,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1001774399",
      "pull_request_review_id": 1150940516,
      "id": 1001774399,
      "node_id": "PRRC_kwDOABII5847td0_",
      "diff_hunk": "@@ -0,0 +1,307 @@\n+// Copyright (c) 2011-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <arith_uint256.h>\n+#include <banman.h>\n+#include <chainparams.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <netmessagemaker.h>\n+#include <pubkey.h>\n+#include <script/sign.h>\n+#include <script/signingprovider.h>\n+#include <script/standard.h>\n+#include <serialize.h>\n+#include <span.h>\n+#include <test/util/net.h>\n+#include <test/util/setup_common.h>\n+#include <util/string.h>\n+#include <util/system.h>\n+#include <util/time.h>\n+#include <timedata.h>\n+#include <validation.h>\n+\n+#include <array>\n+#include <optional>\n+#include <stdint.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+static CService ip(uint32_t i)\n+{\n+    struct in_addr s;\n+    s.s_addr = i;\n+    return CService(CNetAddr(s), Params().GetDefaultPort());\n+}\n+\n+static void AdvanceMockTime(int64_t delta)\n+{\n+    auto time_before{GetMockTime()};\n+    SetMockTime(time_before + std::chrono::seconds(delta));\n+}\n+\n+/** Mock the connections interface. */\n+class ConnectionsInterfaceMock : public ConnectionsInterface\n+{\n+public:\n+    bool ForNode(NodeId id, std::function<bool(CNode* pnode)> func) override { return true; };\n+    using NodeFn = std::function<void(CNode*)>;\n+    void ForEachNode(const NodeFn& func) override {};\n+    void ForEachNode(const NodeFn& func) const override {};\n+    void PushMessage(CNode* pnode, CSerializedNetMsg&& msg) override;\n+    CSipHasher GetDeterministicRandomizer(uint64_t id) const override { return {0, 0}; };\n+    void WakeMessageHandler() override {};\n+    bool OutboundTargetReached(bool historicalBlockServingLimit) const override { return true; };\n+    std::vector<CAddress> GetAddresses(size_t max_addresses,\n+                                       size_t max_pct,\n+                                       std::optional<Network> network) const override { return {}; };\n+    std::vector<CAddress> GetAddresses(CNode& requestor, size_t max_addresses, size_t max_pct) override { return {}; };\n+    bool DisconnectNode(const CNetAddr& addr) override { return true; };\n+    unsigned int GetReceiveFloodSize() const override { return 0; };\n+    int GetExtraFullOutboundCount() const override { return 0; };\n+    int GetExtraBlockRelayCount() const override { return 0; };\n+    void SetTryNewOutboundPeer(bool flag) override {};\n+    bool GetTryNewOutboundPeer() const override { return true; };\n+    bool GetNetworkActive() const override { return true; };\n+    bool GetUseAddrmanOutgoing() const override { return true; };\n+    void StartExtraBlockRelayPeers() override {};\n+    bool ShouldRunInactivityChecks(const CNode& node, std::chrono::seconds now) const override { return true; };\n+    bool CheckIncomingNonce(uint64_t nonce) override { return true; };\n+\n+    void NodeReceiveMsgBytes(CNode& node, Span<const uint8_t> msg_bytes, bool& complete) const;\n+    bool ReceiveMsgFrom(CNode& node, CSerializedNetMsg& ser_msg) const;\n+    void OnPing(CDataStream& data);\n+\n+    virtual ~ConnectionsInterfaceMock() {}\n+\n+    /** Count of number of each message type sent */\n+    std::map<std::string, uint64_t> m_message_types_sent;\n+    /** Most recent ping nonce received. */\n+    uint64_t m_ping_nonce{0};\n+\n+};\n+\n+void ConnectionsInterfaceMock::PushMessage(CNode* pnode, CSerializedNetMsg&& msg)\n+{\n+    BOOST_TEST_MESSAGE(strprintf(\"received message %s from peer %d\", msg.m_type, pnode->GetId()));\n+    m_message_types_sent[msg.m_type]++;\n+\n+    CDataStream data{msg.data, SER_NETWORK, PROTOCOL_VERSION};\n+    if (msg.m_type == NetMsgType::PING) OnPing(data);\n+}\n+\n+void ConnectionsInterfaceMock::OnPing(CDataStream& data)\n+{\n+    data >> m_ping_nonce;\n+    BOOST_TEST_MESSAGE(strprintf(\"received ping. Nonce:%d\", m_ping_nonce));\n+}\n+\n+void ConnectionsInterfaceMock::NodeReceiveMsgBytes(CNode& node, Span<const uint8_t> msg_bytes, bool& complete) const\n+{\n+    assert(node.ReceiveMsgBytes(msg_bytes, complete));",
      "path": "src/test/peerman_tests.cpp",
      "position": 102,
      "original_position": 102,
      "commit_id": "9c04c32101cd458c336de1d66ad296dc7f1cf35d",
      "original_commit_id": "f98a4e8d891dd7374ef7dc4c723797bf0705075f",
      "in_reply_to_id": 999513116,
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Could you suggest a change? I don't understand what you mean.\r\n\r\n`complete` is passed by reference and modified by `ReceiveMsgBytes`.",
      "created_at": "2022-10-21T13:16:24Z",
      "updated_at": "2022-10-21T13:16:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25515#discussion_r1001774399",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1001774399"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25515"
        }
      },
      "start_line": 100,
      "original_start_line": 100,
      "start_side": "RIGHT",
      "line": 102,
      "original_line": 102,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1001776338",
      "pull_request_review_id": 1150943430,
      "id": 1001776338,
      "node_id": "PRRC_kwDOABII5847teTS",
      "diff_hunk": "@@ -0,0 +1,307 @@\n+// Copyright (c) 2011-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <arith_uint256.h>\n+#include <banman.h>\n+#include <chainparams.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <netmessagemaker.h>\n+#include <pubkey.h>\n+#include <script/sign.h>\n+#include <script/signingprovider.h>\n+#include <script/standard.h>\n+#include <serialize.h>\n+#include <span.h>\n+#include <test/util/net.h>\n+#include <test/util/setup_common.h>\n+#include <util/string.h>\n+#include <util/system.h>\n+#include <util/time.h>\n+#include <timedata.h>\n+#include <validation.h>\n+\n+#include <array>\n+#include <optional>\n+#include <stdint.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+static CService ip(uint32_t i)\n+{\n+    struct in_addr s;\n+    s.s_addr = i;\n+    return CService(CNetAddr(s), Params().GetDefaultPort());\n+}\n+\n+static void AdvanceMockTime(int64_t delta)\n+{\n+    auto time_before{GetMockTime()};\n+    SetMockTime(time_before + std::chrono::seconds(delta));\n+}\n+\n+/** Mock the connections interface. */\n+class ConnectionsInterfaceMock : public ConnectionsInterface\n+{\n+public:\n+    bool ForNode(NodeId id, std::function<bool(CNode* pnode)> func) override { return true; };\n+    using NodeFn = std::function<void(CNode*)>;\n+    void ForEachNode(const NodeFn& func) override {};\n+    void ForEachNode(const NodeFn& func) const override {};\n+    void PushMessage(CNode* pnode, CSerializedNetMsg&& msg) override;\n+    CSipHasher GetDeterministicRandomizer(uint64_t id) const override { return {0, 0}; };\n+    void WakeMessageHandler() override {};\n+    bool OutboundTargetReached(bool historicalBlockServingLimit) const override { return true; };\n+    std::vector<CAddress> GetAddresses(size_t max_addresses,\n+                                       size_t max_pct,\n+                                       std::optional<Network> network) const override { return {}; };\n+    std::vector<CAddress> GetAddresses(CNode& requestor, size_t max_addresses, size_t max_pct) override { return {}; };\n+    bool DisconnectNode(const CNetAddr& addr) override { return true; };\n+    unsigned int GetReceiveFloodSize() const override { return 0; };\n+    int GetExtraFullOutboundCount() const override { return 0; };\n+    int GetExtraBlockRelayCount() const override { return 0; };\n+    void SetTryNewOutboundPeer(bool flag) override {};\n+    bool GetTryNewOutboundPeer() const override { return true; };\n+    bool GetNetworkActive() const override { return true; };\n+    bool GetUseAddrmanOutgoing() const override { return true; };\n+    void StartExtraBlockRelayPeers() override {};\n+    bool ShouldRunInactivityChecks(const CNode& node, std::chrono::seconds now) const override { return true; };\n+    bool CheckIncomingNonce(uint64_t nonce) override { return true; };\n+\n+    void NodeReceiveMsgBytes(CNode& node, Span<const uint8_t> msg_bytes, bool& complete) const;\n+    bool ReceiveMsgFrom(CNode& node, CSerializedNetMsg& ser_msg) const;\n+    void OnPing(CDataStream& data);\n+\n+    virtual ~ConnectionsInterfaceMock() {}\n+\n+    /** Count of number of each message type sent */\n+    std::map<std::string, uint64_t> m_message_types_sent;\n+    /** Most recent ping nonce received. */\n+    uint64_t m_ping_nonce{0};\n+\n+};\n+\n+void ConnectionsInterfaceMock::PushMessage(CNode* pnode, CSerializedNetMsg&& msg)\n+{\n+    BOOST_TEST_MESSAGE(strprintf(\"received message %s from peer %d\", msg.m_type, pnode->GetId()));",
      "path": "src/test/peerman_tests.cpp",
      "position": null,
      "original_position": 87,
      "commit_id": "9c04c32101cd458c336de1d66ad296dc7f1cf35d",
      "original_commit_id": "f98a4e8d891dd7374ef7dc4c723797bf0705075f",
      "in_reply_to_id": 996975101,
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Right, `PushMessage` is called to send a message to a peer. Done.",
      "created_at": "2022-10-21T13:18:15Z",
      "updated_at": "2022-10-21T13:18:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25515#discussion_r1001776338",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1001776338"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25515"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 87,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1001861582",
      "pull_request_review_id": 1151065564,
      "id": 1001861582,
      "node_id": "PRRC_kwDOABII5847tzHO",
      "diff_hunk": "@@ -0,0 +1,307 @@\n+// Copyright (c) 2011-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <arith_uint256.h>\n+#include <banman.h>\n+#include <chainparams.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <netmessagemaker.h>\n+#include <pubkey.h>\n+#include <script/sign.h>\n+#include <script/signingprovider.h>\n+#include <script/standard.h>\n+#include <serialize.h>\n+#include <span.h>\n+#include <test/util/net.h>\n+#include <test/util/setup_common.h>\n+#include <util/string.h>\n+#include <util/system.h>\n+#include <util/time.h>\n+#include <timedata.h>\n+#include <validation.h>\n+\n+#include <array>\n+#include <optional>\n+#include <stdint.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+static CService ip(uint32_t i)\n+{\n+    struct in_addr s;\n+    s.s_addr = i;\n+    return CService(CNetAddr(s), Params().GetDefaultPort());\n+}\n+\n+static void AdvanceMockTime(int64_t delta)\n+{\n+    auto time_before{GetMockTime()};\n+    SetMockTime(time_before + std::chrono::seconds(delta));\n+}\n+\n+/** Mock the connections interface. */\n+class ConnectionsInterfaceMock : public ConnectionsInterface\n+{\n+public:\n+    bool ForNode(NodeId id, std::function<bool(CNode* pnode)> func) override { return true; };\n+    using NodeFn = std::function<void(CNode*)>;\n+    void ForEachNode(const NodeFn& func) override {};\n+    void ForEachNode(const NodeFn& func) const override {};\n+    void PushMessage(CNode* pnode, CSerializedNetMsg&& msg) override;\n+    CSipHasher GetDeterministicRandomizer(uint64_t id) const override { return {0, 0}; };\n+    void WakeMessageHandler() override {};\n+    bool OutboundTargetReached(bool historicalBlockServingLimit) const override { return true; };\n+    std::vector<CAddress> GetAddresses(size_t max_addresses,\n+                                       size_t max_pct,\n+                                       std::optional<Network> network) const override { return {}; };\n+    std::vector<CAddress> GetAddresses(CNode& requestor, size_t max_addresses, size_t max_pct) override { return {}; };\n+    bool DisconnectNode(const CNetAddr& addr) override { return true; };\n+    unsigned int GetReceiveFloodSize() const override { return 0; };\n+    int GetExtraFullOutboundCount() const override { return 0; };\n+    int GetExtraBlockRelayCount() const override { return 0; };\n+    void SetTryNewOutboundPeer(bool flag) override {};\n+    bool GetTryNewOutboundPeer() const override { return true; };\n+    bool GetNetworkActive() const override { return true; };\n+    bool GetUseAddrmanOutgoing() const override { return true; };\n+    void StartExtraBlockRelayPeers() override {};\n+    bool ShouldRunInactivityChecks(const CNode& node, std::chrono::seconds now) const override { return true; };\n+    bool CheckIncomingNonce(uint64_t nonce) override { return true; };\n+\n+    void NodeReceiveMsgBytes(CNode& node, Span<const uint8_t> msg_bytes, bool& complete) const;\n+    bool ReceiveMsgFrom(CNode& node, CSerializedNetMsg& ser_msg) const;\n+    void OnPing(CDataStream& data);\n+\n+    virtual ~ConnectionsInterfaceMock() {}\n+\n+    /** Count of number of each message type sent */\n+    std::map<std::string, uint64_t> m_message_types_sent;\n+    /** Most recent ping nonce received. */\n+    uint64_t m_ping_nonce{0};\n+\n+};\n+\n+void ConnectionsInterfaceMock::PushMessage(CNode* pnode, CSerializedNetMsg&& msg)\n+{\n+    BOOST_TEST_MESSAGE(strprintf(\"received message %s from peer %d\", msg.m_type, pnode->GetId()));\n+    m_message_types_sent[msg.m_type]++;\n+\n+    CDataStream data{msg.data, SER_NETWORK, PROTOCOL_VERSION};\n+    if (msg.m_type == NetMsgType::PING) OnPing(data);\n+}\n+\n+void ConnectionsInterfaceMock::OnPing(CDataStream& data)\n+{\n+    data >> m_ping_nonce;\n+    BOOST_TEST_MESSAGE(strprintf(\"received ping. Nonce:%d\", m_ping_nonce));\n+}\n+\n+void ConnectionsInterfaceMock::NodeReceiveMsgBytes(CNode& node, Span<const uint8_t> msg_bytes, bool& complete) const\n+{\n+    assert(node.ReceiveMsgBytes(msg_bytes, complete));",
      "path": "src/test/peerman_tests.cpp",
      "position": 102,
      "original_position": 102,
      "commit_id": "9c04c32101cd458c336de1d66ad296dc7f1cf35d",
      "original_commit_id": "f98a4e8d891dd7374ef7dc4c723797bf0705075f",
      "in_reply_to_id": 999513116,
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think we could simplify `ReceiveMsgBytes` by not passing `complete` as reference and using the `bool` that this function returns. Does it make sense?\r\n\r\n",
      "created_at": "2022-10-21T14:32:20Z",
      "updated_at": "2022-10-21T14:32:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25515#discussion_r1001861582",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1001861582"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25515"
        }
      },
      "start_line": 100,
      "original_start_line": 100,
      "start_side": "RIGHT",
      "line": 102,
      "original_line": 102,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1002733109",
      "pull_request_review_id": 1152330274,
      "id": 1002733109,
      "node_id": "PRRC_kwDOABII5847xH41",
      "diff_hunk": "@@ -0,0 +1,307 @@\n+// Copyright (c) 2011-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <arith_uint256.h>\n+#include <banman.h>\n+#include <chainparams.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <netmessagemaker.h>\n+#include <pubkey.h>\n+#include <script/sign.h>\n+#include <script/signingprovider.h>\n+#include <script/standard.h>\n+#include <serialize.h>\n+#include <span.h>\n+#include <test/util/net.h>\n+#include <test/util/setup_common.h>\n+#include <util/string.h>\n+#include <util/system.h>\n+#include <util/time.h>\n+#include <timedata.h>\n+#include <validation.h>\n+\n+#include <array>\n+#include <optional>\n+#include <stdint.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+static CService ip(uint32_t i)\n+{\n+    struct in_addr s;\n+    s.s_addr = i;\n+    return CService(CNetAddr(s), Params().GetDefaultPort());\n+}\n+\n+static void AdvanceMockTime(int64_t delta)\n+{\n+    auto time_before{GetMockTime()};\n+    SetMockTime(time_before + std::chrono::seconds(delta));\n+}\n+\n+/** Mock the connections interface. */\n+class ConnectionsInterfaceMock : public ConnectionsInterface\n+{\n+public:\n+    bool ForNode(NodeId id, std::function<bool(CNode* pnode)> func) override { return true; };\n+    using NodeFn = std::function<void(CNode*)>;\n+    void ForEachNode(const NodeFn& func) override {};\n+    void ForEachNode(const NodeFn& func) const override {};\n+    void PushMessage(CNode* pnode, CSerializedNetMsg&& msg) override;\n+    CSipHasher GetDeterministicRandomizer(uint64_t id) const override { return {0, 0}; };\n+    void WakeMessageHandler() override {};\n+    bool OutboundTargetReached(bool historicalBlockServingLimit) const override { return true; };\n+    std::vector<CAddress> GetAddresses(size_t max_addresses,\n+                                       size_t max_pct,\n+                                       std::optional<Network> network) const override { return {}; };\n+    std::vector<CAddress> GetAddresses(CNode& requestor, size_t max_addresses, size_t max_pct) override { return {}; };\n+    bool DisconnectNode(const CNetAddr& addr) override { return true; };\n+    unsigned int GetReceiveFloodSize() const override { return 0; };\n+    int GetExtraFullOutboundCount() const override { return 0; };\n+    int GetExtraBlockRelayCount() const override { return 0; };\n+    void SetTryNewOutboundPeer(bool flag) override {};\n+    bool GetTryNewOutboundPeer() const override { return true; };\n+    bool GetNetworkActive() const override { return true; };\n+    bool GetUseAddrmanOutgoing() const override { return true; };\n+    void StartExtraBlockRelayPeers() override {};\n+    bool ShouldRunInactivityChecks(const CNode& node, std::chrono::seconds now) const override { return true; };\n+    bool CheckIncomingNonce(uint64_t nonce) override { return true; };\n+\n+    void NodeReceiveMsgBytes(CNode& node, Span<const uint8_t> msg_bytes, bool& complete) const;\n+    bool ReceiveMsgFrom(CNode& node, CSerializedNetMsg& ser_msg) const;\n+    void OnPing(CDataStream& data);\n+\n+    virtual ~ConnectionsInterfaceMock() {}\n+\n+    /** Count of number of each message type sent */\n+    std::map<std::string, uint64_t> m_message_types_sent;\n+    /** Most recent ping nonce received. */\n+    uint64_t m_ping_nonce{0};\n+\n+};\n+\n+void ConnectionsInterfaceMock::PushMessage(CNode* pnode, CSerializedNetMsg&& msg)\n+{\n+    BOOST_TEST_MESSAGE(strprintf(\"received message %s from peer %d\", msg.m_type, pnode->GetId()));\n+    m_message_types_sent[msg.m_type]++;\n+\n+    CDataStream data{msg.data, SER_NETWORK, PROTOCOL_VERSION};\n+    if (msg.m_type == NetMsgType::PING) OnPing(data);\n+}\n+\n+void ConnectionsInterfaceMock::OnPing(CDataStream& data)\n+{\n+    data >> m_ping_nonce;\n+    BOOST_TEST_MESSAGE(strprintf(\"received ping. Nonce:%d\", m_ping_nonce));\n+}\n+\n+void ConnectionsInterfaceMock::NodeReceiveMsgBytes(CNode& node, Span<const uint8_t> msg_bytes, bool& complete) const\n+{\n+    assert(node.ReceiveMsgBytes(msg_bytes, complete));",
      "path": "src/test/peerman_tests.cpp",
      "position": 102,
      "original_position": 102,
      "commit_id": "9c04c32101cd458c336de1d66ad296dc7f1cf35d",
      "original_commit_id": "f98a4e8d891dd7374ef7dc4c723797bf0705075f",
      "in_reply_to_id": 999513116,
      "user": {
        "login": "rajarshimaitra",
        "id": 36541669,
        "node_id": "MDQ6VXNlcjM2NTQxNjY5",
        "avatar_url": "https://avatars.githubusercontent.com/u/36541669?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rajarshimaitra",
        "html_url": "https://github.com/rajarshimaitra",
        "followers_url": "https://api.github.com/users/rajarshimaitra/followers",
        "following_url": "https://api.github.com/users/rajarshimaitra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rajarshimaitra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rajarshimaitra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rajarshimaitra/subscriptions",
        "organizations_url": "https://api.github.com/users/rajarshimaitra/orgs",
        "repos_url": "https://api.github.com/users/rajarshimaitra/repos",
        "events_url": "https://api.github.com/users/rajarshimaitra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rajarshimaitra/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think I would retrace back my comment.. These signatures are part of the interface itself.. So there might be valid reasons for them.. \r\n\r\nThough it seems like we are ultimately dropping the `bool` here in test case in .. The only place its used is inside `NodeReceiveMsgBytes`. So at first look passing in a value that we are internally processing and then dropping in final return  (in the line `(void)connman.ReceiveMsgFrom(node, msg);`) was confusing me.. I am probably still confused but my suggestion doesn't make any sense as it will modify the interface.. ",
      "created_at": "2022-10-23T16:06:46Z",
      "updated_at": "2022-10-23T16:06:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25515#discussion_r1002733109",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1002733109"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25515"
        }
      },
      "start_line": 100,
      "original_start_line": 100,
      "start_side": "RIGHT",
      "line": 102,
      "original_line": 102,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1003010273",
      "pull_request_review_id": 1152716506,
      "id": 1003010273,
      "node_id": "PRRC_kwDOABII5847yLjh",
      "diff_hunk": "@@ -0,0 +1,188 @@\n+// Copyright (c) 2011-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <arith_uint256.h>\n+#include <banman.h>\n+#include <chainparams.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <netmessagemaker.h>\n+#include <pubkey.h>\n+#include <script/sign.h>\n+#include <script/signingprovider.h>\n+#include <script/standard.h>\n+#include <serialize.h>\n+#include <test/util/net.h>\n+#include <test/util/setup_common.h>\n+#include <util/string.h>\n+#include <util/system.h>\n+#include <util/time.h>\n+#include <timedata.h>\n+#include <validation.h>\n+\n+#include <array>\n+#include <stdint.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+static CService ip(uint32_t i)\n+{\n+    struct in_addr s;\n+    s.s_addr = i;\n+    return CService(CNetAddr(s), Params().GetDefaultPort());\n+}\n+\n+/** Mock the connections interface. */\n+class ConnectionsInterfaceMock : public ConnectionsInterface\n+{\n+public:\n+    bool ForNode(NodeId id, std::function<bool(CNode* pnode)> func) override { return true; };\n+    using NodeFn = std::function<void(CNode*)>;\n+    void ForEachNode(const NodeFn& func) override {};\n+    void ForEachNode(const NodeFn& func) const override {};\n+    void PushMessage(CNode* pnode, CSerializedNetMsg&& msg) override;\n+    CSipHasher GetDeterministicRandomizer(uint64_t id) const override { return {0, 0}; };\n+    void WakeMessageHandler() override {};\n+    bool OutboundTargetReached(bool historicalBlockServingLimit) const override { return true; };\n+    std::vector<CAddress> GetAddresses(size_t max_addresses,\n+                                       size_t max_pct,\n+                                       std::optional<Network> network) const override { return {}; };\n+    std::vector<CAddress> GetAddresses(CNode& requestor, size_t max_addresses, size_t max_pct) override { return {}; };\n+    bool DisconnectNode(const CNetAddr& addr) override { return true; };\n+    unsigned int GetReceiveFloodSize() const override { return 0; };\n+    int GetExtraFullOutboundCount() const override { return 0; };\n+    int GetExtraBlockRelayCount() const override { return 0; };\n+    void SetTryNewOutboundPeer(bool flag) override {};\n+    bool GetTryNewOutboundPeer() const override { return true; };\n+    bool GetNetworkActive() const override { return true; };\n+    bool GetUseAddrmanOutgoing() const override { return true; };\n+    void StartExtraBlockRelayPeers() override {};\n+    bool ShouldRunInactivityChecks(const CNode& node, std::chrono::seconds now) const override { return true; };\n+    bool CheckIncomingNonce(uint64_t nonce) override { return true; };\n+\n+    void NodeReceiveMsgBytes(CNode& node, Span<const uint8_t> msg_bytes, bool& complete) const;\n+    bool ReceiveMsgFrom(CNode& node, CSerializedNetMsg& ser_msg) const;\n+\n+    virtual ~ConnectionsInterfaceMock() {}\n+\n+    /** Count of number of each message type sent */\n+    std::map<std::string, uint64_t> m_message_types_sent;\n+};\n+\n+void ConnectionsInterfaceMock::PushMessage(CNode* pnode, CSerializedNetMsg&& msg)\n+{\n+    BOOST_TEST_MESSAGE(strprintf(\"sending message %s to peer %d\", msg.m_type, pnode->GetId()));\n+    m_message_types_sent[msg.m_type]++;\n+}\n+\n+void ConnectionsInterfaceMock::NodeReceiveMsgBytes(CNode& node, Span<const uint8_t> msg_bytes, bool& complete) const\n+{\n+    assert(node.ReceiveMsgBytes(msg_bytes, complete));\n+    if (complete) {\n+        size_t nSizeAdded = 0;\n+        auto it(node.vRecvMsg.begin());\n+        for (; it != node.vRecvMsg.end(); ++it) {\n+            // vRecvMsg contains only completed CNetMessage\n+            // the single possible partially deserialized message are held by TransportDeserializer\n+            nSizeAdded += it->m_raw_message_size;\n+        }\n+        {\n+            LOCK(node.cs_vProcessMsg);\n+            node.vProcessMsg.splice(node.vProcessMsg.end(), node.vRecvMsg, node.vRecvMsg.begin(), it);\n+            node.nProcessQueueSize += nSizeAdded;\n+        }\n+    }\n+}\n+\n+bool ConnectionsInterfaceMock::ReceiveMsgFrom(CNode& node, CSerializedNetMsg& ser_msg) const",
      "path": "src/test/peerman_tests.cpp",
      "position": 98,
      "original_position": 98,
      "commit_id": "9c04c32101cd458c336de1d66ad296dc7f1cf35d",
      "original_commit_id": "bdfe134ed6b13e69becc43c9e0a8f958e8931b0a",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Any reason to duplicate this from the test util? Are there plans to de-duplicate this?",
      "created_at": "2022-10-24T08:17:50Z",
      "updated_at": "2022-10-24T08:17:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25515#discussion_r1003010273",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1003010273"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25515"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 119,
      "original_line": 98,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1012691719",
      "pull_request_review_id": 1166581907,
      "id": 1012691719,
      "node_id": "PRRC_kwDOABII5848XHMH",
      "diff_hunk": "@@ -0,0 +1,307 @@\n+// Copyright (c) 2011-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <arith_uint256.h>\n+#include <banman.h>\n+#include <chainparams.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <netmessagemaker.h>\n+#include <pubkey.h>\n+#include <script/sign.h>\n+#include <script/signingprovider.h>\n+#include <script/standard.h>\n+#include <serialize.h>\n+#include <span.h>\n+#include <test/util/net.h>\n+#include <test/util/setup_common.h>\n+#include <util/string.h>\n+#include <util/system.h>\n+#include <util/time.h>\n+#include <timedata.h>\n+#include <validation.h>\n+\n+#include <array>\n+#include <optional>\n+#include <stdint.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+static CService ip(uint32_t i)\n+{\n+    struct in_addr s;\n+    s.s_addr = i;\n+    return CService(CNetAddr(s), Params().GetDefaultPort());\n+}\n+\n+static void AdvanceMockTime(int64_t delta)\n+{\n+    auto time_before{GetMockTime()};\n+    SetMockTime(time_before + std::chrono::seconds(delta));\n+}\n+\n+/** Mock the connections interface. */\n+class ConnectionsInterfaceMock : public ConnectionsInterface\n+{\n+public:\n+    bool ForNode(NodeId id, std::function<bool(CNode* pnode)> func) override { return true; };\n+    using NodeFn = std::function<void(CNode*)>;\n+    void ForEachNode(const NodeFn& func) override {};\n+    void ForEachNode(const NodeFn& func) const override {};\n+    void PushMessage(CNode* pnode, CSerializedNetMsg&& msg) override;\n+    CSipHasher GetDeterministicRandomizer(uint64_t id) const override { return {0, 0}; };\n+    void WakeMessageHandler() override {};\n+    bool OutboundTargetReached(bool historicalBlockServingLimit) const override { return true; };\n+    std::vector<CAddress> GetAddresses(size_t max_addresses,\n+                                       size_t max_pct,\n+                                       std::optional<Network> network) const override { return {}; };\n+    std::vector<CAddress> GetAddresses(CNode& requestor, size_t max_addresses, size_t max_pct) override { return {}; };\n+    bool DisconnectNode(const CNetAddr& addr) override { return true; };\n+    unsigned int GetReceiveFloodSize() const override { return 0; };\n+    int GetExtraFullOutboundCount() const override { return 0; };\n+    int GetExtraBlockRelayCount() const override { return 0; };\n+    void SetTryNewOutboundPeer(bool flag) override {};\n+    bool GetTryNewOutboundPeer() const override { return true; };\n+    bool GetNetworkActive() const override { return true; };\n+    bool GetUseAddrmanOutgoing() const override { return true; };\n+    void StartExtraBlockRelayPeers() override {};\n+    bool ShouldRunInactivityChecks(const CNode& node, std::chrono::seconds now) const override { return true; };\n+    bool CheckIncomingNonce(uint64_t nonce) override { return true; };\n+\n+    void NodeReceiveMsgBytes(CNode& node, Span<const uint8_t> msg_bytes, bool& complete) const;\n+    bool ReceiveMsgFrom(CNode& node, CSerializedNetMsg& ser_msg) const;\n+    void OnPing(CDataStream& data);\n+\n+    virtual ~ConnectionsInterfaceMock() {}\n+\n+    /** Count of number of each message type sent */\n+    std::map<std::string, uint64_t> m_message_types_sent;\n+    /** Most recent ping nonce received. */\n+    uint64_t m_ping_nonce{0};\n+\n+};\n+\n+void ConnectionsInterfaceMock::PushMessage(CNode* pnode, CSerializedNetMsg&& msg)\n+{\n+    BOOST_TEST_MESSAGE(strprintf(\"sending message %s to peer %d\", msg.m_type, pnode->GetId()));\n+    m_message_types_sent[msg.m_type]++;\n+\n+    CDataStream data{msg.data, SER_NETWORK, PROTOCOL_VERSION};\n+    if (msg.m_type == NetMsgType::PING) OnPing(data);\n+}\n+\n+void ConnectionsInterfaceMock::OnPing(CDataStream& data)\n+{\n+    data >> m_ping_nonce;\n+    BOOST_TEST_MESSAGE(strprintf(\"received ping. Nonce:%d\", m_ping_nonce));\n+}",
      "path": "src/test/peerman_tests.cpp",
      "position": 98,
      "original_position": 98,
      "commit_id": "9c04c32101cd458c336de1d66ad296dc7f1cf35d",
      "original_commit_id": "9c04c32101cd458c336de1d66ad296dc7f1cf35d",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`OnPing()` is called when sending a ping message, but the log says \"received ping\". Also, the comment of `m_ping_nonce` is \"Most recent ping nonce received\".",
      "created_at": "2022-11-03T09:54:43Z",
      "updated_at": "2022-11-04T15:00:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25515#discussion_r1012691719",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1012691719"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25515"
        }
      },
      "start_line": 85,
      "original_start_line": 85,
      "start_side": "RIGHT",
      "line": 98,
      "original_line": 98,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1012698220",
      "pull_request_review_id": 1166581907,
      "id": 1012698220,
      "node_id": "PRRC_kwDOABII5848XIxs",
      "diff_hunk": "@@ -0,0 +1,307 @@\n+// Copyright (c) 2011-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <arith_uint256.h>\n+#include <banman.h>\n+#include <chainparams.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <netmessagemaker.h>\n+#include <pubkey.h>\n+#include <script/sign.h>\n+#include <script/signingprovider.h>\n+#include <script/standard.h>\n+#include <serialize.h>\n+#include <span.h>\n+#include <test/util/net.h>\n+#include <test/util/setup_common.h>\n+#include <util/string.h>\n+#include <util/system.h>\n+#include <util/time.h>\n+#include <timedata.h>\n+#include <validation.h>\n+\n+#include <array>\n+#include <optional>\n+#include <stdint.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+static CService ip(uint32_t i)\n+{\n+    struct in_addr s;\n+    s.s_addr = i;\n+    return CService(CNetAddr(s), Params().GetDefaultPort());\n+}\n+\n+static void AdvanceMockTime(int64_t delta)\n+{\n+    auto time_before{GetMockTime()};\n+    SetMockTime(time_before + std::chrono::seconds(delta));\n+}\n+\n+/** Mock the connections interface. */\n+class ConnectionsInterfaceMock : public ConnectionsInterface\n+{\n+public:\n+    bool ForNode(NodeId id, std::function<bool(CNode* pnode)> func) override { return true; };\n+    using NodeFn = std::function<void(CNode*)>;\n+    void ForEachNode(const NodeFn& func) override {};\n+    void ForEachNode(const NodeFn& func) const override {};\n+    void PushMessage(CNode* pnode, CSerializedNetMsg&& msg) override;\n+    CSipHasher GetDeterministicRandomizer(uint64_t id) const override { return {0, 0}; };\n+    void WakeMessageHandler() override {};\n+    bool OutboundTargetReached(bool historicalBlockServingLimit) const override { return true; };\n+    std::vector<CAddress> GetAddresses(size_t max_addresses,\n+                                       size_t max_pct,\n+                                       std::optional<Network> network) const override { return {}; };\n+    std::vector<CAddress> GetAddresses(CNode& requestor, size_t max_addresses, size_t max_pct) override { return {}; };\n+    bool DisconnectNode(const CNetAddr& addr) override { return true; };\n+    unsigned int GetReceiveFloodSize() const override { return 0; };\n+    int GetExtraFullOutboundCount() const override { return 0; };\n+    int GetExtraBlockRelayCount() const override { return 0; };\n+    void SetTryNewOutboundPeer(bool flag) override {};\n+    bool GetTryNewOutboundPeer() const override { return true; };\n+    bool GetNetworkActive() const override { return true; };\n+    bool GetUseAddrmanOutgoing() const override { return true; };\n+    void StartExtraBlockRelayPeers() override {};\n+    bool ShouldRunInactivityChecks(const CNode& node, std::chrono::seconds now) const override { return true; };\n+    bool CheckIncomingNonce(uint64_t nonce) override { return true; };\n+\n+    void NodeReceiveMsgBytes(CNode& node, Span<const uint8_t> msg_bytes, bool& complete) const;\n+    bool ReceiveMsgFrom(CNode& node, CSerializedNetMsg& ser_msg) const;\n+    void OnPing(CDataStream& data);\n+\n+    virtual ~ConnectionsInterfaceMock() {}\n+\n+    /** Count of number of each message type sent */\n+    std::map<std::string, uint64_t> m_message_types_sent;\n+    /** Most recent ping nonce received. */\n+    uint64_t m_ping_nonce{0};\n+\n+};\n+\n+void ConnectionsInterfaceMock::PushMessage(CNode* pnode, CSerializedNetMsg&& msg)\n+{\n+    BOOST_TEST_MESSAGE(strprintf(\"sending message %s to peer %d\", msg.m_type, pnode->GetId()));\n+    m_message_types_sent[msg.m_type]++;\n+\n+    CDataStream data{msg.data, SER_NETWORK, PROTOCOL_VERSION};\n+    if (msg.m_type == NetMsgType::PING) OnPing(data);\n+}\n+\n+void ConnectionsInterfaceMock::OnPing(CDataStream& data)\n+{\n+    data >> m_ping_nonce;\n+    BOOST_TEST_MESSAGE(strprintf(\"received ping. Nonce:%d\", m_ping_nonce));\n+}\n+\n+void ConnectionsInterfaceMock::NodeReceiveMsgBytes(CNode& node, Span<const uint8_t> msg_bytes, bool& complete) const\n+{\n+    assert(node.ReceiveMsgBytes(msg_bytes, complete));\n+    if (complete) {\n+        size_t nSizeAdded = 0;\n+        auto it(node.vRecvMsg.begin());\n+        for (; it != node.vRecvMsg.end(); ++it) {\n+            // vRecvMsg contains only completed CNetMessage\n+            // the single possible partially deserialized message are held by TransportDeserializer\n+            nSizeAdded += it->m_raw_message_size;\n+        }\n+        {\n+            LOCK(node.cs_vProcessMsg);\n+            node.vProcessMsg.splice(node.vProcessMsg.end(), node.vRecvMsg, node.vRecvMsg.begin(), it);\n+            node.nProcessQueueSize += nSizeAdded;\n+        }\n+    }\n+}\n+\n+bool ConnectionsInterfaceMock::ReceiveMsgFrom(CNode& node, CSerializedNetMsg& ser_msg) const\n+{\n+    std::vector<uint8_t> ser_msg_header;\n+    node.m_serializer->prepareForTransport(ser_msg, ser_msg_header);\n+\n+    bool complete;\n+    NodeReceiveMsgBytes(node, ser_msg_header, complete);\n+    NodeReceiveMsgBytes(node, ser_msg.data, complete);\n+    return complete;\n+}\n+\n+BOOST_FIXTURE_TEST_SUITE(peerman_tests, TestingSetup)\n+\n+static void SendMessage(ConnectionsInterfaceMock& connman, PeerManager& peerman, CNode& node, CSerializedNetMsg& msg)\n+{\n+    std::atomic<bool> interrupt{false};\n+    (void)connman.ReceiveMsgFrom(node, msg);\n+    node.fPauseSend = false;\n+    LOCK(NetEventsInterface::g_msgproc_mutex);\n+    peerman.ProcessMessages(&node, interrupt);\n+    peerman.SendMessages(&node);\n+}\n+\n+using HandshakeHookFn = std::function<void(ConnectionsInterfaceMock& connman, PeerManager& peerman, CNode& node)>;\n+static void Handshake(\n+    ConnectionsInterfaceMock& connman, PeerManager& peerman,\n+    CNode& node, ServiceFlags their_services,\n+    HandshakeHookFn pre_verack_hook = [](ConnectionsInterfaceMock& connman, PeerManager& peerman, CNode& node) {}) noexcept\n+{\n+    // Send version message\n+    const CNetMsgMaker mm{0};\n+    CSerializedNetMsg msg_version{\n+        mm.Make(NetMsgType::VERSION,\n+                PROTOCOL_VERSION,                              // current p2p version\n+                Using<CustomUintFormatter<8>>(their_services), // their service flags\n+                GetTime(),                                     // dummy time\n+                int64_t{},                                     // ignored service bits\n+                CService{},                                    // dummy\n+                int64_t{},                                     // ignored service bits\n+                CService{},                                    // ignored\n+                uint64_t{1},                                   // dummy nonce\n+                std::string{},                                 // dummy subver\n+                int32_t{},                                     // dummy starting_height\n+                true),                                         // fRelay\n+    };\n+    SendMessage(connman, peerman, node, msg_version);\n+    BOOST_CHECK(!node.fDisconnect);\n+    BOOST_CHECK_EQUAL(node.nVersion, PROTOCOL_VERSION);\n+    BOOST_CHECK_EQUAL(node.GetCommonVersion(), PROTOCOL_VERSION);\n+    CNodeStateStats stats;\n+    bool ret = peerman.GetNodeStateStats(node.GetId(), stats);\n+    BOOST_CHECK_EQUAL(ret, true);\n+    BOOST_CHECK_EQUAL(stats.their_services, their_services);\n+\n+    pre_verack_hook(connman, peerman, node);\n+\n+    // Send verack message\n+    CSerializedNetMsg msg_verack{mm.Make(NetMsgType::VERACK)};\n+    SendMessage(connman, peerman, node, msg_verack);\n+    BOOST_CHECK_EQUAL(node.fSuccessfullyConnected, true);\n+\n+    TestOnlyResetTimeData();\n+}\n+\n+BOOST_AUTO_TEST_CASE(version_handshake)\n+{\n+    auto connman = std::make_unique<ConnectionsInterfaceMock>();\n+    auto peerman = PeerManager::make(*connman, *m_node.addrman, nullptr,\n+                                     *m_node.chainman, *m_node.mempool, false);\n+\n+    // Mock an outbound peer\n+    CAddress addr1(ip(0xa0b0c001), NODE_NONE);\n+    CNode node{/*id=*/0, /*sock=*/nullptr, addr1, /*nKeyedNetGroupIn=*/0, /*nLocalHostNonceIn=*/0, CAddress(),\n+               /*addrNameIn=*/\"\", ConnectionType::OUTBOUND_FULL_RELAY, /*inbound_onion=*/false};\n+\n+    peerman->InitializeNode(node, /*our_services=*/ServiceFlags(NODE_NETWORK | NODE_WITNESS));\n+    Handshake(*connman, *peerman, node, /*their_services=*/ServiceFlags(NODE_NETWORK | NODE_WITNESS));\n+\n+    BOOST_CHECK_EQUAL(connman->m_message_types_sent[NetMsgType::VERSION], 1);\n+    BOOST_CHECK_EQUAL(connman->m_message_types_sent[NetMsgType::WTXIDRELAY], 1);\n+    BOOST_CHECK_EQUAL(connman->m_message_types_sent[NetMsgType::SENDADDRV2], 1);\n+    BOOST_CHECK_EQUAL(connman->m_message_types_sent[NetMsgType::VERACK], 1);\n+    BOOST_CHECK_EQUAL(connman->m_message_types_sent[NetMsgType::GETADDR], 1);\n+    BOOST_CHECK_EQUAL(connman->m_message_types_sent[NetMsgType::SENDCMPCT], 1);\n+    BOOST_CHECK_EQUAL(connman->m_message_types_sent[NetMsgType::GETHEADERS], 1);\n+    BOOST_CHECK_EQUAL(connman->m_message_types_sent[NetMsgType::FEEFILTER], 1);\n+\n+    peerman->FinalizeNode(node);\n+}\n+\n+static void CheckPingTimes(CNode& node, PeerManager& peerman,\n+                           std::chrono::microseconds min_ping_time, std::chrono::microseconds last_ping_time, std::chrono::microseconds ping_wait)\n+{\n+    // Check min and last ping times\n+    BOOST_CHECK_EQUAL(node.m_min_ping_time.load().count(), min_ping_time.count());\n+    BOOST_CHECK_EQUAL(node.m_last_ping_time.load().count(), last_ping_time.count());\n+\n+    // Check if and how long current ping has been pending\n+    CNodeStateStats stats;\n+    peerman.GetNodeStateStats(node.GetId(), stats);\n+    BOOST_CHECK_EQUAL(stats.m_ping_wait.count(), ping_wait.count());\n+}\n+\n+static void SendPong(CNode& node, ConnectionsInterfaceMock& connman,\n+                     PeerManager& peerman, std::optional<int64_t> nonce = {})\n+{\n+    const CNetMsgMaker mm{0};\n+    CSerializedNetMsg msg_pong = nonce ? mm.Make(NetMsgType::PONG, nonce.value()) : mm.Make(NetMsgType::PONG);\n+    SendMessage(connman, peerman, node, msg_pong);\n+}\n+\n+BOOST_AUTO_TEST_CASE(ping)\n+{\n+    // See PING_INTERVAL in net_processing.cpp\n+    constexpr int64_t PING_INTERVAL{2 * 60};\n+\n+    auto connman = std::make_unique<ConnectionsInterfaceMock>();\n+    auto peerman = PeerManager::make(*connman, *m_node.addrman, nullptr,\n+                                     *m_node.chainman, *m_node.mempool, false);\n+\n+    // Mock an outbound peer\n+    CNode node{/*id=*/0, /*sock=*/nullptr, CAddress(), /*nKeyedNetGroupIn=*/0, /*nLocalHostNonceIn=*/0, CAddress(),\n+               /*addrNameIn=*/\"\", ConnectionType::OUTBOUND_FULL_RELAY, /*inbound_onion=*/false};\n+\n+    peerman->InitializeNode(node, /*our_services=*/ServiceFlags(NODE_NETWORK | NODE_WITNESS));\n+\n+    // Use mock time to control pings from node\n+    SetMockTime(GetTime());\n+\n+    Handshake(*connman, *peerman, node, /*their_services=*/ServiceFlags(NODE_NETWORK | NODE_WITNESS));\n+\n+    BOOST_TEST_MESSAGE(\"Advanced mocktime and check that ping is sent after connection is established\");\n+    AdvanceMockTime(1);\n+    BOOST_CHECK_EQUAL(connman->m_message_types_sent[NetMsgType::PING], 1);",
      "path": "src/test/peerman_tests.cpp",
      "position": 252,
      "original_position": 252,
      "commit_id": "9c04c32101cd458c336de1d66ad296dc7f1cf35d",
      "original_commit_id": "9c04c32101cd458c336de1d66ad296dc7f1cf35d",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This sequence is misleading. The ping message is sent immediately after the handshake. We do not need to \"wait\" 1 second for that to happen. So `AdvanceMockTime(1)` may be removed.\r\n",
      "created_at": "2022-11-03T10:00:43Z",
      "updated_at": "2022-11-04T15:00:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25515#discussion_r1012698220",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1012698220"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25515"
        }
      },
      "start_line": 250,
      "original_start_line": 250,
      "start_side": "RIGHT",
      "line": 252,
      "original_line": 252,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1012727306",
      "pull_request_review_id": 1166581907,
      "id": 1012727306,
      "node_id": "PRRC_kwDOABII5848XP4K",
      "diff_hunk": "@@ -0,0 +1,307 @@\n+// Copyright (c) 2011-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <arith_uint256.h>\n+#include <banman.h>\n+#include <chainparams.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <netmessagemaker.h>\n+#include <pubkey.h>\n+#include <script/sign.h>\n+#include <script/signingprovider.h>\n+#include <script/standard.h>\n+#include <serialize.h>\n+#include <span.h>\n+#include <test/util/net.h>\n+#include <test/util/setup_common.h>\n+#include <util/string.h>\n+#include <util/system.h>\n+#include <util/time.h>\n+#include <timedata.h>\n+#include <validation.h>\n+\n+#include <array>\n+#include <optional>\n+#include <stdint.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+static CService ip(uint32_t i)\n+{\n+    struct in_addr s;\n+    s.s_addr = i;\n+    return CService(CNetAddr(s), Params().GetDefaultPort());\n+}\n+\n+static void AdvanceMockTime(int64_t delta)\n+{\n+    auto time_before{GetMockTime()};\n+    SetMockTime(time_before + std::chrono::seconds(delta));\n+}\n+\n+/** Mock the connections interface. */\n+class ConnectionsInterfaceMock : public ConnectionsInterface\n+{\n+public:\n+    bool ForNode(NodeId id, std::function<bool(CNode* pnode)> func) override { return true; };\n+    using NodeFn = std::function<void(CNode*)>;\n+    void ForEachNode(const NodeFn& func) override {};\n+    void ForEachNode(const NodeFn& func) const override {};\n+    void PushMessage(CNode* pnode, CSerializedNetMsg&& msg) override;\n+    CSipHasher GetDeterministicRandomizer(uint64_t id) const override { return {0, 0}; };\n+    void WakeMessageHandler() override {};\n+    bool OutboundTargetReached(bool historicalBlockServingLimit) const override { return true; };\n+    std::vector<CAddress> GetAddresses(size_t max_addresses,\n+                                       size_t max_pct,\n+                                       std::optional<Network> network) const override { return {}; };\n+    std::vector<CAddress> GetAddresses(CNode& requestor, size_t max_addresses, size_t max_pct) override { return {}; };\n+    bool DisconnectNode(const CNetAddr& addr) override { return true; };\n+    unsigned int GetReceiveFloodSize() const override { return 0; };\n+    int GetExtraFullOutboundCount() const override { return 0; };\n+    int GetExtraBlockRelayCount() const override { return 0; };\n+    void SetTryNewOutboundPeer(bool flag) override {};\n+    bool GetTryNewOutboundPeer() const override { return true; };\n+    bool GetNetworkActive() const override { return true; };\n+    bool GetUseAddrmanOutgoing() const override { return true; };\n+    void StartExtraBlockRelayPeers() override {};\n+    bool ShouldRunInactivityChecks(const CNode& node, std::chrono::seconds now) const override { return true; };\n+    bool CheckIncomingNonce(uint64_t nonce) override { return true; };\n+\n+    void NodeReceiveMsgBytes(CNode& node, Span<const uint8_t> msg_bytes, bool& complete) const;\n+    bool ReceiveMsgFrom(CNode& node, CSerializedNetMsg& ser_msg) const;\n+    void OnPing(CDataStream& data);\n+\n+    virtual ~ConnectionsInterfaceMock() {}\n+\n+    /** Count of number of each message type sent */\n+    std::map<std::string, uint64_t> m_message_types_sent;\n+    /** Most recent ping nonce received. */\n+    uint64_t m_ping_nonce{0};\n+\n+};\n+\n+void ConnectionsInterfaceMock::PushMessage(CNode* pnode, CSerializedNetMsg&& msg)\n+{\n+    BOOST_TEST_MESSAGE(strprintf(\"sending message %s to peer %d\", msg.m_type, pnode->GetId()));\n+    m_message_types_sent[msg.m_type]++;\n+\n+    CDataStream data{msg.data, SER_NETWORK, PROTOCOL_VERSION};\n+    if (msg.m_type == NetMsgType::PING) OnPing(data);\n+}\n+\n+void ConnectionsInterfaceMock::OnPing(CDataStream& data)\n+{\n+    data >> m_ping_nonce;\n+    BOOST_TEST_MESSAGE(strprintf(\"received ping. Nonce:%d\", m_ping_nonce));\n+}\n+\n+void ConnectionsInterfaceMock::NodeReceiveMsgBytes(CNode& node, Span<const uint8_t> msg_bytes, bool& complete) const",
      "path": "src/test/peerman_tests.cpp",
      "position": 100,
      "original_position": 100,
      "commit_id": "9c04c32101cd458c336de1d66ad296dc7f1cf35d",
      "original_commit_id": "9c04c32101cd458c336de1d66ad296dc7f1cf35d",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This is duplicated from `ConnmanTestMsg::NodeReceiveMsgBytes()` + a subtle change.",
      "created_at": "2022-11-03T10:30:44Z",
      "updated_at": "2022-11-04T15:00:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25515#discussion_r1012727306",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1012727306"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25515"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 100,
      "original_line": 100,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1012742783",
      "pull_request_review_id": 1166581907,
      "id": 1012742783,
      "node_id": "PRRC_kwDOABII5848XTp_",
      "diff_hunk": "@@ -0,0 +1,307 @@\n+// Copyright (c) 2011-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <arith_uint256.h>\n+#include <banman.h>\n+#include <chainparams.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <netmessagemaker.h>\n+#include <pubkey.h>\n+#include <script/sign.h>\n+#include <script/signingprovider.h>\n+#include <script/standard.h>\n+#include <serialize.h>\n+#include <span.h>\n+#include <test/util/net.h>\n+#include <test/util/setup_common.h>\n+#include <util/string.h>\n+#include <util/system.h>\n+#include <util/time.h>\n+#include <timedata.h>\n+#include <validation.h>\n+\n+#include <array>\n+#include <optional>\n+#include <stdint.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+static CService ip(uint32_t i)\n+{\n+    struct in_addr s;\n+    s.s_addr = i;\n+    return CService(CNetAddr(s), Params().GetDefaultPort());\n+}\n+\n+static void AdvanceMockTime(int64_t delta)\n+{\n+    auto time_before{GetMockTime()};\n+    SetMockTime(time_before + std::chrono::seconds(delta));\n+}\n+\n+/** Mock the connections interface. */\n+class ConnectionsInterfaceMock : public ConnectionsInterface\n+{\n+public:\n+    bool ForNode(NodeId id, std::function<bool(CNode* pnode)> func) override { return true; };\n+    using NodeFn = std::function<void(CNode*)>;\n+    void ForEachNode(const NodeFn& func) override {};\n+    void ForEachNode(const NodeFn& func) const override {};\n+    void PushMessage(CNode* pnode, CSerializedNetMsg&& msg) override;\n+    CSipHasher GetDeterministicRandomizer(uint64_t id) const override { return {0, 0}; };\n+    void WakeMessageHandler() override {};\n+    bool OutboundTargetReached(bool historicalBlockServingLimit) const override { return true; };\n+    std::vector<CAddress> GetAddresses(size_t max_addresses,\n+                                       size_t max_pct,\n+                                       std::optional<Network> network) const override { return {}; };\n+    std::vector<CAddress> GetAddresses(CNode& requestor, size_t max_addresses, size_t max_pct) override { return {}; };\n+    bool DisconnectNode(const CNetAddr& addr) override { return true; };\n+    unsigned int GetReceiveFloodSize() const override { return 0; };\n+    int GetExtraFullOutboundCount() const override { return 0; };\n+    int GetExtraBlockRelayCount() const override { return 0; };\n+    void SetTryNewOutboundPeer(bool flag) override {};\n+    bool GetTryNewOutboundPeer() const override { return true; };\n+    bool GetNetworkActive() const override { return true; };\n+    bool GetUseAddrmanOutgoing() const override { return true; };\n+    void StartExtraBlockRelayPeers() override {};\n+    bool ShouldRunInactivityChecks(const CNode& node, std::chrono::seconds now) const override { return true; };\n+    bool CheckIncomingNonce(uint64_t nonce) override { return true; };\n+\n+    void NodeReceiveMsgBytes(CNode& node, Span<const uint8_t> msg_bytes, bool& complete) const;\n+    bool ReceiveMsgFrom(CNode& node, CSerializedNetMsg& ser_msg) const;\n+    void OnPing(CDataStream& data);\n+\n+    virtual ~ConnectionsInterfaceMock() {}\n+\n+    /** Count of number of each message type sent */\n+    std::map<std::string, uint64_t> m_message_types_sent;\n+    /** Most recent ping nonce received. */\n+    uint64_t m_ping_nonce{0};\n+\n+};\n+\n+void ConnectionsInterfaceMock::PushMessage(CNode* pnode, CSerializedNetMsg&& msg)\n+{\n+    BOOST_TEST_MESSAGE(strprintf(\"sending message %s to peer %d\", msg.m_type, pnode->GetId()));\n+    m_message_types_sent[msg.m_type]++;\n+\n+    CDataStream data{msg.data, SER_NETWORK, PROTOCOL_VERSION};\n+    if (msg.m_type == NetMsgType::PING) OnPing(data);\n+}\n+\n+void ConnectionsInterfaceMock::OnPing(CDataStream& data)\n+{\n+    data >> m_ping_nonce;\n+    BOOST_TEST_MESSAGE(strprintf(\"received ping. Nonce:%d\", m_ping_nonce));\n+}\n+\n+void ConnectionsInterfaceMock::NodeReceiveMsgBytes(CNode& node, Span<const uint8_t> msg_bytes, bool& complete) const\n+{\n+    assert(node.ReceiveMsgBytes(msg_bytes, complete));\n+    if (complete) {\n+        size_t nSizeAdded = 0;\n+        auto it(node.vRecvMsg.begin());\n+        for (; it != node.vRecvMsg.end(); ++it) {\n+            // vRecvMsg contains only completed CNetMessage\n+            // the single possible partially deserialized message are held by TransportDeserializer\n+            nSizeAdded += it->m_raw_message_size;\n+        }\n+        {\n+            LOCK(node.cs_vProcessMsg);\n+            node.vProcessMsg.splice(node.vProcessMsg.end(), node.vRecvMsg, node.vRecvMsg.begin(), it);\n+            node.nProcessQueueSize += nSizeAdded;\n+        }\n+    }\n+}\n+\n+bool ConnectionsInterfaceMock::ReceiveMsgFrom(CNode& node, CSerializedNetMsg& ser_msg) const\n+{\n+    std::vector<uint8_t> ser_msg_header;\n+    node.m_serializer->prepareForTransport(ser_msg, ser_msg_header);\n+\n+    bool complete;\n+    NodeReceiveMsgBytes(node, ser_msg_header, complete);\n+    NodeReceiveMsgBytes(node, ser_msg.data, complete);\n+    return complete;\n+}\n+\n+BOOST_FIXTURE_TEST_SUITE(peerman_tests, TestingSetup)\n+\n+static void SendMessage(ConnectionsInterfaceMock& connman, PeerManager& peerman, CNode& node, CSerializedNetMsg& msg)\n+{\n+    std::atomic<bool> interrupt{false};\n+    (void)connman.ReceiveMsgFrom(node, msg);\n+    node.fPauseSend = false;\n+    LOCK(NetEventsInterface::g_msgproc_mutex);\n+    peerman.ProcessMessages(&node, interrupt);\n+    peerman.SendMessages(&node);\n+}\n+\n+using HandshakeHookFn = std::function<void(ConnectionsInterfaceMock& connman, PeerManager& peerman, CNode& node)>;\n+static void Handshake(\n+    ConnectionsInterfaceMock& connman, PeerManager& peerman,\n+    CNode& node, ServiceFlags their_services,\n+    HandshakeHookFn pre_verack_hook = [](ConnectionsInterfaceMock& connman, PeerManager& peerman, CNode& node) {}) noexcept\n+{\n+    // Send version message\n+    const CNetMsgMaker mm{0};\n+    CSerializedNetMsg msg_version{\n+        mm.Make(NetMsgType::VERSION,\n+                PROTOCOL_VERSION,                              // current p2p version\n+                Using<CustomUintFormatter<8>>(their_services), // their service flags\n+                GetTime(),                                     // dummy time\n+                int64_t{},                                     // ignored service bits\n+                CService{},                                    // dummy\n+                int64_t{},                                     // ignored service bits\n+                CService{},                                    // ignored\n+                uint64_t{1},                                   // dummy nonce\n+                std::string{},                                 // dummy subver\n+                int32_t{},                                     // dummy starting_height\n+                true),                                         // fRelay\n+    };\n+    SendMessage(connman, peerman, node, msg_version);\n+    BOOST_CHECK(!node.fDisconnect);\n+    BOOST_CHECK_EQUAL(node.nVersion, PROTOCOL_VERSION);\n+    BOOST_CHECK_EQUAL(node.GetCommonVersion(), PROTOCOL_VERSION);\n+    CNodeStateStats stats;\n+    bool ret = peerman.GetNodeStateStats(node.GetId(), stats);\n+    BOOST_CHECK_EQUAL(ret, true);\n+    BOOST_CHECK_EQUAL(stats.their_services, their_services);\n+\n+    pre_verack_hook(connman, peerman, node);\n+\n+    // Send verack message\n+    CSerializedNetMsg msg_verack{mm.Make(NetMsgType::VERACK)};\n+    SendMessage(connman, peerman, node, msg_verack);\n+    BOOST_CHECK_EQUAL(node.fSuccessfullyConnected, true);\n+\n+    TestOnlyResetTimeData();\n+}\n+\n+BOOST_AUTO_TEST_CASE(version_handshake)\n+{\n+    auto connman = std::make_unique<ConnectionsInterfaceMock>();\n+    auto peerman = PeerManager::make(*connman, *m_node.addrman, nullptr,\n+                                     *m_node.chainman, *m_node.mempool, false);\n+\n+    // Mock an outbound peer\n+    CAddress addr1(ip(0xa0b0c001), NODE_NONE);\n+    CNode node{/*id=*/0, /*sock=*/nullptr, addr1, /*nKeyedNetGroupIn=*/0, /*nLocalHostNonceIn=*/0, CAddress(),\n+               /*addrNameIn=*/\"\", ConnectionType::OUTBOUND_FULL_RELAY, /*inbound_onion=*/false};\n+\n+    peerman->InitializeNode(node, /*our_services=*/ServiceFlags(NODE_NETWORK | NODE_WITNESS));\n+    Handshake(*connman, *peerman, node, /*their_services=*/ServiceFlags(NODE_NETWORK | NODE_WITNESS));\n+\n+    BOOST_CHECK_EQUAL(connman->m_message_types_sent[NetMsgType::VERSION], 1);\n+    BOOST_CHECK_EQUAL(connman->m_message_types_sent[NetMsgType::WTXIDRELAY], 1);\n+    BOOST_CHECK_EQUAL(connman->m_message_types_sent[NetMsgType::SENDADDRV2], 1);\n+    BOOST_CHECK_EQUAL(connman->m_message_types_sent[NetMsgType::VERACK], 1);\n+    BOOST_CHECK_EQUAL(connman->m_message_types_sent[NetMsgType::GETADDR], 1);\n+    BOOST_CHECK_EQUAL(connman->m_message_types_sent[NetMsgType::SENDCMPCT], 1);\n+    BOOST_CHECK_EQUAL(connman->m_message_types_sent[NetMsgType::GETHEADERS], 1);\n+    BOOST_CHECK_EQUAL(connman->m_message_types_sent[NetMsgType::FEEFILTER], 1);\n+\n+    peerman->FinalizeNode(node);\n+}\n+\n+static void CheckPingTimes(CNode& node, PeerManager& peerman,\n+                           std::chrono::microseconds min_ping_time, std::chrono::microseconds last_ping_time, std::chrono::microseconds ping_wait)\n+{\n+    // Check min and last ping times\n+    BOOST_CHECK_EQUAL(node.m_min_ping_time.load().count(), min_ping_time.count());\n+    BOOST_CHECK_EQUAL(node.m_last_ping_time.load().count(), last_ping_time.count());\n+\n+    // Check if and how long current ping has been pending\n+    CNodeStateStats stats;\n+    peerman.GetNodeStateStats(node.GetId(), stats);\n+    BOOST_CHECK_EQUAL(stats.m_ping_wait.count(), ping_wait.count());\n+}\n+\n+static void SendPong(CNode& node, ConnectionsInterfaceMock& connman,\n+                     PeerManager& peerman, std::optional<int64_t> nonce = {})\n+{\n+    const CNetMsgMaker mm{0};\n+    CSerializedNetMsg msg_pong = nonce ? mm.Make(NetMsgType::PONG, nonce.value()) : mm.Make(NetMsgType::PONG);\n+    SendMessage(connman, peerman, node, msg_pong);\n+}\n+\n+BOOST_AUTO_TEST_CASE(ping)\n+{\n+    // See PING_INTERVAL in net_processing.cpp\n+    constexpr int64_t PING_INTERVAL{2 * 60};\n+\n+    auto connman = std::make_unique<ConnectionsInterfaceMock>();\n+    auto peerman = PeerManager::make(*connman, *m_node.addrman, nullptr,\n+                                     *m_node.chainman, *m_node.mempool, false);\n+\n+    // Mock an outbound peer\n+    CNode node{/*id=*/0, /*sock=*/nullptr, CAddress(), /*nKeyedNetGroupIn=*/0, /*nLocalHostNonceIn=*/0, CAddress(),\n+               /*addrNameIn=*/\"\", ConnectionType::OUTBOUND_FULL_RELAY, /*inbound_onion=*/false};\n+\n+    peerman->InitializeNode(node, /*our_services=*/ServiceFlags(NODE_NETWORK | NODE_WITNESS));\n+\n+    // Use mock time to control pings from node\n+    SetMockTime(GetTime());\n+\n+    Handshake(*connman, *peerman, node, /*their_services=*/ServiceFlags(NODE_NETWORK | NODE_WITNESS));\n+\n+    BOOST_TEST_MESSAGE(\"Advanced mocktime and check that ping is sent after connection is established\");\n+    AdvanceMockTime(1);\n+    BOOST_CHECK_EQUAL(connman->m_message_types_sent[NetMsgType::PING], 1);\n+\n+    // The ping nonce should be non-zero\n+    BOOST_CHECK(connman->m_ping_nonce != 0);\n+\n+    // No pong response has been received yet, and current ping is outstanding\n+    CheckPingTimes(node, *peerman, std::chrono::microseconds::max(), 0us, 1s);",
      "path": "src/test/peerman_tests.cpp",
      "position": 258,
      "original_position": 258,
      "commit_id": "9c04c32101cd458c336de1d66ad296dc7f1cf35d",
      "original_commit_id": "9c04c32101cd458c336de1d66ad296dc7f1cf35d",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The `AdvanceMockTime(1)` from above belongs to just before this call. If the \"1 second\" is put in a variable that will make it obvious that it is the same as the 4th argument to `CheckPingTimes()`.",
      "created_at": "2022-11-03T10:47:16Z",
      "updated_at": "2022-11-04T15:00:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25515#discussion_r1012742783",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1012742783"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25515"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 258,
      "original_line": 258,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1012749883",
      "pull_request_review_id": 1166581907,
      "id": 1012749883,
      "node_id": "PRRC_kwDOABII5848XVY7",
      "diff_hunk": "@@ -0,0 +1,307 @@\n+// Copyright (c) 2011-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <arith_uint256.h>\n+#include <banman.h>\n+#include <chainparams.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <netmessagemaker.h>\n+#include <pubkey.h>\n+#include <script/sign.h>\n+#include <script/signingprovider.h>\n+#include <script/standard.h>\n+#include <serialize.h>\n+#include <span.h>\n+#include <test/util/net.h>\n+#include <test/util/setup_common.h>\n+#include <util/string.h>\n+#include <util/system.h>\n+#include <util/time.h>\n+#include <timedata.h>\n+#include <validation.h>\n+\n+#include <array>\n+#include <optional>\n+#include <stdint.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+static CService ip(uint32_t i)\n+{\n+    struct in_addr s;\n+    s.s_addr = i;\n+    return CService(CNetAddr(s), Params().GetDefaultPort());\n+}\n+\n+static void AdvanceMockTime(int64_t delta)\n+{\n+    auto time_before{GetMockTime()};\n+    SetMockTime(time_before + std::chrono::seconds(delta));\n+}\n+\n+/** Mock the connections interface. */\n+class ConnectionsInterfaceMock : public ConnectionsInterface\n+{\n+public:\n+    bool ForNode(NodeId id, std::function<bool(CNode* pnode)> func) override { return true; };\n+    using NodeFn = std::function<void(CNode*)>;\n+    void ForEachNode(const NodeFn& func) override {};\n+    void ForEachNode(const NodeFn& func) const override {};\n+    void PushMessage(CNode* pnode, CSerializedNetMsg&& msg) override;\n+    CSipHasher GetDeterministicRandomizer(uint64_t id) const override { return {0, 0}; };\n+    void WakeMessageHandler() override {};\n+    bool OutboundTargetReached(bool historicalBlockServingLimit) const override { return true; };\n+    std::vector<CAddress> GetAddresses(size_t max_addresses,\n+                                       size_t max_pct,\n+                                       std::optional<Network> network) const override { return {}; };\n+    std::vector<CAddress> GetAddresses(CNode& requestor, size_t max_addresses, size_t max_pct) override { return {}; };\n+    bool DisconnectNode(const CNetAddr& addr) override { return true; };\n+    unsigned int GetReceiveFloodSize() const override { return 0; };\n+    int GetExtraFullOutboundCount() const override { return 0; };\n+    int GetExtraBlockRelayCount() const override { return 0; };\n+    void SetTryNewOutboundPeer(bool flag) override {};\n+    bool GetTryNewOutboundPeer() const override { return true; };\n+    bool GetNetworkActive() const override { return true; };\n+    bool GetUseAddrmanOutgoing() const override { return true; };\n+    void StartExtraBlockRelayPeers() override {};\n+    bool ShouldRunInactivityChecks(const CNode& node, std::chrono::seconds now) const override { return true; };\n+    bool CheckIncomingNonce(uint64_t nonce) override { return true; };\n+\n+    void NodeReceiveMsgBytes(CNode& node, Span<const uint8_t> msg_bytes, bool& complete) const;\n+    bool ReceiveMsgFrom(CNode& node, CSerializedNetMsg& ser_msg) const;\n+    void OnPing(CDataStream& data);\n+\n+    virtual ~ConnectionsInterfaceMock() {}\n+\n+    /** Count of number of each message type sent */\n+    std::map<std::string, uint64_t> m_message_types_sent;\n+    /** Most recent ping nonce received. */\n+    uint64_t m_ping_nonce{0};\n+\n+};\n+\n+void ConnectionsInterfaceMock::PushMessage(CNode* pnode, CSerializedNetMsg&& msg)\n+{\n+    BOOST_TEST_MESSAGE(strprintf(\"sending message %s to peer %d\", msg.m_type, pnode->GetId()));\n+    m_message_types_sent[msg.m_type]++;\n+\n+    CDataStream data{msg.data, SER_NETWORK, PROTOCOL_VERSION};\n+    if (msg.m_type == NetMsgType::PING) OnPing(data);\n+}\n+\n+void ConnectionsInterfaceMock::OnPing(CDataStream& data)\n+{\n+    data >> m_ping_nonce;\n+    BOOST_TEST_MESSAGE(strprintf(\"received ping. Nonce:%d\", m_ping_nonce));\n+}\n+\n+void ConnectionsInterfaceMock::NodeReceiveMsgBytes(CNode& node, Span<const uint8_t> msg_bytes, bool& complete) const\n+{\n+    assert(node.ReceiveMsgBytes(msg_bytes, complete));\n+    if (complete) {\n+        size_t nSizeAdded = 0;\n+        auto it(node.vRecvMsg.begin());\n+        for (; it != node.vRecvMsg.end(); ++it) {\n+            // vRecvMsg contains only completed CNetMessage\n+            // the single possible partially deserialized message are held by TransportDeserializer\n+            nSizeAdded += it->m_raw_message_size;\n+        }\n+        {\n+            LOCK(node.cs_vProcessMsg);\n+            node.vProcessMsg.splice(node.vProcessMsg.end(), node.vRecvMsg, node.vRecvMsg.begin(), it);\n+            node.nProcessQueueSize += nSizeAdded;\n+        }\n+    }\n+}\n+\n+bool ConnectionsInterfaceMock::ReceiveMsgFrom(CNode& node, CSerializedNetMsg& ser_msg) const\n+{\n+    std::vector<uint8_t> ser_msg_header;\n+    node.m_serializer->prepareForTransport(ser_msg, ser_msg_header);\n+\n+    bool complete;\n+    NodeReceiveMsgBytes(node, ser_msg_header, complete);\n+    NodeReceiveMsgBytes(node, ser_msg.data, complete);\n+    return complete;\n+}\n+\n+BOOST_FIXTURE_TEST_SUITE(peerman_tests, TestingSetup)\n+\n+static void SendMessage(ConnectionsInterfaceMock& connman, PeerManager& peerman, CNode& node, CSerializedNetMsg& msg)\n+{\n+    std::atomic<bool> interrupt{false};\n+    (void)connman.ReceiveMsgFrom(node, msg);",
      "path": "src/test/peerman_tests.cpp",
      "position": 135,
      "original_position": 135,
      "commit_id": "9c04c32101cd458c336de1d66ad296dc7f1cf35d",
      "original_commit_id": "9c04c32101cd458c336de1d66ad296dc7f1cf35d",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This function simulates _receiving_ a message from the peer. I find the name `SendMessage()` confusing. Naming elsewhere in the code is from our point of view.",
      "created_at": "2022-11-03T10:54:36Z",
      "updated_at": "2022-11-04T15:00:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25515#discussion_r1012749883",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1012749883"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25515"
        }
      },
      "start_line": 132,
      "original_start_line": 132,
      "start_side": "RIGHT",
      "line": 135,
      "original_line": 135,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1012752032",
      "pull_request_review_id": 1166581907,
      "id": 1012752032,
      "node_id": "PRRC_kwDOABII5848XV6g",
      "diff_hunk": "@@ -0,0 +1,307 @@\n+// Copyright (c) 2011-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <arith_uint256.h>\n+#include <banman.h>\n+#include <chainparams.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <netmessagemaker.h>\n+#include <pubkey.h>\n+#include <script/sign.h>\n+#include <script/signingprovider.h>\n+#include <script/standard.h>\n+#include <serialize.h>\n+#include <span.h>\n+#include <test/util/net.h>\n+#include <test/util/setup_common.h>\n+#include <util/string.h>\n+#include <util/system.h>\n+#include <util/time.h>\n+#include <timedata.h>\n+#include <validation.h>\n+\n+#include <array>\n+#include <optional>\n+#include <stdint.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+static CService ip(uint32_t i)\n+{\n+    struct in_addr s;\n+    s.s_addr = i;\n+    return CService(CNetAddr(s), Params().GetDefaultPort());\n+}\n+\n+static void AdvanceMockTime(int64_t delta)\n+{\n+    auto time_before{GetMockTime()};\n+    SetMockTime(time_before + std::chrono::seconds(delta));\n+}\n+\n+/** Mock the connections interface. */\n+class ConnectionsInterfaceMock : public ConnectionsInterface\n+{\n+public:\n+    bool ForNode(NodeId id, std::function<bool(CNode* pnode)> func) override { return true; };\n+    using NodeFn = std::function<void(CNode*)>;\n+    void ForEachNode(const NodeFn& func) override {};\n+    void ForEachNode(const NodeFn& func) const override {};\n+    void PushMessage(CNode* pnode, CSerializedNetMsg&& msg) override;\n+    CSipHasher GetDeterministicRandomizer(uint64_t id) const override { return {0, 0}; };\n+    void WakeMessageHandler() override {};\n+    bool OutboundTargetReached(bool historicalBlockServingLimit) const override { return true; };\n+    std::vector<CAddress> GetAddresses(size_t max_addresses,\n+                                       size_t max_pct,\n+                                       std::optional<Network> network) const override { return {}; };\n+    std::vector<CAddress> GetAddresses(CNode& requestor, size_t max_addresses, size_t max_pct) override { return {}; };\n+    bool DisconnectNode(const CNetAddr& addr) override { return true; };\n+    unsigned int GetReceiveFloodSize() const override { return 0; };\n+    int GetExtraFullOutboundCount() const override { return 0; };\n+    int GetExtraBlockRelayCount() const override { return 0; };\n+    void SetTryNewOutboundPeer(bool flag) override {};\n+    bool GetTryNewOutboundPeer() const override { return true; };\n+    bool GetNetworkActive() const override { return true; };\n+    bool GetUseAddrmanOutgoing() const override { return true; };\n+    void StartExtraBlockRelayPeers() override {};\n+    bool ShouldRunInactivityChecks(const CNode& node, std::chrono::seconds now) const override { return true; };\n+    bool CheckIncomingNonce(uint64_t nonce) override { return true; };\n+\n+    void NodeReceiveMsgBytes(CNode& node, Span<const uint8_t> msg_bytes, bool& complete) const;\n+    bool ReceiveMsgFrom(CNode& node, CSerializedNetMsg& ser_msg) const;\n+    void OnPing(CDataStream& data);\n+\n+    virtual ~ConnectionsInterfaceMock() {}\n+\n+    /** Count of number of each message type sent */\n+    std::map<std::string, uint64_t> m_message_types_sent;\n+    /** Most recent ping nonce received. */\n+    uint64_t m_ping_nonce{0};\n+\n+};\n+\n+void ConnectionsInterfaceMock::PushMessage(CNode* pnode, CSerializedNetMsg&& msg)\n+{\n+    BOOST_TEST_MESSAGE(strprintf(\"sending message %s to peer %d\", msg.m_type, pnode->GetId()));\n+    m_message_types_sent[msg.m_type]++;\n+\n+    CDataStream data{msg.data, SER_NETWORK, PROTOCOL_VERSION};\n+    if (msg.m_type == NetMsgType::PING) OnPing(data);\n+}\n+\n+void ConnectionsInterfaceMock::OnPing(CDataStream& data)\n+{\n+    data >> m_ping_nonce;\n+    BOOST_TEST_MESSAGE(strprintf(\"received ping. Nonce:%d\", m_ping_nonce));\n+}\n+\n+void ConnectionsInterfaceMock::NodeReceiveMsgBytes(CNode& node, Span<const uint8_t> msg_bytes, bool& complete) const\n+{\n+    assert(node.ReceiveMsgBytes(msg_bytes, complete));\n+    if (complete) {\n+        size_t nSizeAdded = 0;\n+        auto it(node.vRecvMsg.begin());\n+        for (; it != node.vRecvMsg.end(); ++it) {\n+            // vRecvMsg contains only completed CNetMessage\n+            // the single possible partially deserialized message are held by TransportDeserializer\n+            nSizeAdded += it->m_raw_message_size;\n+        }\n+        {\n+            LOCK(node.cs_vProcessMsg);\n+            node.vProcessMsg.splice(node.vProcessMsg.end(), node.vRecvMsg, node.vRecvMsg.begin(), it);\n+            node.nProcessQueueSize += nSizeAdded;\n+        }\n+    }\n+}\n+\n+bool ConnectionsInterfaceMock::ReceiveMsgFrom(CNode& node, CSerializedNetMsg& ser_msg) const\n+{\n+    std::vector<uint8_t> ser_msg_header;\n+    node.m_serializer->prepareForTransport(ser_msg, ser_msg_header);\n+\n+    bool complete;\n+    NodeReceiveMsgBytes(node, ser_msg_header, complete);\n+    NodeReceiveMsgBytes(node, ser_msg.data, complete);\n+    return complete;\n+}\n+\n+BOOST_FIXTURE_TEST_SUITE(peerman_tests, TestingSetup)\n+\n+static void SendMessage(ConnectionsInterfaceMock& connman, PeerManager& peerman, CNode& node, CSerializedNetMsg& msg)\n+{\n+    std::atomic<bool> interrupt{false};\n+    (void)connman.ReceiveMsgFrom(node, msg);\n+    node.fPauseSend = false;\n+    LOCK(NetEventsInterface::g_msgproc_mutex);\n+    peerman.ProcessMessages(&node, interrupt);\n+    peerman.SendMessages(&node);\n+}\n+\n+using HandshakeHookFn = std::function<void(ConnectionsInterfaceMock& connman, PeerManager& peerman, CNode& node)>;\n+static void Handshake(\n+    ConnectionsInterfaceMock& connman, PeerManager& peerman,\n+    CNode& node, ServiceFlags their_services,\n+    HandshakeHookFn pre_verack_hook = [](ConnectionsInterfaceMock& connman, PeerManager& peerman, CNode& node) {}) noexcept\n+{\n+    // Send version message\n+    const CNetMsgMaker mm{0};\n+    CSerializedNetMsg msg_version{\n+        mm.Make(NetMsgType::VERSION,\n+                PROTOCOL_VERSION,                              // current p2p version\n+                Using<CustomUintFormatter<8>>(their_services), // their service flags\n+                GetTime(),                                     // dummy time\n+                int64_t{},                                     // ignored service bits\n+                CService{},                                    // dummy\n+                int64_t{},                                     // ignored service bits\n+                CService{},                                    // ignored\n+                uint64_t{1},                                   // dummy nonce\n+                std::string{},                                 // dummy subver\n+                int32_t{},                                     // dummy starting_height\n+                true),                                         // fRelay\n+    };\n+    SendMessage(connman, peerman, node, msg_version);\n+    BOOST_CHECK(!node.fDisconnect);\n+    BOOST_CHECK_EQUAL(node.nVersion, PROTOCOL_VERSION);\n+    BOOST_CHECK_EQUAL(node.GetCommonVersion(), PROTOCOL_VERSION);\n+    CNodeStateStats stats;\n+    bool ret = peerman.GetNodeStateStats(node.GetId(), stats);\n+    BOOST_CHECK_EQUAL(ret, true);\n+    BOOST_CHECK_EQUAL(stats.their_services, their_services);\n+\n+    pre_verack_hook(connman, peerman, node);\n+\n+    // Send verack message\n+    CSerializedNetMsg msg_verack{mm.Make(NetMsgType::VERACK)};\n+    SendMessage(connman, peerman, node, msg_verack);\n+    BOOST_CHECK_EQUAL(node.fSuccessfullyConnected, true);\n+\n+    TestOnlyResetTimeData();\n+}\n+\n+BOOST_AUTO_TEST_CASE(version_handshake)\n+{\n+    auto connman = std::make_unique<ConnectionsInterfaceMock>();\n+    auto peerman = PeerManager::make(*connman, *m_node.addrman, nullptr,\n+                                     *m_node.chainman, *m_node.mempool, false);\n+\n+    // Mock an outbound peer\n+    CAddress addr1(ip(0xa0b0c001), NODE_NONE);\n+    CNode node{/*id=*/0, /*sock=*/nullptr, addr1, /*nKeyedNetGroupIn=*/0, /*nLocalHostNonceIn=*/0, CAddress(),\n+               /*addrNameIn=*/\"\", ConnectionType::OUTBOUND_FULL_RELAY, /*inbound_onion=*/false};\n+\n+    peerman->InitializeNode(node, /*our_services=*/ServiceFlags(NODE_NETWORK | NODE_WITNESS));\n+    Handshake(*connman, *peerman, node, /*their_services=*/ServiceFlags(NODE_NETWORK | NODE_WITNESS));\n+\n+    BOOST_CHECK_EQUAL(connman->m_message_types_sent[NetMsgType::VERSION], 1);\n+    BOOST_CHECK_EQUAL(connman->m_message_types_sent[NetMsgType::WTXIDRELAY], 1);\n+    BOOST_CHECK_EQUAL(connman->m_message_types_sent[NetMsgType::SENDADDRV2], 1);\n+    BOOST_CHECK_EQUAL(connman->m_message_types_sent[NetMsgType::VERACK], 1);\n+    BOOST_CHECK_EQUAL(connman->m_message_types_sent[NetMsgType::GETADDR], 1);\n+    BOOST_CHECK_EQUAL(connman->m_message_types_sent[NetMsgType::SENDCMPCT], 1);\n+    BOOST_CHECK_EQUAL(connman->m_message_types_sent[NetMsgType::GETHEADERS], 1);\n+    BOOST_CHECK_EQUAL(connman->m_message_types_sent[NetMsgType::FEEFILTER], 1);\n+\n+    peerman->FinalizeNode(node);\n+}\n+\n+static void CheckPingTimes(CNode& node, PeerManager& peerman,\n+                           std::chrono::microseconds min_ping_time, std::chrono::microseconds last_ping_time, std::chrono::microseconds ping_wait)\n+{\n+    // Check min and last ping times\n+    BOOST_CHECK_EQUAL(node.m_min_ping_time.load().count(), min_ping_time.count());\n+    BOOST_CHECK_EQUAL(node.m_last_ping_time.load().count(), last_ping_time.count());\n+\n+    // Check if and how long current ping has been pending\n+    CNodeStateStats stats;\n+    peerman.GetNodeStateStats(node.GetId(), stats);\n+    BOOST_CHECK_EQUAL(stats.m_ping_wait.count(), ping_wait.count());\n+}\n+\n+static void SendPong(CNode& node, ConnectionsInterfaceMock& connman,",
      "path": "src/test/peerman_tests.cpp",
      "position": 222,
      "original_position": 222,
      "commit_id": "9c04c32101cd458c336de1d66ad296dc7f1cf35d",
      "original_commit_id": "9c04c32101cd458c336de1d66ad296dc7f1cf35d",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Same as `SendMessage()`: this is simulating the reception of a pong message from the peer and the name `SendPong()` is confusing.",
      "created_at": "2022-11-03T10:56:56Z",
      "updated_at": "2022-11-04T15:00:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25515#discussion_r1012752032",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1012752032"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25515"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 222,
      "original_line": 222,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1012768460",
      "pull_request_review_id": 1166581907,
      "id": 1012768460,
      "node_id": "PRRC_kwDOABII5848XZ7M",
      "diff_hunk": "@@ -0,0 +1,307 @@\n+// Copyright (c) 2011-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <arith_uint256.h>\n+#include <banman.h>\n+#include <chainparams.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <netmessagemaker.h>\n+#include <pubkey.h>\n+#include <script/sign.h>\n+#include <script/signingprovider.h>\n+#include <script/standard.h>\n+#include <serialize.h>\n+#include <span.h>\n+#include <test/util/net.h>\n+#include <test/util/setup_common.h>\n+#include <util/string.h>\n+#include <util/system.h>\n+#include <util/time.h>\n+#include <timedata.h>\n+#include <validation.h>\n+\n+#include <array>\n+#include <optional>\n+#include <stdint.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+static CService ip(uint32_t i)\n+{\n+    struct in_addr s;\n+    s.s_addr = i;\n+    return CService(CNetAddr(s), Params().GetDefaultPort());\n+}\n+\n+static void AdvanceMockTime(int64_t delta)\n+{\n+    auto time_before{GetMockTime()};\n+    SetMockTime(time_before + std::chrono::seconds(delta));\n+}\n+\n+/** Mock the connections interface. */\n+class ConnectionsInterfaceMock : public ConnectionsInterface\n+{\n+public:\n+    bool ForNode(NodeId id, std::function<bool(CNode* pnode)> func) override { return true; };\n+    using NodeFn = std::function<void(CNode*)>;\n+    void ForEachNode(const NodeFn& func) override {};\n+    void ForEachNode(const NodeFn& func) const override {};\n+    void PushMessage(CNode* pnode, CSerializedNetMsg&& msg) override;\n+    CSipHasher GetDeterministicRandomizer(uint64_t id) const override { return {0, 0}; };\n+    void WakeMessageHandler() override {};\n+    bool OutboundTargetReached(bool historicalBlockServingLimit) const override { return true; };\n+    std::vector<CAddress> GetAddresses(size_t max_addresses,\n+                                       size_t max_pct,\n+                                       std::optional<Network> network) const override { return {}; };\n+    std::vector<CAddress> GetAddresses(CNode& requestor, size_t max_addresses, size_t max_pct) override { return {}; };\n+    bool DisconnectNode(const CNetAddr& addr) override { return true; };\n+    unsigned int GetReceiveFloodSize() const override { return 0; };\n+    int GetExtraFullOutboundCount() const override { return 0; };\n+    int GetExtraBlockRelayCount() const override { return 0; };\n+    void SetTryNewOutboundPeer(bool flag) override {};\n+    bool GetTryNewOutboundPeer() const override { return true; };\n+    bool GetNetworkActive() const override { return true; };\n+    bool GetUseAddrmanOutgoing() const override { return true; };\n+    void StartExtraBlockRelayPeers() override {};\n+    bool ShouldRunInactivityChecks(const CNode& node, std::chrono::seconds now) const override { return true; };\n+    bool CheckIncomingNonce(uint64_t nonce) override { return true; };\n+\n+    void NodeReceiveMsgBytes(CNode& node, Span<const uint8_t> msg_bytes, bool& complete) const;\n+    bool ReceiveMsgFrom(CNode& node, CSerializedNetMsg& ser_msg) const;\n+    void OnPing(CDataStream& data);\n+\n+    virtual ~ConnectionsInterfaceMock() {}\n+\n+    /** Count of number of each message type sent */\n+    std::map<std::string, uint64_t> m_message_types_sent;\n+    /** Most recent ping nonce received. */\n+    uint64_t m_ping_nonce{0};\n+\n+};\n+\n+void ConnectionsInterfaceMock::PushMessage(CNode* pnode, CSerializedNetMsg&& msg)\n+{\n+    BOOST_TEST_MESSAGE(strprintf(\"sending message %s to peer %d\", msg.m_type, pnode->GetId()));\n+    m_message_types_sent[msg.m_type]++;\n+\n+    CDataStream data{msg.data, SER_NETWORK, PROTOCOL_VERSION};\n+    if (msg.m_type == NetMsgType::PING) OnPing(data);\n+}\n+\n+void ConnectionsInterfaceMock::OnPing(CDataStream& data)\n+{\n+    data >> m_ping_nonce;\n+    BOOST_TEST_MESSAGE(strprintf(\"received ping. Nonce:%d\", m_ping_nonce));\n+}\n+\n+void ConnectionsInterfaceMock::NodeReceiveMsgBytes(CNode& node, Span<const uint8_t> msg_bytes, bool& complete) const\n+{\n+    assert(node.ReceiveMsgBytes(msg_bytes, complete));\n+    if (complete) {\n+        size_t nSizeAdded = 0;\n+        auto it(node.vRecvMsg.begin());\n+        for (; it != node.vRecvMsg.end(); ++it) {\n+            // vRecvMsg contains only completed CNetMessage\n+            // the single possible partially deserialized message are held by TransportDeserializer\n+            nSizeAdded += it->m_raw_message_size;\n+        }\n+        {\n+            LOCK(node.cs_vProcessMsg);\n+            node.vProcessMsg.splice(node.vProcessMsg.end(), node.vRecvMsg, node.vRecvMsg.begin(), it);\n+            node.nProcessQueueSize += nSizeAdded;\n+        }\n+    }\n+}\n+\n+bool ConnectionsInterfaceMock::ReceiveMsgFrom(CNode& node, CSerializedNetMsg& ser_msg) const\n+{\n+    std::vector<uint8_t> ser_msg_header;\n+    node.m_serializer->prepareForTransport(ser_msg, ser_msg_header);\n+\n+    bool complete;\n+    NodeReceiveMsgBytes(node, ser_msg_header, complete);\n+    NodeReceiveMsgBytes(node, ser_msg.data, complete);\n+    return complete;\n+}\n+\n+BOOST_FIXTURE_TEST_SUITE(peerman_tests, TestingSetup)\n+\n+static void SendMessage(ConnectionsInterfaceMock& connman, PeerManager& peerman, CNode& node, CSerializedNetMsg& msg)\n+{\n+    std::atomic<bool> interrupt{false};\n+    (void)connman.ReceiveMsgFrom(node, msg);\n+    node.fPauseSend = false;\n+    LOCK(NetEventsInterface::g_msgproc_mutex);\n+    peerman.ProcessMessages(&node, interrupt);\n+    peerman.SendMessages(&node);\n+}\n+\n+using HandshakeHookFn = std::function<void(ConnectionsInterfaceMock& connman, PeerManager& peerman, CNode& node)>;\n+static void Handshake(\n+    ConnectionsInterfaceMock& connman, PeerManager& peerman,\n+    CNode& node, ServiceFlags their_services,\n+    HandshakeHookFn pre_verack_hook = [](ConnectionsInterfaceMock& connman, PeerManager& peerman, CNode& node) {}) noexcept\n+{\n+    // Send version message\n+    const CNetMsgMaker mm{0};\n+    CSerializedNetMsg msg_version{\n+        mm.Make(NetMsgType::VERSION,\n+                PROTOCOL_VERSION,                              // current p2p version\n+                Using<CustomUintFormatter<8>>(their_services), // their service flags\n+                GetTime(),                                     // dummy time\n+                int64_t{},                                     // ignored service bits\n+                CService{},                                    // dummy\n+                int64_t{},                                     // ignored service bits\n+                CService{},                                    // ignored\n+                uint64_t{1},                                   // dummy nonce\n+                std::string{},                                 // dummy subver\n+                int32_t{},                                     // dummy starting_height\n+                true),                                         // fRelay\n+    };\n+    SendMessage(connman, peerman, node, msg_version);\n+    BOOST_CHECK(!node.fDisconnect);\n+    BOOST_CHECK_EQUAL(node.nVersion, PROTOCOL_VERSION);\n+    BOOST_CHECK_EQUAL(node.GetCommonVersion(), PROTOCOL_VERSION);\n+    CNodeStateStats stats;\n+    bool ret = peerman.GetNodeStateStats(node.GetId(), stats);\n+    BOOST_CHECK_EQUAL(ret, true);\n+    BOOST_CHECK_EQUAL(stats.their_services, their_services);\n+\n+    pre_verack_hook(connman, peerman, node);\n+\n+    // Send verack message\n+    CSerializedNetMsg msg_verack{mm.Make(NetMsgType::VERACK)};\n+    SendMessage(connman, peerman, node, msg_verack);\n+    BOOST_CHECK_EQUAL(node.fSuccessfullyConnected, true);\n+\n+    TestOnlyResetTimeData();\n+}\n+\n+BOOST_AUTO_TEST_CASE(version_handshake)\n+{\n+    auto connman = std::make_unique<ConnectionsInterfaceMock>();\n+    auto peerman = PeerManager::make(*connman, *m_node.addrman, nullptr,\n+                                     *m_node.chainman, *m_node.mempool, false);\n+\n+    // Mock an outbound peer\n+    CAddress addr1(ip(0xa0b0c001), NODE_NONE);\n+    CNode node{/*id=*/0, /*sock=*/nullptr, addr1, /*nKeyedNetGroupIn=*/0, /*nLocalHostNonceIn=*/0, CAddress(),\n+               /*addrNameIn=*/\"\", ConnectionType::OUTBOUND_FULL_RELAY, /*inbound_onion=*/false};\n+\n+    peerman->InitializeNode(node, /*our_services=*/ServiceFlags(NODE_NETWORK | NODE_WITNESS));\n+    Handshake(*connman, *peerman, node, /*their_services=*/ServiceFlags(NODE_NETWORK | NODE_WITNESS));\n+\n+    BOOST_CHECK_EQUAL(connman->m_message_types_sent[NetMsgType::VERSION], 1);\n+    BOOST_CHECK_EQUAL(connman->m_message_types_sent[NetMsgType::WTXIDRELAY], 1);\n+    BOOST_CHECK_EQUAL(connman->m_message_types_sent[NetMsgType::SENDADDRV2], 1);\n+    BOOST_CHECK_EQUAL(connman->m_message_types_sent[NetMsgType::VERACK], 1);\n+    BOOST_CHECK_EQUAL(connman->m_message_types_sent[NetMsgType::GETADDR], 1);\n+    BOOST_CHECK_EQUAL(connman->m_message_types_sent[NetMsgType::SENDCMPCT], 1);\n+    BOOST_CHECK_EQUAL(connman->m_message_types_sent[NetMsgType::GETHEADERS], 1);\n+    BOOST_CHECK_EQUAL(connman->m_message_types_sent[NetMsgType::FEEFILTER], 1);\n+\n+    peerman->FinalizeNode(node);\n+}\n+\n+static void CheckPingTimes(CNode& node, PeerManager& peerman,\n+                           std::chrono::microseconds min_ping_time, std::chrono::microseconds last_ping_time, std::chrono::microseconds ping_wait)\n+{\n+    // Check min and last ping times\n+    BOOST_CHECK_EQUAL(node.m_min_ping_time.load().count(), min_ping_time.count());\n+    BOOST_CHECK_EQUAL(node.m_last_ping_time.load().count(), last_ping_time.count());\n+\n+    // Check if and how long current ping has been pending\n+    CNodeStateStats stats;\n+    peerman.GetNodeStateStats(node.GetId(), stats);\n+    BOOST_CHECK_EQUAL(stats.m_ping_wait.count(), ping_wait.count());\n+}\n+\n+static void SendPong(CNode& node, ConnectionsInterfaceMock& connman,\n+                     PeerManager& peerman, std::optional<int64_t> nonce = {})\n+{\n+    const CNetMsgMaker mm{0};\n+    CSerializedNetMsg msg_pong = nonce ? mm.Make(NetMsgType::PONG, nonce.value()) : mm.Make(NetMsgType::PONG);\n+    SendMessage(connman, peerman, node, msg_pong);\n+}\n+\n+BOOST_AUTO_TEST_CASE(ping)\n+{\n+    // See PING_INTERVAL in net_processing.cpp\n+    constexpr int64_t PING_INTERVAL{2 * 60};\n+\n+    auto connman = std::make_unique<ConnectionsInterfaceMock>();\n+    auto peerman = PeerManager::make(*connman, *m_node.addrman, nullptr,\n+                                     *m_node.chainman, *m_node.mempool, false);\n+\n+    // Mock an outbound peer\n+    CNode node{/*id=*/0, /*sock=*/nullptr, CAddress(), /*nKeyedNetGroupIn=*/0, /*nLocalHostNonceIn=*/0, CAddress(),\n+               /*addrNameIn=*/\"\", ConnectionType::OUTBOUND_FULL_RELAY, /*inbound_onion=*/false};\n+\n+    peerman->InitializeNode(node, /*our_services=*/ServiceFlags(NODE_NETWORK | NODE_WITNESS));\n+\n+    // Use mock time to control pings from node\n+    SetMockTime(GetTime());\n+\n+    Handshake(*connman, *peerman, node, /*their_services=*/ServiceFlags(NODE_NETWORK | NODE_WITNESS));\n+\n+    BOOST_TEST_MESSAGE(\"Advanced mocktime and check that ping is sent after connection is established\");\n+    AdvanceMockTime(1);\n+    BOOST_CHECK_EQUAL(connman->m_message_types_sent[NetMsgType::PING], 1);\n+\n+    // The ping nonce should be non-zero\n+    BOOST_CHECK(connman->m_ping_nonce != 0);\n+\n+    // No pong response has been received yet, and current ping is outstanding\n+    CheckPingTimes(node, *peerman, std::chrono::microseconds::max(), 0us, 1s);\n+\n+    BOOST_TEST_MESSAGE(\"Reply without nonce cancels ping\");\n+    SendPong(node, *connman, *peerman, std::nullopt);\n+\n+    // Ping metrics have not been updated on the CNode object, and there is no ping outstanding\n+    CheckPingTimes(node, *peerman, std::chrono::microseconds::max(), 0us, 0us);\n+\n+    BOOST_TEST_MESSAGE(\"Reply without ping\");\n+    SendPong(node, *connman, *peerman, 0);\n+\n+    // Ping metrics have not been updated on the CNode object, and there is no ping outstanding\n+    CheckPingTimes(node, *peerman, std::chrono::microseconds::max(), 0us, 0us);",
      "path": "src/test/peerman_tests.cpp",
      "position": 270,
      "original_position": 270,
      "commit_id": "9c04c32101cd458c336de1d66ad296dc7f1cf35d",
      "original_commit_id": "9c04c32101cd458c336de1d66ad296dc7f1cf35d",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Maybe use `ASSERT_DEBUG_LOG(\"Unsolicited pong without ping\")` here.",
      "created_at": "2022-11-03T11:15:10Z",
      "updated_at": "2022-11-04T15:00:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25515#discussion_r1012768460",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1012768460"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25515"
        }
      },
      "start_line": 266,
      "original_start_line": 266,
      "start_side": "RIGHT",
      "line": 270,
      "original_line": 270,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1012809634",
      "pull_request_review_id": 1166581907,
      "id": 1012809634,
      "node_id": "PRRC_kwDOABII5848Xj-i",
      "diff_hunk": "@@ -0,0 +1,307 @@\n+// Copyright (c) 2011-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <arith_uint256.h>\n+#include <banman.h>\n+#include <chainparams.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <netmessagemaker.h>\n+#include <pubkey.h>\n+#include <script/sign.h>\n+#include <script/signingprovider.h>\n+#include <script/standard.h>\n+#include <serialize.h>\n+#include <span.h>\n+#include <test/util/net.h>\n+#include <test/util/setup_common.h>\n+#include <util/string.h>\n+#include <util/system.h>\n+#include <util/time.h>\n+#include <timedata.h>\n+#include <validation.h>\n+\n+#include <array>\n+#include <optional>\n+#include <stdint.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+static CService ip(uint32_t i)\n+{\n+    struct in_addr s;\n+    s.s_addr = i;\n+    return CService(CNetAddr(s), Params().GetDefaultPort());\n+}\n+\n+static void AdvanceMockTime(int64_t delta)\n+{\n+    auto time_before{GetMockTime()};\n+    SetMockTime(time_before + std::chrono::seconds(delta));\n+}\n+\n+/** Mock the connections interface. */\n+class ConnectionsInterfaceMock : public ConnectionsInterface\n+{\n+public:\n+    bool ForNode(NodeId id, std::function<bool(CNode* pnode)> func) override { return true; };\n+    using NodeFn = std::function<void(CNode*)>;\n+    void ForEachNode(const NodeFn& func) override {};\n+    void ForEachNode(const NodeFn& func) const override {};\n+    void PushMessage(CNode* pnode, CSerializedNetMsg&& msg) override;\n+    CSipHasher GetDeterministicRandomizer(uint64_t id) const override { return {0, 0}; };\n+    void WakeMessageHandler() override {};\n+    bool OutboundTargetReached(bool historicalBlockServingLimit) const override { return true; };\n+    std::vector<CAddress> GetAddresses(size_t max_addresses,\n+                                       size_t max_pct,\n+                                       std::optional<Network> network) const override { return {}; };\n+    std::vector<CAddress> GetAddresses(CNode& requestor, size_t max_addresses, size_t max_pct) override { return {}; };\n+    bool DisconnectNode(const CNetAddr& addr) override { return true; };\n+    unsigned int GetReceiveFloodSize() const override { return 0; };\n+    int GetExtraFullOutboundCount() const override { return 0; };\n+    int GetExtraBlockRelayCount() const override { return 0; };\n+    void SetTryNewOutboundPeer(bool flag) override {};\n+    bool GetTryNewOutboundPeer() const override { return true; };\n+    bool GetNetworkActive() const override { return true; };\n+    bool GetUseAddrmanOutgoing() const override { return true; };\n+    void StartExtraBlockRelayPeers() override {};\n+    bool ShouldRunInactivityChecks(const CNode& node, std::chrono::seconds now) const override { return true; };\n+    bool CheckIncomingNonce(uint64_t nonce) override { return true; };\n+\n+    void NodeReceiveMsgBytes(CNode& node, Span<const uint8_t> msg_bytes, bool& complete) const;\n+    bool ReceiveMsgFrom(CNode& node, CSerializedNetMsg& ser_msg) const;\n+    void OnPing(CDataStream& data);\n+\n+    virtual ~ConnectionsInterfaceMock() {}\n+\n+    /** Count of number of each message type sent */\n+    std::map<std::string, uint64_t> m_message_types_sent;\n+    /** Most recent ping nonce received. */\n+    uint64_t m_ping_nonce{0};\n+\n+};\n+\n+void ConnectionsInterfaceMock::PushMessage(CNode* pnode, CSerializedNetMsg&& msg)\n+{\n+    BOOST_TEST_MESSAGE(strprintf(\"sending message %s to peer %d\", msg.m_type, pnode->GetId()));\n+    m_message_types_sent[msg.m_type]++;\n+\n+    CDataStream data{msg.data, SER_NETWORK, PROTOCOL_VERSION};\n+    if (msg.m_type == NetMsgType::PING) OnPing(data);\n+}\n+\n+void ConnectionsInterfaceMock::OnPing(CDataStream& data)\n+{\n+    data >> m_ping_nonce;\n+    BOOST_TEST_MESSAGE(strprintf(\"received ping. Nonce:%d\", m_ping_nonce));\n+}\n+\n+void ConnectionsInterfaceMock::NodeReceiveMsgBytes(CNode& node, Span<const uint8_t> msg_bytes, bool& complete) const\n+{\n+    assert(node.ReceiveMsgBytes(msg_bytes, complete));\n+    if (complete) {\n+        size_t nSizeAdded = 0;\n+        auto it(node.vRecvMsg.begin());\n+        for (; it != node.vRecvMsg.end(); ++it) {\n+            // vRecvMsg contains only completed CNetMessage\n+            // the single possible partially deserialized message are held by TransportDeserializer\n+            nSizeAdded += it->m_raw_message_size;\n+        }\n+        {\n+            LOCK(node.cs_vProcessMsg);\n+            node.vProcessMsg.splice(node.vProcessMsg.end(), node.vRecvMsg, node.vRecvMsg.begin(), it);\n+            node.nProcessQueueSize += nSizeAdded;\n+        }\n+    }\n+}\n+\n+bool ConnectionsInterfaceMock::ReceiveMsgFrom(CNode& node, CSerializedNetMsg& ser_msg) const\n+{\n+    std::vector<uint8_t> ser_msg_header;\n+    node.m_serializer->prepareForTransport(ser_msg, ser_msg_header);\n+\n+    bool complete;\n+    NodeReceiveMsgBytes(node, ser_msg_header, complete);\n+    NodeReceiveMsgBytes(node, ser_msg.data, complete);\n+    return complete;\n+}\n+\n+BOOST_FIXTURE_TEST_SUITE(peerman_tests, TestingSetup)\n+\n+static void SendMessage(ConnectionsInterfaceMock& connman, PeerManager& peerman, CNode& node, CSerializedNetMsg& msg)\n+{\n+    std::atomic<bool> interrupt{false};\n+    (void)connman.ReceiveMsgFrom(node, msg);\n+    node.fPauseSend = false;\n+    LOCK(NetEventsInterface::g_msgproc_mutex);\n+    peerman.ProcessMessages(&node, interrupt);\n+    peerman.SendMessages(&node);\n+}\n+\n+using HandshakeHookFn = std::function<void(ConnectionsInterfaceMock& connman, PeerManager& peerman, CNode& node)>;\n+static void Handshake(\n+    ConnectionsInterfaceMock& connman, PeerManager& peerman,\n+    CNode& node, ServiceFlags their_services,\n+    HandshakeHookFn pre_verack_hook = [](ConnectionsInterfaceMock& connman, PeerManager& peerman, CNode& node) {}) noexcept",
      "path": "src/test/peerman_tests.cpp",
      "position": 146,
      "original_position": 146,
      "commit_id": "9c04c32101cd458c336de1d66ad296dc7f1cf35d",
      "original_commit_id": "9c04c32101cd458c336de1d66ad296dc7f1cf35d",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This is very similar to `ConnmanTestMsg::Handshake()`. To avoid code duplication, can it be used instead?",
      "created_at": "2022-11-03T12:00:58Z",
      "updated_at": "2022-11-04T15:00:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25515#discussion_r1012809634",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1012809634"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25515"
        }
      },
      "start_line": 143,
      "original_start_line": 143,
      "start_side": "RIGHT",
      "line": 146,
      "original_line": 146,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1013142021",
      "pull_request_review_id": 1167285173,
      "id": 1013142021,
      "node_id": "PRRC_kwDOABII5848Y1IF",
      "diff_hunk": "@@ -0,0 +1,188 @@\n+// Copyright (c) 2011-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <arith_uint256.h>\n+#include <banman.h>\n+#include <chainparams.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <netmessagemaker.h>\n+#include <pubkey.h>\n+#include <script/sign.h>\n+#include <script/signingprovider.h>\n+#include <script/standard.h>\n+#include <serialize.h>\n+#include <test/util/net.h>\n+#include <test/util/setup_common.h>\n+#include <util/string.h>\n+#include <util/system.h>\n+#include <util/time.h>\n+#include <timedata.h>\n+#include <validation.h>\n+\n+#include <array>\n+#include <stdint.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+static CService ip(uint32_t i)\n+{\n+    struct in_addr s;\n+    s.s_addr = i;\n+    return CService(CNetAddr(s), Params().GetDefaultPort());\n+}\n+\n+/** Mock the connections interface. */\n+class ConnectionsInterfaceMock : public ConnectionsInterface\n+{\n+public:\n+    bool ForNode(NodeId id, std::function<bool(CNode* pnode)> func) override { return true; };\n+    using NodeFn = std::function<void(CNode*)>;\n+    void ForEachNode(const NodeFn& func) override {};\n+    void ForEachNode(const NodeFn& func) const override {};\n+    void PushMessage(CNode* pnode, CSerializedNetMsg&& msg) override;\n+    CSipHasher GetDeterministicRandomizer(uint64_t id) const override { return {0, 0}; };\n+    void WakeMessageHandler() override {};\n+    bool OutboundTargetReached(bool historicalBlockServingLimit) const override { return true; };\n+    std::vector<CAddress> GetAddresses(size_t max_addresses,\n+                                       size_t max_pct,\n+                                       std::optional<Network> network) const override { return {}; };\n+    std::vector<CAddress> GetAddresses(CNode& requestor, size_t max_addresses, size_t max_pct) override { return {}; };\n+    bool DisconnectNode(const CNetAddr& addr) override { return true; };\n+    unsigned int GetReceiveFloodSize() const override { return 0; };\n+    int GetExtraFullOutboundCount() const override { return 0; };\n+    int GetExtraBlockRelayCount() const override { return 0; };\n+    void SetTryNewOutboundPeer(bool flag) override {};\n+    bool GetTryNewOutboundPeer() const override { return true; };\n+    bool GetNetworkActive() const override { return true; };\n+    bool GetUseAddrmanOutgoing() const override { return true; };\n+    void StartExtraBlockRelayPeers() override {};\n+    bool ShouldRunInactivityChecks(const CNode& node, std::chrono::seconds now) const override { return true; };\n+    bool CheckIncomingNonce(uint64_t nonce) override { return true; };\n+\n+    void NodeReceiveMsgBytes(CNode& node, Span<const uint8_t> msg_bytes, bool& complete) const;\n+    bool ReceiveMsgFrom(CNode& node, CSerializedNetMsg& ser_msg) const;\n+\n+    virtual ~ConnectionsInterfaceMock() {}\n+\n+    /** Count of number of each message type sent */\n+    std::map<std::string, uint64_t> m_message_types_sent;\n+};\n+\n+void ConnectionsInterfaceMock::PushMessage(CNode* pnode, CSerializedNetMsg&& msg)\n+{\n+    BOOST_TEST_MESSAGE(strprintf(\"sending message %s to peer %d\", msg.m_type, pnode->GetId()));\n+    m_message_types_sent[msg.m_type]++;\n+}\n+\n+void ConnectionsInterfaceMock::NodeReceiveMsgBytes(CNode& node, Span<const uint8_t> msg_bytes, bool& complete) const\n+{\n+    assert(node.ReceiveMsgBytes(msg_bytes, complete));",
      "path": "src/test/peerman_tests.cpp",
      "position": 81,
      "original_position": 81,
      "commit_id": "9c04c32101cd458c336de1d66ad296dc7f1cf35d",
      "original_commit_id": "bdfe134ed6b13e69becc43c9e0a8f958e8931b0a",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "According to our coding guidelines, [assertions shouldn't have side-effects](https://github.com/bitcoin/bitcoin/blob/28653a596ab7e0811ffec3bbb7632e17d54f8e43/doc/developer-notes.md?plain=1#L725).\r\n```suggestion\r\n    bool success = node.ReceiveMsgBytes(msg_bytes, complete);\r\n    assert(success);\r\n```",
      "created_at": "2022-11-03T16:30:34Z",
      "updated_at": "2022-11-03T16:44:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25515#discussion_r1013142021",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1013142021"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25515"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 102,
      "original_line": 81,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1013149806",
      "pull_request_review_id": 1167285173,
      "id": 1013149806,
      "node_id": "PRRC_kwDOABII5848Y3Bu",
      "diff_hunk": "@@ -0,0 +1,188 @@\n+// Copyright (c) 2011-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <arith_uint256.h>\n+#include <banman.h>\n+#include <chainparams.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <netmessagemaker.h>\n+#include <pubkey.h>\n+#include <script/sign.h>\n+#include <script/signingprovider.h>\n+#include <script/standard.h>",
      "path": "src/test/peerman_tests.cpp",
      "position": 14,
      "original_position": 14,
      "commit_id": "9c04c32101cd458c336de1d66ad296dc7f1cf35d",
      "original_commit_id": "bdfe134ed6b13e69becc43c9e0a8f958e8931b0a",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: Seems like a lot of these includes are unnecessary and can be removed; e.g. I don't see any arith_uint256-, pubkey- or script-related stuff used in the unit test. With the following diff it still compiles:\r\n```diff\r\ndiff --git a/src/test/peerman_tests.cpp b/src/test/peerman_tests.cpp\r\nindex 8ab87be6b..9d0c02fd0 100644\r\n--- a/src/test/peerman_tests.cpp\r\n+++ b/src/test/peerman_tests.cpp\r\n@@ -2,16 +2,11 @@\r\n // Distributed under the MIT software license, see the accompanying\r\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\r\n\r\n-#include <arith_uint256.h>\r\n #include <banman.h>\r\n #include <chainparams.h>\r\n #include <net.h>\r\n #include <net_processing.h>\r\n #include <netmessagemaker.h>\r\n-#include <pubkey.h>\r\n-#include <script/sign.h>\r\n-#include <script/signingprovider.h>\r\n-#include <script/standard.h>\r\n #include <serialize.h>\r\n #include <span.h>\r\n #include <test/util/net.h>\r\n@@ -22,7 +17,6 @@\r\n #include <timedata.h>\r\n #include <validation.h>\r\n\r\n-#include <array>\r\n #include <optional>\r\n #include <stdint.h>\r\n\r\n```",
      "created_at": "2022-11-03T16:35:54Z",
      "updated_at": "2022-11-03T16:44:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25515#discussion_r1013149806",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1013149806"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25515"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 14,
      "original_line": 14,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1014128036",
      "pull_request_review_id": 1166581907,
      "id": 1014128036,
      "node_id": "PRRC_kwDOABII5848cl2k",
      "diff_hunk": "@@ -663,7 +664,64 @@ class NetEventsInterface\n     ~NetEventsInterface() = default;\n };\n \n-class CConnman\n+/** Interface class for interacting with CConnman */\n+class ConnectionsInterface",
      "path": "src/net.h",
      "position": 14,
      "original_position": 14,
      "commit_id": "9c04c32101cd458c336de1d66ad296dc7f1cf35d",
      "original_commit_id": "9c04c32101cd458c336de1d66ad296dc7f1cf35d",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think that the tests added in this PR can be done without virtualizing `CConnman` and without touching the source code at all, by capturing the sent and received messages (see `net_tests/initial_advertise_from_version_message` for an example).",
      "created_at": "2022-11-04T14:57:49Z",
      "updated_at": "2022-11-04T15:00:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25515#discussion_r1014128036",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1014128036"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25515"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 668,
      "original_line": 668,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1014164912",
      "pull_request_review_id": 1168753395,
      "id": 1014164912,
      "node_id": "PRRC_kwDOABII5848cu2w",
      "diff_hunk": "@@ -663,7 +664,64 @@ class NetEventsInterface\n     ~NetEventsInterface() = default;\n };\n \n-class CConnman\n+/** Interface class for interacting with CConnman */\n+class ConnectionsInterface",
      "path": "src/net.h",
      "position": 14,
      "original_position": 14,
      "commit_id": "9c04c32101cd458c336de1d66ad296dc7f1cf35d",
      "original_commit_id": "9c04c32101cd458c336de1d66ad296dc7f1cf35d",
      "in_reply_to_id": 1014128036,
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Huh I have not seen that before, thanks for bringing it up! While we could do that, i think that virtualizing `CConnman` is just the right thing to do for several reasons.\r\n\r\n- Defining an interface for it gets us a step closer to hiding more implementation details of our net module (similar to what we did with net processing. See `net_processing.h`, it (almost) only has the interface definition for `PeerManager`).\r\n- Mocking `CConnman` is much easier if such an interface definition exists. That's nice for unit tests but also nice for fuzz testing as we could have a `FuzzedConnman` (similar to your work on `FuzzedSock`).\r\n- Future tests might need more functionality besides capturing messages, so having the ability to mock the entire `CConnman` would be nice.\r\n",
      "created_at": "2022-11-04T15:24:49Z",
      "updated_at": "2022-11-04T15:24:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25515#discussion_r1014164912",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1014164912"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25515"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 668,
      "original_line": 668,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1015336054",
      "pull_request_review_id": 1170268723,
      "id": 1015336054,
      "node_id": "PRRC_kwDOABII5848hMx2",
      "diff_hunk": "@@ -663,7 +664,64 @@ class NetEventsInterface\n     ~NetEventsInterface() = default;\n };\n \n-class CConnman\n+/** Interface class for interacting with CConnman */\n+class ConnectionsInterface",
      "path": "src/net.h",
      "position": 14,
      "original_position": 14,
      "commit_id": "9c04c32101cd458c336de1d66ad296dc7f1cf35d",
      "original_commit_id": "9c04c32101cd458c336de1d66ad296dc7f1cf35d",
      "in_reply_to_id": 1014128036,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> ... i think that virtualizing `CConnman` is just the right thing to do for several reasons\r\n\r\nMaybe put those in the OP to make the case for virtualizing stronger.\r\n\r\n> Defining an interface for it gets us a step closer to hiding more implementation details ...\r\n\r\nIn general, I wonder if we are going a step too far with \"hiding implementation details\". Are we aiming to remove `private:` sections from classes defined in header files?\r\n\r\nPImpl and virtualization have their use cases but IMO shouldn't be used as if they are universally good (as in \"lets pimpl and virtualize everything because the code will become better just by doing that\"). They could have adverse effects if abused.\r\n\r\n> * Mocking `CConnman` is much easier if such an interface definition exists ...\r\n> * Future tests might need more functionality besides capturing messages ...\r\n\r\nI agree.",
      "created_at": "2022-11-07T11:57:34Z",
      "updated_at": "2022-11-07T11:57:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25515#discussion_r1015336054",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1015336054"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25515"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 668,
      "original_line": 668,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1022470321",
      "pull_request_review_id": 1180407764,
      "id": 1022470321,
      "node_id": "PRRC_kwDOABII58488aix",
      "diff_hunk": "@@ -663,7 +664,64 @@ class NetEventsInterface\n     ~NetEventsInterface() = default;\n };\n \n-class CConnman\n+/** Interface class for interacting with CConnman */\n+class ConnectionsInterface",
      "path": "src/net.h",
      "position": 14,
      "original_position": 14,
      "commit_id": "9c04c32101cd458c336de1d66ad296dc7f1cf35d",
      "original_commit_id": "9c04c32101cd458c336de1d66ad296dc7f1cf35d",
      "in_reply_to_id": 1014128036,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> the tests added in this PR can be done without ... touching the source code at all\r\n\r\nYes, that works. Here it is:\r\n\r\n<details>\r\n<summary>tests</summary>\r\n\r\n```diff\r\ndiff --git a/src/test/net_tests.cpp b/src/test/net_tests.cpp\r\nindex f24509dd97..105f4e4487 100644\r\n--- a/src/test/net_tests.cpp\r\n+++ b/src/test/net_tests.cpp\r\n@@ -11,12 +11,14 @@\r\n #include <netaddress.h>\r\n #include <netbase.h>\r\n #include <netmessagemaker.h>\r\n #include <serialize.h>\r\n #include <span.h>\r\n #include <streams.h>\r\n+#include <test/util/logging.h>\r\n+#include <test/util/net.h>\r\n #include <test/util/setup_common.h>\r\n #include <test/util/validation.h>\r\n #include <timedata.h>\r\n #include <util/strencodings.h>\r\n #include <util/string.h>\r\n #include <util/system.h>\r\n@@ -902,7 +904,213 @@ BOOST_AUTO_TEST_CASE(initial_advertise_from_version_message)\r\n     // PeerManager::ProcessMessage() calls AddTimeData() which changes the internal state\r\n     // in timedata.cpp and later confuses the test \"timedata_tests/addtimedata\". Thus reset\r\n     // that state as it was before our test was run.\r\n     TestOnlyResetTimeData();\r\n }\r\n \r\n+BOOST_AUTO_TEST_CASE(initial_messages_sent)\r\n+{\r\n+    LOCK(NetEventsInterface::g_msgproc_mutex);\r\n+\r\n+    m_node.args->ForceSetArg(\"-capturemessages\", \"1\");\r\n+\r\n+    auto& connman = static_cast<ConnmanTestMsg&>(*m_node.connman);\r\n+    auto& peerman = *m_node.peerman;\r\n+\r\n+    CNode outbound_peer{\r\n+        /*id=*/NodeId{0},\r\n+        /*sock=*/nullptr,\r\n+        /*addrIn=*/CAddress{CService{CNetAddr{in_addr{.s_addr = htonl(0x01020304)}}, 8333}, NODE_NONE},\r\n+        /*nKeyedNetGroupIn=*/0,\r\n+        /*nLocalHostNonceIn=*/0,\r\n+        /*addrBindIn=*/CAddress{},\r\n+        /*addrNameIn=*/\"\",\r\n+        /*conn_type_in=*/ConnectionType::OUTBOUND_FULL_RELAY,\r\n+        /*inbound_onion=*/false};\r\n+\r\n+    std::unordered_map<std::string, size_t> count_sent_messages;\r\n+\r\n+    const auto CaptureMessageOrig = CaptureMessage;\r\n+    CaptureMessage = [&count_sent_messages](const CAddress& addr,\r\n+                                            const std::string& msg_type,\r\n+                                            Span<const unsigned char> data,\r\n+                                            bool is_incoming) -> void {\r\n+        if (!is_incoming) {\r\n+            count_sent_messages[msg_type]++;\r\n+        }\r\n+    };\r\n+\r\n+    connman.Handshake(\r\n+        /*node=*/outbound_peer,\r\n+        /*successfully_connected=*/true,\r\n+        /*remote_services=*/ServiceFlags{NODE_NETWORK | NODE_WITNESS},\r\n+        /*local_services=*/ServiceFlags{NODE_NETWORK | NODE_WITNESS},\r\n+        /*version=*/PROTOCOL_VERSION,\r\n+        /*relay_txs=*/true);\r\n+\r\n+    BOOST_CHECK_EQUAL(count_sent_messages[NetMsgType::VERSION], 1);\r\n+    BOOST_CHECK_EQUAL(count_sent_messages[NetMsgType::WTXIDRELAY], 1);\r\n+    BOOST_CHECK_EQUAL(count_sent_messages[NetMsgType::SENDADDRV2], 1);\r\n+    BOOST_CHECK_EQUAL(count_sent_messages[NetMsgType::VERACK], 1);\r\n+    BOOST_CHECK_EQUAL(count_sent_messages[NetMsgType::GETADDR], 1);\r\n+    BOOST_CHECK_EQUAL(count_sent_messages[NetMsgType::SENDCMPCT], 1);\r\n+    BOOST_CHECK_EQUAL(count_sent_messages[NetMsgType::PING], 1);\r\n+    BOOST_CHECK_EQUAL(count_sent_messages[NetMsgType::GETHEADERS], 1);\r\n+    BOOST_CHECK_EQUAL(count_sent_messages[NetMsgType::FEEFILTER], 1);\r\n+\r\n+    peerman.FinalizeNode(outbound_peer);\r\n+\r\n+    CaptureMessage = CaptureMessageOrig;\r\n+    m_node.args->ForceSetArg(\"-capturemessages\", \"0\");\r\n+    // PeerManager::ProcessMessage() calls AddTimeData() which changes the internal state\r\n+    // in timedata.cpp and later confuses the test \"timedata_tests/addtimedata\". Thus reset\r\n+    // that state as it was before our test was run.\r\n+    TestOnlyResetTimeData();\r\n+}\r\n+\r\n+BOOST_AUTO_TEST_CASE(pingpong)\r\n+{\r\n+    // See PING_INTERVAL in net_processing.cpp\r\n+    static constexpr auto PING_INTERVAL{2min};\r\n+\r\n+    m_node.args->ForceSetArg(\"-capturemessages\", \"1\");\r\n+\r\n+    auto& connman = static_cast<ConnmanTestMsg&>(*m_node.connman);\r\n+    auto& peerman = *m_node.peerman;\r\n+\r\n+    CNode outbound_peer{\r\n+        /*id=*/NodeId{0},\r\n+        /*sock=*/nullptr,\r\n+        /*addrIn=*/CAddress{CService{CNetAddr{in_addr{.s_addr = htonl(0x01020304)}}, 8333}, NODE_NONE},\r\n+        /*nKeyedNetGroupIn=*/0,\r\n+        /*nLocalHostNonceIn=*/0,\r\n+        /*addrBindIn=*/CAddress{},\r\n+        /*addrNameIn=*/\"\",\r\n+        /*conn_type_in=*/ConnectionType::OUTBOUND_FULL_RELAY,\r\n+        /*inbound_onion=*/false};\r\n+\r\n+    auto CheckPingTimes = [&peerman, &outbound_peer](std::chrono::microseconds min_ping_time,\r\n+                                                     std::chrono::microseconds last_ping_time,\r\n+                                                     std::chrono::microseconds ping_wait) {\r\n+        // Check min and last ping times\r\n+        BOOST_CHECK_EQUAL(outbound_peer.m_min_ping_time.load().count(), min_ping_time.count());\r\n+        BOOST_CHECK_EQUAL(outbound_peer.m_last_ping_time.load().count(), last_ping_time.count());\r\n+\r\n+        // Check if and how long current ping has been pending\r\n+        CNodeStateStats stats;\r\n+        BOOST_REQUIRE(peerman.GetNodeStateStats(outbound_peer.GetId(), stats));\r\n+        BOOST_CHECK_EQUAL(stats.m_ping_wait.count(), ping_wait.count());\r\n+    };\r\n+\r\n+    uint64_t ping_nonce_sent;\r\n+\r\n+    const auto CaptureMessageOrig = CaptureMessage;\r\n+    CaptureMessage = [&ping_nonce_sent](const CAddress& addr,\r\n+                                        const std::string& msg_type,\r\n+                                        Span<const unsigned char> data,\r\n+                                        bool is_incoming) {\r\n+        if (!is_incoming && msg_type == NetMsgType::PING) {\r\n+            CDataStream stream{data, SER_NETWORK, PROTOCOL_VERSION};\r\n+            stream >> ping_nonce_sent;\r\n+        }\r\n+    };\r\n+\r\n+    const auto SendPing = [&peerman, &outbound_peer, &ping_nonce_sent]() EXCLUSIVE_LOCKS_REQUIRED(NetEventsInterface::g_msgproc_mutex) {\r\n+        SetMockTime(GetMockTime() + PING_INTERVAL + 1s);\r\n+        ping_nonce_sent = 0;\r\n+        peerman.SendMessages(&outbound_peer);\r\n+        BOOST_REQUIRE(ping_nonce_sent != 0);\r\n+    };\r\n+\r\n+    const auto ReceiveAndProcessMessage = [&connman, &outbound_peer](CSerializedNetMsg& msg) EXCLUSIVE_LOCKS_REQUIRED(NetEventsInterface::g_msgproc_mutex) {\r\n+        connman.ReceiveMsgFrom(outbound_peer, msg);\r\n+        // The send buffer CConnman::nSendBufferMaxSize happens to be 0 during tests which\r\n+        // trips fPauseSend to be set to true which cancels processing of incoming messages.\r\n+        outbound_peer.fPauseSend = false;\r\n+        connman.ProcessMessagesOnce(outbound_peer);\r\n+    };\r\n+\r\n+    // Use mock time to control pings from node\r\n+    SetMockTime(GetTime());\r\n+\r\n+    ping_nonce_sent = 0;\r\n+\r\n+    LOCK(NetEventsInterface::g_msgproc_mutex);\r\n+\r\n+    connman.Handshake(\r\n+        /*node=*/outbound_peer,\r\n+        /*successfully_connected=*/true,\r\n+        /*remote_services=*/ServiceFlags{NODE_NETWORK | NODE_WITNESS},\r\n+        /*local_services=*/ServiceFlags{NODE_NETWORK | NODE_WITNESS},\r\n+        /*version=*/PROTOCOL_VERSION,\r\n+        /*relay_txs=*/true);\r\n+    BOOST_REQUIRE(ping_nonce_sent != 0);\r\n+\r\n+    auto time_elapsed = 1s;\r\n+    SetMockTime(GetMockTime() + time_elapsed);\r\n+    // No pong response has been received and current ping is outstanding.\r\n+    CheckPingTimes(std::chrono::microseconds::max(), 0us, time_elapsed);\r\n+\r\n+    CSerializedNetMsg pong_msg;\r\n+\r\n+    BOOST_TEST_MESSAGE(\"Receiving a PONG without nonce cancels our PING\");\r\n+    {\r\n+        ASSERT_DEBUG_LOG(\"Short payload\");\r\n+        pong_msg = CNetMsgMaker{PROTOCOL_VERSION}.Make(NetMsgType::PONG);\r\n+        ReceiveAndProcessMessage(pong_msg);\r\n+    }\r\n+    // Ping metrics have not been updated and there is no ping outstanding.\r\n+    CheckPingTimes(std::chrono::microseconds::max(), 0us, 0us);\r\n+\r\n+    BOOST_TEST_MESSAGE(\"Receiving an unrequested PONG is logged and ignored\");\r\n+    {\r\n+        ASSERT_DEBUG_LOG(\"Unsolicited pong without ping\");\r\n+        pong_msg = CNetMsgMaker{PROTOCOL_VERSION}.Make(NetMsgType::PONG, /*nonce=*/(uint64_t)0);\r\n+        ReceiveAndProcessMessage(pong_msg);\r\n+    }\r\n+    // Ping metrics have not been updated and there is no ping outstanding.\r\n+    CheckPingTimes(std::chrono::microseconds::max(), 0us, 0us);\r\n+\r\n+    SendPing();\r\n+\r\n+    BOOST_TEST_MESSAGE(\"Receiving a PONG with the wrong nonce does not cancel our PING\");\r\n+    {\r\n+        ASSERT_DEBUG_LOG(\"Nonce mismatch\");\r\n+        pong_msg = CNetMsgMaker{PROTOCOL_VERSION}.Make(NetMsgType::PONG, /*nonce=*/ping_nonce_sent + 1);\r\n+        ReceiveAndProcessMessage(pong_msg);\r\n+    }\r\n+    // Ping metrics have not been updated and there is an outstanding ping.\r\n+    time_elapsed = 5s;\r\n+    SetMockTime(GetMockTime() + time_elapsed);\r\n+    CheckPingTimes(std::chrono::microseconds::max(), 0us, time_elapsed);\r\n+\r\n+    BOOST_TEST_MESSAGE(\"Receiving a PONG with nonce=0 cancels our PING\");\r\n+    {\r\n+        ASSERT_DEBUG_LOG(\"Nonce zero\");\r\n+        pong_msg = CNetMsgMaker{PROTOCOL_VERSION}.Make(NetMsgType::PONG, /*nonce=*/(uint64_t)0);\r\n+        ReceiveAndProcessMessage(pong_msg);\r\n+    }\r\n+    // Ping metrics have not been updated and there is no ping outstanding.\r\n+    CheckPingTimes(std::chrono::microseconds::max(), 0us, 0us);\r\n+\r\n+    SendPing();\r\n+\r\n+    time_elapsed = 5s;\r\n+    SetMockTime(GetMockTime() + time_elapsed);\r\n+\r\n+    BOOST_TEST_MESSAGE(\"Receiving a PONG with the correct nonce cancels our PING\");\r\n+    pong_msg = CNetMsgMaker{PROTOCOL_VERSION}.Make(NetMsgType::PONG, ping_nonce_sent);\r\n+    ReceiveAndProcessMessage(pong_msg);\r\n+    // Ping metrics have been updated and there is no ping outstanding.\r\n+    CheckPingTimes(time_elapsed, time_elapsed, 0us);\r\n+\r\n+    peerman.FinalizeNode(outbound_peer);\r\n+\r\n+    CaptureMessage = CaptureMessageOrig;\r\n+    m_node.args->ForceSetArg(\"-capturemessages\", \"0\");\r\n+    // PeerManager::ProcessMessage() calls AddTimeData() which changes the internal state\r\n+    // in timedata.cpp and later confuses the test \"timedata_tests/addtimedata\". Thus reset\r\n+    // that state as it was before our test was run.\r\n+    TestOnlyResetTimeData();\r\n+}\r\n+\r\n BOOST_AUTO_TEST_SUITE_END()\r\n```\r\n</details>\r\n",
      "created_at": "2022-11-15T08:19:53Z",
      "updated_at": "2022-11-15T08:19:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25515#discussion_r1022470321",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1022470321"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25515"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 668,
      "original_line": 668,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1135979252",
      "pull_request_review_id": 1339941979,
      "id": 1135979252,
      "node_id": "PRRC_kwDOABII585Dtar0",
      "diff_hunk": "@@ -0,0 +1,188 @@\n+// Copyright (c) 2011-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <arith_uint256.h>\n+#include <banman.h>\n+#include <chainparams.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <netmessagemaker.h>\n+#include <pubkey.h>\n+#include <script/sign.h>\n+#include <script/signingprovider.h>\n+#include <script/standard.h>\n+#include <serialize.h>\n+#include <test/util/net.h>\n+#include <test/util/setup_common.h>\n+#include <util/string.h>\n+#include <util/system.h>\n+#include <util/time.h>\n+#include <timedata.h>\n+#include <validation.h>\n+\n+#include <array>\n+#include <stdint.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+static CService ip(uint32_t i)\n+{\n+    struct in_addr s;\n+    s.s_addr = i;\n+    return CService(CNetAddr(s), Params().GetDefaultPort());\n+}\n+\n+/** Mock the connections interface. */\n+class ConnectionsInterfaceMock : public ConnectionsInterface\n+{\n+public:\n+    bool ForNode(NodeId id, std::function<bool(CNode* pnode)> func) override { return true; };\n+    using NodeFn = std::function<void(CNode*)>;\n+    void ForEachNode(const NodeFn& func) override {};\n+    void ForEachNode(const NodeFn& func) const override {};\n+    void PushMessage(CNode* pnode, CSerializedNetMsg&& msg) override;\n+    CSipHasher GetDeterministicRandomizer(uint64_t id) const override { return {0, 0}; };\n+    void WakeMessageHandler() override {};\n+    bool OutboundTargetReached(bool historicalBlockServingLimit) const override { return true; };\n+    std::vector<CAddress> GetAddresses(size_t max_addresses,\n+                                       size_t max_pct,\n+                                       std::optional<Network> network) const override { return {}; };\n+    std::vector<CAddress> GetAddresses(CNode& requestor, size_t max_addresses, size_t max_pct) override { return {}; };\n+    bool DisconnectNode(const CNetAddr& addr) override { return true; };\n+    unsigned int GetReceiveFloodSize() const override { return 0; };\n+    int GetExtraFullOutboundCount() const override { return 0; };\n+    int GetExtraBlockRelayCount() const override { return 0; };\n+    void SetTryNewOutboundPeer(bool flag) override {};\n+    bool GetTryNewOutboundPeer() const override { return true; };\n+    bool GetNetworkActive() const override { return true; };\n+    bool GetUseAddrmanOutgoing() const override { return true; };\n+    void StartExtraBlockRelayPeers() override {};\n+    bool ShouldRunInactivityChecks(const CNode& node, std::chrono::seconds now) const override { return true; };\n+    bool CheckIncomingNonce(uint64_t nonce) override { return true; };\n+\n+    void NodeReceiveMsgBytes(CNode& node, Span<const uint8_t> msg_bytes, bool& complete) const;\n+    bool ReceiveMsgFrom(CNode& node, CSerializedNetMsg& ser_msg) const;\n+\n+    virtual ~ConnectionsInterfaceMock() {}\n+\n+    /** Count of number of each message type sent */\n+    std::map<std::string, uint64_t> m_message_types_sent;\n+};\n+\n+void ConnectionsInterfaceMock::PushMessage(CNode* pnode, CSerializedNetMsg&& msg)\n+{\n+    BOOST_TEST_MESSAGE(strprintf(\"sending message %s to peer %d\", msg.m_type, pnode->GetId()));\n+    m_message_types_sent[msg.m_type]++;\n+}\n+\n+void ConnectionsInterfaceMock::NodeReceiveMsgBytes(CNode& node, Span<const uint8_t> msg_bytes, bool& complete) const\n+{\n+    assert(node.ReceiveMsgBytes(msg_bytes, complete));\n+    if (complete) {\n+        size_t nSizeAdded = 0;\n+        auto it(node.vRecvMsg.begin());\n+        for (; it != node.vRecvMsg.end(); ++it) {\n+            // vRecvMsg contains only completed CNetMessage\n+            // the single possible partially deserialized message are held by TransportDeserializer\n+            nSizeAdded += it->m_raw_message_size;\n+        }\n+        {\n+            LOCK(node.cs_vProcessMsg);\n+            node.vProcessMsg.splice(node.vProcessMsg.end(), node.vRecvMsg, node.vRecvMsg.begin(), it);\n+            node.nProcessQueueSize += nSizeAdded;\n+        }\n+    }",
      "path": "src/test/peerman_tests.cpp",
      "position": 116,
      "original_position": 95,
      "commit_id": "9c04c32101cd458c336de1d66ad296dc7f1cf35d",
      "original_commit_id": "bdfe134ed6b13e69becc43c9e0a8f958e8931b0a",
      "in_reply_to_id": null,
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "#27257 dedupes this code across the entire code base, reviewing that would help move this forward.",
      "created_at": "2023-03-14T17:49:26Z",
      "updated_at": "2023-03-14T17:49:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25515#discussion_r1135979252",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1135979252"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25515"
        }
      },
      "start_line": 104,
      "original_start_line": 83,
      "start_side": "RIGHT",
      "line": 116,
      "original_line": 95,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1171560928",
      "pull_request_review_id": 1392417614,
      "id": 1171560928,
      "node_id": "PRRC_kwDOABII585F1Jng",
      "diff_hunk": "@@ -0,0 +1,188 @@\n+// Copyright (c) 2011-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <arith_uint256.h>\n+#include <banman.h>\n+#include <chainparams.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <netmessagemaker.h>\n+#include <pubkey.h>\n+#include <script/sign.h>\n+#include <script/signingprovider.h>\n+#include <script/standard.h>",
      "path": "src/test/peerman_tests.cpp",
      "position": 14,
      "original_position": 14,
      "commit_id": "9c04c32101cd458c336de1d66ad296dc7f1cf35d",
      "original_commit_id": "bdfe134ed6b13e69becc43c9e0a8f958e8931b0a",
      "in_reply_to_id": 1013149806,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> Seems like a lot of these includes are unnecessary and can be removed... With the following diff it still compiles\r\n\r\nA way to verify is to add the file to `ci/test/06_script_b.sh` and look at the `lint` CI output after repushing.",
      "created_at": "2023-04-19T16:06:04Z",
      "updated_at": "2023-04-19T16:06:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25515#discussion_r1171560928",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1171560928"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25515"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 14,
      "original_line": 14,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1171566094",
      "pull_request_review_id": 1392429137,
      "id": 1171566094,
      "node_id": "PRRC_kwDOABII585F1K4O",
      "diff_hunk": "@@ -663,7 +664,64 @@ class NetEventsInterface\n     ~NetEventsInterface() = default;\n };\n \n-class CConnman\n+/** Interface class for interacting with CConnman */\n+class ConnectionsInterface",
      "path": "src/net.h",
      "position": 14,
      "original_position": 14,
      "commit_id": "9c04c32101cd458c336de1d66ad296dc7f1cf35d",
      "original_commit_id": "9c04c32101cd458c336de1d66ad296dc7f1cf35d",
      "in_reply_to_id": 1014128036,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": ">> the tests added in this PR can be done without ... touching the source code at all\r\n\r\n> Yes, that works. Here it is:\r\n\r\nNice!\r\n\r\nVirtualization/dynamic dispatch has performance and overhead costs in addition to increased class/code size and complexity, and there are places in this codebase where it seems to have been avoided, and still is, for that reason. For an example, see the discussion in #25349.\r\n\r\nIf virtualization is still considered to be worth the overhead here, on its own merits above and beyond facilitating unit testing that can be done without it, it may be good to open a PR doing only that, as also suggested by someone above (and maybe consider a non-virtual public interface that calls private virtual implementation methods, i.e. the Template pattern via the Non-Virtual Interface (NVI) idiom. There is a simple example at https://github.com/jonatack/bitcoin/commit/b05383211239d564e98b19c96c80ff778e054146).",
      "created_at": "2023-04-19T16:10:41Z",
      "updated_at": "2023-04-19T16:10:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25515#discussion_r1171566094",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1171566094"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25515"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 668,
      "original_line": 668,
      "side": "RIGHT"
    }
  ]
}