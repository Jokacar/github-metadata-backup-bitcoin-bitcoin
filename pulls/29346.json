{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29346",
    "id": 1700291038,
    "node_id": "PR_kwDOABII585lWGHe",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29346",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/29346.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/29346.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29346",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29346/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29346/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29346/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/b588ff85ae837e492269c922d0609bcd338e4752",
    "number": 29346,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "Stratum v2 Noise Protocol",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Parent PR #29432. Followed by #30315.\r\n\r\nThis is the first part of the Stratum v2 Template Provider change that can be a standalone pull request.\r\n\r\nIt introduces a CMake build flag `-DWITH_SV2` that is `OFF` by default (but `ON` for CI).\r\n\r\nThe Noise Protocol Framework is defined here: https://noiseprotocol.org/noise.html\r\n\r\nIt's quite similar to BIP324. The main differences are explained here, including why Stratum v2 can't use BIP234 (yet): https://delvingbitcoin.org/t/stratum-v2-noise-protocol-bip324-nuggets/413\r\n\r\nThe implementation is based on revision 38, 2018-07-11 (most recent at the time of writing).\r\n\r\nThe Stratum v2 spec defines the specific choice of ciphers: https://github.com/stratum-mining/sv2-spec/blob/main/04-Protocol-Security.md\r\n\r\nThis protocol has been implemented in the Stratum Reference Implementation (SRI, using [rust-bitcoin](https://github.com/rust-bitcoin/rust-bitcoin)). https://github.com/stratum-mining/stratum\r\n\r\nIt has also been (independently) implemented in BraiinsOS. This part is currently not open source, and it's behind on some recent changes.\r\n\r\nThe classes in `sv2_noise.h` attempt to stay close to the paper, whereas the test and fuzzer code borrow heavily from BIP324.\r\n\r\nIt's ready for review, but not for merge:\r\n\r\n1. The parent PR may need more conceptual review (and perhaps the entire spec, but that would really slow things down)\r\n2. We could decide to not support Noise encryption at all and require users to install separate software for that. Code review of this PR could help inform that decision.\r\n\r\n",
    "labels": [
      {
        "id": 955867938,
        "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
        "name": "Needs rebase",
        "description": "",
        "color": "cccccc",
        "default": false
      }
    ],
    "created_at": "2024-01-29T16:14:50Z",
    "updated_at": "2024-10-10T09:59:56Z",
    "mergeable": false,
    "mergeable_state": "dirty",
    "assignees": [],
    "requested_reviewers": [
      {
        "login": "itornaza",
        "id": 11520757,
        "node_id": "MDQ6VXNlcjExNTIwNzU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/11520757?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/itornaza",
        "html_url": "https://github.com/itornaza",
        "followers_url": "https://api.github.com/users/itornaza/followers",
        "following_url": "https://api.github.com/users/itornaza/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/itornaza/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/itornaza/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/itornaza/subscriptions",
        "organizations_url": "https://api.github.com/users/itornaza/orgs",
        "repos_url": "https://api.github.com/users/itornaza/repos",
        "events_url": "https://api.github.com/users/itornaza/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/itornaza/received_events",
        "type": "User",
        "site_admin": false
      },
      {
        "login": "Shourya742",
        "id": 84662239,
        "node_id": "MDQ6VXNlcjg0NjYyMjM5",
        "avatar_url": "https://avatars.githubusercontent.com/u/84662239?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Shourya742",
        "html_url": "https://github.com/Shourya742",
        "followers_url": "https://api.github.com/users/Shourya742/followers",
        "following_url": "https://api.github.com/users/Shourya742/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Shourya742/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Shourya742/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Shourya742/subscriptions",
        "organizations_url": "https://api.github.com/users/Shourya742/orgs",
        "repos_url": "https://api.github.com/users/Shourya742/repos",
        "events_url": "https://api.github.com/users/Shourya742/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Shourya742/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "requested_teams": [],
    "rebaseable": false,
    "head": {
      "label": "Sjors:2024/01/sv2_noise",
      "ref": "2024/01/sv2_noise",
      "sha": "b588ff85ae837e492269c922d0609bcd338e4752",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 92390696,
        "node_id": "MDEwOlJlcG9zaXRvcnk5MjM5MDY5Ng==",
        "name": "bitcoin",
        "full_name": "Sjors/bitcoin",
        "owner": {
          "login": "Sjors",
          "id": 10217,
          "node_id": "MDQ6VXNlcjEwMjE3",
          "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/Sjors",
          "html_url": "https://github.com/Sjors",
          "followers_url": "https://api.github.com/users/Sjors/followers",
          "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
          "organizations_url": "https://api.github.com/users/Sjors/orgs",
          "repos_url": "https://api.github.com/users/Sjors/repos",
          "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/Sjors/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/Sjors/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/Sjors/bitcoin",
        "archive_url": "https://api.github.com/repos/Sjors/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/Sjors/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/Sjors/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/Sjors/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/Sjors/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/Sjors/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/Sjors/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/Sjors/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/Sjors/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/Sjors/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/Sjors/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/Sjors/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/Sjors/bitcoin/events",
        "forks_url": "https://api.github.com/repos/Sjors/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/Sjors/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/Sjors/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/Sjors/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/Sjors/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/Sjors/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/Sjors/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/Sjors/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/Sjors/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/Sjors/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/Sjors/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/Sjors/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/Sjors/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/Sjors/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/Sjors/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/Sjors/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:Sjors/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/Sjors/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/Sjors/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/Sjors/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/Sjors/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/Sjors/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/Sjors/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/Sjors/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/Sjors/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/Sjors/bitcoin/hooks",
        "svn_url": "https://github.com/Sjors/bitcoin",
        "homepage": "https://bitcoin.org/en/download",
        "language": "C++",
        "forks_count": 10,
        "stargazers_count": 6,
        "watchers_count": 6,
        "size": 249652,
        "default_branch": "sv2",
        "open_issues_count": 11,
        "is_template": false,
        "topics": [],
        "has_issues": true,
        "has_projects": false,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2024-10-07T09:32:15Z",
        "created_at": "2017-05-25T10:05:54Z",
        "updated_at": "2024-09-20T17:21:26Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "51c698161b54402f9a8302c9a36f28a4db01fc4f",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 36240,
        "stargazers_count": 78770,
        "watchers_count": 78770,
        "size": 269559,
        "default_branch": "master",
        "open_issues_count": 679,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2024-10-10T00:20:16Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2024-10-10T09:25:06Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29346"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 1184,
    "deletions": 5,
    "changed_files": 16,
    "commits": 4,
    "review_comments": 44,
    "comments": 38
  },
  "events": [
    {
      "event": "commented",
      "id": 1915046817,
      "node_id": "IC_kwDOABII585yJUuh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1915046817",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-29T16:14:54Z",
      "updated_at": "2024-10-09T06:39:55Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage\nFor detailed information about the code coverage, see the [test coverage report](https://corecheck.dev/bitcoin/bitcoin/pulls/29346).\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| ACK | [stratospher](https://github.com/bitcoin/bitcoin/pull/29346#pullrequestreview-2054783141) |\n| Concept ACK | [Shourya742](https://github.com/bitcoin/bitcoin/pull/29346#pullrequestreview-2291544930) |\n| Stale ACK | [itornaza](https://github.com/bitcoin/bitcoin/pull/29346#pullrequestreview-2304920988) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#31045](https://github.com/bitcoin/bitcoin/pull/31045) (ci: Add missing -DWERROR=ON to test-each-commit by maflcko)\n* [#30595](https://github.com/bitcoin/bitcoin/pull/30595) (kernel: Introduce initial C header API by TheCharlatan)\n* [#29415](https://github.com/bitcoin/bitcoin/pull/29415) (Broadcast own transactions only via short-lived Tor or I2P connections by vasild)\n* [#28792](https://github.com/bitcoin/bitcoin/pull/28792) (Embed default ASMap as binary dump header file by fjahr)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29346#issuecomment-1915046817",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29346"
    },
    {
      "event": "labeled",
      "id": 11631222432,
      "node_id": "LE_lADOABII5859hNA7zwAAAAK1Rl6g",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11631222432",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-29T17:42:00Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11639834288,
      "node_id": "HRFPE_lADOABII5859hNA7zwAAAAK1ycaw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11639834288",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-30T10:42:11Z"
    },
    {
      "event": "reviewed",
      "id": 1852611449,
      "node_id": "PRR_kwDOABII585ubJt5",
      "url": null,
      "actor": null,
      "commit_id": "a392a4c2f3be7d2751502adc887802a24f0f6898",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "body": "",
      "user": {
        "login": "winlover32",
        "id": 74832157,
        "node_id": "MDQ6VXNlcjc0ODMyMTU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/74832157?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/winlover32",
        "html_url": "https://github.com/winlover32",
        "followers_url": "https://api.github.com/users/winlover32/followers",
        "following_url": "https://api.github.com/users/winlover32/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/winlover32/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/winlover32/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/winlover32/subscriptions",
        "organizations_url": "https://api.github.com/users/winlover32/orgs",
        "repos_url": "https://api.github.com/users/winlover32/repos",
        "events_url": "https://api.github.com/users/winlover32/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/winlover32/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29346#pullrequestreview-1852611449",
      "submitted_at": "2024-01-30T23:40:35Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29346"
    },
    {
      "event": "reviewed",
      "id": 1852616925,
      "node_id": "PRR_kwDOABII585ubLDd",
      "url": null,
      "actor": null,
      "commit_id": "a392a4c2f3be7d2751502adc887802a24f0f6898",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "body": "",
      "user": {
        "login": "winlover32",
        "id": 74832157,
        "node_id": "MDQ6VXNlcjc0ODMyMTU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/74832157?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/winlover32",
        "html_url": "https://github.com/winlover32",
        "followers_url": "https://api.github.com/users/winlover32/followers",
        "following_url": "https://api.github.com/users/winlover32/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/winlover32/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/winlover32/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/winlover32/subscriptions",
        "organizations_url": "https://api.github.com/users/winlover32/orgs",
        "repos_url": "https://api.github.com/users/winlover32/repos",
        "events_url": "https://api.github.com/users/winlover32/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/winlover32/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29346#pullrequestreview-1852616925",
      "submitted_at": "2024-01-30T23:45:23Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29346"
    },
    {
      "event": "reviewed",
      "id": 1853197747,
      "node_id": "PRR_kwDOABII585udY2z",
      "url": null,
      "actor": null,
      "commit_id": "a392a4c2f3be7d2751502adc887802a24f0f6898",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29346#pullrequestreview-1853197747",
      "submitted_at": "2024-01-31T08:57:57Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29346"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11671317055,
      "node_id": "HRFPE_lADOABII5859hNA7zwAAAAK3qio_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11671317055",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-01T14:53:06Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11674417210,
      "node_id": "HRFPE_lADOABII5859hNA7zwAAAAK32Xg6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11674417210",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-01T18:52:28Z"
    },
    {
      "event": "commented",
      "id": 1922011219,
      "node_id": "IC_kwDOABII585yj5BT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1922011219",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-01T18:53:41Z",
      "updated_at": "2024-02-01T19:04:29Z",
      "author_association": "MEMBER",
      "body": "I moved the static constants into classes and renamed them a bit. Expanded the fuzzer to send multiple messages back and forth (like the BIP324 fuzzer).\r\n\r\nI dropped the 1 hour wiggle room in certificate timestamps, because it adds complexity and I don't expect this to cause any issues in practice. A self-signed certificate is generated when the TemplateProvider loads, which is unlikely the same second someone connects to it.\r\n\r\nThe fuzzer found a bug where I forgot to defragment messages larger than the chunk size. Since the Template Provider generally only _sends_ large messages, this (probably) wasn't caught in testing.\r\n\r\n`DecryptAndHash` was broken in a way that my initial tests didn't catch (not sure why), nor interoperability tests because this iniator-side function is only used in test code. But I managed to break something in the ensuing refactor, will clean it up later...\r\n\r\n[it's currently in a broken state, second ECDH handshake gives different result, maybe due to bad memory management]",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29346#issuecomment-1922011219",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29346"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11683105943,
      "node_id": "HRFPE_lADOABII5859hNA7zwAAAAK4XgyX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11683105943",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-02T11:46:48Z"
    },
    {
      "event": "commented",
      "id": 1923648187,
      "node_id": "IC_kwDOABII585yqIq7",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1923648187",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-02T11:47:01Z",
      "updated_at": "2024-02-02T12:18:01Z",
      "author_association": "MEMBER",
      "body": "Alright, code is back in working state. I dropped a bunch of spurious `Make*ByteSpan` (mostly by switching remaining uses of `uint8_t` to `std::byte`).\r\n\r\nAlso switched to the new logging convention, mostly `LogTrace()`. Also expanded the fuzzer to mess with bytes during the handshake.\r\n\r\n(fuzzing for a few hours now, will submit a draft corpus if it doesn't find anything)",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29346#issuecomment-1923648187",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29346"
    },
    {
      "event": "unlabeled",
      "id": 11683727526,
      "node_id": "UNLE_lADOABII5859hNA7zwAAAAK4Z4im",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11683727526",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-02T12:50:09Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11700715172,
      "node_id": "HRFPE_lADOABII5859hNA7zwAAAAK5ar6k",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11700715172",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-05T09:02:26Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11755741553,
      "node_id": "HRFPE_lADOABII5859hNA7zwAAAAK8smFx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11755741553",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-09T09:34:05Z"
    },
    {
      "event": "commented",
      "id": 1935603779,
      "node_id": "IC_kwDOABII585zXvhD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1935603779",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-09T09:37:29Z",
      "updated_at": "2024-02-09T09:37:29Z",
      "author_association": "MEMBER",
      "body": "This latest push improves support for mock time (which the parent PR needs). It's still using the deprecated `GetTime`, but it's not clear to me what to replace it with.\r\n\r\nIt also changes the protocol name to `Noise_NX_Secp256k1+EllSwift_ChaChaPoly_SHA256` (https://github.com/stratum-mining/sv2-spec/pull/66#discussion_r1483090409).",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29346#issuecomment-1935603779",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29346"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11772903841,
      "node_id": "HRFPE_lADOABII5859hNA7zwAAAAK9uEGh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11772903841",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-12T10:51:00Z"
    },
    {
      "event": "commented",
      "id": 1943613979,
      "node_id": "IC_kwDOABII585z2TIb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1943613979",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-14T11:47:16Z",
      "updated_at": "2024-02-14T18:14:55Z",
      "author_association": "MEMBER",
      "body": "Updated and simplified the description to account for the new parent PR. I'm leaving this in draft status pending ~two merges~ one merge on the SRI side; that way the whole thing is easier to test.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29346#issuecomment-1943613979",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29346"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11813250345,
      "node_id": "HRFPE_lADOABII5859hNA7zwAAAALAH-Up",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11813250345",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-15T10:12:37Z"
    },
    {
      "event": "ready_for_review",
      "id": 11832632081,
      "node_id": "RFRE_lADOABII5859hNA7zwAAAALBR6MR",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11832632081",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-16T19:04:18Z"
    },
    {
      "event": "commented",
      "id": 1949200230,
      "node_id": "IC_kwDOABII5850Lm9m",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1949200230",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-16T19:29:56Z",
      "updated_at": "2024-02-16T19:31:00Z",
      "author_association": "MEMBER",
      "body": "Possibly relevant: the test introduced here, and not modified later, failed at least once in the parent PR: https://github.com/bitcoin/bitcoin/pull/29432#issuecomment-1948481906\r\n\r\nCI run: https://github.com/bitcoin/bitcoin/runs/21654131515",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29346#issuecomment-1949200230",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29346"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11978337162,
      "node_id": "HRFPE_lADOABII5859hNA7zwAAAALJ9uuK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11978337162",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-01T11:35:37Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12156087860,
      "node_id": "HRFPE_lADOABII5859hNA7zwAAAALUjy40",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12156087860",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-18T17:07:37Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12212325535,
      "node_id": "HRFPE_lADOABII5859hNA7zwAAAALX6Uyf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12212325535",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-22T08:17:26Z"
    },
    {
      "event": "labeled",
      "id": 12327511234,
      "node_id": "LE_lADOABII5859hNA7zwAAAALexuTC",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12327511234",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-02T14:59:28Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2033800494,
      "node_id": "IC_kwDOABII5855OVUu",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2033800494",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-03T07:49:43Z",
      "updated_at": "2024-04-03T07:49:43Z",
      "author_association": "MEMBER",
      "body": "(I plan to rebase this after ASan CI is fixed)",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29346#issuecomment-2033800494",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29346"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12375521382,
      "node_id": "HRFPE_lADOABII5859hNA7zwAAAALho3hm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12375521382",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-05T14:54:11Z"
    },
    {
      "event": "commented",
      "id": 2040012852,
      "node_id": "IC_kwDOABII5855mCA0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2040012852",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-05T14:54:14Z",
      "updated_at": "2024-04-05T14:54:14Z",
      "author_association": "MEMBER",
      "body": "Rebased after #29419.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29346#issuecomment-2040012852",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29346"
    },
    {
      "event": "unlabeled",
      "id": 12375790778,
      "node_id": "UNLE_lADOABII5859hNA7zwAAAALhp5S6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12375790778",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-05T15:11:19Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 12664854363,
      "node_id": "LE_lADOABII5859hNA7zwAAAALy4ldb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12664854363",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-30T22:52:12Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12670220753,
      "node_id": "HRFPE_lADOABII5859hNA7zwAAAALzNDnR",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12670220753",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-01T13:08:07Z"
    },
    {
      "event": "unlabeled",
      "id": 12670377713,
      "node_id": "UNLE_lADOABII5859hNA7zwAAAALzNp7x",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12670377713",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-01T13:24:26Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12686858677,
      "node_id": "HRFPE_lADOABII5859hNA7zwAAAAL0Mhm1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12686858677",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-02T17:29:00Z"
    },
    {
      "event": "commented",
      "id": 2108528652,
      "node_id": "IC_kwDOABII5859rZgM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2108528652",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-13T18:26:41Z",
      "updated_at": "2024-05-13T18:26:41Z",
      "author_association": "CONTRIBUTOR",
      "body": "re: https://github.com/bitcoin/bitcoin/pull/29346#issue-2105856059\r\n\r\n> We could decide to not support Noise encryption at all and require users to install separate software for that. Code review of this PR could help inform that decision.\r\n\r\nI'm just starting to look at this PR and #29432, and having separate software to handle the encryption and networking does seem like a pretty appealing approach.\r\n\r\nHowever, even if the goal is to directly add support for the stratum protocol to bitcoin core, I think it would be good to have a little more separation between the stratum and node code, so instead of accessing the [mempool](https://github.com/Sjors/bitcoin/blob/5825cd80a6d67543f62757f29e0d27117209f2f4/src/node/sv2_template_provider.cpp#L274) and [blockassembler](https://github.com/Sjors/bitcoin/blob/5825cd80a6d67543f62757f29e0d27117209f2f4/src/node/sv2_template_provider.cpp#L480C26-L480C70) and [chainman](https://github.com/Sjors/bitcoin/blob/5825cd80a6d67543f62757f29e0d27117209f2f4/src/node/sv2_template_provider.cpp#L726) and [g_best_block](https://github.com/Sjors/bitcoin/blob/5825cd80a6d67543f62757f29e0d27117209f2f4/src/node/sv2_template_provider.cpp#L265) directly, the stratum code would call a more well-defined interface. This could be a new interface class in `src/interfaces/` called something like `MiningServer` or `BlockTemplateProvider` with a few methods for polling the mempool and chainstate, generating block templates and submitting new blocks.\r\n\r\nI think this would be good in longer term to have more decoupling and potential process and project separation. But it could also help review in shorter term, by giving reviewers like me who are more familiar with bitcoin core code than with the stratum protocol another entry point for understanding the code.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29346#issuecomment-2108528652",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29346"
    },
    {
      "event": "commented",
      "id": 2108563853,
      "node_id": "IC_kwDOABII5859riGN",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2108563853",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-13T18:46:13Z",
      "updated_at": "2024-05-13T18:46:13Z",
      "author_association": "MEMBER",
      "body": "> the stratum code would call a more well-defined interface\r\n\r\nI would like that too. Just not sure how to go about it.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29346#issuecomment-2108563853",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29346"
    },
    {
      "event": "commented",
      "id": 2108662179,
      "node_id": "IC_kwDOABII5859r6Gj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2108662179",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-13T19:40:07Z",
      "updated_at": "2024-05-13T19:40:07Z",
      "author_association": "CONTRIBUTOR",
      "body": "> > the stratum code would call a more well-defined interface\r\n> \r\n> I would like that too. Just not sure how to go about it.\r\n\r\nI think in #29432, you could add a `src/interfaces/mining_service.h` header similar to [`src/interfaces/chain.h`](https://github.com/bitcoin/bitcoin/blob/master/src/interfaces/chain.h) that looks something like:\r\n\r\n```c++\r\nclass MiningService {\r\npublic:\r\n    virtual ~MiningService() {}\r\n\r\n    // Returns a new block template based on the current state of the mempool and blockchain\r\n    virtual std::unique_ptr<CBlockTemplate> GetNewBlockTemplate(const CScript& scriptPubKey) = 0;\r\n\r\n    // Accepts a completed block from a miner and attempts to add it to the blockchain\r\n    virtual bool SubmitNewBlock(const std::shared_ptr<const CBlock>& block) = 0;\r\n\r\n    // Returns the current best block hash\r\n    virtual uint256 GetCurrentBestBlock() = 0;\r\n\r\n    // Triggers an update or checks the status of the mempool\r\n    virtual void UpdateMempool() = 0;\r\n\r\n    // Additional methods can be added here as needed\r\n};\r\n```\r\n\r\n^^^ was suggested by chatgpt after I uploaded `sv2_template_provider.cpp`\r\n\r\nImplementation of the interface could go in `src/node/interfaces.cpp` and I think only `sv2_template_provider.cpp` would need to call the interface unless there are other parts of the PR doing similar things.\r\n\r\nOr another approach if we wanted to move polling out of `sv2_template_provider.cpp` into the node could be an interface more like:\r\n\r\n```c++\r\nclass MiningService {\r\npublic:\r\n    virtual ~MiningService() {}\r\n\r\n    // Register a callback for new block templates\r\n    virtual std::unique_ptr<Handler> RequestBlockTemplates(const CScript& scriptPubKey, std::function<void(const CBlockTemplate&>callback)) = 0;\r\n\r\n    // Accepts a completed block from a miner and attempts to add it to the blockchain\r\n    virtual bool SubmitNewBlock(const std::shared_ptr<const CBlock>& block) = 0;\r\n};\r\n```\r\n\r\nI don't think defining an interface is necessary, but it could be a useful way of breaking up the code.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29346#issuecomment-2108662179",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29346"
    },
    {
      "event": "commented",
      "id": 2109446347,
      "node_id": "IC_kwDOABII5859u5jL",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2109446347",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-14T07:11:43Z",
      "updated_at": "2024-05-14T07:11:43Z",
      "author_association": "MEMBER",
      "body": "@ryanofsky thanks for the suggestion! Maybe I could start by having the `getblocktemplate` RPC use that new interface? So instead of having:\r\n\r\n```cpp\r\nNodeContext& node = EnsureAnyNodeContext(request.context);\r\nChainstateManager& chainman = EnsureChainman(node);\r\n...\r\nChainstate& active_chainstate = chainman.ActiveChainstate();\r\n...\r\nconst CTxMemPool& mempool = EnsureMemPool(node);\r\n...\r\npblocktemplate = BlockAssembler{active_chainstate, &mempool}.CreateNewBlock(scriptDummy);\r\n```\r\n\r\nI would write something like:\r\n\r\n```cpp\r\nMiningContext& miner = EnsureAnyMinerContext(request.context);\r\n...\r\nminer.GetNewBlockTemplate(scriptDummy)\r\n```\r\n\r\nAnd then interface implementation would take care of getting the chain manager and mempool (via the node interface?).",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29346#issuecomment-2109446347",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29346"
    },
    {
      "event": "mentioned",
      "id": 12797125308,
      "node_id": "MEE_lADOABII5859hNA7zwAAAAL6xKK8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12797125308",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-14T07:11:44Z"
    },
    {
      "event": "subscribed",
      "id": 12797125328,
      "node_id": "SE_lADOABII5859hNA7zwAAAAL6xKLQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12797125328",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-14T07:11:44Z"
    },
    {
      "event": "commented",
      "id": 2110376536,
      "node_id": "IC_kwDOABII5859ycpY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2110376536",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-14T14:21:37Z",
      "updated_at": "2024-05-14T14:22:44Z",
      "author_association": "CONTRIBUTOR",
      "body": "> Maybe I could start by having the `getblocktemplate` RPC use that new interface?\r\n\r\nThat's a good idea, nice way the interface could be used from the start.\r\n\r\n> And then interface implementation would take care of getting the chain manager and mempool (via the node interface?).\r\n\r\nRight, you could look at the interfaces::Chain for an example of how to initialize the interface. Store the interface in NodeContext like:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/7fcf4e99791ca5be0b068ac03a81a50ece11dba3/src/node/context.h#L71\r\n\r\nInitialize in the init.cpp file like:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/7fcf4e99791ca5be0b068ac03a81a50ece11dba3/src/init.cpp#L1113\r\n\r\nYou could just copy the makeChain method there, which has the boilerplate used to instantiate the interface and give it access to the chainstate and mempool.\r\n\r\nThen add an Ensure function like you mentioned in https://github.com/bitcoin/bitcoin/blob/master/src/rpc/server_util.h\r\n\r\nI'd maybe call the interface something like MiningService or TemplateProvider rather than MiningContext. I think of \"Context\" as being a passive container for state instead of an object you would call methods on. The top level interfaces like `interfaces::Chain` `interface::Node` `interfaces::Wallet` are actually stateless themselves, and only point to state stored in other places. (The idea is to let interface instances be created and destroyed freely, since with multiprocess support new processes can connect and create interface pointers that get destroyed on disconnection, and the state of the node shouldn't be affected too much from connections and disconnections. Anyway, the mining interface could follow this pattern.)\r\n\r\n---\r\n\r\nI am also still curious about the idea to \"to not support Noise encryption at all and require users to install separate software.\" I'm not sure if this has already been discussed somewhere or if you have more thoughts on it. Looking at this PR, the noise protocol implementation does not seem too complicated, and seems like it would not be a big deal to review and maintain as part of bitcoin core, but I'm not sure yet about the rest of the mining protocol. I'm also not sure how much work it would be to create separate software, if there could be a middle ground for mining support like there is for gui support, which is distributed with bitcoin core, but in a separate executable and with a separate github repository.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29346#issuecomment-2110376536",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29346"
    },
    {
      "event": "commented",
      "id": 2134614071,
      "node_id": "IC_kwDOABII585_O6A3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2134614071",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-28T08:17:28Z",
      "updated_at": "2024-06-12T20:04:10Z",
      "author_association": "MEMBER",
      "body": "> if you have more thoughts on it\r\n\r\nWhenever I talk to people interested in using Stratum v2 I find it difficult to explain all the moving parts they need to install and configure.\r\n\r\nInstall:\r\n* a separate Bitcoin Core branch (temporary, pending #29432 merge)\r\n* a job declaration client\r\n* a sv1-sv2 translator (temporary, pending sv2 firmware support)\r\n\r\nConfigure:\r\n* point job declaration client to Bitcoin Core, to the pools job declaration server and to the pool itself\r\n* point translator to job declaration client\r\n* point miner to translator\r\n* various public keys for noise encryption (optionally private key and certificate)\r\n\r\nIdeally mining should be as easy as: install Bitcoin Core, paste a single [pool URL](https://academy.braiins.com/en/braiins-pool/btc-mining-setup/#stratum-v2-endpoints-servers-and-ports) into Bitcoin Core.\r\n\r\nIn my ideal scenario the miner would find Bitcoin Core via mDNS, but that's a fresh can of worms that I haven't thought through in great detail. So instead a user will have to point to Bitcoin Core in the miner interface (typically a web server running on the device) [0].\r\n\r\nTo get there we'd have to implement not just the Template Provider role (#29432), but also the Job Declarator role. Additionally we'd have to implement either a (simple) Mining Proxy _or_ finish the Job Distribution Protocol spec, so that the miner can communicate directly with the pool. See the protocol overview: https://github.com/stratum-mining/sv2-spec/blob/main/03-Protocol-Overview.md \r\n\r\nTo keep #29432 manageable, and because I don't know if we want to add that much mining functionality, I haven't done this. Instead the user has to install and configure the SRI Job Declarator client role, which also acts as a Proxy role. Probably on the same machine as the node.\r\n\r\nWe talk to the SRI software using noise encryption, but we _could_ also talk to it with a unix socket. That is, if SRI adds support for that. Regardless of the transport layer, we have to support the sv2 protocol messages.\r\n\r\nImplementing Noise encryption (and the sv2 protocol messages) now gives us the flexibility later to take over the Job Declarator client and Proxy role, removing the need to install SRI. At least for simple setups, e.g. a single ASIC (so the proxy doesn't have to worry about how to distribute work).\r\n\r\nIIUC the [Job Declarator client role](https://github.com/stratum-mining/sv2-spec/blob/main/06-Job-Declaration-Protocol.md) was designed to keep the Template Provider role easier to implement. To take it over we'd have to implement a few more messages: `AllocateMiningJobToken`, `DeclareMiningJob`, `IdentifyTransactions` and `SubmitSolution`. The `IdentifyTransactions` part is similar to how compact blocks work, where we only send full transactions to the pool if they don't already have them.\r\n\r\nWhile taking over the Job Declarator client role seems like a fairly straight-forward followup, taking over the Mining Proxy role is perhaps less so. Designing and implementing a Job Distribution Protocol, which IIUC avoids the need to implement a Mining Proxy, may be a better path. The user would then configure their miner to point to Bitcoin Core for templates as well as to the pool to submit shares.\r\n\r\nIf in the end we decide to do neither, then perhaps implementing noise was overkill. But as you point out it's not that complicated.\r\n\r\nAny complexity can be hidden from user with node-in-a-box solutions like Umbrel, but it's nice if they can just use Bitcoin Core. Having a separate binary maintained by us, like HWI, adds installation and configuration complexity. For HWI that's unavoidable because we don't want to include the USB driver kitchen sink.\r\n\r\nI don't think simplicity is merely nice for amateur home miners with a single S9 space heater; I suspect even small scale \"professional\" miners are not sys-admins. Running and configuring a seperate job declarator client process making sure it restarts after a crash is non-trivial. Much easier to just point the miner directly to a pool and not bother with custom template creation. So imo we need to lower the barrier as much as (safely) possible.\r\n\r\n\r\nAn additional argument for implementing noise encryption support, completely separate from the above setup complexity, is that it allows making the template provider publicly reachable. I'm still a bit skeptical about that use case, but see discussion here: https://github.com/stratum-mining/sv2-spec/issues/63#issuecomment-1866515958\r\n\r\n[0] on a hypothetical stratum v2 aware miner that is, which doesn't exist. Today you have to point the miner to a sv1 - sv2 translator which runs on your computer. This translator points to your job declarator client.\r\n\r\n--- \r\n\r\nUpdate 2024-06-12: more conceptual discussion on what work Bitcoin Core could / should (not) take over from the Job Declarator client role: https://github.com/stratum-mining/sv2-spec/discussions/85 ",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29346#issuecomment-2134614071",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29346"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12981800378,
      "node_id": "HRFPE_lADOABII5859hNA7zwAAAAMFxo26",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12981800378",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-30T08:06:30Z"
    },
    {
      "event": "labeled",
      "id": 12984298418,
      "node_id": "LE_lADOABII5859hNA7zwAAAAMF7Kuy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12984298418",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-30T11:09:56Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2139320831,
      "node_id": "IC_kwDOABII585_g3H_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2139320831",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-30T11:09:57Z",
      "updated_at": "2024-05-30T11:09:57Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n\n🚧 At least one of the CI tasks failed. Make sure to run all tests locally, according to the\ndocumentation.\n\nPossibly this is due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/25592506395</sub>",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29346#issuecomment-2139320831",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29346"
    },
    {
      "event": "commented",
      "id": 2139460402,
      "node_id": "IC_kwDOABII585_hZMy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2139460402",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-30T12:35:28Z",
      "updated_at": "2024-05-30T12:35:28Z",
      "author_association": "MEMBER",
      "body": "@ryanofsky let's continue the interface design in #30200.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29346#issuecomment-2139460402",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29346"
    },
    {
      "event": "mentioned",
      "id": 12985447306,
      "node_id": "MEE_lADOABII5859hNA7zwAAAAMF_jOK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12985447306",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-30T12:35:29Z"
    },
    {
      "event": "subscribed",
      "id": 12985447328,
      "node_id": "SE_lADOABII5859hNA7zwAAAAMF_jOg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12985447328",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-30T12:35:29Z"
    },
    {
      "event": "unlabeled",
      "id": 12991191165,
      "node_id": "UNLE_lADOABII5859hNA7zwAAAAMGVdh9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12991191165",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-30T20:05:25Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 13138070881,
      "node_id": "LE_lADOABII5859hNA7zwAAAAMPFw1h",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13138070881",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-12T22:35:25Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13201130926,
      "node_id": "HRFPE_lADOABII5859hNA7zwAAAAMS2UWu",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13201130926",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-18T13:21:56Z"
    },
    {
      "event": "commented",
      "id": 2176091625,
      "node_id": "IC_kwDOABII586BtIXp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2176091625",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-18T13:22:00Z",
      "updated_at": "2024-06-18T13:22:00Z",
      "author_association": "MEMBER",
      "body": "Trivial rebase after #29015. ",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29346#issuecomment-2176091625",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29346"
    },
    {
      "event": "unlabeled",
      "id": 13202000798,
      "node_id": "UNLE_lADOABII5859hNA7zwAAAAMS5oue",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13202000798",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-18T14:18:55Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13204361508,
      "node_id": "HRFPE_lADOABII5859hNA7zwAAAAMTCpEk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13204361508",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-18T17:23:01Z"
    },
    {
      "event": "labeled",
      "id": 13204362197,
      "node_id": "LE_lADOABII5859hNA7zwAAAAMTCpPV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13204362197",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-18T17:23:05Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "unlabeled",
      "id": 13206982902,
      "node_id": "UNLE_lADOABII5859hNA7zwAAAAMTMpD2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13206982902",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-18T21:36:39Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2179108671,
      "node_id": "IC_kwDOABII586B4o8_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2179108671",
      "actor": {
        "login": "Fi3",
        "id": 6207037,
        "node_id": "MDQ6VXNlcjYyMDcwMzc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6207037?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fi3",
        "html_url": "https://github.com/Fi3",
        "followers_url": "https://api.github.com/users/Fi3/followers",
        "following_url": "https://api.github.com/users/Fi3/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fi3/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fi3/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fi3/subscriptions",
        "organizations_url": "https://api.github.com/users/Fi3/orgs",
        "repos_url": "https://api.github.com/users/Fi3/repos",
        "events_url": "https://api.github.com/users/Fi3/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fi3/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-19T16:41:26Z",
      "updated_at": "2024-06-19T16:41:26Z",
      "author_association": "NONE",
      "body": "@Sjors initially the TP was without noise, we added it mainly to have third party TPs (not pool and not miner). About easy of use, if we don't want to implement an sv1 translator in core, the miner still have to deploy a translator proxy. Maybe is easier to just release a translator that is also a JDC (like what I did for demand) rather the implement the JDC in the TP and add custom message to do that.",
      "user": {
        "login": "Fi3",
        "id": 6207037,
        "node_id": "MDQ6VXNlcjYyMDcwMzc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6207037?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fi3",
        "html_url": "https://github.com/Fi3",
        "followers_url": "https://api.github.com/users/Fi3/followers",
        "following_url": "https://api.github.com/users/Fi3/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fi3/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fi3/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fi3/subscriptions",
        "organizations_url": "https://api.github.com/users/Fi3/orgs",
        "repos_url": "https://api.github.com/users/Fi3/repos",
        "events_url": "https://api.github.com/users/Fi3/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fi3/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29346#issuecomment-2179108671",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29346"
    },
    {
      "event": "mentioned",
      "id": 13218929508,
      "node_id": "MEE_lADOABII5859hNA7zwAAAAMT6Ntk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13218929508",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-19T16:41:26Z"
    },
    {
      "event": "subscribed",
      "id": 13218929519,
      "node_id": "SE_lADOABII5859hNA7zwAAAAMT6Ntv",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13218929519",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-19T16:41:27Z"
    },
    {
      "event": "commented",
      "id": 2180091233,
      "node_id": "IC_kwDOABII586B8Y1h",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2180091233",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-20T08:17:03Z",
      "updated_at": "2024-06-20T08:17:03Z",
      "author_association": "MEMBER",
      "body": "I'm still hopeful sv1 translators won't be needed at all soon(tm). That certainly seems too complicated to implement in Bitcoin Core.\r\n\r\nFor the same reason I don't think combining JDC and Translator is a good long term solution, though in the short run it could make the SRI side of things easier to configure.\r\n\r\nSee also the conceptual discussion in https://github.com/stratum-mining/sv2-spec/discussions/85",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29346#issuecomment-2180091233",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29346"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13244659425,
      "node_id": "HRFPE_lADOABII5859hNA7zwAAAAMVcXbh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13244659425",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-21T16:18:52Z"
    },
    {
      "event": "referenced",
      "id": 13272945607,
      "node_id": "REFE_lADOABII5859hNA7zwAAAAMXIRPH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13272945607",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "323b0acfcb9380ce4b3c12a3d0b341d7bb3bfe08",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/323b0acfcb9380ce4b3c12a3d0b341d7bb3bfe08",
      "created_at": "2024-06-24T23:29:57Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13276424529,
      "node_id": "HRFPE_lADOABII5859hNA7zwAAAAMXVilR",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13276424529",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-25T07:18:49Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13327263818,
      "node_id": "HRFPE_lADOABII5859hNA7zwAAAAMaXehK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13327263818",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-28T06:42:34Z"
    },
    {
      "event": "labeled",
      "id": 13328252551,
      "node_id": "LE_lADOABII5859hNA7zwAAAAMabP6H",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13328252551",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-28T08:16:35Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2196383554,
      "node_id": "IC_kwDOABII586C6idC",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2196383554",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-28T08:16:36Z",
      "updated_at": "2024-06-28T08:16:36Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n\n🚧 At least one of the CI tasks failed. Make sure to run all tests locally, according to the\ndocumentation.\n\nPossibly this is due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/26795764911</sub>",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29346#issuecomment-2196383554",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29346"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13328877851,
      "node_id": "HRFPE_lADOABII5859hNA7zwAAAAMadokb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13328877851",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-28T09:11:12Z"
    },
    {
      "event": "commented",
      "id": 2196470058,
      "node_id": "IC_kwDOABII586C63kq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2196470058",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-28T09:11:14Z",
      "updated_at": "2024-06-28T09:12:14Z",
      "author_association": "MEMBER",
      "body": "The MSan, depends job [failed](https://cirrus-ci.com/task/5872614726434816?logs=ci#L2697) the test which issues the certificate 1 second in the future. I increased the time difference so such failure is less likely. See [diff](https://github.com/bitcoin/bitcoin/compare/8175d8ed8c4c19bc5cc09b7b849b47ebbe14eb4e..4778bb7049ccc905183489fc254adc805492afa1).\r\n\r\nThe fuzzer could also pick 1 second in the past or future for the certificate validity test. But it uses `SetMockTime`, so presumably doesn't have this problem.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29346#issuecomment-2196470058",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29346"
    },
    {
      "event": "unlabeled",
      "id": 13330155773,
      "node_id": "UNLE_lADOABII5859hNA7zwAAAAMaigj9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13330155773",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-28T11:07:19Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2197273180,
      "node_id": "IC_kwDOABII586C97pc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2197273180",
      "actor": {
        "login": "itornaza",
        "id": 11520757,
        "node_id": "MDQ6VXNlcjExNTIwNzU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/11520757?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/itornaza",
        "html_url": "https://github.com/itornaza",
        "followers_url": "https://api.github.com/users/itornaza/followers",
        "following_url": "https://api.github.com/users/itornaza/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/itornaza/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/itornaza/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/itornaza/subscriptions",
        "organizations_url": "https://api.github.com/users/itornaza/orgs",
        "repos_url": "https://api.github.com/users/itornaza/repos",
        "events_url": "https://api.github.com/users/itornaza/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/itornaza/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-28T16:27:41Z",
      "updated_at": "2024-06-28T16:27:41Z",
      "author_association": "CONTRIBUTOR",
      "body": "After going through https://github.com/bitcoin/bitcoin/pull/29346#issuecomment-2134614071, [sv2-spec](https://github.com/stratum-mining/sv2-spec/blob/main/03-Protocol-Overview.md), https://github.com/stratum-mining/sv2-spec/discussions/85 time and time again, I put all the relevant information in [sv2-draft-sketch.pdf](https://github.com/user-attachments/files/16033413/sv2-draft-sketch.pdf) for the Config A case, to make better sense of the trade offs involved.\r\n\r\nWith the assumption that I understood the protocol correctly, it seems that integrating the Noise Protocol into Bitcoin Core adds much more flexibility and options than overhead https://github.com/bitcoin/bitcoin/pull/29346#issuecomment-2110376536. Thus, Noise Protocol integration allows for the following:\r\n\r\n1. Implement the Template Provider (TP) role and the Template Distribution Protocol into Bitcoin and point to SRI software for the Job Declarator Client (JDC) and Mining Proxy.\r\n2. Implement the Template Provider (TP), Job Declarator Client (JDC) roles, and Template Distribution and Job Distribution protocols into Bitcoin and point to SRI software for Mining Proxy. This option makes the life of amateur miners easier since they do not need to configure a third party JDC.\r\n3. The Template Provider (TP) can be publicly reachable.\r\n\r\nIn the longer term, and if it is decided to aim for the incorporation of the Template Provider (TP), Job Declarator Client (JDC) and Mining Proxy into Bitcoin, the Noise Protocol can facilitate all the interim solutions until the rest of the modules are production ready.",
      "user": {
        "login": "itornaza",
        "id": 11520757,
        "node_id": "MDQ6VXNlcjExNTIwNzU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/11520757?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/itornaza",
        "html_url": "https://github.com/itornaza",
        "followers_url": "https://api.github.com/users/itornaza/followers",
        "following_url": "https://api.github.com/users/itornaza/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/itornaza/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/itornaza/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/itornaza/subscriptions",
        "organizations_url": "https://api.github.com/users/itornaza/orgs",
        "repos_url": "https://api.github.com/users/itornaza/repos",
        "events_url": "https://api.github.com/users/itornaza/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/itornaza/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29346#issuecomment-2197273180",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29346"
    },
    {
      "event": "commented",
      "id": 2198494395,
      "node_id": "IC_kwDOABII586DCly7",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2198494395",
      "actor": {
        "login": "Fi3",
        "id": 6207037,
        "node_id": "MDQ6VXNlcjYyMDcwMzc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6207037?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fi3",
        "html_url": "https://github.com/Fi3",
        "followers_url": "https://api.github.com/users/Fi3/followers",
        "following_url": "https://api.github.com/users/Fi3/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fi3/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fi3/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fi3/subscriptions",
        "organizations_url": "https://api.github.com/users/Fi3/orgs",
        "repos_url": "https://api.github.com/users/Fi3/repos",
        "events_url": "https://api.github.com/users/Fi3/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fi3/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-30T09:20:25Z",
      "updated_at": "2024-06-30T09:20:25Z",
      "author_association": "NONE",
      "body": "@itornaza I agree with you about the implication of integrating noise into the TP. Just want to point out 2 minors issues [in your sketch](https://github.com/user-attachments/files/16033413/sv2-draft-sketch.pdf):\r\n1. Pool and JDS do not need to communicate (and if they do they do not use the job declaration protocol)\r\n2. JDS and TP do not communicate using the template distribution protocol. JDS <-> TP communication is not part of Sv2. For example the JDS on SRI just use bitcoind RPC API. ",
      "user": {
        "login": "Fi3",
        "id": 6207037,
        "node_id": "MDQ6VXNlcjYyMDcwMzc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6207037?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fi3",
        "html_url": "https://github.com/Fi3",
        "followers_url": "https://api.github.com/users/Fi3/followers",
        "following_url": "https://api.github.com/users/Fi3/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fi3/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fi3/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fi3/subscriptions",
        "organizations_url": "https://api.github.com/users/Fi3/orgs",
        "repos_url": "https://api.github.com/users/Fi3/repos",
        "events_url": "https://api.github.com/users/Fi3/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fi3/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29346#issuecomment-2198494395",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29346"
    },
    {
      "event": "mentioned",
      "id": 13341716710,
      "node_id": "MEE_lADOABII5859hNA7zwAAAAMbOnDm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13341716710",
      "actor": {
        "login": "itornaza",
        "id": 11520757,
        "node_id": "MDQ6VXNlcjExNTIwNzU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/11520757?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/itornaza",
        "html_url": "https://github.com/itornaza",
        "followers_url": "https://api.github.com/users/itornaza/followers",
        "following_url": "https://api.github.com/users/itornaza/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/itornaza/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/itornaza/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/itornaza/subscriptions",
        "organizations_url": "https://api.github.com/users/itornaza/orgs",
        "repos_url": "https://api.github.com/users/itornaza/repos",
        "events_url": "https://api.github.com/users/itornaza/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/itornaza/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-30T09:20:27Z"
    },
    {
      "event": "subscribed",
      "id": 13341716712,
      "node_id": "SE_lADOABII5859hNA7zwAAAAMbOnDo",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13341716712",
      "actor": {
        "login": "itornaza",
        "id": 11520757,
        "node_id": "MDQ6VXNlcjExNTIwNzU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/11520757?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/itornaza",
        "html_url": "https://github.com/itornaza",
        "followers_url": "https://api.github.com/users/itornaza/followers",
        "following_url": "https://api.github.com/users/itornaza/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/itornaza/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/itornaza/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/itornaza/subscriptions",
        "organizations_url": "https://api.github.com/users/itornaza/orgs",
        "repos_url": "https://api.github.com/users/itornaza/repos",
        "events_url": "https://api.github.com/users/itornaza/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/itornaza/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-30T09:20:27Z"
    },
    {
      "event": "reviewed",
      "id": 2150023019,
      "node_id": "PRR_kwDOABII586AJr9r",
      "url": null,
      "actor": null,
      "commit_id": "a2436955f5bde920e41e03a5db34d477bfeb04a6",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "body": "",
      "user": {
        "login": "KristijanSajenko",
        "id": 87147055,
        "node_id": "MDQ6VXNlcjg3MTQ3MDU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/87147055?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KristijanSajenko",
        "html_url": "https://github.com/KristijanSajenko",
        "followers_url": "https://api.github.com/users/KristijanSajenko/followers",
        "following_url": "https://api.github.com/users/KristijanSajenko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KristijanSajenko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KristijanSajenko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KristijanSajenko/subscriptions",
        "organizations_url": "https://api.github.com/users/KristijanSajenko/orgs",
        "repos_url": "https://api.github.com/users/KristijanSajenko/repos",
        "events_url": "https://api.github.com/users/KristijanSajenko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KristijanSajenko/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29346#pullrequestreview-2150023019",
      "submitted_at": "2024-06-30T10:35:26Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29346"
    },
    {
      "event": "commented",
      "id": 2198513621,
      "node_id": "IC_kwDOABII586DCqfV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2198513621",
      "actor": {
        "login": "itornaza",
        "id": 11520757,
        "node_id": "MDQ6VXNlcjExNTIwNzU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/11520757?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/itornaza",
        "html_url": "https://github.com/itornaza",
        "followers_url": "https://api.github.com/users/itornaza/followers",
        "following_url": "https://api.github.com/users/itornaza/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/itornaza/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/itornaza/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/itornaza/subscriptions",
        "organizations_url": "https://api.github.com/users/itornaza/orgs",
        "repos_url": "https://api.github.com/users/itornaza/repos",
        "events_url": "https://api.github.com/users/itornaza/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/itornaza/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-30T10:38:10Z",
      "updated_at": "2024-06-30T10:38:10Z",
      "author_association": "CONTRIBUTOR",
      "body": "@Fi3 thank you for clarifying it really helped a lot! Would you also think this is a good point to start reviewing the Noise Protocol implementation on this PR compared to it's [specification](https://noiseprotocol.org/noise.html)?",
      "user": {
        "login": "itornaza",
        "id": 11520757,
        "node_id": "MDQ6VXNlcjExNTIwNzU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/11520757?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/itornaza",
        "html_url": "https://github.com/itornaza",
        "followers_url": "https://api.github.com/users/itornaza/followers",
        "following_url": "https://api.github.com/users/itornaza/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/itornaza/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/itornaza/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/itornaza/subscriptions",
        "organizations_url": "https://api.github.com/users/itornaza/orgs",
        "repos_url": "https://api.github.com/users/itornaza/repos",
        "events_url": "https://api.github.com/users/itornaza/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/itornaza/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29346#issuecomment-2198513621",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29346"
    },
    {
      "event": "mentioned",
      "id": 13341851282,
      "node_id": "MEE_lADOABII5859hNA7zwAAAAMbPH6S",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13341851282",
      "actor": {
        "login": "Fi3",
        "id": 6207037,
        "node_id": "MDQ6VXNlcjYyMDcwMzc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6207037?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fi3",
        "html_url": "https://github.com/Fi3",
        "followers_url": "https://api.github.com/users/Fi3/followers",
        "following_url": "https://api.github.com/users/Fi3/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fi3/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fi3/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fi3/subscriptions",
        "organizations_url": "https://api.github.com/users/Fi3/orgs",
        "repos_url": "https://api.github.com/users/Fi3/repos",
        "events_url": "https://api.github.com/users/Fi3/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fi3/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-30T10:38:11Z"
    },
    {
      "event": "subscribed",
      "id": 13341851285,
      "node_id": "SE_lADOABII5859hNA7zwAAAAMbPH6V",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13341851285",
      "actor": {
        "login": "Fi3",
        "id": 6207037,
        "node_id": "MDQ6VXNlcjYyMDcwMzc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6207037?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fi3",
        "html_url": "https://github.com/Fi3",
        "followers_url": "https://api.github.com/users/Fi3/followers",
        "following_url": "https://api.github.com/users/Fi3/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fi3/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fi3/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fi3/subscriptions",
        "organizations_url": "https://api.github.com/users/Fi3/orgs",
        "repos_url": "https://api.github.com/users/Fi3/repos",
        "events_url": "https://api.github.com/users/Fi3/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fi3/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-30T10:38:11Z"
    },
    {
      "event": "commented",
      "id": 2199647556,
      "node_id": "IC_kwDOABII586DG_VE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2199647556",
      "actor": {
        "login": "Fi3",
        "id": 6207037,
        "node_id": "MDQ6VXNlcjYyMDcwMzc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6207037?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fi3",
        "html_url": "https://github.com/Fi3",
        "followers_url": "https://api.github.com/users/Fi3/followers",
        "following_url": "https://api.github.com/users/Fi3/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fi3/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fi3/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fi3/subscriptions",
        "organizations_url": "https://api.github.com/users/Fi3/orgs",
        "repos_url": "https://api.github.com/users/Fi3/repos",
        "events_url": "https://api.github.com/users/Fi3/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fi3/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-01T09:17:55Z",
      "updated_at": "2024-07-01T09:17:55Z",
      "author_association": "NONE",
      "body": "@itornaza  If I remember correctly anything needed to implement sv2 noise is contained in the [sv2 spec](https://github.com/stratum-mining/sv2-spec/blob/main/04-Protocol-Security.md) and the [noise spec](https://noiseprotocol.org/noise.html) are a little bit dispersive. But I implemented it on SRI more then one year ago so take it with a grain of salt. ",
      "user": {
        "login": "Fi3",
        "id": 6207037,
        "node_id": "MDQ6VXNlcjYyMDcwMzc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6207037?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fi3",
        "html_url": "https://github.com/Fi3",
        "followers_url": "https://api.github.com/users/Fi3/followers",
        "following_url": "https://api.github.com/users/Fi3/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fi3/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fi3/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fi3/subscriptions",
        "organizations_url": "https://api.github.com/users/Fi3/orgs",
        "repos_url": "https://api.github.com/users/Fi3/repos",
        "events_url": "https://api.github.com/users/Fi3/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fi3/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29346#issuecomment-2199647556",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29346"
    },
    {
      "event": "mentioned",
      "id": 13348095797,
      "node_id": "MEE_lADOABII5859hNA7zwAAAAMbm8c1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13348095797",
      "actor": {
        "login": "itornaza",
        "id": 11520757,
        "node_id": "MDQ6VXNlcjExNTIwNzU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/11520757?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/itornaza",
        "html_url": "https://github.com/itornaza",
        "followers_url": "https://api.github.com/users/itornaza/followers",
        "following_url": "https://api.github.com/users/itornaza/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/itornaza/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/itornaza/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/itornaza/subscriptions",
        "organizations_url": "https://api.github.com/users/itornaza/orgs",
        "repos_url": "https://api.github.com/users/itornaza/repos",
        "events_url": "https://api.github.com/users/itornaza/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/itornaza/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-01T09:17:57Z"
    },
    {
      "event": "subscribed",
      "id": 13348095816,
      "node_id": "SE_lADOABII5859hNA7zwAAAAMbm8dI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13348095816",
      "actor": {
        "login": "itornaza",
        "id": 11520757,
        "node_id": "MDQ6VXNlcjExNTIwNzU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/11520757?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/itornaza",
        "html_url": "https://github.com/itornaza",
        "followers_url": "https://api.github.com/users/itornaza/followers",
        "following_url": "https://api.github.com/users/itornaza/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/itornaza/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/itornaza/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/itornaza/subscriptions",
        "organizations_url": "https://api.github.com/users/itornaza/orgs",
        "repos_url": "https://api.github.com/users/itornaza/repos",
        "events_url": "https://api.github.com/users/itornaza/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/itornaza/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-01T09:17:57Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13369240383,
      "node_id": "HRFPE_lADOABII5859hNA7zwAAAAMc3ms_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13369240383",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-02T17:03:30Z"
    },
    {
      "event": "reviewed",
      "id": 2154456127,
      "node_id": "PRR_kwDOABII586AamQ_",
      "url": null,
      "actor": null,
      "commit_id": "a2436955f5bde920e41e03a5db34d477bfeb04a6",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "body": "",
      "user": {
        "login": "winlover32",
        "id": 74832157,
        "node_id": "MDQ6VXNlcjc0ODMyMTU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/74832157?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/winlover32",
        "html_url": "https://github.com/winlover32",
        "followers_url": "https://api.github.com/users/winlover32/followers",
        "following_url": "https://api.github.com/users/winlover32/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/winlover32/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/winlover32/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/winlover32/subscriptions",
        "organizations_url": "https://api.github.com/users/winlover32/orgs",
        "repos_url": "https://api.github.com/users/winlover32/repos",
        "events_url": "https://api.github.com/users/winlover32/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/winlover32/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29346#pullrequestreview-2154456127",
      "submitted_at": "2024-07-02T17:27:59Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29346"
    },
    {
      "event": "reviewed",
      "id": 2159282833,
      "node_id": "PRR_kwDOABII586AtAqR",
      "url": null,
      "actor": null,
      "commit_id": "a2436955f5bde920e41e03a5db34d477bfeb04a6",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK a2436955f5bde920e41e03a5db34d477bfeb04a6\r\n\r\nAs stated in my previous comments, the implementation of the Stratum v2 Noise Protocol is adding more flexibility to Bitcoin than overhead towards the integration of the Stratum protocol Template Provider and Job Declaration Client roles within bitcoind.\r\n\r\nI include some really minor nits that came out during a quick code review against the protocol specs and leaving them here to your discretion.",
      "user": {
        "login": "itornaza",
        "id": 11520757,
        "node_id": "MDQ6VXNlcjExNTIwNzU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/11520757?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/itornaza",
        "html_url": "https://github.com/itornaza",
        "followers_url": "https://api.github.com/users/itornaza/followers",
        "following_url": "https://api.github.com/users/itornaza/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/itornaza/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/itornaza/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/itornaza/subscriptions",
        "organizations_url": "https://api.github.com/users/itornaza/orgs",
        "repos_url": "https://api.github.com/users/itornaza/repos",
        "events_url": "https://api.github.com/users/itornaza/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/itornaza/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29346#pullrequestreview-2159282833",
      "submitted_at": "2024-07-04T17:40:10Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29346"
    },
    {
      "event": "labeled",
      "id": 13434714621,
      "node_id": "LE_lADOABII5859hNA7zwAAAAMgxXn9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13434714621",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-09T07:07:01Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2216761438,
      "node_id": "IC_kwDOABII586EIRhe",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2216761438",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-09T07:07:02Z",
      "updated_at": "2024-07-09T07:07:02Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n\n🚧 At least one of the CI tasks failed. Make sure to run all tests locally, according to the\ndocumentation.\n\nPossibly this is due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/26955016804</sub>",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29346#issuecomment-2216761438",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29346"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13469641396,
      "node_id": "HRFPE_lADOABII5859hNA7zwAAAAMi2mq0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13469641396",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-11T10:29:19Z"
    },
    {
      "event": "commented",
      "id": 2222579946,
      "node_id": "IC_kwDOABII586EeeDq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2222579946",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-11T10:29:25Z",
      "updated_at": "2024-07-11T10:29:25Z",
      "author_association": "MEMBER",
      "body": "Rebased after silent merge conflict with #29625 which moved `xoroshiro128plusplus.h`. Addressed comments by @itornaza.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29346#issuecomment-2222579946",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29346"
    },
    {
      "event": "mentioned",
      "id": 13469642801,
      "node_id": "MEE_lADOABII5859hNA7zwAAAAMi2nAx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13469642801",
      "actor": {
        "login": "itornaza",
        "id": 11520757,
        "node_id": "MDQ6VXNlcjExNTIwNzU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/11520757?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/itornaza",
        "html_url": "https://github.com/itornaza",
        "followers_url": "https://api.github.com/users/itornaza/followers",
        "following_url": "https://api.github.com/users/itornaza/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/itornaza/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/itornaza/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/itornaza/subscriptions",
        "organizations_url": "https://api.github.com/users/itornaza/orgs",
        "repos_url": "https://api.github.com/users/itornaza/repos",
        "events_url": "https://api.github.com/users/itornaza/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/itornaza/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-11T10:29:26Z"
    },
    {
      "event": "subscribed",
      "id": 13469642832,
      "node_id": "SE_lADOABII5859hNA7zwAAAAMi2nBQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13469642832",
      "actor": {
        "login": "itornaza",
        "id": 11520757,
        "node_id": "MDQ6VXNlcjExNTIwNzU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/11520757?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/itornaza",
        "html_url": "https://github.com/itornaza",
        "followers_url": "https://api.github.com/users/itornaza/followers",
        "following_url": "https://api.github.com/users/itornaza/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/itornaza/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/itornaza/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/itornaza/subscriptions",
        "organizations_url": "https://api.github.com/users/itornaza/orgs",
        "repos_url": "https://api.github.com/users/itornaza/repos",
        "events_url": "https://api.github.com/users/itornaza/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/itornaza/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-11T10:29:27Z"
    },
    {
      "event": "unlabeled",
      "id": 13470511326,
      "node_id": "UNLE_lADOABII5859hNA7zwAAAAMi57De",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13470511326",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-11T11:46:27Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13531846562,
      "node_id": "HRFPE_lADOABII5859hNA7zwAAAAMmj5ei",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13531846562",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-17T07:01:51Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13569747973,
      "node_id": "HRFPE_lADOABII5859hNA7zwAAAAMo0ewF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13569747973",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-19T07:04:51Z"
    },
    {
      "event": "reviewed",
      "id": 2217099632,
      "node_id": "PRR_kwDOABII586EJkFw",
      "url": null,
      "actor": null,
      "commit_id": "f69fd623ad97d1d4aacaa81b479f9182888d994a",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "itornaza",
        "id": 11520757,
        "node_id": "MDQ6VXNlcjExNTIwNzU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/11520757?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/itornaza",
        "html_url": "https://github.com/itornaza",
        "followers_url": "https://api.github.com/users/itornaza/followers",
        "following_url": "https://api.github.com/users/itornaza/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/itornaza/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/itornaza/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/itornaza/subscriptions",
        "organizations_url": "https://api.github.com/users/itornaza/orgs",
        "repos_url": "https://api.github.com/users/itornaza/repos",
        "events_url": "https://api.github.com/users/itornaza/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/itornaza/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29346#pullrequestreview-2217099632",
      "submitted_at": "2024-08-03T16:31:40Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29346"
    },
    {
      "event": "reviewed",
      "id": 2217137222,
      "node_id": "PRR_kwDOABII586EJtRG",
      "url": null,
      "actor": null,
      "commit_id": "f69fd623ad97d1d4aacaa81b479f9182888d994a",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "itornaza",
        "id": 11520757,
        "node_id": "MDQ6VXNlcjExNTIwNzU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/11520757?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/itornaza",
        "html_url": "https://github.com/itornaza",
        "followers_url": "https://api.github.com/users/itornaza/followers",
        "following_url": "https://api.github.com/users/itornaza/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/itornaza/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/itornaza/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/itornaza/subscriptions",
        "organizations_url": "https://api.github.com/users/itornaza/orgs",
        "repos_url": "https://api.github.com/users/itornaza/repos",
        "events_url": "https://api.github.com/users/itornaza/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/itornaza/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29346#pullrequestreview-2217137222",
      "submitted_at": "2024-08-03T16:46:50Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29346"
    },
    {
      "event": "reviewed",
      "id": 2217162563,
      "node_id": "PRR_kwDOABII586EJzdD",
      "url": null,
      "actor": null,
      "commit_id": "f69fd623ad97d1d4aacaa81b479f9182888d994a",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "user": {
        "login": "Brock124590",
        "id": 141978268,
        "node_id": "U_kgDOCHZqnA",
        "avatar_url": "https://avatars.githubusercontent.com/u/141978268?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Brock124590",
        "html_url": "https://github.com/Brock124590",
        "followers_url": "https://api.github.com/users/Brock124590/followers",
        "following_url": "https://api.github.com/users/Brock124590/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Brock124590/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Brock124590/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Brock124590/subscriptions",
        "organizations_url": "https://api.github.com/users/Brock124590/orgs",
        "repos_url": "https://api.github.com/users/Brock124590/repos",
        "events_url": "https://api.github.com/users/Brock124590/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Brock124590/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29346#pullrequestreview-2217162563",
      "submitted_at": "2024-08-03T17:53:06Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29346"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13808701678,
      "node_id": "HRFPE_lADOABII5859hNA7zwAAAAM3EBDu",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13808701678",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-08T15:20:19Z"
    },
    {
      "event": "commented",
      "id": 2276094102,
      "node_id": "IC_kwDOABII586HqnCW",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2276094102",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-08T15:21:10Z",
      "updated_at": "2024-08-08T15:21:10Z",
      "author_association": "MEMBER",
      "body": "Rebased and I took @itornaza's patch with some changes, see inline comments on https://github.com/bitcoin/bitcoin/commit/2d28478d0791689070bd23df5b5640e9dae6f786.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29346#issuecomment-2276094102",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29346"
    },
    {
      "event": "mentioned",
      "id": 13808716459,
      "node_id": "MEE_lADOABII5859hNA7zwAAAAM3EEqr",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13808716459",
      "actor": {
        "login": "itornaza",
        "id": 11520757,
        "node_id": "MDQ6VXNlcjExNTIwNzU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/11520757?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/itornaza",
        "html_url": "https://github.com/itornaza",
        "followers_url": "https://api.github.com/users/itornaza/followers",
        "following_url": "https://api.github.com/users/itornaza/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/itornaza/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/itornaza/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/itornaza/subscriptions",
        "organizations_url": "https://api.github.com/users/itornaza/orgs",
        "repos_url": "https://api.github.com/users/itornaza/repos",
        "events_url": "https://api.github.com/users/itornaza/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/itornaza/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-08T15:21:11Z"
    },
    {
      "event": "subscribed",
      "id": 13808716487,
      "node_id": "SE_lADOABII5859hNA7zwAAAAM3EErH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13808716487",
      "actor": {
        "login": "itornaza",
        "id": 11520757,
        "node_id": "MDQ6VXNlcjExNTIwNzU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/11520757?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/itornaza",
        "html_url": "https://github.com/itornaza",
        "followers_url": "https://api.github.com/users/itornaza/followers",
        "following_url": "https://api.github.com/users/itornaza/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/itornaza/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/itornaza/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/itornaza/subscriptions",
        "organizations_url": "https://api.github.com/users/itornaza/orgs",
        "repos_url": "https://api.github.com/users/itornaza/repos",
        "events_url": "https://api.github.com/users/itornaza/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/itornaza/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-08T15:21:11Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13809294151,
      "node_id": "HRFPE_lADOABII5859hNA7zwAAAAM3GRtH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13809294151",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-08T16:06:11Z"
    },
    {
      "event": "commented",
      "id": 2276184218,
      "node_id": "IC_kwDOABII586Hq9Ca",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2276184218",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-08T16:06:44Z",
      "updated_at": "2024-08-08T16:08:02Z",
      "author_association": "MEMBER",
      "body": "I can't reproduce the CI failure, but hopefully [this](https://github.com/bitcoin/bitcoin/compare/a19acfccee6f118fad2fb9d090157e5c55cd8465..e73740fde107f79eeee8e55c6bed156713abe8a5) fixes it.\r\n\r\nSee https://github.com/bitcoin/bitcoin/commit/2d28478d0791689070bd23df5b5640e9dae6f786#r145179932",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29346#issuecomment-2276184218",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29346"
    },
    {
      "event": "commented",
      "id": 2276184375,
      "node_id": "IC_kwDOABII586Hq9E3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2276184375",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-08T16:06:49Z",
      "updated_at": "2024-08-08T16:06:49Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/28524380497</sub>\n\n<details><summary>Hints</summary>\n\nMake sure to run all tests locally, according to the documentation.\n\nThe failure may happen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29346#issuecomment-2276184375",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29346"
    },
    {
      "event": "labeled",
      "id": 13809301194,
      "node_id": "LE_lADOABII5859hNA7zwAAAAM3GTbK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13809301194",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-08T16:06:49Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "unlabeled",
      "id": 13810103777,
      "node_id": "UNLE_lADOABII5859hNA7zwAAAAM3JXXh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13810103777",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-08T17:22:48Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 2230564992,
      "node_id": "PRR_kwDOABII586E87iA",
      "url": null,
      "actor": null,
      "commit_id": "e73740fde107f79eeee8e55c6bed156713abe8a5",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Code review ACK e73740fde107f79eeee8e55c6bed156713abe8a5\r\n\r\nThis pr closely follows the intersection of the original [Noise Protocol paper](https://noiseprotocol.org/noise.pdf) and the [Protocol Security section](https://github.com/stratum-mining/sv2-spec/blob/main/04-Protocol-Security.md) of the Stratum V2 Specification to provide an implementation of the Noise Protocol on Bitcoin Core. In that way we can now step by step integrate the Stratum protocol Template Provider and Job Declaration Client roles into bitcoind.\r\n\r\nAll my concerns at the present time were addressed and explained in https://github.com/bitcoin/bitcoin/pull/29346#issuecomment-2197273180, https://github.com/bitcoin/bitcoin/pull/29346#issuecomment-2198494395 and in my patch's thread https://github.com/bitcoin/bitcoin/commit/2d28478d0791689070bd23df5b5640e9dae6f786 by @Sjors and @Fi3.\r\n\r\nI also built the commit again, run all unit, functional and extended tests and all of them pass. I also run the unit tests with the help of lldb to closely follow the program's flow and monitor how the variables behave. I intend to do more testing and review of the sv2 series as I learn more and get familiar with it.",
      "user": {
        "login": "itornaza",
        "id": 11520757,
        "node_id": "MDQ6VXNlcjExNTIwNzU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/11520757?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/itornaza",
        "html_url": "https://github.com/itornaza",
        "followers_url": "https://api.github.com/users/itornaza/followers",
        "following_url": "https://api.github.com/users/itornaza/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/itornaza/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/itornaza/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/itornaza/subscriptions",
        "organizations_url": "https://api.github.com/users/itornaza/orgs",
        "repos_url": "https://api.github.com/users/itornaza/repos",
        "events_url": "https://api.github.com/users/itornaza/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/itornaza/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29346#pullrequestreview-2230564992",
      "submitted_at": "2024-08-09T16:04:03Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29346"
    },
    {
      "event": "referenced",
      "id": 13864817945,
      "node_id": "REFE_lADOABII5859hNA7zwAAAAM6aFUZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13864817945",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "2d28478d0791689070bd23df5b5640e9dae6f786",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2d28478d0791689070bd23df5b5640e9dae6f786",
      "created_at": "2024-08-13T14:48:29Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13866622453,
      "node_id": "HRFPE_lADOABII5859hNA7zwAAAAM6g931",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13866622453",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-13T17:06:01Z"
    },
    {
      "event": "commented",
      "id": 2286722016,
      "node_id": "IC_kwDOABII586ITJvg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2286722016",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-13T17:06:28Z",
      "updated_at": "2024-08-13T17:06:28Z",
      "author_association": "MEMBER",
      "body": "I introduced `using NoiseHash = std::array<uint8_t, HASHLEN>;` for improved readability.\r\n\r\nAlthough all tests passed, I noticed while testing #29432 that SRI hangs up after the handshake. Turns out I broke the `HKDF2` implementation, which the test didn't catch because there's no hardcoded test vector. That's fixed now.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29346#issuecomment-2286722016",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29346"
    },
    {
      "event": "labeled",
      "id": 13909023691,
      "node_id": "LE_lADOABII5859hNA7zwAAAAM9CtvL",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13909023691",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-16T10:13:48Z",
      "label": {
        "name": "Needs CMake port",
        "color": "0e8a16"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14059796813,
      "node_id": "HRFPE_lADOABII5859hNA7zwAAAANGB3lN",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14059796813",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-29T10:56:57Z"
    },
    {
      "event": "commented",
      "id": 2317321077,
      "node_id": "IC_kwDOABII586KH4N1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2317321077",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-29T10:57:31Z",
      "updated_at": "2024-08-29T10:57:39Z",
      "author_association": "MEMBER",
      "body": "Rebased for CMake (only).",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29346#issuecomment-2317321077",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29346"
    },
    {
      "event": "unlabeled",
      "id": 14059896036,
      "node_id": "UNLE_lADOABII5859hNA7zwAAAANGCPzk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14059896036",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-29T11:05:08Z",
      "label": {
        "name": "Needs CMake port",
        "color": "0e8a16"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14060389961,
      "node_id": "HRFPE_lADOABII5859hNA7zwAAAANGEIZJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14060389961",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-29T11:46:19Z"
    },
    {
      "event": "labeled",
      "id": 14121652224,
      "node_id": "LE_lADOABII5859hNA7zwAAAANJt1AA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14121652224",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-03T21:57:02Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14126979316,
      "node_id": "HRFPE_lADOABII5859hNA7zwAAAANKCJj0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14126979316",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-04T09:09:49Z"
    },
    {
      "event": "commented",
      "id": 2328325006,
      "node_id": "IC_kwDOABII586Kx2uO",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2328325006",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-04T09:09:53Z",
      "updated_at": "2024-09-04T09:09:53Z",
      "author_association": "MEMBER",
      "body": "Rebased after #26619.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29346#issuecomment-2328325006",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29346"
    },
    {
      "event": "unlabeled",
      "id": 14128130939,
      "node_id": "UNLE_lADOABII5859hNA7zwAAAANKGit7",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14128130939",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-04T10:29:09Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14200338734,
      "node_id": "HRFPE_lADOABII5859hNA7zwAAAANOZ_ku",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14200338734",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-10T14:46:14Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14246628420,
      "node_id": "HRFPE_lADOABII5859hNA7zwAAAANRKkxE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14246628420",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-13T10:12:46Z"
    },
    {
      "event": "commented",
      "id": 2348604652,
      "node_id": "IC_kwDOABII586L_Nzs",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2348604652",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-13T10:28:00Z",
      "updated_at": "2024-09-13T10:28:00Z",
      "author_association": "MEMBER",
      "body": "The first two commits of https://github.com/Sjors/bitcoin/pull/62 could be included here to put it behind a `-DWITH_SV2=ON` feature flag. \r\n\r\nI'll include that in a future push once it had some review. It shouldn't be a blocker for this PR, because the classes introduced here are not used yet.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29346#issuecomment-2348604652",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29346"
    },
    {
      "event": "reviewed",
      "id": 2291544930,
      "node_id": "PRR_kwDOABII586IljNi",
      "url": null,
      "actor": null,
      "commit_id": "c8d9d84e21ba091be6be83261b31684ac693d016",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "body": "utACK. This looks good, just a few nits. It closely aligns with the Noise NX standards and our SRI noise implementation. I will test it soon and share detailed findings.",
      "user": {
        "login": "Shourya742",
        "id": 84662239,
        "node_id": "MDQ6VXNlcjg0NjYyMjM5",
        "avatar_url": "https://avatars.githubusercontent.com/u/84662239?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Shourya742",
        "html_url": "https://github.com/Shourya742",
        "followers_url": "https://api.github.com/users/Shourya742/followers",
        "following_url": "https://api.github.com/users/Shourya742/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Shourya742/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Shourya742/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Shourya742/subscriptions",
        "organizations_url": "https://api.github.com/users/Shourya742/orgs",
        "repos_url": "https://api.github.com/users/Shourya742/repos",
        "events_url": "https://api.github.com/users/Shourya742/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Shourya742/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29346#pullrequestreview-2291544930",
      "submitted_at": "2024-09-14T15:56:05Z",
      "state": "CHANGES_REQUESTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29346"
    },
    {
      "event": "reviewed",
      "id": 2304920988,
      "node_id": "PRR_kwDOABII586JYk2c",
      "url": null,
      "actor": null,
      "commit_id": "c8d9d84e21ba091be6be83261b31684ac693d016",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "re ACK c8d9d84e21ba091be6be83261b31684ac693d016\r\n\r\nRun all tests locally once again and all of them pass including the extended.",
      "user": {
        "login": "itornaza",
        "id": 11520757,
        "node_id": "MDQ6VXNlcjExNTIwNzU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/11520757?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/itornaza",
        "html_url": "https://github.com/itornaza",
        "followers_url": "https://api.github.com/users/itornaza/followers",
        "following_url": "https://api.github.com/users/itornaza/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/itornaza/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/itornaza/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/itornaza/subscriptions",
        "organizations_url": "https://api.github.com/users/itornaza/orgs",
        "repos_url": "https://api.github.com/users/itornaza/repos",
        "events_url": "https://api.github.com/users/itornaza/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/itornaza/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29346#pullrequestreview-2304920988",
      "submitted_at": "2024-09-14T17:48:22Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29346"
    },
    {
      "event": "review_requested",
      "id": 14269302299,
      "node_id": "RRE_lADOABII5859hNA7zwAAAANShEYb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14269302299",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-16T09:04:58Z",
      "requested_reviewer": {
        "login": "Shourya742",
        "id": 84662239,
        "node_id": "MDQ6VXNlcjg0NjYyMjM5",
        "avatar_url": "https://avatars.githubusercontent.com/u/84662239?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Shourya742",
        "html_url": "https://github.com/Shourya742",
        "followers_url": "https://api.github.com/users/Shourya742/followers",
        "following_url": "https://api.github.com/users/Shourya742/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Shourya742/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Shourya742/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Shourya742/subscriptions",
        "organizations_url": "https://api.github.com/users/Shourya742/orgs",
        "repos_url": "https://api.github.com/users/Shourya742/repos",
        "events_url": "https://api.github.com/users/Shourya742/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Shourya742/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "commented",
      "id": 2361124220,
      "node_id": "IC_kwDOABII586Mu-V8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2361124220",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-19T14:18:36Z",
      "updated_at": "2024-09-19T14:37:01Z",
      "author_association": "MEMBER",
      "body": "Added a CMake build flag `-DWITH_SV2` that's `OFF` by default (`ON` for CI).\r\nAlso rebased and addressed comments.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29346#issuecomment-2361124220",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29346"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14325119032,
      "node_id": "HRFPE_lADOABII5859hNA7zwAAAANV1_g4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14325119032",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-19T14:18:36Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14325431786,
      "node_id": "HRFPE_lADOABII5859hNA7zwAAAANV3L3q",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14325431786",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-19T14:36:47Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14342647531,
      "node_id": "HRFPE_lADOABII5859hNA7zwAAAANW427r",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14342647531",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-20T16:18:39Z"
    },
    {
      "event": "commented",
      "id": 2364109880,
      "node_id": "IC_kwDOABII586M6XQ4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2364109880",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-20T16:36:21Z",
      "updated_at": "2024-09-20T16:36:21Z",
      "author_association": "MEMBER",
      "body": "The macOS 14 native failure is spurious, see #30922.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29346#issuecomment-2364109880",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29346"
    },
    {
      "event": "labeled",
      "id": 14462373854,
      "node_id": "LE_lADOABII5859hNA7zwAAAANeBk_e",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14462373854",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-30T21:09:14Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGI0YTg0YWJkYTk1MDE0ZTI4YzFhOTdjY2NhM2FjMDllYTIyYjkzM2E",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b4a84abda95014e28c1a97ccca3ac09ea22b933a",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/b4a84abda95014e28c1a97ccca3ac09ea22b933a",
      "tree": {
        "sha": "d37dce1cb5c344716c693c67fdc13c28a76cfbef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d37dce1cb5c344716c693c67fdc13c28a76cfbef"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree d37dce1cb5c344716c693c67fdc13c28a76cfbef\nparent 4be785b3e33510bc5dc8fc40906fffd53de2b64b\nauthor Sjors Provoost <sjors@sprovoost.nl> 1701349128 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1728036576 +0200\n\nAdd sv2 log category for Stratum v2\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAmb/vuAACgkQV/+b28ww\nEAmKIhAAkeu7lsWaeQy0ztmiqYlvyXEFMs5AZ7htt1n+JzHnQOm4CGrUdSv6IEDT\nR9QtTCPfh5kjXZkaeqdTn01ZprESklkSI75yt7KxiPoY7D6Y2OuV3+CjpbkgRyTF\nHwoPafTxAcYMI/nTw8xqF+XuqMmMUt23OFRm5VAinurRPUjjx9+ittZIKOx+UWFi\nindEHqw5X6XjUx8eE14Jh5UPU7JbKrK5HNgbtBG897EMElEA3uWGzndAPkyBAnsU\nGKtzCvdETCuFFfespqb/8ArPFIdgM4f92CjpFKoPsrvOWibFab44DkLhZgT2TSW8\ntWb84KAwRwXig8lkDuhF8MW3opXxP1XVuVqF4T5vCkUVDeVG5TkoaEiEO5HgvMNx\niOc7/USNnns6PDv6JkA1HXNcOP9D+zPAO4nVpudI4xa2m1fq+TG6EPOBbmDlpVii\nExylyAetnbo1OHn4PFO2Fll6Tvn3oFl87MtRkhOQHgWJIDavZnMh5nzruXyICpKV\n26ta9p2C5uNrUaZ3TtfcVGRnh9QUfmJF1DRVKGU5wyf8xCzYiSTdJ/pf05cz/dv3\n0iCeszJI2w/1a14zu9WHA1QqaOIWQyiM40Rin9UavVoSzxJ29VwueBdKuNotyAdd\n4hCYIEJBktBG1U4rsBXVD2dz3kLXT8U2dMPtOD3RLMVi9kVjyiY=\n=SJAJ\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4be785b3e33510bc5dc8fc40906fffd53de2b64b",
          "sha": "4be785b3e33510bc5dc8fc40906fffd53de2b64b",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/4be785b3e33510bc5dc8fc40906fffd53de2b64b"
        }
      ],
      "message": "Add sv2 log category for Stratum v2",
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2024-10-04T10:09:36Z"
      },
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2023-11-30T12:58:48Z"
      },
      "sha": "b4a84abda95014e28c1a97ccca3ac09ea22b933a"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGQwOGEyZWJmZDA3MDc5NWYxYzQ5NWQ3ZDNkNWU0NTZjOTYwNmY1ZjM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d08a2ebfd070795f1c495d7d3d5e456c9606f5f3",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/d08a2ebfd070795f1c495d7d3d5e456c9606f5f3",
      "tree": {
        "sha": "b1f3086d72f564fcac1e1b9c4d283fe8d29ef72c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b1f3086d72f564fcac1e1b9c4d283fe8d29ef72c"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree b1f3086d72f564fcac1e1b9c4d283fe8d29ef72c\nparent b4a84abda95014e28c1a97ccca3ac09ea22b933a\nauthor Sjors Provoost <sjors@sprovoost.nl> 1726218343 +0200\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1728036576 +0200\n\nbuild: libbitcoin_sv2 scaffold\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAmb/vuAACgkQV/+b28ww\nEAlyKhAAkl/H16RAb+NI4SzC6KyDNJ7s/GxNSQrXLjPUzKM+vo3dnRQ9wLzJdIeJ\n4GUX3X7wiGFbnJETQ8ZpdViJ6znFDT4GqUQmc/i41+pTbS75GQ4S+YA6cGHGAWza\ntVPdNyXhzZHeSUuWhmTWu8dc9TesY0I/1s4tWctADRHDrIiBOpJmakhfN6KFGk06\nIXtGOGToClk2602n7uwEQD24NH6m9X58w1inHfZ68JIM94ok4v10vCaETHhpVqVz\nItHRW+pAbcVlgWzabXf39bZmcckWGvH2dqTGHMVPuuDC8czGDbrofoUYfxFuuwSZ\nDVSUmWSB764iu1e0P+dkWhhTS2PHlPUl8hbGgI5KO8t+EG+fAZx86nVVU0873k0K\nylwmzfuO010kR1AngZTnODIPSY0w/V4WZ8oFqBJq1OtJzF/iRuwN6vIpc1FcPdOS\nj43wRADrSkcIHQTVnh6vIMvgL2sMuqvrbExfnzs6YKdAb0pfRpkRR2LayZybYzye\nmxbNKojWREG/78HQuDCANC1RoUoNS0s/e9zxqkd8FdA9Md/EQ0K5qXH56vh50lls\ntbGY6qexUr+VFVCCiC92E1IQaeKc6TqWEwTnQCUf+EHMxaTssgtpO91OQY0aIb39\n9MYY6sBmY8hreYpvPi51f1vrq8uSA8hl0Y6mNDwRsT/6F4RDS0Y=\n=cZEl\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b4a84abda95014e28c1a97ccca3ac09ea22b933a",
          "sha": "b4a84abda95014e28c1a97ccca3ac09ea22b933a",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/b4a84abda95014e28c1a97ccca3ac09ea22b933a"
        }
      ],
      "message": "build: libbitcoin_sv2 scaffold",
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2024-10-04T10:09:36Z"
      },
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2024-09-13T09:05:43Z"
      },
      "sha": "d08a2ebfd070795f1c495d7d3d5e456c9606f5f3"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDVmMzY5NjJjZmMyMzhmYjIwY2Q4MjgxYWFjZDUyZDVhZjM2OTY2OTI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5f36962cfc238fb20cd8281aacd52d5af3696692",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/5f36962cfc238fb20cd8281aacd52d5af3696692",
      "tree": {
        "sha": "ae982a05bc7129d06197030e138a93516bdf819e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ae982a05bc7129d06197030e138a93516bdf819e"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree ae982a05bc7129d06197030e138a93516bdf819e\nparent d08a2ebfd070795f1c495d7d3d5e456c9606f5f3\nauthor Sjors Provoost <sjors@sprovoost.nl> 1726756572 +0200\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1728038869 +0200\n\nci: always build WITH_SV2=ON\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAmb/x9YACgkQV/+b28ww\nEAklqBAAn/TxLcwO5/5xPU5SNyPGkt7osGtZ898oVjNBoZCK+yQ02h09y0iyfuLK\nONDOBGg6/lVhVdtonfg3tnEuDeGunbpYuMe39+sIwNl5QRBBQS4tqpaYo0FDTJvA\nvzlMtV7zsupi17Ay1pMlt4PMkdvu6bLlF+vjT1G/BsNWpoHVldKcFuDAY1UX6OVU\nkuR13PhfQwWnSzQveUkC6YTuiAhgSl1DkDmWpUEDN/1HIFEbYMRfqP2+CBORaAjP\nZX0ZiuSsnjEjXO3ksgXAnvlJOvNugKFPaXN9LAe+9cuZc+Fyw10GPyg3SjGDFz7A\nJ6J9TAvPSurKaQj4RrbXhklgq/Gig8N+eTevceADEQsq0VvDkpdkhNuDwa+UJK5Y\nnUJJER/RnVE8CZohOo6THZG3S872/lNp1yaHQ3rrZUvl03tva6+Ct3yWWrKYqpjS\nGk4PX6amhmcoq9TzjsWdz8CTGD+2armS1bSUZSgWwLKKQjw+vaCi2j/49C7wpTjc\nQzyeyhtKm5A0ts+kFdn/IitHCbq7W97Is8ZfiMjfC12vlnSz19L7eVfMl/f6zhYG\nSVZ/ZcWOv91tZDXYgHbNA6TJlbxkytBgV0/f6bCY3Hdgx+FxSQEw8K5KnvgTwBuB\nL9lo5OxlsAV/r/dy0BvtQnko1q5Vqvzr0izLXrFBEfDrRWkQV90=\n=CWDY\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d08a2ebfd070795f1c495d7d3d5e456c9606f5f3",
          "sha": "d08a2ebfd070795f1c495d7d3d5e456c9606f5f3",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/d08a2ebfd070795f1c495d7d3d5e456c9606f5f3"
        }
      ],
      "message": "ci: always build WITH_SV2=ON",
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2024-10-04T10:47:49Z"
      },
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2024-09-19T14:36:12Z"
      },
      "sha": "5f36962cfc238fb20cd8281aacd52d5af3696692"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGI1ODhmZjg1YWU4MzdlNDkyMjY5YzkyMmQwNjA5YmNkMzM4ZTQ3NTI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b588ff85ae837e492269c922d0609bcd338e4752",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/b588ff85ae837e492269c922d0609bcd338e4752",
      "tree": {
        "sha": "5e54b0b5daf08069dd06949f2f8ae7224c37fcf2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5e54b0b5daf08069dd06949f2f8ae7224c37fcf2"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 5e54b0b5daf08069dd06949f2f8ae7224c37fcf2\nparent 5f36962cfc238fb20cd8281aacd52d5af3696692\nauthor Sjors Provoost <sjors@sprovoost.nl> 1726755501 +0200\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1728038871 +0200\n\nAdd sv2 noise protocol\n\nCo-Authored-By: Christopher Coverdale <chris.coverdale24@gmail.com>\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAmb/x9cACgkQV/+b28ww\nEAnF6g/7BgDJdUyElI1SnisBr4kUHFqDlvFpX33vxarFDZQIXA047h/+WnI9IFRU\nhqezbLU+aryPBdKVSmsHy5NdmHsNc8+RtINcErc6vgLptlLRuCgNqb2aqbeB/Dub\nnqnIUNvWDpXH7zynkcIM0ZkeS8R9lfUffZ5IjWKFU86XV6U1C/iNsA/6bZhmiOqE\n48NHd9EPHiX5xTyMbH5LxmDANv06ZYRuAdavmaDzzm7YaqOmINC/+gxG6LATUqzK\n2LlPeYT9YrUYJSYgtm2h5/2xX1YSiQuywgU5AxmbeeGdITGv+kemKdPBVeWCxJo3\nHQHXTtU8VEt79fM8iSQ66PnP2IyeSXCcyv9mUSQDFrUPAaMVGfiXDD9eWUsD7RhG\nEa44cvIS6pU9wYPOwMCTJJlIAeJBVU5MHCzpg8STRh6/7aiD1xAc2tt53OVc7zVZ\n4rSTMfNpcVQkM4qtcTvWtwo3tGa9Og9AL0phjTxTSvL5pQ65V802SdmYNUSxNcEo\nsCYjeiwb9nAIOXBZzRopj86+qcftb8gek0LDT4XXcrDTZvNcV4j3a0fkCRpxmfou\n2DW+XCHwZXpUAPoznKabkBRJRDwAA3DiFBv2PkM8REJ4AdtTKx0LDKMdd4wFsmzZ\n9De/BG5KdqOGkBWFsCICodlZT9z4naAB9pNzSWnCfwuzUGnTV3c=\n=NQh3\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5f36962cfc238fb20cd8281aacd52d5af3696692",
          "sha": "5f36962cfc238fb20cd8281aacd52d5af3696692",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/5f36962cfc238fb20cd8281aacd52d5af3696692"
        }
      ],
      "message": "Add sv2 noise protocol\n\nCo-Authored-By: Christopher Coverdale <chris.coverdale24@gmail.com>",
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2024-10-04T10:47:51Z"
      },
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2024-09-19T14:18:21Z"
      },
      "sha": "b588ff85ae837e492269c922d0609bcd338e4752"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14517493039,
      "node_id": "HRFPE_lADOABII5859hNA7zwAAAANhT10v",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14517493039",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-04T11:02:18Z"
    },
    {
      "event": "unlabeled",
      "id": 14517556456,
      "node_id": "UNLE_lADOABII5859hNA7zwAAAANhUFTo",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14517556456",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-04T11:08:05Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "referenced",
      "id": 14523312442,
      "node_id": "REFE_lADOABII5859hNA7zwAAAANhqCk6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14523312442",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "ff4dbc3de17948a487d8384372693c0663714438",
      "commit_url": "https://api.github.com/repos/Sjors/bitcoin/commits/ff4dbc3de17948a487d8384372693c0663714438",
      "created_at": "2024-10-04T18:33:56Z"
    },
    {
      "event": "referenced",
      "id": 14527750102,
      "node_id": "REFE_lADOABII5859hNA7zwAAAANh69_W",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14527750102",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "54b2da1b9a977a325a299c6fa7bdeba76452f2a8",
      "commit_url": "https://api.github.com/repos/Sjors/bitcoin/commits/54b2da1b9a977a325a299c6fa7bdeba76452f2a8",
      "created_at": "2024-10-05T12:32:56Z"
    },
    {
      "event": "labeled",
      "id": 14559107698,
      "node_id": "LE_lADOABII5859hNA7zwAAAANjylpy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14559107698",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-08T15:40:08Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2400197422,
      "node_id": "IC_kwDOABII586PEBsu",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2400197422",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-08T15:40:09Z",
      "updated_at": "2024-10-08T15:40:09Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--cf906140f33d8803c4a75a2196329ecb-->\n🐙 This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29346#issuecomment-2400197422",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29346"
    },
    {
      "event": "reviewed",
      "id": 2054783141,
      "node_id": "PRR_kwDOABII5856eYCl",
      "url": null,
      "actor": null,
      "commit_id": "b588ff85ae837e492269c922d0609bcd338e4752",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "ACK b588ff8. went through the noise protocol spec. also sharing a [pictorial represantion of the NX handshake](https://github.com/stratospher/blogosphere/blob/main/noise.pdf) if it's useful to other reviewers.",
      "user": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29346#pullrequestreview-2054783141",
      "submitted_at": "2024-10-09T06:39:51Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29346"
    },
    {
      "event": "review_requested",
      "id": 14566797584,
      "node_id": "RRE_lADOABII5859hNA7zwAAAANkP7EQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14566797584",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-09T06:39:55Z",
      "requested_reviewer": {
        "login": "itornaza",
        "id": 11520757,
        "node_id": "MDQ6VXNlcjExNTIwNzU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/11520757?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/itornaza",
        "html_url": "https://github.com/itornaza",
        "followers_url": "https://api.github.com/users/itornaza/followers",
        "following_url": "https://api.github.com/users/itornaza/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/itornaza/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/itornaza/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/itornaza/subscriptions",
        "organizations_url": "https://api.github.com/users/itornaza/orgs",
        "repos_url": "https://api.github.com/users/itornaza/repos",
        "events_url": "https://api.github.com/users/itornaza/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/itornaza/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "commented",
      "id": 2404642324,
      "node_id": "IC_kwDOABII586PU-4U",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2404642324",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-10T09:59:55Z",
      "updated_at": "2024-10-10T09:59:55Z",
      "author_association": "MEMBER",
      "body": "> It's ready for review, but not for merge:\r\n\r\n> > The parent PR may need more conceptual review\r\n\r\nThis should probably be a draft then. Re more conceptual review, I think it's been made (fairly?) clear by multiple contributors (and from the progress of the sidecar PRs from #29432) which approach is favoured, and it doesn't seem to be the one involving this PR, and implementing all the SV2 logic inside Core.",
      "user": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29346#issuecomment-2404642324",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29346"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1472497733",
      "pull_request_review_id": 1853197747,
      "id": 1472497733,
      "node_id": "PRRC_kwDOABII585XxIhF",
      "diff_hunk": "@@ -0,0 +1,283 @@\n+// Copyright (c) 2023-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_COMMON_SV2_NOISE_H\n+#define BITCOIN_COMMON_SV2_NOISE_H\n+\n+#include <compat/compat.h>\n+#include <key.h>\n+#include <pubkey.h>\n+#include <random.h>\n+#include <streams.h>\n+#include <uint256.h>\n+\n+/** The Noise Protocol Framework\n+ *  https://noiseprotocol.org/noise.html\n+ *  Revision 38, 2018-07-11\n+ *\n+ *  Stratum v2 handshake and cipher specification:\n+ *  https://github.com/stratum-mining/sv2-spec/blob/main/04-Protocol-Security.md\n+ */\n+\n+static constexpr size_t POLY1305_TAGLEN{16};\n+static constexpr size_t KEY_SIZE = 32;\n+static constexpr size_t ELLSWIFT_KEY_SIZE = 64;\n+static constexpr size_t ECDH_OUTPUT_SIZE = 32;\n+/** Section 3: All Noise messages are less than or equal to 65535 bytes in length. */\n+static constexpr size_t NOISE_MAX_CHUNK_SIZE = 65535;\n+/** Sv2 spec 4.5.2 */\n+static constexpr size_t SIGNATURE_NOISE_MESSAGE_SIZE = 2 + 4 + 4 + 64;\n+static constexpr size_t HANDSHAKE_STEP2_SIZE = ELLSWIFT_KEY_SIZE + ELLSWIFT_KEY_SIZE +\n+                                               POLY1305_TAGLEN + SIGNATURE_NOISE_MESSAGE_SIZE + POLY1305_TAGLEN;\n+static constexpr size_t SV2_CERTIFICATE_GRACE_PERIOD = 3600;\n+\n+// Sha256 hash of the ascii encoding - \"Noise_NX_EllSwiftXonly_ChaChaPoly_SHA256\".\n+// This is the first step required when setting up the chaining key.\n+const std::vector<uint8_t> PROTOCOL_NAME_HASH = {\n+    27, 97, 156, 90, 248, 120, 254, 68, 34, 119, 45, 129, 209, 41, 152, 82,\n+    26, 137, 97, 115, 62, 44, 177, 60, 145, 24, 250, 214, 68, 188, 1, 128};\n+\n+// The double hash of protocol name \"Noise_NX_EllSwiftXonly_ChaChaPoly_SHA256\".\n+static std::vector<uint8_t> PROTOCOL_NAME_DOUBLE_HASH = {60, 102, 112, 143, 69, 248, 185, 34, 53, 193, 3, 46, 250, 104, 70, 171,\n+                                                         139, 103, 55, 191, 199, 9, 77, 179, 99, 170, 7, 240, 219, 36, 226, 71};\n+\n+/** Simple certificate for the static key signed by the authority key.\n+ * See 4.5.2 and 4.5.3 of the Stratum v2 spec.\n+ */\n+class Sv2SignatureNoiseMessage\n+{\n+private:\n+    uint16_t m_version = 0;\n+    uint32_t m_valid_from = 0;\n+    uint32_t m_valid_to = 0;\n+    std::vector<unsigned char> m_sig;\n+\n+    uint256 GetHash();\n+    void SignSchnorr(const CKey& authority_key, Span<unsigned char> sig);\n+\n+public:\n+    Sv2SignatureNoiseMessage() = default;\n+    Sv2SignatureNoiseMessage(uint16_t version, uint32_t valid_from, uint32_t valid_to, const XOnlyPubKey& static_key, const CKey& authority_key);\n+\n+    /* The certificate serializes pubkeys in x-only format, not EllSwift. */\n+    XOnlyPubKey m_static_key = {};\n+\n+    [[nodiscard]] bool Validate(XOnlyPubKey authority_key);\n+\n+    template <typename Stream>\n+    // The static_key is signed for, but not serialized.\n+    void Serialize(Stream& s) const\n+    {\n+        s << m_version\n+          << m_valid_from\n+          << m_valid_to;\n+\n+        s.write(MakeByteSpan(m_sig));",
      "path": "src/common/sv2_noise.h",
      "position": null,
      "original_position": 76,
      "commit_id": "b588ff85ae837e492269c922d0609bcd338e4752",
      "original_commit_id": "a392a4c2f3be7d2751502adc887802a24f0f6898",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "You can't serialize a non-fixed-size vector as a span. This will lead to errors when deserializing. For example, a default constructed empty vector, serialized, can not be serialized into a vector which has been resized to 64 bytes.",
      "created_at": "2024-01-31T08:57:57Z",
      "updated_at": "2024-01-31T08:57:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29346#discussion_r1472497733",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1472497733"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29346"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 66,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1474470023",
      "pull_request_review_id": 1856491032,
      "id": 1474470023,
      "node_id": "PRRC_kwDOABII585X4qCH",
      "diff_hunk": "@@ -0,0 +1,283 @@\n+// Copyright (c) 2023-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_COMMON_SV2_NOISE_H\n+#define BITCOIN_COMMON_SV2_NOISE_H\n+\n+#include <compat/compat.h>\n+#include <key.h>\n+#include <pubkey.h>\n+#include <random.h>\n+#include <streams.h>\n+#include <uint256.h>\n+\n+/** The Noise Protocol Framework\n+ *  https://noiseprotocol.org/noise.html\n+ *  Revision 38, 2018-07-11\n+ *\n+ *  Stratum v2 handshake and cipher specification:\n+ *  https://github.com/stratum-mining/sv2-spec/blob/main/04-Protocol-Security.md\n+ */\n+\n+static constexpr size_t POLY1305_TAGLEN{16};\n+static constexpr size_t KEY_SIZE = 32;\n+static constexpr size_t ELLSWIFT_KEY_SIZE = 64;\n+static constexpr size_t ECDH_OUTPUT_SIZE = 32;\n+/** Section 3: All Noise messages are less than or equal to 65535 bytes in length. */\n+static constexpr size_t NOISE_MAX_CHUNK_SIZE = 65535;\n+/** Sv2 spec 4.5.2 */\n+static constexpr size_t SIGNATURE_NOISE_MESSAGE_SIZE = 2 + 4 + 4 + 64;\n+static constexpr size_t HANDSHAKE_STEP2_SIZE = ELLSWIFT_KEY_SIZE + ELLSWIFT_KEY_SIZE +\n+                                               POLY1305_TAGLEN + SIGNATURE_NOISE_MESSAGE_SIZE + POLY1305_TAGLEN;\n+static constexpr size_t SV2_CERTIFICATE_GRACE_PERIOD = 3600;\n+\n+// Sha256 hash of the ascii encoding - \"Noise_NX_EllSwiftXonly_ChaChaPoly_SHA256\".\n+// This is the first step required when setting up the chaining key.\n+const std::vector<uint8_t> PROTOCOL_NAME_HASH = {\n+    27, 97, 156, 90, 248, 120, 254, 68, 34, 119, 45, 129, 209, 41, 152, 82,\n+    26, 137, 97, 115, 62, 44, 177, 60, 145, 24, 250, 214, 68, 188, 1, 128};\n+\n+// The double hash of protocol name \"Noise_NX_EllSwiftXonly_ChaChaPoly_SHA256\".\n+static std::vector<uint8_t> PROTOCOL_NAME_DOUBLE_HASH = {60, 102, 112, 143, 69, 248, 185, 34, 53, 193, 3, 46, 250, 104, 70, 171,\n+                                                         139, 103, 55, 191, 199, 9, 77, 179, 99, 170, 7, 240, 219, 36, 226, 71};\n+\n+/** Simple certificate for the static key signed by the authority key.\n+ * See 4.5.2 and 4.5.3 of the Stratum v2 spec.\n+ */\n+class Sv2SignatureNoiseMessage\n+{\n+private:\n+    uint16_t m_version = 0;\n+    uint32_t m_valid_from = 0;\n+    uint32_t m_valid_to = 0;\n+    std::vector<unsigned char> m_sig;\n+\n+    uint256 GetHash();\n+    void SignSchnorr(const CKey& authority_key, Span<unsigned char> sig);\n+\n+public:\n+    Sv2SignatureNoiseMessage() = default;\n+    Sv2SignatureNoiseMessage(uint16_t version, uint32_t valid_from, uint32_t valid_to, const XOnlyPubKey& static_key, const CKey& authority_key);\n+\n+    /* The certificate serializes pubkeys in x-only format, not EllSwift. */\n+    XOnlyPubKey m_static_key = {};\n+\n+    [[nodiscard]] bool Validate(XOnlyPubKey authority_key);\n+\n+    template <typename Stream>\n+    // The static_key is signed for, but not serialized.\n+    void Serialize(Stream& s) const\n+    {\n+        s << m_version\n+          << m_valid_from\n+          << m_valid_to;\n+\n+        s.write(MakeByteSpan(m_sig));",
      "path": "src/common/sv2_noise.h",
      "position": null,
      "original_position": 76,
      "commit_id": "b588ff85ae837e492269c922d0609bcd338e4752",
      "original_commit_id": "a392a4c2f3be7d2751502adc887802a24f0f6898",
      "in_reply_to_id": 1472497733,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Any suggested reading to wrap my head around this serialisation / bytes / span stuff?",
      "created_at": "2024-02-01T13:28:25Z",
      "updated_at": "2024-02-01T13:28:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29346#discussion_r1474470023",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1474470023"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29346"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 66,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1474513906",
      "pull_request_review_id": 1856557365,
      "id": 1474513906,
      "node_id": "PRRC_kwDOABII585X40vy",
      "diff_hunk": "@@ -0,0 +1,283 @@\n+// Copyright (c) 2023-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_COMMON_SV2_NOISE_H\n+#define BITCOIN_COMMON_SV2_NOISE_H\n+\n+#include <compat/compat.h>\n+#include <key.h>\n+#include <pubkey.h>\n+#include <random.h>\n+#include <streams.h>\n+#include <uint256.h>\n+\n+/** The Noise Protocol Framework\n+ *  https://noiseprotocol.org/noise.html\n+ *  Revision 38, 2018-07-11\n+ *\n+ *  Stratum v2 handshake and cipher specification:\n+ *  https://github.com/stratum-mining/sv2-spec/blob/main/04-Protocol-Security.md\n+ */\n+\n+static constexpr size_t POLY1305_TAGLEN{16};\n+static constexpr size_t KEY_SIZE = 32;\n+static constexpr size_t ELLSWIFT_KEY_SIZE = 64;\n+static constexpr size_t ECDH_OUTPUT_SIZE = 32;\n+/** Section 3: All Noise messages are less than or equal to 65535 bytes in length. */\n+static constexpr size_t NOISE_MAX_CHUNK_SIZE = 65535;\n+/** Sv2 spec 4.5.2 */\n+static constexpr size_t SIGNATURE_NOISE_MESSAGE_SIZE = 2 + 4 + 4 + 64;\n+static constexpr size_t HANDSHAKE_STEP2_SIZE = ELLSWIFT_KEY_SIZE + ELLSWIFT_KEY_SIZE +\n+                                               POLY1305_TAGLEN + SIGNATURE_NOISE_MESSAGE_SIZE + POLY1305_TAGLEN;\n+static constexpr size_t SV2_CERTIFICATE_GRACE_PERIOD = 3600;\n+\n+// Sha256 hash of the ascii encoding - \"Noise_NX_EllSwiftXonly_ChaChaPoly_SHA256\".\n+// This is the first step required when setting up the chaining key.\n+const std::vector<uint8_t> PROTOCOL_NAME_HASH = {\n+    27, 97, 156, 90, 248, 120, 254, 68, 34, 119, 45, 129, 209, 41, 152, 82,\n+    26, 137, 97, 115, 62, 44, 177, 60, 145, 24, 250, 214, 68, 188, 1, 128};\n+\n+// The double hash of protocol name \"Noise_NX_EllSwiftXonly_ChaChaPoly_SHA256\".\n+static std::vector<uint8_t> PROTOCOL_NAME_DOUBLE_HASH = {60, 102, 112, 143, 69, 248, 185, 34, 53, 193, 3, 46, 250, 104, 70, 171,\n+                                                         139, 103, 55, 191, 199, 9, 77, 179, 99, 170, 7, 240, 219, 36, 226, 71};\n+\n+/** Simple certificate for the static key signed by the authority key.\n+ * See 4.5.2 and 4.5.3 of the Stratum v2 spec.\n+ */\n+class Sv2SignatureNoiseMessage\n+{\n+private:\n+    uint16_t m_version = 0;\n+    uint32_t m_valid_from = 0;\n+    uint32_t m_valid_to = 0;\n+    std::vector<unsigned char> m_sig;\n+\n+    uint256 GetHash();\n+    void SignSchnorr(const CKey& authority_key, Span<unsigned char> sig);\n+\n+public:\n+    Sv2SignatureNoiseMessage() = default;\n+    Sv2SignatureNoiseMessage(uint16_t version, uint32_t valid_from, uint32_t valid_to, const XOnlyPubKey& static_key, const CKey& authority_key);\n+\n+    /* The certificate serializes pubkeys in x-only format, not EllSwift. */\n+    XOnlyPubKey m_static_key = {};\n+\n+    [[nodiscard]] bool Validate(XOnlyPubKey authority_key);\n+\n+    template <typename Stream>\n+    // The static_key is signed for, but not serialized.\n+    void Serialize(Stream& s) const\n+    {\n+        s << m_version\n+          << m_valid_from\n+          << m_valid_to;\n+\n+        s.write(MakeByteSpan(m_sig));",
      "path": "src/common/sv2_noise.h",
      "position": null,
      "original_position": 76,
      "commit_id": "b588ff85ae837e492269c922d0609bcd338e4752",
      "original_commit_id": "a392a4c2f3be7d2751502adc887802a24f0f6898",
      "in_reply_to_id": 1472497733,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "A `std::byte` is serialized no different than an `uint8_t`. (https://en.cppreference.com/w/cpp/types/byte)\r\n\r\nA span holds a pointer and a size. It points to memory outside of itself. For example, a string_view (special kind of span) creates a view on a pre-existing string (string literal or std::string).\r\n\r\nWhen serializing a span in Bitcoin Core, the size is not written. Thus, the size of the pointed-to memory must be exactly equal every time at runtime. How you achieve that the memory is always the same length, or whether a span is the right choice, depends on the context.",
      "created_at": "2024-02-01T13:55:18Z",
      "updated_at": "2024-02-01T13:55:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29346#discussion_r1474513906",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1474513906"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29346"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 66,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1474518715",
      "pull_request_review_id": 1856565092,
      "id": 1474518715,
      "node_id": "PRRC_kwDOABII585X4167",
      "diff_hunk": "@@ -0,0 +1,283 @@\n+// Copyright (c) 2023-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_COMMON_SV2_NOISE_H\n+#define BITCOIN_COMMON_SV2_NOISE_H\n+\n+#include <compat/compat.h>\n+#include <key.h>\n+#include <pubkey.h>\n+#include <random.h>\n+#include <streams.h>\n+#include <uint256.h>\n+\n+/** The Noise Protocol Framework\n+ *  https://noiseprotocol.org/noise.html\n+ *  Revision 38, 2018-07-11\n+ *\n+ *  Stratum v2 handshake and cipher specification:\n+ *  https://github.com/stratum-mining/sv2-spec/blob/main/04-Protocol-Security.md\n+ */\n+\n+static constexpr size_t POLY1305_TAGLEN{16};\n+static constexpr size_t KEY_SIZE = 32;\n+static constexpr size_t ELLSWIFT_KEY_SIZE = 64;\n+static constexpr size_t ECDH_OUTPUT_SIZE = 32;\n+/** Section 3: All Noise messages are less than or equal to 65535 bytes in length. */\n+static constexpr size_t NOISE_MAX_CHUNK_SIZE = 65535;\n+/** Sv2 spec 4.5.2 */\n+static constexpr size_t SIGNATURE_NOISE_MESSAGE_SIZE = 2 + 4 + 4 + 64;\n+static constexpr size_t HANDSHAKE_STEP2_SIZE = ELLSWIFT_KEY_SIZE + ELLSWIFT_KEY_SIZE +\n+                                               POLY1305_TAGLEN + SIGNATURE_NOISE_MESSAGE_SIZE + POLY1305_TAGLEN;\n+static constexpr size_t SV2_CERTIFICATE_GRACE_PERIOD = 3600;\n+\n+// Sha256 hash of the ascii encoding - \"Noise_NX_EllSwiftXonly_ChaChaPoly_SHA256\".\n+// This is the first step required when setting up the chaining key.\n+const std::vector<uint8_t> PROTOCOL_NAME_HASH = {\n+    27, 97, 156, 90, 248, 120, 254, 68, 34, 119, 45, 129, 209, 41, 152, 82,\n+    26, 137, 97, 115, 62, 44, 177, 60, 145, 24, 250, 214, 68, 188, 1, 128};\n+\n+// The double hash of protocol name \"Noise_NX_EllSwiftXonly_ChaChaPoly_SHA256\".\n+static std::vector<uint8_t> PROTOCOL_NAME_DOUBLE_HASH = {60, 102, 112, 143, 69, 248, 185, 34, 53, 193, 3, 46, 250, 104, 70, 171,\n+                                                         139, 103, 55, 191, 199, 9, 77, 179, 99, 170, 7, 240, 219, 36, 226, 71};\n+\n+/** Simple certificate for the static key signed by the authority key.\n+ * See 4.5.2 and 4.5.3 of the Stratum v2 spec.\n+ */\n+class Sv2SignatureNoiseMessage\n+{\n+private:\n+    uint16_t m_version = 0;\n+    uint32_t m_valid_from = 0;\n+    uint32_t m_valid_to = 0;\n+    std::vector<unsigned char> m_sig;\n+\n+    uint256 GetHash();\n+    void SignSchnorr(const CKey& authority_key, Span<unsigned char> sig);\n+\n+public:\n+    Sv2SignatureNoiseMessage() = default;\n+    Sv2SignatureNoiseMessage(uint16_t version, uint32_t valid_from, uint32_t valid_to, const XOnlyPubKey& static_key, const CKey& authority_key);\n+\n+    /* The certificate serializes pubkeys in x-only format, not EllSwift. */\n+    XOnlyPubKey m_static_key = {};\n+\n+    [[nodiscard]] bool Validate(XOnlyPubKey authority_key);\n+\n+    template <typename Stream>\n+    // The static_key is signed for, but not serialized.\n+    void Serialize(Stream& s) const\n+    {\n+        s << m_version\n+          << m_valid_from\n+          << m_valid_to;\n+\n+        s.write(MakeByteSpan(m_sig));",
      "path": "src/common/sv2_noise.h",
      "position": null,
      "original_position": 76,
      "commit_id": "b588ff85ae837e492269c922d0609bcd338e4752",
      "original_commit_id": "a392a4c2f3be7d2751502adc887802a24f0f6898",
      "in_reply_to_id": 1472497733,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Possible solutions can be:\r\n\r\n* Remove the `Sv2SignatureNoiseMessage` default constructor and/or check that the size of m_sig is properly initialized\r\n* Use a `std::array` instead\r\n* Serialize as `std::vector` instead\r\n\r\n",
      "created_at": "2024-02-01T13:58:09Z",
      "updated_at": "2024-02-01T13:58:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29346#discussion_r1474518715",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1474518715"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29346"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 66,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1474609984",
      "pull_request_review_id": 1856710697,
      "id": 1474609984,
      "node_id": "PRRC_kwDOABII585X5MNA",
      "diff_hunk": "@@ -0,0 +1,283 @@\n+// Copyright (c) 2023-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_COMMON_SV2_NOISE_H\n+#define BITCOIN_COMMON_SV2_NOISE_H\n+\n+#include <compat/compat.h>\n+#include <key.h>\n+#include <pubkey.h>\n+#include <random.h>\n+#include <streams.h>\n+#include <uint256.h>\n+\n+/** The Noise Protocol Framework\n+ *  https://noiseprotocol.org/noise.html\n+ *  Revision 38, 2018-07-11\n+ *\n+ *  Stratum v2 handshake and cipher specification:\n+ *  https://github.com/stratum-mining/sv2-spec/blob/main/04-Protocol-Security.md\n+ */\n+\n+static constexpr size_t POLY1305_TAGLEN{16};\n+static constexpr size_t KEY_SIZE = 32;\n+static constexpr size_t ELLSWIFT_KEY_SIZE = 64;\n+static constexpr size_t ECDH_OUTPUT_SIZE = 32;\n+/** Section 3: All Noise messages are less than or equal to 65535 bytes in length. */\n+static constexpr size_t NOISE_MAX_CHUNK_SIZE = 65535;\n+/** Sv2 spec 4.5.2 */\n+static constexpr size_t SIGNATURE_NOISE_MESSAGE_SIZE = 2 + 4 + 4 + 64;\n+static constexpr size_t HANDSHAKE_STEP2_SIZE = ELLSWIFT_KEY_SIZE + ELLSWIFT_KEY_SIZE +\n+                                               POLY1305_TAGLEN + SIGNATURE_NOISE_MESSAGE_SIZE + POLY1305_TAGLEN;\n+static constexpr size_t SV2_CERTIFICATE_GRACE_PERIOD = 3600;\n+\n+// Sha256 hash of the ascii encoding - \"Noise_NX_EllSwiftXonly_ChaChaPoly_SHA256\".\n+// This is the first step required when setting up the chaining key.\n+const std::vector<uint8_t> PROTOCOL_NAME_HASH = {\n+    27, 97, 156, 90, 248, 120, 254, 68, 34, 119, 45, 129, 209, 41, 152, 82,\n+    26, 137, 97, 115, 62, 44, 177, 60, 145, 24, 250, 214, 68, 188, 1, 128};\n+\n+// The double hash of protocol name \"Noise_NX_EllSwiftXonly_ChaChaPoly_SHA256\".\n+static std::vector<uint8_t> PROTOCOL_NAME_DOUBLE_HASH = {60, 102, 112, 143, 69, 248, 185, 34, 53, 193, 3, 46, 250, 104, 70, 171,\n+                                                         139, 103, 55, 191, 199, 9, 77, 179, 99, 170, 7, 240, 219, 36, 226, 71};\n+\n+/** Simple certificate for the static key signed by the authority key.\n+ * See 4.5.2 and 4.5.3 of the Stratum v2 spec.\n+ */\n+class Sv2SignatureNoiseMessage\n+{\n+private:\n+    uint16_t m_version = 0;\n+    uint32_t m_valid_from = 0;\n+    uint32_t m_valid_to = 0;\n+    std::vector<unsigned char> m_sig;\n+\n+    uint256 GetHash();\n+    void SignSchnorr(const CKey& authority_key, Span<unsigned char> sig);\n+\n+public:\n+    Sv2SignatureNoiseMessage() = default;\n+    Sv2SignatureNoiseMessage(uint16_t version, uint32_t valid_from, uint32_t valid_to, const XOnlyPubKey& static_key, const CKey& authority_key);\n+\n+    /* The certificate serializes pubkeys in x-only format, not EllSwift. */\n+    XOnlyPubKey m_static_key = {};\n+\n+    [[nodiscard]] bool Validate(XOnlyPubKey authority_key);\n+\n+    template <typename Stream>\n+    // The static_key is signed for, but not serialized.\n+    void Serialize(Stream& s) const\n+    {\n+        s << m_version\n+          << m_valid_from\n+          << m_valid_to;\n+\n+        s.write(MakeByteSpan(m_sig));",
      "path": "src/common/sv2_noise.h",
      "position": null,
      "original_position": 76,
      "commit_id": "b588ff85ae837e492269c922d0609bcd338e4752",
      "original_commit_id": "a392a4c2f3be7d2751502adc887802a24f0f6898",
      "in_reply_to_id": 1472497733,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Since `m_sig` is always 64 bytes, I changed it to `std::array`.",
      "created_at": "2024-02-01T14:53:07Z",
      "updated_at": "2024-02-01T14:53:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29346#discussion_r1474609984",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1474609984"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29346"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 66,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1474641091",
      "pull_request_review_id": 1856764776,
      "id": 1474641091,
      "node_id": "PRRC_kwDOABII585X5TzD",
      "diff_hunk": "@@ -0,0 +1,283 @@\n+// Copyright (c) 2023-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_COMMON_SV2_NOISE_H\n+#define BITCOIN_COMMON_SV2_NOISE_H\n+\n+#include <compat/compat.h>\n+#include <key.h>\n+#include <pubkey.h>\n+#include <random.h>\n+#include <streams.h>\n+#include <uint256.h>\n+\n+/** The Noise Protocol Framework\n+ *  https://noiseprotocol.org/noise.html\n+ *  Revision 38, 2018-07-11\n+ *\n+ *  Stratum v2 handshake and cipher specification:\n+ *  https://github.com/stratum-mining/sv2-spec/blob/main/04-Protocol-Security.md\n+ */\n+\n+static constexpr size_t POLY1305_TAGLEN{16};\n+static constexpr size_t KEY_SIZE = 32;\n+static constexpr size_t ELLSWIFT_KEY_SIZE = 64;\n+static constexpr size_t ECDH_OUTPUT_SIZE = 32;\n+/** Section 3: All Noise messages are less than or equal to 65535 bytes in length. */\n+static constexpr size_t NOISE_MAX_CHUNK_SIZE = 65535;\n+/** Sv2 spec 4.5.2 */\n+static constexpr size_t SIGNATURE_NOISE_MESSAGE_SIZE = 2 + 4 + 4 + 64;\n+static constexpr size_t HANDSHAKE_STEP2_SIZE = ELLSWIFT_KEY_SIZE + ELLSWIFT_KEY_SIZE +\n+                                               POLY1305_TAGLEN + SIGNATURE_NOISE_MESSAGE_SIZE + POLY1305_TAGLEN;\n+static constexpr size_t SV2_CERTIFICATE_GRACE_PERIOD = 3600;\n+\n+// Sha256 hash of the ascii encoding - \"Noise_NX_EllSwiftXonly_ChaChaPoly_SHA256\".\n+// This is the first step required when setting up the chaining key.\n+const std::vector<uint8_t> PROTOCOL_NAME_HASH = {\n+    27, 97, 156, 90, 248, 120, 254, 68, 34, 119, 45, 129, 209, 41, 152, 82,\n+    26, 137, 97, 115, 62, 44, 177, 60, 145, 24, 250, 214, 68, 188, 1, 128};\n+\n+// The double hash of protocol name \"Noise_NX_EllSwiftXonly_ChaChaPoly_SHA256\".\n+static std::vector<uint8_t> PROTOCOL_NAME_DOUBLE_HASH = {60, 102, 112, 143, 69, 248, 185, 34, 53, 193, 3, 46, 250, 104, 70, 171,\n+                                                         139, 103, 55, 191, 199, 9, 77, 179, 99, 170, 7, 240, 219, 36, 226, 71};\n+\n+/** Simple certificate for the static key signed by the authority key.\n+ * See 4.5.2 and 4.5.3 of the Stratum v2 spec.\n+ */\n+class Sv2SignatureNoiseMessage\n+{\n+private:\n+    uint16_t m_version = 0;\n+    uint32_t m_valid_from = 0;\n+    uint32_t m_valid_to = 0;\n+    std::vector<unsigned char> m_sig;\n+\n+    uint256 GetHash();\n+    void SignSchnorr(const CKey& authority_key, Span<unsigned char> sig);\n+\n+public:\n+    Sv2SignatureNoiseMessage() = default;\n+    Sv2SignatureNoiseMessage(uint16_t version, uint32_t valid_from, uint32_t valid_to, const XOnlyPubKey& static_key, const CKey& authority_key);\n+\n+    /* The certificate serializes pubkeys in x-only format, not EllSwift. */\n+    XOnlyPubKey m_static_key = {};\n+\n+    [[nodiscard]] bool Validate(XOnlyPubKey authority_key);\n+\n+    template <typename Stream>\n+    // The static_key is signed for, but not serialized.\n+    void Serialize(Stream& s) const\n+    {\n+        s << m_version\n+          << m_valid_from\n+          << m_valid_to;\n+\n+        s.write(MakeByteSpan(m_sig));",
      "path": "src/common/sv2_noise.h",
      "position": null,
      "original_position": 76,
      "commit_id": "b588ff85ae837e492269c922d0609bcd338e4752",
      "original_commit_id": "a392a4c2f3be7d2751502adc887802a24f0f6898",
      "in_reply_to_id": 1472497733,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "You don't need a `Make*ByteSpan` when the underlying data is already bytes. Also, you don't need `Span` at all, when the object is an array. (arrays as well have their size not serialized)",
      "created_at": "2024-02-01T15:14:25Z",
      "updated_at": "2024-02-01T15:14:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29346#discussion_r1474641091",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1474641091"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29346"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 66,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1474705042",
      "pull_request_review_id": 1856871978,
      "id": 1474705042,
      "node_id": "PRRC_kwDOABII585X5jaS",
      "diff_hunk": "@@ -0,0 +1,283 @@\n+// Copyright (c) 2023-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_COMMON_SV2_NOISE_H\n+#define BITCOIN_COMMON_SV2_NOISE_H\n+\n+#include <compat/compat.h>\n+#include <key.h>\n+#include <pubkey.h>\n+#include <random.h>\n+#include <streams.h>\n+#include <uint256.h>\n+\n+/** The Noise Protocol Framework\n+ *  https://noiseprotocol.org/noise.html\n+ *  Revision 38, 2018-07-11\n+ *\n+ *  Stratum v2 handshake and cipher specification:\n+ *  https://github.com/stratum-mining/sv2-spec/blob/main/04-Protocol-Security.md\n+ */\n+\n+static constexpr size_t POLY1305_TAGLEN{16};\n+static constexpr size_t KEY_SIZE = 32;\n+static constexpr size_t ELLSWIFT_KEY_SIZE = 64;\n+static constexpr size_t ECDH_OUTPUT_SIZE = 32;\n+/** Section 3: All Noise messages are less than or equal to 65535 bytes in length. */\n+static constexpr size_t NOISE_MAX_CHUNK_SIZE = 65535;\n+/** Sv2 spec 4.5.2 */\n+static constexpr size_t SIGNATURE_NOISE_MESSAGE_SIZE = 2 + 4 + 4 + 64;\n+static constexpr size_t HANDSHAKE_STEP2_SIZE = ELLSWIFT_KEY_SIZE + ELLSWIFT_KEY_SIZE +\n+                                               POLY1305_TAGLEN + SIGNATURE_NOISE_MESSAGE_SIZE + POLY1305_TAGLEN;\n+static constexpr size_t SV2_CERTIFICATE_GRACE_PERIOD = 3600;\n+\n+// Sha256 hash of the ascii encoding - \"Noise_NX_EllSwiftXonly_ChaChaPoly_SHA256\".\n+// This is the first step required when setting up the chaining key.\n+const std::vector<uint8_t> PROTOCOL_NAME_HASH = {\n+    27, 97, 156, 90, 248, 120, 254, 68, 34, 119, 45, 129, 209, 41, 152, 82,\n+    26, 137, 97, 115, 62, 44, 177, 60, 145, 24, 250, 214, 68, 188, 1, 128};\n+\n+// The double hash of protocol name \"Noise_NX_EllSwiftXonly_ChaChaPoly_SHA256\".\n+static std::vector<uint8_t> PROTOCOL_NAME_DOUBLE_HASH = {60, 102, 112, 143, 69, 248, 185, 34, 53, 193, 3, 46, 250, 104, 70, 171,\n+                                                         139, 103, 55, 191, 199, 9, 77, 179, 99, 170, 7, 240, 219, 36, 226, 71};\n+\n+/** Simple certificate for the static key signed by the authority key.\n+ * See 4.5.2 and 4.5.3 of the Stratum v2 spec.\n+ */\n+class Sv2SignatureNoiseMessage\n+{\n+private:\n+    uint16_t m_version = 0;\n+    uint32_t m_valid_from = 0;\n+    uint32_t m_valid_to = 0;\n+    std::vector<unsigned char> m_sig;\n+\n+    uint256 GetHash();\n+    void SignSchnorr(const CKey& authority_key, Span<unsigned char> sig);\n+\n+public:\n+    Sv2SignatureNoiseMessage() = default;\n+    Sv2SignatureNoiseMessage(uint16_t version, uint32_t valid_from, uint32_t valid_to, const XOnlyPubKey& static_key, const CKey& authority_key);\n+\n+    /* The certificate serializes pubkeys in x-only format, not EllSwift. */\n+    XOnlyPubKey m_static_key = {};\n+\n+    [[nodiscard]] bool Validate(XOnlyPubKey authority_key);\n+\n+    template <typename Stream>\n+    // The static_key is signed for, but not serialized.\n+    void Serialize(Stream& s) const\n+    {\n+        s << m_version\n+          << m_valid_from\n+          << m_valid_to;\n+\n+        s.write(MakeByteSpan(m_sig));",
      "path": "src/common/sv2_noise.h",
      "position": null,
      "original_position": 76,
      "commit_id": "b588ff85ae837e492269c922d0609bcd338e4752",
      "original_commit_id": "a392a4c2f3be7d2751502adc887802a24f0f6898",
      "in_reply_to_id": 1472497733,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "If I drop `MakeByteSpan()` the compiler complains:\r\n\r\n```\r\n./common/sv2_noise.h:68:17: error: no viable conversion from 'const std::array<unsigned char, SCHNORR_SIGNATURE_SIZE>' to 'Span<const value_type>' (aka 'Span<const std::byte>')\r\n        s.write(m_sig);\r\n```",
      "created_at": "2024-02-01T15:59:14Z",
      "updated_at": "2024-02-01T15:59:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29346#discussion_r1474705042",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1474705042"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29346"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 66,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1474796055",
      "pull_request_review_id": 1857020952,
      "id": 1474796055,
      "node_id": "PRRC_kwDOABII585X55oX",
      "diff_hunk": "@@ -0,0 +1,283 @@\n+// Copyright (c) 2023-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_COMMON_SV2_NOISE_H\n+#define BITCOIN_COMMON_SV2_NOISE_H\n+\n+#include <compat/compat.h>\n+#include <key.h>\n+#include <pubkey.h>\n+#include <random.h>\n+#include <streams.h>\n+#include <uint256.h>\n+\n+/** The Noise Protocol Framework\n+ *  https://noiseprotocol.org/noise.html\n+ *  Revision 38, 2018-07-11\n+ *\n+ *  Stratum v2 handshake and cipher specification:\n+ *  https://github.com/stratum-mining/sv2-spec/blob/main/04-Protocol-Security.md\n+ */\n+\n+static constexpr size_t POLY1305_TAGLEN{16};\n+static constexpr size_t KEY_SIZE = 32;\n+static constexpr size_t ELLSWIFT_KEY_SIZE = 64;\n+static constexpr size_t ECDH_OUTPUT_SIZE = 32;\n+/** Section 3: All Noise messages are less than or equal to 65535 bytes in length. */\n+static constexpr size_t NOISE_MAX_CHUNK_SIZE = 65535;\n+/** Sv2 spec 4.5.2 */\n+static constexpr size_t SIGNATURE_NOISE_MESSAGE_SIZE = 2 + 4 + 4 + 64;\n+static constexpr size_t HANDSHAKE_STEP2_SIZE = ELLSWIFT_KEY_SIZE + ELLSWIFT_KEY_SIZE +\n+                                               POLY1305_TAGLEN + SIGNATURE_NOISE_MESSAGE_SIZE + POLY1305_TAGLEN;\n+static constexpr size_t SV2_CERTIFICATE_GRACE_PERIOD = 3600;\n+\n+// Sha256 hash of the ascii encoding - \"Noise_NX_EllSwiftXonly_ChaChaPoly_SHA256\".\n+// This is the first step required when setting up the chaining key.\n+const std::vector<uint8_t> PROTOCOL_NAME_HASH = {\n+    27, 97, 156, 90, 248, 120, 254, 68, 34, 119, 45, 129, 209, 41, 152, 82,\n+    26, 137, 97, 115, 62, 44, 177, 60, 145, 24, 250, 214, 68, 188, 1, 128};\n+\n+// The double hash of protocol name \"Noise_NX_EllSwiftXonly_ChaChaPoly_SHA256\".\n+static std::vector<uint8_t> PROTOCOL_NAME_DOUBLE_HASH = {60, 102, 112, 143, 69, 248, 185, 34, 53, 193, 3, 46, 250, 104, 70, 171,\n+                                                         139, 103, 55, 191, 199, 9, 77, 179, 99, 170, 7, 240, 219, 36, 226, 71};\n+\n+/** Simple certificate for the static key signed by the authority key.\n+ * See 4.5.2 and 4.5.3 of the Stratum v2 spec.\n+ */\n+class Sv2SignatureNoiseMessage\n+{\n+private:\n+    uint16_t m_version = 0;\n+    uint32_t m_valid_from = 0;\n+    uint32_t m_valid_to = 0;\n+    std::vector<unsigned char> m_sig;\n+\n+    uint256 GetHash();\n+    void SignSchnorr(const CKey& authority_key, Span<unsigned char> sig);\n+\n+public:\n+    Sv2SignatureNoiseMessage() = default;\n+    Sv2SignatureNoiseMessage(uint16_t version, uint32_t valid_from, uint32_t valid_to, const XOnlyPubKey& static_key, const CKey& authority_key);\n+\n+    /* The certificate serializes pubkeys in x-only format, not EllSwift. */\n+    XOnlyPubKey m_static_key = {};\n+\n+    [[nodiscard]] bool Validate(XOnlyPubKey authority_key);\n+\n+    template <typename Stream>\n+    // The static_key is signed for, but not serialized.\n+    void Serialize(Stream& s) const\n+    {\n+        s << m_version\n+          << m_valid_from\n+          << m_valid_to;\n+\n+        s.write(MakeByteSpan(m_sig));",
      "path": "src/common/sv2_noise.h",
      "position": null,
      "original_position": 76,
      "commit_id": "b588ff85ae837e492269c922d0609bcd338e4752",
      "original_commit_id": "a392a4c2f3be7d2751502adc887802a24f0f6898",
      "in_reply_to_id": 1472497733,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, you'd need to make it an array of std::byte.",
      "created_at": "2024-02-01T16:56:32Z",
      "updated_at": "2024-02-01T16:56:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29346#discussion_r1474796055",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1474796055"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29346"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 66,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1474833093",
      "pull_request_review_id": 1857086231,
      "id": 1474833093,
      "node_id": "PRRC_kwDOABII585X6CrF",
      "diff_hunk": "@@ -0,0 +1,283 @@\n+// Copyright (c) 2023-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_COMMON_SV2_NOISE_H\n+#define BITCOIN_COMMON_SV2_NOISE_H\n+\n+#include <compat/compat.h>\n+#include <key.h>\n+#include <pubkey.h>\n+#include <random.h>\n+#include <streams.h>\n+#include <uint256.h>\n+\n+/** The Noise Protocol Framework\n+ *  https://noiseprotocol.org/noise.html\n+ *  Revision 38, 2018-07-11\n+ *\n+ *  Stratum v2 handshake and cipher specification:\n+ *  https://github.com/stratum-mining/sv2-spec/blob/main/04-Protocol-Security.md\n+ */\n+\n+static constexpr size_t POLY1305_TAGLEN{16};\n+static constexpr size_t KEY_SIZE = 32;\n+static constexpr size_t ELLSWIFT_KEY_SIZE = 64;\n+static constexpr size_t ECDH_OUTPUT_SIZE = 32;\n+/** Section 3: All Noise messages are less than or equal to 65535 bytes in length. */\n+static constexpr size_t NOISE_MAX_CHUNK_SIZE = 65535;\n+/** Sv2 spec 4.5.2 */\n+static constexpr size_t SIGNATURE_NOISE_MESSAGE_SIZE = 2 + 4 + 4 + 64;\n+static constexpr size_t HANDSHAKE_STEP2_SIZE = ELLSWIFT_KEY_SIZE + ELLSWIFT_KEY_SIZE +\n+                                               POLY1305_TAGLEN + SIGNATURE_NOISE_MESSAGE_SIZE + POLY1305_TAGLEN;\n+static constexpr size_t SV2_CERTIFICATE_GRACE_PERIOD = 3600;\n+\n+// Sha256 hash of the ascii encoding - \"Noise_NX_EllSwiftXonly_ChaChaPoly_SHA256\".\n+// This is the first step required when setting up the chaining key.\n+const std::vector<uint8_t> PROTOCOL_NAME_HASH = {\n+    27, 97, 156, 90, 248, 120, 254, 68, 34, 119, 45, 129, 209, 41, 152, 82,\n+    26, 137, 97, 115, 62, 44, 177, 60, 145, 24, 250, 214, 68, 188, 1, 128};\n+\n+// The double hash of protocol name \"Noise_NX_EllSwiftXonly_ChaChaPoly_SHA256\".\n+static std::vector<uint8_t> PROTOCOL_NAME_DOUBLE_HASH = {60, 102, 112, 143, 69, 248, 185, 34, 53, 193, 3, 46, 250, 104, 70, 171,\n+                                                         139, 103, 55, 191, 199, 9, 77, 179, 99, 170, 7, 240, 219, 36, 226, 71};\n+\n+/** Simple certificate for the static key signed by the authority key.\n+ * See 4.5.2 and 4.5.3 of the Stratum v2 spec.\n+ */\n+class Sv2SignatureNoiseMessage\n+{\n+private:\n+    uint16_t m_version = 0;\n+    uint32_t m_valid_from = 0;\n+    uint32_t m_valid_to = 0;\n+    std::vector<unsigned char> m_sig;\n+\n+    uint256 GetHash();\n+    void SignSchnorr(const CKey& authority_key, Span<unsigned char> sig);\n+\n+public:\n+    Sv2SignatureNoiseMessage() = default;\n+    Sv2SignatureNoiseMessage(uint16_t version, uint32_t valid_from, uint32_t valid_to, const XOnlyPubKey& static_key, const CKey& authority_key);\n+\n+    /* The certificate serializes pubkeys in x-only format, not EllSwift. */\n+    XOnlyPubKey m_static_key = {};\n+\n+    [[nodiscard]] bool Validate(XOnlyPubKey authority_key);\n+\n+    template <typename Stream>\n+    // The static_key is signed for, but not serialized.\n+    void Serialize(Stream& s) const\n+    {\n+        s << m_version\n+          << m_valid_from\n+          << m_valid_to;\n+\n+        s.write(MakeByteSpan(m_sig));",
      "path": "src/common/sv2_noise.h",
      "position": null,
      "original_position": 76,
      "commit_id": "b588ff85ae837e492269c922d0609bcd338e4752",
      "original_commit_id": "a392a4c2f3be7d2751502adc887802a24f0f6898",
      "in_reply_to_id": 1472497733,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The member function `write` is the low-level interface for stream-like classes to accept a span of bytes. Normally, it shouldn't be used in common code, only internally in serialization.\r\n\r\nIf you want to serialize an object in Bitcoin Core, you can use the `<<` operator to write and `>>` to read.",
      "created_at": "2024-02-01T17:20:09Z",
      "updated_at": "2024-02-01T17:20:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29346#discussion_r1474833093",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1474833093"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29346"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 66,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1474980968",
      "pull_request_review_id": 1857343625,
      "id": 1474980968,
      "node_id": "PRRC_kwDOABII585X6mxo",
      "diff_hunk": "@@ -0,0 +1,283 @@\n+// Copyright (c) 2023-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_COMMON_SV2_NOISE_H\n+#define BITCOIN_COMMON_SV2_NOISE_H\n+\n+#include <compat/compat.h>\n+#include <key.h>\n+#include <pubkey.h>\n+#include <random.h>\n+#include <streams.h>\n+#include <uint256.h>\n+\n+/** The Noise Protocol Framework\n+ *  https://noiseprotocol.org/noise.html\n+ *  Revision 38, 2018-07-11\n+ *\n+ *  Stratum v2 handshake and cipher specification:\n+ *  https://github.com/stratum-mining/sv2-spec/blob/main/04-Protocol-Security.md\n+ */\n+\n+static constexpr size_t POLY1305_TAGLEN{16};\n+static constexpr size_t KEY_SIZE = 32;\n+static constexpr size_t ELLSWIFT_KEY_SIZE = 64;\n+static constexpr size_t ECDH_OUTPUT_SIZE = 32;\n+/** Section 3: All Noise messages are less than or equal to 65535 bytes in length. */\n+static constexpr size_t NOISE_MAX_CHUNK_SIZE = 65535;\n+/** Sv2 spec 4.5.2 */\n+static constexpr size_t SIGNATURE_NOISE_MESSAGE_SIZE = 2 + 4 + 4 + 64;\n+static constexpr size_t HANDSHAKE_STEP2_SIZE = ELLSWIFT_KEY_SIZE + ELLSWIFT_KEY_SIZE +\n+                                               POLY1305_TAGLEN + SIGNATURE_NOISE_MESSAGE_SIZE + POLY1305_TAGLEN;\n+static constexpr size_t SV2_CERTIFICATE_GRACE_PERIOD = 3600;\n+\n+// Sha256 hash of the ascii encoding - \"Noise_NX_EllSwiftXonly_ChaChaPoly_SHA256\".\n+// This is the first step required when setting up the chaining key.\n+const std::vector<uint8_t> PROTOCOL_NAME_HASH = {\n+    27, 97, 156, 90, 248, 120, 254, 68, 34, 119, 45, 129, 209, 41, 152, 82,\n+    26, 137, 97, 115, 62, 44, 177, 60, 145, 24, 250, 214, 68, 188, 1, 128};\n+\n+// The double hash of protocol name \"Noise_NX_EllSwiftXonly_ChaChaPoly_SHA256\".\n+static std::vector<uint8_t> PROTOCOL_NAME_DOUBLE_HASH = {60, 102, 112, 143, 69, 248, 185, 34, 53, 193, 3, 46, 250, 104, 70, 171,\n+                                                         139, 103, 55, 191, 199, 9, 77, 179, 99, 170, 7, 240, 219, 36, 226, 71};\n+\n+/** Simple certificate for the static key signed by the authority key.\n+ * See 4.5.2 and 4.5.3 of the Stratum v2 spec.\n+ */\n+class Sv2SignatureNoiseMessage\n+{\n+private:\n+    uint16_t m_version = 0;\n+    uint32_t m_valid_from = 0;\n+    uint32_t m_valid_to = 0;\n+    std::vector<unsigned char> m_sig;\n+\n+    uint256 GetHash();\n+    void SignSchnorr(const CKey& authority_key, Span<unsigned char> sig);\n+\n+public:\n+    Sv2SignatureNoiseMessage() = default;\n+    Sv2SignatureNoiseMessage(uint16_t version, uint32_t valid_from, uint32_t valid_to, const XOnlyPubKey& static_key, const CKey& authority_key);\n+\n+    /* The certificate serializes pubkeys in x-only format, not EllSwift. */\n+    XOnlyPubKey m_static_key = {};\n+\n+    [[nodiscard]] bool Validate(XOnlyPubKey authority_key);\n+\n+    template <typename Stream>\n+    // The static_key is signed for, but not serialized.\n+    void Serialize(Stream& s) const\n+    {\n+        s << m_version\n+          << m_valid_from\n+          << m_valid_to;\n+\n+        s.write(MakeByteSpan(m_sig));",
      "path": "src/common/sv2_noise.h",
      "position": null,
      "original_position": 76,
      "commit_id": "b588ff85ae837e492269c922d0609bcd338e4752",
      "original_commit_id": "a392a4c2f3be7d2751502adc887802a24f0f6898",
      "in_reply_to_id": 1472497733,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'll look into replace `write` with `>>`.\r\n\r\nNot sure if it's worth changing `m_sig` from `std::array<unsigned char>` to `std::array<std::byte>`. It's only used by `VerifySchnorr` and `SignSchnorr` which want a `Span<unsigned char>`, so whether we cast it here or there doesn't matter?",
      "created_at": "2024-02-01T19:00:33Z",
      "updated_at": "2024-02-01T19:00:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29346#discussion_r1474980968",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1474980968"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29346"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 66,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1475695984",
      "pull_request_review_id": 1858606575,
      "id": 1475695984,
      "node_id": "PRRC_kwDOABII585X9VVw",
      "diff_hunk": "@@ -0,0 +1,283 @@\n+// Copyright (c) 2023-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_COMMON_SV2_NOISE_H\n+#define BITCOIN_COMMON_SV2_NOISE_H\n+\n+#include <compat/compat.h>\n+#include <key.h>\n+#include <pubkey.h>\n+#include <random.h>\n+#include <streams.h>\n+#include <uint256.h>\n+\n+/** The Noise Protocol Framework\n+ *  https://noiseprotocol.org/noise.html\n+ *  Revision 38, 2018-07-11\n+ *\n+ *  Stratum v2 handshake and cipher specification:\n+ *  https://github.com/stratum-mining/sv2-spec/blob/main/04-Protocol-Security.md\n+ */\n+\n+static constexpr size_t POLY1305_TAGLEN{16};\n+static constexpr size_t KEY_SIZE = 32;\n+static constexpr size_t ELLSWIFT_KEY_SIZE = 64;\n+static constexpr size_t ECDH_OUTPUT_SIZE = 32;\n+/** Section 3: All Noise messages are less than or equal to 65535 bytes in length. */\n+static constexpr size_t NOISE_MAX_CHUNK_SIZE = 65535;\n+/** Sv2 spec 4.5.2 */\n+static constexpr size_t SIGNATURE_NOISE_MESSAGE_SIZE = 2 + 4 + 4 + 64;\n+static constexpr size_t HANDSHAKE_STEP2_SIZE = ELLSWIFT_KEY_SIZE + ELLSWIFT_KEY_SIZE +\n+                                               POLY1305_TAGLEN + SIGNATURE_NOISE_MESSAGE_SIZE + POLY1305_TAGLEN;\n+static constexpr size_t SV2_CERTIFICATE_GRACE_PERIOD = 3600;\n+\n+// Sha256 hash of the ascii encoding - \"Noise_NX_EllSwiftXonly_ChaChaPoly_SHA256\".\n+// This is the first step required when setting up the chaining key.\n+const std::vector<uint8_t> PROTOCOL_NAME_HASH = {\n+    27, 97, 156, 90, 248, 120, 254, 68, 34, 119, 45, 129, 209, 41, 152, 82,\n+    26, 137, 97, 115, 62, 44, 177, 60, 145, 24, 250, 214, 68, 188, 1, 128};\n+\n+// The double hash of protocol name \"Noise_NX_EllSwiftXonly_ChaChaPoly_SHA256\".\n+static std::vector<uint8_t> PROTOCOL_NAME_DOUBLE_HASH = {60, 102, 112, 143, 69, 248, 185, 34, 53, 193, 3, 46, 250, 104, 70, 171,\n+                                                         139, 103, 55, 191, 199, 9, 77, 179, 99, 170, 7, 240, 219, 36, 226, 71};\n+\n+/** Simple certificate for the static key signed by the authority key.\n+ * See 4.5.2 and 4.5.3 of the Stratum v2 spec.\n+ */\n+class Sv2SignatureNoiseMessage\n+{\n+private:\n+    uint16_t m_version = 0;\n+    uint32_t m_valid_from = 0;\n+    uint32_t m_valid_to = 0;\n+    std::vector<unsigned char> m_sig;\n+\n+    uint256 GetHash();\n+    void SignSchnorr(const CKey& authority_key, Span<unsigned char> sig);\n+\n+public:\n+    Sv2SignatureNoiseMessage() = default;\n+    Sv2SignatureNoiseMessage(uint16_t version, uint32_t valid_from, uint32_t valid_to, const XOnlyPubKey& static_key, const CKey& authority_key);\n+\n+    /* The certificate serializes pubkeys in x-only format, not EllSwift. */\n+    XOnlyPubKey m_static_key = {};\n+\n+    [[nodiscard]] bool Validate(XOnlyPubKey authority_key);\n+\n+    template <typename Stream>\n+    // The static_key is signed for, but not serialized.\n+    void Serialize(Stream& s) const\n+    {\n+        s << m_version\n+          << m_valid_from\n+          << m_valid_to;\n+\n+        s.write(MakeByteSpan(m_sig));",
      "path": "src/common/sv2_noise.h",
      "position": null,
      "original_position": 76,
      "commit_id": "b588ff85ae837e492269c922d0609bcd338e4752",
      "original_commit_id": "a392a4c2f3be7d2751502adc887802a24f0f6898",
      "in_reply_to_id": 1472497733,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> I'll look into replace `write` with `>>`.\r\n\r\n`>>` means reading. You may want to try `<<`, if you want to write an object.",
      "created_at": "2024-02-02T08:00:48Z",
      "updated_at": "2024-02-02T08:00:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29346#discussion_r1475695984",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1475695984"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29346"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 66,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1475854412",
      "pull_request_review_id": 1858879817,
      "id": 1475854412,
      "node_id": "PRRC_kwDOABII585X98BM",
      "diff_hunk": "@@ -0,0 +1,283 @@\n+// Copyright (c) 2023-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_COMMON_SV2_NOISE_H\n+#define BITCOIN_COMMON_SV2_NOISE_H\n+\n+#include <compat/compat.h>\n+#include <key.h>\n+#include <pubkey.h>\n+#include <random.h>\n+#include <streams.h>\n+#include <uint256.h>\n+\n+/** The Noise Protocol Framework\n+ *  https://noiseprotocol.org/noise.html\n+ *  Revision 38, 2018-07-11\n+ *\n+ *  Stratum v2 handshake and cipher specification:\n+ *  https://github.com/stratum-mining/sv2-spec/blob/main/04-Protocol-Security.md\n+ */\n+\n+static constexpr size_t POLY1305_TAGLEN{16};\n+static constexpr size_t KEY_SIZE = 32;\n+static constexpr size_t ELLSWIFT_KEY_SIZE = 64;\n+static constexpr size_t ECDH_OUTPUT_SIZE = 32;\n+/** Section 3: All Noise messages are less than or equal to 65535 bytes in length. */\n+static constexpr size_t NOISE_MAX_CHUNK_SIZE = 65535;\n+/** Sv2 spec 4.5.2 */\n+static constexpr size_t SIGNATURE_NOISE_MESSAGE_SIZE = 2 + 4 + 4 + 64;\n+static constexpr size_t HANDSHAKE_STEP2_SIZE = ELLSWIFT_KEY_SIZE + ELLSWIFT_KEY_SIZE +\n+                                               POLY1305_TAGLEN + SIGNATURE_NOISE_MESSAGE_SIZE + POLY1305_TAGLEN;\n+static constexpr size_t SV2_CERTIFICATE_GRACE_PERIOD = 3600;\n+\n+// Sha256 hash of the ascii encoding - \"Noise_NX_EllSwiftXonly_ChaChaPoly_SHA256\".\n+// This is the first step required when setting up the chaining key.\n+const std::vector<uint8_t> PROTOCOL_NAME_HASH = {\n+    27, 97, 156, 90, 248, 120, 254, 68, 34, 119, 45, 129, 209, 41, 152, 82,\n+    26, 137, 97, 115, 62, 44, 177, 60, 145, 24, 250, 214, 68, 188, 1, 128};\n+\n+// The double hash of protocol name \"Noise_NX_EllSwiftXonly_ChaChaPoly_SHA256\".\n+static std::vector<uint8_t> PROTOCOL_NAME_DOUBLE_HASH = {60, 102, 112, 143, 69, 248, 185, 34, 53, 193, 3, 46, 250, 104, 70, 171,\n+                                                         139, 103, 55, 191, 199, 9, 77, 179, 99, 170, 7, 240, 219, 36, 226, 71};\n+\n+/** Simple certificate for the static key signed by the authority key.\n+ * See 4.5.2 and 4.5.3 of the Stratum v2 spec.\n+ */\n+class Sv2SignatureNoiseMessage\n+{\n+private:\n+    uint16_t m_version = 0;\n+    uint32_t m_valid_from = 0;\n+    uint32_t m_valid_to = 0;\n+    std::vector<unsigned char> m_sig;\n+\n+    uint256 GetHash();\n+    void SignSchnorr(const CKey& authority_key, Span<unsigned char> sig);\n+\n+public:\n+    Sv2SignatureNoiseMessage() = default;\n+    Sv2SignatureNoiseMessage(uint16_t version, uint32_t valid_from, uint32_t valid_to, const XOnlyPubKey& static_key, const CKey& authority_key);\n+\n+    /* The certificate serializes pubkeys in x-only format, not EllSwift. */\n+    XOnlyPubKey m_static_key = {};\n+\n+    [[nodiscard]] bool Validate(XOnlyPubKey authority_key);\n+\n+    template <typename Stream>\n+    // The static_key is signed for, but not serialized.\n+    void Serialize(Stream& s) const\n+    {\n+        s << m_version\n+          << m_valid_from\n+          << m_valid_to;\n+\n+        s.write(MakeByteSpan(m_sig));",
      "path": "src/common/sv2_noise.h",
      "position": null,
      "original_position": 76,
      "commit_id": "b588ff85ae837e492269c922d0609bcd338e4752",
      "original_commit_id": "a392a4c2f3be7d2751502adc887802a24f0f6898",
      "in_reply_to_id": 1472497733,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "` << m_sig` works fine, so `m_sig` can live happily as a `std::array<unsigned char`",
      "created_at": "2024-02-02T10:20:27Z",
      "updated_at": "2024-02-02T10:20:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29346#discussion_r1475854412",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1475854412"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29346"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 66,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1665927305",
      "pull_request_review_id": 2159282833,
      "id": 1665927305,
      "node_id": "PRRC_kwDOABII585jTAiJ",
      "diff_hunk": "@@ -0,0 +1,295 @@\n+// Copyright (c) 2023-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_COMMON_SV2_NOISE_H\n+#define BITCOIN_COMMON_SV2_NOISE_H\n+\n+#include <compat/compat.h>\n+#include <crypto/poly1305.h>\n+#include <key.h>\n+#include <pubkey.h>\n+#include <random.h>\n+#include <streams.h>\n+#include <uint256.h>\n+\n+/** The Noise Protocol Framework\n+ *  https://noiseprotocol.org/noise.html\n+ *  Revision 38, 2018-07-11\n+ *\n+ *  Stratum v2 handshake and cipher specification:\n+ *  https://github.com/stratum-mining/sv2-spec/blob/main/04-Protocol-Security.md\n+ */\n+\n+/** Section 3: All Noise messages are less than or equal to 65535 bytes in length. */\n+static constexpr size_t NOISE_MAX_CHUNK_SIZE = 65535;\n+/** Sv2 spec 4.5.2 */",
      "path": "src/common/sv2_noise.h",
      "position": null,
      "original_position": 26,
      "commit_id": "b588ff85ae837e492269c922d0609bcd338e4752",
      "original_commit_id": "a2436955f5bde920e41e03a5db34d477bfeb04a6",
      "in_reply_to_id": null,
      "user": {
        "login": "itornaza",
        "id": 11520757,
        "node_id": "MDQ6VXNlcjExNTIwNzU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/11520757?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/itornaza",
        "html_url": "https://github.com/itornaza",
        "followers_url": "https://api.github.com/users/itornaza/followers",
        "following_url": "https://api.github.com/users/itornaza/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/itornaza/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/itornaza/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/itornaza/subscriptions",
        "organizations_url": "https://api.github.com/users/itornaza/orgs",
        "repos_url": "https://api.github.com/users/itornaza/repos",
        "events_url": "https://api.github.com/users/itornaza/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/itornaza/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: Is that comment needed? SV2 spec 4.5.2 is not relevant to message length.",
      "created_at": "2024-07-04T17:06:34Z",
      "updated_at": "2024-07-04T17:40:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29346#discussion_r1665927305",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1665927305"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29346"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 26,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1665929102",
      "pull_request_review_id": 2159282833,
      "id": 1665929102,
      "node_id": "PRRC_kwDOABII585jTA-O",
      "diff_hunk": "@@ -0,0 +1,295 @@\n+// Copyright (c) 2023-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_COMMON_SV2_NOISE_H\n+#define BITCOIN_COMMON_SV2_NOISE_H\n+\n+#include <compat/compat.h>\n+#include <crypto/poly1305.h>\n+#include <key.h>\n+#include <pubkey.h>\n+#include <random.h>\n+#include <streams.h>\n+#include <uint256.h>\n+\n+/** The Noise Protocol Framework\n+ *  https://noiseprotocol.org/noise.html\n+ *  Revision 38, 2018-07-11\n+ *\n+ *  Stratum v2 handshake and cipher specification:\n+ *  https://github.com/stratum-mining/sv2-spec/blob/main/04-Protocol-Security.md\n+ */\n+\n+/** Section 3: All Noise messages are less than or equal to 65535 bytes in length. */\n+static constexpr size_t NOISE_MAX_CHUNK_SIZE = 65535;\n+/** Sv2 spec 4.5.2 */\n+\n+/** Simple certificate for the static key signed by the authority key.\n+ * See 4.5.2 and 4.5.3 of the Stratum v2 spec.\n+ */\n+class Sv2SignatureNoiseMessage\n+{\n+public:\n+    /** Size of a Schnorr signature. */\n+    static constexpr size_t SCHNORR_SIGNATURE_SIZE = 64;\n+    /** Size of serialized message, which does not include the static key.  */\n+    static constexpr size_t SIZE = 2 + 4 + 4 + SCHNORR_SIGNATURE_SIZE;\n+\n+private:\n+    uint16_t m_version = 0;\n+    uint32_t m_valid_from = 0;\n+    uint32_t m_valid_to = 0;\n+    std::array<unsigned char, SCHNORR_SIGNATURE_SIZE> m_sig;\n+\n+    /** Hash of version, valid from/to and the static key. */\n+    uint256 GetHash();\n+    void SignSchnorr(const CKey& authority_key, Span<unsigned char> sig);\n+\n+public:\n+    Sv2SignatureNoiseMessage() = default;\n+    Sv2SignatureNoiseMessage(uint16_t version, uint32_t valid_from, uint32_t valid_to, const XOnlyPubKey& static_key, const CKey& authority_key);\n+\n+    /* The certificate serializes pubkeys in x-only format, not EllSwift. */\n+    XOnlyPubKey m_static_key = {};\n+\n+    [[nodiscard]] bool Validate(XOnlyPubKey authority_key);\n+\n+    template <typename Stream>\n+    // The static_key is signed for, but not serialized.\n+    void Serialize(Stream& s) const\n+    {\n+        s << m_version\n+          << m_valid_from\n+          << m_valid_to\n+          << m_sig;\n+    }\n+    template <typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> m_version >> m_valid_from >> m_valid_to >> m_sig;",
      "path": "src/common/sv2_noise.h",
      "position": null,
      "original_position": 70,
      "commit_id": "b588ff85ae837e492269c922d0609bcd338e4752",
      "original_commit_id": "a2436955f5bde920e41e03a5db34d477bfeb04a6",
      "in_reply_to_id": null,
      "user": {
        "login": "itornaza",
        "id": 11520757,
        "node_id": "MDQ6VXNlcjExNTIwNzU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/11520757?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/itornaza",
        "html_url": "https://github.com/itornaza",
        "followers_url": "https://api.github.com/users/itornaza/followers",
        "following_url": "https://api.github.com/users/itornaza/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/itornaza/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/itornaza/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/itornaza/subscriptions",
        "organizations_url": "https://api.github.com/users/itornaza/orgs",
        "repos_url": "https://api.github.com/users/itornaza/repos",
        "events_url": "https://api.github.com/users/itornaza/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/itornaza/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "styling nit: Consider splitting into multiple lines for clarity and consistency with Serialize above.",
      "created_at": "2024-07-04T17:09:18Z",
      "updated_at": "2024-07-04T17:40:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29346#discussion_r1665929102",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1665929102"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29346"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 70,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1665944790",
      "pull_request_review_id": 2159282833,
      "id": 1665944790,
      "node_id": "PRRC_kwDOABII585jTEzW",
      "diff_hunk": "@@ -0,0 +1,295 @@\n+// Copyright (c) 2023-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_COMMON_SV2_NOISE_H\n+#define BITCOIN_COMMON_SV2_NOISE_H\n+\n+#include <compat/compat.h>\n+#include <crypto/poly1305.h>\n+#include <key.h>\n+#include <pubkey.h>\n+#include <random.h>\n+#include <streams.h>\n+#include <uint256.h>\n+\n+/** The Noise Protocol Framework\n+ *  https://noiseprotocol.org/noise.html\n+ *  Revision 38, 2018-07-11\n+ *\n+ *  Stratum v2 handshake and cipher specification:\n+ *  https://github.com/stratum-mining/sv2-spec/blob/main/04-Protocol-Security.md\n+ */\n+\n+/** Section 3: All Noise messages are less than or equal to 65535 bytes in length. */\n+static constexpr size_t NOISE_MAX_CHUNK_SIZE = 65535;\n+/** Sv2 spec 4.5.2 */\n+\n+/** Simple certificate for the static key signed by the authority key.\n+ * See 4.5.2 and 4.5.3 of the Stratum v2 spec.\n+ */\n+class Sv2SignatureNoiseMessage\n+{\n+public:\n+    /** Size of a Schnorr signature. */\n+    static constexpr size_t SCHNORR_SIGNATURE_SIZE = 64;\n+    /** Size of serialized message, which does not include the static key.  */\n+    static constexpr size_t SIZE = 2 + 4 + 4 + SCHNORR_SIGNATURE_SIZE;\n+\n+private:\n+    uint16_t m_version = 0;\n+    uint32_t m_valid_from = 0;\n+    uint32_t m_valid_to = 0;\n+    std::array<unsigned char, SCHNORR_SIGNATURE_SIZE> m_sig;\n+\n+    /** Hash of version, valid from/to and the static key. */\n+    uint256 GetHash();\n+    void SignSchnorr(const CKey& authority_key, Span<unsigned char> sig);\n+\n+public:\n+    Sv2SignatureNoiseMessage() = default;\n+    Sv2SignatureNoiseMessage(uint16_t version, uint32_t valid_from, uint32_t valid_to, const XOnlyPubKey& static_key, const CKey& authority_key);\n+\n+    /* The certificate serializes pubkeys in x-only format, not EllSwift. */\n+    XOnlyPubKey m_static_key = {};\n+\n+    [[nodiscard]] bool Validate(XOnlyPubKey authority_key);\n+\n+    template <typename Stream>\n+    // The static_key is signed for, but not serialized.\n+    void Serialize(Stream& s) const\n+    {\n+        s << m_version\n+          << m_valid_from\n+          << m_valid_to\n+          << m_sig;\n+    }\n+    template <typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> m_version >> m_valid_from >> m_valid_to >> m_sig;\n+    }\n+};\n+\n+/*\n+ * The CipherState uses m_key (k) and m_nonce (n) to encrypt and decrypt ciphertexts.\n+ * During the handshake phase each party has a single CipherState, but during\n+ * the transport phase each party has two CipherState objects: one for sending,\n+ * and one for receiving.\n+ *\n+ * See chapter \"5. Processing rules\" of the Noise paper.\n+ */\n+class Sv2CipherState\n+{\n+public:\n+    static constexpr size_t HASHLEN{32};\n+\n+    Sv2CipherState() = default;\n+    explicit Sv2CipherState(uint8_t key[HASHLEN]);\n+\n+    /** Decrypt message\n+     * @param[in] associated_data associated data\n+     * @param[in] ciphertext message with encrypted and authenticated chunks.\n+     * @param[out] plain message (defragmented)\n+     * @returns whether decryption succeeded\n+     */\n+    [[nodiscard]] bool DecryptWithAd(Span<const std::byte> associated_data, Span<std::byte> ciphertext, Span<std::byte> plain);\n+    /** Encrypt message\n+     * @param[in] associated_data associated data\n+     * @param[out] plain message",
      "path": "src/common/sv2_noise.h",
      "position": null,
      "original_position": 99,
      "commit_id": "b588ff85ae837e492269c922d0609bcd338e4752",
      "original_commit_id": "a2436955f5bde920e41e03a5db34d477bfeb04a6",
      "in_reply_to_id": null,
      "user": {
        "login": "itornaza",
        "id": 11520757,
        "node_id": "MDQ6VXNlcjExNTIwNzU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/11520757?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/itornaza",
        "html_url": "https://github.com/itornaza",
        "followers_url": "https://api.github.com/users/itornaza/followers",
        "following_url": "https://api.github.com/users/itornaza/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/itornaza/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/itornaza/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/itornaza/subscriptions",
        "organizations_url": "https://api.github.com/users/itornaza/orgs",
        "repos_url": "https://api.github.com/users/itornaza/repos",
        "events_url": "https://api.github.com/users/itornaza/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/itornaza/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: Should the `plain` message be the @param[in] in the `EncryptWithAdd` method?",
      "created_at": "2024-07-04T17:25:47Z",
      "updated_at": "2024-07-04T17:40:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29346#discussion_r1665944790",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1665944790"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29346"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 99,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1665945833",
      "pull_request_review_id": 2159282833,
      "id": 1665945833,
      "node_id": "PRRC_kwDOABII585jTFDp",
      "diff_hunk": "@@ -0,0 +1,295 @@\n+// Copyright (c) 2023-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_COMMON_SV2_NOISE_H\n+#define BITCOIN_COMMON_SV2_NOISE_H\n+\n+#include <compat/compat.h>\n+#include <crypto/poly1305.h>\n+#include <key.h>\n+#include <pubkey.h>\n+#include <random.h>\n+#include <streams.h>\n+#include <uint256.h>\n+\n+/** The Noise Protocol Framework\n+ *  https://noiseprotocol.org/noise.html\n+ *  Revision 38, 2018-07-11\n+ *\n+ *  Stratum v2 handshake and cipher specification:\n+ *  https://github.com/stratum-mining/sv2-spec/blob/main/04-Protocol-Security.md\n+ */\n+\n+/** Section 3: All Noise messages are less than or equal to 65535 bytes in length. */\n+static constexpr size_t NOISE_MAX_CHUNK_SIZE = 65535;\n+/** Sv2 spec 4.5.2 */\n+\n+/** Simple certificate for the static key signed by the authority key.\n+ * See 4.5.2 and 4.5.3 of the Stratum v2 spec.\n+ */\n+class Sv2SignatureNoiseMessage\n+{\n+public:\n+    /** Size of a Schnorr signature. */\n+    static constexpr size_t SCHNORR_SIGNATURE_SIZE = 64;\n+    /** Size of serialized message, which does not include the static key.  */\n+    static constexpr size_t SIZE = 2 + 4 + 4 + SCHNORR_SIGNATURE_SIZE;\n+\n+private:\n+    uint16_t m_version = 0;\n+    uint32_t m_valid_from = 0;\n+    uint32_t m_valid_to = 0;\n+    std::array<unsigned char, SCHNORR_SIGNATURE_SIZE> m_sig;\n+\n+    /** Hash of version, valid from/to and the static key. */\n+    uint256 GetHash();\n+    void SignSchnorr(const CKey& authority_key, Span<unsigned char> sig);\n+\n+public:\n+    Sv2SignatureNoiseMessage() = default;\n+    Sv2SignatureNoiseMessage(uint16_t version, uint32_t valid_from, uint32_t valid_to, const XOnlyPubKey& static_key, const CKey& authority_key);\n+\n+    /* The certificate serializes pubkeys in x-only format, not EllSwift. */\n+    XOnlyPubKey m_static_key = {};\n+\n+    [[nodiscard]] bool Validate(XOnlyPubKey authority_key);\n+\n+    template <typename Stream>\n+    // The static_key is signed for, but not serialized.\n+    void Serialize(Stream& s) const\n+    {\n+        s << m_version\n+          << m_valid_from\n+          << m_valid_to\n+          << m_sig;\n+    }\n+    template <typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> m_version >> m_valid_from >> m_valid_to >> m_sig;\n+    }\n+};\n+\n+/*\n+ * The CipherState uses m_key (k) and m_nonce (n) to encrypt and decrypt ciphertexts.\n+ * During the handshake phase each party has a single CipherState, but during\n+ * the transport phase each party has two CipherState objects: one for sending,\n+ * and one for receiving.\n+ *\n+ * See chapter \"5. Processing rules\" of the Noise paper.\n+ */\n+class Sv2CipherState\n+{\n+public:\n+    static constexpr size_t HASHLEN{32};\n+\n+    Sv2CipherState() = default;\n+    explicit Sv2CipherState(uint8_t key[HASHLEN]);\n+\n+    /** Decrypt message\n+     * @param[in] associated_data associated data\n+     * @param[in] ciphertext message with encrypted and authenticated chunks.\n+     * @param[out] plain message (defragmented)\n+     * @returns whether decryption succeeded\n+     */\n+    [[nodiscard]] bool DecryptWithAd(Span<const std::byte> associated_data, Span<std::byte> ciphertext, Span<std::byte> plain);\n+    /** Encrypt message\n+     * @param[in] associated_data associated data\n+     * @param[out] plain message\n+     * @param[in] ciphertext message with encrypted and authenticated chunks.",
      "path": "src/common/sv2_noise.h",
      "position": null,
      "original_position": 100,
      "commit_id": "b588ff85ae837e492269c922d0609bcd338e4752",
      "original_commit_id": "a2436955f5bde920e41e03a5db34d477bfeb04a6",
      "in_reply_to_id": null,
      "user": {
        "login": "itornaza",
        "id": 11520757,
        "node_id": "MDQ6VXNlcjExNTIwNzU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/11520757?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/itornaza",
        "html_url": "https://github.com/itornaza",
        "followers_url": "https://api.github.com/users/itornaza/followers",
        "following_url": "https://api.github.com/users/itornaza/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/itornaza/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/itornaza/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/itornaza/subscriptions",
        "organizations_url": "https://api.github.com/users/itornaza/orgs",
        "repos_url": "https://api.github.com/users/itornaza/repos",
        "events_url": "https://api.github.com/users/itornaza/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/itornaza/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: Should the `ciphertext` message be the @param[out] in the EncryptWithAdd method?",
      "created_at": "2024-07-04T17:26:54Z",
      "updated_at": "2024-07-04T17:40:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29346#discussion_r1665945833",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1665945833"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29346"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 100,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1665952724",
      "pull_request_review_id": 2159282833,
      "id": 1665952724,
      "node_id": "PRRC_kwDOABII585jTGvU",
      "diff_hunk": "@@ -0,0 +1,295 @@\n+// Copyright (c) 2023-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_COMMON_SV2_NOISE_H\n+#define BITCOIN_COMMON_SV2_NOISE_H\n+\n+#include <compat/compat.h>\n+#include <crypto/poly1305.h>\n+#include <key.h>\n+#include <pubkey.h>\n+#include <random.h>\n+#include <streams.h>\n+#include <uint256.h>\n+\n+/** The Noise Protocol Framework\n+ *  https://noiseprotocol.org/noise.html\n+ *  Revision 38, 2018-07-11\n+ *\n+ *  Stratum v2 handshake and cipher specification:\n+ *  https://github.com/stratum-mining/sv2-spec/blob/main/04-Protocol-Security.md\n+ */\n+\n+/** Section 3: All Noise messages are less than or equal to 65535 bytes in length. */\n+static constexpr size_t NOISE_MAX_CHUNK_SIZE = 65535;\n+/** Sv2 spec 4.5.2 */\n+\n+/** Simple certificate for the static key signed by the authority key.\n+ * See 4.5.2 and 4.5.3 of the Stratum v2 spec.\n+ */\n+class Sv2SignatureNoiseMessage\n+{\n+public:\n+    /** Size of a Schnorr signature. */\n+    static constexpr size_t SCHNORR_SIGNATURE_SIZE = 64;\n+    /** Size of serialized message, which does not include the static key.  */\n+    static constexpr size_t SIZE = 2 + 4 + 4 + SCHNORR_SIGNATURE_SIZE;\n+\n+private:\n+    uint16_t m_version = 0;\n+    uint32_t m_valid_from = 0;\n+    uint32_t m_valid_to = 0;\n+    std::array<unsigned char, SCHNORR_SIGNATURE_SIZE> m_sig;\n+\n+    /** Hash of version, valid from/to and the static key. */\n+    uint256 GetHash();\n+    void SignSchnorr(const CKey& authority_key, Span<unsigned char> sig);\n+\n+public:\n+    Sv2SignatureNoiseMessage() = default;\n+    Sv2SignatureNoiseMessage(uint16_t version, uint32_t valid_from, uint32_t valid_to, const XOnlyPubKey& static_key, const CKey& authority_key);\n+\n+    /* The certificate serializes pubkeys in x-only format, not EllSwift. */\n+    XOnlyPubKey m_static_key = {};\n+\n+    [[nodiscard]] bool Validate(XOnlyPubKey authority_key);\n+\n+    template <typename Stream>\n+    // The static_key is signed for, but not serialized.\n+    void Serialize(Stream& s) const\n+    {\n+        s << m_version\n+          << m_valid_from\n+          << m_valid_to\n+          << m_sig;\n+    }\n+    template <typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> m_version >> m_valid_from >> m_valid_to >> m_sig;\n+    }\n+};\n+\n+/*\n+ * The CipherState uses m_key (k) and m_nonce (n) to encrypt and decrypt ciphertexts.\n+ * During the handshake phase each party has a single CipherState, but during\n+ * the transport phase each party has two CipherState objects: one for sending,\n+ * and one for receiving.\n+ *\n+ * See chapter \"5. Processing rules\" of the Noise paper.\n+ */\n+class Sv2CipherState\n+{\n+public:\n+    static constexpr size_t HASHLEN{32};\n+\n+    Sv2CipherState() = default;\n+    explicit Sv2CipherState(uint8_t key[HASHLEN]);\n+\n+    /** Decrypt message\n+     * @param[in] associated_data associated data\n+     * @param[in] ciphertext message with encrypted and authenticated chunks.\n+     * @param[out] plain message (defragmented)\n+     * @returns whether decryption succeeded\n+     */\n+    [[nodiscard]] bool DecryptWithAd(Span<const std::byte> associated_data, Span<std::byte> ciphertext, Span<std::byte> plain);\n+    /** Encrypt message\n+     * @param[in] associated_data associated data\n+     * @param[out] plain message\n+     * @param[in] ciphertext message with encrypted and authenticated chunks.\n+     * @returns whether decryption succeeded\n+     */\n+    [[nodiscard]] bool EncryptWithAd(Span<const std::byte> associated_data, Span<const std::byte> plain, Span<std::byte> ciphertext);\n+\n+    /** The message will be chunked in NOISE_MAX_CHUNK_SIZE parts and expanded\n+     *  by 16 bytes per chunk for its MAC.\n+     *\n+     * @param[in] plain message. Can't point to the same memory location as ciphertext,\n+     *                  because each encrypted message chunk would override the\n+     *                  start of the next plain text chunk.\n+     * @param[out] ciphertext   message with encrypted and authenticated chunks\n+     * @return whether encryption succeeded. Only fails if nonce is uint64_max.\n+     */\n+    [[nodiscard]] bool EncryptMessage(Span<const std::byte> plain, Span<std::byte> ciphertext);\n+\n+    /** Decrypt message.\n+     *\n+     * @param[in] ciphertext encrypted message\n+     * @param[out] plain decrypted message. May point to the same memory location\n+     *                  as ciphertext. The result is defragmented.\n+     */\n+    [[nodiscard]] bool DecryptMessage(Span<std::byte> ciphertext, Span<std::byte> plain);\n+\n+private:\n+    uint8_t m_key[HASHLEN];\n+    uint64_t m_nonce = 0;\n+};\n+\n+/*\n+ * A SymmetricState object contains a CipherState plus m_chaining_key (ck) and\n+ * m_hash_output (h) variables. It is so-named because it encapsulates all the\n+ * \"symmetric crypto\" used by Noise. During the handshake phase each party has\n+ * a single SymmetricState, which can be deleted once the handshake is finished.\n+ *\n+ * See chapter \"5. Processing rules\" of the Noise paper.\n+ */\n+class Sv2SymmetricState\n+{\n+public:\n+    // Sha256 hash of the ascii encoding - \"Noise_NX_Secp256k1+EllSwift_ChaChaPoly_SHA256\".\n+    // This is the first step required when setting up the chaining key.\n+    static constexpr std::array<uint8_t, 32> PROTOCOL_NAME_HASH = {\n+        46, 180, 120, 129, 32, 142, 158, 238, 31, 102, 159, 103, 198, 110, 231, 14,\n+        169, 234, 136, 9, 13, 80, 63, 232, 48, 220, 75, 200, 62, 41, 191, 16};\n+\n+    // The double hash of protocol name \"Noise_NX_EllSwiftXonly_ChaChaPoly_SHA256\".\n+    static constexpr std::array<uint8_t, 32> PROTOCOL_NAME_DOUBLE_HASH = {146, 47, 163, 46, 79, 72, 124, 13, 89, 202, 163, 190, 215, 137, 156, 227,\n+                                                                          217, 141, 183, 225, 61, 189, 59, 124, 242, 210, 61, 212, 51, 220, 97, 4};\n+\n+    Sv2SymmetricState()\n+    {\n+        std::memcpy(m_chaining_key, PROTOCOL_NAME_HASH.data(), PROTOCOL_NAME_HASH.size());\n+    }\n+\n+    void MixHash(const Span<const std::byte> input);\n+    void MixKey(const Span<const std::byte> input_key_material);\n+    [[nodiscard]] bool EncryptAndHash(Span<const std::byte> plain, Span<std::byte> ciphertext);\n+    [[nodiscard]] bool DecryptAndHash(Span<std::byte> ciphertext, Span<std::byte> plain);\n+    std::array<Sv2CipherState, 2> Split();\n+\n+    uint256 GetHashOutput();\n+\n+    /* For testing */\n+    void LogChainingKey();\n+    std::string GetChainingKey();\n+\n+private:\n+    uint8_t m_chaining_key[Sv2CipherState::HASHLEN];\n+    uint256 m_hash_output = uint256(PROTOCOL_NAME_DOUBLE_HASH);\n+    Sv2CipherState m_cipher_state;\n+\n+    void HKDF2(const Span<const std::byte> input_key_material, uint8_t out0[Sv2CipherState::HASHLEN], uint8_t out1[Sv2CipherState::HASHLEN]);\n+};\n+\n+/*\n+ * A HandshakeState object contains a SymmetricState plus DH variables (s, e, rs, re)\n+ * and a variable representing the handshake pattern. During the handshake phase\n+ * each party has a single HandshakeState, which can be deleted once the handshake\n+ * is finished.\n+ *\n+ * See chapter \"5. Processing rules\" of the Noise paper.\n+ */\n+\n+class Sv2HandshakeState\n+{\n+public:\n+    static constexpr size_t ELLSWIFT_PUB_KEY_SIZE{64};\n+    static constexpr size_t ECDH_OUTPUT_SIZE{32};\n+\n+    static constexpr size_t HANDSHAKE_STEP2_SIZE = ELLSWIFT_PUB_KEY_SIZE + ELLSWIFT_PUB_KEY_SIZE +\n+                                                   Poly1305::TAGLEN + Sv2SignatureNoiseMessage::SIZE + Poly1305::TAGLEN;\n+\n+    /*\n+     * If we are the initiator m_authority_pubkey must be set in order to verify\n+     * the received certificate.\n+     */\n+    Sv2HandshakeState(CKey&& static_key,\n+                      XOnlyPubKey authority_pubkey) : m_static_key{static_key},\n+                                                        m_authority_pubkey{authority_pubkey}\n+    {\n+        m_our_static_ellswift_pk = static_key.EllSwiftCreate(MakeByteSpan(GetRandHash()));\n+    };\n+\n+    /*\n+     * If we are the responder, the certificate must be set\n+     */\n+    Sv2HandshakeState(CKey&& static_key,\n+                      Sv2SignatureNoiseMessage&& certificate) : m_static_key{static_key},\n+                                                                m_certificate{certificate}\n+    {\n+        m_our_static_ellswift_pk = static_key.EllSwiftCreate(MakeByteSpan(GetRandHash()));\n+    };\n+\n+    /** Handshake step 1 for initiator: -> e */\n+    void WriteMsgEphemeralPK(Span<std::byte> msg);\n+    /** Handshake step 1 for responder: -> e */\n+    void ReadMsgEphemeralPK(Span<std::byte> msg);\n+    /** During handshake step 2, put our ephmeral key, static key\n+     * and certificate in the buffer: <- e, ee, s, es, SIGNATURE_NOISE_MESSAGE\n+     */\n+    void WriteMsgES(Span<std::byte> msg);\n+    /** During handshake step 2, read the remote ephmeral key, static key\n+     * and certificate. Verify their certificate.\n+     * <- e, ee, s, es, SIGNATURE_NOISE_MESSAGE\n+     */\n+    [[nodiscard]] bool ReadMsgES(Span<std::byte> msg);\n+\n+    std::array<Sv2CipherState, 2> SplitSymmetricState();\n+    uint256 GetHashOutput();\n+\n+    void SetEphemeralKey(CKey&& key);\n+\n+private:\n+    /** Our static key (s) */\n+    CKey m_static_key;\n+    /** EllSwift encoded static key, for optimized ECDH */\n+    EllSwiftPubKey m_our_static_ellswift_pk;",
      "path": "src/common/sv2_noise.h",
      "position": null,
      "original_position": 237,
      "commit_id": "b588ff85ae837e492269c922d0609bcd338e4752",
      "original_commit_id": "a2436955f5bde920e41e03a5db34d477bfeb04a6",
      "in_reply_to_id": null,
      "user": {
        "login": "itornaza",
        "id": 11520757,
        "node_id": "MDQ6VXNlcjExNTIwNzU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/11520757?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/itornaza",
        "html_url": "https://github.com/itornaza",
        "followers_url": "https://api.github.com/users/itornaza/followers",
        "following_url": "https://api.github.com/users/itornaza/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/itornaza/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/itornaza/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/itornaza/subscriptions",
        "organizations_url": "https://api.github.com/users/itornaza/orgs",
        "repos_url": "https://api.github.com/users/itornaza/repos",
        "events_url": "https://api.github.com/users/itornaza/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/itornaza/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "styling nit: Consider dropping the `_our` part from the variable's name to be more consistent with the other names and be closer to the Noise protocol naming convention `s` (implicitly our) and `rs` (explicitly remote). Same for the rest of the names below.",
      "created_at": "2024-07-04T17:31:18Z",
      "updated_at": "2024-07-04T17:40:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29346#discussion_r1665952724",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1665952724"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29346"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 237,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1665954584",
      "pull_request_review_id": 2159282833,
      "id": 1665954584,
      "node_id": "PRRC_kwDOABII585jTHMY",
      "diff_hunk": "@@ -0,0 +1,529 @@\n+// Copyright (c) 2023-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <common/sv2_noise.h>\n+\n+#include <crypto/chacha20poly1305.h>\n+#include <crypto/hmac_sha256.h>\n+#include <logging.h>\n+#include <util/check.h>\n+#include <util/strencodings.h>\n+#include <util/time.h>\n+\n+Sv2SignatureNoiseMessage::Sv2SignatureNoiseMessage(uint16_t version, uint32_t valid_from, uint32_t valid_to, const XOnlyPubKey& static_key, const CKey& authority_key) : m_version{version}, m_valid_from{valid_from}, m_valid_to{valid_to}, m_static_key{static_key}\n+{\n+    SignSchnorr(authority_key, m_sig);\n+}\n+\n+uint256 Sv2SignatureNoiseMessage::GetHash()\n+{\n+    DataStream ss{};\n+    ss << m_version\n+       << m_valid_from\n+       << m_valid_to\n+       << m_static_key;\n+\n+    LogTrace(BCLog::SV2, \"Certificate hashed data: %s\\n\", HexStr(ss));\n+\n+    CSHA256 hasher;\n+    hasher.Write(reinterpret_cast<unsigned char*>(&(*ss.begin())), ss.end() - ss.begin());\n+\n+    uint256 hash_output;\n+    hasher.Finalize(hash_output.begin());\n+    return hash_output;\n+}\n+\n+bool Sv2SignatureNoiseMessage::Validate(XOnlyPubKey authority_key)\n+{\n+    if (m_version > 0) {\n+        LogTrace(BCLog::SV2, \"Invalid certificate version: %d\\n\", m_version);\n+        return false;\n+    }\n+    auto now{GetTime<std::chrono::seconds>()};\n+    if (std::chrono::seconds{m_valid_from} > now) {\n+        LogTrace(BCLog::SV2, \"Certificate valid from is in the future: %d\\n\", m_valid_from);\n+        return false;\n+    }\n+    if (std::chrono::seconds{m_valid_to} < now) {\n+        LogTrace(BCLog::SV2, \"Certificate expired: %d\\n\", m_valid_to);\n+        return false;\n+    }\n+\n+    if (!authority_key.VerifySchnorr(this->GetHash(), m_sig)) {\n+        LogTrace(BCLog::SV2, \"Certificate signature is invalid\\n\");\n+        return false;\n+    }\n+    return true;\n+}\n+\n+void Sv2SignatureNoiseMessage::SignSchnorr(const CKey& authority_key, Span<unsigned char> sig)\n+{\n+    authority_key.SignSchnorr(this->GetHash(), sig, nullptr, {});\n+}\n+\n+Sv2CipherState::Sv2CipherState(uint8_t key[HASHLEN])\n+{\n+    std::copy(key, key + HASHLEN, m_key);\n+}\n+\n+bool Sv2CipherState::DecryptWithAd(Span<const std::byte> associated_data, Span<std::byte> ciphertext, Span<std::byte> plain)\n+{\n+    Assume(Sv2Cipher::EncryptedMessageSize(plain.size()) == ciphertext.size());\n+\n+    if (m_nonce == UINT64_MAX) {\n+        // This nonce value is reserved, see chapter 5.1 of the Noise paper.\n+        LogTrace(BCLog::SV2, \"Nonce exceeds maximum value\\n\");\n+        return false;\n+    }\n+    AEADChaCha20Poly1305::Nonce96 nonce = {0, m_nonce};\n+    auto key = MakeByteSpan(m_key);\n+    AEADChaCha20Poly1305 aead{key};\n+    if (!aead.Decrypt(ciphertext, associated_data, nonce, plain)) {\n+        LogTrace(BCLog::SV2, \"Message decryption failed\\n\");\n+        return false;\n+    }\n+    // Only increase nonce if decryption succeeded\n+    m_nonce++;\n+    return true;\n+}\n+\n+bool Sv2CipherState::EncryptWithAd(Span<const std::byte> associated_data, Span<const std::byte> plain, Span<std::byte> ciphertext)\n+{\n+    Assume(Sv2Cipher::EncryptedMessageSize(plain.size()) == ciphertext.size());\n+\n+    if (m_nonce == UINT64_MAX) {\n+        // This nonce value is reserved, see chapter 5.1 of the Noise paper.\n+        LogTrace(BCLog::SV2, \"Nonce exceeds maximum value\\n\");\n+        return false;\n+    }\n+    AEADChaCha20Poly1305::Nonce96 nonce = {0, m_nonce++};\n+    auto key = MakeByteSpan(m_key);\n+    AEADChaCha20Poly1305 aead{key};\n+    aead.Encrypt(plain, associated_data, nonce, ciphertext);\n+    return true;\n+}\n+\n+bool Sv2CipherState::EncryptMessage(Span<const std::byte> plain, Span<std::byte> ciphertext)\n+{\n+    Assume(ciphertext.size() == Sv2Cipher::EncryptedMessageSize(plain.size()));\n+\n+    std::vector<std::byte> ad; // No associated data\n+\n+    const size_t max_chunk_size = NOISE_MAX_CHUNK_SIZE - Poly1305::TAGLEN;\n+    size_t num_chunks = plain.size() / max_chunk_size;\n+    if (plain.size() % max_chunk_size != 0) {\n+        num_chunks++;\n+    }\n+    if (num_chunks > 1) {\n+        LogTrace(BCLog::SV2,\n+                 \"Split into %d chunks (max %d bytes)\\n\",\n+                 num_chunks, max_chunk_size);\n+    }\n+\n+    // Copy input bytes into output buffer\n+    const std::vector<std::byte> padding(Poly1305::TAGLEN, std::byte(0));\n+    for (size_t i = 0; i < num_chunks; ++i) {\n+        size_t chunk_start = i * max_chunk_size;\n+        size_t chunk_end = std::min(chunk_start + max_chunk_size, plain.size());\n+        size_t chunk_size = chunk_end - chunk_start;\n+        const auto encrypted_chunk_start = ciphertext.begin() + i * NOISE_MAX_CHUNK_SIZE;\n+        std::copy(plain.begin() + chunk_start, plain.begin() + chunk_start + chunk_size, encrypted_chunk_start);\n+        std::copy(padding.begin(), padding.end(), encrypted_chunk_start + chunk_size);\n+    }\n+\n+    // Encrypt each chunk\n+    size_t bytes_written = 0;\n+    for (size_t i = 0; i < num_chunks; ++i) {\n+        size_t chunk_size = std::min(ciphertext.size() - bytes_written, NOISE_MAX_CHUNK_SIZE);\n+        Span<std::byte> chunk = ciphertext.subspan(bytes_written, chunk_size);\n+        Span<std::byte> chunk_plain = ciphertext.subspan(bytes_written, chunk_size - Poly1305::TAGLEN);\n+        if (!EncryptWithAd(ad, chunk_plain, chunk)) {\n+            return false;\n+        }\n+        bytes_written += chunk.size();\n+    }\n+\n+    Assume(bytes_written == ciphertext.size());\n+    return true;\n+}\n+\n+bool Sv2CipherState::DecryptMessage(Span<std::byte> ciphertext, Span<std::byte> plain)\n+{\n+    Assume(Sv2Cipher::EncryptedMessageSize(plain.size()) == ciphertext.size());\n+\n+    size_t processed = 0;\n+    size_t plain_position = 0;\n+    std::vector<std::byte> ad; // No associated data\n+\n+    while (processed < ciphertext.size()) {\n+        size_t chunk_size = std::min(ciphertext.size() - processed, NOISE_MAX_CHUNK_SIZE);\n+        Span<std::byte> chunk_cipher = ciphertext.subspan(processed, chunk_size);\n+        Span<std::byte> chunk_plain = plain.subspan(plain_position, chunk_size - Poly1305::TAGLEN);\n+        if (!DecryptWithAd(ad, chunk_cipher, chunk_plain)) return false;\n+        processed += chunk_size;\n+        plain_position += chunk_size - Poly1305::TAGLEN;\n+    }\n+\n+    return true;\n+}\n+\n+void Sv2SymmetricState::MixHash(const Span<const std::byte> input)\n+{\n+    m_hash_output = (HashWriter{} << m_hash_output << input).GetSHA256();\n+}\n+\n+void Sv2SymmetricState::MixKey(const Span<const std::byte> input_key_material)\n+{\n+    uint8_t out0[Sv2CipherState::HASHLEN], out1[Sv2CipherState::HASHLEN];\n+\n+    HKDF2(input_key_material, out0, out1);\n+\n+    std::memset(m_chaining_key, 0, sizeof(m_chaining_key));\n+    std::copy(out0, out0 + Sv2CipherState::HASHLEN, m_chaining_key);\n+    m_cipher_state = Sv2CipherState{out1};\n+}\n+\n+std::string Sv2SymmetricState::GetChainingKey()\n+{\n+    return HexStr(m_chaining_key);\n+}\n+\n+void Sv2SymmetricState::LogChainingKey()\n+{\n+    LogTrace(BCLog::SV2, \"Chaining key: %s\\n\", GetChainingKey());\n+}\n+\n+void Sv2SymmetricState::HKDF2(const Span<const std::byte> input_key_material, uint8_t out0[Sv2CipherState::HASHLEN], uint8_t out1[Sv2CipherState::HASHLEN])\n+{\n+    uint8_t tmp_key[Sv2CipherState::HASHLEN];\n+    CHMAC_SHA256 tmp_mac(m_chaining_key, Sv2CipherState::HASHLEN);\n+    tmp_mac.Write(UCharCast(input_key_material.data()), input_key_material.size());\n+    tmp_mac.Finalize(tmp_key);\n+\n+    CHMAC_SHA256 out0_mac(tmp_key, Sv2CipherState::HASHLEN);\n+    uint8_t one[1]{0x1};\n+    out0_mac.Write(one, 1);\n+    out0_mac.Finalize(out0);\n+\n+    std::vector<uint8_t> in1;\n+    in1.reserve(Sv2CipherState::HASHLEN + 1);\n+    std::copy(out0, out0 + Sv2CipherState::HASHLEN, std::back_inserter(in1));\n+    in1.push_back(0x02);\n+\n+    CHMAC_SHA256 out1_mac(tmp_key, Sv2CipherState::HASHLEN);\n+    out1_mac.Write(&in1[0], in1.size());\n+    out1_mac.Finalize(out1);\n+}\n+\n+bool Sv2SymmetricState::EncryptAndHash(Span<const std::byte> plain, Span<std::byte> ciphertext)\n+{\n+    Assume(Sv2Cipher::EncryptedMessageSize(plain.size()) == ciphertext.size());\n+\n+    if (!m_cipher_state.EncryptWithAd(MakeByteSpan(m_hash_output), plain, ciphertext)) {\n+        return false;\n+    }\n+    MixHash(ciphertext);\n+    return true;\n+}\n+\n+bool Sv2SymmetricState::DecryptAndHash(Span<std::byte> ciphertext, Span<std::byte> plain)\n+{\n+    Assume(Sv2Cipher::EncryptedMessageSize(plain.size()) == ciphertext.size());\n+\n+    // The handshake requires mix hashing the cipher text NOT the decrypted\n+    // plaintext.\n+    std::vector<std::byte> ciphertext_copy;\n+    ciphertext_copy.assign(ciphertext.begin(), ciphertext.end()); // (ciphertext.size(), std::byte(0));",
      "path": "src/common/sv2_noise.cpp",
      "position": null,
      "original_position": 237,
      "commit_id": "b588ff85ae837e492269c922d0609bcd338e4752",
      "original_commit_id": "a2436955f5bde920e41e03a5db34d477bfeb04a6",
      "in_reply_to_id": null,
      "user": {
        "login": "itornaza",
        "id": 11520757,
        "node_id": "MDQ6VXNlcjExNTIwNzU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/11520757?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/itornaza",
        "html_url": "https://github.com/itornaza",
        "followers_url": "https://api.github.com/users/itornaza/followers",
        "following_url": "https://api.github.com/users/itornaza/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/itornaza/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/itornaza/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/itornaza/subscriptions",
        "organizations_url": "https://api.github.com/users/itornaza/orgs",
        "repos_url": "https://api.github.com/users/itornaza/repos",
        "events_url": "https://api.github.com/users/itornaza/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/itornaza/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: Consider removing the commented out code. Same to the following line as well.",
      "created_at": "2024-07-04T17:32:56Z",
      "updated_at": "2024-07-04T17:40:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29346#discussion_r1665954584",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1665954584"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29346"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 237,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1673772773",
      "pull_request_review_id": 2171497919,
      "id": 1673772773,
      "node_id": "PRRC_kwDOABII585jw77l",
      "diff_hunk": "@@ -0,0 +1,295 @@\n+// Copyright (c) 2023-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_COMMON_SV2_NOISE_H\n+#define BITCOIN_COMMON_SV2_NOISE_H\n+\n+#include <compat/compat.h>\n+#include <crypto/poly1305.h>\n+#include <key.h>\n+#include <pubkey.h>\n+#include <random.h>\n+#include <streams.h>\n+#include <uint256.h>\n+\n+/** The Noise Protocol Framework\n+ *  https://noiseprotocol.org/noise.html\n+ *  Revision 38, 2018-07-11\n+ *\n+ *  Stratum v2 handshake and cipher specification:\n+ *  https://github.com/stratum-mining/sv2-spec/blob/main/04-Protocol-Security.md\n+ */\n+\n+/** Section 3: All Noise messages are less than or equal to 65535 bytes in length. */\n+static constexpr size_t NOISE_MAX_CHUNK_SIZE = 65535;\n+/** Sv2 spec 4.5.2 */",
      "path": "src/common/sv2_noise.h",
      "position": null,
      "original_position": 26,
      "commit_id": "b588ff85ae837e492269c922d0609bcd338e4752",
      "original_commit_id": "a2436955f5bde920e41e03a5db34d477bfeb04a6",
      "in_reply_to_id": 1665927305,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Looks like this was duplicated from the comment below. Dropped.",
      "created_at": "2024-07-11T10:15:56Z",
      "updated_at": "2024-07-11T10:15:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29346#discussion_r1673772773",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1673772773"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29346"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 26,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1673775142",
      "pull_request_review_id": 2171501736,
      "id": 1673775142,
      "node_id": "PRRC_kwDOABII585jw8gm",
      "diff_hunk": "@@ -0,0 +1,295 @@\n+// Copyright (c) 2023-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_COMMON_SV2_NOISE_H\n+#define BITCOIN_COMMON_SV2_NOISE_H\n+\n+#include <compat/compat.h>\n+#include <crypto/poly1305.h>\n+#include <key.h>\n+#include <pubkey.h>\n+#include <random.h>\n+#include <streams.h>\n+#include <uint256.h>\n+\n+/** The Noise Protocol Framework\n+ *  https://noiseprotocol.org/noise.html\n+ *  Revision 38, 2018-07-11\n+ *\n+ *  Stratum v2 handshake and cipher specification:\n+ *  https://github.com/stratum-mining/sv2-spec/blob/main/04-Protocol-Security.md\n+ */\n+\n+/** Section 3: All Noise messages are less than or equal to 65535 bytes in length. */\n+static constexpr size_t NOISE_MAX_CHUNK_SIZE = 65535;\n+/** Sv2 spec 4.5.2 */\n+\n+/** Simple certificate for the static key signed by the authority key.\n+ * See 4.5.2 and 4.5.3 of the Stratum v2 spec.\n+ */\n+class Sv2SignatureNoiseMessage\n+{\n+public:\n+    /** Size of a Schnorr signature. */\n+    static constexpr size_t SCHNORR_SIGNATURE_SIZE = 64;\n+    /** Size of serialized message, which does not include the static key.  */\n+    static constexpr size_t SIZE = 2 + 4 + 4 + SCHNORR_SIGNATURE_SIZE;\n+\n+private:\n+    uint16_t m_version = 0;\n+    uint32_t m_valid_from = 0;\n+    uint32_t m_valid_to = 0;\n+    std::array<unsigned char, SCHNORR_SIGNATURE_SIZE> m_sig;\n+\n+    /** Hash of version, valid from/to and the static key. */\n+    uint256 GetHash();\n+    void SignSchnorr(const CKey& authority_key, Span<unsigned char> sig);\n+\n+public:\n+    Sv2SignatureNoiseMessage() = default;\n+    Sv2SignatureNoiseMessage(uint16_t version, uint32_t valid_from, uint32_t valid_to, const XOnlyPubKey& static_key, const CKey& authority_key);\n+\n+    /* The certificate serializes pubkeys in x-only format, not EllSwift. */\n+    XOnlyPubKey m_static_key = {};\n+\n+    [[nodiscard]] bool Validate(XOnlyPubKey authority_key);\n+\n+    template <typename Stream>\n+    // The static_key is signed for, but not serialized.\n+    void Serialize(Stream& s) const\n+    {\n+        s << m_version\n+          << m_valid_from\n+          << m_valid_to\n+          << m_sig;\n+    }\n+    template <typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> m_version >> m_valid_from >> m_valid_to >> m_sig;\n+    }\n+};\n+\n+/*\n+ * The CipherState uses m_key (k) and m_nonce (n) to encrypt and decrypt ciphertexts.\n+ * During the handshake phase each party has a single CipherState, but during\n+ * the transport phase each party has two CipherState objects: one for sending,\n+ * and one for receiving.\n+ *\n+ * See chapter \"5. Processing rules\" of the Noise paper.\n+ */\n+class Sv2CipherState\n+{\n+public:\n+    static constexpr size_t HASHLEN{32};\n+\n+    Sv2CipherState() = default;\n+    explicit Sv2CipherState(uint8_t key[HASHLEN]);\n+\n+    /** Decrypt message\n+     * @param[in] associated_data associated data\n+     * @param[in] ciphertext message with encrypted and authenticated chunks.\n+     * @param[out] plain message (defragmented)\n+     * @returns whether decryption succeeded\n+     */\n+    [[nodiscard]] bool DecryptWithAd(Span<const std::byte> associated_data, Span<std::byte> ciphertext, Span<std::byte> plain);\n+    /** Encrypt message\n+     * @param[in] associated_data associated data\n+     * @param[out] plain message",
      "path": "src/common/sv2_noise.h",
      "position": null,
      "original_position": 99,
      "commit_id": "b588ff85ae837e492269c922d0609bcd338e4752",
      "original_commit_id": "a2436955f5bde920e41e03a5db34d477bfeb04a6",
      "in_reply_to_id": 1665944790,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed.",
      "created_at": "2024-07-11T10:17:54Z",
      "updated_at": "2024-07-11T10:17:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29346#discussion_r1673775142",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1673775142"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29346"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 99,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1673779622",
      "pull_request_review_id": 2171508682,
      "id": 1673779622,
      "node_id": "PRRC_kwDOABII585jw9mm",
      "diff_hunk": "@@ -0,0 +1,295 @@\n+// Copyright (c) 2023-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_COMMON_SV2_NOISE_H\n+#define BITCOIN_COMMON_SV2_NOISE_H\n+\n+#include <compat/compat.h>\n+#include <crypto/poly1305.h>\n+#include <key.h>\n+#include <pubkey.h>\n+#include <random.h>\n+#include <streams.h>\n+#include <uint256.h>\n+\n+/** The Noise Protocol Framework\n+ *  https://noiseprotocol.org/noise.html\n+ *  Revision 38, 2018-07-11\n+ *\n+ *  Stratum v2 handshake and cipher specification:\n+ *  https://github.com/stratum-mining/sv2-spec/blob/main/04-Protocol-Security.md\n+ */\n+\n+/** Section 3: All Noise messages are less than or equal to 65535 bytes in length. */\n+static constexpr size_t NOISE_MAX_CHUNK_SIZE = 65535;\n+/** Sv2 spec 4.5.2 */\n+\n+/** Simple certificate for the static key signed by the authority key.\n+ * See 4.5.2 and 4.5.3 of the Stratum v2 spec.\n+ */\n+class Sv2SignatureNoiseMessage\n+{\n+public:\n+    /** Size of a Schnorr signature. */\n+    static constexpr size_t SCHNORR_SIGNATURE_SIZE = 64;\n+    /** Size of serialized message, which does not include the static key.  */\n+    static constexpr size_t SIZE = 2 + 4 + 4 + SCHNORR_SIGNATURE_SIZE;\n+\n+private:\n+    uint16_t m_version = 0;\n+    uint32_t m_valid_from = 0;\n+    uint32_t m_valid_to = 0;\n+    std::array<unsigned char, SCHNORR_SIGNATURE_SIZE> m_sig;\n+\n+    /** Hash of version, valid from/to and the static key. */\n+    uint256 GetHash();\n+    void SignSchnorr(const CKey& authority_key, Span<unsigned char> sig);\n+\n+public:\n+    Sv2SignatureNoiseMessage() = default;\n+    Sv2SignatureNoiseMessage(uint16_t version, uint32_t valid_from, uint32_t valid_to, const XOnlyPubKey& static_key, const CKey& authority_key);\n+\n+    /* The certificate serializes pubkeys in x-only format, not EllSwift. */\n+    XOnlyPubKey m_static_key = {};\n+\n+    [[nodiscard]] bool Validate(XOnlyPubKey authority_key);\n+\n+    template <typename Stream>\n+    // The static_key is signed for, but not serialized.\n+    void Serialize(Stream& s) const\n+    {\n+        s << m_version\n+          << m_valid_from\n+          << m_valid_to\n+          << m_sig;\n+    }\n+    template <typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> m_version >> m_valid_from >> m_valid_to >> m_sig;\n+    }\n+};\n+\n+/*\n+ * The CipherState uses m_key (k) and m_nonce (n) to encrypt and decrypt ciphertexts.\n+ * During the handshake phase each party has a single CipherState, but during\n+ * the transport phase each party has two CipherState objects: one for sending,\n+ * and one for receiving.\n+ *\n+ * See chapter \"5. Processing rules\" of the Noise paper.\n+ */\n+class Sv2CipherState\n+{\n+public:\n+    static constexpr size_t HASHLEN{32};\n+\n+    Sv2CipherState() = default;\n+    explicit Sv2CipherState(uint8_t key[HASHLEN]);\n+\n+    /** Decrypt message\n+     * @param[in] associated_data associated data\n+     * @param[in] ciphertext message with encrypted and authenticated chunks.\n+     * @param[out] plain message (defragmented)\n+     * @returns whether decryption succeeded\n+     */\n+    [[nodiscard]] bool DecryptWithAd(Span<const std::byte> associated_data, Span<std::byte> ciphertext, Span<std::byte> plain);\n+    /** Encrypt message\n+     * @param[in] associated_data associated data\n+     * @param[out] plain message\n+     * @param[in] ciphertext message with encrypted and authenticated chunks.\n+     * @returns whether decryption succeeded\n+     */\n+    [[nodiscard]] bool EncryptWithAd(Span<const std::byte> associated_data, Span<const std::byte> plain, Span<std::byte> ciphertext);\n+\n+    /** The message will be chunked in NOISE_MAX_CHUNK_SIZE parts and expanded\n+     *  by 16 bytes per chunk for its MAC.\n+     *\n+     * @param[in] plain message. Can't point to the same memory location as ciphertext,\n+     *                  because each encrypted message chunk would override the\n+     *                  start of the next plain text chunk.\n+     * @param[out] ciphertext   message with encrypted and authenticated chunks\n+     * @return whether encryption succeeded. Only fails if nonce is uint64_max.\n+     */\n+    [[nodiscard]] bool EncryptMessage(Span<const std::byte> plain, Span<std::byte> ciphertext);\n+\n+    /** Decrypt message.\n+     *\n+     * @param[in] ciphertext encrypted message\n+     * @param[out] plain decrypted message. May point to the same memory location\n+     *                  as ciphertext. The result is defragmented.\n+     */\n+    [[nodiscard]] bool DecryptMessage(Span<std::byte> ciphertext, Span<std::byte> plain);\n+\n+private:\n+    uint8_t m_key[HASHLEN];\n+    uint64_t m_nonce = 0;\n+};\n+\n+/*\n+ * A SymmetricState object contains a CipherState plus m_chaining_key (ck) and\n+ * m_hash_output (h) variables. It is so-named because it encapsulates all the\n+ * \"symmetric crypto\" used by Noise. During the handshake phase each party has\n+ * a single SymmetricState, which can be deleted once the handshake is finished.\n+ *\n+ * See chapter \"5. Processing rules\" of the Noise paper.\n+ */\n+class Sv2SymmetricState\n+{\n+public:\n+    // Sha256 hash of the ascii encoding - \"Noise_NX_Secp256k1+EllSwift_ChaChaPoly_SHA256\".\n+    // This is the first step required when setting up the chaining key.\n+    static constexpr std::array<uint8_t, 32> PROTOCOL_NAME_HASH = {\n+        46, 180, 120, 129, 32, 142, 158, 238, 31, 102, 159, 103, 198, 110, 231, 14,\n+        169, 234, 136, 9, 13, 80, 63, 232, 48, 220, 75, 200, 62, 41, 191, 16};\n+\n+    // The double hash of protocol name \"Noise_NX_EllSwiftXonly_ChaChaPoly_SHA256\".\n+    static constexpr std::array<uint8_t, 32> PROTOCOL_NAME_DOUBLE_HASH = {146, 47, 163, 46, 79, 72, 124, 13, 89, 202, 163, 190, 215, 137, 156, 227,\n+                                                                          217, 141, 183, 225, 61, 189, 59, 124, 242, 210, 61, 212, 51, 220, 97, 4};\n+\n+    Sv2SymmetricState()\n+    {\n+        std::memcpy(m_chaining_key, PROTOCOL_NAME_HASH.data(), PROTOCOL_NAME_HASH.size());\n+    }\n+\n+    void MixHash(const Span<const std::byte> input);\n+    void MixKey(const Span<const std::byte> input_key_material);\n+    [[nodiscard]] bool EncryptAndHash(Span<const std::byte> plain, Span<std::byte> ciphertext);\n+    [[nodiscard]] bool DecryptAndHash(Span<std::byte> ciphertext, Span<std::byte> plain);\n+    std::array<Sv2CipherState, 2> Split();\n+\n+    uint256 GetHashOutput();\n+\n+    /* For testing */\n+    void LogChainingKey();\n+    std::string GetChainingKey();\n+\n+private:\n+    uint8_t m_chaining_key[Sv2CipherState::HASHLEN];\n+    uint256 m_hash_output = uint256(PROTOCOL_NAME_DOUBLE_HASH);\n+    Sv2CipherState m_cipher_state;\n+\n+    void HKDF2(const Span<const std::byte> input_key_material, uint8_t out0[Sv2CipherState::HASHLEN], uint8_t out1[Sv2CipherState::HASHLEN]);\n+};\n+\n+/*\n+ * A HandshakeState object contains a SymmetricState plus DH variables (s, e, rs, re)\n+ * and a variable representing the handshake pattern. During the handshake phase\n+ * each party has a single HandshakeState, which can be deleted once the handshake\n+ * is finished.\n+ *\n+ * See chapter \"5. Processing rules\" of the Noise paper.\n+ */\n+\n+class Sv2HandshakeState\n+{\n+public:\n+    static constexpr size_t ELLSWIFT_PUB_KEY_SIZE{64};\n+    static constexpr size_t ECDH_OUTPUT_SIZE{32};\n+\n+    static constexpr size_t HANDSHAKE_STEP2_SIZE = ELLSWIFT_PUB_KEY_SIZE + ELLSWIFT_PUB_KEY_SIZE +\n+                                                   Poly1305::TAGLEN + Sv2SignatureNoiseMessage::SIZE + Poly1305::TAGLEN;\n+\n+    /*\n+     * If we are the initiator m_authority_pubkey must be set in order to verify\n+     * the received certificate.\n+     */\n+    Sv2HandshakeState(CKey&& static_key,\n+                      XOnlyPubKey authority_pubkey) : m_static_key{static_key},\n+                                                        m_authority_pubkey{authority_pubkey}\n+    {\n+        m_our_static_ellswift_pk = static_key.EllSwiftCreate(MakeByteSpan(GetRandHash()));\n+    };\n+\n+    /*\n+     * If we are the responder, the certificate must be set\n+     */\n+    Sv2HandshakeState(CKey&& static_key,\n+                      Sv2SignatureNoiseMessage&& certificate) : m_static_key{static_key},\n+                                                                m_certificate{certificate}\n+    {\n+        m_our_static_ellswift_pk = static_key.EllSwiftCreate(MakeByteSpan(GetRandHash()));\n+    };\n+\n+    /** Handshake step 1 for initiator: -> e */\n+    void WriteMsgEphemeralPK(Span<std::byte> msg);\n+    /** Handshake step 1 for responder: -> e */\n+    void ReadMsgEphemeralPK(Span<std::byte> msg);\n+    /** During handshake step 2, put our ephmeral key, static key\n+     * and certificate in the buffer: <- e, ee, s, es, SIGNATURE_NOISE_MESSAGE\n+     */\n+    void WriteMsgES(Span<std::byte> msg);\n+    /** During handshake step 2, read the remote ephmeral key, static key\n+     * and certificate. Verify their certificate.\n+     * <- e, ee, s, es, SIGNATURE_NOISE_MESSAGE\n+     */\n+    [[nodiscard]] bool ReadMsgES(Span<std::byte> msg);\n+\n+    std::array<Sv2CipherState, 2> SplitSymmetricState();\n+    uint256 GetHashOutput();\n+\n+    void SetEphemeralKey(CKey&& key);\n+\n+private:\n+    /** Our static key (s) */\n+    CKey m_static_key;\n+    /** EllSwift encoded static key, for optimized ECDH */\n+    EllSwiftPubKey m_our_static_ellswift_pk;",
      "path": "src/common/sv2_noise.h",
      "position": null,
      "original_position": 237,
      "commit_id": "b588ff85ae837e492269c922d0609bcd338e4752",
      "original_commit_id": "a2436955f5bde920e41e03a5db34d477bfeb04a6",
      "in_reply_to_id": 1665952724,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2024-07-11T10:21:34Z",
      "updated_at": "2024-07-11T10:21:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29346#discussion_r1673779622",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1673779622"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29346"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 237,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1702820614",
      "pull_request_review_id": 2217099632,
      "id": 1702820614,
      "node_id": "PRRC_kwDOABII585lfvsG",
      "diff_hunk": "@@ -0,0 +1,298 @@\n+// Copyright (c) 2023-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_COMMON_SV2_NOISE_H\n+#define BITCOIN_COMMON_SV2_NOISE_H\n+\n+#include <compat/compat.h>\n+#include <crypto/poly1305.h>\n+#include <key.h>\n+#include <pubkey.h>\n+#include <random.h>\n+#include <streams.h>\n+#include <uint256.h>\n+\n+/** The Noise Protocol Framework\n+ *  https://noiseprotocol.org/noise.html\n+ *  Revision 38, 2018-07-11\n+ *\n+ *  Stratum v2 handshake and cipher specification:\n+ *  https://github.com/stratum-mining/sv2-spec/blob/main/04-Protocol-Security.md\n+ */\n+\n+/** Section 3: All Noise messages are less than or equal to 65535 bytes in length. */\n+static constexpr size_t NOISE_MAX_CHUNK_SIZE = 65535;\n+\n+/** Simple certificate for the static key signed by the authority key.\n+ * See 4.5.2 and 4.5.3 of the Stratum v2 spec.\n+ */\n+class Sv2SignatureNoiseMessage\n+{\n+public:\n+    /** Size of a Schnorr signature. */\n+    static constexpr size_t SCHNORR_SIGNATURE_SIZE = 64;\n+    /** Size of serialized message, which does not include the static key.  */\n+    static constexpr size_t SIZE = 2 + 4 + 4 + SCHNORR_SIGNATURE_SIZE;\n+\n+private:\n+    uint16_t m_version = 0;\n+    uint32_t m_valid_from = 0;\n+    uint32_t m_valid_to = 0;\n+    std::array<unsigned char, SCHNORR_SIGNATURE_SIZE> m_sig;\n+\n+    /** Hash of version, valid from/to and the static key. */\n+    uint256 GetHash();\n+    void SignSchnorr(const CKey& authority_key, Span<unsigned char> sig);\n+\n+public:\n+    Sv2SignatureNoiseMessage() = default;\n+    Sv2SignatureNoiseMessage(uint16_t version, uint32_t valid_from, uint32_t valid_to, const XOnlyPubKey& static_key, const CKey& authority_key);\n+\n+    /* The certificate serializes pubkeys in x-only format, not EllSwift. */\n+    XOnlyPubKey m_static_key = {};\n+\n+    [[nodiscard]] bool Validate(XOnlyPubKey authority_key);\n+\n+    template <typename Stream>\n+    // The static_key is signed for, but not serialized.\n+    void Serialize(Stream& s) const\n+    {\n+        s << m_version\n+          << m_valid_from\n+          << m_valid_to\n+          << m_sig;\n+    }\n+    template <typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> m_version\n+          >> m_valid_from\n+          >> m_valid_to\n+          >> m_sig;\n+    }\n+};\n+\n+/*\n+ * The CipherState uses m_key (k) and m_nonce (n) to encrypt and decrypt ciphertexts.\n+ * During the handshake phase each party has a single CipherState, but during\n+ * the transport phase each party has two CipherState objects: one for sending,\n+ * and one for receiving.\n+ *\n+ * See chapter \"5. Processing rules\" of the Noise paper.\n+ */\n+class Sv2CipherState\n+{\n+public:\n+    static constexpr size_t HASHLEN{32};\n+\n+    Sv2CipherState() = default;\n+    explicit Sv2CipherState(uint8_t key[HASHLEN]);\n+\n+    /** Decrypt message\n+     * @param[in] associated_data associated data\n+     * @param[in] ciphertext message with encrypted and authenticated chunks.\n+     * @param[out] plain message (defragmented)\n+     * @returns whether decryption succeeded\n+     */\n+    [[nodiscard]] bool DecryptWithAd(Span<const std::byte> associated_data, Span<std::byte> ciphertext, Span<std::byte> plain);\n+\n+    /** Encrypt message\n+     * @param[in] associated_data associated data\n+     * @param[in] plain message\n+     * @param[out] ciphertext message with encrypted and authenticated chunks.\n+     * @returns whether decryption succeeded\n+     */\n+    [[nodiscard]] bool EncryptWithAd(Span<const std::byte> associated_data, Span<const std::byte> plain, Span<std::byte> ciphertext);\n+\n+    /** The message will be chunked in NOISE_MAX_CHUNK_SIZE parts and expanded\n+     *  by 16 bytes per chunk for its MAC.\n+     *\n+     * @param[in] plain message. Can't point to the same memory location as ciphertext,\n+     *                  because each encrypted message chunk would override the\n+     *                  start of the next plain text chunk.\n+     * @param[out] ciphertext   message with encrypted and authenticated chunks\n+     * @return whether encryption succeeded. Only fails if nonce is uint64_max.\n+     */\n+    [[nodiscard]] bool EncryptMessage(Span<const std::byte> plain, Span<std::byte> ciphertext);\n+\n+    /** Decrypt message.\n+     *\n+     * @param[in] ciphertext encrypted message\n+     * @param[out] plain decrypted message. May point to the same memory location\n+     *                  as ciphertext. The result is defragmented.\n+     */\n+    [[nodiscard]] bool DecryptMessage(Span<std::byte> ciphertext, Span<std::byte> plain);\n+\n+private:\n+    uint8_t m_key[HASHLEN];",
      "path": "src/common/sv2_noise.h",
      "position": null,
      "original_position": 128,
      "commit_id": "b588ff85ae837e492269c922d0609bcd338e4752",
      "original_commit_id": "f69fd623ad97d1d4aacaa81b479f9182888d994a",
      "in_reply_to_id": null,
      "user": {
        "login": "itornaza",
        "id": 11520757,
        "node_id": "MDQ6VXNlcjExNTIwNzU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/11520757?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/itornaza",
        "html_url": "https://github.com/itornaza",
        "followers_url": "https://api.github.com/users/itornaza/followers",
        "following_url": "https://api.github.com/users/itornaza/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/itornaza/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/itornaza/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/itornaza/subscriptions",
        "organizations_url": "https://api.github.com/users/itornaza/orgs",
        "repos_url": "https://api.github.com/users/itornaza/repos",
        "events_url": "https://api.github.com/users/itornaza/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/itornaza/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Cpp Core Guidelines explicitly want us to avoid C-Arrays `SL.Con.1` and prefer STL's`std::array` which does not degenerate to a pointer and knows its size. Would it be better for us here to use `std::array<uint8_t, HASHLEN> m_key` or it is not justified in our context?\r\n\r\nUpdate: I gave it a try on my fork's branch `pr29346-carray-to-stl`   2d28478d0791689070bd23df5b5640e9dae6f786 if you want to cherry pick.",
      "created_at": "2024-08-03T16:30:37Z",
      "updated_at": "2024-08-03T17:47:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29346#discussion_r1702820614",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1702820614"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29346"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 128,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1702840668",
      "pull_request_review_id": 2217137222,
      "id": 1702840668,
      "node_id": "PRRC_kwDOABII585lf0lc",
      "diff_hunk": "@@ -0,0 +1,298 @@\n+// Copyright (c) 2023-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_COMMON_SV2_NOISE_H\n+#define BITCOIN_COMMON_SV2_NOISE_H\n+\n+#include <compat/compat.h>\n+#include <crypto/poly1305.h>\n+#include <key.h>\n+#include <pubkey.h>\n+#include <random.h>\n+#include <streams.h>\n+#include <uint256.h>\n+\n+/** The Noise Protocol Framework\n+ *  https://noiseprotocol.org/noise.html\n+ *  Revision 38, 2018-07-11\n+ *\n+ *  Stratum v2 handshake and cipher specification:\n+ *  https://github.com/stratum-mining/sv2-spec/blob/main/04-Protocol-Security.md\n+ */\n+\n+/** Section 3: All Noise messages are less than or equal to 65535 bytes in length. */\n+static constexpr size_t NOISE_MAX_CHUNK_SIZE = 65535;\n+\n+/** Simple certificate for the static key signed by the authority key.\n+ * See 4.5.2 and 4.5.3 of the Stratum v2 spec.\n+ */\n+class Sv2SignatureNoiseMessage\n+{\n+public:\n+    /** Size of a Schnorr signature. */\n+    static constexpr size_t SCHNORR_SIGNATURE_SIZE = 64;\n+    /** Size of serialized message, which does not include the static key.  */\n+    static constexpr size_t SIZE = 2 + 4 + 4 + SCHNORR_SIGNATURE_SIZE;\n+\n+private:\n+    uint16_t m_version = 0;\n+    uint32_t m_valid_from = 0;\n+    uint32_t m_valid_to = 0;\n+    std::array<unsigned char, SCHNORR_SIGNATURE_SIZE> m_sig;\n+\n+    /** Hash of version, valid from/to and the static key. */\n+    uint256 GetHash();\n+    void SignSchnorr(const CKey& authority_key, Span<unsigned char> sig);\n+\n+public:\n+    Sv2SignatureNoiseMessage() = default;\n+    Sv2SignatureNoiseMessage(uint16_t version, uint32_t valid_from, uint32_t valid_to, const XOnlyPubKey& static_key, const CKey& authority_key);\n+\n+    /* The certificate serializes pubkeys in x-only format, not EllSwift. */\n+    XOnlyPubKey m_static_key = {};\n+\n+    [[nodiscard]] bool Validate(XOnlyPubKey authority_key);\n+\n+    template <typename Stream>\n+    // The static_key is signed for, but not serialized.\n+    void Serialize(Stream& s) const\n+    {\n+        s << m_version\n+          << m_valid_from\n+          << m_valid_to\n+          << m_sig;\n+    }\n+    template <typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> m_version\n+          >> m_valid_from\n+          >> m_valid_to\n+          >> m_sig;\n+    }\n+};\n+\n+/*\n+ * The CipherState uses m_key (k) and m_nonce (n) to encrypt and decrypt ciphertexts.\n+ * During the handshake phase each party has a single CipherState, but during\n+ * the transport phase each party has two CipherState objects: one for sending,\n+ * and one for receiving.\n+ *\n+ * See chapter \"5. Processing rules\" of the Noise paper.\n+ */\n+class Sv2CipherState\n+{\n+public:\n+    static constexpr size_t HASHLEN{32};\n+\n+    Sv2CipherState() = default;\n+    explicit Sv2CipherState(uint8_t key[HASHLEN]);\n+\n+    /** Decrypt message\n+     * @param[in] associated_data associated data\n+     * @param[in] ciphertext message with encrypted and authenticated chunks.\n+     * @param[out] plain message (defragmented)\n+     * @returns whether decryption succeeded\n+     */\n+    [[nodiscard]] bool DecryptWithAd(Span<const std::byte> associated_data, Span<std::byte> ciphertext, Span<std::byte> plain);\n+\n+    /** Encrypt message\n+     * @param[in] associated_data associated data\n+     * @param[in] plain message\n+     * @param[out] ciphertext message with encrypted and authenticated chunks.\n+     * @returns whether decryption succeeded\n+     */\n+    [[nodiscard]] bool EncryptWithAd(Span<const std::byte> associated_data, Span<const std::byte> plain, Span<std::byte> ciphertext);\n+\n+    /** The message will be chunked in NOISE_MAX_CHUNK_SIZE parts and expanded\n+     *  by 16 bytes per chunk for its MAC.\n+     *\n+     * @param[in] plain message. Can't point to the same memory location as ciphertext,\n+     *                  because each encrypted message chunk would override the\n+     *                  start of the next plain text chunk.\n+     * @param[out] ciphertext   message with encrypted and authenticated chunks\n+     * @return whether encryption succeeded. Only fails if nonce is uint64_max.\n+     */\n+    [[nodiscard]] bool EncryptMessage(Span<const std::byte> plain, Span<std::byte> ciphertext);\n+\n+    /** Decrypt message.\n+     *\n+     * @param[in] ciphertext encrypted message\n+     * @param[out] plain decrypted message. May point to the same memory location\n+     *                  as ciphertext. The result is defragmented.\n+     */\n+    [[nodiscard]] bool DecryptMessage(Span<std::byte> ciphertext, Span<std::byte> plain);\n+\n+private:\n+    uint8_t m_key[HASHLEN];\n+    uint64_t m_nonce = 0;\n+};\n+\n+/*\n+ * A SymmetricState object contains a CipherState plus m_chaining_key (ck) and\n+ * m_hash_output (h) variables. It is so-named because it encapsulates all the\n+ * \"symmetric crypto\" used by Noise. During the handshake phase each party has\n+ * a single SymmetricState, which can be deleted once the handshake is finished.\n+ *\n+ * See chapter \"5. Processing rules\" of the Noise paper.\n+ */\n+class Sv2SymmetricState\n+{\n+public:\n+    // Sha256 hash of the ascii encoding - \"Noise_NX_Secp256k1+EllSwift_ChaChaPoly_SHA256\".\n+    // This is the first step required when setting up the chaining key.\n+    static constexpr std::array<uint8_t, 32> PROTOCOL_NAME_HASH = {\n+        46, 180, 120, 129, 32, 142, 158, 238, 31, 102, 159, 103, 198, 110, 231, 14,\n+        169, 234, 136, 9, 13, 80, 63, 232, 48, 220, 75, 200, 62, 41, 191, 16};\n+\n+    // The double hash of protocol name \"Noise_NX_EllSwiftXonly_ChaChaPoly_SHA256\".\n+    static constexpr std::array<uint8_t, 32> PROTOCOL_NAME_DOUBLE_HASH = {146, 47, 163, 46, 79, 72, 124, 13, 89, 202, 163, 190, 215, 137, 156, 227,\n+                                                                          217, 141, 183, 225, 61, 189, 59, 124, 242, 210, 61, 212, 51, 220, 97, 4};\n+\n+    Sv2SymmetricState()\n+    {\n+        std::memcpy(m_chaining_key, PROTOCOL_NAME_HASH.data(), PROTOCOL_NAME_HASH.size());\n+    }\n+\n+    void MixHash(const Span<const std::byte> input);\n+    void MixKey(const Span<const std::byte> input_key_material);\n+    [[nodiscard]] bool EncryptAndHash(Span<const std::byte> plain, Span<std::byte> ciphertext);\n+    [[nodiscard]] bool DecryptAndHash(Span<std::byte> ciphertext, Span<std::byte> plain);\n+    std::array<Sv2CipherState, 2> Split();\n+\n+    uint256 GetHashOutput();\n+\n+    /* For testing */\n+    void LogChainingKey();\n+    std::string GetChainingKey();\n+\n+private:\n+    uint8_t m_chaining_key[Sv2CipherState::HASHLEN];",
      "path": "src/common/sv2_noise.h",
      "position": null,
      "original_position": 171,
      "commit_id": "b588ff85ae837e492269c922d0609bcd338e4752",
      "original_commit_id": "f69fd623ad97d1d4aacaa81b479f9182888d994a",
      "in_reply_to_id": null,
      "user": {
        "login": "itornaza",
        "id": 11520757,
        "node_id": "MDQ6VXNlcjExNTIwNzU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/11520757?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/itornaza",
        "html_url": "https://github.com/itornaza",
        "followers_url": "https://api.github.com/users/itornaza/followers",
        "following_url": "https://api.github.com/users/itornaza/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/itornaza/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/itornaza/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/itornaza/subscriptions",
        "organizations_url": "https://api.github.com/users/itornaza/orgs",
        "repos_url": "https://api.github.com/users/itornaza/repos",
        "events_url": "https://api.github.com/users/itornaza/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/itornaza/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Same here",
      "created_at": "2024-08-03T16:46:50Z",
      "updated_at": "2024-08-03T16:46:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29346#discussion_r1702840668",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1702840668"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29346"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 171,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1702854021",
      "pull_request_review_id": 2217162648,
      "id": 1702854021,
      "node_id": "PRRC_kwDOABII585lf32F",
      "diff_hunk": "@@ -0,0 +1,298 @@\n+// Copyright (c) 2023-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_COMMON_SV2_NOISE_H\n+#define BITCOIN_COMMON_SV2_NOISE_H\n+\n+#include <compat/compat.h>\n+#include <crypto/poly1305.h>\n+#include <key.h>\n+#include <pubkey.h>\n+#include <random.h>\n+#include <streams.h>\n+#include <uint256.h>\n+\n+/** The Noise Protocol Framework\n+ *  https://noiseprotocol.org/noise.html\n+ *  Revision 38, 2018-07-11\n+ *\n+ *  Stratum v2 handshake and cipher specification:\n+ *  https://github.com/stratum-mining/sv2-spec/blob/main/04-Protocol-Security.md\n+ */\n+\n+/** Section 3: All Noise messages are less than or equal to 65535 bytes in length. */\n+static constexpr size_t NOISE_MAX_CHUNK_SIZE = 65535;\n+\n+/** Simple certificate for the static key signed by the authority key.\n+ * See 4.5.2 and 4.5.3 of the Stratum v2 spec.\n+ */\n+class Sv2SignatureNoiseMessage\n+{\n+public:\n+    /** Size of a Schnorr signature. */\n+    static constexpr size_t SCHNORR_SIGNATURE_SIZE = 64;\n+    /** Size of serialized message, which does not include the static key.  */\n+    static constexpr size_t SIZE = 2 + 4 + 4 + SCHNORR_SIGNATURE_SIZE;\n+\n+private:\n+    uint16_t m_version = 0;\n+    uint32_t m_valid_from = 0;\n+    uint32_t m_valid_to = 0;\n+    std::array<unsigned char, SCHNORR_SIGNATURE_SIZE> m_sig;\n+\n+    /** Hash of version, valid from/to and the static key. */\n+    uint256 GetHash();\n+    void SignSchnorr(const CKey& authority_key, Span<unsigned char> sig);\n+\n+public:\n+    Sv2SignatureNoiseMessage() = default;\n+    Sv2SignatureNoiseMessage(uint16_t version, uint32_t valid_from, uint32_t valid_to, const XOnlyPubKey& static_key, const CKey& authority_key);\n+\n+    /* The certificate serializes pubkeys in x-only format, not EllSwift. */\n+    XOnlyPubKey m_static_key = {};\n+\n+    [[nodiscard]] bool Validate(XOnlyPubKey authority_key);\n+\n+    template <typename Stream>\n+    // The static_key is signed for, but not serialized.\n+    void Serialize(Stream& s) const\n+    {\n+        s << m_version\n+          << m_valid_from\n+          << m_valid_to\n+          << m_sig;\n+    }\n+    template <typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> m_version\n+          >> m_valid_from\n+          >> m_valid_to\n+          >> m_sig;\n+    }\n+};\n+\n+/*\n+ * The CipherState uses m_key (k) and m_nonce (n) to encrypt and decrypt ciphertexts.\n+ * During the handshake phase each party has a single CipherState, but during\n+ * the transport phase each party has two CipherState objects: one for sending,\n+ * and one for receiving.\n+ *\n+ * See chapter \"5. Processing rules\" of the Noise paper.\n+ */\n+class Sv2CipherState\n+{\n+public:\n+    static constexpr size_t HASHLEN{32};\n+\n+    Sv2CipherState() = default;\n+    explicit Sv2CipherState(uint8_t key[HASHLEN]);\n+\n+    /** Decrypt message\n+     * @param[in] associated_data associated data\n+     * @param[in] ciphertext message with encrypted and authenticated chunks.\n+     * @param[out] plain message (defragmented)\n+     * @returns whether decryption succeeded\n+     */\n+    [[nodiscard]] bool DecryptWithAd(Span<const std::byte> associated_data, Span<std::byte> ciphertext, Span<std::byte> plain);\n+\n+    /** Encrypt message\n+     * @param[in] associated_data associated data\n+     * @param[in] plain message\n+     * @param[out] ciphertext message with encrypted and authenticated chunks.\n+     * @returns whether decryption succeeded\n+     */\n+    [[nodiscard]] bool EncryptWithAd(Span<const std::byte> associated_data, Span<const std::byte> plain, Span<std::byte> ciphertext);\n+\n+    /** The message will be chunked in NOISE_MAX_CHUNK_SIZE parts and expanded\n+     *  by 16 bytes per chunk for its MAC.\n+     *\n+     * @param[in] plain message. Can't point to the same memory location as ciphertext,\n+     *                  because each encrypted message chunk would override the\n+     *                  start of the next plain text chunk.\n+     * @param[out] ciphertext   message with encrypted and authenticated chunks\n+     * @return whether encryption succeeded. Only fails if nonce is uint64_max.\n+     */\n+    [[nodiscard]] bool EncryptMessage(Span<const std::byte> plain, Span<std::byte> ciphertext);\n+\n+    /** Decrypt message.\n+     *\n+     * @param[in] ciphertext encrypted message\n+     * @param[out] plain decrypted message. May point to the same memory location\n+     *                  as ciphertext. The result is defragmented.\n+     */\n+    [[nodiscard]] bool DecryptMessage(Span<std::byte> ciphertext, Span<std::byte> plain);\n+\n+private:\n+    uint8_t m_key[HASHLEN];",
      "path": "src/common/sv2_noise.h",
      "position": null,
      "original_position": 128,
      "commit_id": "b588ff85ae837e492269c922d0609bcd338e4752",
      "original_commit_id": "f69fd623ad97d1d4aacaa81b479f9182888d994a",
      "in_reply_to_id": 1702820614,
      "user": {
        "login": "Brock124590",
        "id": 141978268,
        "node_id": "U_kgDOCHZqnA",
        "avatar_url": "https://avatars.githubusercontent.com/u/141978268?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Brock124590",
        "html_url": "https://github.com/Brock124590",
        "followers_url": "https://api.github.com/users/Brock124590/followers",
        "following_url": "https://api.github.com/users/Brock124590/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Brock124590/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Brock124590/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Brock124590/subscriptions",
        "organizations_url": "https://api.github.com/users/Brock124590/orgs",
        "repos_url": "https://api.github.com/users/Brock124590/repos",
        "events_url": "https://api.github.com/users/Brock124590/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Brock124590/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Okay ",
      "created_at": "2024-08-03T17:53:48Z",
      "updated_at": "2024-08-03T17:53:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29346#discussion_r1702854021",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1702854021"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29346"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 128,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1709228465",
      "pull_request_review_id": 2227540849,
      "id": 1709228465,
      "node_id": "PRRC_kwDOABII585l4MGx",
      "diff_hunk": "@@ -0,0 +1,298 @@\n+// Copyright (c) 2023-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_COMMON_SV2_NOISE_H\n+#define BITCOIN_COMMON_SV2_NOISE_H\n+\n+#include <compat/compat.h>\n+#include <crypto/poly1305.h>\n+#include <key.h>\n+#include <pubkey.h>\n+#include <random.h>\n+#include <streams.h>\n+#include <uint256.h>\n+\n+/** The Noise Protocol Framework\n+ *  https://noiseprotocol.org/noise.html\n+ *  Revision 38, 2018-07-11\n+ *\n+ *  Stratum v2 handshake and cipher specification:\n+ *  https://github.com/stratum-mining/sv2-spec/blob/main/04-Protocol-Security.md\n+ */\n+\n+/** Section 3: All Noise messages are less than or equal to 65535 bytes in length. */\n+static constexpr size_t NOISE_MAX_CHUNK_SIZE = 65535;\n+\n+/** Simple certificate for the static key signed by the authority key.\n+ * See 4.5.2 and 4.5.3 of the Stratum v2 spec.\n+ */\n+class Sv2SignatureNoiseMessage\n+{\n+public:\n+    /** Size of a Schnorr signature. */\n+    static constexpr size_t SCHNORR_SIGNATURE_SIZE = 64;\n+    /** Size of serialized message, which does not include the static key.  */\n+    static constexpr size_t SIZE = 2 + 4 + 4 + SCHNORR_SIGNATURE_SIZE;\n+\n+private:\n+    uint16_t m_version = 0;\n+    uint32_t m_valid_from = 0;\n+    uint32_t m_valid_to = 0;\n+    std::array<unsigned char, SCHNORR_SIGNATURE_SIZE> m_sig;\n+\n+    /** Hash of version, valid from/to and the static key. */\n+    uint256 GetHash();\n+    void SignSchnorr(const CKey& authority_key, Span<unsigned char> sig);\n+\n+public:\n+    Sv2SignatureNoiseMessage() = default;\n+    Sv2SignatureNoiseMessage(uint16_t version, uint32_t valid_from, uint32_t valid_to, const XOnlyPubKey& static_key, const CKey& authority_key);\n+\n+    /* The certificate serializes pubkeys in x-only format, not EllSwift. */\n+    XOnlyPubKey m_static_key = {};\n+\n+    [[nodiscard]] bool Validate(XOnlyPubKey authority_key);\n+\n+    template <typename Stream>\n+    // The static_key is signed for, but not serialized.\n+    void Serialize(Stream& s) const\n+    {\n+        s << m_version\n+          << m_valid_from\n+          << m_valid_to\n+          << m_sig;\n+    }\n+    template <typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> m_version\n+          >> m_valid_from\n+          >> m_valid_to\n+          >> m_sig;\n+    }\n+};\n+\n+/*\n+ * The CipherState uses m_key (k) and m_nonce (n) to encrypt and decrypt ciphertexts.\n+ * During the handshake phase each party has a single CipherState, but during\n+ * the transport phase each party has two CipherState objects: one for sending,\n+ * and one for receiving.\n+ *\n+ * See chapter \"5. Processing rules\" of the Noise paper.\n+ */\n+class Sv2CipherState\n+{\n+public:\n+    static constexpr size_t HASHLEN{32};\n+\n+    Sv2CipherState() = default;\n+    explicit Sv2CipherState(uint8_t key[HASHLEN]);\n+\n+    /** Decrypt message\n+     * @param[in] associated_data associated data\n+     * @param[in] ciphertext message with encrypted and authenticated chunks.\n+     * @param[out] plain message (defragmented)\n+     * @returns whether decryption succeeded\n+     */\n+    [[nodiscard]] bool DecryptWithAd(Span<const std::byte> associated_data, Span<std::byte> ciphertext, Span<std::byte> plain);\n+\n+    /** Encrypt message\n+     * @param[in] associated_data associated data\n+     * @param[in] plain message\n+     * @param[out] ciphertext message with encrypted and authenticated chunks.\n+     * @returns whether decryption succeeded\n+     */\n+    [[nodiscard]] bool EncryptWithAd(Span<const std::byte> associated_data, Span<const std::byte> plain, Span<std::byte> ciphertext);\n+\n+    /** The message will be chunked in NOISE_MAX_CHUNK_SIZE parts and expanded\n+     *  by 16 bytes per chunk for its MAC.\n+     *\n+     * @param[in] plain message. Can't point to the same memory location as ciphertext,\n+     *                  because each encrypted message chunk would override the\n+     *                  start of the next plain text chunk.\n+     * @param[out] ciphertext   message with encrypted and authenticated chunks\n+     * @return whether encryption succeeded. Only fails if nonce is uint64_max.\n+     */\n+    [[nodiscard]] bool EncryptMessage(Span<const std::byte> plain, Span<std::byte> ciphertext);\n+\n+    /** Decrypt message.\n+     *\n+     * @param[in] ciphertext encrypted message\n+     * @param[out] plain decrypted message. May point to the same memory location\n+     *                  as ciphertext. The result is defragmented.\n+     */\n+    [[nodiscard]] bool DecryptMessage(Span<std::byte> ciphertext, Span<std::byte> plain);\n+\n+private:\n+    uint8_t m_key[HASHLEN];",
      "path": "src/common/sv2_noise.h",
      "position": null,
      "original_position": 128,
      "commit_id": "b588ff85ae837e492269c922d0609bcd338e4752",
      "original_commit_id": "f69fd623ad97d1d4aacaa81b479f9182888d994a",
      "in_reply_to_id": 1702820614,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "@itornaza thanks, I'll look into your patch. Another guiding principle would be to stay close to `bip324.h` in terms of coding style. I haven't compared with that yet.",
      "created_at": "2024-08-08T11:03:06Z",
      "updated_at": "2024-08-08T11:03:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29346#discussion_r1709228465",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1709228465"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29346"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 128,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1709509545",
      "pull_request_review_id": 2227889188,
      "id": 1709509545,
      "node_id": "PRRC_kwDOABII585l5Qup",
      "diff_hunk": "@@ -0,0 +1,298 @@\n+// Copyright (c) 2023-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_COMMON_SV2_NOISE_H\n+#define BITCOIN_COMMON_SV2_NOISE_H\n+\n+#include <compat/compat.h>\n+#include <crypto/poly1305.h>\n+#include <key.h>\n+#include <pubkey.h>\n+#include <random.h>\n+#include <streams.h>\n+#include <uint256.h>\n+\n+/** The Noise Protocol Framework\n+ *  https://noiseprotocol.org/noise.html\n+ *  Revision 38, 2018-07-11\n+ *\n+ *  Stratum v2 handshake and cipher specification:\n+ *  https://github.com/stratum-mining/sv2-spec/blob/main/04-Protocol-Security.md\n+ */\n+\n+/** Section 3: All Noise messages are less than or equal to 65535 bytes in length. */\n+static constexpr size_t NOISE_MAX_CHUNK_SIZE = 65535;\n+\n+/** Simple certificate for the static key signed by the authority key.\n+ * See 4.5.2 and 4.5.3 of the Stratum v2 spec.\n+ */\n+class Sv2SignatureNoiseMessage\n+{\n+public:\n+    /** Size of a Schnorr signature. */\n+    static constexpr size_t SCHNORR_SIGNATURE_SIZE = 64;\n+    /** Size of serialized message, which does not include the static key.  */\n+    static constexpr size_t SIZE = 2 + 4 + 4 + SCHNORR_SIGNATURE_SIZE;\n+\n+private:\n+    uint16_t m_version = 0;\n+    uint32_t m_valid_from = 0;\n+    uint32_t m_valid_to = 0;\n+    std::array<unsigned char, SCHNORR_SIGNATURE_SIZE> m_sig;\n+\n+    /** Hash of version, valid from/to and the static key. */\n+    uint256 GetHash();\n+    void SignSchnorr(const CKey& authority_key, Span<unsigned char> sig);\n+\n+public:\n+    Sv2SignatureNoiseMessage() = default;\n+    Sv2SignatureNoiseMessage(uint16_t version, uint32_t valid_from, uint32_t valid_to, const XOnlyPubKey& static_key, const CKey& authority_key);\n+\n+    /* The certificate serializes pubkeys in x-only format, not EllSwift. */\n+    XOnlyPubKey m_static_key = {};\n+\n+    [[nodiscard]] bool Validate(XOnlyPubKey authority_key);\n+\n+    template <typename Stream>\n+    // The static_key is signed for, but not serialized.\n+    void Serialize(Stream& s) const\n+    {\n+        s << m_version\n+          << m_valid_from\n+          << m_valid_to\n+          << m_sig;\n+    }\n+    template <typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> m_version\n+          >> m_valid_from\n+          >> m_valid_to\n+          >> m_sig;\n+    }\n+};\n+\n+/*\n+ * The CipherState uses m_key (k) and m_nonce (n) to encrypt and decrypt ciphertexts.\n+ * During the handshake phase each party has a single CipherState, but during\n+ * the transport phase each party has two CipherState objects: one for sending,\n+ * and one for receiving.\n+ *\n+ * See chapter \"5. Processing rules\" of the Noise paper.\n+ */\n+class Sv2CipherState\n+{\n+public:\n+    static constexpr size_t HASHLEN{32};\n+\n+    Sv2CipherState() = default;\n+    explicit Sv2CipherState(uint8_t key[HASHLEN]);\n+\n+    /** Decrypt message\n+     * @param[in] associated_data associated data\n+     * @param[in] ciphertext message with encrypted and authenticated chunks.\n+     * @param[out] plain message (defragmented)\n+     * @returns whether decryption succeeded\n+     */\n+    [[nodiscard]] bool DecryptWithAd(Span<const std::byte> associated_data, Span<std::byte> ciphertext, Span<std::byte> plain);\n+\n+    /** Encrypt message\n+     * @param[in] associated_data associated data\n+     * @param[in] plain message\n+     * @param[out] ciphertext message with encrypted and authenticated chunks.\n+     * @returns whether decryption succeeded\n+     */\n+    [[nodiscard]] bool EncryptWithAd(Span<const std::byte> associated_data, Span<const std::byte> plain, Span<std::byte> ciphertext);\n+\n+    /** The message will be chunked in NOISE_MAX_CHUNK_SIZE parts and expanded\n+     *  by 16 bytes per chunk for its MAC.\n+     *\n+     * @param[in] plain message. Can't point to the same memory location as ciphertext,\n+     *                  because each encrypted message chunk would override the\n+     *                  start of the next plain text chunk.\n+     * @param[out] ciphertext   message with encrypted and authenticated chunks\n+     * @return whether encryption succeeded. Only fails if nonce is uint64_max.\n+     */\n+    [[nodiscard]] bool EncryptMessage(Span<const std::byte> plain, Span<std::byte> ciphertext);\n+\n+    /** Decrypt message.\n+     *\n+     * @param[in] ciphertext encrypted message\n+     * @param[out] plain decrypted message. May point to the same memory location\n+     *                  as ciphertext. The result is defragmented.\n+     */\n+    [[nodiscard]] bool DecryptMessage(Span<std::byte> ciphertext, Span<std::byte> plain);\n+\n+private:\n+    uint8_t m_key[HASHLEN];",
      "path": "src/common/sv2_noise.h",
      "position": null,
      "original_position": 128,
      "commit_id": "b588ff85ae837e492269c922d0609bcd338e4752",
      "original_commit_id": "f69fd623ad97d1d4aacaa81b479f9182888d994a",
      "in_reply_to_id": 1702820614,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Update: `bip324.h` also uses `std::array`",
      "created_at": "2024-08-08T13:30:35Z",
      "updated_at": "2024-08-08T13:30:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29346#discussion_r1709509545",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1709509545"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29346"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 128,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1751379795",
      "pull_request_review_id": 2291544930,
      "id": 1751379795,
      "node_id": "PRRC_kwDOABII585oY-9T",
      "diff_hunk": "@@ -0,0 +1,515 @@\n+// Copyright (c) 2023-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <common/sv2_noise.h>\n+\n+#include <crypto/chacha20poly1305.h>\n+#include <crypto/hmac_sha256.h>\n+#include <logging.h>\n+#include <util/check.h>\n+#include <util/strencodings.h>\n+#include <util/time.h>\n+\n+Sv2SignatureNoiseMessage::Sv2SignatureNoiseMessage(uint16_t version, uint32_t valid_from, uint32_t valid_to, const XOnlyPubKey& static_key, const CKey& authority_key) : m_version{version}, m_valid_from{valid_from}, m_valid_to{valid_to}, m_static_key{static_key}\n+{\n+    SignSchnorr(authority_key, m_sig);\n+}\n+\n+uint256 Sv2SignatureNoiseMessage::GetHash()\n+{\n+    DataStream ss{};\n+    ss << m_version\n+       << m_valid_from\n+       << m_valid_to\n+       << m_static_key;\n+\n+    LogTrace(BCLog::SV2, \"Certificate hashed data: %s\\n\", HexStr(ss));\n+\n+    CSHA256 hasher;\n+    hasher.Write(reinterpret_cast<unsigned char*>(&(*ss.begin())), ss.end() - ss.begin());\n+\n+    uint256 hash_output;\n+    hasher.Finalize(hash_output.begin());\n+    return hash_output;\n+}\n+\n+bool Sv2SignatureNoiseMessage::Validate(XOnlyPubKey authority_key)\n+{\n+    if (m_version > 0) {\n+        LogTrace(BCLog::SV2, \"Invalid certificate version: %d\\n\", m_version);\n+        return false;\n+    }\n+    auto now{GetTime<std::chrono::seconds>()};\n+    if (std::chrono::seconds{m_valid_from} > now) {\n+        LogTrace(BCLog::SV2, \"Certificate valid from is in the future: %d\\n\", m_valid_from);\n+        return false;\n+    }\n+    if (std::chrono::seconds{m_valid_to} < now) {\n+        LogTrace(BCLog::SV2, \"Certificate expired: %d\\n\", m_valid_to);\n+        return false;\n+    }\n+\n+    if (!authority_key.VerifySchnorr(this->GetHash(), m_sig)) {\n+        LogTrace(BCLog::SV2, \"Certificate signature is invalid\\n\");\n+        return false;\n+    }\n+    return true;\n+}\n+\n+void Sv2SignatureNoiseMessage::SignSchnorr(const CKey& authority_key, Span<unsigned char> sig)\n+{\n+    authority_key.SignSchnorr(this->GetHash(), sig, nullptr, {});\n+}\n+\n+Sv2CipherState::Sv2CipherState(NoiseHash&& key) : m_key(std::move(key)) {};\n+\n+bool Sv2CipherState::DecryptWithAd(Span<const std::byte> associated_data, Span<std::byte> ciphertext, Span<std::byte> plain)\n+{\n+    Assume(Sv2Cipher::EncryptedMessageSize(plain.size()) == ciphertext.size());\n+\n+    if (m_nonce == UINT64_MAX) {\n+        // This nonce value is reserved, see chapter 5.1 of the Noise paper.\n+        LogTrace(BCLog::SV2, \"Nonce exceeds maximum value\\n\");\n+        return false;\n+    }\n+    AEADChaCha20Poly1305::Nonce96 nonce = {0, m_nonce};\n+    auto key = MakeByteSpan(m_key);\n+    AEADChaCha20Poly1305 aead{key};\n+    if (!aead.Decrypt(ciphertext, associated_data, nonce, plain)) {\n+        LogTrace(BCLog::SV2, \"Message decryption failed\\n\");\n+        return false;\n+    }\n+    // Only increase nonce if decryption succeeded\n+    m_nonce++;\n+    return true;\n+}\n+\n+bool Sv2CipherState::EncryptWithAd(Span<const std::byte> associated_data, Span<const std::byte> plain, Span<std::byte> ciphertext)\n+{\n+    Assume(Sv2Cipher::EncryptedMessageSize(plain.size()) == ciphertext.size());\n+\n+    if (m_nonce == UINT64_MAX) {\n+        // This nonce value is reserved, see chapter 5.1 of the Noise paper.\n+        LogTrace(BCLog::SV2, \"Nonce exceeds maximum value\\n\");\n+        return false;\n+    }\n+    AEADChaCha20Poly1305::Nonce96 nonce = {0, m_nonce++};\n+    auto key = MakeByteSpan(m_key);\n+    AEADChaCha20Poly1305 aead{key};\n+    aead.Encrypt(plain, associated_data, nonce, ciphertext);\n+    return true;\n+}\n+\n+bool Sv2CipherState::EncryptMessage(Span<const std::byte> plain, Span<std::byte> ciphertext)\n+{\n+    Assume(ciphertext.size() == Sv2Cipher::EncryptedMessageSize(plain.size()));\n+\n+    std::vector<std::byte> ad; // No associated data\n+\n+    const size_t max_chunk_size = NOISE_MAX_CHUNK_SIZE - Poly1305::TAGLEN;\n+    size_t num_chunks = plain.size() / max_chunk_size;\n+    if (plain.size() % max_chunk_size != 0) {\n+        num_chunks++;\n+    }",
      "path": "src/common/sv2_noise.cpp",
      "position": null,
      "original_position": 114,
      "commit_id": "b588ff85ae837e492269c922d0609bcd338e4752",
      "original_commit_id": "d4fc6e6077d665aaf74265e6888a93117710a4d9",
      "in_reply_to_id": null,
      "user": {
        "login": "Shourya742",
        "id": 84662239,
        "node_id": "MDQ6VXNlcjg0NjYyMjM5",
        "avatar_url": "https://avatars.githubusercontent.com/u/84662239?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Shourya742",
        "html_url": "https://github.com/Shourya742",
        "followers_url": "https://api.github.com/users/Shourya742/followers",
        "following_url": "https://api.github.com/users/Shourya742/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Shourya742/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Shourya742/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Shourya742/subscriptions",
        "organizations_url": "https://api.github.com/users/Shourya742/orgs",
        "repos_url": "https://api.github.com/users/Shourya742/repos",
        "events_url": "https://api.github.com/users/Shourya742/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Shourya742/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n    size_t num_chunks = (plain.size() + max_chunk_size - 1) / max_chunk_size;\r\n```",
      "created_at": "2024-09-10T07:07:14Z",
      "updated_at": "2024-09-14T15:56:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29346#discussion_r1751379795",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1751379795"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29346"
        }
      },
      "start_line": null,
      "original_start_line": 111,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 114,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1758221954",
      "pull_request_review_id": 2291544930,
      "id": 1758221954,
      "node_id": "PRRC_kwDOABII585ozFaC",
      "diff_hunk": "@@ -0,0 +1,298 @@\n+// Copyright (c) 2023-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_COMMON_SV2_NOISE_H\n+#define BITCOIN_COMMON_SV2_NOISE_H\n+\n+#include <compat/compat.h>\n+#include <crypto/poly1305.h>\n+#include <key.h>\n+#include <pubkey.h>\n+#include <random.h>\n+#include <streams.h>\n+#include <uint256.h>\n+\n+/** The Noise Protocol Framework\n+ *  https://noiseprotocol.org/noise.html\n+ *  Revision 38, 2018-07-11\n+ *\n+ *  Stratum v2 handshake and cipher specification:\n+ *  https://github.com/stratum-mining/sv2-spec/blob/main/04-Protocol-Security.md\n+ */\n+\n+/** Section 3: All Noise messages are less than or equal to 65535 bytes in length. */\n+static constexpr size_t NOISE_MAX_CHUNK_SIZE = 65535;\n+\n+static constexpr size_t HASHLEN{32};\n+using NoiseHash = std::array<uint8_t, HASHLEN>;\n+\n+/** Simple certificate for the static key signed by the authority key.\n+ * See 4.5.2 and 4.5.3 of the Stratum v2 spec.\n+ */\n+class Sv2SignatureNoiseMessage\n+{\n+public:\n+    /** Size of a Schnorr signature. */\n+    static constexpr size_t SCHNORR_SIGNATURE_SIZE = 64;\n+    /** Size of serialized message, which does not include the static key.  */\n+    static constexpr size_t SIZE = 2 + 4 + 4 + SCHNORR_SIGNATURE_SIZE;\n+\n+private:\n+    uint16_t m_version = 0;\n+    uint32_t m_valid_from = 0;\n+    uint32_t m_valid_to = 0;\n+    std::array<unsigned char, SCHNORR_SIGNATURE_SIZE> m_sig;\n+\n+    /** Hash of version, valid from/to and the static key. */\n+    uint256 GetHash();\n+    void SignSchnorr(const CKey& authority_key, Span<unsigned char> sig);\n+\n+public:\n+    Sv2SignatureNoiseMessage() = default;\n+    Sv2SignatureNoiseMessage(uint16_t version, uint32_t valid_from, uint32_t valid_to, const XOnlyPubKey& static_key, const CKey& authority_key);\n+\n+    /* The certificate serializes pubkeys in x-only format, not EllSwift. */\n+    XOnlyPubKey m_static_key = {};\n+\n+    [[nodiscard]] bool Validate(XOnlyPubKey authority_key);\n+\n+    template <typename Stream>\n+    // The static_key is signed for, but not serialized.\n+    void Serialize(Stream& s) const\n+    {\n+        s << m_version\n+          << m_valid_from\n+          << m_valid_to\n+          << m_sig;\n+    }\n+    template <typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> m_version\n+          >> m_valid_from\n+          >> m_valid_to\n+          >> m_sig;\n+    }\n+};\n+\n+/*\n+ * The CipherState uses m_key (k) and m_nonce (n) to encrypt and decrypt ciphertexts.\n+ * During the handshake phase each party has a single CipherState, but during\n+ * the transport phase each party has two CipherState objects: one for sending,\n+ * and one for receiving.\n+ *\n+ * See chapter \"5. Processing rules\" of the Noise paper.\n+ */\n+class Sv2CipherState\n+{\n+public:\n+    Sv2CipherState() = default;\n+    explicit Sv2CipherState(NoiseHash&& key);\n+\n+    /** Decrypt message\n+     * @param[in] associated_data associated data\n+     * @param[in] ciphertext message with encrypted and authenticated chunks.\n+     * @param[out] plain message (defragmented)\n+     * @returns whether decryption succeeded\n+     */\n+    [[nodiscard]] bool DecryptWithAd(Span<const std::byte> associated_data, Span<std::byte> ciphertext, Span<std::byte> plain);\n+\n+    /** Encrypt message\n+     * @param[in] associated_data associated data\n+     * @param[in] plain message\n+     * @param[out] ciphertext message with encrypted and authenticated chunks.\n+     * @returns whether decryption succeeded",
      "path": "src/common/sv2_noise.h",
      "position": null,
      "original_position": 105,
      "commit_id": "b588ff85ae837e492269c922d0609bcd338e4752",
      "original_commit_id": "38cbea54d16838344090b943cd1c1ca2fe95f4f6",
      "in_reply_to_id": null,
      "user": {
        "login": "Shourya742",
        "id": 84662239,
        "node_id": "MDQ6VXNlcjg0NjYyMjM5",
        "avatar_url": "https://avatars.githubusercontent.com/u/84662239?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Shourya742",
        "html_url": "https://github.com/Shourya742",
        "followers_url": "https://api.github.com/users/Shourya742/followers",
        "following_url": "https://api.github.com/users/Shourya742/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Shourya742/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Shourya742/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Shourya742/subscriptions",
        "organizations_url": "https://api.github.com/users/Shourya742/orgs",
        "repos_url": "https://api.github.com/users/Shourya742/repos",
        "events_url": "https://api.github.com/users/Shourya742/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Shourya742/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n     * @returns whether encryption succeeded\r\n```",
      "created_at": "2024-09-13T05:52:12Z",
      "updated_at": "2024-09-14T15:56:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29346#discussion_r1758221954",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1758221954"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29346"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 105,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1759755153",
      "pull_request_review_id": 2291544930,
      "id": 1759755153,
      "node_id": "PRRC_kwDOABII585o47uR",
      "diff_hunk": "@@ -0,0 +1,515 @@\n+// Copyright (c) 2023-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <common/sv2_noise.h>\n+\n+#include <crypto/chacha20poly1305.h>\n+#include <crypto/hmac_sha256.h>\n+#include <logging.h>\n+#include <util/check.h>\n+#include <util/strencodings.h>\n+#include <util/time.h>\n+\n+Sv2SignatureNoiseMessage::Sv2SignatureNoiseMessage(uint16_t version, uint32_t valid_from, uint32_t valid_to, const XOnlyPubKey& static_key, const CKey& authority_key) : m_version{version}, m_valid_from{valid_from}, m_valid_to{valid_to}, m_static_key{static_key}\n+{\n+    SignSchnorr(authority_key, m_sig);\n+}\n+\n+uint256 Sv2SignatureNoiseMessage::GetHash()\n+{\n+    DataStream ss{};\n+    ss << m_version\n+       << m_valid_from\n+       << m_valid_to\n+       << m_static_key;\n+\n+    LogTrace(BCLog::SV2, \"Certificate hashed data: %s\\n\", HexStr(ss));\n+\n+    CSHA256 hasher;\n+    hasher.Write(reinterpret_cast<unsigned char*>(&(*ss.begin())), ss.end() - ss.begin());\n+\n+    uint256 hash_output;\n+    hasher.Finalize(hash_output.begin());\n+    return hash_output;\n+}\n+\n+bool Sv2SignatureNoiseMessage::Validate(XOnlyPubKey authority_key)\n+{\n+    if (m_version > 0) {\n+        LogTrace(BCLog::SV2, \"Invalid certificate version: %d\\n\", m_version);\n+        return false;\n+    }\n+    auto now{GetTime<std::chrono::seconds>()};\n+    if (std::chrono::seconds{m_valid_from} > now) {\n+        LogTrace(BCLog::SV2, \"Certificate valid from is in the future: %d\\n\", m_valid_from);\n+        return false;\n+    }\n+    if (std::chrono::seconds{m_valid_to} < now) {\n+        LogTrace(BCLog::SV2, \"Certificate expired: %d\\n\", m_valid_to);\n+        return false;\n+    }\n+\n+    if (!authority_key.VerifySchnorr(this->GetHash(), m_sig)) {\n+        LogTrace(BCLog::SV2, \"Certificate signature is invalid\\n\");\n+        return false;\n+    }\n+    return true;\n+}\n+\n+void Sv2SignatureNoiseMessage::SignSchnorr(const CKey& authority_key, Span<unsigned char> sig)\n+{\n+    authority_key.SignSchnorr(this->GetHash(), sig, nullptr, {});\n+}\n+\n+Sv2CipherState::Sv2CipherState(NoiseHash&& key) : m_key(std::move(key)) {};\n+\n+bool Sv2CipherState::DecryptWithAd(Span<const std::byte> associated_data, Span<std::byte> ciphertext, Span<std::byte> plain)\n+{\n+    Assume(Sv2Cipher::EncryptedMessageSize(plain.size()) == ciphertext.size());\n+\n+    if (m_nonce == UINT64_MAX) {\n+        // This nonce value is reserved, see chapter 5.1 of the Noise paper.\n+        LogTrace(BCLog::SV2, \"Nonce exceeds maximum value\\n\");\n+        return false;\n+    }\n+    AEADChaCha20Poly1305::Nonce96 nonce = {0, m_nonce};\n+    auto key = MakeByteSpan(m_key);\n+    AEADChaCha20Poly1305 aead{key};\n+    if (!aead.Decrypt(ciphertext, associated_data, nonce, plain)) {\n+        LogTrace(BCLog::SV2, \"Message decryption failed\\n\");\n+        return false;\n+    }\n+    // Only increase nonce if decryption succeeded\n+    m_nonce++;\n+    return true;\n+}\n+\n+bool Sv2CipherState::EncryptWithAd(Span<const std::byte> associated_data, Span<const std::byte> plain, Span<std::byte> ciphertext)\n+{\n+    Assume(Sv2Cipher::EncryptedMessageSize(plain.size()) == ciphertext.size());\n+\n+    if (m_nonce == UINT64_MAX) {\n+        // This nonce value is reserved, see chapter 5.1 of the Noise paper.\n+        LogTrace(BCLog::SV2, \"Nonce exceeds maximum value\\n\");\n+        return false;\n+    }\n+    AEADChaCha20Poly1305::Nonce96 nonce = {0, m_nonce++};\n+    auto key = MakeByteSpan(m_key);\n+    AEADChaCha20Poly1305 aead{key};\n+    aead.Encrypt(plain, associated_data, nonce, ciphertext);\n+    return true;\n+}\n+\n+bool Sv2CipherState::EncryptMessage(Span<const std::byte> plain, Span<std::byte> ciphertext)\n+{\n+    Assume(ciphertext.size() == Sv2Cipher::EncryptedMessageSize(plain.size()));\n+\n+    std::vector<std::byte> ad; // No associated data\n+\n+    const size_t max_chunk_size = NOISE_MAX_CHUNK_SIZE - Poly1305::TAGLEN;\n+    size_t num_chunks = plain.size() / max_chunk_size;\n+    if (plain.size() % max_chunk_size != 0) {\n+        num_chunks++;\n+    }\n+    if (num_chunks > 1) {\n+        LogTrace(BCLog::SV2,\n+                 \"Split into %d chunks (max %d bytes)\\n\",\n+                 num_chunks, max_chunk_size);\n+    }\n+\n+    // Copy input bytes into output buffer\n+    const std::vector<std::byte> padding(Poly1305::TAGLEN, std::byte(0));\n+    for (size_t i = 0; i < num_chunks; ++i) {\n+        size_t chunk_start = i * max_chunk_size;\n+        size_t chunk_end = std::min(chunk_start + max_chunk_size, plain.size());\n+        size_t chunk_size = chunk_end - chunk_start;\n+        const auto encrypted_chunk_start = ciphertext.begin() + i * NOISE_MAX_CHUNK_SIZE;\n+        std::copy(plain.begin() + chunk_start, plain.begin() + chunk_start + chunk_size, encrypted_chunk_start);\n+        std::copy(padding.begin(), padding.end(), encrypted_chunk_start + chunk_size);\n+    }\n+\n+    // Encrypt each chunk\n+    size_t bytes_written = 0;\n+    for (size_t i = 0; i < num_chunks; ++i) {\n+        size_t chunk_size = std::min(ciphertext.size() - bytes_written, NOISE_MAX_CHUNK_SIZE);\n+        Span<std::byte> chunk = ciphertext.subspan(bytes_written, chunk_size);\n+        Span<std::byte> chunk_plain = ciphertext.subspan(bytes_written, chunk_size - Poly1305::TAGLEN);\n+        if (!EncryptWithAd(ad, chunk_plain, chunk)) {\n+            return false;\n+        }\n+        bytes_written += chunk.size();\n+    }\n+\n+    Assume(bytes_written == ciphertext.size());\n+    return true;\n+}\n+\n+bool Sv2CipherState::DecryptMessage(Span<std::byte> ciphertext, Span<std::byte> plain)\n+{\n+    Assume(Sv2Cipher::EncryptedMessageSize(plain.size()) == ciphertext.size());\n+\n+    size_t processed = 0;\n+    size_t plain_position = 0;\n+    std::vector<std::byte> ad; // No associated data\n+\n+    while (processed < ciphertext.size()) {\n+        size_t chunk_size = std::min(ciphertext.size() - processed, NOISE_MAX_CHUNK_SIZE);\n+        Span<std::byte> chunk_cipher = ciphertext.subspan(processed, chunk_size);\n+        Span<std::byte> chunk_plain = plain.subspan(plain_position, chunk_size - Poly1305::TAGLEN);\n+        if (!DecryptWithAd(ad, chunk_cipher, chunk_plain)) return false;\n+        processed += chunk_size;\n+        plain_position += chunk_size - Poly1305::TAGLEN;\n+    }\n+\n+    return true;\n+}\n+\n+void Sv2SymmetricState::MixHash(const Span<const std::byte> input)\n+{\n+    m_hash_output = (HashWriter{} << m_hash_output << input).GetSHA256();\n+}\n+\n+void Sv2SymmetricState::MixKey(const Span<const std::byte> input_key_material)\n+{\n+    NoiseHash out0;\n+    NoiseHash out1;\n+    HKDF2(input_key_material, out0, out1);\n+    m_chaining_key = std::move(out0);\n+    m_cipher_state = Sv2CipherState{std::move(out1)};\n+}\n+\n+std::string Sv2SymmetricState::GetChainingKey()\n+{\n+    return HexStr(m_chaining_key);\n+}\n+\n+void Sv2SymmetricState::LogChainingKey()\n+{\n+    LogTrace(BCLog::SV2, \"Chaining key: %s\\n\", GetChainingKey());\n+}\n+\n+void Sv2SymmetricState::HKDF2(const Span<const std::byte> input_key_material, NoiseHash& out0, NoiseHash& out1)\n+{\n+    NoiseHash tmp_key;\n+    CHMAC_SHA256 tmp_mac(m_chaining_key.data(), m_chaining_key.size());\n+    tmp_mac.Write(UCharCast(input_key_material.data()), input_key_material.size());\n+    tmp_mac.Finalize(tmp_key.data());\n+\n+    CHMAC_SHA256 out0_mac(tmp_key.data(), tmp_key.size());\n+    uint8_t one[1]{0x1};\n+    out0_mac.Write(one, 1);\n+    out0_mac.Finalize(out0.data());\n+\n+    std::vector<uint8_t> in1;\n+    in1.reserve(HASHLEN + 1);\n+    std::copy(out0.begin(), out0.end(), std::back_inserter(in1));\n+    in1.push_back(0x02);\n+\n+    CHMAC_SHA256 out1_mac(tmp_key.data(), tmp_key.size());\n+    out1_mac.Write(&in1[0], in1.size());\n+    out1_mac.Finalize(out1.data());\n+}\n+\n+bool Sv2SymmetricState::EncryptAndHash(Span<const std::byte> plain, Span<std::byte> ciphertext)\n+{\n+    Assume(Sv2Cipher::EncryptedMessageSize(plain.size()) == ciphertext.size());\n+\n+    if (!m_cipher_state.EncryptWithAd(MakeByteSpan(m_hash_output), plain, ciphertext)) {\n+        return false;\n+    }\n+    MixHash(ciphertext);\n+    return true;\n+}\n+\n+bool Sv2SymmetricState::DecryptAndHash(Span<std::byte> ciphertext, Span<std::byte> plain)\n+{\n+    Assume(Sv2Cipher::EncryptedMessageSize(plain.size()) == ciphertext.size());\n+\n+    // The handshake requires mix hashing the cipher text NOT the decrypted\n+    // plaintext.\n+    std::vector<std::byte> ciphertext_copy;\n+    ciphertext_copy.assign(ciphertext.begin(), ciphertext.end());\n+\n+    bool res = m_cipher_state.DecryptWithAd(MakeByteSpan(m_hash_output), ciphertext, plain);\n+    if (!res) return false;\n+    MixHash(ciphertext_copy);\n+    return true;\n+}\n+\n+std::array<Sv2CipherState, 2> Sv2SymmetricState::Split()\n+{\n+    NoiseHash send_key;\n+    NoiseHash recv_key;\n+    HKDF2({}, send_key, recv_key);\n+    return {Sv2CipherState{std::move(send_key)}, Sv2CipherState{std::move(recv_key)}};\n+}\n+\n+uint256 Sv2SymmetricState::GetHashOutput()\n+{\n+    return m_hash_output;\n+}\n+\n+void Sv2HandshakeState::SetEphemeralKey(CKey&& key)\n+{\n+    m_ephemeral_key = key;\n+    m_ephemeral_ellswift_pk = m_ephemeral_key.EllSwiftCreate(MakeByteSpan(GetRandHash()));\n+};\n+\n+void Sv2HandshakeState::GenerateEphemeralKey() noexcept\n+{\n+    Assume(!m_ephemeral_key.size());\n+    LogTrace(BCLog::SV2, \"Generate ephemeral key\\n\");\n+    SetEphemeralKey(GenerateRandomKey());\n+};\n+\n+void Sv2HandshakeState::WriteMsgEphemeralPK(Span<std::byte> msg)\n+{\n+    if (msg.size() < ELLSWIFT_PUB_KEY_SIZE) {\n+        throw std::runtime_error(strprintf(\"Invalid message size: %d bytes < %d\", msg.size(), ELLSWIFT_PUB_KEY_SIZE));\n+    }\n+\n+    if (!m_ephemeral_key.IsValid()) {\n+        GenerateEphemeralKey();\n+    }\n+\n+    LogTrace(BCLog::SV2, \"Write our ephemeral key\\n\");\n+    std::copy(m_ephemeral_ellswift_pk.begin(), m_ephemeral_ellswift_pk.end(), msg.begin());\n+\n+    m_symmetric_state.MixHash(msg.subspan(0, ELLSWIFT_PUB_KEY_SIZE));\n+    LogTrace(BCLog::SV2, \"Mix hash: %s\\n\", HexStr(m_symmetric_state.GetHashOutput()));\n+\n+    std::vector<std::byte> empty;\n+    m_symmetric_state.MixHash(empty);\n+}\n+\n+void Sv2HandshakeState::ReadMsgEphemeralPK(Span<std::byte> msg)\n+{\n+    LogTrace(BCLog::SV2, \"Read their ephemeral key\\n\");\n+    Assume(msg.size() == ELLSWIFT_PUB_KEY_SIZE);\n+    m_remote_ephemeral_ellswift_pk = EllSwiftPubKey(msg);\n+\n+    m_symmetric_state.MixHash(msg.subspan(0, ELLSWIFT_PUB_KEY_SIZE));\n+    LogTrace(BCLog::SV2, \"Mix hash: %s\\n\", HexStr(m_symmetric_state.GetHashOutput()));\n+\n+    std::vector<std::byte> empty;\n+    m_symmetric_state.MixHash(empty);\n+}\n+\n+void Sv2HandshakeState::WriteMsgES(Span<std::byte> msg)\n+{\n+    if (msg.size() < HANDSHAKE_STEP2_SIZE) {\n+        throw std::runtime_error(strprintf(\"Invalid message size: %d bytes < %d\", msg.size(), HANDSHAKE_STEP2_SIZE));\n+    }\n+\n+    ssize_t bytes_written = 0;\n+\n+    if (!m_ephemeral_key.IsValid()) {\n+        GenerateEphemeralKey();\n+    }\n+\n+    // Send our ephemeral pk.\n+    LogTrace(BCLog::SV2, \"Write our ephemeral key\\n\");\n+    std::copy(m_ephemeral_ellswift_pk.begin(), m_ephemeral_ellswift_pk.end(), msg.begin());\n+\n+    m_symmetric_state.MixHash(msg.subspan(0, ELLSWIFT_PUB_KEY_SIZE));\n+    bytes_written += ELLSWIFT_PUB_KEY_SIZE;\n+\n+    LogTrace(BCLog::SV2, \"Mix hash: %s\\n\", HexStr(m_symmetric_state.GetHashOutput()));\n+\n+    LogTrace(BCLog::SV2, \"Perform ECDH with the remote ephemeral key\\n\");\n+    ECDHSecret ecdh_secret{m_ephemeral_key.ComputeBIP324ECDHSecret(m_remote_ephemeral_ellswift_pk,\n+                                                                   m_ephemeral_ellswift_pk,\n+                                                                   /*initiating=*/false)};\n+\n+    LogTrace(BCLog::SV2, \"Mix key with ECDH result: ephemeral ours -- remote ephemeral\\n\");\n+    m_symmetric_state.MixKey(ecdh_secret);\n+    m_symmetric_state.LogChainingKey();\n+\n+    // Send our static pk.\n+    LogTrace(BCLog::SV2, \"Encrypt and write our static key\\n\");\n+\n+    if (!m_symmetric_state.EncryptAndHash(m_static_ellswift_pk, msg.subspan(ELLSWIFT_PUB_KEY_SIZE, ELLSWIFT_PUB_KEY_SIZE + Poly1305::TAGLEN))) {\n+        // This should never happen\n+        Assume(false);\n+        throw std::runtime_error(\"Failed to encrypt our ephemeral key\\n\");\n+    }\n+\n+    bytes_written += ELLSWIFT_PUB_KEY_SIZE + Poly1305::TAGLEN;\n+\n+    LogTrace(BCLog::SV2, \"Mix hash: %s\\n\", HexStr(m_symmetric_state.GetHashOutput()));\n+\n+    LogTrace(BCLog::SV2, \"Perform ECDH between our static and remote ephemeral key\\n\");\n+    ECDHSecret ecdh_static_secret{m_static_key.ComputeBIP324ECDHSecret(m_remote_ephemeral_ellswift_pk,\n+                                                                       m_static_ellswift_pk,\n+                                                                       /*initiating=*/false)};\n+    LogTrace(BCLog::SV2, \"ECDH result: %s\\n\", HexStr(ecdh_static_secret));\n+\n+    LogTrace(BCLog::SV2, \"Mix key with ECDH result: static ours -- remote ephemeral\\n\");\n+    m_symmetric_state.MixKey(ecdh_static_secret);\n+    m_symmetric_state.LogChainingKey();\n+\n+    // Serialize our digital signature noise message and encrypt.\n+    DataStream ss{};\n+    Assume(m_certificate);\n+    ss << m_certificate.value();\n+    Assume(ss.size() == Sv2SignatureNoiseMessage::SIZE);\n+\n+    LogTrace(BCLog::SV2, \"Encrypt certificate: %s\\n\", HexStr(ss));\n+    if (!m_symmetric_state.EncryptAndHash(ss, msg.subspan(bytes_written, Sv2SignatureNoiseMessage::SIZE + Poly1305::TAGLEN))) {\n+        // This should never happen\n+        Assume(false);\n+        throw std::runtime_error(\"Failed to encrypt our certificate\\n\");\n+    }\n+\n+    LogTrace(BCLog::SV2, \"Mix hash: %s\\n\", HexStr(m_symmetric_state.GetHashOutput()));\n+\n+    bytes_written += Sv2SignatureNoiseMessage::SIZE + Poly1305::TAGLEN;\n+    Assume(bytes_written == HANDSHAKE_STEP2_SIZE);\n+}\n+\n+bool Sv2HandshakeState::ReadMsgES(Span<std::byte> msg)\n+{\n+    Assume(msg.size() == HANDSHAKE_STEP2_SIZE);\n+    ssize_t bytes_read = 0;\n+\n+    // Read the remote ephmeral key from the msg and decrypt.\n+    LogTrace(BCLog::SV2, \"Read remote ephemeral key\\n\");\n+    m_remote_ephemeral_ellswift_pk = EllSwiftPubKey(msg.subspan(0, ELLSWIFT_PUB_KEY_SIZE));\n+    bytes_read += ELLSWIFT_PUB_KEY_SIZE;\n+\n+    m_symmetric_state.MixHash(m_remote_ephemeral_ellswift_pk);\n+    LogTrace(BCLog::SV2, \"Mix hash: %s\\n\", HexStr(m_symmetric_state.GetHashOutput()));\n+\n+    LogTrace(BCLog::SV2, \"Perform ECDH with the remote ephemeral key\\n\");\n+    ECDHSecret ecdh_secret{m_ephemeral_key.ComputeBIP324ECDHSecret(m_remote_ephemeral_ellswift_pk,\n+                                                                   m_ephemeral_ellswift_pk,\n+                                                                   /*initiating=*/true)};\n+\n+    LogTrace(BCLog::SV2, \"Mix key with ECDH result: ephemeral ours -- remote ephemeral\\n\");\n+    m_symmetric_state.MixKey(ecdh_secret);\n+    m_symmetric_state.LogChainingKey();\n+\n+    LogTrace(BCLog::SV2, \"Decrypt remote static key\\n\");\n+    std::array<std::byte, ELLSWIFT_PUB_KEY_SIZE> remote_static_key_bytes;\n+    bool res = m_symmetric_state.DecryptAndHash(msg.subspan(ELLSWIFT_PUB_KEY_SIZE, ELLSWIFT_PUB_KEY_SIZE + Poly1305::TAGLEN), remote_static_key_bytes);\n+    if (!res) return false;\n+    bytes_read += ELLSWIFT_PUB_KEY_SIZE + Poly1305::TAGLEN;\n+\n+    LogTrace(BCLog::SV2, \"Mix hash: %s\\n\", HexStr(m_symmetric_state.GetHashOutput()));\n+\n+    // Load remote static key from the decryted msg\n+    m_remote_static_ellswift_pk = EllSwiftPubKey(remote_static_key_bytes);\n+\n+    LogTrace(BCLog::SV2, \"Perform ECDH on the remote static key\\n\");\n+    ECDHSecret ecdh_static_secret{m_ephemeral_key.ComputeBIP324ECDHSecret(m_remote_static_ellswift_pk,\n+                                                                          m_ephemeral_ellswift_pk,\n+                                                                          /*initiating=*/true)};\n+    LogTrace(BCLog::SV2, \"ECDH result: %s\\n\", HexStr(ecdh_static_secret));\n+\n+    LogTrace(BCLog::SV2, \"Mix key with ECDH result: ephemeral ours -- remote static\\n\");\n+    m_symmetric_state.MixKey(ecdh_static_secret);\n+    m_symmetric_state.LogChainingKey();\n+\n+    LogTrace(BCLog::SV2, \"Decrypt remote certificate\\n\");\n+    std::array<std::byte, Sv2SignatureNoiseMessage::SIZE> remote_cert_bytes;\n+    res = m_symmetric_state.DecryptAndHash(msg.subspan(bytes_read, Sv2SignatureNoiseMessage::SIZE + Poly1305::TAGLEN), remote_cert_bytes);\n+    if (!res) return false;\n+    bytes_read += (Sv2SignatureNoiseMessage::SIZE + Poly1305::TAGLEN);\n+\n+    LogTrace(BCLog::SV2, \"Validate remote certificate\\n\");\n+    DataStream ss_cert(remote_cert_bytes);\n+    Sv2SignatureNoiseMessage cert;\n+    ss_cert >> cert;\n+    cert.m_static_key = XOnlyPubKey(m_remote_static_ellswift_pk.Decode());\n+    Assume(m_authority_pubkey);\n+    if (!cert.Validate(m_authority_pubkey.value())) {\n+        // We initiated the connection, so it's safe to unconditionally log this:\n+        LogWarning(\"Invalid certificate: %s\\n\", HexStr(remote_cert_bytes));\n+        return false;\n+    }\n+\n+    LogTrace(BCLog::SV2, \"Mix hash: %s\\n\", HexStr(m_symmetric_state.GetHashOutput()));\n+\n+    Assume(bytes_read == HANDSHAKE_STEP2_SIZE);\n+    return true;\n+}\n+\n+std::array<Sv2CipherState, 2> Sv2HandshakeState::SplitSymmetricState()\n+{\n+    return m_symmetric_state.Split();\n+}\n+\n+uint256 Sv2HandshakeState::GetHashOutput()\n+{\n+    return m_symmetric_state.GetHashOutput();\n+}\n+\n+Sv2Cipher::Sv2Cipher(CKey&& static_key, XOnlyPubKey authority_pubkey)\n+{\n+    m_handshake_state = std::make_unique<Sv2HandshakeState>(std::move(static_key), authority_pubkey);\n+    m_initiator = true;\n+}\n+\n+Sv2Cipher::Sv2Cipher(CKey&& static_key, Sv2SignatureNoiseMessage&& certificate)\n+{\n+    m_handshake_state = std::make_unique<Sv2HandshakeState>(std::move(static_key), std::move(certificate));\n+    m_initiator = false;\n+}\n+\n+Sv2HandshakeState& Sv2Cipher::GetHandshakeState()\n+{\n+    Assume(m_handshake_state);\n+    return *m_handshake_state;\n+}\n+\n+void Sv2Cipher::FinishHandshake()\n+{\n+    Assume(m_handshake_state);\n+\n+    auto cipher_state{m_handshake_state->SplitSymmetricState()};\n+\n+    m_hash = m_handshake_state->GetHashOutput();\n+\n+    m_cs1 = std::move(cipher_state[0]);\n+    m_cs2 = std::move(cipher_state[1]);\n+\n+    m_handshake_state.reset();\n+}\n+\n+size_t Sv2Cipher::EncryptedMessageSize(size_t msg_len)\n+{\n+    size_t num_chunks = msg_len / (NOISE_MAX_CHUNK_SIZE - Poly1305::TAGLEN);\n+    if (msg_len % (NOISE_MAX_CHUNK_SIZE - Poly1305::TAGLEN) != 0) {\n+        num_chunks++;\n+    }\n+    return msg_len + (num_chunks * Poly1305::TAGLEN);",
      "path": "src/common/sv2_noise.cpp",
      "position": null,
      "original_position": 486,
      "commit_id": "b588ff85ae837e492269c922d0609bcd338e4752",
      "original_commit_id": "c8d9d84e21ba091be6be83261b31684ac693d016",
      "in_reply_to_id": null,
      "user": {
        "login": "Shourya742",
        "id": 84662239,
        "node_id": "MDQ6VXNlcjg0NjYyMjM5",
        "avatar_url": "https://avatars.githubusercontent.com/u/84662239?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Shourya742",
        "html_url": "https://github.com/Shourya742",
        "followers_url": "https://api.github.com/users/Shourya742/followers",
        "following_url": "https://api.github.com/users/Shourya742/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Shourya742/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Shourya742/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Shourya742/subscriptions",
        "organizations_url": "https://api.github.com/users/Shourya742/orgs",
        "repos_url": "https://api.github.com/users/Shourya742/repos",
        "events_url": "https://api.github.com/users/Shourya742/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Shourya742/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n    size_t chunk_size = NOISE_MAX_CHUNK_SIZE - Poly1305::TAGLEN;\r\n    size_t num_chunks = (msg_len + chunk_size - 1) / chunk_size;\r\n    return msg_len + (num_chunks * Poly1305::TAGLEN);\r\n\r\n```",
      "created_at": "2024-09-14T15:41:39Z",
      "updated_at": "2024-09-14T15:56:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29346#discussion_r1759755153",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1759755153"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29346"
        }
      },
      "start_line": null,
      "original_start_line": 482,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 486,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1759782079",
      "pull_request_review_id": 2304920988,
      "id": 1759782079,
      "node_id": "PRRC_kwDOABII585o5CS_",
      "diff_hunk": "@@ -0,0 +1,298 @@\n+// Copyright (c) 2023-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_COMMON_SV2_NOISE_H\n+#define BITCOIN_COMMON_SV2_NOISE_H\n+\n+#include <compat/compat.h>\n+#include <crypto/poly1305.h>\n+#include <key.h>\n+#include <pubkey.h>\n+#include <random.h>\n+#include <streams.h>\n+#include <uint256.h>\n+\n+/** The Noise Protocol Framework\n+ *  https://noiseprotocol.org/noise.html\n+ *  Revision 38, 2018-07-11\n+ *\n+ *  Stratum v2 handshake and cipher specification:\n+ *  https://github.com/stratum-mining/sv2-spec/blob/main/04-Protocol-Security.md\n+ */\n+\n+/** Section 3: All Noise messages are less than or equal to 65535 bytes in length. */\n+static constexpr size_t NOISE_MAX_CHUNK_SIZE = 65535;\n+\n+static constexpr size_t HASHLEN{32};\n+using NoiseHash = std::array<uint8_t, HASHLEN>;\n+\n+/** Simple certificate for the static key signed by the authority key.\n+ * See 4.5.2 and 4.5.3 of the Stratum v2 spec.\n+ */\n+class Sv2SignatureNoiseMessage\n+{\n+public:\n+    /** Size of a Schnorr signature. */\n+    static constexpr size_t SCHNORR_SIGNATURE_SIZE = 64;\n+    /** Size of serialized message, which does not include the static key.  */\n+    static constexpr size_t SIZE = 2 + 4 + 4 + SCHNORR_SIGNATURE_SIZE;\n+\n+private:\n+    uint16_t m_version = 0;\n+    uint32_t m_valid_from = 0;\n+    uint32_t m_valid_to = 0;\n+    std::array<unsigned char, SCHNORR_SIGNATURE_SIZE> m_sig;\n+\n+    /** Hash of version, valid from/to and the static key. */\n+    uint256 GetHash();\n+    void SignSchnorr(const CKey& authority_key, Span<unsigned char> sig);\n+\n+public:\n+    Sv2SignatureNoiseMessage() = default;\n+    Sv2SignatureNoiseMessage(uint16_t version, uint32_t valid_from, uint32_t valid_to, const XOnlyPubKey& static_key, const CKey& authority_key);\n+\n+    /* The certificate serializes pubkeys in x-only format, not EllSwift. */\n+    XOnlyPubKey m_static_key = {};\n+\n+    [[nodiscard]] bool Validate(XOnlyPubKey authority_key);\n+\n+    template <typename Stream>\n+    // The static_key is signed for, but not serialized.\n+    void Serialize(Stream& s) const\n+    {\n+        s << m_version\n+          << m_valid_from\n+          << m_valid_to\n+          << m_sig;\n+    }\n+    template <typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> m_version\n+          >> m_valid_from\n+          >> m_valid_to\n+          >> m_sig;\n+    }\n+};\n+\n+/*\n+ * The CipherState uses m_key (k) and m_nonce (n) to encrypt and decrypt ciphertexts.\n+ * During the handshake phase each party has a single CipherState, but during\n+ * the transport phase each party has two CipherState objects: one for sending,\n+ * and one for receiving.\n+ *\n+ * See chapter \"5. Processing rules\" of the Noise paper.\n+ */\n+class Sv2CipherState\n+{\n+public:\n+    Sv2CipherState() = default;\n+    explicit Sv2CipherState(NoiseHash&& key);\n+\n+    /** Decrypt message\n+     * @param[in] associated_data associated data\n+     * @param[in] ciphertext message with encrypted and authenticated chunks.\n+     * @param[out] plain message (defragmented)\n+     * @returns whether decryption succeeded\n+     */\n+    [[nodiscard]] bool DecryptWithAd(Span<const std::byte> associated_data, Span<std::byte> ciphertext, Span<std::byte> plain);\n+\n+    /** Encrypt message\n+     * @param[in] associated_data associated data\n+     * @param[in] plain message\n+     * @param[out] ciphertext message with encrypted and authenticated chunks.\n+     * @returns whether decryption succeeded\n+     */\n+    [[nodiscard]] bool EncryptWithAd(Span<const std::byte> associated_data, Span<const std::byte> plain, Span<std::byte> ciphertext);\n+\n+    /** The message will be chunked in NOISE_MAX_CHUNK_SIZE parts and expanded\n+     *  by 16 bytes per chunk for its MAC.\n+     *\n+     * @param[in] plain message. Can't point to the same memory location as ciphertext,\n+     *                  because each encrypted message chunk would override the\n+     *                  start of the next plain text chunk.\n+     * @param[out] ciphertext   message with encrypted and authenticated chunks\n+     * @return whether encryption succeeded. Only fails if nonce is uint64_max.\n+     */\n+    [[nodiscard]] bool EncryptMessage(Span<const std::byte> plain, Span<std::byte> ciphertext);\n+\n+    /** Decrypt message.\n+     *\n+     * @param[in] ciphertext encrypted message\n+     * @param[out] plain decrypted message. May point to the same memory location\n+     *                  as ciphertext. The result is defragmented.\n+     */\n+    [[nodiscard]] bool DecryptMessage(Span<std::byte> ciphertext, Span<std::byte> plain);\n+\n+private:\n+    NoiseHash m_key{0};\n+    uint64_t m_nonce = 0;\n+};\n+\n+/*\n+ * A SymmetricState object contains a CipherState plus m_chaining_key (ck) and\n+ * m_hash_output (h) variables. It is so-named because it encapsulates all the\n+ * \"symmetric crypto\" used by Noise. During the handshake phase each party has\n+ * a single SymmetricState, which can be deleted once the handshake is finished.\n+ *\n+ * See chapter \"5. Processing rules\" of the Noise paper.\n+ */\n+class Sv2SymmetricState\n+{\n+public:\n+    // Sha256 hash of the ascii encoding - \"Noise_NX_Secp256k1+EllSwift_ChaChaPoly_SHA256\".\n+    // This is the first step required when setting up the chaining key.\n+    static constexpr NoiseHash PROTOCOL_NAME_HASH = {\n+        46, 180, 120, 129, 32, 142, 158, 238, 31, 102, 159, 103, 198, 110, 231, 14,\n+        169, 234, 136, 9, 13, 80, 63, 232, 48, 220, 75, 200, 62, 41, 191, 16};\n+\n+    // The double hash of protocol name \"Noise_NX_EllSwiftXonly_ChaChaPoly_SHA256\".\n+    static constexpr NoiseHash PROTOCOL_NAME_DOUBLE_HASH = {146, 47, 163, 46, 79, 72, 124, 13, 89, 202, 163, 190, 215, 137, 156, 227,",
      "path": "src/common/sv2_noise.h",
      "position": null,
      "original_position": 151,
      "commit_id": "b588ff85ae837e492269c922d0609bcd338e4752",
      "original_commit_id": "c8d9d84e21ba091be6be83261b31684ac693d016",
      "in_reply_to_id": null,
      "user": {
        "login": "itornaza",
        "id": 11520757,
        "node_id": "MDQ6VXNlcjExNTIwNzU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/11520757?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/itornaza",
        "html_url": "https://github.com/itornaza",
        "followers_url": "https://api.github.com/users/itornaza/followers",
        "following_url": "https://api.github.com/users/itornaza/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/itornaza/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/itornaza/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/itornaza/subscriptions",
        "organizations_url": "https://api.github.com/users/itornaza/orgs",
        "repos_url": "https://api.github.com/users/itornaza/repos",
        "events_url": "https://api.github.com/users/itornaza/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/itornaza/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "If you consider updating for other reasons, could you format this in the same way as PROTOCOL_NAME_HASH?",
      "created_at": "2024-09-14T17:47:54Z",
      "updated_at": "2024-09-14T17:48:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29346#discussion_r1759782079",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1759782079"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29346"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 151,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1766927347",
      "pull_request_review_id": 2315702768,
      "id": 1766927347,
      "node_id": "PRRC_kwDOABII585pUSvz",
      "diff_hunk": "@@ -0,0 +1,515 @@\n+// Copyright (c) 2023-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <common/sv2_noise.h>\n+\n+#include <crypto/chacha20poly1305.h>\n+#include <crypto/hmac_sha256.h>\n+#include <logging.h>\n+#include <util/check.h>\n+#include <util/strencodings.h>\n+#include <util/time.h>\n+\n+Sv2SignatureNoiseMessage::Sv2SignatureNoiseMessage(uint16_t version, uint32_t valid_from, uint32_t valid_to, const XOnlyPubKey& static_key, const CKey& authority_key) : m_version{version}, m_valid_from{valid_from}, m_valid_to{valid_to}, m_static_key{static_key}\n+{\n+    SignSchnorr(authority_key, m_sig);\n+}\n+\n+uint256 Sv2SignatureNoiseMessage::GetHash()\n+{\n+    DataStream ss{};\n+    ss << m_version\n+       << m_valid_from\n+       << m_valid_to\n+       << m_static_key;\n+\n+    LogTrace(BCLog::SV2, \"Certificate hashed data: %s\\n\", HexStr(ss));\n+\n+    CSHA256 hasher;\n+    hasher.Write(reinterpret_cast<unsigned char*>(&(*ss.begin())), ss.end() - ss.begin());\n+\n+    uint256 hash_output;\n+    hasher.Finalize(hash_output.begin());\n+    return hash_output;\n+}\n+\n+bool Sv2SignatureNoiseMessage::Validate(XOnlyPubKey authority_key)\n+{\n+    if (m_version > 0) {\n+        LogTrace(BCLog::SV2, \"Invalid certificate version: %d\\n\", m_version);\n+        return false;\n+    }\n+    auto now{GetTime<std::chrono::seconds>()};\n+    if (std::chrono::seconds{m_valid_from} > now) {\n+        LogTrace(BCLog::SV2, \"Certificate valid from is in the future: %d\\n\", m_valid_from);\n+        return false;\n+    }\n+    if (std::chrono::seconds{m_valid_to} < now) {\n+        LogTrace(BCLog::SV2, \"Certificate expired: %d\\n\", m_valid_to);\n+        return false;\n+    }\n+\n+    if (!authority_key.VerifySchnorr(this->GetHash(), m_sig)) {\n+        LogTrace(BCLog::SV2, \"Certificate signature is invalid\\n\");\n+        return false;\n+    }\n+    return true;\n+}\n+\n+void Sv2SignatureNoiseMessage::SignSchnorr(const CKey& authority_key, Span<unsigned char> sig)\n+{\n+    authority_key.SignSchnorr(this->GetHash(), sig, nullptr, {});\n+}\n+\n+Sv2CipherState::Sv2CipherState(NoiseHash&& key) : m_key(std::move(key)) {};\n+\n+bool Sv2CipherState::DecryptWithAd(Span<const std::byte> associated_data, Span<std::byte> ciphertext, Span<std::byte> plain)\n+{\n+    Assume(Sv2Cipher::EncryptedMessageSize(plain.size()) == ciphertext.size());\n+\n+    if (m_nonce == UINT64_MAX) {\n+        // This nonce value is reserved, see chapter 5.1 of the Noise paper.\n+        LogTrace(BCLog::SV2, \"Nonce exceeds maximum value\\n\");\n+        return false;\n+    }\n+    AEADChaCha20Poly1305::Nonce96 nonce = {0, m_nonce};\n+    auto key = MakeByteSpan(m_key);\n+    AEADChaCha20Poly1305 aead{key};\n+    if (!aead.Decrypt(ciphertext, associated_data, nonce, plain)) {\n+        LogTrace(BCLog::SV2, \"Message decryption failed\\n\");\n+        return false;\n+    }\n+    // Only increase nonce if decryption succeeded\n+    m_nonce++;\n+    return true;\n+}\n+\n+bool Sv2CipherState::EncryptWithAd(Span<const std::byte> associated_data, Span<const std::byte> plain, Span<std::byte> ciphertext)\n+{\n+    Assume(Sv2Cipher::EncryptedMessageSize(plain.size()) == ciphertext.size());\n+\n+    if (m_nonce == UINT64_MAX) {\n+        // This nonce value is reserved, see chapter 5.1 of the Noise paper.\n+        LogTrace(BCLog::SV2, \"Nonce exceeds maximum value\\n\");\n+        return false;\n+    }\n+    AEADChaCha20Poly1305::Nonce96 nonce = {0, m_nonce++};\n+    auto key = MakeByteSpan(m_key);\n+    AEADChaCha20Poly1305 aead{key};\n+    aead.Encrypt(plain, associated_data, nonce, ciphertext);\n+    return true;\n+}\n+\n+bool Sv2CipherState::EncryptMessage(Span<const std::byte> plain, Span<std::byte> ciphertext)\n+{\n+    Assume(ciphertext.size() == Sv2Cipher::EncryptedMessageSize(plain.size()));\n+\n+    std::vector<std::byte> ad; // No associated data\n+\n+    const size_t max_chunk_size = NOISE_MAX_CHUNK_SIZE - Poly1305::TAGLEN;\n+    size_t num_chunks = plain.size() / max_chunk_size;\n+    if (plain.size() % max_chunk_size != 0) {\n+        num_chunks++;\n+    }",
      "path": "src/common/sv2_noise.cpp",
      "position": null,
      "original_position": 114,
      "commit_id": "b588ff85ae837e492269c922d0609bcd338e4752",
      "original_commit_id": "d4fc6e6077d665aaf74265e6888a93117710a4d9",
      "in_reply_to_id": 1751379795,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Taken",
      "created_at": "2024-09-19T14:18:38Z",
      "updated_at": "2024-09-19T14:18:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29346#discussion_r1766927347",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1766927347"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29346"
        }
      },
      "start_line": null,
      "original_start_line": 111,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 114,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1776344227",
      "pull_request_review_id": 2054783141,
      "id": 1776344227,
      "node_id": "PRRC_kwDOABII585p4Nyj",
      "diff_hunk": "@@ -71,6 +71,7 @@ namespace BCLog {\n         TXRECONCILIATION = (CategoryMask{1} << 26),\n         SCAN        = (CategoryMask{1} << 27),\n         TXPACKAGES  = (CategoryMask{1} << 28),\n+        SV2         = (CategoryMask{1} << 30),",
      "path": "src/logging.h",
      "position": 4,
      "original_position": 4,
      "commit_id": "b588ff85ae837e492269c922d0609bcd338e4752",
      "original_commit_id": "eccd4a959eb272d0dad585746d67fe2846fa4022",
      "in_reply_to_id": null,
      "user": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "b4a84ab: any reason for skipping 29?",
      "created_at": "2024-09-26T04:40:46Z",
      "updated_at": "2024-10-09T06:39:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29346#discussion_r1776344227",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1776344227"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29346"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 74,
      "original_line": 74,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1791274447",
      "pull_request_review_id": 2054783141,
      "id": 1791274447,
      "node_id": "PRRC_kwDOABII585qxK3P",
      "diff_hunk": "@@ -0,0 +1,299 @@\n+// Copyright (c) 2023-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_SV2_NOISE_H\n+#define BITCOIN_SV2_NOISE_H\n+\n+#include <compat/compat.h>\n+#include <crypto/poly1305.h>\n+#include <key.h>\n+#include <pubkey.h>\n+#include <random.h>\n+#include <streams.h>\n+#include <uint256.h>\n+\n+/** The Noise Protocol Framework\n+ *  https://noiseprotocol.org/noise.html\n+ *  Revision 38, 2018-07-11\n+ *\n+ *  Stratum v2 handshake and cipher specification:\n+ *  https://github.com/stratum-mining/sv2-spec/blob/main/04-Protocol-Security.md\n+ */\n+\n+/** Section 3: All Noise messages are less than or equal to 65535 bytes in length. */\n+static constexpr size_t NOISE_MAX_CHUNK_SIZE = 65535;\n+\n+static constexpr size_t HASHLEN{32};\n+using NoiseHash = std::array<uint8_t, HASHLEN>;\n+\n+/** Simple certificate for the static key signed by the authority key.\n+ * See 4.5.2 and 4.5.3 of the Stratum v2 spec.\n+ */\n+class Sv2SignatureNoiseMessage\n+{\n+public:\n+    /** Size of a Schnorr signature. */\n+    static constexpr size_t SCHNORR_SIGNATURE_SIZE = 64;\n+    /** Size of serialized message, which does not include the static key.  */\n+    static constexpr size_t SIZE = 2 + 4 + 4 + SCHNORR_SIGNATURE_SIZE;\n+\n+private:\n+    uint16_t m_version = 0;\n+    uint32_t m_valid_from = 0;\n+    uint32_t m_valid_to = 0;\n+    std::array<unsigned char, SCHNORR_SIGNATURE_SIZE> m_sig;\n+\n+    /** Hash of version, valid from/to and the static key. */\n+    uint256 GetHash();\n+    void SignSchnorr(const CKey& authority_key, Span<unsigned char> sig);\n+\n+public:\n+    Sv2SignatureNoiseMessage() = default;\n+    Sv2SignatureNoiseMessage(uint16_t version, uint32_t valid_from, uint32_t valid_to, const XOnlyPubKey& static_key, const CKey& authority_key);\n+\n+    /* The certificate serializes pubkeys in x-only format, not EllSwift. */\n+    XOnlyPubKey m_static_key = {};\n+\n+    [[nodiscard]] bool Validate(XOnlyPubKey authority_key);\n+\n+    template <typename Stream>\n+    // The static_key is signed for, but not serialized.\n+    void Serialize(Stream& s) const\n+    {\n+        s << m_version\n+          << m_valid_from\n+          << m_valid_to\n+          << m_sig;\n+    }\n+    template <typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> m_version\n+          >> m_valid_from\n+          >> m_valid_to\n+          >> m_sig;\n+    }\n+};\n+\n+/*\n+ * The CipherState uses m_key (k) and m_nonce (n) to encrypt and decrypt ciphertexts.\n+ * During the handshake phase each party has a single CipherState, but during\n+ * the transport phase each party has two CipherState objects: one for sending,\n+ * and one for receiving.\n+ *\n+ * See chapter \"5. Processing rules\" of the Noise paper.\n+ */\n+class Sv2CipherState\n+{\n+public:\n+    Sv2CipherState() = default;\n+    explicit Sv2CipherState(NoiseHash&& key);\n+\n+    /** Decrypt message\n+     * @param[in] associated_data associated data\n+     * @param[in] ciphertext message with encrypted and authenticated chunks.\n+     * @param[out] plain message (defragmented)\n+     * @returns whether decryption succeeded\n+     */\n+    [[nodiscard]] bool DecryptWithAd(Span<const std::byte> associated_data, Span<std::byte> ciphertext, Span<std::byte> plain);\n+\n+    /** Encrypt message\n+     * @param[in] associated_data associated data\n+     * @param[in] plain message\n+     * @param[out] ciphertext message with encrypted and authenticated chunks.\n+     * @returns whether encryption succeeded\n+     */\n+    [[nodiscard]] bool EncryptWithAd(Span<const std::byte> associated_data, Span<const std::byte> plain, Span<std::byte> ciphertext);\n+\n+    /** The message will be chunked in NOISE_MAX_CHUNK_SIZE parts and expanded\n+     *  by 16 bytes per chunk for its MAC.\n+     *\n+     * @param[in] plain message. Can't point to the same memory location as ciphertext,\n+     *                  because each encrypted message chunk would override the\n+     *                  start of the next plain text chunk.\n+     * @param[out] ciphertext   message with encrypted and authenticated chunks\n+     * @return whether encryption succeeded. Only fails if nonce is uint64_max.\n+     */\n+    [[nodiscard]] bool EncryptMessage(Span<const std::byte> plain, Span<std::byte> ciphertext);\n+\n+    /** Decrypt message.\n+     *\n+     * @param[in] ciphertext encrypted message\n+     * @param[out] plain decrypted message. May point to the same memory location\n+     *                  as ciphertext. The result is defragmented.\n+     */\n+    [[nodiscard]] bool DecryptMessage(Span<std::byte> ciphertext, Span<std::byte> plain);\n+\n+private:\n+    NoiseHash m_key{0};\n+    uint64_t m_nonce = 0;\n+};\n+\n+/*\n+ * A SymmetricState object contains a CipherState plus m_chaining_key (ck) and\n+ * m_hash_output (h) variables. It is so-named because it encapsulates all the\n+ * \"symmetric crypto\" used by Noise. During the handshake phase each party has\n+ * a single SymmetricState, which can be deleted once the handshake is finished.\n+ *\n+ * See chapter \"5. Processing rules\" of the Noise paper.\n+ */\n+class Sv2SymmetricState\n+{\n+public:\n+    // Sha256 hash of the ascii encoding - \"Noise_NX_Secp256k1+EllSwift_ChaChaPoly_SHA256\".\n+    // This is the first step required when setting up the chaining key.\n+    static constexpr NoiseHash PROTOCOL_NAME_HASH = {\n+        46, 180, 120, 129, 32, 142, 158, 238, 31, 102, 159, 103, 198, 110, 231, 14,\n+        169, 234, 136, 9, 13, 80, 63, 232, 48, 220, 75, 200, 62, 41, 191, 16};\n+\n+    // The double hash of protocol name \"Noise_NX_EllSwiftXonly_ChaChaPoly_SHA256\".",
      "path": "src/sv2/noise.h",
      "position": 150,
      "original_position": 150,
      "commit_id": "b588ff85ae837e492269c922d0609bcd338e4752",
      "original_commit_id": "b588ff85ae837e492269c922d0609bcd338e4752",
      "in_reply_to_id": null,
      "user": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "b588ff8: shouldn't this be \"Noise_NX_Secp256k1+EllSwift_ChaChaPoly_SHA256\" (from spec)?",
      "created_at": "2024-10-08T06:31:31Z",
      "updated_at": "2024-10-09T06:39:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29346#discussion_r1791274447",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1791274447"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29346"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 150,
      "original_line": 150,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1791964862",
      "pull_request_review_id": 2054783141,
      "id": 1791964862,
      "node_id": "PRRC_kwDOABII585qzza-",
      "diff_hunk": "@@ -0,0 +1,510 @@\n+// Copyright (c) 2023-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <sv2/noise.h>\n+\n+#include <crypto/chacha20poly1305.h>\n+#include <crypto/hmac_sha256.h>\n+#include <logging.h>\n+#include <util/check.h>\n+#include <util/strencodings.h>\n+#include <util/time.h>\n+\n+Sv2SignatureNoiseMessage::Sv2SignatureNoiseMessage(uint16_t version, uint32_t valid_from, uint32_t valid_to, const XOnlyPubKey& static_key, const CKey& authority_key) : m_version{version}, m_valid_from{valid_from}, m_valid_to{valid_to}, m_static_key{static_key}\n+{\n+    SignSchnorr(authority_key, m_sig);\n+}\n+\n+uint256 Sv2SignatureNoiseMessage::GetHash()\n+{\n+    DataStream ss{};\n+    ss << m_version\n+       << m_valid_from\n+       << m_valid_to\n+       << m_static_key;\n+\n+    LogTrace(BCLog::SV2, \"Certificate hashed data: %s\\n\", HexStr(ss));\n+\n+    CSHA256 hasher;\n+    hasher.Write(reinterpret_cast<unsigned char*>(&(*ss.begin())), ss.end() - ss.begin());\n+\n+    uint256 hash_output;\n+    hasher.Finalize(hash_output.begin());\n+    return hash_output;\n+}\n+\n+bool Sv2SignatureNoiseMessage::Validate(XOnlyPubKey authority_key)\n+{\n+    if (m_version > 0) {\n+        LogTrace(BCLog::SV2, \"Invalid certificate version: %d\\n\", m_version);\n+        return false;\n+    }\n+    auto now{GetTime<std::chrono::seconds>()};\n+    if (std::chrono::seconds{m_valid_from} > now) {\n+        LogTrace(BCLog::SV2, \"Certificate valid from is in the future: %d\\n\", m_valid_from);\n+        return false;\n+    }\n+    if (std::chrono::seconds{m_valid_to} < now) {\n+        LogTrace(BCLog::SV2, \"Certificate expired: %d\\n\", m_valid_to);\n+        return false;\n+    }\n+\n+    if (!authority_key.VerifySchnorr(this->GetHash(), m_sig)) {\n+        LogTrace(BCLog::SV2, \"Certificate signature is invalid\\n\");\n+        return false;\n+    }\n+    return true;\n+}\n+\n+void Sv2SignatureNoiseMessage::SignSchnorr(const CKey& authority_key, Span<unsigned char> sig)\n+{\n+    authority_key.SignSchnorr(this->GetHash(), sig, nullptr, {});\n+}\n+\n+Sv2CipherState::Sv2CipherState(NoiseHash&& key) : m_key(std::move(key)) {};\n+\n+bool Sv2CipherState::DecryptWithAd(Span<const std::byte> associated_data, Span<std::byte> ciphertext, Span<std::byte> plain)\n+{\n+    Assume(Sv2Cipher::EncryptedMessageSize(plain.size()) == ciphertext.size());\n+\n+    if (m_nonce == UINT64_MAX) {\n+        // This nonce value is reserved, see chapter 5.1 of the Noise paper.\n+        LogTrace(BCLog::SV2, \"Nonce exceeds maximum value\\n\");\n+        return false;\n+    }\n+    AEADChaCha20Poly1305::Nonce96 nonce = {0, m_nonce};\n+    auto key = MakeByteSpan(m_key);\n+    AEADChaCha20Poly1305 aead{key};\n+    if (!aead.Decrypt(ciphertext, associated_data, nonce, plain)) {\n+        LogTrace(BCLog::SV2, \"Message decryption failed\\n\");\n+        return false;\n+    }\n+    // Only increase nonce if decryption succeeded\n+    m_nonce++;\n+    return true;\n+}\n+\n+bool Sv2CipherState::EncryptWithAd(Span<const std::byte> associated_data, Span<const std::byte> plain, Span<std::byte> ciphertext)\n+{\n+    Assume(Sv2Cipher::EncryptedMessageSize(plain.size()) == ciphertext.size());\n+\n+    if (m_nonce == UINT64_MAX) {\n+        // This nonce value is reserved, see chapter 5.1 of the Noise paper.\n+        LogTrace(BCLog::SV2, \"Nonce exceeds maximum value\\n\");\n+        return false;\n+    }\n+    AEADChaCha20Poly1305::Nonce96 nonce = {0, m_nonce++};\n+    auto key = MakeByteSpan(m_key);\n+    AEADChaCha20Poly1305 aead{key};\n+    aead.Encrypt(plain, associated_data, nonce, ciphertext);\n+    return true;\n+}\n+\n+bool Sv2CipherState::EncryptMessage(Span<const std::byte> plain, Span<std::byte> ciphertext)\n+{\n+    Assume(ciphertext.size() == Sv2Cipher::EncryptedMessageSize(plain.size()));\n+\n+    std::vector<std::byte> ad; // No associated data\n+\n+    constexpr size_t max_chunk_size = NOISE_MAX_CHUNK_SIZE - Poly1305::TAGLEN;\n+    size_t num_chunks = (plain.size() + max_chunk_size - 1) / max_chunk_size;\n+    if (num_chunks > 1) {\n+        LogTrace(BCLog::SV2,\n+                 \"Split into %d chunks (max %d bytes)\\n\",\n+                 num_chunks, max_chunk_size);\n+    }\n+\n+    // Copy input bytes into output buffer\n+    const std::vector<std::byte> padding(Poly1305::TAGLEN, std::byte(0));\n+    for (size_t i = 0; i < num_chunks; ++i) {\n+        size_t chunk_start = i * max_chunk_size;\n+        size_t chunk_end = std::min(chunk_start + max_chunk_size, plain.size());\n+        size_t chunk_size = chunk_end - chunk_start;\n+        const auto encrypted_chunk_start = ciphertext.begin() + i * NOISE_MAX_CHUNK_SIZE;\n+        std::copy(plain.begin() + chunk_start, plain.begin() + chunk_start + chunk_size, encrypted_chunk_start);\n+        std::copy(padding.begin(), padding.end(), encrypted_chunk_start + chunk_size);\n+    }\n+\n+    // Encrypt each chunk\n+    size_t bytes_written = 0;\n+    for (size_t i = 0; i < num_chunks; ++i) {\n+        size_t chunk_size = std::min(ciphertext.size() - bytes_written, NOISE_MAX_CHUNK_SIZE);\n+        Span<std::byte> chunk = ciphertext.subspan(bytes_written, chunk_size);\n+        Span<std::byte> chunk_plain = ciphertext.subspan(bytes_written, chunk_size - Poly1305::TAGLEN);\n+        if (!EncryptWithAd(ad, chunk_plain, chunk)) {\n+            return false;\n+        }\n+        bytes_written += chunk.size();\n+    }\n+\n+    Assume(bytes_written == ciphertext.size());\n+    return true;\n+}\n+\n+bool Sv2CipherState::DecryptMessage(Span<std::byte> ciphertext, Span<std::byte> plain)\n+{\n+    Assume(Sv2Cipher::EncryptedMessageSize(plain.size()) == ciphertext.size());\n+\n+    size_t processed = 0;\n+    size_t plain_position = 0;\n+    std::vector<std::byte> ad; // No associated data\n+\n+    while (processed < ciphertext.size()) {\n+        size_t chunk_size = std::min(ciphertext.size() - processed, NOISE_MAX_CHUNK_SIZE);\n+        Span<std::byte> chunk_cipher = ciphertext.subspan(processed, chunk_size);\n+        Span<std::byte> chunk_plain = plain.subspan(plain_position, chunk_size - Poly1305::TAGLEN);\n+        if (!DecryptWithAd(ad, chunk_cipher, chunk_plain)) return false;\n+        processed += chunk_size;\n+        plain_position += chunk_size - Poly1305::TAGLEN;\n+    }\n+\n+    return true;\n+}\n+\n+void Sv2SymmetricState::MixHash(const Span<const std::byte> input)\n+{\n+    m_hash_output = (HashWriter{} << m_hash_output << input).GetSHA256();\n+}\n+\n+void Sv2SymmetricState::MixKey(const Span<const std::byte> input_key_material)\n+{\n+    NoiseHash out0;\n+    NoiseHash out1;\n+    HKDF2(input_key_material, out0, out1);\n+    m_chaining_key = std::move(out0);\n+    m_cipher_state = Sv2CipherState{std::move(out1)};\n+}\n+\n+std::string Sv2SymmetricState::GetChainingKey()\n+{\n+    return HexStr(m_chaining_key);\n+}\n+\n+void Sv2SymmetricState::LogChainingKey()\n+{\n+    LogTrace(BCLog::SV2, \"Chaining key: %s\\n\", GetChainingKey());\n+}\n+\n+void Sv2SymmetricState::HKDF2(const Span<const std::byte> input_key_material, NoiseHash& out0, NoiseHash& out1)\n+{\n+    NoiseHash tmp_key;\n+    CHMAC_SHA256 tmp_mac(m_chaining_key.data(), m_chaining_key.size());\n+    tmp_mac.Write(UCharCast(input_key_material.data()), input_key_material.size());\n+    tmp_mac.Finalize(tmp_key.data());\n+\n+    CHMAC_SHA256 out0_mac(tmp_key.data(), tmp_key.size());\n+    uint8_t one[1]{0x1};\n+    out0_mac.Write(one, 1);\n+    out0_mac.Finalize(out0.data());\n+\n+    std::vector<uint8_t> in1;\n+    in1.reserve(HASHLEN + 1);\n+    std::copy(out0.begin(), out0.end(), std::back_inserter(in1));\n+    in1.push_back(0x02);\n+\n+    CHMAC_SHA256 out1_mac(tmp_key.data(), tmp_key.size());\n+    out1_mac.Write(&in1[0], in1.size());\n+    out1_mac.Finalize(out1.data());\n+}\n+\n+bool Sv2SymmetricState::EncryptAndHash(Span<const std::byte> plain, Span<std::byte> ciphertext)\n+{\n+    Assume(Sv2Cipher::EncryptedMessageSize(plain.size()) == ciphertext.size());\n+\n+    if (!m_cipher_state.EncryptWithAd(MakeByteSpan(m_hash_output), plain, ciphertext)) {\n+        return false;\n+    }\n+    MixHash(ciphertext);\n+    return true;\n+}\n+\n+bool Sv2SymmetricState::DecryptAndHash(Span<std::byte> ciphertext, Span<std::byte> plain)\n+{\n+    Assume(Sv2Cipher::EncryptedMessageSize(plain.size()) == ciphertext.size());\n+\n+    // The handshake requires mix hashing the cipher text NOT the decrypted\n+    // plaintext.\n+    std::vector<std::byte> ciphertext_copy;\n+    ciphertext_copy.assign(ciphertext.begin(), ciphertext.end());\n+\n+    bool res = m_cipher_state.DecryptWithAd(MakeByteSpan(m_hash_output), ciphertext, plain);\n+    if (!res) return false;\n+    MixHash(ciphertext_copy);\n+    return true;\n+}\n+\n+std::array<Sv2CipherState, 2> Sv2SymmetricState::Split()\n+{\n+    NoiseHash send_key;\n+    NoiseHash recv_key;\n+    HKDF2({}, send_key, recv_key);\n+    return {Sv2CipherState{std::move(send_key)}, Sv2CipherState{std::move(recv_key)}};\n+}\n+\n+uint256 Sv2SymmetricState::GetHashOutput()\n+{\n+    return m_hash_output;\n+}\n+\n+void Sv2HandshakeState::SetEphemeralKey(CKey&& key)\n+{\n+    m_ephemeral_key = key;\n+    m_ephemeral_ellswift_pk = m_ephemeral_key.EllSwiftCreate(MakeByteSpan(GetRandHash()));\n+};\n+\n+void Sv2HandshakeState::GenerateEphemeralKey() noexcept\n+{\n+    Assume(!m_ephemeral_key.size());\n+    LogTrace(BCLog::SV2, \"Generate ephemeral key\\n\");\n+    SetEphemeralKey(GenerateRandomKey());\n+};\n+\n+void Sv2HandshakeState::WriteMsgEphemeralPK(Span<std::byte> msg)\n+{\n+    if (msg.size() < ELLSWIFT_PUB_KEY_SIZE) {\n+        throw std::runtime_error(strprintf(\"Invalid message size: %d bytes < %d\", msg.size(), ELLSWIFT_PUB_KEY_SIZE));\n+    }\n+\n+    if (!m_ephemeral_key.IsValid()) {\n+        GenerateEphemeralKey();\n+    }\n+\n+    LogTrace(BCLog::SV2, \"Write our ephemeral key\\n\");\n+    std::copy(m_ephemeral_ellswift_pk.begin(), m_ephemeral_ellswift_pk.end(), msg.begin());\n+\n+    m_symmetric_state.MixHash(msg.subspan(0, ELLSWIFT_PUB_KEY_SIZE));\n+    LogTrace(BCLog::SV2, \"Mix hash: %s\\n\", HexStr(m_symmetric_state.GetHashOutput()));\n+\n+    std::vector<std::byte> empty;\n+    m_symmetric_state.MixHash(empty);\n+}\n+\n+void Sv2HandshakeState::ReadMsgEphemeralPK(Span<std::byte> msg)\n+{\n+    LogTrace(BCLog::SV2, \"Read their ephemeral key\\n\");\n+    Assume(msg.size() == ELLSWIFT_PUB_KEY_SIZE);\n+    m_remote_ephemeral_ellswift_pk = EllSwiftPubKey(msg);\n+\n+    m_symmetric_state.MixHash(msg.subspan(0, ELLSWIFT_PUB_KEY_SIZE));\n+    LogTrace(BCLog::SV2, \"Mix hash: %s\\n\", HexStr(m_symmetric_state.GetHashOutput()));\n+\n+    std::vector<std::byte> empty;\n+    m_symmetric_state.MixHash(empty);\n+}\n+\n+void Sv2HandshakeState::WriteMsgES(Span<std::byte> msg)\n+{\n+    if (msg.size() < HANDSHAKE_STEP2_SIZE) {\n+        throw std::runtime_error(strprintf(\"Invalid message size: %d bytes < %d\", msg.size(), HANDSHAKE_STEP2_SIZE));\n+    }\n+\n+    ssize_t bytes_written = 0;\n+\n+    if (!m_ephemeral_key.IsValid()) {\n+        GenerateEphemeralKey();\n+    }\n+\n+    // Send our ephemeral pk.\n+    LogTrace(BCLog::SV2, \"Write our ephemeral key\\n\");\n+    std::copy(m_ephemeral_ellswift_pk.begin(), m_ephemeral_ellswift_pk.end(), msg.begin());\n+\n+    m_symmetric_state.MixHash(msg.subspan(0, ELLSWIFT_PUB_KEY_SIZE));\n+    bytes_written += ELLSWIFT_PUB_KEY_SIZE;\n+\n+    LogTrace(BCLog::SV2, \"Mix hash: %s\\n\", HexStr(m_symmetric_state.GetHashOutput()));\n+\n+    LogTrace(BCLog::SV2, \"Perform ECDH with the remote ephemeral key\\n\");\n+    ECDHSecret ecdh_secret{m_ephemeral_key.ComputeBIP324ECDHSecret(m_remote_ephemeral_ellswift_pk,\n+                                                                   m_ephemeral_ellswift_pk,\n+                                                                   /*initiating=*/false)};\n+\n+    LogTrace(BCLog::SV2, \"Mix key with ECDH result: ephemeral ours -- remote ephemeral\\n\");\n+    m_symmetric_state.MixKey(ecdh_secret);\n+    m_symmetric_state.LogChainingKey();\n+\n+    // Send our static pk.\n+    LogTrace(BCLog::SV2, \"Encrypt and write our static key\\n\");\n+\n+    if (!m_symmetric_state.EncryptAndHash(m_static_ellswift_pk, msg.subspan(ELLSWIFT_PUB_KEY_SIZE, ELLSWIFT_PUB_KEY_SIZE + Poly1305::TAGLEN))) {\n+        // This should never happen\n+        Assume(false);\n+        throw std::runtime_error(\"Failed to encrypt our ephemeral key\\n\");\n+    }\n+\n+    bytes_written += ELLSWIFT_PUB_KEY_SIZE + Poly1305::TAGLEN;\n+\n+    LogTrace(BCLog::SV2, \"Mix hash: %s\\n\", HexStr(m_symmetric_state.GetHashOutput()));\n+\n+    LogTrace(BCLog::SV2, \"Perform ECDH between our static and remote ephemeral key\\n\");\n+    ECDHSecret ecdh_static_secret{m_static_key.ComputeBIP324ECDHSecret(m_remote_ephemeral_ellswift_pk,\n+                                                                       m_static_ellswift_pk,\n+                                                                       /*initiating=*/false)};\n+    LogTrace(BCLog::SV2, \"ECDH result: %s\\n\", HexStr(ecdh_static_secret));\n+\n+    LogTrace(BCLog::SV2, \"Mix key with ECDH result: static ours -- remote ephemeral\\n\");\n+    m_symmetric_state.MixKey(ecdh_static_secret);\n+    m_symmetric_state.LogChainingKey();\n+\n+    // Serialize our digital signature noise message and encrypt.\n+    DataStream ss{};\n+    Assume(m_certificate);\n+    ss << m_certificate.value();\n+    Assume(ss.size() == Sv2SignatureNoiseMessage::SIZE);\n+\n+    LogTrace(BCLog::SV2, \"Encrypt certificate: %s\\n\", HexStr(ss));\n+    if (!m_symmetric_state.EncryptAndHash(ss, msg.subspan(bytes_written, Sv2SignatureNoiseMessage::SIZE + Poly1305::TAGLEN))) {\n+        // This should never happen\n+        Assume(false);\n+        throw std::runtime_error(\"Failed to encrypt our certificate\\n\");\n+    }\n+\n+    LogTrace(BCLog::SV2, \"Mix hash: %s\\n\", HexStr(m_symmetric_state.GetHashOutput()));\n+\n+    bytes_written += Sv2SignatureNoiseMessage::SIZE + Poly1305::TAGLEN;\n+    Assume(bytes_written == HANDSHAKE_STEP2_SIZE);\n+}\n+\n+bool Sv2HandshakeState::ReadMsgES(Span<std::byte> msg)\n+{\n+    Assume(msg.size() == HANDSHAKE_STEP2_SIZE);\n+    ssize_t bytes_read = 0;\n+\n+    // Read the remote ephmeral key from the msg and decrypt.\n+    LogTrace(BCLog::SV2, \"Read remote ephemeral key\\n\");\n+    m_remote_ephemeral_ellswift_pk = EllSwiftPubKey(msg.subspan(0, ELLSWIFT_PUB_KEY_SIZE));\n+    bytes_read += ELLSWIFT_PUB_KEY_SIZE;\n+\n+    m_symmetric_state.MixHash(m_remote_ephemeral_ellswift_pk);\n+    LogTrace(BCLog::SV2, \"Mix hash: %s\\n\", HexStr(m_symmetric_state.GetHashOutput()));\n+\n+    LogTrace(BCLog::SV2, \"Perform ECDH with the remote ephemeral key\\n\");\n+    ECDHSecret ecdh_secret{m_ephemeral_key.ComputeBIP324ECDHSecret(m_remote_ephemeral_ellswift_pk,\n+                                                                   m_ephemeral_ellswift_pk,\n+                                                                   /*initiating=*/true)};\n+\n+    LogTrace(BCLog::SV2, \"Mix key with ECDH result: ephemeral ours -- remote ephemeral\\n\");\n+    m_symmetric_state.MixKey(ecdh_secret);\n+    m_symmetric_state.LogChainingKey();\n+\n+    LogTrace(BCLog::SV2, \"Decrypt remote static key\\n\");\n+    std::array<std::byte, ELLSWIFT_PUB_KEY_SIZE> remote_static_key_bytes;\n+    bool res = m_symmetric_state.DecryptAndHash(msg.subspan(ELLSWIFT_PUB_KEY_SIZE, ELLSWIFT_PUB_KEY_SIZE + Poly1305::TAGLEN), remote_static_key_bytes);\n+    if (!res) return false;\n+    bytes_read += ELLSWIFT_PUB_KEY_SIZE + Poly1305::TAGLEN;\n+\n+    LogTrace(BCLog::SV2, \"Mix hash: %s\\n\", HexStr(m_symmetric_state.GetHashOutput()));\n+\n+    // Load remote static key from the decryted msg\n+    m_remote_static_ellswift_pk = EllSwiftPubKey(remote_static_key_bytes);\n+\n+    LogTrace(BCLog::SV2, \"Perform ECDH on the remote static key\\n\");\n+    ECDHSecret ecdh_static_secret{m_ephemeral_key.ComputeBIP324ECDHSecret(m_remote_static_ellswift_pk,\n+                                                                          m_ephemeral_ellswift_pk,\n+                                                                          /*initiating=*/true)};\n+    LogTrace(BCLog::SV2, \"ECDH result: %s\\n\", HexStr(ecdh_static_secret));\n+\n+    LogTrace(BCLog::SV2, \"Mix key with ECDH result: ephemeral ours -- remote static\\n\");\n+    m_symmetric_state.MixKey(ecdh_static_secret);\n+    m_symmetric_state.LogChainingKey();\n+\n+    LogTrace(BCLog::SV2, \"Decrypt remote certificate\\n\");\n+    std::array<std::byte, Sv2SignatureNoiseMessage::SIZE> remote_cert_bytes;\n+    res = m_symmetric_state.DecryptAndHash(msg.subspan(bytes_read, Sv2SignatureNoiseMessage::SIZE + Poly1305::TAGLEN), remote_cert_bytes);\n+    if (!res) return false;\n+    bytes_read += (Sv2SignatureNoiseMessage::SIZE + Poly1305::TAGLEN);\n+\n+    LogTrace(BCLog::SV2, \"Validate remote certificate\\n\");\n+    DataStream ss_cert(remote_cert_bytes);\n+    Sv2SignatureNoiseMessage cert;\n+    ss_cert >> cert;\n+    cert.m_static_key = XOnlyPubKey(m_remote_static_ellswift_pk.Decode());\n+    Assume(m_authority_pubkey);\n+    if (!cert.Validate(m_authority_pubkey.value())) {\n+        // We initiated the connection, so it's safe to unconditionally log this:\n+        LogWarning(\"Invalid certificate: %s\\n\", HexStr(remote_cert_bytes));\n+        return false;\n+    }\n+\n+    LogTrace(BCLog::SV2, \"Mix hash: %s\\n\", HexStr(m_symmetric_state.GetHashOutput()));",
      "path": "src/sv2/noise.cpp",
      "position": 429,
      "original_position": 429,
      "commit_id": "b588ff85ae837e492269c922d0609bcd338e4752",
      "original_commit_id": "b588ff85ae837e492269c922d0609bcd338e4752",
      "in_reply_to_id": null,
      "user": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "b588ff8: nit: could move the MixHash log up (after `DecryptAndHash`)and before Validate log for more clarity.",
      "created_at": "2024-10-08T14:13:17Z",
      "updated_at": "2024-10-09T06:39:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29346#discussion_r1791964862",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1791964862"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29346"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 429,
      "original_line": 429,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1792055061",
      "pull_request_review_id": 2054783141,
      "id": 1792055061,
      "node_id": "PRRC_kwDOABII585q0JcV",
      "diff_hunk": "@@ -0,0 +1,510 @@\n+// Copyright (c) 2023-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <sv2/noise.h>\n+\n+#include <crypto/chacha20poly1305.h>\n+#include <crypto/hmac_sha256.h>\n+#include <logging.h>\n+#include <util/check.h>\n+#include <util/strencodings.h>\n+#include <util/time.h>\n+\n+Sv2SignatureNoiseMessage::Sv2SignatureNoiseMessage(uint16_t version, uint32_t valid_from, uint32_t valid_to, const XOnlyPubKey& static_key, const CKey& authority_key) : m_version{version}, m_valid_from{valid_from}, m_valid_to{valid_to}, m_static_key{static_key}\n+{\n+    SignSchnorr(authority_key, m_sig);\n+}\n+\n+uint256 Sv2SignatureNoiseMessage::GetHash()\n+{\n+    DataStream ss{};\n+    ss << m_version\n+       << m_valid_from\n+       << m_valid_to\n+       << m_static_key;\n+\n+    LogTrace(BCLog::SV2, \"Certificate hashed data: %s\\n\", HexStr(ss));\n+\n+    CSHA256 hasher;\n+    hasher.Write(reinterpret_cast<unsigned char*>(&(*ss.begin())), ss.end() - ss.begin());\n+\n+    uint256 hash_output;\n+    hasher.Finalize(hash_output.begin());\n+    return hash_output;\n+}\n+\n+bool Sv2SignatureNoiseMessage::Validate(XOnlyPubKey authority_key)\n+{\n+    if (m_version > 0) {\n+        LogTrace(BCLog::SV2, \"Invalid certificate version: %d\\n\", m_version);\n+        return false;\n+    }\n+    auto now{GetTime<std::chrono::seconds>()};\n+    if (std::chrono::seconds{m_valid_from} > now) {\n+        LogTrace(BCLog::SV2, \"Certificate valid from is in the future: %d\\n\", m_valid_from);\n+        return false;\n+    }\n+    if (std::chrono::seconds{m_valid_to} < now) {\n+        LogTrace(BCLog::SV2, \"Certificate expired: %d\\n\", m_valid_to);\n+        return false;\n+    }\n+\n+    if (!authority_key.VerifySchnorr(this->GetHash(), m_sig)) {\n+        LogTrace(BCLog::SV2, \"Certificate signature is invalid\\n\");\n+        return false;\n+    }\n+    return true;\n+}\n+\n+void Sv2SignatureNoiseMessage::SignSchnorr(const CKey& authority_key, Span<unsigned char> sig)\n+{\n+    authority_key.SignSchnorr(this->GetHash(), sig, nullptr, {});\n+}\n+\n+Sv2CipherState::Sv2CipherState(NoiseHash&& key) : m_key(std::move(key)) {};\n+\n+bool Sv2CipherState::DecryptWithAd(Span<const std::byte> associated_data, Span<std::byte> ciphertext, Span<std::byte> plain)\n+{\n+    Assume(Sv2Cipher::EncryptedMessageSize(plain.size()) == ciphertext.size());\n+\n+    if (m_nonce == UINT64_MAX) {\n+        // This nonce value is reserved, see chapter 5.1 of the Noise paper.\n+        LogTrace(BCLog::SV2, \"Nonce exceeds maximum value\\n\");\n+        return false;\n+    }\n+    AEADChaCha20Poly1305::Nonce96 nonce = {0, m_nonce};\n+    auto key = MakeByteSpan(m_key);\n+    AEADChaCha20Poly1305 aead{key};\n+    if (!aead.Decrypt(ciphertext, associated_data, nonce, plain)) {\n+        LogTrace(BCLog::SV2, \"Message decryption failed\\n\");\n+        return false;\n+    }\n+    // Only increase nonce if decryption succeeded\n+    m_nonce++;\n+    return true;\n+}\n+\n+bool Sv2CipherState::EncryptWithAd(Span<const std::byte> associated_data, Span<const std::byte> plain, Span<std::byte> ciphertext)\n+{\n+    Assume(Sv2Cipher::EncryptedMessageSize(plain.size()) == ciphertext.size());\n+\n+    if (m_nonce == UINT64_MAX) {\n+        // This nonce value is reserved, see chapter 5.1 of the Noise paper.\n+        LogTrace(BCLog::SV2, \"Nonce exceeds maximum value\\n\");\n+        return false;\n+    }\n+    AEADChaCha20Poly1305::Nonce96 nonce = {0, m_nonce++};\n+    auto key = MakeByteSpan(m_key);\n+    AEADChaCha20Poly1305 aead{key};\n+    aead.Encrypt(plain, associated_data, nonce, ciphertext);\n+    return true;\n+}\n+\n+bool Sv2CipherState::EncryptMessage(Span<const std::byte> plain, Span<std::byte> ciphertext)\n+{\n+    Assume(ciphertext.size() == Sv2Cipher::EncryptedMessageSize(plain.size()));\n+\n+    std::vector<std::byte> ad; // No associated data\n+\n+    constexpr size_t max_chunk_size = NOISE_MAX_CHUNK_SIZE - Poly1305::TAGLEN;\n+    size_t num_chunks = (plain.size() + max_chunk_size - 1) / max_chunk_size;\n+    if (num_chunks > 1) {\n+        LogTrace(BCLog::SV2,\n+                 \"Split into %d chunks (max %d bytes)\\n\",\n+                 num_chunks, max_chunk_size);\n+    }\n+\n+    // Copy input bytes into output buffer\n+    const std::vector<std::byte> padding(Poly1305::TAGLEN, std::byte(0));\n+    for (size_t i = 0; i < num_chunks; ++i) {\n+        size_t chunk_start = i * max_chunk_size;\n+        size_t chunk_end = std::min(chunk_start + max_chunk_size, plain.size());\n+        size_t chunk_size = chunk_end - chunk_start;\n+        const auto encrypted_chunk_start = ciphertext.begin() + i * NOISE_MAX_CHUNK_SIZE;\n+        std::copy(plain.begin() + chunk_start, plain.begin() + chunk_start + chunk_size, encrypted_chunk_start);\n+        std::copy(padding.begin(), padding.end(), encrypted_chunk_start + chunk_size);\n+    }\n+\n+    // Encrypt each chunk\n+    size_t bytes_written = 0;\n+    for (size_t i = 0; i < num_chunks; ++i) {\n+        size_t chunk_size = std::min(ciphertext.size() - bytes_written, NOISE_MAX_CHUNK_SIZE);\n+        Span<std::byte> chunk = ciphertext.subspan(bytes_written, chunk_size);\n+        Span<std::byte> chunk_plain = ciphertext.subspan(bytes_written, chunk_size - Poly1305::TAGLEN);\n+        if (!EncryptWithAd(ad, chunk_plain, chunk)) {\n+            return false;\n+        }\n+        bytes_written += chunk.size();\n+    }\n+\n+    Assume(bytes_written == ciphertext.size());\n+    return true;\n+}\n+\n+bool Sv2CipherState::DecryptMessage(Span<std::byte> ciphertext, Span<std::byte> plain)\n+{\n+    Assume(Sv2Cipher::EncryptedMessageSize(plain.size()) == ciphertext.size());\n+\n+    size_t processed = 0;\n+    size_t plain_position = 0;\n+    std::vector<std::byte> ad; // No associated data\n+\n+    while (processed < ciphertext.size()) {\n+        size_t chunk_size = std::min(ciphertext.size() - processed, NOISE_MAX_CHUNK_SIZE);\n+        Span<std::byte> chunk_cipher = ciphertext.subspan(processed, chunk_size);\n+        Span<std::byte> chunk_plain = plain.subspan(plain_position, chunk_size - Poly1305::TAGLEN);\n+        if (!DecryptWithAd(ad, chunk_cipher, chunk_plain)) return false;\n+        processed += chunk_size;\n+        plain_position += chunk_size - Poly1305::TAGLEN;\n+    }\n+\n+    return true;\n+}\n+\n+void Sv2SymmetricState::MixHash(const Span<const std::byte> input)\n+{\n+    m_hash_output = (HashWriter{} << m_hash_output << input).GetSHA256();\n+}\n+\n+void Sv2SymmetricState::MixKey(const Span<const std::byte> input_key_material)\n+{\n+    NoiseHash out0;\n+    NoiseHash out1;\n+    HKDF2(input_key_material, out0, out1);\n+    m_chaining_key = std::move(out0);\n+    m_cipher_state = Sv2CipherState{std::move(out1)};\n+}\n+\n+std::string Sv2SymmetricState::GetChainingKey()\n+{\n+    return HexStr(m_chaining_key);\n+}\n+\n+void Sv2SymmetricState::LogChainingKey()\n+{\n+    LogTrace(BCLog::SV2, \"Chaining key: %s\\n\", GetChainingKey());\n+}\n+\n+void Sv2SymmetricState::HKDF2(const Span<const std::byte> input_key_material, NoiseHash& out0, NoiseHash& out1)\n+{\n+    NoiseHash tmp_key;\n+    CHMAC_SHA256 tmp_mac(m_chaining_key.data(), m_chaining_key.size());\n+    tmp_mac.Write(UCharCast(input_key_material.data()), input_key_material.size());\n+    tmp_mac.Finalize(tmp_key.data());\n+\n+    CHMAC_SHA256 out0_mac(tmp_key.data(), tmp_key.size());\n+    uint8_t one[1]{0x1};\n+    out0_mac.Write(one, 1);\n+    out0_mac.Finalize(out0.data());\n+\n+    std::vector<uint8_t> in1;\n+    in1.reserve(HASHLEN + 1);\n+    std::copy(out0.begin(), out0.end(), std::back_inserter(in1));\n+    in1.push_back(0x02);\n+\n+    CHMAC_SHA256 out1_mac(tmp_key.data(), tmp_key.size());\n+    out1_mac.Write(&in1[0], in1.size());\n+    out1_mac.Finalize(out1.data());\n+}\n+\n+bool Sv2SymmetricState::EncryptAndHash(Span<const std::byte> plain, Span<std::byte> ciphertext)\n+{\n+    Assume(Sv2Cipher::EncryptedMessageSize(plain.size()) == ciphertext.size());\n+\n+    if (!m_cipher_state.EncryptWithAd(MakeByteSpan(m_hash_output), plain, ciphertext)) {\n+        return false;\n+    }\n+    MixHash(ciphertext);\n+    return true;\n+}\n+\n+bool Sv2SymmetricState::DecryptAndHash(Span<std::byte> ciphertext, Span<std::byte> plain)\n+{\n+    Assume(Sv2Cipher::EncryptedMessageSize(plain.size()) == ciphertext.size());\n+\n+    // The handshake requires mix hashing the cipher text NOT the decrypted\n+    // plaintext.\n+    std::vector<std::byte> ciphertext_copy;\n+    ciphertext_copy.assign(ciphertext.begin(), ciphertext.end());\n+\n+    bool res = m_cipher_state.DecryptWithAd(MakeByteSpan(m_hash_output), ciphertext, plain);\n+    if (!res) return false;\n+    MixHash(ciphertext_copy);\n+    return true;\n+}\n+\n+std::array<Sv2CipherState, 2> Sv2SymmetricState::Split()\n+{\n+    NoiseHash send_key;\n+    NoiseHash recv_key;\n+    HKDF2({}, send_key, recv_key);\n+    return {Sv2CipherState{std::move(send_key)}, Sv2CipherState{std::move(recv_key)}};\n+}\n+\n+uint256 Sv2SymmetricState::GetHashOutput()\n+{\n+    return m_hash_output;\n+}\n+\n+void Sv2HandshakeState::SetEphemeralKey(CKey&& key)\n+{\n+    m_ephemeral_key = key;\n+    m_ephemeral_ellswift_pk = m_ephemeral_key.EllSwiftCreate(MakeByteSpan(GetRandHash()));\n+};\n+\n+void Sv2HandshakeState::GenerateEphemeralKey() noexcept\n+{\n+    Assume(!m_ephemeral_key.size());\n+    LogTrace(BCLog::SV2, \"Generate ephemeral key\\n\");\n+    SetEphemeralKey(GenerateRandomKey());\n+};\n+\n+void Sv2HandshakeState::WriteMsgEphemeralPK(Span<std::byte> msg)\n+{\n+    if (msg.size() < ELLSWIFT_PUB_KEY_SIZE) {\n+        throw std::runtime_error(strprintf(\"Invalid message size: %d bytes < %d\", msg.size(), ELLSWIFT_PUB_KEY_SIZE));\n+    }\n+\n+    if (!m_ephemeral_key.IsValid()) {\n+        GenerateEphemeralKey();\n+    }\n+\n+    LogTrace(BCLog::SV2, \"Write our ephemeral key\\n\");\n+    std::copy(m_ephemeral_ellswift_pk.begin(), m_ephemeral_ellswift_pk.end(), msg.begin());\n+\n+    m_symmetric_state.MixHash(msg.subspan(0, ELLSWIFT_PUB_KEY_SIZE));\n+    LogTrace(BCLog::SV2, \"Mix hash: %s\\n\", HexStr(m_symmetric_state.GetHashOutput()));\n+\n+    std::vector<std::byte> empty;\n+    m_symmetric_state.MixHash(empty);\n+}\n+\n+void Sv2HandshakeState::ReadMsgEphemeralPK(Span<std::byte> msg)\n+{\n+    LogTrace(BCLog::SV2, \"Read their ephemeral key\\n\");\n+    Assume(msg.size() == ELLSWIFT_PUB_KEY_SIZE);\n+    m_remote_ephemeral_ellswift_pk = EllSwiftPubKey(msg);\n+\n+    m_symmetric_state.MixHash(msg.subspan(0, ELLSWIFT_PUB_KEY_SIZE));\n+    LogTrace(BCLog::SV2, \"Mix hash: %s\\n\", HexStr(m_symmetric_state.GetHashOutput()));\n+\n+    std::vector<std::byte> empty;\n+    m_symmetric_state.MixHash(empty);\n+}\n+\n+void Sv2HandshakeState::WriteMsgES(Span<std::byte> msg)\n+{\n+    if (msg.size() < HANDSHAKE_STEP2_SIZE) {\n+        throw std::runtime_error(strprintf(\"Invalid message size: %d bytes < %d\", msg.size(), HANDSHAKE_STEP2_SIZE));\n+    }\n+\n+    ssize_t bytes_written = 0;\n+\n+    if (!m_ephemeral_key.IsValid()) {\n+        GenerateEphemeralKey();\n+    }\n+\n+    // Send our ephemeral pk.\n+    LogTrace(BCLog::SV2, \"Write our ephemeral key\\n\");\n+    std::copy(m_ephemeral_ellswift_pk.begin(), m_ephemeral_ellswift_pk.end(), msg.begin());\n+\n+    m_symmetric_state.MixHash(msg.subspan(0, ELLSWIFT_PUB_KEY_SIZE));\n+    bytes_written += ELLSWIFT_PUB_KEY_SIZE;\n+\n+    LogTrace(BCLog::SV2, \"Mix hash: %s\\n\", HexStr(m_symmetric_state.GetHashOutput()));\n+\n+    LogTrace(BCLog::SV2, \"Perform ECDH with the remote ephemeral key\\n\");\n+    ECDHSecret ecdh_secret{m_ephemeral_key.ComputeBIP324ECDHSecret(m_remote_ephemeral_ellswift_pk,\n+                                                                   m_ephemeral_ellswift_pk,\n+                                                                   /*initiating=*/false)};\n+\n+    LogTrace(BCLog::SV2, \"Mix key with ECDH result: ephemeral ours -- remote ephemeral\\n\");\n+    m_symmetric_state.MixKey(ecdh_secret);\n+    m_symmetric_state.LogChainingKey();\n+\n+    // Send our static pk.\n+    LogTrace(BCLog::SV2, \"Encrypt and write our static key\\n\");\n+\n+    if (!m_symmetric_state.EncryptAndHash(m_static_ellswift_pk, msg.subspan(ELLSWIFT_PUB_KEY_SIZE, ELLSWIFT_PUB_KEY_SIZE + Poly1305::TAGLEN))) {\n+        // This should never happen\n+        Assume(false);\n+        throw std::runtime_error(\"Failed to encrypt our ephemeral key\\n\");\n+    }\n+\n+    bytes_written += ELLSWIFT_PUB_KEY_SIZE + Poly1305::TAGLEN;\n+\n+    LogTrace(BCLog::SV2, \"Mix hash: %s\\n\", HexStr(m_symmetric_state.GetHashOutput()));\n+\n+    LogTrace(BCLog::SV2, \"Perform ECDH between our static and remote ephemeral key\\n\");\n+    ECDHSecret ecdh_static_secret{m_static_key.ComputeBIP324ECDHSecret(m_remote_ephemeral_ellswift_pk,\n+                                                                       m_static_ellswift_pk,\n+                                                                       /*initiating=*/false)};\n+    LogTrace(BCLog::SV2, \"ECDH result: %s\\n\", HexStr(ecdh_static_secret));\n+\n+    LogTrace(BCLog::SV2, \"Mix key with ECDH result: static ours -- remote ephemeral\\n\");\n+    m_symmetric_state.MixKey(ecdh_static_secret);\n+    m_symmetric_state.LogChainingKey();\n+\n+    // Serialize our digital signature noise message and encrypt.\n+    DataStream ss{};\n+    Assume(m_certificate);\n+    ss << m_certificate.value();\n+    Assume(ss.size() == Sv2SignatureNoiseMessage::SIZE);\n+\n+    LogTrace(BCLog::SV2, \"Encrypt certificate: %s\\n\", HexStr(ss));\n+    if (!m_symmetric_state.EncryptAndHash(ss, msg.subspan(bytes_written, Sv2SignatureNoiseMessage::SIZE + Poly1305::TAGLEN))) {\n+        // This should never happen\n+        Assume(false);\n+        throw std::runtime_error(\"Failed to encrypt our certificate\\n\");\n+    }\n+\n+    LogTrace(BCLog::SV2, \"Mix hash: %s\\n\", HexStr(m_symmetric_state.GetHashOutput()));\n+\n+    bytes_written += Sv2SignatureNoiseMessage::SIZE + Poly1305::TAGLEN;\n+    Assume(bytes_written == HANDSHAKE_STEP2_SIZE);\n+}\n+\n+bool Sv2HandshakeState::ReadMsgES(Span<std::byte> msg)\n+{\n+    Assume(msg.size() == HANDSHAKE_STEP2_SIZE);\n+    ssize_t bytes_read = 0;\n+\n+    // Read the remote ephmeral key from the msg and decrypt.\n+    LogTrace(BCLog::SV2, \"Read remote ephemeral key\\n\");\n+    m_remote_ephemeral_ellswift_pk = EllSwiftPubKey(msg.subspan(0, ELLSWIFT_PUB_KEY_SIZE));\n+    bytes_read += ELLSWIFT_PUB_KEY_SIZE;\n+\n+    m_symmetric_state.MixHash(m_remote_ephemeral_ellswift_pk);\n+    LogTrace(BCLog::SV2, \"Mix hash: %s\\n\", HexStr(m_symmetric_state.GetHashOutput()));\n+\n+    LogTrace(BCLog::SV2, \"Perform ECDH with the remote ephemeral key\\n\");\n+    ECDHSecret ecdh_secret{m_ephemeral_key.ComputeBIP324ECDHSecret(m_remote_ephemeral_ellswift_pk,\n+                                                                   m_ephemeral_ellswift_pk,\n+                                                                   /*initiating=*/true)};\n+\n+    LogTrace(BCLog::SV2, \"Mix key with ECDH result: ephemeral ours -- remote ephemeral\\n\");\n+    m_symmetric_state.MixKey(ecdh_secret);\n+    m_symmetric_state.LogChainingKey();\n+\n+    LogTrace(BCLog::SV2, \"Decrypt remote static key\\n\");\n+    std::array<std::byte, ELLSWIFT_PUB_KEY_SIZE> remote_static_key_bytes;\n+    bool res = m_symmetric_state.DecryptAndHash(msg.subspan(ELLSWIFT_PUB_KEY_SIZE, ELLSWIFT_PUB_KEY_SIZE + Poly1305::TAGLEN), remote_static_key_bytes);\n+    if (!res) return false;\n+    bytes_read += ELLSWIFT_PUB_KEY_SIZE + Poly1305::TAGLEN;\n+\n+    LogTrace(BCLog::SV2, \"Mix hash: %s\\n\", HexStr(m_symmetric_state.GetHashOutput()));\n+\n+    // Load remote static key from the decryted msg\n+    m_remote_static_ellswift_pk = EllSwiftPubKey(remote_static_key_bytes);\n+\n+    LogTrace(BCLog::SV2, \"Perform ECDH on the remote static key\\n\");\n+    ECDHSecret ecdh_static_secret{m_ephemeral_key.ComputeBIP324ECDHSecret(m_remote_static_ellswift_pk,\n+                                                                          m_ephemeral_ellswift_pk,\n+                                                                          /*initiating=*/true)};\n+    LogTrace(BCLog::SV2, \"ECDH result: %s\\n\", HexStr(ecdh_static_secret));\n+\n+    LogTrace(BCLog::SV2, \"Mix key with ECDH result: ephemeral ours -- remote static\\n\");\n+    m_symmetric_state.MixKey(ecdh_static_secret);\n+    m_symmetric_state.LogChainingKey();\n+\n+    LogTrace(BCLog::SV2, \"Decrypt remote certificate\\n\");\n+    std::array<std::byte, Sv2SignatureNoiseMessage::SIZE> remote_cert_bytes;\n+    res = m_symmetric_state.DecryptAndHash(msg.subspan(bytes_read, Sv2SignatureNoiseMessage::SIZE + Poly1305::TAGLEN), remote_cert_bytes);\n+    if (!res) return false;\n+    bytes_read += (Sv2SignatureNoiseMessage::SIZE + Poly1305::TAGLEN);\n+\n+    LogTrace(BCLog::SV2, \"Validate remote certificate\\n\");\n+    DataStream ss_cert(remote_cert_bytes);\n+    Sv2SignatureNoiseMessage cert;\n+    ss_cert >> cert;\n+    cert.m_static_key = XOnlyPubKey(m_remote_static_ellswift_pk.Decode());\n+    Assume(m_authority_pubkey);\n+    if (!cert.Validate(m_authority_pubkey.value())) {\n+        // We initiated the connection, so it's safe to unconditionally log this:\n+        LogWarning(\"Invalid certificate: %s\\n\", HexStr(remote_cert_bytes));\n+        return false;\n+    }\n+\n+    LogTrace(BCLog::SV2, \"Mix hash: %s\\n\", HexStr(m_symmetric_state.GetHashOutput()));\n+\n+    Assume(bytes_read == HANDSHAKE_STEP2_SIZE);\n+    return true;\n+}\n+\n+std::array<Sv2CipherState, 2> Sv2HandshakeState::SplitSymmetricState()\n+{\n+    return m_symmetric_state.Split();\n+}\n+\n+uint256 Sv2HandshakeState::GetHashOutput()\n+{\n+    return m_symmetric_state.GetHashOutput();\n+}\n+\n+Sv2Cipher::Sv2Cipher(CKey&& static_key, XOnlyPubKey authority_pubkey)\n+{\n+    m_handshake_state = std::make_unique<Sv2HandshakeState>(std::move(static_key), authority_pubkey);\n+    m_initiator = true;\n+}\n+\n+Sv2Cipher::Sv2Cipher(CKey&& static_key, Sv2SignatureNoiseMessage&& certificate)\n+{\n+    m_handshake_state = std::make_unique<Sv2HandshakeState>(std::move(static_key), std::move(certificate));\n+    m_initiator = false;\n+}\n+\n+Sv2HandshakeState& Sv2Cipher::GetHandshakeState()\n+{\n+    Assume(m_handshake_state);\n+    return *m_handshake_state;\n+}\n+\n+void Sv2Cipher::FinishHandshake()\n+{\n+    Assume(m_handshake_state);\n+\n+    auto cipher_state{m_handshake_state->SplitSymmetricState()};\n+\n+    m_hash = m_handshake_state->GetHashOutput();\n+\n+    m_cs1 = std::move(cipher_state[0]);\n+    m_cs2 = std::move(cipher_state[1]);\n+\n+    m_handshake_state.reset();\n+}\n+\n+size_t Sv2Cipher::EncryptedMessageSize(const size_t msg_len)\n+{\n+    constexpr size_t chunk_size = NOISE_MAX_CHUNK_SIZE - Poly1305::TAGLEN;\n+    const size_t num_chunks = (msg_len + chunk_size - 1) / chunk_size;\n+    return msg_len + (num_chunks * Poly1305::TAGLEN);\n+}\n+\n+bool Sv2Cipher::DecryptMessage(Span<std::byte> ciphertext, Span<std::byte> plain)\n+{\n+    Assume(EncryptedMessageSize(plain.size()) == ciphertext.size());\n+\n+    if (m_initiator) {\n+        return m_cs2.DecryptMessage(ciphertext, plain);\n+    } else {\n+        return m_cs1.DecryptMessage(ciphertext, plain);\n+    }\n+}\n+\n+bool Sv2Cipher::EncryptMessage(Span<const std::byte> input, Span<std::byte> output)\n+{\n+    Assume(output.size() == Sv2Cipher::EncryptedMessageSize(input.size()));\n+\n+    if (m_initiator) {\n+        if (!m_cs1.EncryptMessage(input, output)) return false;",
      "path": "src/sv2/noise.cpp",
      "position": 500,
      "original_position": 500,
      "commit_id": "b588ff85ae837e492269c922d0609bcd338e4752",
      "original_commit_id": "b588ff85ae837e492269c922d0609bcd338e4752",
      "in_reply_to_id": null,
      "user": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "b588ff8: (micro nit/feel free to ignore)  could `return m_cs1.EncryptMessage` to keep it consistent with how it's done in  `DecryptMessage`.",
      "created_at": "2024-10-08T15:03:34Z",
      "updated_at": "2024-10-09T06:39:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29346#discussion_r1792055061",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1792055061"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29346"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 500,
      "original_line": 500,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1792116481",
      "pull_request_review_id": 2054783141,
      "id": 1792116481,
      "node_id": "PRRC_kwDOABII585q0YcB",
      "diff_hunk": "@@ -0,0 +1,299 @@\n+// Copyright (c) 2023-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_SV2_NOISE_H\n+#define BITCOIN_SV2_NOISE_H\n+\n+#include <compat/compat.h>\n+#include <crypto/poly1305.h>\n+#include <key.h>\n+#include <pubkey.h>\n+#include <random.h>\n+#include <streams.h>\n+#include <uint256.h>\n+\n+/** The Noise Protocol Framework\n+ *  https://noiseprotocol.org/noise.html\n+ *  Revision 38, 2018-07-11\n+ *\n+ *  Stratum v2 handshake and cipher specification:\n+ *  https://github.com/stratum-mining/sv2-spec/blob/main/04-Protocol-Security.md\n+ */\n+\n+/** Section 3: All Noise messages are less than or equal to 65535 bytes in length. */\n+static constexpr size_t NOISE_MAX_CHUNK_SIZE = 65535;\n+\n+static constexpr size_t HASHLEN{32};\n+using NoiseHash = std::array<uint8_t, HASHLEN>;\n+\n+/** Simple certificate for the static key signed by the authority key.\n+ * See 4.5.2 and 4.5.3 of the Stratum v2 spec.\n+ */\n+class Sv2SignatureNoiseMessage\n+{\n+public:\n+    /** Size of a Schnorr signature. */\n+    static constexpr size_t SCHNORR_SIGNATURE_SIZE = 64;\n+    /** Size of serialized message, which does not include the static key.  */\n+    static constexpr size_t SIZE = 2 + 4 + 4 + SCHNORR_SIGNATURE_SIZE;\n+\n+private:\n+    uint16_t m_version = 0;\n+    uint32_t m_valid_from = 0;\n+    uint32_t m_valid_to = 0;\n+    std::array<unsigned char, SCHNORR_SIGNATURE_SIZE> m_sig;\n+\n+    /** Hash of version, valid from/to and the static key. */\n+    uint256 GetHash();\n+    void SignSchnorr(const CKey& authority_key, Span<unsigned char> sig);\n+\n+public:\n+    Sv2SignatureNoiseMessage() = default;\n+    Sv2SignatureNoiseMessage(uint16_t version, uint32_t valid_from, uint32_t valid_to, const XOnlyPubKey& static_key, const CKey& authority_key);\n+\n+    /* The certificate serializes pubkeys in x-only format, not EllSwift. */\n+    XOnlyPubKey m_static_key = {};\n+\n+    [[nodiscard]] bool Validate(XOnlyPubKey authority_key);\n+\n+    template <typename Stream>\n+    // The static_key is signed for, but not serialized.\n+    void Serialize(Stream& s) const\n+    {\n+        s << m_version\n+          << m_valid_from\n+          << m_valid_to\n+          << m_sig;\n+    }\n+    template <typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> m_version\n+          >> m_valid_from\n+          >> m_valid_to\n+          >> m_sig;\n+    }\n+};\n+\n+/*\n+ * The CipherState uses m_key (k) and m_nonce (n) to encrypt and decrypt ciphertexts.\n+ * During the handshake phase each party has a single CipherState, but during\n+ * the transport phase each party has two CipherState objects: one for sending,\n+ * and one for receiving.\n+ *\n+ * See chapter \"5. Processing rules\" of the Noise paper.\n+ */\n+class Sv2CipherState\n+{\n+public:\n+    Sv2CipherState() = default;\n+    explicit Sv2CipherState(NoiseHash&& key);\n+\n+    /** Decrypt message\n+     * @param[in] associated_data associated data\n+     * @param[in] ciphertext message with encrypted and authenticated chunks.\n+     * @param[out] plain message (defragmented)\n+     * @returns whether decryption succeeded\n+     */\n+    [[nodiscard]] bool DecryptWithAd(Span<const std::byte> associated_data, Span<std::byte> ciphertext, Span<std::byte> plain);\n+\n+    /** Encrypt message\n+     * @param[in] associated_data associated data\n+     * @param[in] plain message\n+     * @param[out] ciphertext message with encrypted and authenticated chunks.\n+     * @returns whether encryption succeeded\n+     */\n+    [[nodiscard]] bool EncryptWithAd(Span<const std::byte> associated_data, Span<const std::byte> plain, Span<std::byte> ciphertext);\n+\n+    /** The message will be chunked in NOISE_MAX_CHUNK_SIZE parts and expanded\n+     *  by 16 bytes per chunk for its MAC.\n+     *\n+     * @param[in] plain message. Can't point to the same memory location as ciphertext,\n+     *                  because each encrypted message chunk would override the\n+     *                  start of the next plain text chunk.\n+     * @param[out] ciphertext   message with encrypted and authenticated chunks\n+     * @return whether encryption succeeded. Only fails if nonce is uint64_max.\n+     */\n+    [[nodiscard]] bool EncryptMessage(Span<const std::byte> plain, Span<std::byte> ciphertext);\n+\n+    /** Decrypt message.\n+     *\n+     * @param[in] ciphertext encrypted message\n+     * @param[out] plain decrypted message. May point to the same memory location\n+     *                  as ciphertext. The result is defragmented.\n+     */\n+    [[nodiscard]] bool DecryptMessage(Span<std::byte> ciphertext, Span<std::byte> plain);\n+\n+private:\n+    NoiseHash m_key{0};\n+    uint64_t m_nonce = 0;\n+};\n+\n+/*\n+ * A SymmetricState object contains a CipherState plus m_chaining_key (ck) and\n+ * m_hash_output (h) variables. It is so-named because it encapsulates all the\n+ * \"symmetric crypto\" used by Noise. During the handshake phase each party has\n+ * a single SymmetricState, which can be deleted once the handshake is finished.\n+ *\n+ * See chapter \"5. Processing rules\" of the Noise paper.\n+ */\n+class Sv2SymmetricState\n+{\n+public:\n+    // Sha256 hash of the ascii encoding - \"Noise_NX_Secp256k1+EllSwift_ChaChaPoly_SHA256\".\n+    // This is the first step required when setting up the chaining key.\n+    static constexpr NoiseHash PROTOCOL_NAME_HASH = {\n+        46, 180, 120, 129, 32, 142, 158, 238, 31, 102, 159, 103, 198, 110, 231, 14,\n+        169, 234, 136, 9, 13, 80, 63, 232, 48, 220, 75, 200, 62, 41, 191, 16};\n+\n+    // The double hash of protocol name \"Noise_NX_EllSwiftXonly_ChaChaPoly_SHA256\".\n+    static constexpr NoiseHash PROTOCOL_NAME_DOUBLE_HASH = {\n+        146, 47, 163, 46, 79, 72, 124, 13, 89, 202, 163, 190, 215, 137, 156, 227,\n+        217, 141, 183, 225, 61, 189, 59, 124, 242, 210, 61, 212, 51, 220, 97, 4};\n+\n+    Sv2SymmetricState() : m_chaining_key{PROTOCOL_NAME_HASH} {}\n+\n+    void MixHash(const Span<const std::byte> input);\n+    void MixKey(const Span<const std::byte> input_key_material);\n+    [[nodiscard]] bool EncryptAndHash(Span<const std::byte> plain, Span<std::byte> ciphertext);\n+    [[nodiscard]] bool DecryptAndHash(Span<std::byte> ciphertext, Span<std::byte> plain);\n+    std::array<Sv2CipherState, 2> Split();\n+\n+    uint256 GetHashOutput();\n+\n+    /* For testing */\n+    void LogChainingKey();\n+    std::string GetChainingKey();\n+\n+private:\n+    NoiseHash m_chaining_key;\n+    uint256 m_hash_output{uint256(PROTOCOL_NAME_DOUBLE_HASH)};\n+    Sv2CipherState m_cipher_state;\n+\n+    void HKDF2(const Span<const std::byte> input_key_material,\n+               NoiseHash& out0,\n+               NoiseHash& out1);\n+};\n+\n+/*\n+ * A HandshakeState object contains a SymmetricState plus DH variables (s, e, rs, re)\n+ * and a variable representing the handshake pattern. During the handshake phase\n+ * each party has a single HandshakeState, which can be deleted once the handshake\n+ * is finished.\n+ *\n+ * See chapter \"5. Processing rules\" of the Noise paper.\n+ */\n+\n+class Sv2HandshakeState\n+{\n+public:\n+    static constexpr size_t ELLSWIFT_PUB_KEY_SIZE{64};\n+    static constexpr size_t ECDH_OUTPUT_SIZE{32};\n+\n+    static constexpr size_t HANDSHAKE_STEP2_SIZE = ELLSWIFT_PUB_KEY_SIZE + ELLSWIFT_PUB_KEY_SIZE +\n+                                                   Poly1305::TAGLEN + Sv2SignatureNoiseMessage::SIZE + Poly1305::TAGLEN;\n+\n+    /*\n+     * If we are the initiator m_authority_pubkey must be set in order to verify\n+     * the received certificate.\n+     */\n+    Sv2HandshakeState(CKey&& static_key,\n+                      XOnlyPubKey authority_pubkey) : m_static_key{static_key},\n+                                                        m_authority_pubkey{authority_pubkey}\n+    {\n+        m_static_ellswift_pk = static_key.EllSwiftCreate(MakeByteSpan(GetRandHash()));\n+    };\n+\n+    /*\n+     * If we are the responder, the certificate must be set\n+     */\n+    Sv2HandshakeState(CKey&& static_key,\n+                      Sv2SignatureNoiseMessage&& certificate) : m_static_key{static_key},\n+                                                                m_certificate{certificate}\n+    {\n+        m_static_ellswift_pk = static_key.EllSwiftCreate(MakeByteSpan(GetRandHash()));\n+    };\n+\n+    /** Handshake step 1 for initiator: -> e */\n+    void WriteMsgEphemeralPK(Span<std::byte> msg);\n+    /** Handshake step 1 for responder: -> e */\n+    void ReadMsgEphemeralPK(Span<std::byte> msg);\n+    /** During handshake step 2, put our ephmeral key, static key\n+     * and certificate in the buffer: <- e, ee, s, es, SIGNATURE_NOISE_MESSAGE\n+     */\n+    void WriteMsgES(Span<std::byte> msg);\n+    /** During handshake step 2, read the remote ephmeral key, static key",
      "path": "src/sv2/noise.h",
      "position": 226,
      "original_position": 226,
      "commit_id": "b588ff85ae837e492269c922d0609bcd338e4752",
      "original_commit_id": "b588ff85ae837e492269c922d0609bcd338e4752",
      "in_reply_to_id": null,
      "user": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "b588ff8: typo - s/ephmeral/ephemeral in a few places.\r\n\r\nsince the template provider behaves as the server and only performs the responder handshake flow, it might be useful to mention initiator handshake flow is just for tests.",
      "created_at": "2024-10-08T15:41:37Z",
      "updated_at": "2024-10-09T06:39:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29346#discussion_r1792116481",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1792116481"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29346"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 226,
      "original_line": 226,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1792239111",
      "pull_request_review_id": 2054783141,
      "id": 1792239111,
      "node_id": "PRRC_kwDOABII585q02YH",
      "diff_hunk": "@@ -236,6 +238,7 @@ if(BUILD_FOR_FUZZING)\n   set(ENABLE_EXTERNAL_SIGNER OFF)\n   set(WITH_MINIUPNPC OFF)\n   set(WITH_ZMQ OFF)\n+  set(WITH_SV2 OFF)",
      "path": "CMakeLists.txt",
      "position": 13,
      "original_position": 13,
      "commit_id": "b588ff85ae837e492269c922d0609bcd338e4752",
      "original_commit_id": "b588ff85ae837e492269c922d0609bcd338e4752",
      "in_reply_to_id": null,
      "user": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "d08a2ebf: sv2 is OFF when fuzzing -  so we need to turn it ON here to fuzz locally. Also the sv2 fuzz tests aren't run on the CI.",
      "created_at": "2024-10-08T17:14:08Z",
      "updated_at": "2024-10-09T06:39:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29346#discussion_r1792239111",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1792239111"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29346"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 241,
      "original_line": 241,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1792872756",
      "pull_request_review_id": 2054783141,
      "id": 1792872756,
      "node_id": "PRRC_kwDOABII585q3RE0",
      "diff_hunk": "@@ -0,0 +1,168 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <sv2/noise.h>\n+#include <logging.h>\n+#include <random.h>\n+#include <span.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+\n+#include <cstdint>\n+#include <util/vector.h>\n+\n+namespace {\n+\n+\n+void Initialize()\n+{\n+    // Add test context for debugging. Usage:\n+    // --debug=sv2 --loglevel=sv2:trace --printtoconsole=1\n+    static const auto testing_setup = std::make_unique<const BasicTestingSetup>();\n+}\n+} // namespace\n+\n+bool MaybeDamage(FuzzedDataProvider& provider, std::vector<std::byte>& transport)\n+{\n+    if (transport.size() == 0) return false;\n+\n+    // Optionally damage 1 bit in the ciphertext.\n+    const bool damage = provider.ConsumeBool();\n+    if (damage) {\n+        unsigned damage_bit = provider.ConsumeIntegralInRange<unsigned>(0,\n+                                                                        transport.size() * 8U - 1U);\n+        unsigned damage_pos = damage_bit >> 3;\n+        LogTrace(BCLog::SV2, \"Damage byte %d of %d\\n\", damage_pos, transport.size());\n+        std::byte damage_val{(uint8_t)(1U << (damage_bit & 7))};\n+        transport.at(damage_pos) ^= damage_val;\n+    }\n+    return damage;\n+}\n+\n+FUZZ_TARGET(sv2_noise_cipher_roundtrip, .init = Initialize)\n+{\n+    // Test that Sv2Noise's encryption and decryption agree.\n+\n+    // To conserve fuzzer entropy, deterministically generate Alice and Bob keys.\n+    FuzzedDataProvider provider(buffer.data(), buffer.size());\n+    auto seed_ent = provider.ConsumeBytes<std::byte>(32);\n+    seed_ent.resize(32);\n+    CExtKey seed;\n+    seed.SetSeed(seed_ent);\n+\n+    CExtKey tmp;\n+    if (!seed.Derive(tmp, 0)) return;\n+    CKey alice_authority_key{tmp.key};\n+\n+    if (!seed.Derive(tmp, 1)) return;\n+    CKey alice_static_key{tmp.key};\n+\n+    if (!seed.Derive(tmp, 2)) return;\n+    CKey alice_ephemeral_key{tmp.key};\n+\n+    if (!seed.Derive(tmp, 10)) return;\n+    CKey bob_authority_key{tmp.key};\n+\n+    if (!seed.Derive(tmp, 11)) return;\n+    CKey bob_static_key{tmp.key};\n+\n+    if (!seed.Derive(tmp, 12)) return;\n+    CKey bob_ephemeral_key{tmp.key};\n+\n+    // Create certificate\n+    // Pick random times in the past or future\n+    uint32_t now = provider.ConsumeIntegralInRange<uint32_t>(10000U, UINT32_MAX);\n+    SetMockTime(now);\n+    uint16_t version = provider.ConsumeBool() ? 0 : provider.ConsumeIntegral<uint16_t>();\n+    uint32_t past = provider.ConsumeIntegralInRange<uint32_t>(0, now);\n+    uint32_t future = provider.ConsumeIntegralInRange<uint32_t>(now, UINT32_MAX);\n+    uint32_t valid_from = int32_t(provider.ConsumeBool() ? past : future);\n+    uint32_t valid_to = int32_t(provider.ConsumeBool() ? future : past);\n+\n+    auto bob_certificate = Sv2SignatureNoiseMessage(version, valid_from, valid_to,\n+                                                    XOnlyPubKey(bob_static_key.GetPubKey()), bob_authority_key);\n+\n+    bool valid_certificate = version == 0 &&\n+                             (valid_from <= now) &&",
      "path": "src/test/fuzz/sv2_noise.cpp",
      "position": 89,
      "original_position": 89,
      "commit_id": "b588ff85ae837e492269c922d0609bcd338e4752",
      "original_commit_id": "b588ff85ae837e492269c922d0609bcd338e4752",
      "in_reply_to_id": null,
      "user": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "b588ff8: `(valid_from < now) && (valid_to > now)`",
      "created_at": "2024-10-09T05:37:21Z",
      "updated_at": "2024-10-09T06:39:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29346#discussion_r1792872756",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1792872756"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29346"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 89,
      "original_line": 89,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1795064562",
      "pull_request_review_id": 2359653403,
      "id": 1795064562,
      "node_id": "PRRC_kwDOABII585q_oLy",
      "diff_hunk": "@@ -71,6 +71,7 @@ namespace BCLog {\n         TXRECONCILIATION = (CategoryMask{1} << 26),\n         SCAN        = (CategoryMask{1} << 27),\n         TXPACKAGES  = (CategoryMask{1} << 28),\n+        SV2         = (CategoryMask{1} << 30),",
      "path": "src/logging.h",
      "position": 4,
      "original_position": 4,
      "commit_id": "b588ff85ae837e492269c922d0609bcd338e4752",
      "original_commit_id": "eccd4a959eb272d0dad585746d67fe2846fa4022",
      "in_reply_to_id": 1776344227,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Not sure, maybe 29 existed in an earlier rebase. It might just change it to 29.",
      "created_at": "2024-10-10T09:34:33Z",
      "updated_at": "2024-10-10T09:34:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29346#discussion_r1795064562",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1795064562"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29346"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 74,
      "original_line": 74,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1795066784",
      "pull_request_review_id": 2359656925,
      "id": 1795066784,
      "node_id": "PRRC_kwDOABII585q_oug",
      "diff_hunk": "@@ -0,0 +1,299 @@\n+// Copyright (c) 2023-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_SV2_NOISE_H\n+#define BITCOIN_SV2_NOISE_H\n+\n+#include <compat/compat.h>\n+#include <crypto/poly1305.h>\n+#include <key.h>\n+#include <pubkey.h>\n+#include <random.h>\n+#include <streams.h>\n+#include <uint256.h>\n+\n+/** The Noise Protocol Framework\n+ *  https://noiseprotocol.org/noise.html\n+ *  Revision 38, 2018-07-11\n+ *\n+ *  Stratum v2 handshake and cipher specification:\n+ *  https://github.com/stratum-mining/sv2-spec/blob/main/04-Protocol-Security.md\n+ */\n+\n+/** Section 3: All Noise messages are less than or equal to 65535 bytes in length. */\n+static constexpr size_t NOISE_MAX_CHUNK_SIZE = 65535;\n+\n+static constexpr size_t HASHLEN{32};\n+using NoiseHash = std::array<uint8_t, HASHLEN>;\n+\n+/** Simple certificate for the static key signed by the authority key.\n+ * See 4.5.2 and 4.5.3 of the Stratum v2 spec.\n+ */\n+class Sv2SignatureNoiseMessage\n+{\n+public:\n+    /** Size of a Schnorr signature. */\n+    static constexpr size_t SCHNORR_SIGNATURE_SIZE = 64;\n+    /** Size of serialized message, which does not include the static key.  */\n+    static constexpr size_t SIZE = 2 + 4 + 4 + SCHNORR_SIGNATURE_SIZE;\n+\n+private:\n+    uint16_t m_version = 0;\n+    uint32_t m_valid_from = 0;\n+    uint32_t m_valid_to = 0;\n+    std::array<unsigned char, SCHNORR_SIGNATURE_SIZE> m_sig;\n+\n+    /** Hash of version, valid from/to and the static key. */\n+    uint256 GetHash();\n+    void SignSchnorr(const CKey& authority_key, Span<unsigned char> sig);\n+\n+public:\n+    Sv2SignatureNoiseMessage() = default;\n+    Sv2SignatureNoiseMessage(uint16_t version, uint32_t valid_from, uint32_t valid_to, const XOnlyPubKey& static_key, const CKey& authority_key);\n+\n+    /* The certificate serializes pubkeys in x-only format, not EllSwift. */\n+    XOnlyPubKey m_static_key = {};\n+\n+    [[nodiscard]] bool Validate(XOnlyPubKey authority_key);\n+\n+    template <typename Stream>\n+    // The static_key is signed for, but not serialized.\n+    void Serialize(Stream& s) const\n+    {\n+        s << m_version\n+          << m_valid_from\n+          << m_valid_to\n+          << m_sig;\n+    }\n+    template <typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> m_version\n+          >> m_valid_from\n+          >> m_valid_to\n+          >> m_sig;\n+    }\n+};\n+\n+/*\n+ * The CipherState uses m_key (k) and m_nonce (n) to encrypt and decrypt ciphertexts.\n+ * During the handshake phase each party has a single CipherState, but during\n+ * the transport phase each party has two CipherState objects: one for sending,\n+ * and one for receiving.\n+ *\n+ * See chapter \"5. Processing rules\" of the Noise paper.\n+ */\n+class Sv2CipherState\n+{\n+public:\n+    Sv2CipherState() = default;\n+    explicit Sv2CipherState(NoiseHash&& key);\n+\n+    /** Decrypt message\n+     * @param[in] associated_data associated data\n+     * @param[in] ciphertext message with encrypted and authenticated chunks.\n+     * @param[out] plain message (defragmented)\n+     * @returns whether decryption succeeded\n+     */\n+    [[nodiscard]] bool DecryptWithAd(Span<const std::byte> associated_data, Span<std::byte> ciphertext, Span<std::byte> plain);\n+\n+    /** Encrypt message\n+     * @param[in] associated_data associated data\n+     * @param[in] plain message\n+     * @param[out] ciphertext message with encrypted and authenticated chunks.\n+     * @returns whether encryption succeeded\n+     */\n+    [[nodiscard]] bool EncryptWithAd(Span<const std::byte> associated_data, Span<const std::byte> plain, Span<std::byte> ciphertext);\n+\n+    /** The message will be chunked in NOISE_MAX_CHUNK_SIZE parts and expanded\n+     *  by 16 bytes per chunk for its MAC.\n+     *\n+     * @param[in] plain message. Can't point to the same memory location as ciphertext,\n+     *                  because each encrypted message chunk would override the\n+     *                  start of the next plain text chunk.\n+     * @param[out] ciphertext   message with encrypted and authenticated chunks\n+     * @return whether encryption succeeded. Only fails if nonce is uint64_max.\n+     */\n+    [[nodiscard]] bool EncryptMessage(Span<const std::byte> plain, Span<std::byte> ciphertext);\n+\n+    /** Decrypt message.\n+     *\n+     * @param[in] ciphertext encrypted message\n+     * @param[out] plain decrypted message. May point to the same memory location\n+     *                  as ciphertext. The result is defragmented.\n+     */\n+    [[nodiscard]] bool DecryptMessage(Span<std::byte> ciphertext, Span<std::byte> plain);\n+\n+private:\n+    NoiseHash m_key{0};\n+    uint64_t m_nonce = 0;\n+};\n+\n+/*\n+ * A SymmetricState object contains a CipherState plus m_chaining_key (ck) and\n+ * m_hash_output (h) variables. It is so-named because it encapsulates all the\n+ * \"symmetric crypto\" used by Noise. During the handshake phase each party has\n+ * a single SymmetricState, which can be deleted once the handshake is finished.\n+ *\n+ * See chapter \"5. Processing rules\" of the Noise paper.\n+ */\n+class Sv2SymmetricState\n+{\n+public:\n+    // Sha256 hash of the ascii encoding - \"Noise_NX_Secp256k1+EllSwift_ChaChaPoly_SHA256\".\n+    // This is the first step required when setting up the chaining key.\n+    static constexpr NoiseHash PROTOCOL_NAME_HASH = {\n+        46, 180, 120, 129, 32, 142, 158, 238, 31, 102, 159, 103, 198, 110, 231, 14,\n+        169, 234, 136, 9, 13, 80, 63, 232, 48, 220, 75, 200, 62, 41, 191, 16};\n+\n+    // The double hash of protocol name \"Noise_NX_EllSwiftXonly_ChaChaPoly_SHA256\".",
      "path": "src/sv2/noise.h",
      "position": 150,
      "original_position": 150,
      "commit_id": "b588ff85ae837e492269c922d0609bcd338e4752",
      "original_commit_id": "b588ff85ae837e492269c922d0609bcd338e4752",
      "in_reply_to_id": 1791274447,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It should match the spec. I'm guessing the comment is wrong, because otherwise it wouldn't work against SRI, but will check.",
      "created_at": "2024-10-10T09:36:06Z",
      "updated_at": "2024-10-10T09:36:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29346#discussion_r1795066784",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1795066784"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29346"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 150,
      "original_line": 150,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1795071626",
      "pull_request_review_id": 2359664594,
      "id": 1795071626,
      "node_id": "PRRC_kwDOABII585q_p6K",
      "diff_hunk": "@@ -0,0 +1,299 @@\n+// Copyright (c) 2023-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_SV2_NOISE_H\n+#define BITCOIN_SV2_NOISE_H\n+\n+#include <compat/compat.h>\n+#include <crypto/poly1305.h>\n+#include <key.h>\n+#include <pubkey.h>\n+#include <random.h>\n+#include <streams.h>\n+#include <uint256.h>\n+\n+/** The Noise Protocol Framework\n+ *  https://noiseprotocol.org/noise.html\n+ *  Revision 38, 2018-07-11\n+ *\n+ *  Stratum v2 handshake and cipher specification:\n+ *  https://github.com/stratum-mining/sv2-spec/blob/main/04-Protocol-Security.md\n+ */\n+\n+/** Section 3: All Noise messages are less than or equal to 65535 bytes in length. */\n+static constexpr size_t NOISE_MAX_CHUNK_SIZE = 65535;\n+\n+static constexpr size_t HASHLEN{32};\n+using NoiseHash = std::array<uint8_t, HASHLEN>;\n+\n+/** Simple certificate for the static key signed by the authority key.\n+ * See 4.5.2 and 4.5.3 of the Stratum v2 spec.\n+ */\n+class Sv2SignatureNoiseMessage\n+{\n+public:\n+    /** Size of a Schnorr signature. */\n+    static constexpr size_t SCHNORR_SIGNATURE_SIZE = 64;\n+    /** Size of serialized message, which does not include the static key.  */\n+    static constexpr size_t SIZE = 2 + 4 + 4 + SCHNORR_SIGNATURE_SIZE;\n+\n+private:\n+    uint16_t m_version = 0;\n+    uint32_t m_valid_from = 0;\n+    uint32_t m_valid_to = 0;\n+    std::array<unsigned char, SCHNORR_SIGNATURE_SIZE> m_sig;\n+\n+    /** Hash of version, valid from/to and the static key. */\n+    uint256 GetHash();\n+    void SignSchnorr(const CKey& authority_key, Span<unsigned char> sig);\n+\n+public:\n+    Sv2SignatureNoiseMessage() = default;\n+    Sv2SignatureNoiseMessage(uint16_t version, uint32_t valid_from, uint32_t valid_to, const XOnlyPubKey& static_key, const CKey& authority_key);\n+\n+    /* The certificate serializes pubkeys in x-only format, not EllSwift. */\n+    XOnlyPubKey m_static_key = {};\n+\n+    [[nodiscard]] bool Validate(XOnlyPubKey authority_key);\n+\n+    template <typename Stream>\n+    // The static_key is signed for, but not serialized.\n+    void Serialize(Stream& s) const\n+    {\n+        s << m_version\n+          << m_valid_from\n+          << m_valid_to\n+          << m_sig;\n+    }\n+    template <typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> m_version\n+          >> m_valid_from\n+          >> m_valid_to\n+          >> m_sig;\n+    }\n+};\n+\n+/*\n+ * The CipherState uses m_key (k) and m_nonce (n) to encrypt and decrypt ciphertexts.\n+ * During the handshake phase each party has a single CipherState, but during\n+ * the transport phase each party has two CipherState objects: one for sending,\n+ * and one for receiving.\n+ *\n+ * See chapter \"5. Processing rules\" of the Noise paper.\n+ */\n+class Sv2CipherState\n+{\n+public:\n+    Sv2CipherState() = default;\n+    explicit Sv2CipherState(NoiseHash&& key);\n+\n+    /** Decrypt message\n+     * @param[in] associated_data associated data\n+     * @param[in] ciphertext message with encrypted and authenticated chunks.\n+     * @param[out] plain message (defragmented)\n+     * @returns whether decryption succeeded\n+     */\n+    [[nodiscard]] bool DecryptWithAd(Span<const std::byte> associated_data, Span<std::byte> ciphertext, Span<std::byte> plain);\n+\n+    /** Encrypt message\n+     * @param[in] associated_data associated data\n+     * @param[in] plain message\n+     * @param[out] ciphertext message with encrypted and authenticated chunks.\n+     * @returns whether encryption succeeded\n+     */\n+    [[nodiscard]] bool EncryptWithAd(Span<const std::byte> associated_data, Span<const std::byte> plain, Span<std::byte> ciphertext);\n+\n+    /** The message will be chunked in NOISE_MAX_CHUNK_SIZE parts and expanded\n+     *  by 16 bytes per chunk for its MAC.\n+     *\n+     * @param[in] plain message. Can't point to the same memory location as ciphertext,\n+     *                  because each encrypted message chunk would override the\n+     *                  start of the next plain text chunk.\n+     * @param[out] ciphertext   message with encrypted and authenticated chunks\n+     * @return whether encryption succeeded. Only fails if nonce is uint64_max.\n+     */\n+    [[nodiscard]] bool EncryptMessage(Span<const std::byte> plain, Span<std::byte> ciphertext);\n+\n+    /** Decrypt message.\n+     *\n+     * @param[in] ciphertext encrypted message\n+     * @param[out] plain decrypted message. May point to the same memory location\n+     *                  as ciphertext. The result is defragmented.\n+     */\n+    [[nodiscard]] bool DecryptMessage(Span<std::byte> ciphertext, Span<std::byte> plain);\n+\n+private:\n+    NoiseHash m_key{0};\n+    uint64_t m_nonce = 0;\n+};\n+\n+/*\n+ * A SymmetricState object contains a CipherState plus m_chaining_key (ck) and\n+ * m_hash_output (h) variables. It is so-named because it encapsulates all the\n+ * \"symmetric crypto\" used by Noise. During the handshake phase each party has\n+ * a single SymmetricState, which can be deleted once the handshake is finished.\n+ *\n+ * See chapter \"5. Processing rules\" of the Noise paper.\n+ */\n+class Sv2SymmetricState\n+{\n+public:\n+    // Sha256 hash of the ascii encoding - \"Noise_NX_Secp256k1+EllSwift_ChaChaPoly_SHA256\".\n+    // This is the first step required when setting up the chaining key.\n+    static constexpr NoiseHash PROTOCOL_NAME_HASH = {\n+        46, 180, 120, 129, 32, 142, 158, 238, 31, 102, 159, 103, 198, 110, 231, 14,\n+        169, 234, 136, 9, 13, 80, 63, 232, 48, 220, 75, 200, 62, 41, 191, 16};\n+\n+    // The double hash of protocol name \"Noise_NX_EllSwiftXonly_ChaChaPoly_SHA256\".\n+    static constexpr NoiseHash PROTOCOL_NAME_DOUBLE_HASH = {\n+        146, 47, 163, 46, 79, 72, 124, 13, 89, 202, 163, 190, 215, 137, 156, 227,\n+        217, 141, 183, 225, 61, 189, 59, 124, 242, 210, 61, 212, 51, 220, 97, 4};\n+\n+    Sv2SymmetricState() : m_chaining_key{PROTOCOL_NAME_HASH} {}\n+\n+    void MixHash(const Span<const std::byte> input);\n+    void MixKey(const Span<const std::byte> input_key_material);\n+    [[nodiscard]] bool EncryptAndHash(Span<const std::byte> plain, Span<std::byte> ciphertext);\n+    [[nodiscard]] bool DecryptAndHash(Span<std::byte> ciphertext, Span<std::byte> plain);\n+    std::array<Sv2CipherState, 2> Split();\n+\n+    uint256 GetHashOutput();\n+\n+    /* For testing */\n+    void LogChainingKey();\n+    std::string GetChainingKey();\n+\n+private:\n+    NoiseHash m_chaining_key;\n+    uint256 m_hash_output{uint256(PROTOCOL_NAME_DOUBLE_HASH)};\n+    Sv2CipherState m_cipher_state;\n+\n+    void HKDF2(const Span<const std::byte> input_key_material,\n+               NoiseHash& out0,\n+               NoiseHash& out1);\n+};\n+\n+/*\n+ * A HandshakeState object contains a SymmetricState plus DH variables (s, e, rs, re)\n+ * and a variable representing the handshake pattern. During the handshake phase\n+ * each party has a single HandshakeState, which can be deleted once the handshake\n+ * is finished.\n+ *\n+ * See chapter \"5. Processing rules\" of the Noise paper.\n+ */\n+\n+class Sv2HandshakeState\n+{\n+public:\n+    static constexpr size_t ELLSWIFT_PUB_KEY_SIZE{64};\n+    static constexpr size_t ECDH_OUTPUT_SIZE{32};\n+\n+    static constexpr size_t HANDSHAKE_STEP2_SIZE = ELLSWIFT_PUB_KEY_SIZE + ELLSWIFT_PUB_KEY_SIZE +\n+                                                   Poly1305::TAGLEN + Sv2SignatureNoiseMessage::SIZE + Poly1305::TAGLEN;\n+\n+    /*\n+     * If we are the initiator m_authority_pubkey must be set in order to verify\n+     * the received certificate.\n+     */\n+    Sv2HandshakeState(CKey&& static_key,\n+                      XOnlyPubKey authority_pubkey) : m_static_key{static_key},\n+                                                        m_authority_pubkey{authority_pubkey}\n+    {\n+        m_static_ellswift_pk = static_key.EllSwiftCreate(MakeByteSpan(GetRandHash()));\n+    };\n+\n+    /*\n+     * If we are the responder, the certificate must be set\n+     */\n+    Sv2HandshakeState(CKey&& static_key,\n+                      Sv2SignatureNoiseMessage&& certificate) : m_static_key{static_key},\n+                                                                m_certificate{certificate}\n+    {\n+        m_static_ellswift_pk = static_key.EllSwiftCreate(MakeByteSpan(GetRandHash()));\n+    };\n+\n+    /** Handshake step 1 for initiator: -> e */\n+    void WriteMsgEphemeralPK(Span<std::byte> msg);\n+    /** Handshake step 1 for responder: -> e */\n+    void ReadMsgEphemeralPK(Span<std::byte> msg);\n+    /** During handshake step 2, put our ephmeral key, static key\n+     * and certificate in the buffer: <- e, ee, s, es, SIGNATURE_NOISE_MESSAGE\n+     */\n+    void WriteMsgES(Span<std::byte> msg);\n+    /** During handshake step 2, read the remote ephmeral key, static key",
      "path": "src/sv2/noise.h",
      "position": 226,
      "original_position": 226,
      "commit_id": "b588ff85ae837e492269c922d0609bcd338e4752",
      "original_commit_id": "b588ff85ae837e492269c922d0609bcd338e4752",
      "in_reply_to_id": 1792116481,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It's only used in tests, but I think we should review the code in both directions under the assumption that they'll be used in production.",
      "created_at": "2024-10-10T09:39:32Z",
      "updated_at": "2024-10-10T09:39:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29346#discussion_r1795071626",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1795071626"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29346"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 226,
      "original_line": 226,
      "side": "RIGHT"
    }
  ]
}