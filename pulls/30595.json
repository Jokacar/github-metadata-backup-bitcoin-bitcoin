{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595",
    "id": 2005623544,
    "node_id": "PR_kwDOABII5853i2L4",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/30595",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/30595.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/30595.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30595",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30595/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/34a8429ff3a870c0caaf4c4790becd86c5acde38",
    "number": 30595,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "kernel: Introduce initial C header API",
    "user": {
      "login": "TheCharlatan",
      "id": 8421793,
      "node_id": "MDQ6VXNlcjg0MjE3OTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheCharlatan",
      "html_url": "https://github.com/TheCharlatan",
      "followers_url": "https://api.github.com/users/TheCharlatan/followers",
      "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
      "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
      "repos_url": "https://api.github.com/users/TheCharlatan/repos",
      "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "body": "This is a first attempt at introducing a C header for the libbitcoinkernel library that may be used by external applications for interfacing with Bitcoin Core's validation logic. It currently is limited to operations on blocks. This is a conscious choice, since it already offers a lot of powerful functionality, but sits just on the cusp of still being reviewable scope-wise while giving some pointers on how the rest of the API could look like.\r\n\r\nThe current design was informed by the development of some tools using the C header:\r\n\r\n* A re-implementation (part of this pull request) of [bitcoin-chainstate](https://github.com/bitcoin/bitcoin/blob/master/src/bitcoin-chainstate.cpp).\r\n* A re-implementation of the python [block linearize](https://github.com/bitcoin/bitcoin/tree/master/contrib/linearize) scripts: https://github.com/TheCharlatan/bitcoin/tree/kernelLinearize \r\n* A silent payment scanner: https://github.com/josibake/silent-payments-scanner\r\n* An electrs index builder: https://github.com/josibake/electrs/commits/electrs-kernel-integration\r\n* A rust bitcoin node: https://github.com/TheCharlatan/kernel-node\r\n\r\nNext to the C++ header also made available in this pull request, rust bindings are available here:  https://github.com/TheCharlatan/rust-bitcoinkernel. The rust bindings include unit and fuzz tests for the API.\r\n\r\nThe header currently exposes logic for enabling the following functionality:\r\n* Feature-parity with the now deprecated libbitcoin-consensus\r\n* Optimized sha256 implementations that were not available to previous users of libbitcoin-consensus thanks to a static kernel context\r\n* Full support for logging as well as control over categories and severity\r\n* Feature parity with the existing experimental bitcoin-chainstate\r\n* Traversing the block index as well and using block index entries for reading block and undo data.\r\n* Running the chainstate in memory\r\n* Reindexing (both full and chainstate-only)\r\n* Interrupting long-running functions\r\n\r\nThe pull request introduces a new kernel-only test binary that purely relies on the kernel C header and the C++ standard library. This is intentionally done to show its capabilities without relying on other code inside the project. This may be relaxed to include some of the existing utilities, or even be merged into the existing test suite.\r\n\r\n#### How can I review this PR?\r\n\r\nScrutinize the commit messages, run the tests, write your own little applications using the library, let your favorite code sanitizer loose on it, hook it up to your fuzzing infrastructure, profile the difference between the existing bitcoin-chainstate and the bitcoin-chainstate introduced here, be nitty on the documentation, police the C interface, opine on your own API design philosophy.\r\n\r\nTo get a feeling for the API, read through the tests, or one of the examples.\r\n\r\nPlease try to avoid nits for the tests, these can wait for later and easily be improved over time. Docs exhaustively explaining all the intricacies of the internal goings-on of the library can also be added later.\r\n\r\nTo configure this PR for making the shared library and the bitcoin-chainstate and test_kernel utilities available:\r\n```\r\ncmake -B build -DBUILD_KERNEL_LIB=ON -DBUILD_UTIL_CHAINSTATE=ON\r\n```\r\n\r\nOnce compiled the library is part of the build artifacts that can be installed with:\r\n```\r\ncmake --install build\r\n```\r\n\r\nPython headers might also be useful for testing. [ctypeslib2](https://pypi.org/project/ctypeslib2/)'s [clang2py](https://github.com/trolldbois/ctypeslib/blob/master/ctypeslib/clang2py.py) can be used to auto-generate bindings:\r\n```\r\nclang2py src/kernel/bitcoinkernel.h -l /path/to/bitcoin/src/.libs/libbitcoinkernel.so > test_wrapper.py\r\n```\r\nOr alternatively on macOS (after `cmake --install build`):\r\n```\r\nclang2py /usr/local/include/bitcoinkernel.h -l /usr/local/lib/libbitcoinkernel.dylib --nm $(PWD)/nm_patch.py > test_wrapper.py\r\n```\r\n\r\n#### Why a C header (and not a C++ header)\r\n\r\n* Shipping a shared library with a C++ header is hard, because of name mangling.\r\n* Mature and well-supported tooling for integrating C exists for nearly every popular language.\r\n* C offers a reasonably stable ABI\r\n\r\nAlso see https://github.com/bitcoin/bitcoin/pull/30595#issuecomment-2285719575.\r\n\r\n#### What about versioning?\r\n\r\nThe header and library are still experimental and I would expect this to remain so for some time, so best not to worry about versioning yet.\r\n\r\n#### Potential future additions\r\n\r\nIn future, the C header could be expanded to support (some of these have been roughly implemented):\r\n\r\n* Handling transactions, block headers, coins cache, utxo set, meta data, and the mempool\r\n* Adapters for an abstract coins store\r\n* Adapters for an abstract block store\r\n* Allocators and buffers for more efficient memory usage\r\n* An \"[io-less](https://sans-io.readthedocs.io/how-to-sans-io.html)\" interface\r\n\r\n#### Current drawbacks\r\n\r\n* For external applications to read the block index of an existing Bitcoin Core node, Bitcoin Core needs to shut down first, since leveldb does not support reading across multiple processes. Other than migrating away from leveldb, there does not seem to be a solution for this problem.\r\n* The fatal error handling through the notifications is awkward.\r\n* Handling shared pointers in the interfaces is unfortunate. They make ownership and freeing of the resources fuzzy and poison the interfaces with additional types and complexity. However, they seem to be an artifact of the current code that interfaces with the validation engine. The validation engine itself does not seem to make extensive use of these shared pointers.\r\n* If multiple instances of the same type of objects are used, there is no mechanism for distinguishing the log messages produced by each of them.\r\n* The background leveldb compaction thread may not finish in time leading to a non-clean exit. There seems to be nothing we can do about this, outside of patching leveldb.",
    "labels": [
      {
        "id": 118379652,
        "node_id": "MDU6TGFiZWwxMTgzNzk2NTI=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Validation",
        "name": "Validation",
        "color": "6060aa",
        "default": false
      }
    ],
    "created_at": "2024-08-06T09:18:27Z",
    "updated_at": "2024-11-25T21:58:46Z",
    "mergeable": true,
    "mergeable_state": "blocked",
    "merge_commit_sha": "1ffbce10183fab5fedbb3d48a5a1abce44521b99",
    "assignees": [],
    "requested_reviewers": [
      {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    ],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "TheCharlatan:kernelApi",
      "ref": "kernelApi",
      "sha": "34a8429ff3a870c0caaf4c4790becd86c5acde38",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 94456368,
        "node_id": "MDEwOlJlcG9zaXRvcnk5NDQ1NjM2OA==",
        "name": "bitcoin",
        "full_name": "TheCharlatan/bitcoin",
        "owner": {
          "login": "TheCharlatan",
          "id": 8421793,
          "node_id": "MDQ6VXNlcjg0MjE3OTM=",
          "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/TheCharlatan",
          "html_url": "https://github.com/TheCharlatan",
          "followers_url": "https://api.github.com/users/TheCharlatan/followers",
          "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
          "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
          "repos_url": "https://api.github.com/users/TheCharlatan/repos",
          "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
          "type": "User",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/TheCharlatan/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/TheCharlatan/bitcoin",
        "archive_url": "https://api.github.com/repos/TheCharlatan/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/TheCharlatan/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/TheCharlatan/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/TheCharlatan/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/TheCharlatan/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/TheCharlatan/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/TheCharlatan/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/TheCharlatan/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/TheCharlatan/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/TheCharlatan/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/TheCharlatan/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/TheCharlatan/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/TheCharlatan/bitcoin/events",
        "forks_url": "https://api.github.com/repos/TheCharlatan/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/TheCharlatan/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/TheCharlatan/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/TheCharlatan/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/TheCharlatan/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/TheCharlatan/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/TheCharlatan/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/TheCharlatan/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/TheCharlatan/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/TheCharlatan/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/TheCharlatan/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/TheCharlatan/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/TheCharlatan/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/TheCharlatan/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/TheCharlatan/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/TheCharlatan/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:TheCharlatan/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/TheCharlatan/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/TheCharlatan/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/TheCharlatan/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/TheCharlatan/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/TheCharlatan/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/TheCharlatan/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/TheCharlatan/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/TheCharlatan/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/TheCharlatan/bitcoin/hooks",
        "svn_url": "https://github.com/TheCharlatan/bitcoin",
        "homepage": "https://bitcoin.org/en/download",
        "language": "C++",
        "forks_count": 0,
        "stargazers_count": 2,
        "watchers_count": 2,
        "size": 251700,
        "default_branch": "master",
        "open_issues_count": 1,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2024-11-25T14:40:18Z",
        "created_at": "2017-06-15T16:03:35Z",
        "updated_at": "2024-11-20T22:10:56Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "2638fdb4f934be96b7c798dbac38ea5ab8a6374a",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 36464,
        "stargazers_count": 79810,
        "watchers_count": 79810,
        "size": 272711,
        "default_branch": "master",
        "open_issues_count": 663,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2024-11-25T18:48:53Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2024-11-25T21:19:25Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 4395,
    "deletions": 2,
    "changed_files": 14,
    "commits": 21,
    "review_comments": 25,
    "comments": 20
  },
  "events": [
    {
      "event": "commented",
      "id": 2270798867,
      "node_id": "IC_kwDOABII586HWaQT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2270798867",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-06T09:18:31Z",
      "updated_at": "2024-11-19T19:19:50Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage & Benchmarks\nFor details see: https://corecheck.dev/bitcoin/bitcoin/pulls/30595.\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| Concept ACK | [josibake](https://github.com/bitcoin/bitcoin/pull/30595#issuecomment-2325848908), [stickies-v](https://github.com/bitcoin/bitcoin/pull/30595#pullrequestreview-2297633388) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#29415](https://github.com/bitcoin/bitcoin/pull/29415) (Broadcast own transactions only via short-lived Tor or I2P connections by vasild)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#issuecomment-2270798867",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30595"
    },
    {
      "event": "labeled",
      "id": 13775536223,
      "node_id": "LE_lADOABII586SDdapzwAAAAM1FgBf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13775536223",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-06T09:18:33Z",
      "label": {
        "name": "Validation",
        "color": "6060aa"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13776622682,
      "node_id": "HRFPE_lADOABII586SDdapzwAAAAM1JpRa",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13776622682",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-06T10:42:04Z"
    },
    {
      "event": "labeled",
      "id": 13776623455,
      "node_id": "LE_lADOABII586SDdapzwAAAAM1Jpdf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13776623455",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-06T10:42:07Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2270967742,
      "node_id": "IC_kwDOABII586HXDe-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2270967742",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-06T10:42:08Z",
      "updated_at": "2024-08-06T10:42:08Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/28396412371</sub>\n\n<details><summary>Hints</summary>\n\nMake sure to run all tests locally, according to the documentation.\n\nThe failure may happen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#issuecomment-2270967742",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30595"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13776932895,
      "node_id": "HRFPE_lADOABII586SDdapzwAAAAM1K1Af",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13776932895",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-06T11:07:12Z"
    },
    {
      "event": "unlabeled",
      "id": 13778638981,
      "node_id": "UNLE_lADOABII586SDdapzwAAAAM1RViF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13778638981",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-06T13:18:48Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2274440199,
      "node_id": "IC_kwDOABII586HkTQH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2274440199",
      "actor": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-07T22:14:51Z",
      "updated_at": "2024-08-07T22:14:51Z",
      "author_association": "MEMBER",
      "body": "Very cool. Can't wait to dig in when I have some free time.",
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#issuecomment-2274440199",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30595"
    },
    {
      "event": "commented",
      "id": 2284621389,
      "node_id": "IC_kwDOABII586ILI5N",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2284621389",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-12T18:05:53Z",
      "updated_at": "2024-08-12T18:05:53Z",
      "author_association": "CONTRIBUTOR",
      "body": "This seems to offer a lot of nice features, but can you explain the tradeoffs of wrapping the C++ interface in C instead of using C++ from rust directly? It seems like having a C middle layer introduces a lot of boilerplate, and I'm wondering if it is really necessary. For example it seems like there is a rust cxx crate (https://docs.rs/cxx/latest/cxx/, https://chatgpt.com/share/dd4dde59-66d6-4486-88a6-2f42144be056) that lets you call C++ directly from Rust and avoid the need for C boilerplate. It looks like https://cppyy.readthedocs.io/en/latest/index.html is an even more full-featured way of calling c++ from python.\r\n\r\nAnother drawback of going through a C API seems like not just increased boilerplate, but reduced safety. For example, the implementation is using reinterpret_cast everywhere and it seems like the exposed C functions use a `kernel_ErrorCode` enum type with the union of every possible error type, so callers don't have a way to know which functions can return which errors.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#issuecomment-2284621389",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30595"
    },
    {
      "event": "commented",
      "id": 2285719575,
      "node_id": "IC_kwDOABII586IPVAX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2285719575",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-13T08:54:20Z",
      "updated_at": "2024-09-03T12:03:13Z",
      "author_association": "CONTRIBUTOR",
      "body": "Thank you for the questions and kicking this discussion off @ryanofsky! I'll update the PR description with a better motiviation re. C vs C++ header, but will also try to answer your questions here.\r\n\r\n> This seems to offer a lot of nice features, but can you explain the tradeoffs of wrapping the C++ interface in C instead of using C++ from rust directly? It seems like having a C middle layer introduces a lot of boilerplate, and I'm wondering if it is really necessary. For example it seems like there is a rust cxx crate (https://docs.rs/cxx/latest/cxx/, https://chatgpt.com/share/dd4dde59-66d6-4486-88a6-2f42144be056) that lets you call C++ directly from Rust and avoid the need for C boilerplate. It looks like https://cppyy.readthedocs.io/en/latest/index.html is an even more full-featured way of calling c++ from python.\r\n\r\nIt is true that the interoperability between C++ and Rust has become very good. In fact there is someone working on wrapping the entirety of Bitcoin Core in Rust: https://github.com/klebs6/bitcoin-rs.\r\n\r\nDuring the last Core Dev meeting in Berlin I also asked if a C API were desirable in the first place ([notes here](https://btctranscripts.com/bitcoin-core-dev-tech/2024-04/kernel/)) during the libbitcoinkernel session. I moved forward with this implementation, because the consensus at the time with many contributors in the room was that it was desirable. The reasons for this as discussed during the session at the meeting can be briefly summarised:\r\n\r\n* Shipping a shared library with a C++ header is hard\r\n* Mature and well-supported tooling for integrating C exists for nearly every popular language.\r\n* C offers a reasonably stable ABI\r\n\r\nSo if we want the broadest possible support, across as many languages as possible with both dynamic and statically compiled libraries, a C header is the go-to option. I'm speculating here, but a C++ header might also make future standard version bumps and adoption of new standard library features harder. If having some trade-offs with compatibility, library portability, and language support is acceptable, a C++ header might be acceptaple though. It would be nice to hear more reviewers give their opinions here. \r\n\r\nI'd also like to add that two libraries that we use and depend on in this project, [minisketch](https://github.com/sipa/minisketch/tree/master) and [zeromq](https://github.com/zeromq/libzmq/), use the same pattern. They are C++ codebases, that only expose a C API that in both instances can be used with a C++ RAII wrapper. So there is precedent in the free software ecosystem for doing things this way.\r\n\r\nThe quality of C++ language interop seems to vary a lot between languages. Python and Rust seem to have decent support, ziglang on the other hand has no support for C++ bindings. JVM family languages are a bit hit and miss, and many of the common academic and industrial data analysis languages, like Julia, R, and Matlab have no support for direct C++ bindings. The latter category should not be disregarded as potential future users, since this library might be useful to access Bitcoin Core data for data analysis projects.\r\n\r\n> Another drawback of going through a C API seems like not just increased boilerplate, but reduced safety. For example, the implementation is using reinterpret_cast everywhere\r\n\r\nI feel like the reduced type safety due to casting is bit of a red herring. The type casting can be harder to abuse if you always use a dedicated helper function for interpreting passed in data types (as I believe is implemented here). Casting is also a pattern used in many other projects; both minisketch and libzmq use similar type casts extensively. It should definitely be possible to scrutinize the API in this PR to a point where it offers decent safety to its users as well as contributors to and maintainers of this code base.\r\n\r\nThe concerns around boilerplate are more serious in my view, but at least with the current internal code and headers I feel like exposing a _safe_ C++ API is not trivial either. The current headers do not lend themselves to it well, for example through tricky locking mechanics, exposing boost types, or confusing lifetimes. There also comes a point where we should probably stop extensively refactoring internal code for the kernel. I've heard some voices during the last two Core Dev meetings with concerns that the kernel project might turn the validation code into an extensive forever building site. Having some boilerplate and glue to abstract some the ugliness and make it safe seems like an acceptable solution for this dilemma. If this means boilerplate is required anyway, I would personally prefer a C API.\r\n\r\nSome of the boilerplate-y duplicate definitions in the header could be dropped again eventually if some of the `enum`s are moved to C-style `enum`s instead of `class enum`. As long as they are properly namespaced, I don't see a big drawback for this. Similarly, some of the structs could be defined in a way where they can be used on both sides using pimpl or similar idioms. All in all, most of these translations seem very straightforward.\r\n\r\nIt might be interesting to see how some of the RPC methods could be re-implemented using the kernel header. There have been some RPC implementation bugs over the years that were due to unsafe usage of our internal code within the method implementations. Using the kernel header instead might make this safer and reduce boilerplate. To  be clear, I am not suggesting replacing the implementations, but separately re-implementing some of them to show where the kernel header might shine.\r\n\r\n> it seems like the exposed C functions use a kernel_ErrorCode enum type with the union of every possible error type, so callers don't have a way to know which functions can return which errors.\r\n\r\nWe have disagreed on the design of this before. If I understood you correctly, consolidating all error codes into a single enumeration was one of the reasons you opened your version for handling fatal errors in the kernel: https://github.com/bitcoin/bitcoin/pull/29700 as an alternative to my original: https://github.com/bitcoin/bitcoin/pull/29642. I am still a bit torn by the two approaches. I get that it may be useful to exactly see which errors may be encountered by invoking a certain routine, but at the same time I get the feeling this often ends up splintering the error handling to the point where you end up with a catch all approach after all. I also think that it is nice to have a single, central list for looking up all error codes and defining some routines for handling them in close proximity to their definition. It would be nice to finally hear some more voices besides the two of us discussing this. real-or-random has recently provided some good points on error handling in the libsecp [silent payments pr](https://github.com/bitcoin-core/secp256k1/pull/1519#issuecomment-2142599641) (that I mostly did not adopt in this PR) and argues that most error codes are not useful to the user. As mentioned in the description, error handling is a weak spot of this pull request and I would like to improve it.\r\n\r\n\r\n",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#issuecomment-2285719575",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30595"
    },
    {
      "event": "mentioned",
      "id": 13860034421,
      "node_id": "MEE_lADOABII586SDdapzwAAAAM6H1d1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13860034421",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-13T08:54:22Z"
    },
    {
      "event": "subscribed",
      "id": 13860034437,
      "node_id": "SE_lADOABII586SDdapzwAAAAM6H1eF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13860034437",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-13T08:54:22Z"
    },
    {
      "event": "commented",
      "id": 2286604343,
      "node_id": "IC_kwDOABII586IStA3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2286604343",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-13T16:01:30Z",
      "updated_at": "2024-08-13T17:31:44Z",
      "author_association": "CONTRIBUTOR",
      "body": "I guess another thing I'd like to know is if this is the initial C API, and the implementation is around 3000 lines, and it doesn't handle \"transactions, block headers, coins cache, utxo set, meta data, and the mempool\", how much bigger do you think it will get if it does cover most of the things you would like it to cover? Like is this 20%, 30%, or 50% of the expected size?\r\n\r\nI like the idea of reviewing and merging this PR, and establishing a way to interoperate with rust libraries and external projects. I just think going forward we should not lock ourselves into an approach that requires everything to go through a C interface. As we build on this and add features, we should experiment with other approaches that use C++ directly, especially when it can reduce boilerplate and avoid bugs.\r\n\r\nThanks for pointing to me to the other error handling discussion. I very much agree with the post that says having a single error handling path is highly desirable. I especially agree with this in cases where detailed error messages are still provided (keeping in mind that error handling != error reporting, you can return simple error states with detailed messages or logging). Of course there are places where callers do need to handle separate error cases, especially when there are temporary failures, timeouts, and interruptions, and in these cases functions should return 2 or 3 error states instead of 1. But I don't think there is a reason in modern application code for functions to be able to return 5, 10, 20, or 50 error states generally. In low-level or very general OS, networking or DBMS code it might make sense, but for application code it seems like a cargo cult programming practice that made IBM service manuals very impressive in the 1980s but does not have a present day rationale. There are special cases, but I don't think it should be a normal thing for functions to be returning 15 error codes if we are trying to provide a safe and easy to use API.\r\n\r\nAgain though, if this approach is the easiest way to get cross-language interoperability working right now, I think we should try it. I just think we should be looking for ways to make things simpler and safer going forward.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#issuecomment-2286604343",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30595"
    },
    {
      "event": "commented",
      "id": 2286994610,
      "node_id": "IC_kwDOABII586IUMSy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2286994610",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-13T19:38:46Z",
      "updated_at": "2024-08-13T19:38:46Z",
      "author_association": "CONTRIBUTOR",
      "body": "> I guess another thing I'd like to know is if this is the initial C API, and the implementation is around 3000 lines, and it doesn't handle \"transactions, block headers, coins cache, utxo set, meta data, and the mempool\", how much bigger do you think it will get if it does cover most of the things you would like it to cover? Like is this 20%, 30%, or 50% of the expected size?\r\n\r\nI think a fair comparison would be comparing the amount of code \"glue\" required, e.g. the size of the `bitcoinkernel.cpp` file in this pull request. The size of the header is very dependent on the detail of documentation and I think judging it by the amount of test code is also hard. On my branch including iterators for the UTXO set, handling headers, and simple mempool processing, basically all the stuff required to drop-in replace the calls to validation code in `net_processing` with the C API, is about similar in size: https://github.com/bitcoin/bitcoin/pull/30595/files#diff-cc28221ef8d0c7294dda4e3df9f70bb6c062006b387468380c2c2cc02b6762c3 . The code on that branch is more hacky than the code here, so I would expect a bit less than a doubling in size to get all the features  required to run a full node with transaction relay.\r\n\r\n> In low-level or very general OS, networking or DBMS code it might make sense, but for application code it seems like a cargo cult programming practice that made IBM service manuals very impressive in the 1980s but does not have a present day rationale.\r\n\r\nHeh, well put. I think for most functions here it could be feasible to have more concise error codes without too much effort, but I feel like I have to detach from this a bit before being able to come up with an alternative.",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#issuecomment-2286994610",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30595"
    },
    {
      "event": "commented",
      "id": 2287225308,
      "node_id": "IC_kwDOABII586IVEnc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2287225308",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-13T22:09:05Z",
      "updated_at": "2024-08-13T22:09:05Z",
      "author_association": "CONTRIBUTOR",
      "body": "> I think for most functions here it could be feasible to have more concise error codes without too much effort, but I feel like I have to detach from this a bit before being able to come up with an alternative.\r\n\r\nThanks, I think I'd need to look at this more to give concrete suggestions, but I'd hope most functions would just return a simple success or failure status, with a descriptive error message in the case of failure. When functions need to return more complicated information or can fail in different ways that callers will want to distinguish, it should be easy to return the relevant information in custom struct or enum types. I think it's usually better for functions to return simpler custom types than more complicated shared types, because it lets callers know what values functions can return just by looking at their declarations.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#issuecomment-2287225308",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30595"
    },
    {
      "event": "labeled",
      "id": 13908890225,
      "node_id": "LE_lADOABII586SDdapzwAAAAM9CNJx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13908890225",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-16T10:00:58Z",
      "label": {
        "name": "Needs CMake port",
        "color": "0e8a16"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14044032945,
      "node_id": "HRFPE_lADOABII586SDdapzwAAAANFFu-x",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14044032945",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-28T10:10:14Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14058087390,
      "node_id": "HRFPE_lADOABII586SDdapzwAAAANF7WPe",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14058087390",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-29T08:48:07Z"
    },
    {
      "event": "unlabeled",
      "id": 14059546247,
      "node_id": "UNLE_lADOABII586SDdapzwAAAANGA6aH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14059546247",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-29T10:35:37Z",
      "label": {
        "name": "Needs CMake port",
        "color": "0e8a16"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14070483742,
      "node_id": "HRFPE_lADOABII586SDdapzwAAAANGqose",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14070483742",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-29T21:11:37Z"
    },
    {
      "event": "labeled",
      "id": 14075219831,
      "node_id": "LE_lADOABII586SDdapzwAAAANG8s93",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14075219831",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-30T04:56:16Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "unlabeled",
      "id": 14077777424,
      "node_id": "UNLE_lADOABII586SDdapzwAAAANHGdYQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14077777424",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-30T08:59:18Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14095507400,
      "node_id": "HRFPE_lADOABII586SDdapzwAAAANIKF_I",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14095507400",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-01T19:46:07Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14095512074,
      "node_id": "HRFPE_lADOABII586SDdapzwAAAANIKHIK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14095512074",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-01T19:48:20Z"
    },
    {
      "event": "commented",
      "id": 2323487524,
      "node_id": "IC_kwDOABII586KfZsk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2323487524",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-01T20:29:45Z",
      "updated_at": "2024-09-01T20:29:45Z",
      "author_association": "CONTRIBUTOR",
      "body": "> I think for most functions here it could be feasible to have more concise error codes without too much effort, but I feel like I have to detach from this a bit before being able to come up with an alternative.\r\n\r\nCompletely got rid of the `kernel_Error` with the last push. Thanks for laying out your logic ryanofsky, I feel like this is cleaner now. When looking at the Rust wrapper, the code seems much clearer too. Errors are now communicated through nullptr or false values. Where required, so far only for the verification functions, a richer status code is communicated to the developer.",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#issuecomment-2323487524",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30595"
    },
    {
      "event": "commented",
      "id": 2325264926,
      "node_id": "IC_kwDOABII586KmLoe",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2325264926",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-02T20:13:34Z",
      "updated_at": "2024-09-02T20:13:34Z",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for the update. It's good to drop the error codes so the C API can correspond 1:1 with the C++ API and not be tied to a more old fashioned and cumbersome error handling paradigm (for callers that want to know which errors are possible and not have to code defensively or fall back to failing generically).\r\n\r\nI am still -0 on the approach of introducing a C API to begin with, but happy to help review this and get merged and maintain it if other developers think this is the right approach to take (short term or long term). **It would be great to have more concept and approach ACKs for this PR** particularly from the @theuni who commented earlier and @josibake who seems to have some projects built on this and linked in the PR description.\r\n\r\nI think personally, if I wanted to use bitcoin core code from python or rust I would use tools like:\r\n\r\n- https://github.com/pybind/pybind11\r\n- https://docs.rs/cxx/latest/cxx/\r\n- https://hkalbasi.github.io/zngur/\r\n\r\nAnd interoperate with C++ directly,  instead of wrapping the C++ interface in a C interface first. Tools like these do not support all C++ types and features, and can make it necessary to selectively wrap more complicated C++ interfaces with simpler C++ interfaces, or even C interfaces, but I don't think this would be a justification for preemptively requiring every C++ type and function to be wrapped in C before it can be exposed. I just think the resulting boilerplate code:\r\n\r\n```c++\r\nkernel_Warning cast_kernel_warning(kernel::Warning warning)\r\n{\r\n    switch (warning) {\r\n    case kernel::Warning::UNKNOWN_NEW_RULES_ACTIVATED:\r\n        return kernel_Warning::kernel_LARGE_WORK_INVALID_CHAIN;\r\n    case kernel::Warning::LARGE_WORK_INVALID_CHAIN:\r\n        return kernel_Warning::kernel_LARGE_WORK_INVALID_CHAIN;\r\n    } // no default case, so the compiler can warn about missing cases\r\n    assert(false);\r\n}\r\n```\r\n\r\nand duplicative type definitions and documentation:\r\n\r\n```c++\r\n/**\r\n * A struct for holding the kernel notification callbacks. The user data pointer\r\n * may be used to point to user-defined structures to make processing the\r\n * notifications easier.\r\n */\r\ntypedef struct {\r\n    void* user_data;                         //!< Holds a user-defined opaque structure that is passed to the notification callbacks.\r\n    kernel_NotifyBlockTip block_tip;         //!< The chain's tip was updated to the provided block index.\r\n    kernel_NotifyHeaderTip header_tip;       //!< A new best block header was added.\r\n    kernel_NotifyProgress progress;          //!< Reports on current block synchronization progress.\r\n    kernel_NotifyWarningSet warning_set;     //!< A warning issued by the kernel library during validation.\r\n    kernel_NotifyWarningUnset warning_unset; //!< A previous condition leading to the issuance of a warning is no longer given.\r\n    kernel_NotifyFlushError flush_error;     //!< An error encountered when flushing data to disk.\r\n    kernel_NotifyFatalError fatal_error;     //!< A un-recoverable system error encountered by the library.\r\n} kernel_NotificationInterfaceCallbacks;\r\n```\r\n\r\nare fundamentally unnecessary and not worth effort of writing and maintaining when C++ is not a new or unusual language and not meaningfully less accessible or interoperable than C is.\r\n\r\nThere are legitimate reasons to wrap C++ in C. One reason would be to provide ABI compatibility. Another would be to make code accessible with dlopen/dlsym. But I think even in these cases you would want to wrap C++ in C selectively, or just define an intermediate C interface to pass pointers but use C++ on either side of the interface. I don't think you would want to drop down to C when not otherwise needed.\r\n\r\nThis is just to explain my point of view though. Overall I think this is very nice work, and I want to help with it, not hold it up.\r\n",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#issuecomment-2325264926",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30595"
    },
    {
      "event": "mentioned",
      "id": 14106972079,
      "node_id": "MEE_lADOABII586SDdapzwAAAANI10-v",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14106972079",
      "actor": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-02T20:13:35Z"
    },
    {
      "event": "subscribed",
      "id": 14106972088,
      "node_id": "SE_lADOABII586SDdapzwAAAANI10-4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14106972088",
      "actor": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-02T20:13:35Z"
    },
    {
      "event": "mentioned",
      "id": 14106972097,
      "node_id": "MEE_lADOABII586SDdapzwAAAANI10_B",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14106972097",
      "actor": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-02T20:13:35Z"
    },
    {
      "event": "subscribed",
      "id": 14106972099,
      "node_id": "SE_lADOABII586SDdapzwAAAANI10_D",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14106972099",
      "actor": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-02T20:13:35Z"
    },
    {
      "event": "commented",
      "id": 2325272366,
      "node_id": "IC_kwDOABII586KmNcu",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2325272366",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-02T20:24:15Z",
      "updated_at": "2024-09-02T20:25:38Z",
      "author_association": "CONTRIBUTOR",
      "body": "Another idea worth mentioning is that a bitcoin kernel C API could be implemented as a separate C library depending on the C++ library. The new code here does not necessarily need to be part of the main bitcoin core git repository, and it could be in a separate project. A benefit of this approach is it could relieve bitcoin core developers from the responsibility of updating the C API and API documention when they change the C++ code. But a drawback is that C API might not always be up to date with latest version of bitcoin core code and could be broken between releases. Also it might not be as well reviewed or understood and might have more bugs.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#issuecomment-2325272366",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30595"
    },
    {
      "event": "commented",
      "id": 2325848908,
      "node_id": "IC_kwDOABII586KoaNM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2325848908",
      "actor": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-03T07:59:36Z",
      "updated_at": "2024-09-03T07:59:36Z",
      "author_association": "MEMBER",
      "body": "Concept ACK\r\n\r\nAlso an implicit approach ACK despite not heavily reviewing the code (yet). I have been focusing on using the kernel library in proof of concept applications to get a better sense of how well the library works for downstream users and to hopefully uncover any pain points preemptively. A few of these projects are linked in the PR description.\r\n\r\nRegarding a C header vs C++ header, thanks @ryanofsky for taking the time to explain your thought process. I think you raise some excellent points. I'll try to respond as best I can, despite being slightly out of my depth on this topic 😅 \r\n\r\n---\r\n\r\nFor me, the value of libbitcoinkernel is only fully realised with the broadest possible language support and ease of use for downstream projects. This is why I strongly prefer the C header approach for the following reasons:\r\n\r\n1. Mature tooling for C language bindings\r\n2. Stable ABI\r\n3. Well established pattern in other open source projects\r\n\r\nIf we agree that broad language support is a goal of libbitcoinkernel, highlighting languages that _do not_ support C++ bindings is a much more compelling argument for a C header than highlighting languages that _do_ support C++ bindings as an argument for a C++ header.\r\n\r\nRegarding some of the mentioned languages/tools which do have C++ language binding support: \r\n\r\n> Tools like these do not support all C++ types and features, and can make it necessary to selectively wrap more complicated C++ interfaces with simpler C++ interfaces, or even C interfaces\r\n\r\nIn this example, who is doing the wrapping to be able to use these tools? If it's us, this seems much more complicated to ship and maintain a mixed wrapper and also feels over engineered to a specific set of tools and languages. It also does nothing for languages that do not support C++ bindings at all. As @TheCharlatan mentioned, languages favoured by academia lack C++ binding support and making libbitcoinkernel useful for academic research is a particularly important use case of libbitcoinkernel for me. \r\n\r\nIf we are exposing just a C++ header and expecting the downstream user to wrap selective parts in C interfaces to use libbitcoinkernel, we've eroded a fundamental value proposition of libbitcoinkernel, in my opinion. Namely, we want to provide a safe to use consensus library for users and minimise the risk of downstream projects introducing consensus bugs. Requiring downstream projects to write their own C++/C interfaces to be able to use kernel means that a) they just won't use libbitcoinkernel or b) will introduce bugs when writing these wrappers. Said differently, if boilerplate will be needed for broad language support, I would prefer we focus our energy on writing and reviewing boilerplate code that ensures the usefulness of the library for the broadest possible user base, instead of requiring a subset of users to each write their own boilerplate without any review from us.",
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#issuecomment-2325848908",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30595"
    },
    {
      "event": "mentioned",
      "id": 14110905700,
      "node_id": "MEE_lADOABII586SDdapzwAAAANJE1Vk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14110905700",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-03T07:59:37Z"
    },
    {
      "event": "subscribed",
      "id": 14110905724,
      "node_id": "SE_lADOABII586SDdapzwAAAANJE1V8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14110905724",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-03T07:59:37Z"
    },
    {
      "event": "mentioned",
      "id": 14110905746,
      "node_id": "MEE_lADOABII586SDdapzwAAAANJE1WS",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14110905746",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-03T07:59:38Z"
    },
    {
      "event": "subscribed",
      "id": 14110905768,
      "node_id": "SE_lADOABII586SDdapzwAAAANJE1Wo",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14110905768",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-03T07:59:38Z"
    },
    {
      "event": "labeled",
      "id": 14121577521,
      "node_id": "LE_lADOABII586SDdapzwAAAANJtiwx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14121577521",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-03T21:47:50Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14132738442,
      "node_id": "HRFPE_lADOABII586SDdapzwAAAANKYHmK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14132738442",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-04T14:55:31Z"
    },
    {
      "event": "unlabeled",
      "id": 14134579721,
      "node_id": "UNLE_lADOABII586SDdapzwAAAANKfJIJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14134579721",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-04T16:58:53Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 14235825318,
      "node_id": "LE_lADOABII586SDdapzwAAAANQhXSm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14235825318",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-12T16:28:40Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14239085806,
      "node_id": "HRFPE_lADOABII586SDdapzwAAAANQtzTu",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14239085806",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-12T21:19:08Z"
    },
    {
      "event": "commented",
      "id": 2347263134,
      "node_id": "IC_kwDOABII586L6GSe",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2347263134",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-12T21:19:19Z",
      "updated_at": "2024-09-12T21:19:19Z",
      "author_association": "CONTRIBUTOR",
      "body": "Rebased.",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#issuecomment-2347263134",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30595"
    },
    {
      "event": "unlabeled",
      "id": 14239824640,
      "node_id": "UNLE_lADOABII586SDdapzwAAAANQwnsA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14239824640",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-12T22:52:24Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14250154975,
      "node_id": "HRFPE_lADOABII586SDdapzwAAAANRYBvf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14250154975",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-13T14:47:41Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14250745451,
      "node_id": "HRFPE_lADOABII586SDdapzwAAAANRaR5r",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14250745451",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-13T15:33:03Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14260729113,
      "node_id": "HRFPE_lADOABII586SDdapzwAAAANSAXUZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14260729113",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-14T20:06:35Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14562230874,
      "node_id": "HRFPE_lADOABII586SDdapzwAAAANj-gJa",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14562230874",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-08T20:01:05Z"
    },
    {
      "event": "commented",
      "id": 2400726577,
      "node_id": "IC_kwDOABII586PGC4x",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2400726577",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-08T20:07:11Z",
      "updated_at": "2024-10-08T20:07:11Z",
      "author_association": "CONTRIBUTOR",
      "body": "Reworked after receiving a bunch of out-of-band feedback. In short:\r\n\r\n* Got rid of the `void *` option handling. Options are now set through dedicated functions instead of a single setter for all options.\r\n* Got rid of the `kernel_TaskRunner`. The context now holds an immediate task runner internally on which a user can register various validation interfaces. It is now the user's responsibility to process the validation callbacks in a non-blocking fashion with their own infrastructure.\r\n* Got rid of raw data types in validation functions. Instead the raw data is now parsed and processed beforehand and the user always passes opaque data types.\r\n* Got rid of the explicit transaction output struct. The user can now retrieve the data with helper functions applied on opaque transaction output objects.",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#issuecomment-2400726577",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30595"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14613502863,
      "node_id": "HRFPE_lADOABII586SDdapzwAAAANnCFuP",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14613502863",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-11T19:47:23Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14657994685,
      "node_id": "HRFPE_lADOABII586SDdapzwAAAANprz-9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14657994685",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-15T13:47:39Z"
    },
    {
      "event": "review_requested",
      "id": 14787629773,
      "node_id": "RRE_lADOABII586SDdapzwAAAANxaVLN",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14787629773",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-22T15:17:04Z",
      "requested_reviewer": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "subscribed",
      "id": 14789856226,
      "node_id": "SE_lADOABII586SDdapzwAAAANxi0vi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14789856226",
      "actor": {
        "login": "Kasucode101",
        "id": 177804498,
        "node_id": "U_kgDOCpkU0g",
        "avatar_url": "https://avatars.githubusercontent.com/u/177804498?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Kasucode101",
        "html_url": "https://github.com/Kasucode101",
        "followers_url": "https://api.github.com/users/Kasucode101/followers",
        "following_url": "https://api.github.com/users/Kasucode101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Kasucode101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Kasucode101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Kasucode101/subscriptions",
        "organizations_url": "https://api.github.com/users/Kasucode101/orgs",
        "repos_url": "https://api.github.com/users/Kasucode101/repos",
        "events_url": "https://api.github.com/users/Kasucode101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Kasucode101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-22T17:34:48Z"
    },
    {
      "event": "comment_deleted",
      "id": 14792106355,
      "node_id": "CDE_lADOABII586SDdapzwAAAANxraFz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14792106355",
      "actor": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-22T20:13:08Z"
    },
    {
      "event": "labeled",
      "id": 14845106922,
      "node_id": "LE_lADOABII586SDdapzwAAAAN01lrq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14845106922",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-24T09:18:04Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14847200048,
      "node_id": "HRFPE_lADOABII586SDdapzwAAAAN09ksw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14847200048",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-24T10:12:34Z"
    },
    {
      "event": "unlabeled",
      "id": 14849342084,
      "node_id": "UNLE_lADOABII586SDdapzwAAAAN1FvqE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14849342084",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-24T11:32:01Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14852191297,
      "node_id": "HRFPE_lADOABII586SDdapzwAAAAN1QnRB",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14852191297",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-24T14:00:05Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14869766856,
      "node_id": "HRFPE_lADOABII586SDdapzwAAAAN2TqLI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14869766856",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-25T10:19:16Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15084388468,
      "node_id": "HRFPE_lADOABII586SDdapzwAAAAODGYB0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15084388468",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-02T20:39:12Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15211184239,
      "node_id": "HRFPE_lADOABII586SDdapzwAAAAOKqEBv",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15211184239",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-08T11:01:20Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15242060548,
      "node_id": "HRFPE_lADOABII586SDdapzwAAAAOMf2ME",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15242060548",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "2795c1c0786ea63a5bae65a985fbf7890e8fcd0c",
      "commit_url": "https://api.github.com/repos/TheCharlatan/bitcoin/commits/2795c1c0786ea63a5bae65a985fbf7890e8fcd0c",
      "created_at": "2024-11-10T21:13:53Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15296213529,
      "node_id": "HRFPE_lADOABII586SDdapzwAAAAOPubIZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15296213529",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "48158303fe276cb2f8fbc53ff31a4162d8f55c84",
      "commit_url": "https://api.github.com/repos/TheCharlatan/bitcoin/commits/48158303fe276cb2f8fbc53ff31a4162d8f55c84",
      "created_at": "2024-11-14T10:17:15Z"
    },
    {
      "event": "subscribed",
      "id": 15303468226,
      "node_id": "SE_lADOABII586SDdapzwAAAAOQKGTC",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15303468226",
      "actor": {
        "login": "rsantacroce",
        "id": 112706229,
        "node_id": "U_kgDOBrfCtQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/112706229?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rsantacroce",
        "html_url": "https://github.com/rsantacroce",
        "followers_url": "https://api.github.com/users/rsantacroce/followers",
        "following_url": "https://api.github.com/users/rsantacroce/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rsantacroce/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rsantacroce/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rsantacroce/subscriptions",
        "organizations_url": "https://api.github.com/users/rsantacroce/orgs",
        "repos_url": "https://api.github.com/users/rsantacroce/repos",
        "events_url": "https://api.github.com/users/rsantacroce/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rsantacroce/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-14T19:29:47Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15324983917,
      "node_id": "HRFPE_lADOABII586SDdapzwAAAAORcLJt",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15324983917",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "26042c718462bc4e484526fa14fb962e95e8bc13",
      "commit_url": "https://api.github.com/repos/TheCharlatan/bitcoin/commits/26042c718462bc4e484526fa14fb962e95e8bc13",
      "created_at": "2024-11-17T14:13:59Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15325411292,
      "node_id": "HRFPE_lADOABII586SDdapzwAAAAORdzfc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15325411292",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "f1b3ab751bfe374095427796af00f6fdd50ec3e5",
      "commit_url": "https://api.github.com/repos/TheCharlatan/bitcoin/commits/f1b3ab751bfe374095427796af00f6fdd50ec3e5",
      "created_at": "2024-11-17T16:51:40Z"
    },
    {
      "event": "reviewed",
      "id": 2297633388,
      "node_id": "PRR_kwDOABII586I8xps",
      "url": null,
      "actor": null,
      "commit_id": "f1b3ab751bfe374095427796af00f6fdd50ec3e5",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Strong concept ACK.\r\n\r\nI've started building a python wrapper library to get familiar with and actually use the interface, so most of my comments for now will be based on that experience and reading the documentation.",
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#pullrequestreview-2297633388",
      "submitted_at": "2024-11-19T19:19:47Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
    },
    {
      "event": "commented",
      "id": 2486794714,
      "node_id": "IC_kwDOABII586UOXna",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2486794714",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-19T21:31:43Z",
      "updated_at": "2024-11-19T21:31:43Z",
      "author_association": "CONTRIBUTOR",
      "body": "Thank you for the review @stickies-v!\r\n\r\nUpdated 6c9121f7907262b2bf065a7ceeb8bca620060a7f -> 6c9121f7907262b2bf065a7ceeb8bca620060a7f ([kernelApi_0](https://github.com/TheCharlatan/bitcoin/tree/kernelApi_0) -> [kernelApi_1](https://github.com/TheCharlatan/bitcoin/tree/kernelApi_1), [compare](https://github.com/TheCharlatan/bitcoin/compare/kernelApi_0..kernelApi_1))\r\n\r\n* Added, cleaned up, and precised a bunch of documentation\r\n* Slightly changed the order of a function's arguments, such that it takes the kernel context first.",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#issuecomment-2486794714",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30595"
    },
    {
      "event": "mentioned",
      "id": 15355609963,
      "node_id": "MEE_lADOABII586SDdapzwAAAAOTRANr",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15355609963",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-19T21:31:45Z"
    },
    {
      "event": "subscribed",
      "id": 15355609974,
      "node_id": "SE_lADOABII586SDdapzwAAAAOTRAN2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15355609974",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-19T21:31:45Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15355610268,
      "node_id": "HRFPE_lADOABII586SDdapzwAAAAOTRASc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15355610268",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "6c9121f7907262b2bf065a7ceeb8bca620060a7f",
      "commit_url": "https://api.github.com/repos/TheCharlatan/bitcoin/commits/6c9121f7907262b2bf065a7ceeb8bca620060a7f",
      "created_at": "2024-11-19T21:31:46Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15370401029,
      "node_id": "HRFPE_lADOABII586SDdapzwAAAAOUJbUF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15370401029",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "97fe2b25af31ca612c1f8d9f3de739fa3dee3902",
      "commit_url": "https://api.github.com/repos/TheCharlatan/bitcoin/commits/97fe2b25af31ca612c1f8d9f3de739fa3dee3902",
      "created_at": "2024-11-20T17:04:13Z"
    },
    {
      "event": "commented",
      "id": 2489128571,
      "node_id": "IC_kwDOABII586UXRZ7",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2489128571",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-20T17:04:18Z",
      "updated_at": "2024-11-20T17:04:18Z",
      "author_association": "CONTRIBUTOR",
      "body": "Updated 6c9121f7907262b2bf065a7ceeb8bca620060a7f -> 97fe2b25af31ca612c1f8d9f3de739fa3dee3902 ([kernelApi_1](https://github.com/TheCharlatan/bitcoin/tree/kernelApi_1) -> [kernelApi_2](https://github.com/TheCharlatan/bitcoin/tree/kernelApi_2), [compare](https://github.com/TheCharlatan/bitcoin/compare/kernelApi_1..kernelApi_2))\r\n\r\n* Added @stickies-v's [suggestion](https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1757015877), implementing variadic args for nonnull attribute macro.",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#issuecomment-2489128571",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30595"
    },
    {
      "event": "mentioned",
      "id": 15370403729,
      "node_id": "MEE_lADOABII586SDdapzwAAAAOUJb-R",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15370403729",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-20T17:04:20Z"
    },
    {
      "event": "subscribed",
      "id": 15370403751,
      "node_id": "SE_lADOABII586SDdapzwAAAAOUJb-n",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15370403751",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-20T17:04:20Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15389463292,
      "node_id": "HRFPE_lADOABII586SDdapzwAAAAOVSJL8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15389463292",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "5910f9bb18da35101144304d385618d7b82420f5",
      "commit_url": "https://api.github.com/repos/TheCharlatan/bitcoin/commits/5910f9bb18da35101144304d385618d7b82420f5",
      "created_at": "2024-11-21T22:11:01Z"
    },
    {
      "event": "commented",
      "id": 2492442146,
      "node_id": "IC_kwDOABII586Uj6Yi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2492442146",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-21T22:11:03Z",
      "updated_at": "2024-11-21T22:18:56Z",
      "author_association": "CONTRIBUTOR",
      "body": "Updated 97fe2b25af31ca612c1f8d9f3de739fa3dee3902 -> a9b71eadb8eff5530500cdb7d7227b8575948df6 ([kernelApi_2](https://github.com/TheCharlatan/bitcoin/tree/kernelApi_2) -> [kernelApi_3](https://github.com/TheCharlatan/bitcoin/tree/kernelApi_3), [compare](https://github.com/TheCharlatan/bitcoin/compare/kernelApi_2..kernelApi_3))\r\n\r\n* As discussed with @stickies-v out of band, make callbacks only return `const` pointers, which further ensures that the user does not de-allocate or take ownership of them.",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#issuecomment-2492442146",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30595"
    },
    {
      "event": "mentioned",
      "id": 15389463705,
      "node_id": "MEE_lADOABII586SDdapzwAAAAOVSJSZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15389463705",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-21T22:11:04Z"
    },
    {
      "event": "subscribed",
      "id": 15389463721,
      "node_id": "SE_lADOABII586SDdapzwAAAAOVSJSp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15389463721",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-21T22:11:04Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15389525737,
      "node_id": "HRFPE_lADOABII586SDdapzwAAAAOVSYbp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15389525737",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "a9b71eadb8eff5530500cdb7d7227b8575948df6",
      "commit_url": "https://api.github.com/repos/TheCharlatan/bitcoin/commits/a9b71eadb8eff5530500cdb7d7227b8575948df6",
      "created_at": "2024-11-21T22:18:49Z"
    },
    {
      "event": "labeled",
      "id": 15389526570,
      "node_id": "LE_lADOABII586SDdapzwAAAAOVSYoq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15389526570",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-21T22:18:54Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2492461843,
      "node_id": "IC_kwDOABII586Uj_MT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2492461843",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-21T22:18:55Z",
      "updated_at": "2024-11-21T22:18:55Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/33351144688</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#issuecomment-2492461843",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30595"
    },
    {
      "event": "unlabeled",
      "id": 15390044587,
      "node_id": "UNLE_lADOABII586SDdapzwAAAAOVUXGr",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15390044587",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-21T23:07:43Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15395688304,
      "node_id": "HRFPE_lADOABII586SDdapzwAAAAOVp49w",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15395688304",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "fc67047b7e1fb7031285f790ea3a7ea349474f31",
      "commit_url": "https://api.github.com/repos/TheCharlatan/bitcoin/commits/fc67047b7e1fb7031285f790ea3a7ea349474f31",
      "created_at": "2024-11-22T10:36:41Z"
    },
    {
      "event": "commented",
      "id": 2493443688,
      "node_id": "IC_kwDOABII586Unu5o",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2493443688",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-22T10:36:47Z",
      "updated_at": "2024-11-22T10:37:20Z",
      "author_association": "CONTRIBUTOR",
      "body": "Updated a9b71eadb8eff5530500cdb7d7227b8575948df6 -> fc67047b7e1fb7031285f790ea3a7ea349474f31 ([kernelApi_3](https://github.com/TheCharlatan/bitcoin/tree/kernelApi_3) -> [kernelApi_4](https://github.com/TheCharlatan/bitcoin/tree/kernelApi_4), [compare](https://github.com/TheCharlatan/bitcoin/compare/kernelApi_3..kernelApi_4))\r\n\r\n* Made the `user_data` argument passed in with the callbacks `const` to better convey that the library doesn't do anything with it besides passing it back to the user when the callback is triggered. This mimics the behaviour in libsecp: https://github.com/bitcoin-core/secp256k1/blob/master/include/secp256k1.h#L361",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#issuecomment-2493443688",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30595"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGU2YzYxMGE3ZTAzMjM5ZDljN2M0NjIwYWViNGUwMzkyNzFmZTEzYjk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e6c610a7e03239d9c7c4620aeb4e039271fe13b9",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/e6c610a7e03239d9c7c4620aeb4e039271fe13b9",
      "tree": {
        "sha": "bc4c6189240bb5f4b330e9004cab51f864ffea12",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bc4c6189240bb5f4b330e9004cab51f864ffea12"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree bc4c6189240bb5f4b330e9004cab51f864ffea12\nparent 69c031344404114bba792cc53326232eef796d03\nauthor TheCharlatan <seb.kung@gmail.com> 1716885172 +0200\ncommitter TheCharlatan <seb.kung@gmail.com> 1732277154 +0100\n\nkernel: Introduce initial kernel C header API\n\nAs a first step, implement the equivalent of what was implemented in the\nnow deprecated libbitcoinconsensus header. Also add a test binary to\nexercise the header and library.\n\nUnlike the deprecated libbitcoinconsensus the kernel library can now use\nthe hardware-accelerated sha256 implementations thanks for its\nstatically-initialzed context. The functions kept around for\nbackwards-compatibility in the libbitcoinconsensus header are not ported\nover. As a new header, it should not be burdened by previous\nimplementations. Also add a new error code for handling invalid flag\ncombinations, which would otherwise cause a crash.\n\nThe macros used in the new C header were adapted from the libsecp256k1\nheader.\n\nTo make use of the C header from C++ code, a C++ header is also\nintroduced for wrapping the C header. This makes it safer and easier to\nuse from C++ code.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE8s/Eq9C5nYN+67fQm3m0VpHbQXMFAmdAc6MACgkQm3m0VpHb\nQXN3EA/+IVp/BSUVlTlgCQ5PC+dqyAr/Of7wrFk+eQ8uZWNBsvK3zKdJfvVDK3YN\nJulFeDveJrvgHtb1FzHq4qoMkAtbQUSiVJ1EHwq4yfnGjdptKT96KW2lVd1w60Da\nvG5T6uY+es9RH/jUG1FwgNqUp8+KN/pdtxQ2WaAcQA06kaC5LFwG942ImGah/7mD\noF0Kqls4YZz3lOGjGbq20T5dR44/MyoGe44+yJ+Cq7ppnUHBFHhj+j79WMhThtUg\nFK1P1uKFp9PNqnu58peJVRK9AzdjOL6k0qxyy2veuxgeeH5UEZsAi56uhdlse0Uk\nB8aVGsZ2xTgmfag/grh30XXshLyn+FLYkjrM7GTnxmXXehRePd6EE5BOg1ezb8tQ\ndO9SMyRCEXX+cJcrSSkKtOeo5V1vPey87l4RUjDpGtzG2TdTykqrjNxPoDuOoDKE\nOAN7KYPe0ooVeLvJuNIIGIxY3JJhxJlcZ1K8er6IyVMKqnbv+tu1gnRYxK0T1UwP\n7R2CLWWr1e/DRxAOaSpWfaxXe0b5VIwG4Tf+H3C1WYlyPA7tqnV7EwsxivPuUrOg\ngaVn4avkYQOimAUCNvmkPj00BsQZdjGsvPuYejeEV5U23HD/LelOnf8c5GM/2QHV\njNOwc/XAA4lq8zmjVaQCkTBCWJyGJWbc3+dYcKzta4A2Vi0/+nk=\n=jJ31\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/69c031344404114bba792cc53326232eef796d03",
          "sha": "69c031344404114bba792cc53326232eef796d03",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/69c031344404114bba792cc53326232eef796d03"
        }
      ],
      "message": "kernel: Introduce initial kernel C header API\n\nAs a first step, implement the equivalent of what was implemented in the\nnow deprecated libbitcoinconsensus header. Also add a test binary to\nexercise the header and library.\n\nUnlike the deprecated libbitcoinconsensus the kernel library can now use\nthe hardware-accelerated sha256 implementations thanks for its\nstatically-initialzed context. The functions kept around for\nbackwards-compatibility in the libbitcoinconsensus header are not ported\nover. As a new header, it should not be burdened by previous\nimplementations. Also add a new error code for handling invalid flag\ncombinations, which would otherwise cause a crash.\n\nThe macros used in the new C header were adapted from the libsecp256k1\nheader.\n\nTo make use of the C header from C++ code, a C++ header is also\nintroduced for wrapping the C header. This makes it safer and easier to\nuse from C++ code.",
      "committer": {
        "name": "TheCharlatan",
        "email": "seb.kung@gmail.com",
        "date": "2024-11-22T12:05:54Z"
      },
      "author": {
        "name": "TheCharlatan",
        "email": "seb.kung@gmail.com",
        "date": "2024-05-28T08:32:52Z"
      },
      "sha": "e6c610a7e03239d9c7c4620aeb4e039271fe13b9"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGVlM2M0ZWE5MmNkOWI3NjQwYWRjYzJlOGU4MDMxOTFkNTE0YWZjNzU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ee3c4ea92cd9b7640adcc2e8e803191d514afc75",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/ee3c4ea92cd9b7640adcc2e8e803191d514afc75",
      "tree": {
        "sha": "6d4ca546e2da4fceab8cc487f13fce8d8be4153b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6d4ca546e2da4fceab8cc487f13fce8d8be4153b"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 6d4ca546e2da4fceab8cc487f13fce8d8be4153b\nparent e6c610a7e03239d9c7c4620aeb4e039271fe13b9\nauthor TheCharlatan <seb.kung@gmail.com> 1716992025 +0200\ncommitter TheCharlatan <seb.kung@gmail.com> 1732277208 +0100\n\nkernel: Add logging to kernel library C header\n\nExposing logging in the kernel library allows users to follow what is\ngoing on when using it. Users of the C header can use\n`kernel_logging_connection_create(...)` to pass a callback function to\nBitcoin Core's internal logger. Additionally the level and severity can\nbe globally configured.\n\nBy default, the logger buffers messages until\n`kernel_loggin_connection_create(...)` is called. If the user does not\nwant any logging messages, it is recommended that\n`kernel_disable_logging()` is called, which permanently disables the\nlogging and any buffering of messages.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE8s/Eq9C5nYN+67fQm3m0VpHbQXMFAmdAc9gACgkQm3m0VpHb\nQXO4yBAAnmTcnV0Vgej+SPaa9syJIzlqDjZ1YCjZ2eT/o71ygmnRxMhk9WqjdY9Z\nNUqk8OI+d6qqz/ryv1rxHG92h6a8n/dvIpbiEo2jYwwYa39a9xZpzONCG6w7QjcG\nnizuFMBpOSEvx9vFMh8S3kAWe5XDGhobK02wYWpV3IuLk+16dcmPNJTB8Gqiz9Ey\nEsI8hNOP2P0XBr0nepYoTYCOmCj7WgXLJs711gZBdWpQmMJjWzKqFSjYi8vGE3El\n6q8aJJEQ7eOquUMkGHr1xlZUYRrPrPY1vsVJRReHkZIQxr79McWmXht6zv+kYZZa\nwPMhoouXnIyehHKdoxznkgsklKXAYc9nUdqEzhMUN9vDv9w3RPGyhvjSpQjfPDAS\nFfNt3eMubmfyzOHlSnIYl/HHWwI/25hZx5uo0dfV3OeUxuaUKDGdx7CUq4INwK4O\n3I8yrqxft97UfsSX1c9Vpr33Y4t4LYwzumYwEfARiGllbH/tmvEGWJnX91OjEXo0\n1baE1HL26gwYXwzpC7UhonRCRQ1cVV8YffAUAV2Kkc8SFXYKARfVkt77Lrb/9e1r\nFcl/9LFZ6KBwborUWvRBtpJtK9j4VAcD/V7lFkczHFUaKOUOocIYEIfBDVcuHGYt\nQz+MkV0crMdrasJzm5nLsms7rc472HTL+8T6e7FWCfpHUqcmS+4=\n=nWpQ\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e6c610a7e03239d9c7c4620aeb4e039271fe13b9",
          "sha": "e6c610a7e03239d9c7c4620aeb4e039271fe13b9",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/e6c610a7e03239d9c7c4620aeb4e039271fe13b9"
        }
      ],
      "message": "kernel: Add logging to kernel library C header\n\nExposing logging in the kernel library allows users to follow what is\ngoing on when using it. Users of the C header can use\n`kernel_logging_connection_create(...)` to pass a callback function to\nBitcoin Core's internal logger. Additionally the level and severity can\nbe globally configured.\n\nBy default, the logger buffers messages until\n`kernel_loggin_connection_create(...)` is called. If the user does not\nwant any logging messages, it is recommended that\n`kernel_disable_logging()` is called, which permanently disables the\nlogging and any buffering of messages.",
      "committer": {
        "name": "TheCharlatan",
        "email": "seb.kung@gmail.com",
        "date": "2024-11-22T12:06:48Z"
      },
      "author": {
        "name": "TheCharlatan",
        "email": "seb.kung@gmail.com",
        "date": "2024-05-29T14:13:45Z"
      },
      "sha": "ee3c4ea92cd9b7640adcc2e8e803191d514afc75"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDQwN2NhNzUwY2RhYTlhNmI4OGMxODE0OTlkY2Q0YzVkMTdmMDNmMjU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/407ca750cdaa9a6b88c181499dcd4c5d17f03f25",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/407ca750cdaa9a6b88c181499dcd4c5d17f03f25",
      "tree": {
        "sha": "b29dffc5f7fc7cdce0cc7b3ba5d9b5675b5b2b5a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b29dffc5f7fc7cdce0cc7b3ba5d9b5675b5b2b5a"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree b29dffc5f7fc7cdce0cc7b3ba5d9b5675b5b2b5a\nparent ee3c4ea92cd9b7640adcc2e8e803191d514afc75\nauthor TheCharlatan <seb.kung@gmail.com> 1717418147 +0200\ncommitter TheCharlatan <seb.kung@gmail.com> 1732277382 +0100\n\nkernel: Add kernel library context object\n\nThe context introduced here holds the objects that will be required for\nrunning validation tasks, such as the chosen chain parameters, callbacks\nfor validation events, and an interrupt utility. These will be used in a\nfew commits, once the chainstate manager is introduced.\n\nThis commit also introduces conventions for defining option objects. A\ncommon pattern throughout the C header will be:\n```\noptions = object_option_create();\nobject = object_create(options);\n```\nThis allows for more consistent usage of a \"builder pattern\" for\nobjects where options can be configured independently from\ninstantiation.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE8s/Eq9C5nYN+67fQm3m0VpHbQXMFAmdAdIYACgkQm3m0VpHb\nQXPSthAAkht7sHz2c/e3BSmi6Y9+2SQvDsPE/iq8FxewC0tsINTL8B0j3IDB9HcT\njDV0ZIjnEobNOKqvqyKdMDjVR3p3BPG5OGFg9qpEfeuhbcCGpn+qNa8SAZY235PM\nIdtzlBt9ysEIT3z/5QWNYCCqP5T3T0Rrcl+E2hMWy25l4J4c8XeH4eR1M/5pn8Xj\n9OtTFhx096lzbRLTcBJ4w6s7vF/N1hHpPXfuRUBp5Hsz4GuIrhefZYT8z/z0cAwq\nrZcKt26HRfIY4xnuLkmPRdTn0MI53xx65sJQlcqw5Lov9ia9XQtfJ+T5Y2Zwry85\nrS/dpDwu3NAIQ4WJk/tSuAw6o/1v7IOXBHWlmewnpA13k9xX04S5eHNEPOL0gZLG\nCvROhpihHElD/rDEdIWdYKzXIsuZY2k0sl+oevaJFbuptcMy071+wwLc7Ked4tz0\n4tBlVN/u7D/+AVvhSOFGtW42MafO5YngP0y7MhURgs/RGVt1+yaKdvXAPRwMjmqu\njtsfHF6PWeCJ2UORvez7fCyZ7fokoHI9ztY/yKHa9fg7wGMFKOsH+fAhREGQzZoz\n192BEVhwyGXAFVrCpPdtxlxP0TTc2S1ZxTEnKfd/nCN1i00Yl4JzAZaVN/GBV98X\npJToTALJTzE2SMkSWKMJJGgBj6QKpjkYf3JoSiKYH9TAa5B0ZmY=\n=jm6T\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ee3c4ea92cd9b7640adcc2e8e803191d514afc75",
          "sha": "ee3c4ea92cd9b7640adcc2e8e803191d514afc75",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/ee3c4ea92cd9b7640adcc2e8e803191d514afc75"
        }
      ],
      "message": "kernel: Add kernel library context object\n\nThe context introduced here holds the objects that will be required for\nrunning validation tasks, such as the chosen chain parameters, callbacks\nfor validation events, and an interrupt utility. These will be used in a\nfew commits, once the chainstate manager is introduced.\n\nThis commit also introduces conventions for defining option objects. A\ncommon pattern throughout the C header will be:\n```\noptions = object_option_create();\nobject = object_create(options);\n```\nThis allows for more consistent usage of a \"builder pattern\" for\nobjects where options can be configured independently from\ninstantiation.",
      "committer": {
        "name": "TheCharlatan",
        "email": "seb.kung@gmail.com",
        "date": "2024-11-22T12:09:42Z"
      },
      "author": {
        "name": "TheCharlatan",
        "email": "seb.kung@gmail.com",
        "date": "2024-06-03T12:35:47Z"
      },
      "sha": "407ca750cdaa9a6b88c181499dcd4c5d17f03f25"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDY5MWQ4OWQ4NDZiODZmOTM3ZjZhM2M2ODZmYjhiODYzNjMwOThhNzM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/691d89d846b86f937f6a3c686fb8b86363098a73",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/691d89d846b86f937f6a3c686fb8b86363098a73",
      "tree": {
        "sha": "dbe048e817e242018244818bc25ea63cced2a077",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dbe048e817e242018244818bc25ea63cced2a077"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree dbe048e817e242018244818bc25ea63cced2a077\nparent 407ca750cdaa9a6b88c181499dcd4c5d17f03f25\nauthor TheCharlatan <seb.kung@gmail.com> 1717418695 +0200\ncommitter TheCharlatan <seb.kung@gmail.com> 1732277403 +0100\n\nkerenl: Add chain params context option to C header\n\nAs a first option, add the chainparams. For now these can only be\ninstantiated with default values. In future they may be expanded to take\ntheir own options for regtest and signet configurations.\n\nThis commit also introduces a unique pattern for setting the option\nvalues when calling the `*_set(...)` function.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE8s/Eq9C5nYN+67fQm3m0VpHbQXMFAmdAdJsACgkQm3m0VpHb\nQXNrXQ//T7lRAj0B9/H5xHNSzcmWJWOK1jm/HFciSaBip9iKhSPnK6z9mLxME9B5\nlo8icisitNAneC18q2xCYvFuK5w9qLJaUeCjU2dXj2S/zxhcjU+jY5NJIiyR8EIp\nyJKK3yJBPpiE+6gYSqRK6riAED+YtZdKvn8pQikMWKXUgpDgOUbTLR0uc6aMjCwE\n+sctQJWjrkXNr+2iILol4DitU7zwt8TuDwcCcNh2bG6liMtsvxHLCTFsiP/dk20a\ncrt8+zco3InM5+9i6fi93hCOtygc8tjC+1hld6NFzIn62iGHP1WEbzrOXEW8Csp/\nq0kEDrwyhPTY80cEivRSvZiPPrj1qP4A+aEG7RpsFZ6UmG5FuHxlgxCwHvOy9o5u\nMkT6yfJSIRaf6jrmWsHppKQSkwNCaTn8J/ZJFXbzaKorSW6fHadG1JRVfWvJEaQT\nVHSKtkCGMQdS7v5kZQqT97vNL3Xmf2j3YDgQmI3bGJ5b19EWp7hNZmihv+Qs40LU\no93ZFVeVH8CnOE8IgH8ydkSHvnuv9USC7tg6KqHq7Bkbk9U9NauJ89TYpyJ2+hyr\nZ3rUVufTSkfTi+RrahZ2laOfkBDjRWp+8wx9KmmWMr/SoL0RKUPieduacy4SU7UN\n1q6UfN0zJIbtT1QDpP5nZmBuK/2OZL7Ag8egiKtoQ2UMRPlp8UQ=\n=k+wX\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/407ca750cdaa9a6b88c181499dcd4c5d17f03f25",
          "sha": "407ca750cdaa9a6b88c181499dcd4c5d17f03f25",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/407ca750cdaa9a6b88c181499dcd4c5d17f03f25"
        }
      ],
      "message": "kerenl: Add chain params context option to C header\n\nAs a first option, add the chainparams. For now these can only be\ninstantiated with default values. In future they may be expanded to take\ntheir own options for regtest and signet configurations.\n\nThis commit also introduces a unique pattern for setting the option\nvalues when calling the `*_set(...)` function.",
      "committer": {
        "name": "TheCharlatan",
        "email": "seb.kung@gmail.com",
        "date": "2024-11-22T12:10:03Z"
      },
      "author": {
        "name": "TheCharlatan",
        "email": "seb.kung@gmail.com",
        "date": "2024-06-03T12:44:55Z"
      },
      "sha": "691d89d846b86f937f6a3c686fb8b86363098a73"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGMxOTRiZWE0MWY2ZDI0ZGFjZDBiODkzNTYxMGIxZDVmMjBmYjFjZDE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c194bea41f6d24dacd0b8935610b1d5f20fb1cd1",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/c194bea41f6d24dacd0b8935610b1d5f20fb1cd1",
      "tree": {
        "sha": "0b84b7e8d5a67476b564edf0cbdec280a3feb448",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0b84b7e8d5a67476b564edf0cbdec280a3feb448"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 0b84b7e8d5a67476b564edf0cbdec280a3feb448\nparent 691d89d846b86f937f6a3c686fb8b86363098a73\nauthor TheCharlatan <seb.kung@gmail.com> 1717419089 +0200\ncommitter TheCharlatan <seb.kung@gmail.com> 1732277682 +0100\n\nkernel: Add notifications context option to C header\n\nThe notifications are used for notifying on connected blocks and on\nwarning and fatal error conditions.\n\nThe user of the C header may define callbacks that gets passed to the\ninternal notification object in the\n`kernel_NotificationInterfaceCallbacks` struct. Each of the callbacks\ntake a `user_data` argument that gets populated from the `user_data`\nvalue in the struct. It can be used to recreate the structure containing\nthe callbacks on the user's side, or to give the callbacks additional\ncontextual information.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE8s/Eq9C5nYN+67fQm3m0VpHbQXMFAmdAdbIACgkQm3m0VpHb\nQXM5ug//dGns9nGBJ8bFZr5nGffy9TE7QxrAUiiaobFibSKs2JatCfgzT5DLWEWM\nMwhFUowshNuLSayQkAXEVjfB5iNzOfbT3s9vEgA+EKytiUffWGctgRJJRX13e6s9\nTPoUHzYEO5jrlKCEIhLZFx/r/wXSUR4bV++54U1kQBHp9WLoiFvH7/fhFGZPEZD6\nMyEAonFucnr+B/1PJpW5eE/R9zQsw6BTFYWiMAc5dZ+RxOoFTsIhVFs6pLNq8xom\nTNkoxD+gsdcXht4w8i+/UkMAWK8QRv2ojEln1p8M32Vt5I9UNVRx2Bs1SNCDbRiI\n5Td2SHa0+pl/4CVQdkzYtb9JGc5u4Nd+efRgv+3DbLopxiONY+Mhf7glH3jR/8mU\nVE1G37UU6yo66NYUMbkieoj7n89k5JQ9QFkpTUM2k9zX3zImzP5DnY2GGMBI1cNK\nQA+ny9DOIqfdC+wvHfsZyH/ksDv5uGY7ql+3HlO9p90u0IFrr6lGWArEGI9k/t94\n9GRy+fPzEGQ3F/63MW/6RQQd1LQp3RFtyAWArXdGrkA1f1UHmDjfmSlKjdyjcHKL\n08bKtTgePETVNYQBiX9wlwdyZSQzJlfmUDlIJqIuAwtkn3iC8KSc+IwWsNwzn8ee\nYIcKvbUDNnoF7mNL0IT5oX8vVHLx/HFmbxUHrtLKr5jTqbC1q24=\n=nfg2\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/691d89d846b86f937f6a3c686fb8b86363098a73",
          "sha": "691d89d846b86f937f6a3c686fb8b86363098a73",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/691d89d846b86f937f6a3c686fb8b86363098a73"
        }
      ],
      "message": "kernel: Add notifications context option to C header\n\nThe notifications are used for notifying on connected blocks and on\nwarning and fatal error conditions.\n\nThe user of the C header may define callbacks that gets passed to the\ninternal notification object in the\n`kernel_NotificationInterfaceCallbacks` struct. Each of the callbacks\ntake a `user_data` argument that gets populated from the `user_data`\nvalue in the struct. It can be used to recreate the structure containing\nthe callbacks on the user's side, or to give the callbacks additional\ncontextual information.",
      "committer": {
        "name": "TheCharlatan",
        "email": "seb.kung@gmail.com",
        "date": "2024-11-22T12:14:42Z"
      },
      "author": {
        "name": "TheCharlatan",
        "email": "seb.kung@gmail.com",
        "date": "2024-06-03T12:51:29Z"
      },
      "sha": "c194bea41f6d24dacd0b8935610b1d5f20fb1cd1"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDM2MTBiZTNiMTM4N2YwMGIyOGE3MmM5ZDFmODNhMzQ0YWJkNzU4MmE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3610be3b1387f00b28a72c9d1f83a344abd7582a",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/3610be3b1387f00b28a72c9d1f83a344abd7582a",
      "tree": {
        "sha": "5cbfd7a1b24bb861ba1e8bb49bd46ea843e87d63",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5cbfd7a1b24bb861ba1e8bb49bd46ea843e87d63"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 5cbfd7a1b24bb861ba1e8bb49bd46ea843e87d63\nparent c194bea41f6d24dacd0b8935610b1d5f20fb1cd1\nauthor TheCharlatan <seb.kung@gmail.com> 1716922728 +0200\ncommitter TheCharlatan <seb.kung@gmail.com> 1732278683 +0100\n\nkernel: Add chainstate manager object to C header\n\nThis is the main driver class for anything validation related, so expose\nit here.\n\nCreating the chainstate manager and block manager options will currently\nalso trigger the creation of their respectively configured directories.\n\nThe chainstate manager and block manager options were not consolidated\ninto a single object, since the kernel might eventually introduce a\nblock manager object for the purposes of being a light-weight block\nstore reader.\n\nThe chainstate manager will associate with the context with which it was\ncreated for the duration of its lifetime. It is only valid if that\ncontext remains in memory too.\n\nThe tests now also create dedicated temporary directories. This is\nsimilar to the behaviour in the existing unit test framework.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE8s/Eq9C5nYN+67fQm3m0VpHbQXMFAmdAeZsACgkQm3m0VpHb\nQXO/NQ//ajgwAuozOmiUtT9OoGq+YY2rkAjF8MLQDawOMBy17hKz6VEWCoq3tnlV\nql+ikfWwu49oDThZCcKJ4x2cFfFAZ2ncL/PqD0uqiT0WJK9hvQQuqc6yPLsCTZeo\nSCArzXR54ASne3J7Zqs87Q0jOwe2tInTmzYKc25HkGTBQuRbC0gNoaCT+UcSI5l0\nSdmb0qF2DXHFBneJW+jheFh75fiSLfwE0XvRRuhZ8I2990OzWUFMG9zqtuN62bHa\n99BU55NFk8ruzr/rmVAxZXJVWC/t5IKtW6DO0hdIOv4RaBjk+Lov4/35nFO2/hma\n6GIvc8MhiAW2FzMSgbh2AvoH7q13f79U9zwgtlrMdy+0M/l7vswYEJnD2ziCL4F7\nnIDpzgt+yZsOoZVXvAjyWb5b20fbDHqc2pMN75JyfOxj7ZuEYSFv+SNtVLr/F34v\nzpWb0yr/+XtoZmlucTJLoFwbO5EfrWTjkmn5JOk6UMcxUjBthynkRUFG79hQomr4\nj/GtwgyLBKB3j2ROp4QvT0yy5NynKfnGLkXdpU31/UNpR5rgU+TE00ojDuSlU+6v\nLxFEgXkiEayKHbE332eC1aIXghStf5PX+V4uNAg9YUtiW3hTKTtz6R55M0zcJ090\npYlMiwm/ujA4A4NeW2YNoslsEr4pG+zcBZkHmfn3jhz2F2wLlBk=\n=yTWl\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c194bea41f6d24dacd0b8935610b1d5f20fb1cd1",
          "sha": "c194bea41f6d24dacd0b8935610b1d5f20fb1cd1",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/c194bea41f6d24dacd0b8935610b1d5f20fb1cd1"
        }
      ],
      "message": "kernel: Add chainstate manager object to C header\n\nThis is the main driver class for anything validation related, so expose\nit here.\n\nCreating the chainstate manager and block manager options will currently\nalso trigger the creation of their respectively configured directories.\n\nThe chainstate manager and block manager options were not consolidated\ninto a single object, since the kernel might eventually introduce a\nblock manager object for the purposes of being a light-weight block\nstore reader.\n\nThe chainstate manager will associate with the context with which it was\ncreated for the duration of its lifetime. It is only valid if that\ncontext remains in memory too.\n\nThe tests now also create dedicated temporary directories. This is\nsimilar to the behaviour in the existing unit test framework.",
      "committer": {
        "name": "TheCharlatan",
        "email": "seb.kung@gmail.com",
        "date": "2024-11-22T12:31:23Z"
      },
      "author": {
        "name": "TheCharlatan",
        "email": "seb.kung@gmail.com",
        "date": "2024-05-28T18:58:48Z"
      },
      "sha": "3610be3b1387f00b28a72c9d1f83a344abd7582a"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGMzYjM0Y2UwOGQ3MTJiN2MxNzEyMjlmYTI1NDE2Zjc4ZmM3YmVlODA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c3b34ce08d712b7c171229fa25416f78fc7bee80",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/c3b34ce08d712b7c171229fa25416f78fc7bee80",
      "tree": {
        "sha": "ad74bd1e9fbfa0d34706ad1d953af7777fa22dcb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ad74bd1e9fbfa0d34706ad1d953af7777fa22dcb"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree ad74bd1e9fbfa0d34706ad1d953af7777fa22dcb\nparent 3610be3b1387f00b28a72c9d1f83a344abd7582a\nauthor TheCharlatan <seb.kung@gmail.com> 1731861408 +0100\ncommitter TheCharlatan <seb.kung@gmail.com> 1732278755 +0100\n\nkernel: Add chainstate manager option for setting worker threads\n\nRe-use the same pattern used for the context options. This allows users\nto set the number of threads used in the validation thread pool.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE8s/Eq9C5nYN+67fQm3m0VpHbQXMFAmdAeeQACgkQm3m0VpHb\nQXODBA/+Mb4bPw6OP0D7kh1OLGzs+58VpepesB5chdvgoG2d6z85eebcGMNC0wAU\nCWs530LPozximZRwSfDJBvMOabk8i8rTsZbSlp/IIHfpoJb1ZVmuzUZw00td5rMy\nQ3jrHhgR6J8MEwex3leVsrOP4WvnQFjWmJ/4gMFw8nBKv/iGvfMpwbmvbUD9ONRc\neCuPNyeHrqKKMS1JDPcYtNxrQlr5Z1kseK/noHwXgmHigmLoOuAPCV/1StYdURQ5\nrtm7gHJHBXmQ8nP6cWAe2WOG2fekXlMKi7XQfvPaylcsdoEkE3M1ycTshNGeuWLp\njHhPHZ112QPiZ0yU+3LymUDQxPVMWD8Ej0TLuv66CLaSINivXjXvJYMi1Cu1V4FF\n18nJdn7NWV9mR3px/2X2hwRzUCnLxLynuxuZZipVkU0hWcbTec5rE8CZ1Ollj8AP\nhc50g/HZAghSL6OqWj2r/B+KqvXbYUIq136fvwlN7Pxo6kZNlXVWyT8KgoVP3GoQ\nlUflQR9sPCWvyXE8B5ZAgI49YinOM5CmEb5wQJGz4Og5ANQQinXvgjCPuaBoG0mW\n3NsGSNPwHUAjwHDOF6nqnFhthqekqq7fscrD0jKTCOqiyNNDBR0zFlHhJOOLKCtS\neK37P1HqmMnkNELkre3rxaRkIfI+hRZV2lC7A6CmLhNNiU3zELo=\n=e5Ha\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3610be3b1387f00b28a72c9d1f83a344abd7582a",
          "sha": "3610be3b1387f00b28a72c9d1f83a344abd7582a",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/3610be3b1387f00b28a72c9d1f83a344abd7582a"
        }
      ],
      "message": "kernel: Add chainstate manager option for setting worker threads\n\nRe-use the same pattern used for the context options. This allows users\nto set the number of threads used in the validation thread pool.",
      "committer": {
        "name": "TheCharlatan",
        "email": "seb.kung@gmail.com",
        "date": "2024-11-22T12:32:35Z"
      },
      "author": {
        "name": "TheCharlatan",
        "email": "seb.kung@gmail.com",
        "date": "2024-11-17T16:36:48Z"
      },
      "sha": "c3b34ce08d712b7c171229fa25416f78fc7bee80"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDU2YjhhNjQ5NDdkZThmNjc1MTM5M2RiM2IwZmVmYjk1NzA3ZmIyYjQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/56b8a64947de8f6751393db3b0fefb95707fb2b4",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/56b8a64947de8f6751393db3b0fefb95707fb2b4",
      "tree": {
        "sha": "8363b74fb75e9bafdb59ccdbf069586d3e44ef7a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8363b74fb75e9bafdb59ccdbf069586d3e44ef7a"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 8363b74fb75e9bafdb59ccdbf069586d3e44ef7a\nparent c3b34ce08d712b7c171229fa25416f78fc7bee80\nauthor TheCharlatan <seb.kung@gmail.com> 1716982085 +0200\ncommitter TheCharlatan <seb.kung@gmail.com> 1732280078 +0100\n\nKernel: Add chainstate loading to kernel C header\n\nThe `kernel_chainstate_manager_load_chainstate(...)` function is the\nfinal step required to prepare the chainstate manager for future tasks.\nIts main responsibility is loading the coins and block tree indexes.\n\nThough its `context` argument is not strictly required this was added to\nensure that the context remains in memory for this operation. This\npattern of a \"dummy\" context will be re-used for functions introduced in\nlater commits.\n\nThe chainstate load options will be populated over the next few commits.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE8s/Eq9C5nYN+67fQm3m0VpHbQXMFAmdAfw8ACgkQm3m0VpHb\nQXNkeg/+KmJjDuNaRACyIuU5mRXzzZFj6DfH865teOk8aogSTe3TbjUNdzcsLEWo\nDPGq8BYr2XJtklN9OO3ZCeaBcFIPa8xuzHK97o6POGoxgsCWYblRH+TK1e/sslNT\nc4PY1qKLfrXge145RmBiPRUUBRGLcpcLjcvJzfujmiQYGYn84jKTQVC0+cBboMCA\n4mKXLc+kmvbBChKikUsQaXNppFJ6BhYNyt/t01q2dzeTUpGatQRwMpC2XxfvT0EJ\n/3ameGZQ/pI1c+mLs92KfhkPdURCsbbdk2pVrdBQehyzGLcApo4yo3VYNnOHL5UL\n+yRE5s3nMs9uhg3r6n3OXzM6gBGOy1WaxLHQaWb5ZEfvoxxGDGSLqa71rMSrHYZW\nh6uxlJLObDd8g0JjcIn+Va1xYpuOFp7W7Oj5yE3aWhzqMu4j7lf923l9/VPVZV4n\nTjBgiF96JdtU/K2ph3t0WLuXZV99IsqMulyvY51S+nLFMbU4HA2CYCzz+wxkeIcu\nZSd7e1A/V/ywThi8VTOIaVTApQ8KvgwW5wX6dXbjznjrT8Cdb+g7q9rMonh6T//h\nPaoIuuQhMNQmHvRKxdVipp2AcNKlNDUqhuQ9xUumR079SHgkmohrHSZxJ2gwnJYP\n8KR0IlHzYtgMw6XP1pdoarP9jOoL8V9eUp+L0PBcQ/SzfG2tAt0=\n=1jXI\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c3b34ce08d712b7c171229fa25416f78fc7bee80",
          "sha": "c3b34ce08d712b7c171229fa25416f78fc7bee80",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/c3b34ce08d712b7c171229fa25416f78fc7bee80"
        }
      ],
      "message": "Kernel: Add chainstate loading to kernel C header\n\nThe `kernel_chainstate_manager_load_chainstate(...)` function is the\nfinal step required to prepare the chainstate manager for future tasks.\nIts main responsibility is loading the coins and block tree indexes.\n\nThough its `context` argument is not strictly required this was added to\nensure that the context remains in memory for this operation. This\npattern of a \"dummy\" context will be re-used for functions introduced in\nlater commits.\n\nThe chainstate load options will be populated over the next few commits.",
      "committer": {
        "name": "TheCharlatan",
        "email": "seb.kung@gmail.com",
        "date": "2024-11-22T12:54:38Z"
      },
      "author": {
        "name": "TheCharlatan",
        "email": "seb.kung@gmail.com",
        "date": "2024-05-29T11:28:05Z"
      },
      "sha": "56b8a64947de8f6751393db3b0fefb95707fb2b4"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGZlODJiMTVjZTAyZDYyMzFkMzE4NmRjNzI3ZTUxMDQzZDdhMWNhMTU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fe82b15ce02d6231d3186dc727e51043d7a1ca15",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/fe82b15ce02d6231d3186dc727e51043d7a1ca15",
      "tree": {
        "sha": "50e51846bf30b8ece59ed0835fd28bfb95ac0ec2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/50e51846bf30b8ece59ed0835fd28bfb95ac0ec2"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 50e51846bf30b8ece59ed0835fd28bfb95ac0ec2\nparent 56b8a64947de8f6751393db3b0fefb95707fb2b4\nauthor TheCharlatan <seb.kung@gmail.com> 1718657423 +0200\ncommitter TheCharlatan <seb.kung@gmail.com> 1732280103 +0100\n\nkernel: Add block validation to C header\n\nThe added function allows the user process and validate a given block\nwith the chainstate manager. The *_process_block(...) function does some\npreliminary checks on the block before passing it to\n`ProcessNewBlock(...)`. These are similar to the checks in the\n`submitblock()` rpc.\n\nRicher processing of the block validation result will be made available\nin the following commits through the validation interface.\n\nThe commits also adds a utility for serializing a `CBlock`\n(`kernel_block_create()`) that may then be passed to the library for\nprocessing.\n\nThe tests exercise the function for both mainnet and regtest. The\ncommit also adds the data of 206 regtest blocks (some blocks also\ncontain transactions).\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE8s/Eq9C5nYN+67fQm3m0VpHbQXMFAmdAfycACgkQm3m0VpHb\nQXOdzQ//cFszX7hPsic962o5LP6FSQwq3KjbpKXPs6TfaU8HEOCgaTp5ybp6/pL0\nAN8UtaAgJgeXA5pyIIC6+e/0qw/FEkZ7IKBjJNd+wOWQUefw8MFJ+SCmkr4Ch+p0\nbzmm2YZ0YoZ9ErVvBfhL46oqbKluNtIhT1NP0tfDP2ggwQNATHQRKV3gMNw0NAjT\nMKVCnE6lXr9j+rwMDNpfMfQR74Ef/67kOtA3bkylaBngaxNHSTmD8dBpRIYgrSWr\nn5wYbH29x0AOFZr+7ASBADn+mmP2NmPhWLEMSF1Nehvv8rcx0V9W3w9a4/zuMB9S\n/pjlb42kAf0OU+WqAhSKBkSborXpeIDpvSyyj6TPBuCmhGjqwJ+iQ1f+7kPTDJxP\nchz6wryYfAXYNSAUPFf/24nHQF5bhwYR2bbJbQ6ngXSCbvMs9UgxqZHAACPKK/mb\nqbOrP2S+Vr0JKxxh6ypoMIMqaIIuQq812kBhvMaEdvf7j+nrzyTmFHCCiP6PT+IR\n1LghdIEN19SyC2c4z3mRvX2e6ANle7w83RfUVq8VwmFeVR7NRhAD6oUyDdXedMND\nBuFAjfJzZa9acZ+0RFmyKVJZsm1szLci22qUWyhmcVi8UdxeQOzdD+1WGydQr7jE\nHzcT6XW2CLVKw3pZrPULtyzncsoIld77WE4tAa40Bqf9xM5c798=\n=eGtM\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/56b8a64947de8f6751393db3b0fefb95707fb2b4",
          "sha": "56b8a64947de8f6751393db3b0fefb95707fb2b4",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/56b8a64947de8f6751393db3b0fefb95707fb2b4"
        }
      ],
      "message": "kernel: Add block validation to C header\n\nThe added function allows the user process and validate a given block\nwith the chainstate manager. The *_process_block(...) function does some\npreliminary checks on the block before passing it to\n`ProcessNewBlock(...)`. These are similar to the checks in the\n`submitblock()` rpc.\n\nRicher processing of the block validation result will be made available\nin the following commits through the validation interface.\n\nThe commits also adds a utility for serializing a `CBlock`\n(`kernel_block_create()`) that may then be passed to the library for\nprocessing.\n\nThe tests exercise the function for both mainnet and regtest. The\ncommit also adds the data of 206 regtest blocks (some blocks also\ncontain transactions).",
      "committer": {
        "name": "TheCharlatan",
        "email": "seb.kung@gmail.com",
        "date": "2024-11-22T12:55:03Z"
      },
      "author": {
        "name": "TheCharlatan",
        "email": "seb.kung@gmail.com",
        "date": "2024-06-17T20:50:23Z"
      },
      "sha": "fe82b15ce02d6231d3186dc727e51043d7a1ca15"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDcyYzU3NDQ2OTEwZWMyMGQ2OTYyMjA1YWM0YTNiZWQ4MTJhYWJlMTI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/72c57446910ec20d6962205ac4a3bed812aabe12",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/72c57446910ec20d6962205ac4a3bed812aabe12",
      "tree": {
        "sha": "e110756196971da623a4ca2cf38e7f898184519e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e110756196971da623a4ca2cf38e7f898184519e"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree e110756196971da623a4ca2cf38e7f898184519e\nparent fe82b15ce02d6231d3186dc727e51043d7a1ca15\nauthor TheCharlatan <seb.kung@gmail.com> 1718657447 +0200\ncommitter TheCharlatan <seb.kung@gmail.com> 1732280891 +0100\n\nkernel: Add options for reindexing in C header\n\nAdds options for wiping the chainstate and block tree indexes to the\nchainstate load options. In combination and once the\n`*_import_blocks(...)` function is added in a later commit, this\ntriggers a reindex. For now, it just wipes the existing data.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE8s/Eq9C5nYN+67fQm3m0VpHbQXMFAmdAgjsACgkQm3m0VpHb\nQXP/DQ/8D5Iq6vvusR2dEzBTB9+iRJOEUz3kOswA3ib0BTZLh9Y/MiOOCU7BSxqq\nP35z0ByojBDt/17y6+74pHrMo7+xwXJXRZ4qA8gqBShpwcHtIW3TTnTDD82Y8hKC\njUptc+dQiPGXgtoT4bJPorzhfBJ0+T8V7F8D/GgZ6UGwruZXWikh1UBZurJVDwzb\n+ZzHHSsJpBp71yZ4ZfcEya/cU5A81qz9kC5mNEua/f6heTWpeoRlk2+RgUfBgFPp\nieAz4Z3qPlJd2zcv8EAQYRZzmlvrnLCpt2yIiXDYJ+7Pp9EOWyVFaO/YSgTCcvn/\n6MaeXNLj9HWaxzY9WsWI796IbmJduQIBOu1QwzLuHOX8ga65DGKu673VnBpnAGG+\nxAW8W8ROrap7ouJxebusuYjL5tzhPXbTBP6d48zzXPcms+zJ0Jd7JLiScCQbE7gM\n/yczm1CO22gMKI8xgADn07iap+KR/7p51Poc6pZ+hANGjU86NCqnBxEAcFRegVie\nt2+tGUNJIjJWbROdMDoeCDovza86CM3ErysISu9DU3vkK6XHqWMh71llnfFpDdj+\nSlN3SA7e6Fq+suwH+nJwQq04dMyXNvj2O5dxBV+j61J7fSauyJnBki+RPxreWWJa\nehAJUiuUFqch4Cy63wvIBGXfEN2NcW2s7knGT0fR1IqhqGcai44=\n=8SCc\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fe82b15ce02d6231d3186dc727e51043d7a1ca15",
          "sha": "fe82b15ce02d6231d3186dc727e51043d7a1ca15",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/fe82b15ce02d6231d3186dc727e51043d7a1ca15"
        }
      ],
      "message": "kernel: Add options for reindexing in C header\n\nAdds options for wiping the chainstate and block tree indexes to the\nchainstate load options. In combination and once the\n`*_import_blocks(...)` function is added in a later commit, this\ntriggers a reindex. For now, it just wipes the existing data.",
      "committer": {
        "name": "TheCharlatan",
        "email": "seb.kung@gmail.com",
        "date": "2024-11-22T13:08:11Z"
      },
      "author": {
        "name": "TheCharlatan",
        "email": "seb.kung@gmail.com",
        "date": "2024-06-17T20:50:47Z"
      },
      "sha": "72c57446910ec20d6962205ac4a3bed812aabe12"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGE2MTc1NjAyY2Y1NWZmOTFkZjNhNzAwZDVjMWE0OTE3NjA3MTkwZWE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a6175602cf55ff91df3a700d5c1a4917607190ea",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/a6175602cf55ff91df3a700d5c1a4917607190ea",
      "tree": {
        "sha": "d2e50292ba69d3519be8b26fb2fdfc491c5b4e6e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d2e50292ba69d3519be8b26fb2fdfc491c5b4e6e"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree d2e50292ba69d3519be8b26fb2fdfc491c5b4e6e\nparent 72c57446910ec20d6962205ac4a3bed812aabe12\nauthor TheCharlatan <seb.kung@gmail.com> 1719083290 +0200\ncommitter TheCharlatan <seb.kung@gmail.com> 1732280926 +0100\n\nkernel: Add chainstate load options for in-memory dbs in C header\n\nThis allows a user to run the kernel without creating on-disk files for\nthe block tree and chainstate indexes. This is potentially useful in\nscenarios where the user needs to do some ephemeral validation\noperations.\n\nOne specific use case is when linearizing the blocks on disk. The block\nfiles store blocks out of order, so a program may utilize the library\nand its header to read the blocks with one chainstate manager, and then\nwrite them back in order, and without orphans, with another chainstate\nmaanger. To save disk resources and if the indexes are not required once\ndone, it may be beneficial to keep the indexes in memory for the\nchainstate manager that writes the blocks back again.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE8s/Eq9C5nYN+67fQm3m0VpHbQXMFAmdAgl4ACgkQm3m0VpHb\nQXP2og/+LaJmuSZn5f+FMh3abikCsT+neZNo9zy+eWqUPcABLgONOs6fJjoe1GDk\nR3tMBOPPeUs15pE3NETZpOsZ99+m07RcQdmHM7xoaImYVCghXWahfOzWCTL+8oCP\nuv14UcfeH7gsq0dIaCWTGGadjR1cZQcfpmSGvwXfeQCVjQ18T3LoDGWI7lKRiZY1\nJk2a+bDHNl1B9Uh4Qhdo/rK0vti0PBhXVblePyfjRZTfu+Daip/wSZkzXWsYAFfW\neBK3QOk3KWp01SzcXDqa8oq+e/vNYL9o4ALUa9FSCgikhb6lms1PH5Kn3vNKwiTM\nM9glTwsbv/GNuTGMbasVVqpQRIu2GpGJu3UnnfNQhlfamVvTvw/4k9xnmcrO4cTd\n4kFSBqPHSJQZ1UNaS/Qv/ZSjs4GB+tRJHEJV/th1OtY2afr3krVV/BNLvOU7TfmS\n58mpHLfKk1yCUcMOd1BGLfc+1ubtn12qlwaqK6hXyn4e/3ZcVy7fn3OqC0PXTTSf\n56jYyMuiH1LpTh+lH0m1SEscEdUTHcaiPAXpdQXGeiSRPBR+t1N7VzPpu0RbB+C2\nrwtiS9snr+DKIcQx6WKnZvQry2cZ3G1spGs1cUFkaEJBnYLMGUMe+l7HtSODWeGD\nMMdeYFb4lTVtCHJ6qmCyQWrizycmWwEw4joL8IOHinF5yrRcbKs=\n=Y7MR\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/72c57446910ec20d6962205ac4a3bed812aabe12",
          "sha": "72c57446910ec20d6962205ac4a3bed812aabe12",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/72c57446910ec20d6962205ac4a3bed812aabe12"
        }
      ],
      "message": "kernel: Add chainstate load options for in-memory dbs in C header\n\nThis allows a user to run the kernel without creating on-disk files for\nthe block tree and chainstate indexes. This is potentially useful in\nscenarios where the user needs to do some ephemeral validation\noperations.\n\nOne specific use case is when linearizing the blocks on disk. The block\nfiles store blocks out of order, so a program may utilize the library\nand its header to read the blocks with one chainstate manager, and then\nwrite them back in order, and without orphans, with another chainstate\nmaanger. To save disk resources and if the indexes are not required once\ndone, it may be beneficial to keep the indexes in memory for the\nchainstate manager that writes the blocks back again.",
      "committer": {
        "name": "TheCharlatan",
        "email": "seb.kung@gmail.com",
        "date": "2024-11-22T13:08:46Z"
      },
      "author": {
        "name": "TheCharlatan",
        "email": "seb.kung@gmail.com",
        "date": "2024-06-22T19:08:10Z"
      },
      "sha": "a6175602cf55ff91df3a700d5c1a4917607190ea"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGZkZjc3MmEyOTE4NmU3YTgxMWY5NWZhMDI3MjU3NzRkYWQxOGU2OTc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fdf772a29186e7a811f95fa02725774dad18e697",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/fdf772a29186e7a811f95fa02725774dad18e697",
      "tree": {
        "sha": "8a9f60f5d4f00ac6dbea6c1f5dd396cdca294791",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8a9f60f5d4f00ac6dbea6c1f5dd396cdca294791"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 8a9f60f5d4f00ac6dbea6c1f5dd396cdca294791\nparent a6175602cf55ff91df3a700d5c1a4917607190ea\nauthor TheCharlatan <seb.kung@gmail.com> 1717060948 +0200\ncommitter TheCharlatan <seb.kung@gmail.com> 1732280949 +0100\n\nkernel: Add import blocks function to C header\n\nThe `kernel_import_blocks` function is used to both trigger a reindex,\nif the indexes were previously wiped through the chainstate load\noptions, or import the block data of a single block file.\n\nThe behaviour of the import can be verified through the test logs.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE8s/Eq9C5nYN+67fQm3m0VpHbQXMFAmdAgnUACgkQm3m0VpHb\nQXPKPw//b8mTrzsVSL4/3n1Lv7iQVVNx+MC5DdpbGp5G03BfLyO2LJ1ynIXBxx0V\neV5vhuuDkC2wTl0pstH18JWyjMH1XTPRMKcr0w3+hIQTnUrkhVLMhzKsl2oH6ALC\nBBA6BgnvTrHPJ7cF0XBqWlkSFE4JFIYxtRVRqFSxlygwkJSQviebMGGQV7d9lOKk\n63QvN9YxegAOKEv7DKfs/LrW8KFsdeyFhEyvae4w9OELsZPc5Phlcu3rJnw/LgaT\ntfw2S0tKc1Ar2G+EXDyfZX5m2snijniI+iR3PSrlRdEwKnp0bDOUObRSxkzSxeBv\nBRrBIPACT8AXj0t4jUqT/+hCWH7GgnalerKVk9lCXgaaePTckYeyT2Phn9QHUUd9\nruyxyy78GF3SvaBH5WHUpXMMq5U/uIYy4ugVP6qtC+Axwz5kwFt2HvaGAs0XQlPK\n6fEPRGvVpaQQX7Do8MssoeRlUKHCCRgkphgCazDEyZ8zR0A1o+MdFS86cFejy2H+\nQRYnymvGBoQqLxNvNDT2psIaYOo6AWtgJhI+ktxrjt+XzsFVkTF5pr1AqKu+OK5s\nSCPZIO1T+qJcxwpLz1ACJgItAcC1JK7SE20DRYKDccRt5uxyPEUQyGdMfQ4f5y7j\nrVGXYjuIXcQJ4+bzbMbXovkzW4MlnScdD+DNF6LJz2YIgix4eDQ=\n=Fl8U\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a6175602cf55ff91df3a700d5c1a4917607190ea",
          "sha": "a6175602cf55ff91df3a700d5c1a4917607190ea",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/a6175602cf55ff91df3a700d5c1a4917607190ea"
        }
      ],
      "message": "kernel: Add import blocks function to C header\n\nThe `kernel_import_blocks` function is used to both trigger a reindex,\nif the indexes were previously wiped through the chainstate load\noptions, or import the block data of a single block file.\n\nThe behaviour of the import can be verified through the test logs.",
      "committer": {
        "name": "TheCharlatan",
        "email": "seb.kung@gmail.com",
        "date": "2024-11-22T13:09:09Z"
      },
      "author": {
        "name": "TheCharlatan",
        "email": "seb.kung@gmail.com",
        "date": "2024-05-30T09:22:28Z"
      },
      "sha": "fdf772a29186e7a811f95fa02725774dad18e697"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGFiZmIwNTQ5ZmRkMzJjMTJlM2IzMjVmODVhYTQyZjhlZTY3N2JlY2Y",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/abfb0549fdd32c12e3b325f85aa42f8ee677becf",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/abfb0549fdd32c12e3b325f85aa42f8ee677becf",
      "tree": {
        "sha": "49d7b4913d7b872823adedb95b2d6c27b25531e9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/49d7b4913d7b872823adedb95b2d6c27b25531e9"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 49d7b4913d7b872823adedb95b2d6c27b25531e9\nparent fdf772a29186e7a811f95fa02725774dad18e697\nauthor TheCharlatan <seb.kung@gmail.com> 1717575640 +0200\ncommitter TheCharlatan <seb.kung@gmail.com> 1732280977 +0100\n\nkernel: Add interrupt function to C header\n\nCalling interrupt can halt long-running functions associated with\nobjects that were created through the passed-in context.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE8s/Eq9C5nYN+67fQm3m0VpHbQXMFAmdAgpEACgkQm3m0VpHb\nQXP8iQ//bbAluD0oCe8zi/CQAMSC2saGZxlhLibMKT/WcqbihCklkYH0wAR1AvKN\n8DghHCVczXKAemhPn2pqhqqGzmkeAJV6y3u27mAMblBGK1GMlEWIZaNv2JrTJSlX\nHJzBYQV7G18DO/alOwRmTXRjCCsi94WrEzN7go1NCwUZobvlCMamiklsp7CW3ija\nKxEtPjDVPm7Ydce5W+MJReR6xoVUdjhB8Mv9/s9M/xCUAj6lXPqxy9gpckNSTJM9\nmo4MFto6VUQ+KwzfGJS3lTIoUq5/7n7xYaIPpMAO31M/wOrEmFueddNAepuYIJee\nVxap8hLp9xihh2lRCMHWbwCjrXwYh8WbTvVigA6ckndHkyvXpIKCTHiKvm0Gqwk0\nXEMesm4gt3CmJaGkMYHROqifi4P01FtduAuJIpV8yeHQGrPT/6WUNPMGj8SbXq4C\nWJY+pSAucyWYYEBUcH0fc082RORzabQhS/2eCIVU3CCp1MCXhm5+AmJ4t6skG8vV\nM/iB1eC/4pQXjrS6mHfw6lusLcx8iChuNcJ+lN0ad8wUhL4Ge2P9cskfujjrhCy9\nQuGm80yn9TlwnF9f70p1jch/ODrfzje1+XQalbAMtfzt0IylDVYWJhCadv1d+Hwq\nhBHczQmJm6U6RhKXBvUQaxhR7wn62SNAD6+d2p6d1MtuBmh+GxY=\n=YFnr\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fdf772a29186e7a811f95fa02725774dad18e697",
          "sha": "fdf772a29186e7a811f95fa02725774dad18e697",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/fdf772a29186e7a811f95fa02725774dad18e697"
        }
      ],
      "message": "kernel: Add interrupt function to C header\n\nCalling interrupt can halt long-running functions associated with\nobjects that were created through the passed-in context.",
      "committer": {
        "name": "TheCharlatan",
        "email": "seb.kung@gmail.com",
        "date": "2024-11-22T13:09:37Z"
      },
      "author": {
        "name": "TheCharlatan",
        "email": "seb.kung@gmail.com",
        "date": "2024-06-05T08:20:40Z"
      },
      "sha": "abfb0549fdd32c12e3b325f85aa42f8ee677becf"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDhhMzM4MTg1ZmE5NGEyNmJhYjczODA5MjQxYTdlZDQzNDRjMTlkOTc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8a338185fa94a26bab73809241a7ed4344c19d97",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/8a338185fa94a26bab73809241a7ed4344c19d97",
      "tree": {
        "sha": "a570f9670a40d7c7b1ebbe4c80b04205b2ac3a61",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a570f9670a40d7c7b1ebbe4c80b04205b2ac3a61"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree a570f9670a40d7c7b1ebbe4c80b04205b2ac3a61\nparent abfb0549fdd32c12e3b325f85aa42f8ee677becf\nauthor TheCharlatan <seb.kung@gmail.com> 1717102788 +0200\ncommitter TheCharlatan <seb.kung@gmail.com> 1732281001 +0100\n\nkernel: Add validation interface to C header\n\nThis adds the infrastructure required to process validation events. For\nnow the external validation interface only has support for the\n`BlockChecked` callback, but support for the other internal validation\ninterface methods can be added in the future.\n\nThe validation interface follows an architecture for defining its\ncallbacks and ownership that is similar to the notifications.\n\nThe task runner is created internally with a context, which itself\ninternally creates a unique ValidationSignals object. When the user\ncreates a new chainstate manager the validation signals are internally\npassed to the chainstate manager through the context.\n\nThe callbacks block any further validation execution when they are\ncalled. It is up to the user to either multiplex them, or use them\notherwise in a multithreaded mechanism to make processing the validation\nevents non-blocking.\n\nA validation interface can register for validation events with a\ncontext. Internally the passed in validation interface is registerd with\nthe validation signals of a context.\n\nThe BlockChecked callback introduces a seperate type for a non-owned\nblock. Since a library-internal object owns this data, the user needs to\nbe explicitly prevented from deleting it. In a later commit a utility\nwill be added to copy its data.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE8s/Eq9C5nYN+67fQm3m0VpHbQXMFAmdAgqkACgkQm3m0VpHb\nQXPqGRAAlmdHFz1iqiozWeRf9Y4gc4UkIudQjSLhWOIfo9ZmBydujsR+McawpcX9\nhdQwVgCxX5LJL7kuqx8zhvHIpEgqCAXL9rNKdS3OkJ5dP7/kqq9jSv+appyPby00\n/D7eyjgtjs8GSbnUG5kyymLnkuvyz0GQUtiBRRhqy3S1VfUvDTVyl9Sr62g1eNiJ\nnsjAJO5O4BbI+IPVIldAzIFxjohwd8stm2pDwj7pTnT7FLJGgav8Mw3eGV4egIE2\nwMmwr5cdMeJCH76+6kp9sD4mqOOmmgAI0ZnmoznDmTB2ew8A2DstPpWY2AYXlJvi\nGGJE/6E6yWRN70+cjKIbaawM2mLLXRH4zgc3DD2CoL9bHBZft7RpmJ/zhCktWise\nNp1rlQEs8MF6WHtKpbmmXKuLhp3VY1JMSzGCEYnp1bWYjwUB31g5Ld9nN3Z8UYz/\nKOzy9/3izGE6Q7PCk8nsDzDLQT7ACDpR6VaKKvFGYlQGRqQoAh+3GHGppgGUUuAv\nl0ZGhVxhqVSOBexnh2Mmp5bZDdQ1tFt1GZIFjZc5eCmBd7I2nIUuJblZig7nYYjH\nXM/1Shl8urUuAs7/qUlR7rbjKEls8jID9n6LjavXw2dlOvh+3F0fh/QQ6q5/0qCN\nakzDyPISWJ/+3YUku259UXvCGqBxH0bpOuy0M0a/vRqTfm9HCoA=\n=qmAn\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/abfb0549fdd32c12e3b325f85aa42f8ee677becf",
          "sha": "abfb0549fdd32c12e3b325f85aa42f8ee677becf",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/abfb0549fdd32c12e3b325f85aa42f8ee677becf"
        }
      ],
      "message": "kernel: Add validation interface to C header\n\nThis adds the infrastructure required to process validation events. For\nnow the external validation interface only has support for the\n`BlockChecked` callback, but support for the other internal validation\ninterface methods can be added in the future.\n\nThe validation interface follows an architecture for defining its\ncallbacks and ownership that is similar to the notifications.\n\nThe task runner is created internally with a context, which itself\ninternally creates a unique ValidationSignals object. When the user\ncreates a new chainstate manager the validation signals are internally\npassed to the chainstate manager through the context.\n\nThe callbacks block any further validation execution when they are\ncalled. It is up to the user to either multiplex them, or use them\notherwise in a multithreaded mechanism to make processing the validation\nevents non-blocking.\n\nA validation interface can register for validation events with a\ncontext. Internally the passed in validation interface is registerd with\nthe validation signals of a context.\n\nThe BlockChecked callback introduces a seperate type for a non-owned\nblock. Since a library-internal object owns this data, the user needs to\nbe explicitly prevented from deleting it. In a later commit a utility\nwill be added to copy its data.",
      "committer": {
        "name": "TheCharlatan",
        "email": "seb.kung@gmail.com",
        "date": "2024-11-22T13:10:01Z"
      },
      "author": {
        "name": "TheCharlatan",
        "email": "seb.kung@gmail.com",
        "date": "2024-05-30T20:59:48Z"
      },
      "sha": "8a338185fa94a26bab73809241a7ed4344c19d97"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDE4ZDQ0ZWI4MjNkYTZkODdmNjhkYjM3MWQ1NTAzNzYyNWQyYWE5MmY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/18d44eb823da6d87f68db371d55037625d2aa92f",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/18d44eb823da6d87f68db371d55037625d2aa92f",
      "tree": {
        "sha": "f0bdbca2c14fae7e7663d1f0e9292be8a6f94851",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f0bdbca2c14fae7e7663d1f0e9292be8a6f94851"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree f0bdbca2c14fae7e7663d1f0e9292be8a6f94851\nparent 8a338185fa94a26bab73809241a7ed4344c19d97\nauthor TheCharlatan <seb.kung@gmail.com> 1717155240 +0200\ncommitter TheCharlatan <seb.kung@gmail.com> 1732281056 +0100\n\nkernel: Add functions for the block validation state to C header\n\nThese allow for the interpretation of the data in a `BlockChecked`\nvalidation interface callback. This is useful to get richer information\nin case a block failed to validate.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE8s/Eq9C5nYN+67fQm3m0VpHbQXMFAmdAguAACgkQm3m0VpHb\nQXPwRQ/7BdQ0mLwlZGqZeH3GH9Yo5Ecxy11pM8ngIhUShqjywp6OcpbP/ToGSMd1\ntwHRX4o0vogkuRK9pT/OECXyVoTOlKDa1MJU/ApZdoergrk8q5ZtqDZBC1zvVc4J\niKy0HkIGcZfr4KbSO33phuHY+495A+4cD3AuMWnSYVmwyLfHVefyI0Ph19sV8IMS\nQsjPgvuLkOZjRTAQfJ2xWIMsOBoEDlzlRpsQw3Ha1GB5wNtnUv+7fk7kP46dGuxX\n9mo0nhJP1jnvhAkhnRbvektZJVk5LfywvXWpdAYMOmCYCdi8mqmMAPQ/TmzX+XQy\njqOV9qSiFSkFUKfnTzicFj507IXAwYypeM7kOogr2aK8ex0fHzJPa3MXZy0ZAxKd\nQ8XbHytkUh7khwh/HT+LfoGBZRnIyY09ViZx1T+H64BcQem7VZYk9My7YGwZAkgp\n4zN0O7LoHGF1O92xq7UzFV0KDN6wNYe/Dg/U8kgKmwEWjZaCD/H0AEwbTftLc34j\nxPPnix1nyOw/TSr8sUJkWI5wnOBrR3QA/jhuGdAyg8icb96iEmuuo8AYmSCgjcd0\nDW4USI8pGn0SV1yHCaFdtoa8EQowvbOrbn/6pPPU/T4vskFV/WbPOZoYxd6PeHTG\nI/qNN1D4QqhVVCVwCkgDDyWWLm0l57ZrPX/TmqQufPpL0pdUyfc=\n=IOBc\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8a338185fa94a26bab73809241a7ed4344c19d97",
          "sha": "8a338185fa94a26bab73809241a7ed4344c19d97",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/8a338185fa94a26bab73809241a7ed4344c19d97"
        }
      ],
      "message": "kernel: Add functions for the block validation state to C header\n\nThese allow for the interpretation of the data in a `BlockChecked`\nvalidation interface callback. This is useful to get richer information\nin case a block failed to validate.",
      "committer": {
        "name": "TheCharlatan",
        "email": "seb.kung@gmail.com",
        "date": "2024-11-22T13:10:56Z"
      },
      "author": {
        "name": "TheCharlatan",
        "email": "seb.kung@gmail.com",
        "date": "2024-05-31T11:34:00Z"
      },
      "sha": "18d44eb823da6d87f68db371d55037625d2aa92f"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDJhMzFmZjg3Yzg1ODAxMTZiN2JhMTg5MTBhYzY4YzBjZjBhMDYzYTQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2a31ff87c8580116b7ba18910ac68c0cf0a063a4",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/2a31ff87c8580116b7ba18910ac68c0cf0a063a4",
      "tree": {
        "sha": "fb9b61a11a0a0f5aa2ddf2156efe1c4369019d7a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fb9b61a11a0a0f5aa2ddf2156efe1c4369019d7a"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree fb9b61a11a0a0f5aa2ddf2156efe1c4369019d7a\nparent 18d44eb823da6d87f68db371d55037625d2aa92f\nauthor TheCharlatan <seb.kung@gmail.com> 1717235572 +0200\ncommitter TheCharlatan <seb.kung@gmail.com> 1732281118 +0100\n\nkernel: Add function for copying  block data to C header\n\nThis adds functions for copying serialized block data into a user-owned\nvariable-sized byte array.\n\nUse it in the tests for verifying the implementation of the validation\ninterface's `BlockChecked` method.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE8s/Eq9C5nYN+67fQm3m0VpHbQXMFAmdAgx4ACgkQm3m0VpHb\nQXOugA//Tca1f9ADUbdqX+VqmEFGNPqHibgNWExaWlP5/MnDA8pheRzxz96CwCaG\nhIwLg8M48t+TC7LEJ6li8OVmsyvzvEhYPMh3xsmSR5jJ2uQIjdvEks/uFn/pqDq8\nIpCQuvE0LN2VMFfA37C03eC0aUwIuBpht16nnJUQtU8V5XDoaKBQawFc4hUvKHfi\nqOzk8cI41FWetbdeflAgp5c8NSb9H1L3jG173O3lgmgT2ac2mr9xvXO3sdRMTEYQ\n5sAq1H3NzdAvPZjqZtzyDVjIa6V66Cwh2Af7Q4l/AYCH24yMd7w/KbJzIaPBgQKR\n2MEazEABodhAlZEoG81ayBeZKMJ7uDYICm9BLDGWvyVlqZ3t3nFCjI9nAFhRbTfy\n1zqnR0+L5R6dMHi2Aozdgy0UtUhjoqpLD/C77ms0o3riSKeq2y2UEZsBkDcWciTp\n4SeWeZRGoX2vbRobiCYsIGYCyB9ZW20V11NlrU48v66xQFwTaDJ+uFqFn4wiOIyJ\ntxruAQkEYtosIiq5ThZDprrQSWa5y3gGGI2eFsOuKRP+Pi1QZlrWdmNqegq3qiOu\nH+EwXIb+T8vsLnqVspSMLImF2vHb66R+aGZcUefE6a5E7En/pOazpODnaWSNFVxT\n77r0oA/Q/jOFIvDAvIaOQ+PnRwgeyfNN8eIJlcs5vn87PPZaUbg=\n=8bjV\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/18d44eb823da6d87f68db371d55037625d2aa92f",
          "sha": "18d44eb823da6d87f68db371d55037625d2aa92f",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/18d44eb823da6d87f68db371d55037625d2aa92f"
        }
      ],
      "message": "kernel: Add function for copying  block data to C header\n\nThis adds functions for copying serialized block data into a user-owned\nvariable-sized byte array.\n\nUse it in the tests for verifying the implementation of the validation\ninterface's `BlockChecked` method.",
      "committer": {
        "name": "TheCharlatan",
        "email": "seb.kung@gmail.com",
        "date": "2024-11-22T13:11:58Z"
      },
      "author": {
        "name": "TheCharlatan",
        "email": "seb.kung@gmail.com",
        "date": "2024-06-01T09:52:52Z"
      },
      "sha": "2a31ff87c8580116b7ba18910ac68c0cf0a063a4"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDI3YWUwNWVlNjE0ZGFjNmJiOGM2OTQ4MTNkODgxOTdkNmVjMjE1Y2Q",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/27ae05ee614dac6bb8c694813d88197d6ec215cd",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/27ae05ee614dac6bb8c694813d88197d6ec215cd",
      "tree": {
        "sha": "7a4f0580bb84a7637947eea2c0ea47d4f5b9188b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7a4f0580bb84a7637947eea2c0ea47d4f5b9188b"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 7a4f0580bb84a7637947eea2c0ea47d4f5b9188b\nparent 2a31ff87c8580116b7ba18910ac68c0cf0a063a4\nauthor TheCharlatan <seb.kung@gmail.com> 1717239811 +0200\ncommitter TheCharlatan <seb.kung@gmail.com> 1732281484 +0100\n\nkernel: Add functions to read block from disk to C header\n\nThis adds functions for reading a block from disk with a retrieved block\nindex entry. External services that wish to build their own index, or\nanalyze blocks can use this to retrieve block data.\n\nThe block index can now be traversed from the tip backwards. This is\nguaranteed to work, since the chainstate maintains an internal block\ntree index in memory and every block (besides the genesis) has an\nancestor.\n\nThe user can use this function to iterate through all blocks in the\nchain (starting from the tip). Once the block index entry for the\ngenesis block is reached a nullptr is returned if the user attempts to\nget the previous entry.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE8s/Eq9C5nYN+67fQm3m0VpHbQXMFAmdAhI4ACgkQm3m0VpHb\nQXN2AA//XIUsf87jvG0cYsxTpdHZ/F8cbnQE9lcexiRMRAiOQGF+bO4JowLYpffg\neelgTt7mAY/BoR+7c98IqBM2yM4JSaAuywbdl2cCpPh+wlu+YuRD5GPKWv64m5ZW\nyWdF7PLS/7Qh1Z1ZZb2SecwcWAeNuRle0U1nqOZHfM2ommK0mRTV1dn1V+bli2Sf\nw0TKh+yn5aXzE/tDm8UkI1paGtdsHcqRj+U6HajmBl3REndVpJKGMBFXTqXSTO+W\n+3Gq9K9WJoCfhMGusOEMMGKH4Ur+vv1owqJb215kainKPu21qQqYWc5wkLoeVVW8\nNJksflZHfGA0kwTkrQAOkA+lYGrGeey95aU2G4/ccMw1p1QX+5XCLfQ/Ddxz7UGx\nA0MgDYzObA8nxLxs2t8aHFwUlu6ShCGxHD26aauh46qo8NBs4dSGS78QCISwmyoV\nMGkrtKF9ujQmRwgogGSHeM4vt9zPzvu5Oa2uel2RJeM1EjbjNVcNfKABhkGyKx8p\nQT05u2bPPd6KcsUKyqg+S28QgbUlTYd1YZ3w5To3gtEmwcBxOk7PYoig90oeg/io\nwCokohlaJ3BykztBNiZcLr7o5GNu431R9izzFhgwtPCz6EqhRSZimcWj6zShfI1B\nomoUx4gn+GhG+gP3iopjiA3XUCUdHmsEp+scPRExj/Nwocdv38w=\n=/K+1\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2a31ff87c8580116b7ba18910ac68c0cf0a063a4",
          "sha": "2a31ff87c8580116b7ba18910ac68c0cf0a063a4",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/2a31ff87c8580116b7ba18910ac68c0cf0a063a4"
        }
      ],
      "message": "kernel: Add functions to read block from disk to C header\n\nThis adds functions for reading a block from disk with a retrieved block\nindex entry. External services that wish to build their own index, or\nanalyze blocks can use this to retrieve block data.\n\nThe block index can now be traversed from the tip backwards. This is\nguaranteed to work, since the chainstate maintains an internal block\ntree index in memory and every block (besides the genesis) has an\nancestor.\n\nThe user can use this function to iterate through all blocks in the\nchain (starting from the tip). Once the block index entry for the\ngenesis block is reached a nullptr is returned if the user attempts to\nget the previous entry.",
      "committer": {
        "name": "TheCharlatan",
        "email": "seb.kung@gmail.com",
        "date": "2024-11-22T13:18:04Z"
      },
      "author": {
        "name": "TheCharlatan",
        "email": "seb.kung@gmail.com",
        "date": "2024-06-01T11:03:31Z"
      },
      "sha": "27ae05ee614dac6bb8c694813d88197d6ec215cd"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGVkYzk3MGMxNmZjYWU5ZDdjYTAyYWFmN2JmNWM2Zjk3MTE0MmQ5N2Y",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/edc970c16fcae9d7ca02aaf7bf5c6f971142d97f",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/edc970c16fcae9d7ca02aaf7bf5c6f971142d97f",
      "tree": {
        "sha": "fc8a82fd47077fdb5a3d12f29c8d1e3d29b4729b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fc8a82fd47077fdb5a3d12f29c8d1e3d29b4729b"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree fc8a82fd47077fdb5a3d12f29c8d1e3d29b4729b\nparent 27ae05ee614dac6bb8c694813d88197d6ec215cd\nauthor TheCharlatan <seb.kung@gmail.com> 1717246076 +0200\ncommitter TheCharlatan <seb.kung@gmail.com> 1732282083 +0100\n\nkernel: Add function to read block undo data from disk to C header\n\nThis adds functions for reading the undo data from disk with a retrieved\nblock index entry. The undo data of a block contains all the spent\nscript pubkeys of all the transactions in a block.\n\nIn normal operations undo data is used during re-orgs. This data might\nalso be useful for building external indexes, or to scan for silent\npayment transactions.\n\nInternally the block undo data contains a vector of transaction undo\ndata which contains a vector of the spent outputs. For this reason, the\n`kernel_get_block_undo_size(...)` function is added to the header for\nretrieving the size of the transaction undo data vector, as well as the\n`kernel_get_transaction_undo_size(...) function for retrieving the size\nof each spent outputs vector contained within each transaction undo data\nentry. With these two sizes the user can iterate through the undo data\nby accessing the transaction outputs by their indeces with\n`kernel_get_undo_output_by_index`. If an invalid index is passed in, the\n`kernel_ERROR_OUT_OF_BOUNDS` error is returned again.\n\nThe returned `kernel_TransactionOutput` is entirely owned by the user\nand may be destroyed with the `kernel_transaction_output_destroy(...)`\nconvenience function.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE8s/Eq9C5nYN+67fQm3m0VpHbQXMFAmdAhuQACgkQm3m0VpHb\nQXO45Q//e08XR2GScWWlgOBSdw+lpHHELL8/iblqdtfU3bq4GOjjbzi5/LlEs3AV\nG6AHo6iVU38MM+pCUd1bEQfb0oTp7MMqvqiXne6RBmLLwwoK+rNN951wTjb9Uqzs\n770F4/+sdlPjOtuU+8POln80RSTyjVhtaowa9vkn+WourNGImXuZdQKD580JIe/q\nqt6VTcl5w0bK3/tYMc0tGUlKwb804W/N62T9bs2xoSL9AzutCyTolmOb1VIsXa6q\naPfg9PODM3qokXKNANo4Zrq+dAGs7nmFoEWMJiDcNOSBsodoLVdi1/WEAnRaGe/4\nINTni90cRm/3UtUk9AiRp1wmy4UpsQxTXRkZ4ChvsM7mbcEHh8xAP1hun1D1i/0U\neD/IGzefypiPzPBDlyC+H4C4BmqwPDxtwqZGwScbVKcWC9irXu4L7Sx2pXTqdZws\nwK/hiSa6zHgUJm4DT5B3UI1GOJ8yWdSMYvpc0psm1LRQOjh6rAYfkswaugk2g/Bi\nC01E0ui19fsrMt+DOnpfIm3Ic2MH1fRiyKEoLdKnGJjOxVjng1JOwXYTKtU9Q6kl\nXpIq7IT5K+O6xEw5UBPRk+f/jnXBY/LMi6RPazidimqrdiCcMf0QaVb0sKQRvZE/\n5lcU3zYBg27e2AgZ+llVx6l1YGfsXiwptxADZ9jjb8amdrgolPA=\n=BK/c\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/27ae05ee614dac6bb8c694813d88197d6ec215cd",
          "sha": "27ae05ee614dac6bb8c694813d88197d6ec215cd",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/27ae05ee614dac6bb8c694813d88197d6ec215cd"
        }
      ],
      "message": "kernel: Add function to read block undo data from disk to C header\n\nThis adds functions for reading the undo data from disk with a retrieved\nblock index entry. The undo data of a block contains all the spent\nscript pubkeys of all the transactions in a block.\n\nIn normal operations undo data is used during re-orgs. This data might\nalso be useful for building external indexes, or to scan for silent\npayment transactions.\n\nInternally the block undo data contains a vector of transaction undo\ndata which contains a vector of the spent outputs. For this reason, the\n`kernel_get_block_undo_size(...)` function is added to the header for\nretrieving the size of the transaction undo data vector, as well as the\n`kernel_get_transaction_undo_size(...) function for retrieving the size\nof each spent outputs vector contained within each transaction undo data\nentry. With these two sizes the user can iterate through the undo data\nby accessing the transaction outputs by their indeces with\n`kernel_get_undo_output_by_index`. If an invalid index is passed in, the\n`kernel_ERROR_OUT_OF_BOUNDS` error is returned again.\n\nThe returned `kernel_TransactionOutput` is entirely owned by the user\nand may be destroyed with the `kernel_transaction_output_destroy(...)`\nconvenience function.",
      "committer": {
        "name": "TheCharlatan",
        "email": "seb.kung@gmail.com",
        "date": "2024-11-22T13:28:03Z"
      },
      "author": {
        "name": "TheCharlatan",
        "email": "seb.kung@gmail.com",
        "date": "2024-06-01T12:47:56Z"
      },
      "sha": "edc970c16fcae9d7ca02aaf7bf5c6f971142d97f"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDVhZGU1YzJjODc5MTg0OWFlNTc1MmQ2ODJkZTViMWRiNWVmYzFiMWU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5ade5c2c8791849ae5752d682de5b1db5efc1b1e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/5ade5c2c8791849ae5752d682de5b1db5efc1b1e",
      "tree": {
        "sha": "71f65a711567d02b0ae0eb5c09a1bcfa320d8a24",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/71f65a711567d02b0ae0eb5c09a1bcfa320d8a24"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 71f65a711567d02b0ae0eb5c09a1bcfa320d8a24\nparent edc970c16fcae9d7ca02aaf7bf5c6f971142d97f\nauthor TheCharlatan <seb.kung@gmail.com> 1717617940 +0200\ncommitter TheCharlatan <seb.kung@gmail.com> 1732282717 +0100\n\nkernel: Add block index utility functions to C header\n\nAdds further functions useful for traversing the block index and\nretrieving block information.\n\nThis includes getting the block height and hash.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE8s/Eq9C5nYN+67fQm3m0VpHbQXMFAmdAiWEACgkQm3m0VpHb\nQXNBCg/+Iktd4qdtTuZYykEy1VEXCNKAZh+MTBl6O1KPYyQzk0dzU9gzjwtUeADw\ns5zHfRSRUlRFbQOiLikHDWV+SElkvbjGPkB2eFGyDTRlxsquId2p4oLFKJYtTiKP\nziGkNag6V2I+ONAbE1437jEhjJPI1eYORBMZb7RoCPLLYip0PIhUrvznyRav8ILj\nalG8gmqK/KMD7ChzwdJo8QlDj6BWbdXXRtAPLh8YLh0MfhyBAyHkVbSvAgplopSX\nSl3KMsTVwPJ6c4MWn6wtRJwCDYeaAPwTXC7vL0Pt7us06z7ysejYFBb+LSC5ZBdx\nPRjXLjQXnK9ZWUGL2H+ztp7CFkvpLABvLp0eKq6EXDz1+GdpX2hNSEKVw1oNOX/S\nbWu6OOaiC/44iNF/WTzHta059qP1kEbJ+NBQlWcIDfwFqYCMjt+GZlKVB0wk1Gez\nyukJAWaU5jdGPsbZKMhHF50jmHgBOatYb7SJIvjJa36cGM5Ez2jm4p89nvLqUEYP\nh8RiPO/6m5HwHKmAVn/H+l0OC7hqLfWXOhhtz/t03xePwXrjMlKJ9oqKF3bIJph/\nANT2f0qnIeBFR5jusXUhaSGhVPXl78hdpg8AUwrvRUSublrgkmK7hyqC5r71BOEl\n70UWAD1l7NuAJ7ra/zj8eYU7ToG2MayGR7KyQZh5Hyh4tw3InAI=\n=Z6HJ\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/edc970c16fcae9d7ca02aaf7bf5c6f971142d97f",
          "sha": "edc970c16fcae9d7ca02aaf7bf5c6f971142d97f",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/edc970c16fcae9d7ca02aaf7bf5c6f971142d97f"
        }
      ],
      "message": "kernel: Add block index utility functions to C header\n\nAdds further functions useful for traversing the block index and\nretrieving block information.\n\nThis includes getting the block height and hash.",
      "committer": {
        "name": "TheCharlatan",
        "email": "seb.kung@gmail.com",
        "date": "2024-11-22T13:38:37Z"
      },
      "author": {
        "name": "TheCharlatan",
        "email": "seb.kung@gmail.com",
        "date": "2024-06-05T20:05:40Z"
      },
      "sha": "5ade5c2c8791849ae5752d682de5b1db5efc1b1e"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDZlOTgzNGQ2NWU4MzA5NDllODcyMmNhYjM1NWM0ODZiYTNkOTJjOTQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6e9834d65e830949e8722cab355c486ba3d92c94",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/6e9834d65e830949e8722cab355c486ba3d92c94",
      "tree": {
        "sha": "721269c710f4914a1cb4149eb27a62036dec0c65",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/721269c710f4914a1cb4149eb27a62036dec0c65"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 721269c710f4914a1cb4149eb27a62036dec0c65\nparent 5ade5c2c8791849ae5752d682de5b1db5efc1b1e\nauthor TheCharlatan <seb.kung@gmail.com> 1731852715 +0100\ncommitter TheCharlatan <seb.kung@gmail.com> 1732282765 +0100\n\nkernel: Add functions to get the block hash from a block\n\nThis is useful for a host block processing feature where having an\nidentifier for the block is needed. Without this, external users need to\nserialize the block and calculate the hash externally, which is less\nefficient.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE8s/Eq9C5nYN+67fQm3m0VpHbQXMFAmdAiY0ACgkQm3m0VpHb\nQXP/lg//QDtjAzF2o6UGh3x34jHF9kLP9PeE5+Yi3kj975Rt0OaTjiLYg0J06oRa\n1vVRE+at7+8OAHJfhf1I3rtVqwDny64oNnl3K+Br7fxmT6BDoXLNtSjblO1JVX+E\nMXd2UlPIgyLj+YZTfq+n35Em6ghgjXQUCn9NhprQzZ/s+4q+rtDUiGFMF4U+zASI\nBpn2fVyCe5w4FaX2KQDz84ISbG+S7Evnbc9q+WnbyvgimcGBDngFzloO1HoJGKEI\nBd5Z+KSpWxJ9wGFrzc0b6Kzo6QrxagCuoAvezFVb7B7d5NkCWbwnV3z1NV6nZ1i6\nI7BL3xJuQoXTngGN1nknnydonAPaChX7vQDirq4MJ8pVn6Pa6ayns9YOWRBlLo+f\n3mcAm4Hh2TdxUErKG2sEq9qsS99d5cnubqknYLYXpkBbuBo5F+SN0rCUzJ/pdH7n\nTmoZOPM8hFfAS41f06kyRG+jLoTBhYdn3zLXHpGaoQVXnlFYqR580+WL47LWj5yu\nvdsCeVcQ2PcWrQUc3UmKocGpUoVx6tEB313ZknYnGiAAmFVfKpFiMy9/lYgIu9YF\nVPQH8kzSsBADtoM4mtJHecRu8dUy5LatfnJ0+sKLeuZoN7CZh8aZXXfIYv1hSfSx\nymiA1dlW8oM/QVw1fuG+82yoRDSk90xiCgE8lRRu54AwusLCP40=\n=Lf2y\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5ade5c2c8791849ae5752d682de5b1db5efc1b1e",
          "sha": "5ade5c2c8791849ae5752d682de5b1db5efc1b1e",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/5ade5c2c8791849ae5752d682de5b1db5efc1b1e"
        }
      ],
      "message": "kernel: Add functions to get the block hash from a block\n\nThis is useful for a host block processing feature where having an\nidentifier for the block is needed. Without this, external users need to\nserialize the block and calculate the hash externally, which is less\nefficient.",
      "committer": {
        "name": "TheCharlatan",
        "email": "seb.kung@gmail.com",
        "date": "2024-11-22T13:39:25Z"
      },
      "author": {
        "name": "TheCharlatan",
        "email": "seb.kung@gmail.com",
        "date": "2024-11-17T14:11:55Z"
      },
      "sha": "6e9834d65e830949e8722cab355c486ba3d92c94"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDM0YTg0MjlmZjNhODcwYzBjYWFmNGM0NzkwYmVjZDg2YzVhY2RlMzg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/34a8429ff3a870c0caaf4c4790becd86c5acde38",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/34a8429ff3a870c0caaf4c4790becd86c5acde38",
      "tree": {
        "sha": "4cac6178100bbd4a03dea481d17f9a056d5e9670",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4cac6178100bbd4a03dea481d17f9a056d5e9670"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 4cac6178100bbd4a03dea481d17f9a056d5e9670\nparent 6e9834d65e830949e8722cab355c486ba3d92c94\nauthor TheCharlatan <seb.kung@gmail.com> 1718382788 +0200\ncommitter TheCharlatan <seb.kung@gmail.com> 1732282811 +0100\n\nkernel: Add pure kernel bitcoin-chainstate\n\nThis showcases a re-implementation of bitcoin-chainstate only using the\nkernel C++ API header.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE8s/Eq9C5nYN+67fQm3m0VpHbQXMFAmdAibsACgkQm3m0VpHb\nQXNg0xAArE7j0nOa3/IlEKLHvbsD6oE487ZcnBrPr1UlVfrbZGHwIU7p8dt18JRZ\nnAY11WMCEB3JelU34d9Tvci799OxbhIjn3KNWrGVfZqEM1N6Ri5GfPs6wOzmjL/J\noGijoYgIAUeyQIwfSIqmbrougteV7YDccqKrf7XKyk+cN+KCBYY+o/Epsp/ufz9b\nvH+D+N7rOhRN6ZSf5Xp8kj63TzNK4X7sX/5lWiBgDIpcMTYh9i3TElvkdUo5M0/y\n+0XCOB6t3HwjfEAjl2uyX6FhMSBn39N6v3/4ngvDehsXDdU7WdVkEnKSjtNhq8/x\n9rQi13OiEdSSKWtcD8wX+wClMXfOoJKr9azpviASbDqBWeoIDEsv62d9xsp1d4Cm\nVCn73Qj/kQA8t6MSEdmmVIv7RwTq3YuxO6FNL64t/BohwBPuDzM1X3qAKfEfXVsA\nOUjm1A4YRukOkQOAHwY65ynomgCm8Wvvkyd66w4CLPF4AqkBrd4CsHie1gHhcKw2\n58gv6mWCbW+pYP315g1cK0UoU7Fa5GpD5ksAnb4hCpC+AQjK6C6WW1KCe7DbSdas\nO+KDMUAXXq53aP2G5fOMSmSfZUJEf8pJ6ZqcVeneW3o0oefbMzoC9BN0S3WLoxDE\n9FHKLrxcyT3pj4LKQcwJd+NJGfqUwLbYW17KKz1RFHPZbgGFqmw=\n=Y1jz\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6e9834d65e830949e8722cab355c486ba3d92c94",
          "sha": "6e9834d65e830949e8722cab355c486ba3d92c94",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/6e9834d65e830949e8722cab355c486ba3d92c94"
        }
      ],
      "message": "kernel: Add pure kernel bitcoin-chainstate\n\nThis showcases a re-implementation of bitcoin-chainstate only using the\nkernel C++ API header.",
      "committer": {
        "name": "TheCharlatan",
        "email": "seb.kung@gmail.com",
        "date": "2024-11-22T13:40:11Z"
      },
      "author": {
        "name": "TheCharlatan",
        "email": "seb.kung@gmail.com",
        "date": "2024-06-14T16:33:08Z"
      },
      "sha": "34a8429ff3a870c0caaf4c4790becd86c5acde38"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15397783487,
      "node_id": "HRFPE_lADOABII586SDdapzwAAAAOVx4e_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15397783487",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "34a8429ff3a870c0caaf4c4790becd86c5acde38",
      "commit_url": "https://api.github.com/repos/TheCharlatan/bitcoin/commits/34a8429ff3a870c0caaf4c4790becd86c5acde38",
      "created_at": "2024-11-22T13:47:23Z"
    },
    {
      "event": "commented",
      "id": 2493809430,
      "node_id": "IC_kwDOABII586UpIMW",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2493809430",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-22T13:47:29Z",
      "updated_at": "2024-11-22T13:47:29Z",
      "author_association": "CONTRIBUTOR",
      "body": "Updated fc67047b7e1fb7031285f790ea3a7ea349474f31 -> 34a8429ff3a870c0caaf4c4790becd86c5acde38 ([kernelApi_4](https://github.com/TheCharlatan/bitcoin/tree/kernelApi_4) -> [kernelApi_5](https://github.com/TheCharlatan/bitcoin/tree/kernelApi_5), [compare](https://github.com/TheCharlatan/bitcoin/compare/kernelApi_4..kernelApi_5))\r\n\r\n* More consistent `const` usage ",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#issuecomment-2493809430",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30595"
    },
    {
      "event": "reviewed",
      "id": 2448664774,
      "node_id": "PRR_kwDOABII586R86jG",
      "url": null,
      "actor": null,
      "commit_id": "34a8429ff3a870c0caaf4c4790becd86c5acde38",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#pullrequestreview-2448664774",
      "submitted_at": "2024-11-25T21:41:35Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1754989437",
      "pull_request_review_id": 2297633388,
      "id": 1754989437,
      "node_id": "PRRC_kwDOABII585omwN9",
      "diff_hunk": "@@ -0,0 +1,141 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_KERNEL_BITCOINKERNEL_H\n+#define BITCOIN_KERNEL_BITCOINKERNEL_H\n+\n+#ifndef __cplusplus\n+#include <stdbool.h>\n+#include <stddef.h>\n+#include <stdint.h>\n+#else\n+#include <cstddef>\n+#include <cstdint>\n+#endif // __cplusplus\n+\n+\n+#if !defined(BITCOINKERNEL_GNUC_PREREQ)\n+#if defined(__GNUC__) && defined(__GNUC_MINOR__)\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) \\\n+    ((__GNUC__ << 16) + __GNUC_MINOR__ >= ((_maj) << 16) + (_min))\n+#else\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) 0\n+#endif\n+#endif\n+\n+/* Warning attributes */\n+#if defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT __attribute__((__warn_unused_result__))\n+#else\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT\n+#endif\n+#if !defined(BITCOINKERNEL_BUILD) && defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_ARG_NONNULL(_x) __attribute__((__nonnull__(_x)))\n+#else\n+#define BITCOINKERNEL_ARG_NONNULL(_x)\n+#endif\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif // __cplusplus\n+\n+/**\n+ * ------ Context ------\n+ *\n+ * The library provides a built-in static constant kernel context. This context\n+ * offers only limited functionality. It detects and self-checks the correct\n+ * sha256 implementation, initializes the random number generator and\n+ * self-checks the secp256k1 static context. It is used internally for otherwise\n+ * \"context-free\" operations.\n+ *\n+ * ------ Error handling ------\n+ *\n+ * Functions communicate an error through their return types, usually returning\n+ * a nullptr, or false if an error is encountered. Additionally, verification\n+ * functions, e.g. for scripts, may communicate more detailed error information\n+ * through status code out parameters.\n+ */\n+\n+/**\n+ * A collection of status codes that may be issued by the script verify function.\n+ */\n+typedef enum {\n+    kernel_SCRIPT_VERIFY_OK = 0,\n+    kernel_SCRIPT_VERIFY_ERROR_TX_INPUT_INDEX, //!< The provided input index is out of range of the actual number of inputs of the transaction.\n+    kernel_SCRIPT_VERIFY_ERROR_TX_SIZE_MISMATCH, //!< The provided tx_to_len argument does not match the actual size of the transaction.\n+    kernel_SCRIPT_VERIFY_ERROR_TX_DESERIALIZE, //!< The provided tx could not be de-serialized.\n+    kernel_SCRIPT_VERIFY_ERROR_INVALID_FLAGS, //!< The provided bitfield for the flags was invalid.\n+    kernel_SCRIPT_VERIFY_ERROR_INVALID_FLAGS_COMBINATION, //!< The flags very combined in an invalid way.\n+    kernel_SCRIPT_VERIFY_ERROR_SPENT_OUTPUTS_REQUIRED, //!< The taproot flag was set, so valid spent_outputs have to be provided.\n+    kernel_SCRIPT_VERIFY_ERROR_SPENT_OUTPUTS_MISMATCH, //!< The number of spent outputs does not match the number of inputs of the tx.\n+} kernel_ScriptVerifyStatus;\n+\n+/**\n+ * Script verification flags that may be composed with each other.\n+ */\n+typedef enum\n+{\n+    kernel_SCRIPT_FLAGS_VERIFY_NONE                = 0,\n+    kernel_SCRIPT_FLAGS_VERIFY_P2SH                = (1U << 0), //!< evaluate P2SH (BIP16) subscripts\n+    kernel_SCRIPT_FLAGS_VERIFY_DERSIG              = (1U << 2), //!< enforce strict DER (BIP66) compliance\n+    kernel_SCRIPT_FLAGS_VERIFY_NULLDUMMY           = (1U << 4), //!< enforce NULLDUMMY (BIP147)\n+    kernel_SCRIPT_FLAGS_VERIFY_CHECKLOCKTIMEVERIFY = (1U << 9), //!< enable CHECKLOCKTIMEVERIFY (BIP65)\n+    kernel_SCRIPT_FLAGS_VERIFY_CHECKSEQUENCEVERIFY = (1U << 10), //!< enable CHECKSEQUENCEVERIFY (BIP112)\n+    kernel_SCRIPT_FLAGS_VERIFY_WITNESS             = (1U << 11), //!< enable WITNESS (BIP141)\n+\n+    kernel_SCRIPT_FLAGS_VERIFY_TAPROOT             = (1U << 17), //!< enable TAPROOT (BIPs 341 & 342)\n+    kernel_SCRIPT_FLAGS_VERIFY_ALL                 = kernel_SCRIPT_FLAGS_VERIFY_P2SH |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_DERSIG |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_NULLDUMMY |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_CHECKLOCKTIMEVERIFY |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_CHECKSEQUENCEVERIFY |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_WITNESS |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_TAPROOT\n+} kernel_ScriptFlags;\n+\n+/**\n+ * A helper struct for a single transaction output.\n+ */\n+typedef struct {\n+    int64_t value;\n+    const unsigned char* script_pubkey;\n+    size_t script_pubkey_len;\n+} kernel_TransactionOutput;\n+\n+/**\n+ * @brief Verify if the input at input_index of tx_to spends the script pubkey\n+ * under the constraints specified by flags. If the witness flag is set the",
      "path": "src/kernel/bitcoinkernel.h",
      "position": null,
      "original_position": 108,
      "commit_id": "34a8429ff3a870c0caaf4c4790becd86c5acde38",
      "original_commit_id": "63a83b8dad279beaa2f9f6ac2677c56c300300fe",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit / meta discussion: even though it'll make things more verbose, I think it might be worth referring to flags with their full name to make it easier for users to find them? I.e. \"If the witness flag is set\" would become \"if kernel_SCRIPT_FLAGS_VERIFY_WITNESS is set in `flags`\".\r\n\r\n",
      "created_at": "2024-09-11T15:36:58Z",
      "updated_at": "2024-11-19T19:19:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1754989437",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1754989437"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 496,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1757015877",
      "pull_request_review_id": 2297633388,
      "id": 1757015877,
      "node_id": "PRRC_kwDOABII585oue9F",
      "diff_hunk": "@@ -0,0 +1,1145 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_KERNEL_BITCOINKERNEL_H\n+#define BITCOIN_KERNEL_BITCOINKERNEL_H\n+\n+#ifndef __cplusplus\n+#include <stdbool.h>\n+#include <stddef.h>\n+#include <stdint.h>\n+#else\n+#include <cstddef>\n+#include <cstdint>\n+#endif // __cplusplus\n+\n+\n+#if !defined(BITCOINKERNEL_GNUC_PREREQ)\n+#if defined(__GNUC__) && defined(__GNUC_MINOR__)\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) \\\n+    ((__GNUC__ << 16) + __GNUC_MINOR__ >= ((_maj) << 16) + (_min))\n+#else\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) 0\n+#endif\n+#endif\n+\n+/* Warning attributes */\n+#if defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT __attribute__((__warn_unused_result__))\n+#else\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT\n+#endif\n+#if !defined(BITCOINKERNEL_BUILD) && defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_ARG_NONNULL(_x) __attribute__((__nonnull__(_x)))",
      "path": "src/kernel/bitcoinkernel.h",
      "position": null,
      "original_position": 34,
      "commit_id": "34a8429ff3a870c0caaf4c4790becd86c5acde38",
      "original_commit_id": "33c71843e3fde0b795687a8626220f02f7243662",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: I like that we're using this guard. Do you see a downside to making it variadic?\r\n\r\n(Should be a pretty trivial rebase with e.g. `for i in {1..3}; do sed -i -E \"s/BITCOINKERNEL_ARG_NONNULL\\(([^)]+)\\) BITCOINKERNEL_ARG_NONNULL\\(([0-9]+)\\)/BITCOINKERNEL_ARG_NONNULL(\\1, \\2)/\" ./src/kernel/bitcoinkernel.h; done`)",
      "created_at": "2024-09-12T14:43:52Z",
      "updated_at": "2024-11-19T19:19:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1757015877",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1757015877"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 34,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1757049107",
      "pull_request_review_id": 2297633388,
      "id": 1757049107,
      "node_id": "PRRC_kwDOABII585ounET",
      "diff_hunk": "@@ -0,0 +1,1145 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_KERNEL_BITCOINKERNEL_H\n+#define BITCOIN_KERNEL_BITCOINKERNEL_H\n+\n+#ifndef __cplusplus\n+#include <stdbool.h>\n+#include <stddef.h>\n+#include <stdint.h>\n+#else\n+#include <cstddef>\n+#include <cstdint>\n+#endif // __cplusplus\n+\n+\n+#if !defined(BITCOINKERNEL_GNUC_PREREQ)\n+#if defined(__GNUC__) && defined(__GNUC_MINOR__)\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) \\\n+    ((__GNUC__ << 16) + __GNUC_MINOR__ >= ((_maj) << 16) + (_min))\n+#else\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) 0\n+#endif\n+#endif\n+\n+/* Warning attributes */\n+#if defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT __attribute__((__warn_unused_result__))\n+#else\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT\n+#endif\n+#if !defined(BITCOINKERNEL_BUILD) && defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_ARG_NONNULL(_x) __attribute__((__nonnull__(_x)))\n+#else\n+#define BITCOINKERNEL_ARG_NONNULL(_x)\n+#endif\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif // __cplusplus\n+\n+/**\n+ * ------ Context ------\n+ *\n+ * The library provides a built-in static constant kernel context. This context\n+ * offers only limited functionality. It detects and self-checks the correct\n+ * sha256 implementation, initializes the random number generator and\n+ * self-checks the secp256k1 static context. It is used internally for otherwise\n+ * \"context-free\" operations.\n+ *\n+ * The user can create their own context for passing it to state-rich validation\n+ * functions and holding callbacks for kernel events.",
      "path": "src/kernel/bitcoinkernel.h",
      "position": null,
      "original_position": 53,
      "commit_id": "34a8429ff3a870c0caaf4c4790becd86c5acde38",
      "original_commit_id": "33c71843e3fde0b795687a8626220f02f7243662",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Is there any benefit to documenting the built-in static constant kernel context in the header documentation? If I understand correctly, that's an implementation detail and not relevant to the user? If so, I think we should\r\n- only talk about the non-static context in `bitcoinkernel.h`, so that its meaning is unambiguous to the user\r\n- consistently refer to the static context as \"static context\" wherever it is documented, as to not make me question everything whenever I come across an unqualified context reference\r\n\r\nIf there is merit to documenting the static context in the header, I think it should be more of a footnote than the very first item in the documentation?",
      "created_at": "2024-09-12T14:59:08Z",
      "updated_at": "2024-11-19T19:19:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1757049107",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1757049107"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
        }
      },
      "start_line": null,
      "original_start_line": 46,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 54,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1757065221",
      "pull_request_review_id": 2297633388,
      "id": 1757065221,
      "node_id": "PRRC_kwDOABII585ourAF",
      "diff_hunk": "@@ -0,0 +1,1145 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_KERNEL_BITCOINKERNEL_H\n+#define BITCOIN_KERNEL_BITCOINKERNEL_H\n+\n+#ifndef __cplusplus\n+#include <stdbool.h>\n+#include <stddef.h>\n+#include <stdint.h>\n+#else\n+#include <cstddef>\n+#include <cstdint>\n+#endif // __cplusplus\n+\n+\n+#if !defined(BITCOINKERNEL_GNUC_PREREQ)\n+#if defined(__GNUC__) && defined(__GNUC_MINOR__)\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) \\\n+    ((__GNUC__ << 16) + __GNUC_MINOR__ >= ((_maj) << 16) + (_min))\n+#else\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) 0\n+#endif\n+#endif\n+\n+/* Warning attributes */\n+#if defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT __attribute__((__warn_unused_result__))\n+#else\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT\n+#endif\n+#if !defined(BITCOINKERNEL_BUILD) && defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_ARG_NONNULL(_x) __attribute__((__nonnull__(_x)))\n+#else\n+#define BITCOINKERNEL_ARG_NONNULL(_x)\n+#endif\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif // __cplusplus\n+\n+/**\n+ * ------ Context ------",
      "path": "src/kernel/bitcoinkernel.h",
      "position": 44,
      "original_position": 44,
      "commit_id": "34a8429ff3a870c0caaf4c4790becd86c5acde38",
      "original_commit_id": "33c71843e3fde0b795687a8626220f02f7243662",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Is there benefit to this stand-alone Context documentation, since we already have (and could expand on/merge with) the `kernel_Context` documentation? I think perhaps a more useful alternative would be to start the documentation with a minimal example on how to use the kernel (or a non-code \"getting started\" guide), which would inevitably include/reference the `kernel_Context`, providing users a good starting point on which documentation to read first?",
      "created_at": "2024-09-12T15:04:45Z",
      "updated_at": "2024-11-19T19:19:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1757065221",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1757065221"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 44,
      "original_line": 44,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1757105125",
      "pull_request_review_id": 2297633388,
      "id": 1757105125,
      "node_id": "PRRC_kwDOABII585ou0vl",
      "diff_hunk": "@@ -0,0 +1,1145 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_KERNEL_BITCOINKERNEL_H\n+#define BITCOIN_KERNEL_BITCOINKERNEL_H\n+\n+#ifndef __cplusplus\n+#include <stdbool.h>\n+#include <stddef.h>\n+#include <stdint.h>\n+#else\n+#include <cstddef>\n+#include <cstdint>\n+#endif // __cplusplus\n+\n+\n+#if !defined(BITCOINKERNEL_GNUC_PREREQ)\n+#if defined(__GNUC__) && defined(__GNUC_MINOR__)\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) \\\n+    ((__GNUC__ << 16) + __GNUC_MINOR__ >= ((_maj) << 16) + (_min))\n+#else\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) 0\n+#endif\n+#endif\n+\n+/* Warning attributes */\n+#if defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT __attribute__((__warn_unused_result__))\n+#else\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT\n+#endif\n+#if !defined(BITCOINKERNEL_BUILD) && defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_ARG_NONNULL(_x) __attribute__((__nonnull__(_x)))\n+#else\n+#define BITCOINKERNEL_ARG_NONNULL(_x)\n+#endif\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif // __cplusplus\n+\n+/**\n+ * ------ Context ------\n+ *\n+ * The library provides a built-in static constant kernel context. This context\n+ * offers only limited functionality. It detects and self-checks the correct\n+ * sha256 implementation, initializes the random number generator and\n+ * self-checks the secp256k1 static context. It is used internally for otherwise\n+ * \"context-free\" operations.\n+ *\n+ * The user can create their own context for passing it to state-rich validation\n+ * functions and holding callbacks for kernel events.\n+ *\n+ * ------ Error handling ------\n+ *\n+ * Functions communicate an error through their return types, usually returning\n+ * a nullptr, or false if an error is encountered. Additionally, verification\n+ * functions, e.g. for scripts, may communicate more detailed error information\n+ * through status code out parameters.\n+ *\n+ * Fine-grained validation information is communicated through the validation\n+ * interface.\n+ *\n+ * The kernel notifications issue callbacks for errors. These are usually\n+ * indicative of a system error. If such an error is issued, it is recommended\n+ * to halt and tear down the existing kernel objects. Remediating the error may\n+ * require system intervention by the user.\n+ *\n+ * ------ Pointer and argument conventions ------\n+ *\n+ * The user is responsible for de-allocating the memory owned by pointers\n+ * returned by functions. Typically pointers returned by *_create(...) functions\n+ * can be de-allocated by corresponding *_destroy(...) functions.\n+ *\n+ * Pointer arguments make no assumptions on their lifetime. Once the function\n+ * returns the user can safely de-allocate the passed in arguments.",
      "path": "src/kernel/bitcoinkernel.h",
      "position": null,
      "original_position": 77,
      "commit_id": "34a8429ff3a870c0caaf4c4790becd86c5acde38",
      "original_commit_id": "33c71843e3fde0b795687a8626220f02f7243662",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I find this phrasing a bit confusing. Is this a correct replacement?\r\n\r\n```suggestion\r\n * A function that takes pointer arguments makes no assumptions on their lifetime. Once the function\r\n * returns the user can safely de-allocate the memory owned by those pointers.\r\n```",
      "created_at": "2024-09-12T15:25:15Z",
      "updated_at": "2024-11-19T19:19:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1757105125",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1757105125"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
        }
      },
      "start_line": null,
      "original_start_line": 76,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 77,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1757108471",
      "pull_request_review_id": 2297633388,
      "id": 1757108471,
      "node_id": "PRRC_kwDOABII585ou1j3",
      "diff_hunk": "@@ -0,0 +1,1145 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_KERNEL_BITCOINKERNEL_H\n+#define BITCOIN_KERNEL_BITCOINKERNEL_H\n+\n+#ifndef __cplusplus\n+#include <stdbool.h>\n+#include <stddef.h>\n+#include <stdint.h>\n+#else\n+#include <cstddef>\n+#include <cstdint>\n+#endif // __cplusplus\n+\n+\n+#if !defined(BITCOINKERNEL_GNUC_PREREQ)\n+#if defined(__GNUC__) && defined(__GNUC_MINOR__)\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) \\\n+    ((__GNUC__ << 16) + __GNUC_MINOR__ >= ((_maj) << 16) + (_min))\n+#else\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) 0\n+#endif\n+#endif\n+\n+/* Warning attributes */\n+#if defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT __attribute__((__warn_unused_result__))\n+#else\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT\n+#endif\n+#if !defined(BITCOINKERNEL_BUILD) && defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_ARG_NONNULL(_x) __attribute__((__nonnull__(_x)))\n+#else\n+#define BITCOINKERNEL_ARG_NONNULL(_x)\n+#endif\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif // __cplusplus\n+\n+/**\n+ * ------ Context ------\n+ *\n+ * The library provides a built-in static constant kernel context. This context\n+ * offers only limited functionality. It detects and self-checks the correct\n+ * sha256 implementation, initializes the random number generator and\n+ * self-checks the secp256k1 static context. It is used internally for otherwise\n+ * \"context-free\" operations.\n+ *\n+ * The user can create their own context for passing it to state-rich validation\n+ * functions and holding callbacks for kernel events.\n+ *\n+ * ------ Error handling ------\n+ *\n+ * Functions communicate an error through their return types, usually returning\n+ * a nullptr, or false if an error is encountered. Additionally, verification\n+ * functions, e.g. for scripts, may communicate more detailed error information\n+ * through status code out parameters.\n+ *\n+ * Fine-grained validation information is communicated through the validation\n+ * interface.\n+ *\n+ * The kernel notifications issue callbacks for errors. These are usually\n+ * indicative of a system error. If such an error is issued, it is recommended\n+ * to halt and tear down the existing kernel objects. Remediating the error may\n+ * require system intervention by the user.\n+ *\n+ * ------ Pointer and argument conventions ------\n+ *\n+ * The user is responsible for de-allocating the memory owned by pointers\n+ * returned by functions. Typically pointers returned by *_create(...) functions\n+ * can be de-allocated by corresponding *_destroy(...) functions.\n+ *\n+ * Pointer arguments make no assumptions on their lifetime. Once the function\n+ * returns the user can safely de-allocate the passed in arguments.\n+ *\n+ * Pointers passed by callbacks are not owned by the user and are only valid for\n+ * the duration of it. They should not be de-allocated by the user.",
      "path": "src/kernel/bitcoinkernel.h",
      "position": null,
      "original_position": 80,
      "commit_id": "34a8429ff3a870c0caaf4c4790becd86c5acde38",
      "original_commit_id": "33c71843e3fde0b795687a8626220f02f7243662",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "1) What's \"it\"?\r\n\r\n2) I think adopting and sticking to a clear definition of MUST, MAY, SHOULD, ... would be appropriate here? E.g. in this case, I think they \"MUST\" not be de-allocated by the user, rather than \"SHOULD\"?",
      "created_at": "2024-09-12T15:27:07Z",
      "updated_at": "2024-11-19T19:19:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1757108471",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1757108471"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 80,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1848821020",
      "pull_request_review_id": 2297633388,
      "id": 1848821020,
      "node_id": "PRRC_kwDOABII585uMsUc",
      "diff_hunk": "@@ -0,0 +1,1186 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_KERNEL_BITCOINKERNEL_H\n+#define BITCOIN_KERNEL_BITCOINKERNEL_H\n+\n+#ifndef __cplusplus\n+#include <stdbool.h>\n+#include <stddef.h>\n+#include <stdint.h>\n+#else\n+#include <cstddef>\n+#include <cstdint>\n+#endif // __cplusplus\n+\n+\n+#if !defined(BITCOINKERNEL_GNUC_PREREQ)\n+#if defined(__GNUC__) && defined(__GNUC_MINOR__)\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) \\\n+    ((__GNUC__ << 16) + __GNUC_MINOR__ >= ((_maj) << 16) + (_min))\n+#else\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) 0\n+#endif\n+#endif\n+\n+/* Warning attributes */\n+#if defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT __attribute__((__warn_unused_result__))\n+#else\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT\n+#endif\n+#if !defined(BITCOINKERNEL_BUILD) && defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_ARG_NONNULL(_x) __attribute__((__nonnull__(_x)))\n+#else\n+#define BITCOINKERNEL_ARG_NONNULL(_x)\n+#endif\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif // __cplusplus\n+\n+/**\n+ * ------ Context ------\n+ *\n+ * The library provides a built-in static constant kernel context. This context\n+ * offers only limited functionality. It detects and self-checks the correct\n+ * sha256 implementation, initializes the random number generator and\n+ * self-checks the secp256k1 static context. It is used internally for otherwise\n+ * \"context-free\" operations.\n+ *\n+ * The user can create their own context for passing it to state-rich validation\n+ * functions and holding callbacks for kernel events.\n+ *\n+ * ------ Error handling ------\n+ *\n+ * Functions communicate an error through their return types, usually returning\n+ * a nullptr, or false if an error is encountered. Additionally, verification\n+ * functions, e.g. for scripts, may communicate more detailed error information\n+ * through status code out parameters.\n+ *\n+ * Fine-grained validation information is communicated through the validation\n+ * interface.\n+ *\n+ * The kernel notifications issue callbacks for errors. These are usually\n+ * indicative of a system error. If such an error is issued, it is recommended\n+ * to halt and tear down the existing kernel objects. Remediating the error may\n+ * require system intervention by the user.\n+ *\n+ * ------ Pointer and argument conventions ------\n+ *\n+ * The user is responsible for de-allocating the memory owned by pointers\n+ * returned by functions. Typically pointers returned by *_create(...) functions\n+ * can be de-allocated by corresponding *_destroy(...) functions.\n+ *\n+ * Pointer arguments make no assumptions on their lifetime. Once the function\n+ * returns the user can safely de-allocate the passed in arguments.\n+ *\n+ * Pointers passed by callbacks are not owned by the user and are only valid for\n+ * the duration of it. They should not be de-allocated by the user.\n+ *\n+ * Array lengths follow the pointer argument they describe.\n+ */\n+\n+/**\n+ * Opaque data structure for holding a transaction.\n+ */\n+typedef struct kernel_Transaction kernel_Transaction;\n+\n+/**\n+ * Opaque data structure for holding a script pubkey.\n+ */\n+typedef struct kernel_ScriptPubkey kernel_ScriptPubkey;\n+\n+/**\n+ * Opaque data structure for holding a transaction output.\n+ */\n+typedef struct kernel_TransactionOutput kernel_TransactionOutput;\n+\n+/**\n+ * Opaque data structure for holding a logging connection.\n+ *\n+ * The logging connection can be used to manually stop logging.\n+ *\n+ * Messages that were logged before a connection is created are buffered in a\n+ * 1MB buffer. Logging can alternatively be permanently disabled by calling\n+ * kernel_disable_logging().\n+ */\n+typedef struct kernel_LoggingConnection kernel_LoggingConnection;\n+\n+/**\n+ * Opaque data structure for holding the chain parameters.\n+ *\n+ * These are eventually placed into a kernel context through the kernel context\n+ * options. The parameters describe the properties of a chain, and may be\n+ * instantiated for either mainnet, testnet, signet, or regtest.\n+ */\n+typedef struct kernel_ChainParameters kernel_ChainParameters;\n+\n+/**\n+ * Opaque data structure for holding callbacks for reacting to events that may\n+ * be encountered during library operations.\n+ */\n+typedef struct kernel_Notifications kernel_Notifications;\n+\n+/**\n+ * Opaque data structure for holding options for creating a new kernel context.\n+ *\n+ * Once a kernel context has been created from these options, they may be\n+ * destroyed. The options hold the notification callbacks as well as the\n+ * selected chain type until they are passed to the context. Their content and\n+ * scope can be expanded over time.\n+ */\n+typedef struct kernel_ContextOptions kernel_ContextOptions;\n+\n+/**\n+ * Opaque data structure for holding a kernel context.\n+ *\n+ * The kernel context is used to initialize internal state and hold the chain\n+ * parameters and callbacks for handling error and validation events. Once other\n+ * validation objects are instantiated from it, the context needs to be kept in\n+ * memory for the duration of their lifetimes.\n+ *\n+ * The processing of validation events is done through an internal task\n+ * runner owned by the context. The task runner drives the execution of events\n+ * triggering validation interface callbacks. Multiple validation interfaces can\n+ * be registered with the context. The kernel will create an event for each of\n+ * the registered validation interfaces through the task runner.\n+ *\n+ * A constructed context can be safely used from multiple threads, but functions\n+ * taking it as a non-cost argument need exclusive access to it.\n+ */\n+typedef struct kernel_Context kernel_Context;\n+\n+/**\n+ * Opaque data structure for holding a block index pointer.\n+ *\n+ * This is a pointer to an element in the block index currently in memory of the\n+ * chainstate manager. It is valid for the lifetime of the chainstate manager it\n+ * was retrieved from.\n+ */\n+typedef struct kernel_BlockIndex kernel_BlockIndex;\n+\n+/**\n+ * Opaque data structure for holding options for creating a new chainstate\n+ * manager.\n+ *\n+ * The chainstate manager options are used to set some parameters for the\n+ * chainstate manager. For now it just holds default options.\n+ */\n+typedef struct kernel_ChainstateManagerOptions kernel_ChainstateManagerOptions;\n+\n+/**\n+ * Opaque data structure for holding options for creating a new chainstate\n+ * manager.\n+ *\n+ * The chainstate manager has an internal block manager that takes its own set\n+ * of parameters. It is initialized with default options.\n+ */\n+typedef struct kernel_BlockManagerOptions kernel_BlockManagerOptions;\n+\n+/**\n+ * Opaque data structure for holding a chainstate manager.\n+ *\n+ * The chainstate manager is the central object for doing validation tasks as\n+ * well as retrieving data from the chain. Internally it is a complex data\n+ * structure with diverse functionality.\n+ *\n+ * The chainstate manager is only valid for as long as the context with which it\n+ * was created remains in memory.\n+ *\n+ * Its functionality will be more and more exposed in the future.\n+ */\n+typedef struct kernel_ChainstateManager kernel_ChainstateManager;\n+\n+/**\n+ * Opaque data structure for holding parameters used for loading the chainstate\n+ * of a chainstate manager.\n+ *\n+ * Is initialized with default parameters.\n+ */\n+typedef struct kernel_ChainstateLoadOptions kernel_ChainstateLoadOptions;\n+\n+/**\n+ * Opaque data structure for holding a block.\n+ */\n+typedef struct kernel_Block kernel_Block;\n+\n+/**\n+ * Opaque data structure for holding a non-owned block. This is typically a\n+ * block available to the user through one of the validation callbacks.\n+ */\n+typedef struct kernel_BlockPointer kernel_BlockPointer;\n+\n+/**\n+ * Opaque data structure for holding the state of a block during validation.\n+ *\n+ * Contains information indicating whether validation was successful, and if not\n+ * which step during block validation failed.\n+ */\n+typedef struct kernel_BlockValidationState kernel_BlockValidationState;\n+\n+/**\n+ * Opaque data structure for holding a validation interface.\n+ *\n+ * The validation interface can be registered with the internal task runner of an\n+ * existing context. It holds callbacks that will be triggered by certain\n+ * validation events. The callbacks registered with it will block further\n+ * validation progress when triggered.\n+ */\n+typedef struct kernel_ValidationInterface kernel_ValidationInterface;\n+\n+/**\n+ * Opaque data structure for holding a block undo struct.\n+ *\n+ * It holds all the previous outputs consumed by all transactions in a specific\n+ * block. Internally it holds a nested vector. The top level vector has an entry\n+ * for each transaction in a block (in order of the actual transactions of the\n+ * block and minus the coinbase transaction). Each entry is in turn a vector of\n+ * all the previous outputs of a transaction (in order of their corresponding\n+ * inputs).\n+ */\n+typedef struct kernel_BlockUndo kernel_BlockUndo;\n+\n+/** Current sync state passed to tip changed callbacks. */\n+typedef enum {\n+    kernel_INIT_REINDEX,\n+    kernel_INIT_DOWNLOAD,\n+    kernel_POST_INIT\n+} kernel_SynchronizationState;\n+\n+/** Possible warning types issued by validation. */\n+typedef enum {\n+    kernel_UNKNOWN_NEW_RULES_ACTIVATED,\n+    kernel_LARGE_WORK_INVALID_CHAIN\n+} kernel_Warning;\n+\n+/** Callback function types */\n+\n+/**\n+ * Function signature for the global logging callback. All bitcoin kernel\n+ * internal logs will pass through this callback.\n+ */\n+typedef void (*kernel_LogCallback)(void* user_data, const char* message);\n+\n+/**\n+ * Function signatures for the kernel notifications.\n+ */\n+typedef void (*kernel_NotifyBlockTip)(void* user_data, kernel_SynchronizationState state, kernel_BlockIndex* index);\n+typedef void (*kernel_NotifyHeaderTip)(void* user_data, kernel_SynchronizationState state, int64_t height, int64_t timestamp, bool presync);\n+typedef void (*kernel_NotifyProgress)(void* user_data, const char* title, int progress_percent, bool resume_possible);\n+typedef void (*kernel_NotifyWarningSet)(void* user_data, kernel_Warning warning, const char* message);\n+typedef void (*kernel_NotifyWarningUnset)(void* user_data, kernel_Warning warning);\n+typedef void (*kernel_NotifyFlushError)(void* user_data, const char* message);\n+typedef void (*kernel_NotifyFatalError)(void* user_data, const char* message);\n+\n+/**\n+ * Function signatures for the validation interface.\n+ */\n+typedef void (*kernel_ValidationInterfaceBlockChecked)(void* user_data, const kernel_BlockPointer* block, const kernel_BlockValidationState* state);\n+\n+/**\n+ * Whether a validated data structure is valid, invalid, or an error was\n+ * encountered during processing.\n+ */\n+typedef enum {\n+    kernel_VALIDATION_STATE_VALID = 0,\n+    kernel_VALIDATION_STATE_INVALID,\n+    kernel_VALIDATION_STATE_ERROR,\n+} kernel_ValidationMode;\n+\n+/**\n+ * A granular \"reason\" why a block was invalid.\n+ */\n+typedef enum {\n+    kernel_BLOCK_RESULT_UNSET = 0, //!< initial value. Block has not yet been rejected\n+    kernel_BLOCK_CONSENSUS,        //!< invalid by consensus rules (excluding any below reasons)\n+    kernel_BLOCK_CACHED_INVALID,  //!< this block was cached as being invalid and we didn't store the reason why\n+    kernel_BLOCK_INVALID_HEADER,  //!< invalid proof of work or time too old\n+    kernel_BLOCK_MUTATED,         //!< the block's data didn't match the data committed to by the PoW\n+    kernel_BLOCK_MISSING_PREV,    //!< We don't have the previous block the checked one is built on\n+    kernel_BLOCK_INVALID_PREV,    //!< A block this one builds on is invalid\n+    kernel_BLOCK_TIME_FUTURE,     //!< block timestamp was > 2 hours in the future (or our clock is bad)\n+    kernel_BLOCK_CHECKPOINT,      //!< the block failed to meet one of our checkpoints\n+    kernel_BLOCK_HEADER_LOW_WORK, //!< the block header may be on a too-little-work chain\n+} kernel_BlockValidationResult;\n+\n+/**\n+ * Holds the validation interface callbacks. The user data pointer may be used\n+ * to point to user-defined structures to make processing the validation\n+ * callbacks easier.\n+ */\n+typedef struct {\n+    void* user_data;                                      //!< Holds a user-defined opaque structure that is passed to the validation\n+                                                          //!< interface callbacks.\n+    kernel_ValidationInterfaceBlockChecked block_checked; //!< Called when a new block has been checked. Contains the\n+                                                          //!< result of its validation.\n+} kernel_ValidationInterfaceCallbacks;\n+\n+/**\n+ * A struct for holding the kernel notification callbacks. The user data\n+ * pointer may be used to point to user-defined structures to make processing\n+ * the notifications easier. Note that this makes it the user's responsibility\n+ * to ensure that the user_data outlives the kernel objects. Notifications can\n+ * occur even as kernel objects are deleted, so care has to be taken to ensure\n+ * safe unwinding.\n+ */\n+typedef struct {\n+    void* user_data;                         //!< Holds a user-defined opaque structure that is passed to the notification callbacks.\n+    kernel_NotifyBlockTip block_tip;         //!< The chain's tip was updated to the provided block index.\n+    kernel_NotifyHeaderTip header_tip;       //!< A new best block header was added.\n+    kernel_NotifyProgress progress;          //!< Reports on current block synchronization progress.\n+    kernel_NotifyWarningSet warning_set;     //!< A warning issued by the kernel library during validation.\n+    kernel_NotifyWarningUnset warning_unset; //!< A previous condition leading to the issuance of a warning is no longer given.\n+    kernel_NotifyFlushError flush_error;     //!< An error encountered when flushing data to disk.\n+    kernel_NotifyFatalError fatal_error;     //!< A un-recoverable system error encountered by the library.\n+} kernel_NotificationInterfaceCallbacks;\n+\n+/**\n+ * A collection of logging categories that may be encountered by kernel code.\n+ */\n+typedef enum {\n+    kernel_LOG_ALL = 0,\n+    kernel_LOG_BENCH,\n+    kernel_LOG_BLOCKSTORAGE,\n+    kernel_LOG_COINDB,\n+    kernel_LOG_LEVELDB,\n+    kernel_LOG_LOCK,\n+    kernel_LOG_MEMPOOL,\n+    kernel_LOG_PRUNE,\n+    kernel_LOG_RAND,\n+    kernel_LOG_REINDEX,\n+    kernel_LOG_VALIDATION,\n+    kernel_LOG_KERNEL,\n+} kernel_LogCategory;\n+\n+/**\n+ * The level at which logs should be produced.\n+ */\n+typedef enum {\n+    kernel_LOG_INFO = 0,\n+    kernel_LOG_DEBUG,\n+    kernel_LOG_TRACE,\n+} kernel_LogLevel;\n+\n+/**\n+ * Options controlling the format of log messages.\n+ */\n+typedef struct {\n+    bool log_timestamps;               //!< Prepend a timestamp to log messages.\n+    bool log_time_micros;              //!< Log timestamps in microsecond precision.\n+    bool log_threadnames;              //!< Prepend the name of the thread to log messages.\n+    bool log_sourcelocations;          //!< Prepend the source location to log messages.\n+    bool always_print_category_levels; //!< Prepend the log category and level to log messages.\n+} kernel_LoggingOptions;\n+\n+/**\n+ * A collection of status codes that may be issued by the script verify function.\n+ */\n+typedef enum {\n+    kernel_SCRIPT_VERIFY_OK = 0,\n+    kernel_SCRIPT_VERIFY_ERROR_TX_INPUT_INDEX, //!< The provided input index is out of range of the actual number of inputs of the transaction.\n+    kernel_SCRIPT_VERIFY_ERROR_INVALID_FLAGS, //!< The provided bitfield for the flags was invalid.\n+    kernel_SCRIPT_VERIFY_ERROR_INVALID_FLAGS_COMBINATION, //!< The flags very combined in an invalid way.\n+    kernel_SCRIPT_VERIFY_ERROR_SPENT_OUTPUTS_REQUIRED, //!< The taproot flag was set, so valid spent_outputs have to be provided.\n+    kernel_SCRIPT_VERIFY_ERROR_SPENT_OUTPUTS_MISMATCH, //!< The number of spent outputs does not match the number of inputs of the tx.\n+} kernel_ScriptVerifyStatus;\n+\n+/**\n+ * Script verification flags that may be composed with each other.\n+ */\n+typedef enum\n+{\n+    kernel_SCRIPT_FLAGS_VERIFY_NONE                = 0,\n+    kernel_SCRIPT_FLAGS_VERIFY_P2SH                = (1U << 0), //!< evaluate P2SH (BIP16) subscripts\n+    kernel_SCRIPT_FLAGS_VERIFY_DERSIG              = (1U << 2), //!< enforce strict DER (BIP66) compliance\n+    kernel_SCRIPT_FLAGS_VERIFY_NULLDUMMY           = (1U << 4), //!< enforce NULLDUMMY (BIP147)\n+    kernel_SCRIPT_FLAGS_VERIFY_CHECKLOCKTIMEVERIFY = (1U << 9), //!< enable CHECKLOCKTIMEVERIFY (BIP65)\n+    kernel_SCRIPT_FLAGS_VERIFY_CHECKSEQUENCEVERIFY = (1U << 10), //!< enable CHECKSEQUENCEVERIFY (BIP112)\n+    kernel_SCRIPT_FLAGS_VERIFY_WITNESS             = (1U << 11), //!< enable WITNESS (BIP141)\n+\n+    kernel_SCRIPT_FLAGS_VERIFY_TAPROOT             = (1U << 17), //!< enable TAPROOT (BIPs 341 & 342)\n+    kernel_SCRIPT_FLAGS_VERIFY_ALL                 = kernel_SCRIPT_FLAGS_VERIFY_P2SH |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_DERSIG |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_NULLDUMMY |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_CHECKLOCKTIMEVERIFY |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_CHECKSEQUENCEVERIFY |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_WITNESS |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_TAPROOT\n+} kernel_ScriptFlags;\n+\n+/**\n+ * Chain type used for creating chain params.\n+ */\n+typedef enum {\n+    kernel_CHAIN_TYPE_MAINNET = 0,\n+    kernel_CHAIN_TYPE_TESTNET,\n+    kernel_CHAIN_TYPE_TESTNET_4,\n+    kernel_CHAIN_TYPE_SIGNET,\n+    kernel_CHAIN_TYPE_REGTEST,\n+} kernel_ChainType;\n+\n+/**\n+ * A type-safe block identifier.\n+ */\n+typedef struct {\n+    unsigned char hash[32];\n+} kernel_BlockHash;\n+\n+/**\n+ * Convenience struct for holding serialized data.\n+ */\n+typedef struct {\n+    unsigned char* data;\n+    size_t size;\n+} kernel_ByteArray;\n+\n+/**\n+ * @brief Create a new transaction from the serialized data.\n+ *\n+ * @param[in] raw_transaction     Non-null.\n+ * @param[in] raw_transaction_len Length of the serialized transaction.\n+ * @return                        The transaction, or null on error.\n+ */\n+kernel_Transaction* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_transaction_create(\n+    const unsigned char* raw_transaction, size_t raw_transaction_len\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the transaction.\n+ */\n+void kernel_transaction_destroy(kernel_Transaction* transaction);\n+\n+/**\n+ * @brief Create a script pubkey from serialized data.\n+ * @param[in] script_pubkey     Non-null.\n+ * @param[in] script_pubkey_len Length of the script pubkey data.\n+ * @return                      The script pubkey, or null on error.\n+ */\n+kernel_ScriptPubkey* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_script_pubkey_create(\n+    const unsigned char* script_pubkey, size_t script_pubkey_len\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * @brief Copies the script pubkey data into the returned byte array.\n+ * @param[in] script_pubkey Non-null.\n+ * @return                  The serialized script pubkey data.\n+ */\n+kernel_ByteArray* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_copy_script_pubkey_data(\n+        const kernel_ScriptPubkey* script_pubkey\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the script pubkey.\n+ */\n+void kernel_script_pubkey_destroy(kernel_ScriptPubkey* script_pubkey);\n+\n+/**\n+ * @brief Create a transaction output from a script pubkey and an amount.\n+ * @param[in] script_pubkey Non-null.\n+ * @param[in] amount        The amount associated with the script pubkey for this output.\n+ * @return                  The transaction output.\n+ */\n+kernel_TransactionOutput* kernel_transaction_output_create(\n+    kernel_ScriptPubkey* script_pubkey,\n+    int64_t amount\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the transaction output.\n+ */\n+void kernel_transaction_output_destroy(kernel_TransactionOutput* transaction_output);\n+\n+/**\n+ * @brief Verify if the input at input_index of tx_to spends the script pubkey\n+ * under the constraints specified by flags. If the witness flag is set the\n+ * amount parameter is used. If the taproot flag is set, the spent outputs\n+ * parameter is used to validate taproot transactions.\n+ *\n+ * @param[in] script_pubkey     Non-null, script pubkey to be spent.\n+ * @param[in] amount            Amount of the script pubkey's associated output. May be zero if\n+ *                              the witness flag is not set.\n+ * @param[in] tx_to             Non-null, transaction spending the script_pubkey.\n+ * @param[in] spent_outputs     Nullable if the taproot flag is not set. Points to an array of\n+ *                              outputs spent by the transaction.\n+ * @param[in] spent_outputs_len Length of the spent_outputs array.\n+ * @param[in] input_index       Index of the input in tx_to spending the script_pubkey.\n+ * @param[in] flags             Bitfield of kernel_ScriptFlags controlling validation constraints.\n+ * @param[out] status           Nullable, will be set to an error code if the operation fails.\n+ *                              Should be set to kernel_SCRIPT_VERIFY_OK.\n+ * @return                      True if the script is valid.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_verify_script(\n+    const kernel_ScriptPubkey* script_pubkey,\n+    int64_t amount,\n+    const kernel_Transaction* tx_to,\n+    const kernel_TransactionOutput** spent_outputs, size_t spent_outputs_len,\n+    unsigned int input_index,\n+    unsigned int flags,\n+    kernel_ScriptVerifyStatus* status\n+) BITCOINKERNEL_ARG_NONNULL(1) BITCOINKERNEL_ARG_NONNULL(3);\n+\n+/**\n+ * @brief This disables the global internal logger. No log messages will be\n+ * buffered internally anymore once this is called and the buffer is cleared.\n+ * This function should only be called once. Log messages will be buffered until\n+ * this function is called, or a logging connection is created.\n+ */\n+void kernel_disable_logging();\n+\n+/**\n+ * @brief Set the log level of the global internal logger. This does not enable\n+ * the selected categories. Use `kernel_enable_log_category` to start logging\n+ * from a specific, or all categories.\n+ *\n+ * @param[in] category If kernel_LOG_ALL is chosen, all messages at the specified level\n+ *                     will be logged. Otherwise only messages from the specified category\n+ *                     will be logged at the specified level and above.\n+ * @param[in] level    Log level at which the log category is set.\n+ * @return             True on success.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_add_log_level_category(const kernel_LogCategory category, kernel_LogLevel level);\n+\n+/**\n+ * @brief Enable a specific log category for the global internal logger.\n+ *\n+ * @param[in] category If kernel_LOG_ALL is chosen, all categories will be enabled.\n+ * @return             True on success.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_enable_log_category(const kernel_LogCategory category);\n+\n+/**\n+ * Disable a specific log category for the global internal logger.\n+ *\n+ * @param[in] category If kernel_LOG_ALL is chosen, all categories will be disabled.\n+ * @return             True on success.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_disable_log_category(const kernel_LogCategory category);\n+\n+/**\n+ * @brief Start logging messages through the provided callback. Log messages\n+ * produced before this function is first called are buffered and on calling this\n+ * function are logged immediately.\n+ *\n+ * @param[in] callback  Non-null, function through which messages will be logged.\n+ * @param[in] user_data Nullable, holds a user-defined opaque structure. Is passed back\n+ *                      to the user through the callback.\n+ * @param[in] options   Sets formatting options of the log messages.\n+ * @return              A new kernel logging connection, or null on error.\n+ */\n+kernel_LoggingConnection* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_logging_connection_create(\n+    kernel_LogCallback callback,\n+    void* user_data,\n+    const kernel_LoggingOptions options\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Stop logging and destroy the logging connection.\n+ */\n+void kernel_logging_connection_destroy(kernel_LoggingConnection* logging_connection);\n+\n+/**\n+ * @brief Creates a chain parameters struct with default parameters based on the\n+ * passed in chain type.\n+ *\n+ * @param[in] chain_type Controls the chain parameters type created.\n+ * @return               An allocated chain parameters opaque struct.\n+ */\n+const kernel_ChainParameters* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_chain_parameters_create(\n+    const kernel_ChainType chain_type);\n+\n+/**\n+ * Destroy the chain parameters.\n+ */\n+void kernel_chain_parameters_destroy(const kernel_ChainParameters* chain_parameters);\n+\n+/**\n+ * @brief Creates an object for holding the kernel notification callbacks.\n+ *\n+ * @param[in] callbacks Holds the callbacks that will be invoked by the kernel notifications.\n+ */\n+kernel_Notifications* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_notifications_create(\n+    kernel_NotificationInterfaceCallbacks callbacks);\n+\n+/**\n+ * Destroy the kernel notifications.\n+ */\n+void kernel_notifications_destroy(const kernel_Notifications* notifications);\n+\n+/**\n+ * Creates an empty context options.\n+ */\n+kernel_ContextOptions* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_context_options_create();\n+\n+/**\n+ * @brief Sets the chain params for the context options. The context created\n+ * with the options will be configured for these chain parameters.\n+ *\n+ * @param[in] context_options  Non-null, previously created with kernel_context_options_create.\n+ * @param[in] chain_parameters Is set to the context options.\n+ */\n+void kernel_context_options_set_chainparams(\n+    kernel_ContextOptions* context_options,\n+    const kernel_ChainParameters* chain_parameters\n+) BITCOINKERNEL_ARG_NONNULL(1) BITCOINKERNEL_ARG_NONNULL(2);\n+\n+/**\n+ * @brief Set the kernel notifications for the context options. The context\n+ * created with the options will be configured with these notifications.\n+ *\n+ * @param[in] context_options Non-null, previously created with kernel_context_options_create.\n+ * @param[in] notifications   Is set to the context options.\n+ */\n+void kernel_context_options_set_notifications(\n+    kernel_ContextOptions* context_options,\n+    const kernel_Notifications* notifications\n+) BITCOINKERNEL_ARG_NONNULL(1) BITCOINKERNEL_ARG_NONNULL(2);\n+\n+/**\n+ * Destroy the context options.\n+ */\n+void kernel_context_options_destroy(kernel_ContextOptions* context_options);\n+\n+/**\n+ * @brief Create a new kernel context. If the options have not been previously\n+ * set, their corresponding fields will be initialized to default values; the\n+ * context will assume mainnet chain parameters and won't attempt to call the\n+ * kernel notification callbacks.\n+ *\n+ * @param[in] context_options Nullable, created with kernel_context_options_create.\n+ * @return                    The allocated kernel context, or null on error.\n+ */\n+kernel_Context* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_context_create(\n+    const kernel_ContextOptions* context_options);\n+\n+/**\n+ * @brief Interrupt can be used to halt long-running validation functions like\n+ * when reindexing, importing or processing blocks.\n+ *\n+ * @param[in] context  Non-null.\n+ * @return             True if the interrupt was successful.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_context_interrupt(\n+    kernel_Context* context\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the context.\n+ */\n+void kernel_context_destroy(kernel_Context* context);\n+\n+/**\n+ * @brief Create options for the chainstate manager.\n+ *\n+ * @param[in] context        Non-null, the created options will associate with this kernel context\n+ *                           for the duration of their lifetime. The same context needs to be used\n+ *                           when instantiating the chainstate manager.\n+ * @param[in] data_directory Non-null, directory containing the chainstate data. If the directory\n+ *                           does not exist yet, it will be created.\n+ * @return                   The allocated chainstate manager options, or null on error.\n+ */\n+kernel_ChainstateManagerOptions* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_chainstate_manager_options_create(\n+    const kernel_Context* context,\n+    const char* data_directory\n+) BITCOINKERNEL_ARG_NONNULL(1) BITCOINKERNEL_ARG_NONNULL(2);\n+\n+/**\n+ * Destroy the chainstate manager options.\n+ */\n+void kernel_chainstate_manager_options_destroy(kernel_ChainstateManagerOptions* chainstate_manager_options);\n+\n+/**\n+ * @brief Create options for the block manager. The block manager is used\n+ * internally by the chainstate manager for block storage and indexing.\n+ *\n+ * @param[in] context          Non-null, the created options will associate with this kernel context\n+ *                             for the duration of their lifetime. The same context needs to be used\n+ *                             when instantiating the chainstate manager.\n+ * @param[in] blocks_directory Non-null, directory containing the block data. If the directory does\n+ *                             not exist yet, it will be created.\n+ * @return                     The allocated block manager options, or null on error.\n+ */\n+kernel_BlockManagerOptions* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_block_manager_options_create(\n+    const kernel_Context* context,\n+    const char* blocks_directory\n+) BITCOINKERNEL_ARG_NONNULL(1) BITCOINKERNEL_ARG_NONNULL(2);\n+\n+/**\n+ * @brief Set the number of available worker threads used during validation.\n+ *\n+ * @param[in] chainstate_manager_options Non-null, options to be set.\n+ * @param[in] worker_threads The number of worker threads that should be spawned in the thread pool\n+ *                           used for validation. The number should be greater than 0.\n+ */\n+void kernel_chainstate_manager_options_set_worker_threads_num(\n+        kernel_ChainstateManagerOptions* chainstate_manager_options,\n+        int worker_threads\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the block manager options.\n+ */\n+void kernel_block_manager_options_destroy(kernel_BlockManagerOptions* block_manager_options);\n+\n+/**\n+ * @brief Create a chainstate manager. This is the main object for many\n+ * validation tasks as well as for retrieving data from the chain. It is only\n+ * valid for as long as the passed in context also remains in memory.\n+ *\n+ * @param[in] chainstate_manager_options Non-null, created by kernel_chainstate_manager_options_create.\n+ * @param[in] block_manager_options      Non-null, created by kernel_block_manager_options_create.\n+ * @param[in] context                    Non-null, the created chainstate manager will associate with this\n+ *                                       kernel context for the duration of its lifetime. The same context\n+ *                                       needs to be used for later interactions with the chainstate manager.\n+ * @return                               The allocated chainstate manager, or null on error.\n+ */\n+kernel_ChainstateManager* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_chainstate_manager_create(\n+    kernel_ChainstateManagerOptions* chainstate_manager_options,\n+    kernel_BlockManagerOptions* block_manager_options,\n+    const kernel_Context* context\n+) BITCOINKERNEL_ARG_NONNULL(1) BITCOINKERNEL_ARG_NONNULL(2) BITCOINKERNEL_ARG_NONNULL(3);\n+\n+/**\n+ * Destroy the chainstate manager.\n+ */\n+void kernel_chainstate_manager_destroy(kernel_ChainstateManager* chainstate_manager, const kernel_Context* context);",
      "path": "src/kernel/bitcoinkernel.h",
      "position": 751,
      "original_position": 746,
      "commit_id": "34a8429ff3a870c0caaf4c4790becd86c5acde38",
      "original_commit_id": "f1b3ab751bfe374095427796af00f6fdd50ec3e5",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "What's the point of the `context` parameter - it seems unused, and inconsistent with the other `_destroy` functions?",
      "created_at": "2024-11-19T18:01:27Z",
      "updated_at": "2024-11-19T19:19:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1848821020",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1848821020"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 751,
      "original_line": 751,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1848822043",
      "pull_request_review_id": 2297633388,
      "id": 1848822043,
      "node_id": "PRRC_kwDOABII585uMskb",
      "diff_hunk": "@@ -0,0 +1,1186 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_KERNEL_BITCOINKERNEL_H\n+#define BITCOIN_KERNEL_BITCOINKERNEL_H\n+\n+#ifndef __cplusplus\n+#include <stdbool.h>\n+#include <stddef.h>\n+#include <stdint.h>\n+#else\n+#include <cstddef>\n+#include <cstdint>\n+#endif // __cplusplus\n+\n+\n+#if !defined(BITCOINKERNEL_GNUC_PREREQ)\n+#if defined(__GNUC__) && defined(__GNUC_MINOR__)\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) \\\n+    ((__GNUC__ << 16) + __GNUC_MINOR__ >= ((_maj) << 16) + (_min))\n+#else\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) 0\n+#endif\n+#endif\n+\n+/* Warning attributes */\n+#if defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT __attribute__((__warn_unused_result__))\n+#else\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT\n+#endif\n+#if !defined(BITCOINKERNEL_BUILD) && defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_ARG_NONNULL(_x) __attribute__((__nonnull__(_x)))\n+#else\n+#define BITCOINKERNEL_ARG_NONNULL(_x)\n+#endif\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif // __cplusplus\n+\n+/**\n+ * ------ Context ------\n+ *\n+ * The library provides a built-in static constant kernel context. This context\n+ * offers only limited functionality. It detects and self-checks the correct\n+ * sha256 implementation, initializes the random number generator and\n+ * self-checks the secp256k1 static context. It is used internally for otherwise\n+ * \"context-free\" operations.\n+ *\n+ * The user can create their own context for passing it to state-rich validation\n+ * functions and holding callbacks for kernel events.\n+ *\n+ * ------ Error handling ------\n+ *\n+ * Functions communicate an error through their return types, usually returning\n+ * a nullptr, or false if an error is encountered. Additionally, verification\n+ * functions, e.g. for scripts, may communicate more detailed error information\n+ * through status code out parameters.\n+ *\n+ * Fine-grained validation information is communicated through the validation\n+ * interface.\n+ *\n+ * The kernel notifications issue callbacks for errors. These are usually\n+ * indicative of a system error. If such an error is issued, it is recommended\n+ * to halt and tear down the existing kernel objects. Remediating the error may\n+ * require system intervention by the user.\n+ *\n+ * ------ Pointer and argument conventions ------\n+ *\n+ * The user is responsible for de-allocating the memory owned by pointers\n+ * returned by functions. Typically pointers returned by *_create(...) functions\n+ * can be de-allocated by corresponding *_destroy(...) functions.\n+ *\n+ * Pointer arguments make no assumptions on their lifetime. Once the function\n+ * returns the user can safely de-allocate the passed in arguments.\n+ *\n+ * Pointers passed by callbacks are not owned by the user and are only valid for\n+ * the duration of it. They should not be de-allocated by the user.\n+ *\n+ * Array lengths follow the pointer argument they describe.\n+ */\n+\n+/**\n+ * Opaque data structure for holding a transaction.\n+ */\n+typedef struct kernel_Transaction kernel_Transaction;\n+\n+/**\n+ * Opaque data structure for holding a script pubkey.\n+ */\n+typedef struct kernel_ScriptPubkey kernel_ScriptPubkey;\n+\n+/**\n+ * Opaque data structure for holding a transaction output.\n+ */\n+typedef struct kernel_TransactionOutput kernel_TransactionOutput;\n+\n+/**\n+ * Opaque data structure for holding a logging connection.\n+ *\n+ * The logging connection can be used to manually stop logging.\n+ *\n+ * Messages that were logged before a connection is created are buffered in a\n+ * 1MB buffer. Logging can alternatively be permanently disabled by calling\n+ * kernel_disable_logging().\n+ */\n+typedef struct kernel_LoggingConnection kernel_LoggingConnection;\n+\n+/**\n+ * Opaque data structure for holding the chain parameters.\n+ *\n+ * These are eventually placed into a kernel context through the kernel context\n+ * options. The parameters describe the properties of a chain, and may be\n+ * instantiated for either mainnet, testnet, signet, or regtest.\n+ */\n+typedef struct kernel_ChainParameters kernel_ChainParameters;\n+\n+/**\n+ * Opaque data structure for holding callbacks for reacting to events that may\n+ * be encountered during library operations.\n+ */\n+typedef struct kernel_Notifications kernel_Notifications;\n+\n+/**\n+ * Opaque data structure for holding options for creating a new kernel context.\n+ *\n+ * Once a kernel context has been created from these options, they may be\n+ * destroyed. The options hold the notification callbacks as well as the\n+ * selected chain type until they are passed to the context. Their content and\n+ * scope can be expanded over time.\n+ */\n+typedef struct kernel_ContextOptions kernel_ContextOptions;\n+\n+/**\n+ * Opaque data structure for holding a kernel context.\n+ *\n+ * The kernel context is used to initialize internal state and hold the chain\n+ * parameters and callbacks for handling error and validation events. Once other\n+ * validation objects are instantiated from it, the context needs to be kept in\n+ * memory for the duration of their lifetimes.\n+ *\n+ * The processing of validation events is done through an internal task\n+ * runner owned by the context. The task runner drives the execution of events\n+ * triggering validation interface callbacks. Multiple validation interfaces can\n+ * be registered with the context. The kernel will create an event for each of\n+ * the registered validation interfaces through the task runner.\n+ *\n+ * A constructed context can be safely used from multiple threads, but functions\n+ * taking it as a non-cost argument need exclusive access to it.\n+ */\n+typedef struct kernel_Context kernel_Context;\n+\n+/**\n+ * Opaque data structure for holding a block index pointer.\n+ *\n+ * This is a pointer to an element in the block index currently in memory of the\n+ * chainstate manager. It is valid for the lifetime of the chainstate manager it\n+ * was retrieved from.\n+ */\n+typedef struct kernel_BlockIndex kernel_BlockIndex;\n+\n+/**\n+ * Opaque data structure for holding options for creating a new chainstate\n+ * manager.\n+ *\n+ * The chainstate manager options are used to set some parameters for the\n+ * chainstate manager. For now it just holds default options.\n+ */\n+typedef struct kernel_ChainstateManagerOptions kernel_ChainstateManagerOptions;\n+\n+/**\n+ * Opaque data structure for holding options for creating a new chainstate\n+ * manager.\n+ *\n+ * The chainstate manager has an internal block manager that takes its own set\n+ * of parameters. It is initialized with default options.\n+ */\n+typedef struct kernel_BlockManagerOptions kernel_BlockManagerOptions;\n+\n+/**\n+ * Opaque data structure for holding a chainstate manager.\n+ *\n+ * The chainstate manager is the central object for doing validation tasks as\n+ * well as retrieving data from the chain. Internally it is a complex data\n+ * structure with diverse functionality.\n+ *\n+ * The chainstate manager is only valid for as long as the context with which it\n+ * was created remains in memory.\n+ *\n+ * Its functionality will be more and more exposed in the future.\n+ */\n+typedef struct kernel_ChainstateManager kernel_ChainstateManager;\n+\n+/**\n+ * Opaque data structure for holding parameters used for loading the chainstate\n+ * of a chainstate manager.\n+ *\n+ * Is initialized with default parameters.\n+ */\n+typedef struct kernel_ChainstateLoadOptions kernel_ChainstateLoadOptions;\n+\n+/**\n+ * Opaque data structure for holding a block.\n+ */\n+typedef struct kernel_Block kernel_Block;\n+\n+/**\n+ * Opaque data structure for holding a non-owned block. This is typically a\n+ * block available to the user through one of the validation callbacks.\n+ */\n+typedef struct kernel_BlockPointer kernel_BlockPointer;\n+\n+/**\n+ * Opaque data structure for holding the state of a block during validation.\n+ *\n+ * Contains information indicating whether validation was successful, and if not\n+ * which step during block validation failed.\n+ */\n+typedef struct kernel_BlockValidationState kernel_BlockValidationState;\n+\n+/**\n+ * Opaque data structure for holding a validation interface.\n+ *\n+ * The validation interface can be registered with the internal task runner of an\n+ * existing context. It holds callbacks that will be triggered by certain\n+ * validation events. The callbacks registered with it will block further\n+ * validation progress when triggered.\n+ */\n+typedef struct kernel_ValidationInterface kernel_ValidationInterface;\n+\n+/**\n+ * Opaque data structure for holding a block undo struct.\n+ *\n+ * It holds all the previous outputs consumed by all transactions in a specific\n+ * block. Internally it holds a nested vector. The top level vector has an entry\n+ * for each transaction in a block (in order of the actual transactions of the\n+ * block and minus the coinbase transaction). Each entry is in turn a vector of\n+ * all the previous outputs of a transaction (in order of their corresponding\n+ * inputs).\n+ */\n+typedef struct kernel_BlockUndo kernel_BlockUndo;\n+\n+/** Current sync state passed to tip changed callbacks. */\n+typedef enum {\n+    kernel_INIT_REINDEX,\n+    kernel_INIT_DOWNLOAD,\n+    kernel_POST_INIT\n+} kernel_SynchronizationState;\n+\n+/** Possible warning types issued by validation. */\n+typedef enum {\n+    kernel_UNKNOWN_NEW_RULES_ACTIVATED,\n+    kernel_LARGE_WORK_INVALID_CHAIN\n+} kernel_Warning;\n+\n+/** Callback function types */\n+\n+/**\n+ * Function signature for the global logging callback. All bitcoin kernel\n+ * internal logs will pass through this callback.\n+ */\n+typedef void (*kernel_LogCallback)(void* user_data, const char* message);\n+\n+/**\n+ * Function signatures for the kernel notifications.\n+ */\n+typedef void (*kernel_NotifyBlockTip)(void* user_data, kernel_SynchronizationState state, kernel_BlockIndex* index);\n+typedef void (*kernel_NotifyHeaderTip)(void* user_data, kernel_SynchronizationState state, int64_t height, int64_t timestamp, bool presync);\n+typedef void (*kernel_NotifyProgress)(void* user_data, const char* title, int progress_percent, bool resume_possible);\n+typedef void (*kernel_NotifyWarningSet)(void* user_data, kernel_Warning warning, const char* message);\n+typedef void (*kernel_NotifyWarningUnset)(void* user_data, kernel_Warning warning);\n+typedef void (*kernel_NotifyFlushError)(void* user_data, const char* message);\n+typedef void (*kernel_NotifyFatalError)(void* user_data, const char* message);\n+\n+/**\n+ * Function signatures for the validation interface.\n+ */\n+typedef void (*kernel_ValidationInterfaceBlockChecked)(void* user_data, const kernel_BlockPointer* block, const kernel_BlockValidationState* state);\n+\n+/**\n+ * Whether a validated data structure is valid, invalid, or an error was\n+ * encountered during processing.\n+ */\n+typedef enum {\n+    kernel_VALIDATION_STATE_VALID = 0,\n+    kernel_VALIDATION_STATE_INVALID,\n+    kernel_VALIDATION_STATE_ERROR,\n+} kernel_ValidationMode;\n+\n+/**\n+ * A granular \"reason\" why a block was invalid.\n+ */\n+typedef enum {\n+    kernel_BLOCK_RESULT_UNSET = 0, //!< initial value. Block has not yet been rejected\n+    kernel_BLOCK_CONSENSUS,        //!< invalid by consensus rules (excluding any below reasons)\n+    kernel_BLOCK_CACHED_INVALID,  //!< this block was cached as being invalid and we didn't store the reason why\n+    kernel_BLOCK_INVALID_HEADER,  //!< invalid proof of work or time too old\n+    kernel_BLOCK_MUTATED,         //!< the block's data didn't match the data committed to by the PoW\n+    kernel_BLOCK_MISSING_PREV,    //!< We don't have the previous block the checked one is built on\n+    kernel_BLOCK_INVALID_PREV,    //!< A block this one builds on is invalid\n+    kernel_BLOCK_TIME_FUTURE,     //!< block timestamp was > 2 hours in the future (or our clock is bad)\n+    kernel_BLOCK_CHECKPOINT,      //!< the block failed to meet one of our checkpoints\n+    kernel_BLOCK_HEADER_LOW_WORK, //!< the block header may be on a too-little-work chain\n+} kernel_BlockValidationResult;\n+\n+/**\n+ * Holds the validation interface callbacks. The user data pointer may be used\n+ * to point to user-defined structures to make processing the validation\n+ * callbacks easier.\n+ */\n+typedef struct {\n+    void* user_data;                                      //!< Holds a user-defined opaque structure that is passed to the validation\n+                                                          //!< interface callbacks.\n+    kernel_ValidationInterfaceBlockChecked block_checked; //!< Called when a new block has been checked. Contains the\n+                                                          //!< result of its validation.\n+} kernel_ValidationInterfaceCallbacks;\n+\n+/**\n+ * A struct for holding the kernel notification callbacks. The user data\n+ * pointer may be used to point to user-defined structures to make processing\n+ * the notifications easier. Note that this makes it the user's responsibility\n+ * to ensure that the user_data outlives the kernel objects. Notifications can\n+ * occur even as kernel objects are deleted, so care has to be taken to ensure\n+ * safe unwinding.\n+ */\n+typedef struct {\n+    void* user_data;                         //!< Holds a user-defined opaque structure that is passed to the notification callbacks.\n+    kernel_NotifyBlockTip block_tip;         //!< The chain's tip was updated to the provided block index.\n+    kernel_NotifyHeaderTip header_tip;       //!< A new best block header was added.\n+    kernel_NotifyProgress progress;          //!< Reports on current block synchronization progress.\n+    kernel_NotifyWarningSet warning_set;     //!< A warning issued by the kernel library during validation.\n+    kernel_NotifyWarningUnset warning_unset; //!< A previous condition leading to the issuance of a warning is no longer given.\n+    kernel_NotifyFlushError flush_error;     //!< An error encountered when flushing data to disk.\n+    kernel_NotifyFatalError fatal_error;     //!< A un-recoverable system error encountered by the library.\n+} kernel_NotificationInterfaceCallbacks;\n+\n+/**\n+ * A collection of logging categories that may be encountered by kernel code.\n+ */\n+typedef enum {\n+    kernel_LOG_ALL = 0,\n+    kernel_LOG_BENCH,\n+    kernel_LOG_BLOCKSTORAGE,\n+    kernel_LOG_COINDB,\n+    kernel_LOG_LEVELDB,\n+    kernel_LOG_LOCK,\n+    kernel_LOG_MEMPOOL,\n+    kernel_LOG_PRUNE,\n+    kernel_LOG_RAND,\n+    kernel_LOG_REINDEX,\n+    kernel_LOG_VALIDATION,\n+    kernel_LOG_KERNEL,\n+} kernel_LogCategory;\n+\n+/**\n+ * The level at which logs should be produced.\n+ */\n+typedef enum {\n+    kernel_LOG_INFO = 0,\n+    kernel_LOG_DEBUG,\n+    kernel_LOG_TRACE,\n+} kernel_LogLevel;\n+\n+/**\n+ * Options controlling the format of log messages.\n+ */\n+typedef struct {\n+    bool log_timestamps;               //!< Prepend a timestamp to log messages.\n+    bool log_time_micros;              //!< Log timestamps in microsecond precision.\n+    bool log_threadnames;              //!< Prepend the name of the thread to log messages.\n+    bool log_sourcelocations;          //!< Prepend the source location to log messages.\n+    bool always_print_category_levels; //!< Prepend the log category and level to log messages.\n+} kernel_LoggingOptions;\n+\n+/**\n+ * A collection of status codes that may be issued by the script verify function.\n+ */\n+typedef enum {\n+    kernel_SCRIPT_VERIFY_OK = 0,\n+    kernel_SCRIPT_VERIFY_ERROR_TX_INPUT_INDEX, //!< The provided input index is out of range of the actual number of inputs of the transaction.\n+    kernel_SCRIPT_VERIFY_ERROR_INVALID_FLAGS, //!< The provided bitfield for the flags was invalid.\n+    kernel_SCRIPT_VERIFY_ERROR_INVALID_FLAGS_COMBINATION, //!< The flags very combined in an invalid way.\n+    kernel_SCRIPT_VERIFY_ERROR_SPENT_OUTPUTS_REQUIRED, //!< The taproot flag was set, so valid spent_outputs have to be provided.\n+    kernel_SCRIPT_VERIFY_ERROR_SPENT_OUTPUTS_MISMATCH, //!< The number of spent outputs does not match the number of inputs of the tx.\n+} kernel_ScriptVerifyStatus;\n+\n+/**\n+ * Script verification flags that may be composed with each other.\n+ */\n+typedef enum\n+{\n+    kernel_SCRIPT_FLAGS_VERIFY_NONE                = 0,\n+    kernel_SCRIPT_FLAGS_VERIFY_P2SH                = (1U << 0), //!< evaluate P2SH (BIP16) subscripts\n+    kernel_SCRIPT_FLAGS_VERIFY_DERSIG              = (1U << 2), //!< enforce strict DER (BIP66) compliance\n+    kernel_SCRIPT_FLAGS_VERIFY_NULLDUMMY           = (1U << 4), //!< enforce NULLDUMMY (BIP147)\n+    kernel_SCRIPT_FLAGS_VERIFY_CHECKLOCKTIMEVERIFY = (1U << 9), //!< enable CHECKLOCKTIMEVERIFY (BIP65)\n+    kernel_SCRIPT_FLAGS_VERIFY_CHECKSEQUENCEVERIFY = (1U << 10), //!< enable CHECKSEQUENCEVERIFY (BIP112)\n+    kernel_SCRIPT_FLAGS_VERIFY_WITNESS             = (1U << 11), //!< enable WITNESS (BIP141)\n+\n+    kernel_SCRIPT_FLAGS_VERIFY_TAPROOT             = (1U << 17), //!< enable TAPROOT (BIPs 341 & 342)\n+    kernel_SCRIPT_FLAGS_VERIFY_ALL                 = kernel_SCRIPT_FLAGS_VERIFY_P2SH |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_DERSIG |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_NULLDUMMY |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_CHECKLOCKTIMEVERIFY |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_CHECKSEQUENCEVERIFY |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_WITNESS |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_TAPROOT\n+} kernel_ScriptFlags;\n+\n+/**\n+ * Chain type used for creating chain params.\n+ */\n+typedef enum {\n+    kernel_CHAIN_TYPE_MAINNET = 0,\n+    kernel_CHAIN_TYPE_TESTNET,\n+    kernel_CHAIN_TYPE_TESTNET_4,\n+    kernel_CHAIN_TYPE_SIGNET,\n+    kernel_CHAIN_TYPE_REGTEST,\n+} kernel_ChainType;\n+\n+/**\n+ * A type-safe block identifier.\n+ */\n+typedef struct {\n+    unsigned char hash[32];\n+} kernel_BlockHash;\n+\n+/**\n+ * Convenience struct for holding serialized data.\n+ */\n+typedef struct {\n+    unsigned char* data;\n+    size_t size;\n+} kernel_ByteArray;\n+\n+/**\n+ * @brief Create a new transaction from the serialized data.\n+ *\n+ * @param[in] raw_transaction     Non-null.\n+ * @param[in] raw_transaction_len Length of the serialized transaction.\n+ * @return                        The transaction, or null on error.\n+ */\n+kernel_Transaction* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_transaction_create(\n+    const unsigned char* raw_transaction, size_t raw_transaction_len\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the transaction.\n+ */\n+void kernel_transaction_destroy(kernel_Transaction* transaction);\n+\n+/**\n+ * @brief Create a script pubkey from serialized data.\n+ * @param[in] script_pubkey     Non-null.\n+ * @param[in] script_pubkey_len Length of the script pubkey data.\n+ * @return                      The script pubkey, or null on error.\n+ */\n+kernel_ScriptPubkey* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_script_pubkey_create(\n+    const unsigned char* script_pubkey, size_t script_pubkey_len\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * @brief Copies the script pubkey data into the returned byte array.\n+ * @param[in] script_pubkey Non-null.\n+ * @return                  The serialized script pubkey data.\n+ */\n+kernel_ByteArray* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_copy_script_pubkey_data(\n+        const kernel_ScriptPubkey* script_pubkey\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the script pubkey.\n+ */\n+void kernel_script_pubkey_destroy(kernel_ScriptPubkey* script_pubkey);\n+\n+/**\n+ * @brief Create a transaction output from a script pubkey and an amount.\n+ * @param[in] script_pubkey Non-null.\n+ * @param[in] amount        The amount associated with the script pubkey for this output.\n+ * @return                  The transaction output.\n+ */\n+kernel_TransactionOutput* kernel_transaction_output_create(\n+    kernel_ScriptPubkey* script_pubkey,\n+    int64_t amount\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the transaction output.\n+ */\n+void kernel_transaction_output_destroy(kernel_TransactionOutput* transaction_output);\n+\n+/**\n+ * @brief Verify if the input at input_index of tx_to spends the script pubkey\n+ * under the constraints specified by flags. If the witness flag is set the\n+ * amount parameter is used. If the taproot flag is set, the spent outputs\n+ * parameter is used to validate taproot transactions.\n+ *\n+ * @param[in] script_pubkey     Non-null, script pubkey to be spent.\n+ * @param[in] amount            Amount of the script pubkey's associated output. May be zero if\n+ *                              the witness flag is not set.\n+ * @param[in] tx_to             Non-null, transaction spending the script_pubkey.\n+ * @param[in] spent_outputs     Nullable if the taproot flag is not set. Points to an array of\n+ *                              outputs spent by the transaction.\n+ * @param[in] spent_outputs_len Length of the spent_outputs array.\n+ * @param[in] input_index       Index of the input in tx_to spending the script_pubkey.\n+ * @param[in] flags             Bitfield of kernel_ScriptFlags controlling validation constraints.\n+ * @param[out] status           Nullable, will be set to an error code if the operation fails.\n+ *                              Should be set to kernel_SCRIPT_VERIFY_OK.\n+ * @return                      True if the script is valid.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_verify_script(\n+    const kernel_ScriptPubkey* script_pubkey,\n+    int64_t amount,\n+    const kernel_Transaction* tx_to,\n+    const kernel_TransactionOutput** spent_outputs, size_t spent_outputs_len,\n+    unsigned int input_index,\n+    unsigned int flags,\n+    kernel_ScriptVerifyStatus* status\n+) BITCOINKERNEL_ARG_NONNULL(1) BITCOINKERNEL_ARG_NONNULL(3);\n+\n+/**\n+ * @brief This disables the global internal logger. No log messages will be\n+ * buffered internally anymore once this is called and the buffer is cleared.\n+ * This function should only be called once. Log messages will be buffered until\n+ * this function is called, or a logging connection is created.\n+ */\n+void kernel_disable_logging();\n+\n+/**\n+ * @brief Set the log level of the global internal logger. This does not enable\n+ * the selected categories. Use `kernel_enable_log_category` to start logging\n+ * from a specific, or all categories.\n+ *\n+ * @param[in] category If kernel_LOG_ALL is chosen, all messages at the specified level\n+ *                     will be logged. Otherwise only messages from the specified category\n+ *                     will be logged at the specified level and above.\n+ * @param[in] level    Log level at which the log category is set.\n+ * @return             True on success.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_add_log_level_category(const kernel_LogCategory category, kernel_LogLevel level);\n+\n+/**\n+ * @brief Enable a specific log category for the global internal logger.\n+ *\n+ * @param[in] category If kernel_LOG_ALL is chosen, all categories will be enabled.\n+ * @return             True on success.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_enable_log_category(const kernel_LogCategory category);\n+\n+/**\n+ * Disable a specific log category for the global internal logger.\n+ *\n+ * @param[in] category If kernel_LOG_ALL is chosen, all categories will be disabled.\n+ * @return             True on success.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_disable_log_category(const kernel_LogCategory category);\n+\n+/**\n+ * @brief Start logging messages through the provided callback. Log messages\n+ * produced before this function is first called are buffered and on calling this\n+ * function are logged immediately.\n+ *\n+ * @param[in] callback  Non-null, function through which messages will be logged.\n+ * @param[in] user_data Nullable, holds a user-defined opaque structure. Is passed back\n+ *                      to the user through the callback.\n+ * @param[in] options   Sets formatting options of the log messages.\n+ * @return              A new kernel logging connection, or null on error.\n+ */\n+kernel_LoggingConnection* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_logging_connection_create(\n+    kernel_LogCallback callback,\n+    void* user_data,\n+    const kernel_LoggingOptions options\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Stop logging and destroy the logging connection.\n+ */\n+void kernel_logging_connection_destroy(kernel_LoggingConnection* logging_connection);\n+\n+/**\n+ * @brief Creates a chain parameters struct with default parameters based on the\n+ * passed in chain type.\n+ *\n+ * @param[in] chain_type Controls the chain parameters type created.\n+ * @return               An allocated chain parameters opaque struct.\n+ */\n+const kernel_ChainParameters* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_chain_parameters_create(\n+    const kernel_ChainType chain_type);\n+\n+/**\n+ * Destroy the chain parameters.\n+ */\n+void kernel_chain_parameters_destroy(const kernel_ChainParameters* chain_parameters);\n+\n+/**\n+ * @brief Creates an object for holding the kernel notification callbacks.\n+ *\n+ * @param[in] callbacks Holds the callbacks that will be invoked by the kernel notifications.\n+ */\n+kernel_Notifications* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_notifications_create(\n+    kernel_NotificationInterfaceCallbacks callbacks);\n+\n+/**\n+ * Destroy the kernel notifications.\n+ */\n+void kernel_notifications_destroy(const kernel_Notifications* notifications);\n+\n+/**\n+ * Creates an empty context options.\n+ */\n+kernel_ContextOptions* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_context_options_create();\n+\n+/**\n+ * @brief Sets the chain params for the context options. The context created\n+ * with the options will be configured for these chain parameters.\n+ *\n+ * @param[in] context_options  Non-null, previously created with kernel_context_options_create.\n+ * @param[in] chain_parameters Is set to the context options.\n+ */\n+void kernel_context_options_set_chainparams(\n+    kernel_ContextOptions* context_options,\n+    const kernel_ChainParameters* chain_parameters\n+) BITCOINKERNEL_ARG_NONNULL(1) BITCOINKERNEL_ARG_NONNULL(2);\n+\n+/**\n+ * @brief Set the kernel notifications for the context options. The context\n+ * created with the options will be configured with these notifications.\n+ *\n+ * @param[in] context_options Non-null, previously created with kernel_context_options_create.\n+ * @param[in] notifications   Is set to the context options.\n+ */\n+void kernel_context_options_set_notifications(\n+    kernel_ContextOptions* context_options,\n+    const kernel_Notifications* notifications\n+) BITCOINKERNEL_ARG_NONNULL(1) BITCOINKERNEL_ARG_NONNULL(2);\n+\n+/**\n+ * Destroy the context options.\n+ */\n+void kernel_context_options_destroy(kernel_ContextOptions* context_options);\n+\n+/**\n+ * @brief Create a new kernel context. If the options have not been previously\n+ * set, their corresponding fields will be initialized to default values; the\n+ * context will assume mainnet chain parameters and won't attempt to call the\n+ * kernel notification callbacks.\n+ *\n+ * @param[in] context_options Nullable, created with kernel_context_options_create.\n+ * @return                    The allocated kernel context, or null on error.\n+ */\n+kernel_Context* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_context_create(\n+    const kernel_ContextOptions* context_options);\n+\n+/**\n+ * @brief Interrupt can be used to halt long-running validation functions like\n+ * when reindexing, importing or processing blocks.\n+ *\n+ * @param[in] context  Non-null.\n+ * @return             True if the interrupt was successful.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_context_interrupt(\n+    kernel_Context* context\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the context.\n+ */\n+void kernel_context_destroy(kernel_Context* context);\n+\n+/**\n+ * @brief Create options for the chainstate manager.\n+ *\n+ * @param[in] context        Non-null, the created options will associate with this kernel context\n+ *                           for the duration of their lifetime. The same context needs to be used\n+ *                           when instantiating the chainstate manager.\n+ * @param[in] data_directory Non-null, directory containing the chainstate data. If the directory\n+ *                           does not exist yet, it will be created.\n+ * @return                   The allocated chainstate manager options, or null on error.\n+ */\n+kernel_ChainstateManagerOptions* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_chainstate_manager_options_create(\n+    const kernel_Context* context,\n+    const char* data_directory\n+) BITCOINKERNEL_ARG_NONNULL(1) BITCOINKERNEL_ARG_NONNULL(2);\n+\n+/**\n+ * Destroy the chainstate manager options.\n+ */\n+void kernel_chainstate_manager_options_destroy(kernel_ChainstateManagerOptions* chainstate_manager_options);\n+\n+/**\n+ * @brief Create options for the block manager. The block manager is used\n+ * internally by the chainstate manager for block storage and indexing.\n+ *\n+ * @param[in] context          Non-null, the created options will associate with this kernel context\n+ *                             for the duration of their lifetime. The same context needs to be used\n+ *                             when instantiating the chainstate manager.\n+ * @param[in] blocks_directory Non-null, directory containing the block data. If the directory does\n+ *                             not exist yet, it will be created.\n+ * @return                     The allocated block manager options, or null on error.\n+ */\n+kernel_BlockManagerOptions* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_block_manager_options_create(\n+    const kernel_Context* context,\n+    const char* blocks_directory\n+) BITCOINKERNEL_ARG_NONNULL(1) BITCOINKERNEL_ARG_NONNULL(2);\n+\n+/**\n+ * @brief Set the number of available worker threads used during validation.\n+ *\n+ * @param[in] chainstate_manager_options Non-null, options to be set.\n+ * @param[in] worker_threads The number of worker threads that should be spawned in the thread pool\n+ *                           used for validation. The number should be greater than 0.\n+ */\n+void kernel_chainstate_manager_options_set_worker_threads_num(\n+        kernel_ChainstateManagerOptions* chainstate_manager_options,\n+        int worker_threads\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the block manager options.\n+ */\n+void kernel_block_manager_options_destroy(kernel_BlockManagerOptions* block_manager_options);\n+\n+/**\n+ * @brief Create a chainstate manager. This is the main object for many\n+ * validation tasks as well as for retrieving data from the chain. It is only\n+ * valid for as long as the passed in context also remains in memory.\n+ *\n+ * @param[in] chainstate_manager_options Non-null, created by kernel_chainstate_manager_options_create.\n+ * @param[in] block_manager_options      Non-null, created by kernel_block_manager_options_create.\n+ * @param[in] context                    Non-null, the created chainstate manager will associate with this\n+ *                                       kernel context for the duration of its lifetime. The same context\n+ *                                       needs to be used for later interactions with the chainstate manager.\n+ * @return                               The allocated chainstate manager, or null on error.\n+ */\n+kernel_ChainstateManager* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_chainstate_manager_create(\n+    kernel_ChainstateManagerOptions* chainstate_manager_options,\n+    kernel_BlockManagerOptions* block_manager_options,\n+    const kernel_Context* context",
      "path": "src/kernel/bitcoinkernel.h",
      "position": null,
      "original_position": 740,
      "commit_id": "34a8429ff3a870c0caaf4c4790becd86c5acde38",
      "original_commit_id": "f1b3ab751bfe374095427796af00f6fdd50ec3e5",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: this is the only place where `context` is not the first option, would be nice for consistency?",
      "created_at": "2024-11-19T18:02:22Z",
      "updated_at": "2024-11-19T19:19:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1848822043",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1848822043"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 740,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1848935049",
      "pull_request_review_id": 2297633388,
      "id": 1848935049,
      "node_id": "PRRC_kwDOABII585uNIKJ",
      "diff_hunk": "@@ -0,0 +1,1186 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_KERNEL_BITCOINKERNEL_H\n+#define BITCOIN_KERNEL_BITCOINKERNEL_H\n+\n+#ifndef __cplusplus\n+#include <stdbool.h>\n+#include <stddef.h>\n+#include <stdint.h>\n+#else\n+#include <cstddef>\n+#include <cstdint>\n+#endif // __cplusplus\n+\n+\n+#if !defined(BITCOINKERNEL_GNUC_PREREQ)\n+#if defined(__GNUC__) && defined(__GNUC_MINOR__)\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) \\\n+    ((__GNUC__ << 16) + __GNUC_MINOR__ >= ((_maj) << 16) + (_min))\n+#else\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) 0\n+#endif\n+#endif\n+\n+/* Warning attributes */\n+#if defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT __attribute__((__warn_unused_result__))\n+#else\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT\n+#endif\n+#if !defined(BITCOINKERNEL_BUILD) && defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_ARG_NONNULL(_x) __attribute__((__nonnull__(_x)))\n+#else\n+#define BITCOINKERNEL_ARG_NONNULL(_x)\n+#endif\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif // __cplusplus\n+\n+/**\n+ * ------ Context ------\n+ *\n+ * The library provides a built-in static constant kernel context. This context\n+ * offers only limited functionality. It detects and self-checks the correct\n+ * sha256 implementation, initializes the random number generator and\n+ * self-checks the secp256k1 static context. It is used internally for otherwise\n+ * \"context-free\" operations.\n+ *\n+ * The user can create their own context for passing it to state-rich validation\n+ * functions and holding callbacks for kernel events.\n+ *\n+ * ------ Error handling ------\n+ *\n+ * Functions communicate an error through their return types, usually returning\n+ * a nullptr, or false if an error is encountered. Additionally, verification\n+ * functions, e.g. for scripts, may communicate more detailed error information\n+ * through status code out parameters.\n+ *\n+ * Fine-grained validation information is communicated through the validation\n+ * interface.\n+ *\n+ * The kernel notifications issue callbacks for errors. These are usually\n+ * indicative of a system error. If such an error is issued, it is recommended\n+ * to halt and tear down the existing kernel objects. Remediating the error may\n+ * require system intervention by the user.\n+ *\n+ * ------ Pointer and argument conventions ------\n+ *\n+ * The user is responsible for de-allocating the memory owned by pointers\n+ * returned by functions. Typically pointers returned by *_create(...) functions\n+ * can be de-allocated by corresponding *_destroy(...) functions.\n+ *\n+ * Pointer arguments make no assumptions on their lifetime. Once the function\n+ * returns the user can safely de-allocate the passed in arguments.\n+ *\n+ * Pointers passed by callbacks are not owned by the user and are only valid for\n+ * the duration of it. They should not be de-allocated by the user.\n+ *\n+ * Array lengths follow the pointer argument they describe.\n+ */\n+\n+/**\n+ * Opaque data structure for holding a transaction.\n+ */\n+typedef struct kernel_Transaction kernel_Transaction;\n+\n+/**\n+ * Opaque data structure for holding a script pubkey.\n+ */\n+typedef struct kernel_ScriptPubkey kernel_ScriptPubkey;\n+\n+/**\n+ * Opaque data structure for holding a transaction output.\n+ */\n+typedef struct kernel_TransactionOutput kernel_TransactionOutput;\n+\n+/**\n+ * Opaque data structure for holding a logging connection.\n+ *\n+ * The logging connection can be used to manually stop logging.\n+ *\n+ * Messages that were logged before a connection is created are buffered in a\n+ * 1MB buffer. Logging can alternatively be permanently disabled by calling\n+ * kernel_disable_logging().\n+ */\n+typedef struct kernel_LoggingConnection kernel_LoggingConnection;\n+\n+/**\n+ * Opaque data structure for holding the chain parameters.\n+ *\n+ * These are eventually placed into a kernel context through the kernel context\n+ * options. The parameters describe the properties of a chain, and may be\n+ * instantiated for either mainnet, testnet, signet, or regtest.\n+ */\n+typedef struct kernel_ChainParameters kernel_ChainParameters;\n+\n+/**\n+ * Opaque data structure for holding callbacks for reacting to events that may\n+ * be encountered during library operations.\n+ */\n+typedef struct kernel_Notifications kernel_Notifications;\n+\n+/**\n+ * Opaque data structure for holding options for creating a new kernel context.\n+ *\n+ * Once a kernel context has been created from these options, they may be\n+ * destroyed. The options hold the notification callbacks as well as the\n+ * selected chain type until they are passed to the context. Their content and\n+ * scope can be expanded over time.\n+ */\n+typedef struct kernel_ContextOptions kernel_ContextOptions;\n+\n+/**\n+ * Opaque data structure for holding a kernel context.\n+ *\n+ * The kernel context is used to initialize internal state and hold the chain\n+ * parameters and callbacks for handling error and validation events. Once other\n+ * validation objects are instantiated from it, the context needs to be kept in\n+ * memory for the duration of their lifetimes.\n+ *\n+ * The processing of validation events is done through an internal task\n+ * runner owned by the context. The task runner drives the execution of events\n+ * triggering validation interface callbacks. Multiple validation interfaces can\n+ * be registered with the context. The kernel will create an event for each of\n+ * the registered validation interfaces through the task runner.\n+ *\n+ * A constructed context can be safely used from multiple threads, but functions\n+ * taking it as a non-cost argument need exclusive access to it.\n+ */\n+typedef struct kernel_Context kernel_Context;\n+\n+/**\n+ * Opaque data structure for holding a block index pointer.\n+ *\n+ * This is a pointer to an element in the block index currently in memory of the\n+ * chainstate manager. It is valid for the lifetime of the chainstate manager it\n+ * was retrieved from.\n+ */\n+typedef struct kernel_BlockIndex kernel_BlockIndex;\n+\n+/**\n+ * Opaque data structure for holding options for creating a new chainstate\n+ * manager.\n+ *\n+ * The chainstate manager options are used to set some parameters for the\n+ * chainstate manager. For now it just holds default options.\n+ */\n+typedef struct kernel_ChainstateManagerOptions kernel_ChainstateManagerOptions;\n+\n+/**\n+ * Opaque data structure for holding options for creating a new chainstate\n+ * manager.\n+ *\n+ * The chainstate manager has an internal block manager that takes its own set\n+ * of parameters. It is initialized with default options.\n+ */\n+typedef struct kernel_BlockManagerOptions kernel_BlockManagerOptions;\n+\n+/**\n+ * Opaque data structure for holding a chainstate manager.\n+ *\n+ * The chainstate manager is the central object for doing validation tasks as\n+ * well as retrieving data from the chain. Internally it is a complex data\n+ * structure with diverse functionality.\n+ *\n+ * The chainstate manager is only valid for as long as the context with which it\n+ * was created remains in memory.\n+ *\n+ * Its functionality will be more and more exposed in the future.\n+ */\n+typedef struct kernel_ChainstateManager kernel_ChainstateManager;\n+\n+/**\n+ * Opaque data structure for holding parameters used for loading the chainstate\n+ * of a chainstate manager.\n+ *\n+ * Is initialized with default parameters.\n+ */\n+typedef struct kernel_ChainstateLoadOptions kernel_ChainstateLoadOptions;\n+\n+/**\n+ * Opaque data structure for holding a block.\n+ */\n+typedef struct kernel_Block kernel_Block;\n+\n+/**\n+ * Opaque data structure for holding a non-owned block. This is typically a\n+ * block available to the user through one of the validation callbacks.\n+ */\n+typedef struct kernel_BlockPointer kernel_BlockPointer;\n+\n+/**\n+ * Opaque data structure for holding the state of a block during validation.\n+ *\n+ * Contains information indicating whether validation was successful, and if not\n+ * which step during block validation failed.\n+ */\n+typedef struct kernel_BlockValidationState kernel_BlockValidationState;\n+\n+/**\n+ * Opaque data structure for holding a validation interface.\n+ *\n+ * The validation interface can be registered with the internal task runner of an\n+ * existing context. It holds callbacks that will be triggered by certain\n+ * validation events. The callbacks registered with it will block further\n+ * validation progress when triggered.\n+ */\n+typedef struct kernel_ValidationInterface kernel_ValidationInterface;\n+\n+/**\n+ * Opaque data structure for holding a block undo struct.\n+ *\n+ * It holds all the previous outputs consumed by all transactions in a specific\n+ * block. Internally it holds a nested vector. The top level vector has an entry\n+ * for each transaction in a block (in order of the actual transactions of the\n+ * block and minus the coinbase transaction). Each entry is in turn a vector of\n+ * all the previous outputs of a transaction (in order of their corresponding\n+ * inputs).\n+ */\n+typedef struct kernel_BlockUndo kernel_BlockUndo;\n+\n+/** Current sync state passed to tip changed callbacks. */\n+typedef enum {\n+    kernel_INIT_REINDEX,\n+    kernel_INIT_DOWNLOAD,\n+    kernel_POST_INIT\n+} kernel_SynchronizationState;\n+\n+/** Possible warning types issued by validation. */\n+typedef enum {\n+    kernel_UNKNOWN_NEW_RULES_ACTIVATED,\n+    kernel_LARGE_WORK_INVALID_CHAIN\n+} kernel_Warning;\n+\n+/** Callback function types */\n+\n+/**\n+ * Function signature for the global logging callback. All bitcoin kernel\n+ * internal logs will pass through this callback.\n+ */\n+typedef void (*kernel_LogCallback)(void* user_data, const char* message);\n+\n+/**\n+ * Function signatures for the kernel notifications.\n+ */\n+typedef void (*kernel_NotifyBlockTip)(void* user_data, kernel_SynchronizationState state, kernel_BlockIndex* index);\n+typedef void (*kernel_NotifyHeaderTip)(void* user_data, kernel_SynchronizationState state, int64_t height, int64_t timestamp, bool presync);\n+typedef void (*kernel_NotifyProgress)(void* user_data, const char* title, int progress_percent, bool resume_possible);\n+typedef void (*kernel_NotifyWarningSet)(void* user_data, kernel_Warning warning, const char* message);\n+typedef void (*kernel_NotifyWarningUnset)(void* user_data, kernel_Warning warning);\n+typedef void (*kernel_NotifyFlushError)(void* user_data, const char* message);\n+typedef void (*kernel_NotifyFatalError)(void* user_data, const char* message);\n+\n+/**\n+ * Function signatures for the validation interface.\n+ */\n+typedef void (*kernel_ValidationInterfaceBlockChecked)(void* user_data, const kernel_BlockPointer* block, const kernel_BlockValidationState* state);\n+\n+/**\n+ * Whether a validated data structure is valid, invalid, or an error was\n+ * encountered during processing.\n+ */\n+typedef enum {\n+    kernel_VALIDATION_STATE_VALID = 0,\n+    kernel_VALIDATION_STATE_INVALID,\n+    kernel_VALIDATION_STATE_ERROR,\n+} kernel_ValidationMode;\n+\n+/**\n+ * A granular \"reason\" why a block was invalid.\n+ */\n+typedef enum {\n+    kernel_BLOCK_RESULT_UNSET = 0, //!< initial value. Block has not yet been rejected\n+    kernel_BLOCK_CONSENSUS,        //!< invalid by consensus rules (excluding any below reasons)\n+    kernel_BLOCK_CACHED_INVALID,  //!< this block was cached as being invalid and we didn't store the reason why\n+    kernel_BLOCK_INVALID_HEADER,  //!< invalid proof of work or time too old\n+    kernel_BLOCK_MUTATED,         //!< the block's data didn't match the data committed to by the PoW\n+    kernel_BLOCK_MISSING_PREV,    //!< We don't have the previous block the checked one is built on\n+    kernel_BLOCK_INVALID_PREV,    //!< A block this one builds on is invalid\n+    kernel_BLOCK_TIME_FUTURE,     //!< block timestamp was > 2 hours in the future (or our clock is bad)\n+    kernel_BLOCK_CHECKPOINT,      //!< the block failed to meet one of our checkpoints\n+    kernel_BLOCK_HEADER_LOW_WORK, //!< the block header may be on a too-little-work chain\n+} kernel_BlockValidationResult;\n+\n+/**\n+ * Holds the validation interface callbacks. The user data pointer may be used\n+ * to point to user-defined structures to make processing the validation\n+ * callbacks easier.\n+ */\n+typedef struct {\n+    void* user_data;                                      //!< Holds a user-defined opaque structure that is passed to the validation\n+                                                          //!< interface callbacks.\n+    kernel_ValidationInterfaceBlockChecked block_checked; //!< Called when a new block has been checked. Contains the\n+                                                          //!< result of its validation.\n+} kernel_ValidationInterfaceCallbacks;\n+\n+/**\n+ * A struct for holding the kernel notification callbacks. The user data\n+ * pointer may be used to point to user-defined structures to make processing\n+ * the notifications easier. Note that this makes it the user's responsibility\n+ * to ensure that the user_data outlives the kernel objects. Notifications can\n+ * occur even as kernel objects are deleted, so care has to be taken to ensure\n+ * safe unwinding.\n+ */\n+typedef struct {\n+    void* user_data;                         //!< Holds a user-defined opaque structure that is passed to the notification callbacks.\n+    kernel_NotifyBlockTip block_tip;         //!< The chain's tip was updated to the provided block index.\n+    kernel_NotifyHeaderTip header_tip;       //!< A new best block header was added.\n+    kernel_NotifyProgress progress;          //!< Reports on current block synchronization progress.\n+    kernel_NotifyWarningSet warning_set;     //!< A warning issued by the kernel library during validation.\n+    kernel_NotifyWarningUnset warning_unset; //!< A previous condition leading to the issuance of a warning is no longer given.\n+    kernel_NotifyFlushError flush_error;     //!< An error encountered when flushing data to disk.\n+    kernel_NotifyFatalError fatal_error;     //!< A un-recoverable system error encountered by the library.\n+} kernel_NotificationInterfaceCallbacks;\n+\n+/**\n+ * A collection of logging categories that may be encountered by kernel code.\n+ */\n+typedef enum {\n+    kernel_LOG_ALL = 0,\n+    kernel_LOG_BENCH,\n+    kernel_LOG_BLOCKSTORAGE,\n+    kernel_LOG_COINDB,\n+    kernel_LOG_LEVELDB,\n+    kernel_LOG_LOCK,\n+    kernel_LOG_MEMPOOL,\n+    kernel_LOG_PRUNE,\n+    kernel_LOG_RAND,\n+    kernel_LOG_REINDEX,\n+    kernel_LOG_VALIDATION,\n+    kernel_LOG_KERNEL,\n+} kernel_LogCategory;\n+\n+/**\n+ * The level at which logs should be produced.\n+ */\n+typedef enum {\n+    kernel_LOG_INFO = 0,\n+    kernel_LOG_DEBUG,\n+    kernel_LOG_TRACE,\n+} kernel_LogLevel;\n+\n+/**\n+ * Options controlling the format of log messages.\n+ */\n+typedef struct {\n+    bool log_timestamps;               //!< Prepend a timestamp to log messages.\n+    bool log_time_micros;              //!< Log timestamps in microsecond precision.\n+    bool log_threadnames;              //!< Prepend the name of the thread to log messages.\n+    bool log_sourcelocations;          //!< Prepend the source location to log messages.\n+    bool always_print_category_levels; //!< Prepend the log category and level to log messages.\n+} kernel_LoggingOptions;\n+\n+/**\n+ * A collection of status codes that may be issued by the script verify function.\n+ */\n+typedef enum {\n+    kernel_SCRIPT_VERIFY_OK = 0,\n+    kernel_SCRIPT_VERIFY_ERROR_TX_INPUT_INDEX, //!< The provided input index is out of range of the actual number of inputs of the transaction.\n+    kernel_SCRIPT_VERIFY_ERROR_INVALID_FLAGS, //!< The provided bitfield for the flags was invalid.\n+    kernel_SCRIPT_VERIFY_ERROR_INVALID_FLAGS_COMBINATION, //!< The flags very combined in an invalid way.\n+    kernel_SCRIPT_VERIFY_ERROR_SPENT_OUTPUTS_REQUIRED, //!< The taproot flag was set, so valid spent_outputs have to be provided.\n+    kernel_SCRIPT_VERIFY_ERROR_SPENT_OUTPUTS_MISMATCH, //!< The number of spent outputs does not match the number of inputs of the tx.\n+} kernel_ScriptVerifyStatus;\n+\n+/**\n+ * Script verification flags that may be composed with each other.\n+ */\n+typedef enum\n+{\n+    kernel_SCRIPT_FLAGS_VERIFY_NONE                = 0,\n+    kernel_SCRIPT_FLAGS_VERIFY_P2SH                = (1U << 0), //!< evaluate P2SH (BIP16) subscripts\n+    kernel_SCRIPT_FLAGS_VERIFY_DERSIG              = (1U << 2), //!< enforce strict DER (BIP66) compliance\n+    kernel_SCRIPT_FLAGS_VERIFY_NULLDUMMY           = (1U << 4), //!< enforce NULLDUMMY (BIP147)\n+    kernel_SCRIPT_FLAGS_VERIFY_CHECKLOCKTIMEVERIFY = (1U << 9), //!< enable CHECKLOCKTIMEVERIFY (BIP65)\n+    kernel_SCRIPT_FLAGS_VERIFY_CHECKSEQUENCEVERIFY = (1U << 10), //!< enable CHECKSEQUENCEVERIFY (BIP112)\n+    kernel_SCRIPT_FLAGS_VERIFY_WITNESS             = (1U << 11), //!< enable WITNESS (BIP141)\n+\n+    kernel_SCRIPT_FLAGS_VERIFY_TAPROOT             = (1U << 17), //!< enable TAPROOT (BIPs 341 & 342)\n+    kernel_SCRIPT_FLAGS_VERIFY_ALL                 = kernel_SCRIPT_FLAGS_VERIFY_P2SH |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_DERSIG |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_NULLDUMMY |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_CHECKLOCKTIMEVERIFY |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_CHECKSEQUENCEVERIFY |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_WITNESS |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_TAPROOT\n+} kernel_ScriptFlags;\n+\n+/**\n+ * Chain type used for creating chain params.\n+ */\n+typedef enum {\n+    kernel_CHAIN_TYPE_MAINNET = 0,\n+    kernel_CHAIN_TYPE_TESTNET,\n+    kernel_CHAIN_TYPE_TESTNET_4,\n+    kernel_CHAIN_TYPE_SIGNET,\n+    kernel_CHAIN_TYPE_REGTEST,\n+} kernel_ChainType;\n+\n+/**\n+ * A type-safe block identifier.\n+ */\n+typedef struct {\n+    unsigned char hash[32];\n+} kernel_BlockHash;\n+\n+/**\n+ * Convenience struct for holding serialized data.\n+ */\n+typedef struct {\n+    unsigned char* data;\n+    size_t size;\n+} kernel_ByteArray;\n+\n+/**\n+ * @brief Create a new transaction from the serialized data.\n+ *\n+ * @param[in] raw_transaction     Non-null.\n+ * @param[in] raw_transaction_len Length of the serialized transaction.\n+ * @return                        The transaction, or null on error.\n+ */\n+kernel_Transaction* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_transaction_create(\n+    const unsigned char* raw_transaction, size_t raw_transaction_len\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the transaction.\n+ */\n+void kernel_transaction_destroy(kernel_Transaction* transaction);\n+\n+/**\n+ * @brief Create a script pubkey from serialized data.\n+ * @param[in] script_pubkey     Non-null.\n+ * @param[in] script_pubkey_len Length of the script pubkey data.\n+ * @return                      The script pubkey, or null on error.\n+ */\n+kernel_ScriptPubkey* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_script_pubkey_create(\n+    const unsigned char* script_pubkey, size_t script_pubkey_len\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * @brief Copies the script pubkey data into the returned byte array.\n+ * @param[in] script_pubkey Non-null.\n+ * @return                  The serialized script pubkey data.\n+ */\n+kernel_ByteArray* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_copy_script_pubkey_data(\n+        const kernel_ScriptPubkey* script_pubkey\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the script pubkey.\n+ */\n+void kernel_script_pubkey_destroy(kernel_ScriptPubkey* script_pubkey);\n+\n+/**\n+ * @brief Create a transaction output from a script pubkey and an amount.\n+ * @param[in] script_pubkey Non-null.\n+ * @param[in] amount        The amount associated with the script pubkey for this output.\n+ * @return                  The transaction output.\n+ */\n+kernel_TransactionOutput* kernel_transaction_output_create(\n+    kernel_ScriptPubkey* script_pubkey,\n+    int64_t amount\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the transaction output.\n+ */\n+void kernel_transaction_output_destroy(kernel_TransactionOutput* transaction_output);\n+\n+/**\n+ * @brief Verify if the input at input_index of tx_to spends the script pubkey\n+ * under the constraints specified by flags. If the witness flag is set the\n+ * amount parameter is used. If the taproot flag is set, the spent outputs\n+ * parameter is used to validate taproot transactions.\n+ *\n+ * @param[in] script_pubkey     Non-null, script pubkey to be spent.\n+ * @param[in] amount            Amount of the script pubkey's associated output. May be zero if\n+ *                              the witness flag is not set.\n+ * @param[in] tx_to             Non-null, transaction spending the script_pubkey.\n+ * @param[in] spent_outputs     Nullable if the taproot flag is not set. Points to an array of\n+ *                              outputs spent by the transaction.\n+ * @param[in] spent_outputs_len Length of the spent_outputs array.\n+ * @param[in] input_index       Index of the input in tx_to spending the script_pubkey.\n+ * @param[in] flags             Bitfield of kernel_ScriptFlags controlling validation constraints.\n+ * @param[out] status           Nullable, will be set to an error code if the operation fails.\n+ *                              Should be set to kernel_SCRIPT_VERIFY_OK.\n+ * @return                      True if the script is valid.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_verify_script(\n+    const kernel_ScriptPubkey* script_pubkey,\n+    int64_t amount,\n+    const kernel_Transaction* tx_to,\n+    const kernel_TransactionOutput** spent_outputs, size_t spent_outputs_len,\n+    unsigned int input_index,\n+    unsigned int flags,\n+    kernel_ScriptVerifyStatus* status\n+) BITCOINKERNEL_ARG_NONNULL(1) BITCOINKERNEL_ARG_NONNULL(3);\n+\n+/**\n+ * @brief This disables the global internal logger. No log messages will be\n+ * buffered internally anymore once this is called and the buffer is cleared.\n+ * This function should only be called once. Log messages will be buffered until\n+ * this function is called, or a logging connection is created.\n+ */\n+void kernel_disable_logging();\n+\n+/**\n+ * @brief Set the log level of the global internal logger. This does not enable\n+ * the selected categories. Use `kernel_enable_log_category` to start logging\n+ * from a specific, or all categories.\n+ *\n+ * @param[in] category If kernel_LOG_ALL is chosen, all messages at the specified level\n+ *                     will be logged. Otherwise only messages from the specified category\n+ *                     will be logged at the specified level and above.\n+ * @param[in] level    Log level at which the log category is set.\n+ * @return             True on success.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_add_log_level_category(const kernel_LogCategory category, kernel_LogLevel level);\n+\n+/**\n+ * @brief Enable a specific log category for the global internal logger.\n+ *\n+ * @param[in] category If kernel_LOG_ALL is chosen, all categories will be enabled.\n+ * @return             True on success.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_enable_log_category(const kernel_LogCategory category);\n+\n+/**\n+ * Disable a specific log category for the global internal logger.\n+ *\n+ * @param[in] category If kernel_LOG_ALL is chosen, all categories will be disabled.\n+ * @return             True on success.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_disable_log_category(const kernel_LogCategory category);\n+\n+/**\n+ * @brief Start logging messages through the provided callback. Log messages\n+ * produced before this function is first called are buffered and on calling this\n+ * function are logged immediately.\n+ *\n+ * @param[in] callback  Non-null, function through which messages will be logged.\n+ * @param[in] user_data Nullable, holds a user-defined opaque structure. Is passed back\n+ *                      to the user through the callback.\n+ * @param[in] options   Sets formatting options of the log messages.\n+ * @return              A new kernel logging connection, or null on error.\n+ */\n+kernel_LoggingConnection* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_logging_connection_create(\n+    kernel_LogCallback callback,\n+    void* user_data,\n+    const kernel_LoggingOptions options\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Stop logging and destroy the logging connection.\n+ */\n+void kernel_logging_connection_destroy(kernel_LoggingConnection* logging_connection);\n+\n+/**\n+ * @brief Creates a chain parameters struct with default parameters based on the\n+ * passed in chain type.\n+ *\n+ * @param[in] chain_type Controls the chain parameters type created.\n+ * @return               An allocated chain parameters opaque struct.\n+ */\n+const kernel_ChainParameters* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_chain_parameters_create(\n+    const kernel_ChainType chain_type);\n+\n+/**\n+ * Destroy the chain parameters.\n+ */\n+void kernel_chain_parameters_destroy(const kernel_ChainParameters* chain_parameters);\n+\n+/**\n+ * @brief Creates an object for holding the kernel notification callbacks.\n+ *\n+ * @param[in] callbacks Holds the callbacks that will be invoked by the kernel notifications.\n+ */\n+kernel_Notifications* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_notifications_create(\n+    kernel_NotificationInterfaceCallbacks callbacks);\n+\n+/**\n+ * Destroy the kernel notifications.\n+ */\n+void kernel_notifications_destroy(const kernel_Notifications* notifications);\n+\n+/**\n+ * Creates an empty context options.\n+ */\n+kernel_ContextOptions* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_context_options_create();\n+\n+/**\n+ * @brief Sets the chain params for the context options. The context created\n+ * with the options will be configured for these chain parameters.\n+ *\n+ * @param[in] context_options  Non-null, previously created with kernel_context_options_create.\n+ * @param[in] chain_parameters Is set to the context options.\n+ */\n+void kernel_context_options_set_chainparams(",
      "path": "src/kernel/bitcoinkernel.h",
      "position": 627,
      "original_position": 622,
      "commit_id": "34a8429ff3a870c0caaf4c4790becd86c5acde38",
      "original_commit_id": "f1b3ab751bfe374095427796af00f6fdd50ec3e5",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "There are a few places, like here, where we expose modifier functions that are (quasi) required to be ran before initializing another object. An alternative approach would be to extend the `kernel_context_options_create` to take a (nullable) `kernel_ChainParameters*`, and remove these ~unsafe modifiers altogether? I think that would have the benefit of:\r\n- removing a whole category of bugs where users set options at the wrong time (i.e. too late), silently leading to buggy behaviour\r\n- making it easier to see which options can (should) be set, without having to first have read the entire documentation\r\n\r\nThis concern also applies to e.g.:\r\n- `kernel_context_options_set_notifications`\r\n- `kernel_validation_interface_register`",
      "created_at": "2024-11-19T19:18:01Z",
      "updated_at": "2024-11-19T19:19:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1848935049",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1848935049"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 627,
      "original_line": 627,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1849036598",
      "pull_request_review_id": 2446622041,
      "id": 1849036598,
      "node_id": "PRRC_kwDOABII585uNg82",
      "diff_hunk": "@@ -0,0 +1,1186 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_KERNEL_BITCOINKERNEL_H\n+#define BITCOIN_KERNEL_BITCOINKERNEL_H\n+\n+#ifndef __cplusplus\n+#include <stdbool.h>\n+#include <stddef.h>\n+#include <stdint.h>\n+#else\n+#include <cstddef>\n+#include <cstdint>\n+#endif // __cplusplus\n+\n+\n+#if !defined(BITCOINKERNEL_GNUC_PREREQ)\n+#if defined(__GNUC__) && defined(__GNUC_MINOR__)\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) \\\n+    ((__GNUC__ << 16) + __GNUC_MINOR__ >= ((_maj) << 16) + (_min))\n+#else\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) 0\n+#endif\n+#endif\n+\n+/* Warning attributes */\n+#if defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT __attribute__((__warn_unused_result__))\n+#else\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT\n+#endif\n+#if !defined(BITCOINKERNEL_BUILD) && defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_ARG_NONNULL(_x) __attribute__((__nonnull__(_x)))\n+#else\n+#define BITCOINKERNEL_ARG_NONNULL(_x)\n+#endif\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif // __cplusplus\n+\n+/**\n+ * ------ Context ------\n+ *\n+ * The library provides a built-in static constant kernel context. This context\n+ * offers only limited functionality. It detects and self-checks the correct\n+ * sha256 implementation, initializes the random number generator and\n+ * self-checks the secp256k1 static context. It is used internally for otherwise\n+ * \"context-free\" operations.\n+ *\n+ * The user can create their own context for passing it to state-rich validation\n+ * functions and holding callbacks for kernel events.\n+ *\n+ * ------ Error handling ------\n+ *\n+ * Functions communicate an error through their return types, usually returning\n+ * a nullptr, or false if an error is encountered. Additionally, verification\n+ * functions, e.g. for scripts, may communicate more detailed error information\n+ * through status code out parameters.\n+ *\n+ * Fine-grained validation information is communicated through the validation\n+ * interface.\n+ *\n+ * The kernel notifications issue callbacks for errors. These are usually\n+ * indicative of a system error. If such an error is issued, it is recommended\n+ * to halt and tear down the existing kernel objects. Remediating the error may\n+ * require system intervention by the user.\n+ *\n+ * ------ Pointer and argument conventions ------\n+ *\n+ * The user is responsible for de-allocating the memory owned by pointers\n+ * returned by functions. Typically pointers returned by *_create(...) functions\n+ * can be de-allocated by corresponding *_destroy(...) functions.\n+ *\n+ * Pointer arguments make no assumptions on their lifetime. Once the function\n+ * returns the user can safely de-allocate the passed in arguments.\n+ *\n+ * Pointers passed by callbacks are not owned by the user and are only valid for\n+ * the duration of it. They should not be de-allocated by the user.\n+ *\n+ * Array lengths follow the pointer argument they describe.\n+ */\n+\n+/**\n+ * Opaque data structure for holding a transaction.\n+ */\n+typedef struct kernel_Transaction kernel_Transaction;\n+\n+/**\n+ * Opaque data structure for holding a script pubkey.\n+ */\n+typedef struct kernel_ScriptPubkey kernel_ScriptPubkey;\n+\n+/**\n+ * Opaque data structure for holding a transaction output.\n+ */\n+typedef struct kernel_TransactionOutput kernel_TransactionOutput;\n+\n+/**\n+ * Opaque data structure for holding a logging connection.\n+ *\n+ * The logging connection can be used to manually stop logging.\n+ *\n+ * Messages that were logged before a connection is created are buffered in a\n+ * 1MB buffer. Logging can alternatively be permanently disabled by calling\n+ * kernel_disable_logging().\n+ */\n+typedef struct kernel_LoggingConnection kernel_LoggingConnection;\n+\n+/**\n+ * Opaque data structure for holding the chain parameters.\n+ *\n+ * These are eventually placed into a kernel context through the kernel context\n+ * options. The parameters describe the properties of a chain, and may be\n+ * instantiated for either mainnet, testnet, signet, or regtest.\n+ */\n+typedef struct kernel_ChainParameters kernel_ChainParameters;\n+\n+/**\n+ * Opaque data structure for holding callbacks for reacting to events that may\n+ * be encountered during library operations.\n+ */\n+typedef struct kernel_Notifications kernel_Notifications;\n+\n+/**\n+ * Opaque data structure for holding options for creating a new kernel context.\n+ *\n+ * Once a kernel context has been created from these options, they may be\n+ * destroyed. The options hold the notification callbacks as well as the\n+ * selected chain type until they are passed to the context. Their content and\n+ * scope can be expanded over time.\n+ */\n+typedef struct kernel_ContextOptions kernel_ContextOptions;\n+\n+/**\n+ * Opaque data structure for holding a kernel context.\n+ *\n+ * The kernel context is used to initialize internal state and hold the chain\n+ * parameters and callbacks for handling error and validation events. Once other\n+ * validation objects are instantiated from it, the context needs to be kept in\n+ * memory for the duration of their lifetimes.\n+ *\n+ * The processing of validation events is done through an internal task\n+ * runner owned by the context. The task runner drives the execution of events\n+ * triggering validation interface callbacks. Multiple validation interfaces can\n+ * be registered with the context. The kernel will create an event for each of\n+ * the registered validation interfaces through the task runner.\n+ *\n+ * A constructed context can be safely used from multiple threads, but functions\n+ * taking it as a non-cost argument need exclusive access to it.\n+ */\n+typedef struct kernel_Context kernel_Context;\n+\n+/**\n+ * Opaque data structure for holding a block index pointer.\n+ *\n+ * This is a pointer to an element in the block index currently in memory of the\n+ * chainstate manager. It is valid for the lifetime of the chainstate manager it\n+ * was retrieved from.\n+ */\n+typedef struct kernel_BlockIndex kernel_BlockIndex;\n+\n+/**\n+ * Opaque data structure for holding options for creating a new chainstate\n+ * manager.\n+ *\n+ * The chainstate manager options are used to set some parameters for the\n+ * chainstate manager. For now it just holds default options.\n+ */\n+typedef struct kernel_ChainstateManagerOptions kernel_ChainstateManagerOptions;\n+\n+/**\n+ * Opaque data structure for holding options for creating a new chainstate\n+ * manager.\n+ *\n+ * The chainstate manager has an internal block manager that takes its own set\n+ * of parameters. It is initialized with default options.\n+ */\n+typedef struct kernel_BlockManagerOptions kernel_BlockManagerOptions;\n+\n+/**\n+ * Opaque data structure for holding a chainstate manager.\n+ *\n+ * The chainstate manager is the central object for doing validation tasks as\n+ * well as retrieving data from the chain. Internally it is a complex data\n+ * structure with diverse functionality.\n+ *\n+ * The chainstate manager is only valid for as long as the context with which it\n+ * was created remains in memory.\n+ *\n+ * Its functionality will be more and more exposed in the future.\n+ */\n+typedef struct kernel_ChainstateManager kernel_ChainstateManager;\n+\n+/**\n+ * Opaque data structure for holding parameters used for loading the chainstate\n+ * of a chainstate manager.\n+ *\n+ * Is initialized with default parameters.\n+ */\n+typedef struct kernel_ChainstateLoadOptions kernel_ChainstateLoadOptions;\n+\n+/**\n+ * Opaque data structure for holding a block.\n+ */\n+typedef struct kernel_Block kernel_Block;\n+\n+/**\n+ * Opaque data structure for holding a non-owned block. This is typically a\n+ * block available to the user through one of the validation callbacks.\n+ */\n+typedef struct kernel_BlockPointer kernel_BlockPointer;\n+\n+/**\n+ * Opaque data structure for holding the state of a block during validation.\n+ *\n+ * Contains information indicating whether validation was successful, and if not\n+ * which step during block validation failed.\n+ */\n+typedef struct kernel_BlockValidationState kernel_BlockValidationState;\n+\n+/**\n+ * Opaque data structure for holding a validation interface.\n+ *\n+ * The validation interface can be registered with the internal task runner of an\n+ * existing context. It holds callbacks that will be triggered by certain\n+ * validation events. The callbacks registered with it will block further\n+ * validation progress when triggered.\n+ */\n+typedef struct kernel_ValidationInterface kernel_ValidationInterface;\n+\n+/**\n+ * Opaque data structure for holding a block undo struct.\n+ *\n+ * It holds all the previous outputs consumed by all transactions in a specific\n+ * block. Internally it holds a nested vector. The top level vector has an entry\n+ * for each transaction in a block (in order of the actual transactions of the\n+ * block and minus the coinbase transaction). Each entry is in turn a vector of\n+ * all the previous outputs of a transaction (in order of their corresponding\n+ * inputs).\n+ */\n+typedef struct kernel_BlockUndo kernel_BlockUndo;\n+\n+/** Current sync state passed to tip changed callbacks. */\n+typedef enum {\n+    kernel_INIT_REINDEX,\n+    kernel_INIT_DOWNLOAD,\n+    kernel_POST_INIT\n+} kernel_SynchronizationState;\n+\n+/** Possible warning types issued by validation. */\n+typedef enum {\n+    kernel_UNKNOWN_NEW_RULES_ACTIVATED,\n+    kernel_LARGE_WORK_INVALID_CHAIN\n+} kernel_Warning;\n+\n+/** Callback function types */\n+\n+/**\n+ * Function signature for the global logging callback. All bitcoin kernel\n+ * internal logs will pass through this callback.\n+ */\n+typedef void (*kernel_LogCallback)(void* user_data, const char* message);\n+\n+/**\n+ * Function signatures for the kernel notifications.\n+ */\n+typedef void (*kernel_NotifyBlockTip)(void* user_data, kernel_SynchronizationState state, kernel_BlockIndex* index);\n+typedef void (*kernel_NotifyHeaderTip)(void* user_data, kernel_SynchronizationState state, int64_t height, int64_t timestamp, bool presync);\n+typedef void (*kernel_NotifyProgress)(void* user_data, const char* title, int progress_percent, bool resume_possible);\n+typedef void (*kernel_NotifyWarningSet)(void* user_data, kernel_Warning warning, const char* message);\n+typedef void (*kernel_NotifyWarningUnset)(void* user_data, kernel_Warning warning);\n+typedef void (*kernel_NotifyFlushError)(void* user_data, const char* message);\n+typedef void (*kernel_NotifyFatalError)(void* user_data, const char* message);\n+\n+/**\n+ * Function signatures for the validation interface.\n+ */\n+typedef void (*kernel_ValidationInterfaceBlockChecked)(void* user_data, const kernel_BlockPointer* block, const kernel_BlockValidationState* state);\n+\n+/**\n+ * Whether a validated data structure is valid, invalid, or an error was\n+ * encountered during processing.\n+ */\n+typedef enum {\n+    kernel_VALIDATION_STATE_VALID = 0,\n+    kernel_VALIDATION_STATE_INVALID,\n+    kernel_VALIDATION_STATE_ERROR,\n+} kernel_ValidationMode;\n+\n+/**\n+ * A granular \"reason\" why a block was invalid.\n+ */\n+typedef enum {\n+    kernel_BLOCK_RESULT_UNSET = 0, //!< initial value. Block has not yet been rejected\n+    kernel_BLOCK_CONSENSUS,        //!< invalid by consensus rules (excluding any below reasons)\n+    kernel_BLOCK_CACHED_INVALID,  //!< this block was cached as being invalid and we didn't store the reason why\n+    kernel_BLOCK_INVALID_HEADER,  //!< invalid proof of work or time too old\n+    kernel_BLOCK_MUTATED,         //!< the block's data didn't match the data committed to by the PoW\n+    kernel_BLOCK_MISSING_PREV,    //!< We don't have the previous block the checked one is built on\n+    kernel_BLOCK_INVALID_PREV,    //!< A block this one builds on is invalid\n+    kernel_BLOCK_TIME_FUTURE,     //!< block timestamp was > 2 hours in the future (or our clock is bad)\n+    kernel_BLOCK_CHECKPOINT,      //!< the block failed to meet one of our checkpoints\n+    kernel_BLOCK_HEADER_LOW_WORK, //!< the block header may be on a too-little-work chain\n+} kernel_BlockValidationResult;\n+\n+/**\n+ * Holds the validation interface callbacks. The user data pointer may be used\n+ * to point to user-defined structures to make processing the validation\n+ * callbacks easier.\n+ */\n+typedef struct {\n+    void* user_data;                                      //!< Holds a user-defined opaque structure that is passed to the validation\n+                                                          //!< interface callbacks.\n+    kernel_ValidationInterfaceBlockChecked block_checked; //!< Called when a new block has been checked. Contains the\n+                                                          //!< result of its validation.\n+} kernel_ValidationInterfaceCallbacks;\n+\n+/**\n+ * A struct for holding the kernel notification callbacks. The user data\n+ * pointer may be used to point to user-defined structures to make processing\n+ * the notifications easier. Note that this makes it the user's responsibility\n+ * to ensure that the user_data outlives the kernel objects. Notifications can\n+ * occur even as kernel objects are deleted, so care has to be taken to ensure\n+ * safe unwinding.\n+ */\n+typedef struct {\n+    void* user_data;                         //!< Holds a user-defined opaque structure that is passed to the notification callbacks.\n+    kernel_NotifyBlockTip block_tip;         //!< The chain's tip was updated to the provided block index.\n+    kernel_NotifyHeaderTip header_tip;       //!< A new best block header was added.\n+    kernel_NotifyProgress progress;          //!< Reports on current block synchronization progress.\n+    kernel_NotifyWarningSet warning_set;     //!< A warning issued by the kernel library during validation.\n+    kernel_NotifyWarningUnset warning_unset; //!< A previous condition leading to the issuance of a warning is no longer given.\n+    kernel_NotifyFlushError flush_error;     //!< An error encountered when flushing data to disk.\n+    kernel_NotifyFatalError fatal_error;     //!< A un-recoverable system error encountered by the library.\n+} kernel_NotificationInterfaceCallbacks;\n+\n+/**\n+ * A collection of logging categories that may be encountered by kernel code.\n+ */\n+typedef enum {\n+    kernel_LOG_ALL = 0,\n+    kernel_LOG_BENCH,\n+    kernel_LOG_BLOCKSTORAGE,\n+    kernel_LOG_COINDB,\n+    kernel_LOG_LEVELDB,\n+    kernel_LOG_LOCK,\n+    kernel_LOG_MEMPOOL,\n+    kernel_LOG_PRUNE,\n+    kernel_LOG_RAND,\n+    kernel_LOG_REINDEX,\n+    kernel_LOG_VALIDATION,\n+    kernel_LOG_KERNEL,\n+} kernel_LogCategory;\n+\n+/**\n+ * The level at which logs should be produced.\n+ */\n+typedef enum {\n+    kernel_LOG_INFO = 0,\n+    kernel_LOG_DEBUG,\n+    kernel_LOG_TRACE,\n+} kernel_LogLevel;\n+\n+/**\n+ * Options controlling the format of log messages.\n+ */\n+typedef struct {\n+    bool log_timestamps;               //!< Prepend a timestamp to log messages.\n+    bool log_time_micros;              //!< Log timestamps in microsecond precision.\n+    bool log_threadnames;              //!< Prepend the name of the thread to log messages.\n+    bool log_sourcelocations;          //!< Prepend the source location to log messages.\n+    bool always_print_category_levels; //!< Prepend the log category and level to log messages.\n+} kernel_LoggingOptions;\n+\n+/**\n+ * A collection of status codes that may be issued by the script verify function.\n+ */\n+typedef enum {\n+    kernel_SCRIPT_VERIFY_OK = 0,\n+    kernel_SCRIPT_VERIFY_ERROR_TX_INPUT_INDEX, //!< The provided input index is out of range of the actual number of inputs of the transaction.\n+    kernel_SCRIPT_VERIFY_ERROR_INVALID_FLAGS, //!< The provided bitfield for the flags was invalid.\n+    kernel_SCRIPT_VERIFY_ERROR_INVALID_FLAGS_COMBINATION, //!< The flags very combined in an invalid way.\n+    kernel_SCRIPT_VERIFY_ERROR_SPENT_OUTPUTS_REQUIRED, //!< The taproot flag was set, so valid spent_outputs have to be provided.\n+    kernel_SCRIPT_VERIFY_ERROR_SPENT_OUTPUTS_MISMATCH, //!< The number of spent outputs does not match the number of inputs of the tx.\n+} kernel_ScriptVerifyStatus;\n+\n+/**\n+ * Script verification flags that may be composed with each other.\n+ */\n+typedef enum\n+{\n+    kernel_SCRIPT_FLAGS_VERIFY_NONE                = 0,\n+    kernel_SCRIPT_FLAGS_VERIFY_P2SH                = (1U << 0), //!< evaluate P2SH (BIP16) subscripts\n+    kernel_SCRIPT_FLAGS_VERIFY_DERSIG              = (1U << 2), //!< enforce strict DER (BIP66) compliance\n+    kernel_SCRIPT_FLAGS_VERIFY_NULLDUMMY           = (1U << 4), //!< enforce NULLDUMMY (BIP147)\n+    kernel_SCRIPT_FLAGS_VERIFY_CHECKLOCKTIMEVERIFY = (1U << 9), //!< enable CHECKLOCKTIMEVERIFY (BIP65)\n+    kernel_SCRIPT_FLAGS_VERIFY_CHECKSEQUENCEVERIFY = (1U << 10), //!< enable CHECKSEQUENCEVERIFY (BIP112)\n+    kernel_SCRIPT_FLAGS_VERIFY_WITNESS             = (1U << 11), //!< enable WITNESS (BIP141)\n+\n+    kernel_SCRIPT_FLAGS_VERIFY_TAPROOT             = (1U << 17), //!< enable TAPROOT (BIPs 341 & 342)\n+    kernel_SCRIPT_FLAGS_VERIFY_ALL                 = kernel_SCRIPT_FLAGS_VERIFY_P2SH |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_DERSIG |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_NULLDUMMY |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_CHECKLOCKTIMEVERIFY |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_CHECKSEQUENCEVERIFY |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_WITNESS |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_TAPROOT\n+} kernel_ScriptFlags;\n+\n+/**\n+ * Chain type used for creating chain params.\n+ */\n+typedef enum {\n+    kernel_CHAIN_TYPE_MAINNET = 0,\n+    kernel_CHAIN_TYPE_TESTNET,\n+    kernel_CHAIN_TYPE_TESTNET_4,\n+    kernel_CHAIN_TYPE_SIGNET,\n+    kernel_CHAIN_TYPE_REGTEST,\n+} kernel_ChainType;\n+\n+/**\n+ * A type-safe block identifier.\n+ */\n+typedef struct {\n+    unsigned char hash[32];\n+} kernel_BlockHash;\n+\n+/**\n+ * Convenience struct for holding serialized data.\n+ */\n+typedef struct {\n+    unsigned char* data;\n+    size_t size;\n+} kernel_ByteArray;\n+\n+/**\n+ * @brief Create a new transaction from the serialized data.\n+ *\n+ * @param[in] raw_transaction     Non-null.\n+ * @param[in] raw_transaction_len Length of the serialized transaction.\n+ * @return                        The transaction, or null on error.\n+ */\n+kernel_Transaction* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_transaction_create(\n+    const unsigned char* raw_transaction, size_t raw_transaction_len\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the transaction.\n+ */\n+void kernel_transaction_destroy(kernel_Transaction* transaction);\n+\n+/**\n+ * @brief Create a script pubkey from serialized data.\n+ * @param[in] script_pubkey     Non-null.\n+ * @param[in] script_pubkey_len Length of the script pubkey data.\n+ * @return                      The script pubkey, or null on error.\n+ */\n+kernel_ScriptPubkey* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_script_pubkey_create(\n+    const unsigned char* script_pubkey, size_t script_pubkey_len\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * @brief Copies the script pubkey data into the returned byte array.\n+ * @param[in] script_pubkey Non-null.\n+ * @return                  The serialized script pubkey data.\n+ */\n+kernel_ByteArray* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_copy_script_pubkey_data(\n+        const kernel_ScriptPubkey* script_pubkey\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the script pubkey.\n+ */\n+void kernel_script_pubkey_destroy(kernel_ScriptPubkey* script_pubkey);\n+\n+/**\n+ * @brief Create a transaction output from a script pubkey and an amount.\n+ * @param[in] script_pubkey Non-null.\n+ * @param[in] amount        The amount associated with the script pubkey for this output.\n+ * @return                  The transaction output.\n+ */\n+kernel_TransactionOutput* kernel_transaction_output_create(\n+    kernel_ScriptPubkey* script_pubkey,\n+    int64_t amount\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the transaction output.\n+ */\n+void kernel_transaction_output_destroy(kernel_TransactionOutput* transaction_output);\n+\n+/**\n+ * @brief Verify if the input at input_index of tx_to spends the script pubkey\n+ * under the constraints specified by flags. If the witness flag is set the\n+ * amount parameter is used. If the taproot flag is set, the spent outputs\n+ * parameter is used to validate taproot transactions.\n+ *\n+ * @param[in] script_pubkey     Non-null, script pubkey to be spent.\n+ * @param[in] amount            Amount of the script pubkey's associated output. May be zero if\n+ *                              the witness flag is not set.\n+ * @param[in] tx_to             Non-null, transaction spending the script_pubkey.\n+ * @param[in] spent_outputs     Nullable if the taproot flag is not set. Points to an array of\n+ *                              outputs spent by the transaction.\n+ * @param[in] spent_outputs_len Length of the spent_outputs array.\n+ * @param[in] input_index       Index of the input in tx_to spending the script_pubkey.\n+ * @param[in] flags             Bitfield of kernel_ScriptFlags controlling validation constraints.\n+ * @param[out] status           Nullable, will be set to an error code if the operation fails.\n+ *                              Should be set to kernel_SCRIPT_VERIFY_OK.\n+ * @return                      True if the script is valid.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_verify_script(\n+    const kernel_ScriptPubkey* script_pubkey,\n+    int64_t amount,\n+    const kernel_Transaction* tx_to,\n+    const kernel_TransactionOutput** spent_outputs, size_t spent_outputs_len,\n+    unsigned int input_index,\n+    unsigned int flags,\n+    kernel_ScriptVerifyStatus* status\n+) BITCOINKERNEL_ARG_NONNULL(1) BITCOINKERNEL_ARG_NONNULL(3);\n+\n+/**\n+ * @brief This disables the global internal logger. No log messages will be\n+ * buffered internally anymore once this is called and the buffer is cleared.\n+ * This function should only be called once. Log messages will be buffered until\n+ * this function is called, or a logging connection is created.\n+ */\n+void kernel_disable_logging();\n+\n+/**\n+ * @brief Set the log level of the global internal logger. This does not enable\n+ * the selected categories. Use `kernel_enable_log_category` to start logging\n+ * from a specific, or all categories.\n+ *\n+ * @param[in] category If kernel_LOG_ALL is chosen, all messages at the specified level\n+ *                     will be logged. Otherwise only messages from the specified category\n+ *                     will be logged at the specified level and above.\n+ * @param[in] level    Log level at which the log category is set.\n+ * @return             True on success.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_add_log_level_category(const kernel_LogCategory category, kernel_LogLevel level);\n+\n+/**\n+ * @brief Enable a specific log category for the global internal logger.\n+ *\n+ * @param[in] category If kernel_LOG_ALL is chosen, all categories will be enabled.\n+ * @return             True on success.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_enable_log_category(const kernel_LogCategory category);\n+\n+/**\n+ * Disable a specific log category for the global internal logger.\n+ *\n+ * @param[in] category If kernel_LOG_ALL is chosen, all categories will be disabled.\n+ * @return             True on success.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_disable_log_category(const kernel_LogCategory category);\n+\n+/**\n+ * @brief Start logging messages through the provided callback. Log messages\n+ * produced before this function is first called are buffered and on calling this\n+ * function are logged immediately.\n+ *\n+ * @param[in] callback  Non-null, function through which messages will be logged.\n+ * @param[in] user_data Nullable, holds a user-defined opaque structure. Is passed back\n+ *                      to the user through the callback.\n+ * @param[in] options   Sets formatting options of the log messages.\n+ * @return              A new kernel logging connection, or null on error.\n+ */\n+kernel_LoggingConnection* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_logging_connection_create(\n+    kernel_LogCallback callback,\n+    void* user_data,\n+    const kernel_LoggingOptions options\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Stop logging and destroy the logging connection.\n+ */\n+void kernel_logging_connection_destroy(kernel_LoggingConnection* logging_connection);\n+\n+/**\n+ * @brief Creates a chain parameters struct with default parameters based on the\n+ * passed in chain type.\n+ *\n+ * @param[in] chain_type Controls the chain parameters type created.\n+ * @return               An allocated chain parameters opaque struct.\n+ */\n+const kernel_ChainParameters* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_chain_parameters_create(\n+    const kernel_ChainType chain_type);\n+\n+/**\n+ * Destroy the chain parameters.\n+ */\n+void kernel_chain_parameters_destroy(const kernel_ChainParameters* chain_parameters);\n+\n+/**\n+ * @brief Creates an object for holding the kernel notification callbacks.\n+ *\n+ * @param[in] callbacks Holds the callbacks that will be invoked by the kernel notifications.\n+ */\n+kernel_Notifications* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_notifications_create(\n+    kernel_NotificationInterfaceCallbacks callbacks);\n+\n+/**\n+ * Destroy the kernel notifications.\n+ */\n+void kernel_notifications_destroy(const kernel_Notifications* notifications);\n+\n+/**\n+ * Creates an empty context options.\n+ */\n+kernel_ContextOptions* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_context_options_create();\n+\n+/**\n+ * @brief Sets the chain params for the context options. The context created\n+ * with the options will be configured for these chain parameters.\n+ *\n+ * @param[in] context_options  Non-null, previously created with kernel_context_options_create.\n+ * @param[in] chain_parameters Is set to the context options.\n+ */\n+void kernel_context_options_set_chainparams(\n+    kernel_ContextOptions* context_options,\n+    const kernel_ChainParameters* chain_parameters\n+) BITCOINKERNEL_ARG_NONNULL(1) BITCOINKERNEL_ARG_NONNULL(2);\n+\n+/**\n+ * @brief Set the kernel notifications for the context options. The context\n+ * created with the options will be configured with these notifications.\n+ *\n+ * @param[in] context_options Non-null, previously created with kernel_context_options_create.\n+ * @param[in] notifications   Is set to the context options.\n+ */\n+void kernel_context_options_set_notifications(\n+    kernel_ContextOptions* context_options,\n+    const kernel_Notifications* notifications\n+) BITCOINKERNEL_ARG_NONNULL(1) BITCOINKERNEL_ARG_NONNULL(2);\n+\n+/**\n+ * Destroy the context options.\n+ */\n+void kernel_context_options_destroy(kernel_ContextOptions* context_options);\n+\n+/**\n+ * @brief Create a new kernel context. If the options have not been previously\n+ * set, their corresponding fields will be initialized to default values; the\n+ * context will assume mainnet chain parameters and won't attempt to call the\n+ * kernel notification callbacks.\n+ *\n+ * @param[in] context_options Nullable, created with kernel_context_options_create.\n+ * @return                    The allocated kernel context, or null on error.\n+ */\n+kernel_Context* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_context_create(\n+    const kernel_ContextOptions* context_options);\n+\n+/**\n+ * @brief Interrupt can be used to halt long-running validation functions like\n+ * when reindexing, importing or processing blocks.\n+ *\n+ * @param[in] context  Non-null.\n+ * @return             True if the interrupt was successful.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_context_interrupt(\n+    kernel_Context* context\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the context.\n+ */\n+void kernel_context_destroy(kernel_Context* context);\n+\n+/**\n+ * @brief Create options for the chainstate manager.\n+ *\n+ * @param[in] context        Non-null, the created options will associate with this kernel context\n+ *                           for the duration of their lifetime. The same context needs to be used\n+ *                           when instantiating the chainstate manager.\n+ * @param[in] data_directory Non-null, directory containing the chainstate data. If the directory\n+ *                           does not exist yet, it will be created.\n+ * @return                   The allocated chainstate manager options, or null on error.\n+ */\n+kernel_ChainstateManagerOptions* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_chainstate_manager_options_create(\n+    const kernel_Context* context,\n+    const char* data_directory\n+) BITCOINKERNEL_ARG_NONNULL(1) BITCOINKERNEL_ARG_NONNULL(2);\n+\n+/**\n+ * Destroy the chainstate manager options.\n+ */\n+void kernel_chainstate_manager_options_destroy(kernel_ChainstateManagerOptions* chainstate_manager_options);\n+\n+/**\n+ * @brief Create options for the block manager. The block manager is used\n+ * internally by the chainstate manager for block storage and indexing.\n+ *\n+ * @param[in] context          Non-null, the created options will associate with this kernel context\n+ *                             for the duration of their lifetime. The same context needs to be used\n+ *                             when instantiating the chainstate manager.\n+ * @param[in] blocks_directory Non-null, directory containing the block data. If the directory does\n+ *                             not exist yet, it will be created.\n+ * @return                     The allocated block manager options, or null on error.\n+ */\n+kernel_BlockManagerOptions* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_block_manager_options_create(\n+    const kernel_Context* context,\n+    const char* blocks_directory\n+) BITCOINKERNEL_ARG_NONNULL(1) BITCOINKERNEL_ARG_NONNULL(2);\n+\n+/**\n+ * @brief Set the number of available worker threads used during validation.\n+ *\n+ * @param[in] chainstate_manager_options Non-null, options to be set.\n+ * @param[in] worker_threads The number of worker threads that should be spawned in the thread pool\n+ *                           used for validation. The number should be greater than 0.\n+ */\n+void kernel_chainstate_manager_options_set_worker_threads_num(\n+        kernel_ChainstateManagerOptions* chainstate_manager_options,\n+        int worker_threads\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the block manager options.\n+ */\n+void kernel_block_manager_options_destroy(kernel_BlockManagerOptions* block_manager_options);\n+\n+/**\n+ * @brief Create a chainstate manager. This is the main object for many\n+ * validation tasks as well as for retrieving data from the chain. It is only\n+ * valid for as long as the passed in context also remains in memory.\n+ *\n+ * @param[in] chainstate_manager_options Non-null, created by kernel_chainstate_manager_options_create.\n+ * @param[in] block_manager_options      Non-null, created by kernel_block_manager_options_create.\n+ * @param[in] context                    Non-null, the created chainstate manager will associate with this\n+ *                                       kernel context for the duration of its lifetime. The same context\n+ *                                       needs to be used for later interactions with the chainstate manager.\n+ * @return                               The allocated chainstate manager, or null on error.\n+ */\n+kernel_ChainstateManager* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_chainstate_manager_create(\n+    kernel_ChainstateManagerOptions* chainstate_manager_options,\n+    kernel_BlockManagerOptions* block_manager_options,\n+    const kernel_Context* context",
      "path": "src/kernel/bitcoinkernel.h",
      "position": null,
      "original_position": 740,
      "commit_id": "34a8429ff3a870c0caaf4c4790becd86c5acde38",
      "original_commit_id": "f1b3ab751bfe374095427796af00f6fdd50ec3e5",
      "in_reply_to_id": 1848822043,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thanks, I think it is good to get these little things right.",
      "created_at": "2024-11-19T20:47:29Z",
      "updated_at": "2024-11-19T21:31:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1849036598",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1849036598"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 740,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1849037936",
      "pull_request_review_id": 2446622041,
      "id": 1849037936,
      "node_id": "PRRC_kwDOABII585uNhRw",
      "diff_hunk": "@@ -0,0 +1,1186 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_KERNEL_BITCOINKERNEL_H\n+#define BITCOIN_KERNEL_BITCOINKERNEL_H\n+\n+#ifndef __cplusplus\n+#include <stdbool.h>\n+#include <stddef.h>\n+#include <stdint.h>\n+#else\n+#include <cstddef>\n+#include <cstdint>\n+#endif // __cplusplus\n+\n+\n+#if !defined(BITCOINKERNEL_GNUC_PREREQ)\n+#if defined(__GNUC__) && defined(__GNUC_MINOR__)\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) \\\n+    ((__GNUC__ << 16) + __GNUC_MINOR__ >= ((_maj) << 16) + (_min))\n+#else\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) 0\n+#endif\n+#endif\n+\n+/* Warning attributes */\n+#if defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT __attribute__((__warn_unused_result__))\n+#else\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT\n+#endif\n+#if !defined(BITCOINKERNEL_BUILD) && defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_ARG_NONNULL(_x) __attribute__((__nonnull__(_x)))\n+#else\n+#define BITCOINKERNEL_ARG_NONNULL(_x)\n+#endif\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif // __cplusplus\n+\n+/**\n+ * ------ Context ------\n+ *\n+ * The library provides a built-in static constant kernel context. This context\n+ * offers only limited functionality. It detects and self-checks the correct\n+ * sha256 implementation, initializes the random number generator and\n+ * self-checks the secp256k1 static context. It is used internally for otherwise\n+ * \"context-free\" operations.\n+ *\n+ * The user can create their own context for passing it to state-rich validation\n+ * functions and holding callbacks for kernel events.\n+ *\n+ * ------ Error handling ------\n+ *\n+ * Functions communicate an error through their return types, usually returning\n+ * a nullptr, or false if an error is encountered. Additionally, verification\n+ * functions, e.g. for scripts, may communicate more detailed error information\n+ * through status code out parameters.\n+ *\n+ * Fine-grained validation information is communicated through the validation\n+ * interface.\n+ *\n+ * The kernel notifications issue callbacks for errors. These are usually\n+ * indicative of a system error. If such an error is issued, it is recommended\n+ * to halt and tear down the existing kernel objects. Remediating the error may\n+ * require system intervention by the user.\n+ *\n+ * ------ Pointer and argument conventions ------\n+ *\n+ * The user is responsible for de-allocating the memory owned by pointers\n+ * returned by functions. Typically pointers returned by *_create(...) functions\n+ * can be de-allocated by corresponding *_destroy(...) functions.\n+ *\n+ * Pointer arguments make no assumptions on their lifetime. Once the function\n+ * returns the user can safely de-allocate the passed in arguments.\n+ *\n+ * Pointers passed by callbacks are not owned by the user and are only valid for\n+ * the duration of it. They should not be de-allocated by the user.\n+ *\n+ * Array lengths follow the pointer argument they describe.\n+ */\n+\n+/**\n+ * Opaque data structure for holding a transaction.\n+ */\n+typedef struct kernel_Transaction kernel_Transaction;\n+\n+/**\n+ * Opaque data structure for holding a script pubkey.\n+ */\n+typedef struct kernel_ScriptPubkey kernel_ScriptPubkey;\n+\n+/**\n+ * Opaque data structure for holding a transaction output.\n+ */\n+typedef struct kernel_TransactionOutput kernel_TransactionOutput;\n+\n+/**\n+ * Opaque data structure for holding a logging connection.\n+ *\n+ * The logging connection can be used to manually stop logging.\n+ *\n+ * Messages that were logged before a connection is created are buffered in a\n+ * 1MB buffer. Logging can alternatively be permanently disabled by calling\n+ * kernel_disable_logging().\n+ */\n+typedef struct kernel_LoggingConnection kernel_LoggingConnection;\n+\n+/**\n+ * Opaque data structure for holding the chain parameters.\n+ *\n+ * These are eventually placed into a kernel context through the kernel context\n+ * options. The parameters describe the properties of a chain, and may be\n+ * instantiated for either mainnet, testnet, signet, or regtest.\n+ */\n+typedef struct kernel_ChainParameters kernel_ChainParameters;\n+\n+/**\n+ * Opaque data structure for holding callbacks for reacting to events that may\n+ * be encountered during library operations.\n+ */\n+typedef struct kernel_Notifications kernel_Notifications;\n+\n+/**\n+ * Opaque data structure for holding options for creating a new kernel context.\n+ *\n+ * Once a kernel context has been created from these options, they may be\n+ * destroyed. The options hold the notification callbacks as well as the\n+ * selected chain type until they are passed to the context. Their content and\n+ * scope can be expanded over time.\n+ */\n+typedef struct kernel_ContextOptions kernel_ContextOptions;\n+\n+/**\n+ * Opaque data structure for holding a kernel context.\n+ *\n+ * The kernel context is used to initialize internal state and hold the chain\n+ * parameters and callbacks for handling error and validation events. Once other\n+ * validation objects are instantiated from it, the context needs to be kept in\n+ * memory for the duration of their lifetimes.\n+ *\n+ * The processing of validation events is done through an internal task\n+ * runner owned by the context. The task runner drives the execution of events\n+ * triggering validation interface callbacks. Multiple validation interfaces can\n+ * be registered with the context. The kernel will create an event for each of\n+ * the registered validation interfaces through the task runner.\n+ *\n+ * A constructed context can be safely used from multiple threads, but functions\n+ * taking it as a non-cost argument need exclusive access to it.\n+ */\n+typedef struct kernel_Context kernel_Context;\n+\n+/**\n+ * Opaque data structure for holding a block index pointer.\n+ *\n+ * This is a pointer to an element in the block index currently in memory of the\n+ * chainstate manager. It is valid for the lifetime of the chainstate manager it\n+ * was retrieved from.\n+ */\n+typedef struct kernel_BlockIndex kernel_BlockIndex;\n+\n+/**\n+ * Opaque data structure for holding options for creating a new chainstate\n+ * manager.\n+ *\n+ * The chainstate manager options are used to set some parameters for the\n+ * chainstate manager. For now it just holds default options.\n+ */\n+typedef struct kernel_ChainstateManagerOptions kernel_ChainstateManagerOptions;\n+\n+/**\n+ * Opaque data structure for holding options for creating a new chainstate\n+ * manager.\n+ *\n+ * The chainstate manager has an internal block manager that takes its own set\n+ * of parameters. It is initialized with default options.\n+ */\n+typedef struct kernel_BlockManagerOptions kernel_BlockManagerOptions;\n+\n+/**\n+ * Opaque data structure for holding a chainstate manager.\n+ *\n+ * The chainstate manager is the central object for doing validation tasks as\n+ * well as retrieving data from the chain. Internally it is a complex data\n+ * structure with diverse functionality.\n+ *\n+ * The chainstate manager is only valid for as long as the context with which it\n+ * was created remains in memory.\n+ *\n+ * Its functionality will be more and more exposed in the future.\n+ */\n+typedef struct kernel_ChainstateManager kernel_ChainstateManager;\n+\n+/**\n+ * Opaque data structure for holding parameters used for loading the chainstate\n+ * of a chainstate manager.\n+ *\n+ * Is initialized with default parameters.\n+ */\n+typedef struct kernel_ChainstateLoadOptions kernel_ChainstateLoadOptions;\n+\n+/**\n+ * Opaque data structure for holding a block.\n+ */\n+typedef struct kernel_Block kernel_Block;\n+\n+/**\n+ * Opaque data structure for holding a non-owned block. This is typically a\n+ * block available to the user through one of the validation callbacks.\n+ */\n+typedef struct kernel_BlockPointer kernel_BlockPointer;\n+\n+/**\n+ * Opaque data structure for holding the state of a block during validation.\n+ *\n+ * Contains information indicating whether validation was successful, and if not\n+ * which step during block validation failed.\n+ */\n+typedef struct kernel_BlockValidationState kernel_BlockValidationState;\n+\n+/**\n+ * Opaque data structure for holding a validation interface.\n+ *\n+ * The validation interface can be registered with the internal task runner of an\n+ * existing context. It holds callbacks that will be triggered by certain\n+ * validation events. The callbacks registered with it will block further\n+ * validation progress when triggered.\n+ */\n+typedef struct kernel_ValidationInterface kernel_ValidationInterface;\n+\n+/**\n+ * Opaque data structure for holding a block undo struct.\n+ *\n+ * It holds all the previous outputs consumed by all transactions in a specific\n+ * block. Internally it holds a nested vector. The top level vector has an entry\n+ * for each transaction in a block (in order of the actual transactions of the\n+ * block and minus the coinbase transaction). Each entry is in turn a vector of\n+ * all the previous outputs of a transaction (in order of their corresponding\n+ * inputs).\n+ */\n+typedef struct kernel_BlockUndo kernel_BlockUndo;\n+\n+/** Current sync state passed to tip changed callbacks. */\n+typedef enum {\n+    kernel_INIT_REINDEX,\n+    kernel_INIT_DOWNLOAD,\n+    kernel_POST_INIT\n+} kernel_SynchronizationState;\n+\n+/** Possible warning types issued by validation. */\n+typedef enum {\n+    kernel_UNKNOWN_NEW_RULES_ACTIVATED,\n+    kernel_LARGE_WORK_INVALID_CHAIN\n+} kernel_Warning;\n+\n+/** Callback function types */\n+\n+/**\n+ * Function signature for the global logging callback. All bitcoin kernel\n+ * internal logs will pass through this callback.\n+ */\n+typedef void (*kernel_LogCallback)(void* user_data, const char* message);\n+\n+/**\n+ * Function signatures for the kernel notifications.\n+ */\n+typedef void (*kernel_NotifyBlockTip)(void* user_data, kernel_SynchronizationState state, kernel_BlockIndex* index);\n+typedef void (*kernel_NotifyHeaderTip)(void* user_data, kernel_SynchronizationState state, int64_t height, int64_t timestamp, bool presync);\n+typedef void (*kernel_NotifyProgress)(void* user_data, const char* title, int progress_percent, bool resume_possible);\n+typedef void (*kernel_NotifyWarningSet)(void* user_data, kernel_Warning warning, const char* message);\n+typedef void (*kernel_NotifyWarningUnset)(void* user_data, kernel_Warning warning);\n+typedef void (*kernel_NotifyFlushError)(void* user_data, const char* message);\n+typedef void (*kernel_NotifyFatalError)(void* user_data, const char* message);\n+\n+/**\n+ * Function signatures for the validation interface.\n+ */\n+typedef void (*kernel_ValidationInterfaceBlockChecked)(void* user_data, const kernel_BlockPointer* block, const kernel_BlockValidationState* state);\n+\n+/**\n+ * Whether a validated data structure is valid, invalid, or an error was\n+ * encountered during processing.\n+ */\n+typedef enum {\n+    kernel_VALIDATION_STATE_VALID = 0,\n+    kernel_VALIDATION_STATE_INVALID,\n+    kernel_VALIDATION_STATE_ERROR,\n+} kernel_ValidationMode;\n+\n+/**\n+ * A granular \"reason\" why a block was invalid.\n+ */\n+typedef enum {\n+    kernel_BLOCK_RESULT_UNSET = 0, //!< initial value. Block has not yet been rejected\n+    kernel_BLOCK_CONSENSUS,        //!< invalid by consensus rules (excluding any below reasons)\n+    kernel_BLOCK_CACHED_INVALID,  //!< this block was cached as being invalid and we didn't store the reason why\n+    kernel_BLOCK_INVALID_HEADER,  //!< invalid proof of work or time too old\n+    kernel_BLOCK_MUTATED,         //!< the block's data didn't match the data committed to by the PoW\n+    kernel_BLOCK_MISSING_PREV,    //!< We don't have the previous block the checked one is built on\n+    kernel_BLOCK_INVALID_PREV,    //!< A block this one builds on is invalid\n+    kernel_BLOCK_TIME_FUTURE,     //!< block timestamp was > 2 hours in the future (or our clock is bad)\n+    kernel_BLOCK_CHECKPOINT,      //!< the block failed to meet one of our checkpoints\n+    kernel_BLOCK_HEADER_LOW_WORK, //!< the block header may be on a too-little-work chain\n+} kernel_BlockValidationResult;\n+\n+/**\n+ * Holds the validation interface callbacks. The user data pointer may be used\n+ * to point to user-defined structures to make processing the validation\n+ * callbacks easier.\n+ */\n+typedef struct {\n+    void* user_data;                                      //!< Holds a user-defined opaque structure that is passed to the validation\n+                                                          //!< interface callbacks.\n+    kernel_ValidationInterfaceBlockChecked block_checked; //!< Called when a new block has been checked. Contains the\n+                                                          //!< result of its validation.\n+} kernel_ValidationInterfaceCallbacks;\n+\n+/**\n+ * A struct for holding the kernel notification callbacks. The user data\n+ * pointer may be used to point to user-defined structures to make processing\n+ * the notifications easier. Note that this makes it the user's responsibility\n+ * to ensure that the user_data outlives the kernel objects. Notifications can\n+ * occur even as kernel objects are deleted, so care has to be taken to ensure\n+ * safe unwinding.\n+ */\n+typedef struct {\n+    void* user_data;                         //!< Holds a user-defined opaque structure that is passed to the notification callbacks.\n+    kernel_NotifyBlockTip block_tip;         //!< The chain's tip was updated to the provided block index.\n+    kernel_NotifyHeaderTip header_tip;       //!< A new best block header was added.\n+    kernel_NotifyProgress progress;          //!< Reports on current block synchronization progress.\n+    kernel_NotifyWarningSet warning_set;     //!< A warning issued by the kernel library during validation.\n+    kernel_NotifyWarningUnset warning_unset; //!< A previous condition leading to the issuance of a warning is no longer given.\n+    kernel_NotifyFlushError flush_error;     //!< An error encountered when flushing data to disk.\n+    kernel_NotifyFatalError fatal_error;     //!< A un-recoverable system error encountered by the library.\n+} kernel_NotificationInterfaceCallbacks;\n+\n+/**\n+ * A collection of logging categories that may be encountered by kernel code.\n+ */\n+typedef enum {\n+    kernel_LOG_ALL = 0,\n+    kernel_LOG_BENCH,\n+    kernel_LOG_BLOCKSTORAGE,\n+    kernel_LOG_COINDB,\n+    kernel_LOG_LEVELDB,\n+    kernel_LOG_LOCK,\n+    kernel_LOG_MEMPOOL,\n+    kernel_LOG_PRUNE,\n+    kernel_LOG_RAND,\n+    kernel_LOG_REINDEX,\n+    kernel_LOG_VALIDATION,\n+    kernel_LOG_KERNEL,\n+} kernel_LogCategory;\n+\n+/**\n+ * The level at which logs should be produced.\n+ */\n+typedef enum {\n+    kernel_LOG_INFO = 0,\n+    kernel_LOG_DEBUG,\n+    kernel_LOG_TRACE,\n+} kernel_LogLevel;\n+\n+/**\n+ * Options controlling the format of log messages.\n+ */\n+typedef struct {\n+    bool log_timestamps;               //!< Prepend a timestamp to log messages.\n+    bool log_time_micros;              //!< Log timestamps in microsecond precision.\n+    bool log_threadnames;              //!< Prepend the name of the thread to log messages.\n+    bool log_sourcelocations;          //!< Prepend the source location to log messages.\n+    bool always_print_category_levels; //!< Prepend the log category and level to log messages.\n+} kernel_LoggingOptions;\n+\n+/**\n+ * A collection of status codes that may be issued by the script verify function.\n+ */\n+typedef enum {\n+    kernel_SCRIPT_VERIFY_OK = 0,\n+    kernel_SCRIPT_VERIFY_ERROR_TX_INPUT_INDEX, //!< The provided input index is out of range of the actual number of inputs of the transaction.\n+    kernel_SCRIPT_VERIFY_ERROR_INVALID_FLAGS, //!< The provided bitfield for the flags was invalid.\n+    kernel_SCRIPT_VERIFY_ERROR_INVALID_FLAGS_COMBINATION, //!< The flags very combined in an invalid way.\n+    kernel_SCRIPT_VERIFY_ERROR_SPENT_OUTPUTS_REQUIRED, //!< The taproot flag was set, so valid spent_outputs have to be provided.\n+    kernel_SCRIPT_VERIFY_ERROR_SPENT_OUTPUTS_MISMATCH, //!< The number of spent outputs does not match the number of inputs of the tx.\n+} kernel_ScriptVerifyStatus;\n+\n+/**\n+ * Script verification flags that may be composed with each other.\n+ */\n+typedef enum\n+{\n+    kernel_SCRIPT_FLAGS_VERIFY_NONE                = 0,\n+    kernel_SCRIPT_FLAGS_VERIFY_P2SH                = (1U << 0), //!< evaluate P2SH (BIP16) subscripts\n+    kernel_SCRIPT_FLAGS_VERIFY_DERSIG              = (1U << 2), //!< enforce strict DER (BIP66) compliance\n+    kernel_SCRIPT_FLAGS_VERIFY_NULLDUMMY           = (1U << 4), //!< enforce NULLDUMMY (BIP147)\n+    kernel_SCRIPT_FLAGS_VERIFY_CHECKLOCKTIMEVERIFY = (1U << 9), //!< enable CHECKLOCKTIMEVERIFY (BIP65)\n+    kernel_SCRIPT_FLAGS_VERIFY_CHECKSEQUENCEVERIFY = (1U << 10), //!< enable CHECKSEQUENCEVERIFY (BIP112)\n+    kernel_SCRIPT_FLAGS_VERIFY_WITNESS             = (1U << 11), //!< enable WITNESS (BIP141)\n+\n+    kernel_SCRIPT_FLAGS_VERIFY_TAPROOT             = (1U << 17), //!< enable TAPROOT (BIPs 341 & 342)\n+    kernel_SCRIPT_FLAGS_VERIFY_ALL                 = kernel_SCRIPT_FLAGS_VERIFY_P2SH |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_DERSIG |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_NULLDUMMY |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_CHECKLOCKTIMEVERIFY |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_CHECKSEQUENCEVERIFY |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_WITNESS |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_TAPROOT\n+} kernel_ScriptFlags;\n+\n+/**\n+ * Chain type used for creating chain params.\n+ */\n+typedef enum {\n+    kernel_CHAIN_TYPE_MAINNET = 0,\n+    kernel_CHAIN_TYPE_TESTNET,\n+    kernel_CHAIN_TYPE_TESTNET_4,\n+    kernel_CHAIN_TYPE_SIGNET,\n+    kernel_CHAIN_TYPE_REGTEST,\n+} kernel_ChainType;\n+\n+/**\n+ * A type-safe block identifier.\n+ */\n+typedef struct {\n+    unsigned char hash[32];\n+} kernel_BlockHash;\n+\n+/**\n+ * Convenience struct for holding serialized data.\n+ */\n+typedef struct {\n+    unsigned char* data;\n+    size_t size;\n+} kernel_ByteArray;\n+\n+/**\n+ * @brief Create a new transaction from the serialized data.\n+ *\n+ * @param[in] raw_transaction     Non-null.\n+ * @param[in] raw_transaction_len Length of the serialized transaction.\n+ * @return                        The transaction, or null on error.\n+ */\n+kernel_Transaction* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_transaction_create(\n+    const unsigned char* raw_transaction, size_t raw_transaction_len\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the transaction.\n+ */\n+void kernel_transaction_destroy(kernel_Transaction* transaction);\n+\n+/**\n+ * @brief Create a script pubkey from serialized data.\n+ * @param[in] script_pubkey     Non-null.\n+ * @param[in] script_pubkey_len Length of the script pubkey data.\n+ * @return                      The script pubkey, or null on error.\n+ */\n+kernel_ScriptPubkey* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_script_pubkey_create(\n+    const unsigned char* script_pubkey, size_t script_pubkey_len\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * @brief Copies the script pubkey data into the returned byte array.\n+ * @param[in] script_pubkey Non-null.\n+ * @return                  The serialized script pubkey data.\n+ */\n+kernel_ByteArray* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_copy_script_pubkey_data(\n+        const kernel_ScriptPubkey* script_pubkey\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the script pubkey.\n+ */\n+void kernel_script_pubkey_destroy(kernel_ScriptPubkey* script_pubkey);\n+\n+/**\n+ * @brief Create a transaction output from a script pubkey and an amount.\n+ * @param[in] script_pubkey Non-null.\n+ * @param[in] amount        The amount associated with the script pubkey for this output.\n+ * @return                  The transaction output.\n+ */\n+kernel_TransactionOutput* kernel_transaction_output_create(\n+    kernel_ScriptPubkey* script_pubkey,\n+    int64_t amount\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the transaction output.\n+ */\n+void kernel_transaction_output_destroy(kernel_TransactionOutput* transaction_output);\n+\n+/**\n+ * @brief Verify if the input at input_index of tx_to spends the script pubkey\n+ * under the constraints specified by flags. If the witness flag is set the\n+ * amount parameter is used. If the taproot flag is set, the spent outputs\n+ * parameter is used to validate taproot transactions.\n+ *\n+ * @param[in] script_pubkey     Non-null, script pubkey to be spent.\n+ * @param[in] amount            Amount of the script pubkey's associated output. May be zero if\n+ *                              the witness flag is not set.\n+ * @param[in] tx_to             Non-null, transaction spending the script_pubkey.\n+ * @param[in] spent_outputs     Nullable if the taproot flag is not set. Points to an array of\n+ *                              outputs spent by the transaction.\n+ * @param[in] spent_outputs_len Length of the spent_outputs array.\n+ * @param[in] input_index       Index of the input in tx_to spending the script_pubkey.\n+ * @param[in] flags             Bitfield of kernel_ScriptFlags controlling validation constraints.\n+ * @param[out] status           Nullable, will be set to an error code if the operation fails.\n+ *                              Should be set to kernel_SCRIPT_VERIFY_OK.\n+ * @return                      True if the script is valid.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_verify_script(\n+    const kernel_ScriptPubkey* script_pubkey,\n+    int64_t amount,\n+    const kernel_Transaction* tx_to,\n+    const kernel_TransactionOutput** spent_outputs, size_t spent_outputs_len,\n+    unsigned int input_index,\n+    unsigned int flags,\n+    kernel_ScriptVerifyStatus* status\n+) BITCOINKERNEL_ARG_NONNULL(1) BITCOINKERNEL_ARG_NONNULL(3);\n+\n+/**\n+ * @brief This disables the global internal logger. No log messages will be\n+ * buffered internally anymore once this is called and the buffer is cleared.\n+ * This function should only be called once. Log messages will be buffered until\n+ * this function is called, or a logging connection is created.\n+ */\n+void kernel_disable_logging();\n+\n+/**\n+ * @brief Set the log level of the global internal logger. This does not enable\n+ * the selected categories. Use `kernel_enable_log_category` to start logging\n+ * from a specific, or all categories.\n+ *\n+ * @param[in] category If kernel_LOG_ALL is chosen, all messages at the specified level\n+ *                     will be logged. Otherwise only messages from the specified category\n+ *                     will be logged at the specified level and above.\n+ * @param[in] level    Log level at which the log category is set.\n+ * @return             True on success.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_add_log_level_category(const kernel_LogCategory category, kernel_LogLevel level);\n+\n+/**\n+ * @brief Enable a specific log category for the global internal logger.\n+ *\n+ * @param[in] category If kernel_LOG_ALL is chosen, all categories will be enabled.\n+ * @return             True on success.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_enable_log_category(const kernel_LogCategory category);\n+\n+/**\n+ * Disable a specific log category for the global internal logger.\n+ *\n+ * @param[in] category If kernel_LOG_ALL is chosen, all categories will be disabled.\n+ * @return             True on success.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_disable_log_category(const kernel_LogCategory category);\n+\n+/**\n+ * @brief Start logging messages through the provided callback. Log messages\n+ * produced before this function is first called are buffered and on calling this\n+ * function are logged immediately.\n+ *\n+ * @param[in] callback  Non-null, function through which messages will be logged.\n+ * @param[in] user_data Nullable, holds a user-defined opaque structure. Is passed back\n+ *                      to the user through the callback.\n+ * @param[in] options   Sets formatting options of the log messages.\n+ * @return              A new kernel logging connection, or null on error.\n+ */\n+kernel_LoggingConnection* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_logging_connection_create(\n+    kernel_LogCallback callback,\n+    void* user_data,\n+    const kernel_LoggingOptions options\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Stop logging and destroy the logging connection.\n+ */\n+void kernel_logging_connection_destroy(kernel_LoggingConnection* logging_connection);\n+\n+/**\n+ * @brief Creates a chain parameters struct with default parameters based on the\n+ * passed in chain type.\n+ *\n+ * @param[in] chain_type Controls the chain parameters type created.\n+ * @return               An allocated chain parameters opaque struct.\n+ */\n+const kernel_ChainParameters* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_chain_parameters_create(\n+    const kernel_ChainType chain_type);\n+\n+/**\n+ * Destroy the chain parameters.\n+ */\n+void kernel_chain_parameters_destroy(const kernel_ChainParameters* chain_parameters);\n+\n+/**\n+ * @brief Creates an object for holding the kernel notification callbacks.\n+ *\n+ * @param[in] callbacks Holds the callbacks that will be invoked by the kernel notifications.\n+ */\n+kernel_Notifications* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_notifications_create(\n+    kernel_NotificationInterfaceCallbacks callbacks);\n+\n+/**\n+ * Destroy the kernel notifications.\n+ */\n+void kernel_notifications_destroy(const kernel_Notifications* notifications);\n+\n+/**\n+ * Creates an empty context options.\n+ */\n+kernel_ContextOptions* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_context_options_create();\n+\n+/**\n+ * @brief Sets the chain params for the context options. The context created\n+ * with the options will be configured for these chain parameters.\n+ *\n+ * @param[in] context_options  Non-null, previously created with kernel_context_options_create.\n+ * @param[in] chain_parameters Is set to the context options.\n+ */\n+void kernel_context_options_set_chainparams(\n+    kernel_ContextOptions* context_options,\n+    const kernel_ChainParameters* chain_parameters\n+) BITCOINKERNEL_ARG_NONNULL(1) BITCOINKERNEL_ARG_NONNULL(2);\n+\n+/**\n+ * @brief Set the kernel notifications for the context options. The context\n+ * created with the options will be configured with these notifications.\n+ *\n+ * @param[in] context_options Non-null, previously created with kernel_context_options_create.\n+ * @param[in] notifications   Is set to the context options.\n+ */\n+void kernel_context_options_set_notifications(\n+    kernel_ContextOptions* context_options,\n+    const kernel_Notifications* notifications\n+) BITCOINKERNEL_ARG_NONNULL(1) BITCOINKERNEL_ARG_NONNULL(2);\n+\n+/**\n+ * Destroy the context options.\n+ */\n+void kernel_context_options_destroy(kernel_ContextOptions* context_options);\n+\n+/**\n+ * @brief Create a new kernel context. If the options have not been previously\n+ * set, their corresponding fields will be initialized to default values; the\n+ * context will assume mainnet chain parameters and won't attempt to call the\n+ * kernel notification callbacks.\n+ *\n+ * @param[in] context_options Nullable, created with kernel_context_options_create.\n+ * @return                    The allocated kernel context, or null on error.\n+ */\n+kernel_Context* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_context_create(\n+    const kernel_ContextOptions* context_options);\n+\n+/**\n+ * @brief Interrupt can be used to halt long-running validation functions like\n+ * when reindexing, importing or processing blocks.\n+ *\n+ * @param[in] context  Non-null.\n+ * @return             True if the interrupt was successful.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_context_interrupt(\n+    kernel_Context* context\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the context.\n+ */\n+void kernel_context_destroy(kernel_Context* context);\n+\n+/**\n+ * @brief Create options for the chainstate manager.\n+ *\n+ * @param[in] context        Non-null, the created options will associate with this kernel context\n+ *                           for the duration of their lifetime. The same context needs to be used\n+ *                           when instantiating the chainstate manager.\n+ * @param[in] data_directory Non-null, directory containing the chainstate data. If the directory\n+ *                           does not exist yet, it will be created.\n+ * @return                   The allocated chainstate manager options, or null on error.\n+ */\n+kernel_ChainstateManagerOptions* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_chainstate_manager_options_create(\n+    const kernel_Context* context,\n+    const char* data_directory\n+) BITCOINKERNEL_ARG_NONNULL(1) BITCOINKERNEL_ARG_NONNULL(2);\n+\n+/**\n+ * Destroy the chainstate manager options.\n+ */\n+void kernel_chainstate_manager_options_destroy(kernel_ChainstateManagerOptions* chainstate_manager_options);\n+\n+/**\n+ * @brief Create options for the block manager. The block manager is used\n+ * internally by the chainstate manager for block storage and indexing.\n+ *\n+ * @param[in] context          Non-null, the created options will associate with this kernel context\n+ *                             for the duration of their lifetime. The same context needs to be used\n+ *                             when instantiating the chainstate manager.\n+ * @param[in] blocks_directory Non-null, directory containing the block data. If the directory does\n+ *                             not exist yet, it will be created.\n+ * @return                     The allocated block manager options, or null on error.\n+ */\n+kernel_BlockManagerOptions* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_block_manager_options_create(\n+    const kernel_Context* context,\n+    const char* blocks_directory\n+) BITCOINKERNEL_ARG_NONNULL(1) BITCOINKERNEL_ARG_NONNULL(2);\n+\n+/**\n+ * @brief Set the number of available worker threads used during validation.\n+ *\n+ * @param[in] chainstate_manager_options Non-null, options to be set.\n+ * @param[in] worker_threads The number of worker threads that should be spawned in the thread pool\n+ *                           used for validation. The number should be greater than 0.\n+ */\n+void kernel_chainstate_manager_options_set_worker_threads_num(\n+        kernel_ChainstateManagerOptions* chainstate_manager_options,\n+        int worker_threads\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the block manager options.\n+ */\n+void kernel_block_manager_options_destroy(kernel_BlockManagerOptions* block_manager_options);\n+\n+/**\n+ * @brief Create a chainstate manager. This is the main object for many\n+ * validation tasks as well as for retrieving data from the chain. It is only\n+ * valid for as long as the passed in context also remains in memory.\n+ *\n+ * @param[in] chainstate_manager_options Non-null, created by kernel_chainstate_manager_options_create.\n+ * @param[in] block_manager_options      Non-null, created by kernel_block_manager_options_create.\n+ * @param[in] context                    Non-null, the created chainstate manager will associate with this\n+ *                                       kernel context for the duration of its lifetime. The same context\n+ *                                       needs to be used for later interactions with the chainstate manager.\n+ * @return                               The allocated chainstate manager, or null on error.\n+ */\n+kernel_ChainstateManager* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_chainstate_manager_create(\n+    kernel_ChainstateManagerOptions* chainstate_manager_options,\n+    kernel_BlockManagerOptions* block_manager_options,\n+    const kernel_Context* context\n+) BITCOINKERNEL_ARG_NONNULL(1) BITCOINKERNEL_ARG_NONNULL(2) BITCOINKERNEL_ARG_NONNULL(3);\n+\n+/**\n+ * Destroy the chainstate manager.\n+ */\n+void kernel_chainstate_manager_destroy(kernel_ChainstateManager* chainstate_manager, const kernel_Context* context);",
      "path": "src/kernel/bitcoinkernel.h",
      "position": 751,
      "original_position": 746,
      "commit_id": "34a8429ff3a870c0caaf4c4790becd86c5acde38",
      "original_commit_id": "f1b3ab751bfe374095427796af00f6fdd50ec3e5",
      "in_reply_to_id": 1848821020,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Similarly to how the context is passed to the other chainman related functions, it is there to guarantee that it is still around when destroying the chainman. The reason for this is that there may be error notification callbacks issued during destruction.",
      "created_at": "2024-11-19T20:48:48Z",
      "updated_at": "2024-11-19T21:31:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1849037936",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1849037936"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 751,
      "original_line": 751,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1849046061",
      "pull_request_review_id": 2446622041,
      "id": 1849046061,
      "node_id": "PRRC_kwDOABII585uNjQt",
      "diff_hunk": "@@ -0,0 +1,1145 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_KERNEL_BITCOINKERNEL_H\n+#define BITCOIN_KERNEL_BITCOINKERNEL_H\n+\n+#ifndef __cplusplus\n+#include <stdbool.h>\n+#include <stddef.h>\n+#include <stdint.h>\n+#else\n+#include <cstddef>\n+#include <cstdint>\n+#endif // __cplusplus\n+\n+\n+#if !defined(BITCOINKERNEL_GNUC_PREREQ)\n+#if defined(__GNUC__) && defined(__GNUC_MINOR__)\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) \\\n+    ((__GNUC__ << 16) + __GNUC_MINOR__ >= ((_maj) << 16) + (_min))\n+#else\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) 0\n+#endif\n+#endif\n+\n+/* Warning attributes */\n+#if defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT __attribute__((__warn_unused_result__))\n+#else\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT\n+#endif\n+#if !defined(BITCOINKERNEL_BUILD) && defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_ARG_NONNULL(_x) __attribute__((__nonnull__(_x)))\n+#else\n+#define BITCOINKERNEL_ARG_NONNULL(_x)\n+#endif\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif // __cplusplus\n+\n+/**\n+ * ------ Context ------",
      "path": "src/kernel/bitcoinkernel.h",
      "position": 44,
      "original_position": 44,
      "commit_id": "34a8429ff3a870c0caaf4c4790becd86c5acde38",
      "original_commit_id": "33c71843e3fde0b795687a8626220f02f7243662",
      "in_reply_to_id": 1757065221,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I did not think that much about order here, but I do think having this section on the context is a good idea. The key is that the user is not required to instantiate the context for using some parts of the library (and I think this is important enough to not just make it a footnote). The user-instantiated context is only really required when interacting with the \"stateful\" endpoints. Besides, it may be relevant to know what the library is instantiating internally in case there is some sort of conflict.\r\n\r\nThere is an exception here with the validation interface, and I've taken several attempts to come up with a nice way to tie it into the option pattern as well. I'll take a stab at it again soon.",
      "created_at": "2024-11-19T20:56:30Z",
      "updated_at": "2024-11-19T21:31:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1849046061",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1849046061"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 44,
      "original_line": 44,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1849053726",
      "pull_request_review_id": 2446622041,
      "id": 1849053726,
      "node_id": "PRRC_kwDOABII585uNlIe",
      "diff_hunk": "@@ -0,0 +1,1186 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_KERNEL_BITCOINKERNEL_H\n+#define BITCOIN_KERNEL_BITCOINKERNEL_H\n+\n+#ifndef __cplusplus\n+#include <stdbool.h>\n+#include <stddef.h>\n+#include <stdint.h>\n+#else\n+#include <cstddef>\n+#include <cstdint>\n+#endif // __cplusplus\n+\n+\n+#if !defined(BITCOINKERNEL_GNUC_PREREQ)\n+#if defined(__GNUC__) && defined(__GNUC_MINOR__)\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) \\\n+    ((__GNUC__ << 16) + __GNUC_MINOR__ >= ((_maj) << 16) + (_min))\n+#else\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) 0\n+#endif\n+#endif\n+\n+/* Warning attributes */\n+#if defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT __attribute__((__warn_unused_result__))\n+#else\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT\n+#endif\n+#if !defined(BITCOINKERNEL_BUILD) && defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_ARG_NONNULL(_x) __attribute__((__nonnull__(_x)))\n+#else\n+#define BITCOINKERNEL_ARG_NONNULL(_x)\n+#endif\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif // __cplusplus\n+\n+/**\n+ * ------ Context ------\n+ *\n+ * The library provides a built-in static constant kernel context. This context\n+ * offers only limited functionality. It detects and self-checks the correct\n+ * sha256 implementation, initializes the random number generator and\n+ * self-checks the secp256k1 static context. It is used internally for otherwise\n+ * \"context-free\" operations.\n+ *\n+ * The user can create their own context for passing it to state-rich validation\n+ * functions and holding callbacks for kernel events.\n+ *\n+ * ------ Error handling ------\n+ *\n+ * Functions communicate an error through their return types, usually returning\n+ * a nullptr, or false if an error is encountered. Additionally, verification\n+ * functions, e.g. for scripts, may communicate more detailed error information\n+ * through status code out parameters.\n+ *\n+ * Fine-grained validation information is communicated through the validation\n+ * interface.\n+ *\n+ * The kernel notifications issue callbacks for errors. These are usually\n+ * indicative of a system error. If such an error is issued, it is recommended\n+ * to halt and tear down the existing kernel objects. Remediating the error may\n+ * require system intervention by the user.\n+ *\n+ * ------ Pointer and argument conventions ------\n+ *\n+ * The user is responsible for de-allocating the memory owned by pointers\n+ * returned by functions. Typically pointers returned by *_create(...) functions\n+ * can be de-allocated by corresponding *_destroy(...) functions.\n+ *\n+ * Pointer arguments make no assumptions on their lifetime. Once the function\n+ * returns the user can safely de-allocate the passed in arguments.\n+ *\n+ * Pointers passed by callbacks are not owned by the user and are only valid for\n+ * the duration of it. They should not be de-allocated by the user.\n+ *\n+ * Array lengths follow the pointer argument they describe.\n+ */\n+\n+/**\n+ * Opaque data structure for holding a transaction.\n+ */\n+typedef struct kernel_Transaction kernel_Transaction;\n+\n+/**\n+ * Opaque data structure for holding a script pubkey.\n+ */\n+typedef struct kernel_ScriptPubkey kernel_ScriptPubkey;\n+\n+/**\n+ * Opaque data structure for holding a transaction output.\n+ */\n+typedef struct kernel_TransactionOutput kernel_TransactionOutput;\n+\n+/**\n+ * Opaque data structure for holding a logging connection.\n+ *\n+ * The logging connection can be used to manually stop logging.\n+ *\n+ * Messages that were logged before a connection is created are buffered in a\n+ * 1MB buffer. Logging can alternatively be permanently disabled by calling\n+ * kernel_disable_logging().\n+ */\n+typedef struct kernel_LoggingConnection kernel_LoggingConnection;\n+\n+/**\n+ * Opaque data structure for holding the chain parameters.\n+ *\n+ * These are eventually placed into a kernel context through the kernel context\n+ * options. The parameters describe the properties of a chain, and may be\n+ * instantiated for either mainnet, testnet, signet, or regtest.\n+ */\n+typedef struct kernel_ChainParameters kernel_ChainParameters;\n+\n+/**\n+ * Opaque data structure for holding callbacks for reacting to events that may\n+ * be encountered during library operations.\n+ */\n+typedef struct kernel_Notifications kernel_Notifications;\n+\n+/**\n+ * Opaque data structure for holding options for creating a new kernel context.\n+ *\n+ * Once a kernel context has been created from these options, they may be\n+ * destroyed. The options hold the notification callbacks as well as the\n+ * selected chain type until they are passed to the context. Their content and\n+ * scope can be expanded over time.\n+ */\n+typedef struct kernel_ContextOptions kernel_ContextOptions;\n+\n+/**\n+ * Opaque data structure for holding a kernel context.\n+ *\n+ * The kernel context is used to initialize internal state and hold the chain\n+ * parameters and callbacks for handling error and validation events. Once other\n+ * validation objects are instantiated from it, the context needs to be kept in\n+ * memory for the duration of their lifetimes.\n+ *\n+ * The processing of validation events is done through an internal task\n+ * runner owned by the context. The task runner drives the execution of events\n+ * triggering validation interface callbacks. Multiple validation interfaces can\n+ * be registered with the context. The kernel will create an event for each of\n+ * the registered validation interfaces through the task runner.\n+ *\n+ * A constructed context can be safely used from multiple threads, but functions\n+ * taking it as a non-cost argument need exclusive access to it.\n+ */\n+typedef struct kernel_Context kernel_Context;\n+\n+/**\n+ * Opaque data structure for holding a block index pointer.\n+ *\n+ * This is a pointer to an element in the block index currently in memory of the\n+ * chainstate manager. It is valid for the lifetime of the chainstate manager it\n+ * was retrieved from.\n+ */\n+typedef struct kernel_BlockIndex kernel_BlockIndex;\n+\n+/**\n+ * Opaque data structure for holding options for creating a new chainstate\n+ * manager.\n+ *\n+ * The chainstate manager options are used to set some parameters for the\n+ * chainstate manager. For now it just holds default options.\n+ */\n+typedef struct kernel_ChainstateManagerOptions kernel_ChainstateManagerOptions;\n+\n+/**\n+ * Opaque data structure for holding options for creating a new chainstate\n+ * manager.\n+ *\n+ * The chainstate manager has an internal block manager that takes its own set\n+ * of parameters. It is initialized with default options.\n+ */\n+typedef struct kernel_BlockManagerOptions kernel_BlockManagerOptions;\n+\n+/**\n+ * Opaque data structure for holding a chainstate manager.\n+ *\n+ * The chainstate manager is the central object for doing validation tasks as\n+ * well as retrieving data from the chain. Internally it is a complex data\n+ * structure with diverse functionality.\n+ *\n+ * The chainstate manager is only valid for as long as the context with which it\n+ * was created remains in memory.\n+ *\n+ * Its functionality will be more and more exposed in the future.\n+ */\n+typedef struct kernel_ChainstateManager kernel_ChainstateManager;\n+\n+/**\n+ * Opaque data structure for holding parameters used for loading the chainstate\n+ * of a chainstate manager.\n+ *\n+ * Is initialized with default parameters.\n+ */\n+typedef struct kernel_ChainstateLoadOptions kernel_ChainstateLoadOptions;\n+\n+/**\n+ * Opaque data structure for holding a block.\n+ */\n+typedef struct kernel_Block kernel_Block;\n+\n+/**\n+ * Opaque data structure for holding a non-owned block. This is typically a\n+ * block available to the user through one of the validation callbacks.\n+ */\n+typedef struct kernel_BlockPointer kernel_BlockPointer;\n+\n+/**\n+ * Opaque data structure for holding the state of a block during validation.\n+ *\n+ * Contains information indicating whether validation was successful, and if not\n+ * which step during block validation failed.\n+ */\n+typedef struct kernel_BlockValidationState kernel_BlockValidationState;\n+\n+/**\n+ * Opaque data structure for holding a validation interface.\n+ *\n+ * The validation interface can be registered with the internal task runner of an\n+ * existing context. It holds callbacks that will be triggered by certain\n+ * validation events. The callbacks registered with it will block further\n+ * validation progress when triggered.\n+ */\n+typedef struct kernel_ValidationInterface kernel_ValidationInterface;\n+\n+/**\n+ * Opaque data structure for holding a block undo struct.\n+ *\n+ * It holds all the previous outputs consumed by all transactions in a specific\n+ * block. Internally it holds a nested vector. The top level vector has an entry\n+ * for each transaction in a block (in order of the actual transactions of the\n+ * block and minus the coinbase transaction). Each entry is in turn a vector of\n+ * all the previous outputs of a transaction (in order of their corresponding\n+ * inputs).\n+ */\n+typedef struct kernel_BlockUndo kernel_BlockUndo;\n+\n+/** Current sync state passed to tip changed callbacks. */\n+typedef enum {\n+    kernel_INIT_REINDEX,\n+    kernel_INIT_DOWNLOAD,\n+    kernel_POST_INIT\n+} kernel_SynchronizationState;\n+\n+/** Possible warning types issued by validation. */\n+typedef enum {\n+    kernel_UNKNOWN_NEW_RULES_ACTIVATED,\n+    kernel_LARGE_WORK_INVALID_CHAIN\n+} kernel_Warning;\n+\n+/** Callback function types */\n+\n+/**\n+ * Function signature for the global logging callback. All bitcoin kernel\n+ * internal logs will pass through this callback.\n+ */\n+typedef void (*kernel_LogCallback)(void* user_data, const char* message);\n+\n+/**\n+ * Function signatures for the kernel notifications.\n+ */\n+typedef void (*kernel_NotifyBlockTip)(void* user_data, kernel_SynchronizationState state, kernel_BlockIndex* index);\n+typedef void (*kernel_NotifyHeaderTip)(void* user_data, kernel_SynchronizationState state, int64_t height, int64_t timestamp, bool presync);\n+typedef void (*kernel_NotifyProgress)(void* user_data, const char* title, int progress_percent, bool resume_possible);\n+typedef void (*kernel_NotifyWarningSet)(void* user_data, kernel_Warning warning, const char* message);\n+typedef void (*kernel_NotifyWarningUnset)(void* user_data, kernel_Warning warning);\n+typedef void (*kernel_NotifyFlushError)(void* user_data, const char* message);\n+typedef void (*kernel_NotifyFatalError)(void* user_data, const char* message);\n+\n+/**\n+ * Function signatures for the validation interface.\n+ */\n+typedef void (*kernel_ValidationInterfaceBlockChecked)(void* user_data, const kernel_BlockPointer* block, const kernel_BlockValidationState* state);\n+\n+/**\n+ * Whether a validated data structure is valid, invalid, or an error was\n+ * encountered during processing.\n+ */\n+typedef enum {\n+    kernel_VALIDATION_STATE_VALID = 0,\n+    kernel_VALIDATION_STATE_INVALID,\n+    kernel_VALIDATION_STATE_ERROR,\n+} kernel_ValidationMode;\n+\n+/**\n+ * A granular \"reason\" why a block was invalid.\n+ */\n+typedef enum {\n+    kernel_BLOCK_RESULT_UNSET = 0, //!< initial value. Block has not yet been rejected\n+    kernel_BLOCK_CONSENSUS,        //!< invalid by consensus rules (excluding any below reasons)\n+    kernel_BLOCK_CACHED_INVALID,  //!< this block was cached as being invalid and we didn't store the reason why\n+    kernel_BLOCK_INVALID_HEADER,  //!< invalid proof of work or time too old\n+    kernel_BLOCK_MUTATED,         //!< the block's data didn't match the data committed to by the PoW\n+    kernel_BLOCK_MISSING_PREV,    //!< We don't have the previous block the checked one is built on\n+    kernel_BLOCK_INVALID_PREV,    //!< A block this one builds on is invalid\n+    kernel_BLOCK_TIME_FUTURE,     //!< block timestamp was > 2 hours in the future (or our clock is bad)\n+    kernel_BLOCK_CHECKPOINT,      //!< the block failed to meet one of our checkpoints\n+    kernel_BLOCK_HEADER_LOW_WORK, //!< the block header may be on a too-little-work chain\n+} kernel_BlockValidationResult;\n+\n+/**\n+ * Holds the validation interface callbacks. The user data pointer may be used\n+ * to point to user-defined structures to make processing the validation\n+ * callbacks easier.\n+ */\n+typedef struct {\n+    void* user_data;                                      //!< Holds a user-defined opaque structure that is passed to the validation\n+                                                          //!< interface callbacks.\n+    kernel_ValidationInterfaceBlockChecked block_checked; //!< Called when a new block has been checked. Contains the\n+                                                          //!< result of its validation.\n+} kernel_ValidationInterfaceCallbacks;\n+\n+/**\n+ * A struct for holding the kernel notification callbacks. The user data\n+ * pointer may be used to point to user-defined structures to make processing\n+ * the notifications easier. Note that this makes it the user's responsibility\n+ * to ensure that the user_data outlives the kernel objects. Notifications can\n+ * occur even as kernel objects are deleted, so care has to be taken to ensure\n+ * safe unwinding.\n+ */\n+typedef struct {\n+    void* user_data;                         //!< Holds a user-defined opaque structure that is passed to the notification callbacks.\n+    kernel_NotifyBlockTip block_tip;         //!< The chain's tip was updated to the provided block index.\n+    kernel_NotifyHeaderTip header_tip;       //!< A new best block header was added.\n+    kernel_NotifyProgress progress;          //!< Reports on current block synchronization progress.\n+    kernel_NotifyWarningSet warning_set;     //!< A warning issued by the kernel library during validation.\n+    kernel_NotifyWarningUnset warning_unset; //!< A previous condition leading to the issuance of a warning is no longer given.\n+    kernel_NotifyFlushError flush_error;     //!< An error encountered when flushing data to disk.\n+    kernel_NotifyFatalError fatal_error;     //!< A un-recoverable system error encountered by the library.\n+} kernel_NotificationInterfaceCallbacks;\n+\n+/**\n+ * A collection of logging categories that may be encountered by kernel code.\n+ */\n+typedef enum {\n+    kernel_LOG_ALL = 0,\n+    kernel_LOG_BENCH,\n+    kernel_LOG_BLOCKSTORAGE,\n+    kernel_LOG_COINDB,\n+    kernel_LOG_LEVELDB,\n+    kernel_LOG_LOCK,\n+    kernel_LOG_MEMPOOL,\n+    kernel_LOG_PRUNE,\n+    kernel_LOG_RAND,\n+    kernel_LOG_REINDEX,\n+    kernel_LOG_VALIDATION,\n+    kernel_LOG_KERNEL,\n+} kernel_LogCategory;\n+\n+/**\n+ * The level at which logs should be produced.\n+ */\n+typedef enum {\n+    kernel_LOG_INFO = 0,\n+    kernel_LOG_DEBUG,\n+    kernel_LOG_TRACE,\n+} kernel_LogLevel;\n+\n+/**\n+ * Options controlling the format of log messages.\n+ */\n+typedef struct {\n+    bool log_timestamps;               //!< Prepend a timestamp to log messages.\n+    bool log_time_micros;              //!< Log timestamps in microsecond precision.\n+    bool log_threadnames;              //!< Prepend the name of the thread to log messages.\n+    bool log_sourcelocations;          //!< Prepend the source location to log messages.\n+    bool always_print_category_levels; //!< Prepend the log category and level to log messages.\n+} kernel_LoggingOptions;\n+\n+/**\n+ * A collection of status codes that may be issued by the script verify function.\n+ */\n+typedef enum {\n+    kernel_SCRIPT_VERIFY_OK = 0,\n+    kernel_SCRIPT_VERIFY_ERROR_TX_INPUT_INDEX, //!< The provided input index is out of range of the actual number of inputs of the transaction.\n+    kernel_SCRIPT_VERIFY_ERROR_INVALID_FLAGS, //!< The provided bitfield for the flags was invalid.\n+    kernel_SCRIPT_VERIFY_ERROR_INVALID_FLAGS_COMBINATION, //!< The flags very combined in an invalid way.\n+    kernel_SCRIPT_VERIFY_ERROR_SPENT_OUTPUTS_REQUIRED, //!< The taproot flag was set, so valid spent_outputs have to be provided.\n+    kernel_SCRIPT_VERIFY_ERROR_SPENT_OUTPUTS_MISMATCH, //!< The number of spent outputs does not match the number of inputs of the tx.\n+} kernel_ScriptVerifyStatus;\n+\n+/**\n+ * Script verification flags that may be composed with each other.\n+ */\n+typedef enum\n+{\n+    kernel_SCRIPT_FLAGS_VERIFY_NONE                = 0,\n+    kernel_SCRIPT_FLAGS_VERIFY_P2SH                = (1U << 0), //!< evaluate P2SH (BIP16) subscripts\n+    kernel_SCRIPT_FLAGS_VERIFY_DERSIG              = (1U << 2), //!< enforce strict DER (BIP66) compliance\n+    kernel_SCRIPT_FLAGS_VERIFY_NULLDUMMY           = (1U << 4), //!< enforce NULLDUMMY (BIP147)\n+    kernel_SCRIPT_FLAGS_VERIFY_CHECKLOCKTIMEVERIFY = (1U << 9), //!< enable CHECKLOCKTIMEVERIFY (BIP65)\n+    kernel_SCRIPT_FLAGS_VERIFY_CHECKSEQUENCEVERIFY = (1U << 10), //!< enable CHECKSEQUENCEVERIFY (BIP112)\n+    kernel_SCRIPT_FLAGS_VERIFY_WITNESS             = (1U << 11), //!< enable WITNESS (BIP141)\n+\n+    kernel_SCRIPT_FLAGS_VERIFY_TAPROOT             = (1U << 17), //!< enable TAPROOT (BIPs 341 & 342)\n+    kernel_SCRIPT_FLAGS_VERIFY_ALL                 = kernel_SCRIPT_FLAGS_VERIFY_P2SH |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_DERSIG |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_NULLDUMMY |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_CHECKLOCKTIMEVERIFY |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_CHECKSEQUENCEVERIFY |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_WITNESS |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_TAPROOT\n+} kernel_ScriptFlags;\n+\n+/**\n+ * Chain type used for creating chain params.\n+ */\n+typedef enum {\n+    kernel_CHAIN_TYPE_MAINNET = 0,\n+    kernel_CHAIN_TYPE_TESTNET,\n+    kernel_CHAIN_TYPE_TESTNET_4,\n+    kernel_CHAIN_TYPE_SIGNET,\n+    kernel_CHAIN_TYPE_REGTEST,\n+} kernel_ChainType;\n+\n+/**\n+ * A type-safe block identifier.\n+ */\n+typedef struct {\n+    unsigned char hash[32];\n+} kernel_BlockHash;\n+\n+/**\n+ * Convenience struct for holding serialized data.\n+ */\n+typedef struct {\n+    unsigned char* data;\n+    size_t size;\n+} kernel_ByteArray;\n+\n+/**\n+ * @brief Create a new transaction from the serialized data.\n+ *\n+ * @param[in] raw_transaction     Non-null.\n+ * @param[in] raw_transaction_len Length of the serialized transaction.\n+ * @return                        The transaction, or null on error.\n+ */\n+kernel_Transaction* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_transaction_create(\n+    const unsigned char* raw_transaction, size_t raw_transaction_len\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the transaction.\n+ */\n+void kernel_transaction_destroy(kernel_Transaction* transaction);\n+\n+/**\n+ * @brief Create a script pubkey from serialized data.\n+ * @param[in] script_pubkey     Non-null.\n+ * @param[in] script_pubkey_len Length of the script pubkey data.\n+ * @return                      The script pubkey, or null on error.\n+ */\n+kernel_ScriptPubkey* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_script_pubkey_create(\n+    const unsigned char* script_pubkey, size_t script_pubkey_len\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * @brief Copies the script pubkey data into the returned byte array.\n+ * @param[in] script_pubkey Non-null.\n+ * @return                  The serialized script pubkey data.\n+ */\n+kernel_ByteArray* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_copy_script_pubkey_data(\n+        const kernel_ScriptPubkey* script_pubkey\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the script pubkey.\n+ */\n+void kernel_script_pubkey_destroy(kernel_ScriptPubkey* script_pubkey);\n+\n+/**\n+ * @brief Create a transaction output from a script pubkey and an amount.\n+ * @param[in] script_pubkey Non-null.\n+ * @param[in] amount        The amount associated with the script pubkey for this output.\n+ * @return                  The transaction output.\n+ */\n+kernel_TransactionOutput* kernel_transaction_output_create(\n+    kernel_ScriptPubkey* script_pubkey,\n+    int64_t amount\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the transaction output.\n+ */\n+void kernel_transaction_output_destroy(kernel_TransactionOutput* transaction_output);\n+\n+/**\n+ * @brief Verify if the input at input_index of tx_to spends the script pubkey\n+ * under the constraints specified by flags. If the witness flag is set the\n+ * amount parameter is used. If the taproot flag is set, the spent outputs\n+ * parameter is used to validate taproot transactions.\n+ *\n+ * @param[in] script_pubkey     Non-null, script pubkey to be spent.\n+ * @param[in] amount            Amount of the script pubkey's associated output. May be zero if\n+ *                              the witness flag is not set.\n+ * @param[in] tx_to             Non-null, transaction spending the script_pubkey.\n+ * @param[in] spent_outputs     Nullable if the taproot flag is not set. Points to an array of\n+ *                              outputs spent by the transaction.\n+ * @param[in] spent_outputs_len Length of the spent_outputs array.\n+ * @param[in] input_index       Index of the input in tx_to spending the script_pubkey.\n+ * @param[in] flags             Bitfield of kernel_ScriptFlags controlling validation constraints.\n+ * @param[out] status           Nullable, will be set to an error code if the operation fails.\n+ *                              Should be set to kernel_SCRIPT_VERIFY_OK.\n+ * @return                      True if the script is valid.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_verify_script(\n+    const kernel_ScriptPubkey* script_pubkey,\n+    int64_t amount,\n+    const kernel_Transaction* tx_to,\n+    const kernel_TransactionOutput** spent_outputs, size_t spent_outputs_len,\n+    unsigned int input_index,\n+    unsigned int flags,\n+    kernel_ScriptVerifyStatus* status\n+) BITCOINKERNEL_ARG_NONNULL(1) BITCOINKERNEL_ARG_NONNULL(3);\n+\n+/**\n+ * @brief This disables the global internal logger. No log messages will be\n+ * buffered internally anymore once this is called and the buffer is cleared.\n+ * This function should only be called once. Log messages will be buffered until\n+ * this function is called, or a logging connection is created.\n+ */\n+void kernel_disable_logging();\n+\n+/**\n+ * @brief Set the log level of the global internal logger. This does not enable\n+ * the selected categories. Use `kernel_enable_log_category` to start logging\n+ * from a specific, or all categories.\n+ *\n+ * @param[in] category If kernel_LOG_ALL is chosen, all messages at the specified level\n+ *                     will be logged. Otherwise only messages from the specified category\n+ *                     will be logged at the specified level and above.\n+ * @param[in] level    Log level at which the log category is set.\n+ * @return             True on success.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_add_log_level_category(const kernel_LogCategory category, kernel_LogLevel level);\n+\n+/**\n+ * @brief Enable a specific log category for the global internal logger.\n+ *\n+ * @param[in] category If kernel_LOG_ALL is chosen, all categories will be enabled.\n+ * @return             True on success.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_enable_log_category(const kernel_LogCategory category);\n+\n+/**\n+ * Disable a specific log category for the global internal logger.\n+ *\n+ * @param[in] category If kernel_LOG_ALL is chosen, all categories will be disabled.\n+ * @return             True on success.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_disable_log_category(const kernel_LogCategory category);\n+\n+/**\n+ * @brief Start logging messages through the provided callback. Log messages\n+ * produced before this function is first called are buffered and on calling this\n+ * function are logged immediately.\n+ *\n+ * @param[in] callback  Non-null, function through which messages will be logged.\n+ * @param[in] user_data Nullable, holds a user-defined opaque structure. Is passed back\n+ *                      to the user through the callback.\n+ * @param[in] options   Sets formatting options of the log messages.\n+ * @return              A new kernel logging connection, or null on error.\n+ */\n+kernel_LoggingConnection* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_logging_connection_create(\n+    kernel_LogCallback callback,\n+    void* user_data,\n+    const kernel_LoggingOptions options\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Stop logging and destroy the logging connection.\n+ */\n+void kernel_logging_connection_destroy(kernel_LoggingConnection* logging_connection);\n+\n+/**\n+ * @brief Creates a chain parameters struct with default parameters based on the\n+ * passed in chain type.\n+ *\n+ * @param[in] chain_type Controls the chain parameters type created.\n+ * @return               An allocated chain parameters opaque struct.\n+ */\n+const kernel_ChainParameters* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_chain_parameters_create(\n+    const kernel_ChainType chain_type);\n+\n+/**\n+ * Destroy the chain parameters.\n+ */\n+void kernel_chain_parameters_destroy(const kernel_ChainParameters* chain_parameters);\n+\n+/**\n+ * @brief Creates an object for holding the kernel notification callbacks.\n+ *\n+ * @param[in] callbacks Holds the callbacks that will be invoked by the kernel notifications.\n+ */\n+kernel_Notifications* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_notifications_create(\n+    kernel_NotificationInterfaceCallbacks callbacks);\n+\n+/**\n+ * Destroy the kernel notifications.\n+ */\n+void kernel_notifications_destroy(const kernel_Notifications* notifications);\n+\n+/**\n+ * Creates an empty context options.\n+ */\n+kernel_ContextOptions* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_context_options_create();\n+\n+/**\n+ * @brief Sets the chain params for the context options. The context created\n+ * with the options will be configured for these chain parameters.\n+ *\n+ * @param[in] context_options  Non-null, previously created with kernel_context_options_create.\n+ * @param[in] chain_parameters Is set to the context options.\n+ */\n+void kernel_context_options_set_chainparams(",
      "path": "src/kernel/bitcoinkernel.h",
      "position": 627,
      "original_position": 622,
      "commit_id": "34a8429ff3a870c0caaf4c4790becd86c5acde38",
      "original_commit_id": "f1b3ab751bfe374095427796af00f6fdd50ec3e5",
      "in_reply_to_id": 1848935049,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think this is good the way it is now. The options get instantiated empty and may be populated by the user. The actual object only gets configured once by the options during its instantion. It can't be changed later on, so there is no concern that users could set something at the wrong time. Having to set options as arguments in their creation function is not a clear win in my eyes either. There are use-cases, for example using the kernel only as a data reader, where the notifications are useless. Likewise defaulting to mainnet seems sane to me too. It also does not integrate well with the \"builder pattern\" which is common in a bunch of other languages.",
      "created_at": "2024-11-19T21:04:02Z",
      "updated_at": "2024-11-19T21:31:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1849053726",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1849053726"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 627,
      "original_line": 627,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1849071009",
      "pull_request_review_id": 2446622041,
      "id": 1849071009,
      "node_id": "PRRC_kwDOABII585uNpWh",
      "diff_hunk": "@@ -0,0 +1,1145 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_KERNEL_BITCOINKERNEL_H\n+#define BITCOIN_KERNEL_BITCOINKERNEL_H\n+\n+#ifndef __cplusplus\n+#include <stdbool.h>\n+#include <stddef.h>\n+#include <stdint.h>\n+#else\n+#include <cstddef>\n+#include <cstdint>\n+#endif // __cplusplus\n+\n+\n+#if !defined(BITCOINKERNEL_GNUC_PREREQ)\n+#if defined(__GNUC__) && defined(__GNUC_MINOR__)\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) \\\n+    ((__GNUC__ << 16) + __GNUC_MINOR__ >= ((_maj) << 16) + (_min))\n+#else\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) 0\n+#endif\n+#endif\n+\n+/* Warning attributes */\n+#if defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT __attribute__((__warn_unused_result__))\n+#else\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT\n+#endif\n+#if !defined(BITCOINKERNEL_BUILD) && defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_ARG_NONNULL(_x) __attribute__((__nonnull__(_x)))",
      "path": "src/kernel/bitcoinkernel.h",
      "position": null,
      "original_position": 34,
      "commit_id": "34a8429ff3a870c0caaf4c4790becd86c5acde38",
      "original_commit_id": "33c71843e3fde0b795687a8626220f02f7243662",
      "in_reply_to_id": 1757015877,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "When I apply this to the first commit I get:\r\n```\r\nIn file included from /home/drgrid/bitcoin/src/test/kernel/test_kernel.cpp:5:\r\n/home/drgrid/bitcoin/src/kernel/bitcoinkernel.h:201:32: error: too many arguments provided to function-like macro invocation\r\n  201 | ) BITCOINKERNEL_ARG_NONNULL(1, 3);\r\n      |                                ^\r\n/home/drgrid/bitcoin/src/kernel/bitcoinkernel.h:34:9: note: macro 'BITCOINKERNEL_ARG_NONNULL' defined here\r\n   34 | #define BITCOINKERNEL_ARG_NONNULL(_x) __attribute__((__nonnull__(_x)))\r\n      |         ^\r\n/home/drgrid/bitcoin/src/kernel/bitcoinkernel.h:201:3: error: expected function body after function declarator\r\n  201 | ) BITCOINKERNEL_ARG_NONNULL(1, 3);\r\n      |   ^\r\n```\r\nWhich makes sense, because the macro only expects one argument. I'm not sure how safe it is to make it take a string or a list instead.",
      "created_at": "2024-11-19T21:20:48Z",
      "updated_at": "2024-11-19T21:31:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1849071009",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1849071009"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 34,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1849072061",
      "pull_request_review_id": 2446622041,
      "id": 1849072061,
      "node_id": "PRRC_kwDOABII585uNpm9",
      "diff_hunk": "@@ -0,0 +1,1145 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_KERNEL_BITCOINKERNEL_H\n+#define BITCOIN_KERNEL_BITCOINKERNEL_H\n+\n+#ifndef __cplusplus\n+#include <stdbool.h>\n+#include <stddef.h>\n+#include <stdint.h>\n+#else\n+#include <cstddef>\n+#include <cstdint>\n+#endif // __cplusplus\n+\n+\n+#if !defined(BITCOINKERNEL_GNUC_PREREQ)\n+#if defined(__GNUC__) && defined(__GNUC_MINOR__)\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) \\\n+    ((__GNUC__ << 16) + __GNUC_MINOR__ >= ((_maj) << 16) + (_min))\n+#else\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) 0\n+#endif\n+#endif\n+\n+/* Warning attributes */\n+#if defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT __attribute__((__warn_unused_result__))\n+#else\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT\n+#endif\n+#if !defined(BITCOINKERNEL_BUILD) && defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_ARG_NONNULL(_x) __attribute__((__nonnull__(_x)))\n+#else\n+#define BITCOINKERNEL_ARG_NONNULL(_x)\n+#endif\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif // __cplusplus\n+\n+/**\n+ * ------ Context ------\n+ *\n+ * The library provides a built-in static constant kernel context. This context\n+ * offers only limited functionality. It detects and self-checks the correct\n+ * sha256 implementation, initializes the random number generator and\n+ * self-checks the secp256k1 static context. It is used internally for otherwise\n+ * \"context-free\" operations.\n+ *\n+ * The user can create their own context for passing it to state-rich validation\n+ * functions and holding callbacks for kernel events.\n+ *\n+ * ------ Error handling ------\n+ *\n+ * Functions communicate an error through their return types, usually returning\n+ * a nullptr, or false if an error is encountered. Additionally, verification\n+ * functions, e.g. for scripts, may communicate more detailed error information\n+ * through status code out parameters.\n+ *\n+ * Fine-grained validation information is communicated through the validation\n+ * interface.\n+ *\n+ * The kernel notifications issue callbacks for errors. These are usually\n+ * indicative of a system error. If such an error is issued, it is recommended\n+ * to halt and tear down the existing kernel objects. Remediating the error may\n+ * require system intervention by the user.\n+ *\n+ * ------ Pointer and argument conventions ------\n+ *\n+ * The user is responsible for de-allocating the memory owned by pointers\n+ * returned by functions. Typically pointers returned by *_create(...) functions\n+ * can be de-allocated by corresponding *_destroy(...) functions.\n+ *\n+ * Pointer arguments make no assumptions on their lifetime. Once the function\n+ * returns the user can safely de-allocate the passed in arguments.\n+ *\n+ * Pointers passed by callbacks are not owned by the user and are only valid for\n+ * the duration of it. They should not be de-allocated by the user.",
      "path": "src/kernel/bitcoinkernel.h",
      "position": null,
      "original_position": 80,
      "commit_id": "34a8429ff3a870c0caaf4c4790becd86c5acde38",
      "original_commit_id": "33c71843e3fde0b795687a8626220f02f7243662",
      "in_reply_to_id": 1757108471,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Improved this a bit and good point with the more precise language.",
      "created_at": "2024-11-19T21:21:51Z",
      "updated_at": "2024-11-19T21:31:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1849072061",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1849072061"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 80,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1849072214",
      "pull_request_review_id": 2446622041,
      "id": 1849072214,
      "node_id": "PRRC_kwDOABII585uNppW",
      "diff_hunk": "@@ -0,0 +1,1145 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_KERNEL_BITCOINKERNEL_H\n+#define BITCOIN_KERNEL_BITCOINKERNEL_H\n+\n+#ifndef __cplusplus\n+#include <stdbool.h>\n+#include <stddef.h>\n+#include <stdint.h>\n+#else\n+#include <cstddef>\n+#include <cstdint>\n+#endif // __cplusplus\n+\n+\n+#if !defined(BITCOINKERNEL_GNUC_PREREQ)\n+#if defined(__GNUC__) && defined(__GNUC_MINOR__)\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) \\\n+    ((__GNUC__ << 16) + __GNUC_MINOR__ >= ((_maj) << 16) + (_min))\n+#else\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) 0\n+#endif\n+#endif\n+\n+/* Warning attributes */\n+#if defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT __attribute__((__warn_unused_result__))\n+#else\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT\n+#endif\n+#if !defined(BITCOINKERNEL_BUILD) && defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_ARG_NONNULL(_x) __attribute__((__nonnull__(_x)))\n+#else\n+#define BITCOINKERNEL_ARG_NONNULL(_x)\n+#endif\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif // __cplusplus\n+\n+/**\n+ * ------ Context ------\n+ *\n+ * The library provides a built-in static constant kernel context. This context\n+ * offers only limited functionality. It detects and self-checks the correct\n+ * sha256 implementation, initializes the random number generator and\n+ * self-checks the secp256k1 static context. It is used internally for otherwise\n+ * \"context-free\" operations.\n+ *\n+ * The user can create their own context for passing it to state-rich validation\n+ * functions and holding callbacks for kernel events.\n+ *\n+ * ------ Error handling ------\n+ *\n+ * Functions communicate an error through their return types, usually returning\n+ * a nullptr, or false if an error is encountered. Additionally, verification\n+ * functions, e.g. for scripts, may communicate more detailed error information\n+ * through status code out parameters.\n+ *\n+ * Fine-grained validation information is communicated through the validation\n+ * interface.\n+ *\n+ * The kernel notifications issue callbacks for errors. These are usually\n+ * indicative of a system error. If such an error is issued, it is recommended\n+ * to halt and tear down the existing kernel objects. Remediating the error may\n+ * require system intervention by the user.\n+ *\n+ * ------ Pointer and argument conventions ------\n+ *\n+ * The user is responsible for de-allocating the memory owned by pointers\n+ * returned by functions. Typically pointers returned by *_create(...) functions\n+ * can be de-allocated by corresponding *_destroy(...) functions.\n+ *\n+ * Pointer arguments make no assumptions on their lifetime. Once the function\n+ * returns the user can safely de-allocate the passed in arguments.",
      "path": "src/kernel/bitcoinkernel.h",
      "position": null,
      "original_position": 77,
      "commit_id": "34a8429ff3a870c0caaf4c4790becd86c5acde38",
      "original_commit_id": "33c71843e3fde0b795687a8626220f02f7243662",
      "in_reply_to_id": 1757105125,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thanks, taken.",
      "created_at": "2024-11-19T21:22:00Z",
      "updated_at": "2024-11-19T21:31:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1849072214",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1849072214"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
        }
      },
      "start_line": null,
      "original_start_line": 76,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 77,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1849075583",
      "pull_request_review_id": 2446622041,
      "id": 1849075583,
      "node_id": "PRRC_kwDOABII585uNqd_",
      "diff_hunk": "@@ -0,0 +1,141 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_KERNEL_BITCOINKERNEL_H\n+#define BITCOIN_KERNEL_BITCOINKERNEL_H\n+\n+#ifndef __cplusplus\n+#include <stdbool.h>\n+#include <stddef.h>\n+#include <stdint.h>\n+#else\n+#include <cstddef>\n+#include <cstdint>\n+#endif // __cplusplus\n+\n+\n+#if !defined(BITCOINKERNEL_GNUC_PREREQ)\n+#if defined(__GNUC__) && defined(__GNUC_MINOR__)\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) \\\n+    ((__GNUC__ << 16) + __GNUC_MINOR__ >= ((_maj) << 16) + (_min))\n+#else\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) 0\n+#endif\n+#endif\n+\n+/* Warning attributes */\n+#if defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT __attribute__((__warn_unused_result__))\n+#else\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT\n+#endif\n+#if !defined(BITCOINKERNEL_BUILD) && defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_ARG_NONNULL(_x) __attribute__((__nonnull__(_x)))\n+#else\n+#define BITCOINKERNEL_ARG_NONNULL(_x)\n+#endif\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif // __cplusplus\n+\n+/**\n+ * ------ Context ------\n+ *\n+ * The library provides a built-in static constant kernel context. This context\n+ * offers only limited functionality. It detects and self-checks the correct\n+ * sha256 implementation, initializes the random number generator and\n+ * self-checks the secp256k1 static context. It is used internally for otherwise\n+ * \"context-free\" operations.\n+ *\n+ * ------ Error handling ------\n+ *\n+ * Functions communicate an error through their return types, usually returning\n+ * a nullptr, or false if an error is encountered. Additionally, verification\n+ * functions, e.g. for scripts, may communicate more detailed error information\n+ * through status code out parameters.\n+ */\n+\n+/**\n+ * A collection of status codes that may be issued by the script verify function.\n+ */\n+typedef enum {\n+    kernel_SCRIPT_VERIFY_OK = 0,\n+    kernel_SCRIPT_VERIFY_ERROR_TX_INPUT_INDEX, //!< The provided input index is out of range of the actual number of inputs of the transaction.\n+    kernel_SCRIPT_VERIFY_ERROR_TX_SIZE_MISMATCH, //!< The provided tx_to_len argument does not match the actual size of the transaction.\n+    kernel_SCRIPT_VERIFY_ERROR_TX_DESERIALIZE, //!< The provided tx could not be de-serialized.\n+    kernel_SCRIPT_VERIFY_ERROR_INVALID_FLAGS, //!< The provided bitfield for the flags was invalid.\n+    kernel_SCRIPT_VERIFY_ERROR_INVALID_FLAGS_COMBINATION, //!< The flags very combined in an invalid way.\n+    kernel_SCRIPT_VERIFY_ERROR_SPENT_OUTPUTS_REQUIRED, //!< The taproot flag was set, so valid spent_outputs have to be provided.\n+    kernel_SCRIPT_VERIFY_ERROR_SPENT_OUTPUTS_MISMATCH, //!< The number of spent outputs does not match the number of inputs of the tx.\n+} kernel_ScriptVerifyStatus;\n+\n+/**\n+ * Script verification flags that may be composed with each other.\n+ */\n+typedef enum\n+{\n+    kernel_SCRIPT_FLAGS_VERIFY_NONE                = 0,\n+    kernel_SCRIPT_FLAGS_VERIFY_P2SH                = (1U << 0), //!< evaluate P2SH (BIP16) subscripts\n+    kernel_SCRIPT_FLAGS_VERIFY_DERSIG              = (1U << 2), //!< enforce strict DER (BIP66) compliance\n+    kernel_SCRIPT_FLAGS_VERIFY_NULLDUMMY           = (1U << 4), //!< enforce NULLDUMMY (BIP147)\n+    kernel_SCRIPT_FLAGS_VERIFY_CHECKLOCKTIMEVERIFY = (1U << 9), //!< enable CHECKLOCKTIMEVERIFY (BIP65)\n+    kernel_SCRIPT_FLAGS_VERIFY_CHECKSEQUENCEVERIFY = (1U << 10), //!< enable CHECKSEQUENCEVERIFY (BIP112)\n+    kernel_SCRIPT_FLAGS_VERIFY_WITNESS             = (1U << 11), //!< enable WITNESS (BIP141)\n+\n+    kernel_SCRIPT_FLAGS_VERIFY_TAPROOT             = (1U << 17), //!< enable TAPROOT (BIPs 341 & 342)\n+    kernel_SCRIPT_FLAGS_VERIFY_ALL                 = kernel_SCRIPT_FLAGS_VERIFY_P2SH |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_DERSIG |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_NULLDUMMY |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_CHECKLOCKTIMEVERIFY |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_CHECKSEQUENCEVERIFY |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_WITNESS |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_TAPROOT\n+} kernel_ScriptFlags;\n+\n+/**\n+ * A helper struct for a single transaction output.\n+ */\n+typedef struct {\n+    int64_t value;\n+    const unsigned char* script_pubkey;\n+    size_t script_pubkey_len;\n+} kernel_TransactionOutput;\n+\n+/**\n+ * @brief Verify if the input at input_index of tx_to spends the script pubkey\n+ * under the constraints specified by flags. If the witness flag is set the",
      "path": "src/kernel/bitcoinkernel.h",
      "position": null,
      "original_position": 108,
      "commit_id": "34a8429ff3a870c0caaf4c4790becd86c5acde38",
      "original_commit_id": "63a83b8dad279beaa2f9f6ac2677c56c300300fe",
      "in_reply_to_id": 1754989437,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Good point, I added your suggestion.",
      "created_at": "2024-11-19T21:25:25Z",
      "updated_at": "2024-11-19T21:31:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1849075583",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1849075583"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 496,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1849082933",
      "pull_request_review_id": 2446696897,
      "id": 1849082933,
      "node_id": "PRRC_kwDOABII585uNsQ1",
      "diff_hunk": "@@ -0,0 +1,1145 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_KERNEL_BITCOINKERNEL_H\n+#define BITCOIN_KERNEL_BITCOINKERNEL_H\n+\n+#ifndef __cplusplus\n+#include <stdbool.h>\n+#include <stddef.h>\n+#include <stdint.h>\n+#else\n+#include <cstddef>\n+#include <cstdint>\n+#endif // __cplusplus\n+\n+\n+#if !defined(BITCOINKERNEL_GNUC_PREREQ)\n+#if defined(__GNUC__) && defined(__GNUC_MINOR__)\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) \\\n+    ((__GNUC__ << 16) + __GNUC_MINOR__ >= ((_maj) << 16) + (_min))\n+#else\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) 0\n+#endif\n+#endif\n+\n+/* Warning attributes */\n+#if defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT __attribute__((__warn_unused_result__))\n+#else\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT\n+#endif\n+#if !defined(BITCOINKERNEL_BUILD) && defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_ARG_NONNULL(_x) __attribute__((__nonnull__(_x)))\n+#else\n+#define BITCOINKERNEL_ARG_NONNULL(_x)\n+#endif\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif // __cplusplus\n+\n+/**\n+ * ------ Context ------\n+ *\n+ * The library provides a built-in static constant kernel context. This context\n+ * offers only limited functionality. It detects and self-checks the correct\n+ * sha256 implementation, initializes the random number generator and\n+ * self-checks the secp256k1 static context. It is used internally for otherwise\n+ * \"context-free\" operations.\n+ *\n+ * The user can create their own context for passing it to state-rich validation\n+ * functions and holding callbacks for kernel events.",
      "path": "src/kernel/bitcoinkernel.h",
      "position": null,
      "original_position": 53,
      "commit_id": "34a8429ff3a870c0caaf4c4790becd86c5acde38",
      "original_commit_id": "33c71843e3fde0b795687a8626220f02f7243662",
      "in_reply_to_id": 1757049107,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "See my [comment](https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1849046061).",
      "created_at": "2024-11-19T21:32:31Z",
      "updated_at": "2024-11-19T21:32:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1849082933",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1849082933"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
        }
      },
      "start_line": null,
      "original_start_line": 46,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 54,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1849132153",
      "pull_request_review_id": 2446777235,
      "id": 1849132153,
      "node_id": "PRRC_kwDOABII585uN4R5",
      "diff_hunk": "@@ -0,0 +1,1145 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_KERNEL_BITCOINKERNEL_H\n+#define BITCOIN_KERNEL_BITCOINKERNEL_H\n+\n+#ifndef __cplusplus\n+#include <stdbool.h>\n+#include <stddef.h>\n+#include <stdint.h>\n+#else\n+#include <cstddef>\n+#include <cstdint>\n+#endif // __cplusplus\n+\n+\n+#if !defined(BITCOINKERNEL_GNUC_PREREQ)\n+#if defined(__GNUC__) && defined(__GNUC_MINOR__)\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) \\\n+    ((__GNUC__ << 16) + __GNUC_MINOR__ >= ((_maj) << 16) + (_min))\n+#else\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) 0\n+#endif\n+#endif\n+\n+/* Warning attributes */\n+#if defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT __attribute__((__warn_unused_result__))\n+#else\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT\n+#endif\n+#if !defined(BITCOINKERNEL_BUILD) && defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_ARG_NONNULL(_x) __attribute__((__nonnull__(_x)))",
      "path": "src/kernel/bitcoinkernel.h",
      "position": null,
      "original_position": 34,
      "commit_id": "34a8429ff3a870c0caaf4c4790becd86c5acde38",
      "original_commit_id": "33c71843e3fde0b795687a8626220f02f7243662",
      "in_reply_to_id": 1757015877,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Sorry, I forgot to include the diff which updates the macro (and 1 instance to show it compiles):\r\n\r\n<details>\r\n<summary>git diff on 6c9121f790</summary>\r\n\r\n```diff\r\ndiff --git a/src/kernel/bitcoinkernel.h b/src/kernel/bitcoinkernel.h\r\nindex 9e6bf127db..67248349e2 100644\r\n--- a/src/kernel/bitcoinkernel.h\r\n+++ b/src/kernel/bitcoinkernel.h\r\n@@ -31,9 +31,9 @@\r\n #define BITCOINKERNEL_WARN_UNUSED_RESULT\r\n #endif\r\n #if !defined(BITCOINKERNEL_BUILD) && defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\r\n-#define BITCOINKERNEL_ARG_NONNULL(_x) __attribute__((__nonnull__(_x)))\r\n+#define BITCOINKERNEL_ARG_NONNULL(...) __attribute__((__nonnull__(__VA_ARGS__)))\r\n #else\r\n-#define BITCOINKERNEL_ARG_NONNULL(_x)\r\n+#define BITCOINKERNEL_ARG_NONNULL(...)\r\n #endif\r\n \r\n #ifdef __cplusplus\r\n@@ -522,7 +522,7 @@ bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_verify_script(\r\n     unsigned int input_index,\r\n     unsigned int flags,\r\n     kernel_ScriptVerifyStatus* status\r\n-) BITCOINKERNEL_ARG_NONNULL(1) BITCOINKERNEL_ARG_NONNULL(3);\r\n+) BITCOINKERNEL_ARG_NONNULL(1, 3);\r\n \r\n /**\r\n  * @brief This disables the global internal logger. No log messages will be\r\n\r\n```\r\n</details>\r\n\r\nBased on https://gcc.gnu.org/onlinedocs/cpp/Variadic-Macros.html, variadic macros should be standard for C99, and GCC documents accepting multiple indexes: https://gcc.gnu.org/onlinedocs/gcc/Common-Function-Attributes.html",
      "created_at": "2024-11-19T22:25:32Z",
      "updated_at": "2024-11-19T22:28:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1849132153",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1849132153"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 34,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1850657572",
      "pull_request_review_id": 2448664774,
      "id": 1850657572,
      "node_id": "PRRC_kwDOABII585uTssk",
      "diff_hunk": "@@ -0,0 +1,1190 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_KERNEL_BITCOINKERNEL_H\n+#define BITCOIN_KERNEL_BITCOINKERNEL_H\n+\n+#ifndef __cplusplus\n+#include <stdbool.h>\n+#include <stddef.h>\n+#include <stdint.h>\n+#else\n+#include <cstddef>\n+#include <cstdint>\n+#endif // __cplusplus\n+\n+\n+#if !defined(BITCOINKERNEL_GNUC_PREREQ)\n+#if defined(__GNUC__) && defined(__GNUC_MINOR__)\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) \\\n+    ((__GNUC__ << 16) + __GNUC_MINOR__ >= ((_maj) << 16) + (_min))\n+#else\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) 0\n+#endif\n+#endif\n+\n+/* Warning attributes */\n+#if defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT __attribute__((__warn_unused_result__))\n+#else\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT\n+#endif\n+#if !defined(BITCOINKERNEL_BUILD) && defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_ARG_NONNULL(_x) __attribute__((__nonnull__(_x)))\n+#else\n+#define BITCOINKERNEL_ARG_NONNULL(_x)\n+#endif\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif // __cplusplus\n+\n+/**\n+ * ------ Context ------\n+ *\n+ * The library provides a built-in static constant kernel context. This static\n+ * context offers only limited functionality. It detects and self-checks the\n+ * correct sha256 implementation, initializes the random number generator and\n+ * self-checks the secp256k1 static context. It is used internally for\n+ * otherwise \"context-free\" operations. This means that the user is not\n+ * required to initialize their own context before using the library.\n+ *\n+ * The user should create their own context for passing it to state-rich validation\n+ * functions and holding callbacks for kernel events.\n+ *\n+ * ------ Error handling ------\n+ *\n+ * Functions communicate an error through their return types, usually returning\n+ * a nullptr, or false if an error is encountered. Additionally, verification\n+ * functions, e.g. for scripts, may communicate more detailed error information\n+ * through status code out parameters.\n+ *\n+ * Fine-grained validation information is communicated through the validation\n+ * interface.\n+ *\n+ * The kernel notifications issue callbacks for errors. These are usually\n+ * indicative of a system error. If such an error is issued, it is recommended\n+ * to halt and tear down the existing kernel objects. Remediating the error may\n+ * require system intervention by the user.\n+ *\n+ * ------ Pointer and argument conventions ------\n+ *\n+ * The user is responsible for de-allocating the memory owned by pointers\n+ * returned by functions. Typically pointers returned by *_create(...) functions\n+ * can be de-allocated by corresponding *_destroy(...) functions.\n+ *\n+ * A function that takes pointer arguments makes no assumptions on their\n+ * lifetime. Once the function returns the user can safely de-allocate the\n+ * passed in arguments.\n+ *\n+ * Pointers passed by callbacks are not owned by the user and are only valid for\n+ * the duration of the callback. They must not be de-allocated by the user.\n+ *\n+ * Array lengths follow the pointer argument they describe.\n+ */\n+\n+/**\n+ * Opaque data structure for holding a transaction.\n+ */\n+typedef struct kernel_Transaction kernel_Transaction;\n+\n+/**\n+ * Opaque data structure for holding a script pubkey.\n+ */\n+typedef struct kernel_ScriptPubkey kernel_ScriptPubkey;\n+\n+/**\n+ * Opaque data structure for holding a transaction output.\n+ */\n+typedef struct kernel_TransactionOutput kernel_TransactionOutput;\n+\n+/**\n+ * Opaque data structure for holding a logging connection.\n+ *\n+ * The logging connection can be used to manually stop logging.\n+ *\n+ * Messages that were logged before a connection is created are buffered in a\n+ * 1MB buffer. Logging can alternatively be permanently disabled by calling\n+ * kernel_disable_logging().\n+ */\n+typedef struct kernel_LoggingConnection kernel_LoggingConnection;\n+\n+/**\n+ * Opaque data structure for holding the chain parameters.\n+ *\n+ * These are eventually placed into a kernel context through the kernel context\n+ * options. The parameters describe the properties of a chain, and may be\n+ * instantiated for either mainnet, testnet, signet, or regtest.\n+ */\n+typedef struct kernel_ChainParameters kernel_ChainParameters;\n+\n+/**\n+ * Opaque data structure for holding callbacks for reacting to events that may\n+ * be encountered during library operations.\n+ */\n+typedef struct kernel_Notifications kernel_Notifications;\n+\n+/**\n+ * Opaque data structure for holding options for creating a new kernel context.\n+ *\n+ * Once a kernel context has been created from these options, they may be\n+ * destroyed. The options hold the notification callbacks as well as the\n+ * selected chain type until they are passed to the context. If no options are\n+ * configured, the context will be instantiated with no callbacks and for\n+ * mainnet. Their content and scope can be expanded over time.\n+ */\n+typedef struct kernel_ContextOptions kernel_ContextOptions;\n+\n+/**\n+ * Opaque data structure for holding a kernel context.\n+ *\n+ * The kernel context is used to initialize internal state and hold the chain\n+ * parameters and callbacks for handling error and validation events. Once other\n+ * validation objects are instantiated from it, the context needs to be kept in\n+ * memory for the duration of their lifetimes.\n+ *\n+ * The processing of validation events is done through an internal task\n+ * runner owned by the context. The task runner drives the execution of events\n+ * triggering validation interface callbacks. Multiple validation interfaces can\n+ * be registered with the context. The kernel will create an event for each of\n+ * the registered validation interfaces through the task runner.\n+ *\n+ * A constructed context can be safely used from multiple threads, but functions\n+ * taking it as a non-cost argument need exclusive access to it.\n+ */\n+typedef struct kernel_Context kernel_Context;\n+\n+/**\n+ * Opaque data structure for holding a block index pointer.\n+ *\n+ * This is a pointer to an element in the block index currently in memory of the\n+ * chainstate manager. It is valid for the lifetime of the chainstate manager it\n+ * was retrieved from.\n+ */\n+typedef struct kernel_BlockIndex kernel_BlockIndex;\n+\n+/**\n+ * Opaque data structure for holding options for creating a new chainstate\n+ * manager.\n+ *\n+ * The chainstate manager options are used to set some parameters for the\n+ * chainstate manager. For now it just holds default options.\n+ */\n+typedef struct kernel_ChainstateManagerOptions kernel_ChainstateManagerOptions;\n+\n+/**\n+ * Opaque data structure for holding options for creating a new chainstate\n+ * manager.\n+ *\n+ * The chainstate manager has an internal block manager that takes its own set\n+ * of parameters. It is initialized with default options.\n+ */\n+typedef struct kernel_BlockManagerOptions kernel_BlockManagerOptions;\n+\n+/**\n+ * Opaque data structure for holding a chainstate manager.\n+ *\n+ * The chainstate manager is the central object for doing validation tasks as\n+ * well as retrieving data from the chain. Internally it is a complex data\n+ * structure with diverse functionality.\n+ *\n+ * The chainstate manager is only valid for as long as the context with which it\n+ * was created remains in memory.\n+ *\n+ * Its functionality will be more and more exposed in the future.\n+ */\n+typedef struct kernel_ChainstateManager kernel_ChainstateManager;\n+\n+/**\n+ * Opaque data structure for holding parameters used for loading the chainstate\n+ * of a chainstate manager.\n+ *\n+ * Is initialized with default parameters.\n+ */\n+typedef struct kernel_ChainstateLoadOptions kernel_ChainstateLoadOptions;\n+\n+/**\n+ * Opaque data structure for holding a block.\n+ */\n+typedef struct kernel_Block kernel_Block;\n+\n+/**\n+ * Opaque data structure for holding a non-owned block. This is typically a\n+ * block available to the user through one of the validation callbacks.\n+ */\n+typedef struct kernel_BlockPointer kernel_BlockPointer;\n+\n+/**\n+ * Opaque data structure for holding the state of a block during validation.\n+ *\n+ * Contains information indicating whether validation was successful, and if not\n+ * which step during block validation failed.\n+ */\n+typedef struct kernel_BlockValidationState kernel_BlockValidationState;\n+\n+/**\n+ * Opaque data structure for holding a validation interface.\n+ *\n+ * The validation interface can be registered with the internal task runner of an\n+ * existing context. It holds callbacks that will be triggered by certain\n+ * validation events. The callbacks registered with it will block further\n+ * validation progress when triggered.\n+ */\n+typedef struct kernel_ValidationInterface kernel_ValidationInterface;\n+\n+/**\n+ * Opaque data structure for holding a block undo struct.\n+ *\n+ * It holds all the previous outputs consumed by all transactions in a specific\n+ * block. Internally it holds a nested vector. The top level vector has an entry\n+ * for each transaction in a block (in order of the actual transactions of the\n+ * block and minus the coinbase transaction). Each entry is in turn a vector of\n+ * all the previous outputs of a transaction (in order of their corresponding\n+ * inputs).\n+ */\n+typedef struct kernel_BlockUndo kernel_BlockUndo;\n+\n+/** Current sync state passed to tip changed callbacks. */\n+typedef enum {\n+    kernel_INIT_REINDEX,\n+    kernel_INIT_DOWNLOAD,\n+    kernel_POST_INIT\n+} kernel_SynchronizationState;\n+\n+/** Possible warning types issued by validation. */\n+typedef enum {\n+    kernel_UNKNOWN_NEW_RULES_ACTIVATED,\n+    kernel_LARGE_WORK_INVALID_CHAIN\n+} kernel_Warning;\n+\n+/** Callback function types */\n+\n+/**\n+ * Function signature for the global logging callback. All bitcoin kernel\n+ * internal logs will pass through this callback.\n+ */\n+typedef void (*kernel_LogCallback)(void* user_data, const char* message);\n+\n+/**\n+ * Function signatures for the kernel notifications.\n+ */\n+typedef void (*kernel_NotifyBlockTip)(void* user_data, kernel_SynchronizationState state, kernel_BlockIndex* index);\n+typedef void (*kernel_NotifyHeaderTip)(void* user_data, kernel_SynchronizationState state, int64_t height, int64_t timestamp, bool presync);\n+typedef void (*kernel_NotifyProgress)(void* user_data, const char* title, int progress_percent, bool resume_possible);\n+typedef void (*kernel_NotifyWarningSet)(void* user_data, kernel_Warning warning, const char* message);\n+typedef void (*kernel_NotifyWarningUnset)(void* user_data, kernel_Warning warning);\n+typedef void (*kernel_NotifyFlushError)(void* user_data, const char* message);\n+typedef void (*kernel_NotifyFatalError)(void* user_data, const char* message);\n+\n+/**\n+ * Function signatures for the validation interface.\n+ */\n+typedef void (*kernel_ValidationInterfaceBlockChecked)(void* user_data, const kernel_BlockPointer* block, const kernel_BlockValidationState* state);\n+\n+/**\n+ * Whether a validated data structure is valid, invalid, or an error was\n+ * encountered during processing.\n+ */\n+typedef enum {\n+    kernel_VALIDATION_STATE_VALID = 0,\n+    kernel_VALIDATION_STATE_INVALID,\n+    kernel_VALIDATION_STATE_ERROR,\n+} kernel_ValidationMode;\n+\n+/**\n+ * A granular \"reason\" why a block was invalid.\n+ */\n+typedef enum {\n+    kernel_BLOCK_RESULT_UNSET = 0, //!< initial value. Block has not yet been rejected\n+    kernel_BLOCK_CONSENSUS,        //!< invalid by consensus rules (excluding any below reasons)\n+    kernel_BLOCK_CACHED_INVALID,  //!< this block was cached as being invalid and we didn't store the reason why\n+    kernel_BLOCK_INVALID_HEADER,  //!< invalid proof of work or time too old\n+    kernel_BLOCK_MUTATED,         //!< the block's data didn't match the data committed to by the PoW\n+    kernel_BLOCK_MISSING_PREV,    //!< We don't have the previous block the checked one is built on\n+    kernel_BLOCK_INVALID_PREV,    //!< A block this one builds on is invalid\n+    kernel_BLOCK_TIME_FUTURE,     //!< block timestamp was > 2 hours in the future (or our clock is bad)\n+    kernel_BLOCK_CHECKPOINT,      //!< the block failed to meet one of our checkpoints\n+    kernel_BLOCK_HEADER_LOW_WORK, //!< the block header may be on a too-little-work chain\n+} kernel_BlockValidationResult;\n+\n+/**\n+ * Holds the validation interface callbacks. The user data pointer may be used\n+ * to point to user-defined structures to make processing the validation\n+ * callbacks easier.\n+ */\n+typedef struct {\n+    void* user_data;                                      //!< Holds a user-defined opaque structure that is passed to the validation\n+                                                          //!< interface callbacks.\n+    kernel_ValidationInterfaceBlockChecked block_checked; //!< Called when a new block has been checked. Contains the\n+                                                          //!< result of its validation.\n+} kernel_ValidationInterfaceCallbacks;\n+\n+/**\n+ * A struct for holding the kernel notification callbacks. The user data\n+ * pointer may be used to point to user-defined structures to make processing\n+ * the notifications easier. Note that this makes it the user's responsibility\n+ * to ensure that the user_data outlives the kernel objects. Notifications can\n+ * occur even as kernel objects are deleted, so care has to be taken to ensure\n+ * safe unwinding.\n+ */\n+typedef struct {\n+    void* user_data;                         //!< Holds a user-defined opaque structure that is passed to the notification callbacks.\n+    kernel_NotifyBlockTip block_tip;         //!< The chain's tip was updated to the provided block index.\n+    kernel_NotifyHeaderTip header_tip;       //!< A new best block header was added.\n+    kernel_NotifyProgress progress;          //!< Reports on current block synchronization progress.\n+    kernel_NotifyWarningSet warning_set;     //!< A warning issued by the kernel library during validation.\n+    kernel_NotifyWarningUnset warning_unset; //!< A previous condition leading to the issuance of a warning is no longer given.\n+    kernel_NotifyFlushError flush_error;     //!< An error encountered when flushing data to disk.\n+    kernel_NotifyFatalError fatal_error;     //!< A un-recoverable system error encountered by the library.\n+} kernel_NotificationInterfaceCallbacks;\n+\n+/**\n+ * A collection of logging categories that may be encountered by kernel code.\n+ */\n+typedef enum {\n+    kernel_LOG_ALL = 0,\n+    kernel_LOG_BENCH,\n+    kernel_LOG_BLOCKSTORAGE,\n+    kernel_LOG_COINDB,\n+    kernel_LOG_LEVELDB,\n+    kernel_LOG_LOCK,\n+    kernel_LOG_MEMPOOL,\n+    kernel_LOG_PRUNE,\n+    kernel_LOG_RAND,\n+    kernel_LOG_REINDEX,\n+    kernel_LOG_VALIDATION,\n+    kernel_LOG_KERNEL,\n+} kernel_LogCategory;\n+\n+/**\n+ * The level at which logs should be produced.\n+ */\n+typedef enum {\n+    kernel_LOG_INFO = 0,\n+    kernel_LOG_DEBUG,\n+    kernel_LOG_TRACE,\n+} kernel_LogLevel;\n+\n+/**\n+ * Options controlling the format of log messages.\n+ */\n+typedef struct {\n+    bool log_timestamps;               //!< Prepend a timestamp to log messages.\n+    bool log_time_micros;              //!< Log timestamps in microsecond precision.\n+    bool log_threadnames;              //!< Prepend the name of the thread to log messages.\n+    bool log_sourcelocations;          //!< Prepend the source location to log messages.\n+    bool always_print_category_levels; //!< Prepend the log category and level to log messages.\n+} kernel_LoggingOptions;\n+\n+/**\n+ * A collection of status codes that may be issued by the script verify function.\n+ */\n+typedef enum {\n+    kernel_SCRIPT_VERIFY_OK = 0,\n+    kernel_SCRIPT_VERIFY_ERROR_TX_INPUT_INDEX, //!< The provided input index is out of range of the actual number of inputs of the transaction.\n+    kernel_SCRIPT_VERIFY_ERROR_INVALID_FLAGS, //!< The provided bitfield for the flags was invalid.\n+    kernel_SCRIPT_VERIFY_ERROR_INVALID_FLAGS_COMBINATION, //!< The flags very combined in an invalid way.\n+    kernel_SCRIPT_VERIFY_ERROR_SPENT_OUTPUTS_REQUIRED, //!< The taproot flag was set, so valid spent_outputs have to be provided.\n+    kernel_SCRIPT_VERIFY_ERROR_SPENT_OUTPUTS_MISMATCH, //!< The number of spent outputs does not match the number of inputs of the tx.\n+} kernel_ScriptVerifyStatus;\n+\n+/**\n+ * Script verification flags that may be composed with each other.\n+ */\n+typedef enum\n+{\n+    kernel_SCRIPT_FLAGS_VERIFY_NONE                = 0,\n+    kernel_SCRIPT_FLAGS_VERIFY_P2SH                = (1U << 0), //!< evaluate P2SH (BIP16) subscripts\n+    kernel_SCRIPT_FLAGS_VERIFY_DERSIG              = (1U << 2), //!< enforce strict DER (BIP66) compliance\n+    kernel_SCRIPT_FLAGS_VERIFY_NULLDUMMY           = (1U << 4), //!< enforce NULLDUMMY (BIP147)\n+    kernel_SCRIPT_FLAGS_VERIFY_CHECKLOCKTIMEVERIFY = (1U << 9), //!< enable CHECKLOCKTIMEVERIFY (BIP65)\n+    kernel_SCRIPT_FLAGS_VERIFY_CHECKSEQUENCEVERIFY = (1U << 10), //!< enable CHECKSEQUENCEVERIFY (BIP112)\n+    kernel_SCRIPT_FLAGS_VERIFY_WITNESS             = (1U << 11), //!< enable WITNESS (BIP141)\n+\n+    kernel_SCRIPT_FLAGS_VERIFY_TAPROOT             = (1U << 17), //!< enable TAPROOT (BIPs 341 & 342)\n+    kernel_SCRIPT_FLAGS_VERIFY_ALL                 = kernel_SCRIPT_FLAGS_VERIFY_P2SH |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_DERSIG |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_NULLDUMMY |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_CHECKLOCKTIMEVERIFY |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_CHECKSEQUENCEVERIFY |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_WITNESS |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_TAPROOT\n+} kernel_ScriptFlags;\n+\n+/**\n+ * Chain type used for creating chain params.\n+ */\n+typedef enum {\n+    kernel_CHAIN_TYPE_MAINNET = 0,\n+    kernel_CHAIN_TYPE_TESTNET,\n+    kernel_CHAIN_TYPE_TESTNET_4,\n+    kernel_CHAIN_TYPE_SIGNET,\n+    kernel_CHAIN_TYPE_REGTEST,\n+} kernel_ChainType;\n+\n+/**\n+ * A type-safe block identifier.\n+ */\n+typedef struct {\n+    unsigned char hash[32];\n+} kernel_BlockHash;\n+\n+/**\n+ * Convenience struct for holding serialized data.\n+ */\n+typedef struct {\n+    unsigned char* data;\n+    size_t size;\n+} kernel_ByteArray;\n+\n+/**\n+ * @brief Create a new transaction from the serialized data.\n+ *\n+ * @param[in] raw_transaction     Non-null.\n+ * @param[in] raw_transaction_len Length of the serialized transaction.\n+ * @return                        The transaction, or null on error.\n+ */\n+kernel_Transaction* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_transaction_create(\n+    const unsigned char* raw_transaction, size_t raw_transaction_len\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the transaction.\n+ */\n+void kernel_transaction_destroy(kernel_Transaction* transaction);\n+\n+/**\n+ * @brief Create a script pubkey from serialized data.\n+ * @param[in] script_pubkey     Non-null.\n+ * @param[in] script_pubkey_len Length of the script pubkey data.\n+ * @return                      The script pubkey, or null on error.\n+ */\n+kernel_ScriptPubkey* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_script_pubkey_create(\n+    const unsigned char* script_pubkey, size_t script_pubkey_len\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * @brief Copies the script pubkey data into the returned byte array.\n+ * @param[in] script_pubkey Non-null.\n+ * @return                  The serialized script pubkey data.\n+ */\n+kernel_ByteArray* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_copy_script_pubkey_data(\n+        const kernel_ScriptPubkey* script_pubkey\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the script pubkey.\n+ */\n+void kernel_script_pubkey_destroy(kernel_ScriptPubkey* script_pubkey);\n+\n+/**\n+ * @brief Create a transaction output from a script pubkey and an amount.\n+ * @param[in] script_pubkey Non-null.\n+ * @param[in] amount        The amount associated with the script pubkey for this output.\n+ * @return                  The transaction output.\n+ */\n+kernel_TransactionOutput* kernel_transaction_output_create(\n+    kernel_ScriptPubkey* script_pubkey,\n+    int64_t amount\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the transaction output.\n+ */\n+void kernel_transaction_output_destroy(kernel_TransactionOutput* transaction_output);\n+\n+/**\n+ * @brief Verify if the input at input_index of tx_to spends the script pubkey\n+ * under the constraints specified by flags. If the\n+ * `kernel_SCRIPT_FLAGS_VERIFY_WITNESS` flag is set in the flags bitfield, the\n+ * amount parameter is used. If the taproot flag is set, the spent outputs\n+ * parameter is used to validate taproot transactions.\n+ *\n+ * @param[in] script_pubkey     Non-null, script pubkey to be spent.\n+ * @param[in] amount            Amount of the script pubkey's associated output. May be zero if\n+ *                              the witness flag is not set.\n+ * @param[in] tx_to             Non-null, transaction spending the script_pubkey.\n+ * @param[in] spent_outputs     Nullable if the taproot flag is not set. Points to an array of\n+ *                              outputs spent by the transaction.\n+ * @param[in] spent_outputs_len Length of the spent_outputs array.\n+ * @param[in] input_index       Index of the input in tx_to spending the script_pubkey.\n+ * @param[in] flags             Bitfield of kernel_ScriptFlags controlling validation constraints.\n+ * @param[out] status           Nullable, will be set to an error code if the operation fails.\n+ *                              Should be set to kernel_SCRIPT_VERIFY_OK.\n+ * @return                      True if the script is valid.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_verify_script(\n+    const kernel_ScriptPubkey* script_pubkey,\n+    int64_t amount,\n+    const kernel_Transaction* tx_to,\n+    const kernel_TransactionOutput** spent_outputs, size_t spent_outputs_len,\n+    unsigned int input_index,\n+    unsigned int flags,\n+    kernel_ScriptVerifyStatus* status\n+) BITCOINKERNEL_ARG_NONNULL(1) BITCOINKERNEL_ARG_NONNULL(3);\n+\n+/**\n+ * @brief This disables the global internal logger. No log messages will be\n+ * buffered internally anymore once this is called and the buffer is cleared.\n+ * This function should only be called once. Log messages will be buffered until\n+ * this function is called, or a logging connection is created.\n+ */\n+void kernel_disable_logging();\n+\n+/**\n+ * @brief Set the log level of the global internal logger. This does not enable\n+ * the selected categories. Use `kernel_enable_log_category` to start logging\n+ * from a specific, or all categories.\n+ *\n+ * @param[in] category If kernel_LOG_ALL is chosen, all messages at the specified level\n+ *                     will be logged. Otherwise only messages from the specified category\n+ *                     will be logged at the specified level and above.\n+ * @param[in] level    Log level at which the log category is set.\n+ * @return             True on success.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_add_log_level_category(const kernel_LogCategory category, kernel_LogLevel level);\n+\n+/**\n+ * @brief Enable a specific log category for the global internal logger.\n+ *\n+ * @param[in] category If kernel_LOG_ALL is chosen, all categories will be enabled.\n+ * @return             True on success.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_enable_log_category(const kernel_LogCategory category);\n+\n+/**\n+ * Disable a specific log category for the global internal logger.\n+ *\n+ * @param[in] category If kernel_LOG_ALL is chosen, all categories will be disabled.\n+ * @return             True on success.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_disable_log_category(const kernel_LogCategory category);\n+\n+/**\n+ * @brief Start logging messages through the provided callback. Log messages\n+ * produced before this function is first called are buffered and on calling this\n+ * function are logged immediately.\n+ *\n+ * @param[in] callback  Non-null, function through which messages will be logged.\n+ * @param[in] user_data Nullable, holds a user-defined opaque structure. Is passed back\n+ *                      to the user through the callback.\n+ * @param[in] options   Sets formatting options of the log messages.\n+ * @return              A new kernel logging connection, or null on error.\n+ */\n+kernel_LoggingConnection* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_logging_connection_create(\n+    kernel_LogCallback callback,\n+    void* user_data,\n+    const kernel_LoggingOptions options\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Stop logging and destroy the logging connection.\n+ */\n+void kernel_logging_connection_destroy(kernel_LoggingConnection* logging_connection);\n+\n+/**\n+ * @brief Creates a chain parameters struct with default parameters based on the\n+ * passed in chain type.\n+ *\n+ * @param[in] chain_type Controls the chain parameters type created.\n+ * @return               An allocated chain parameters opaque struct.\n+ */\n+const kernel_ChainParameters* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_chain_parameters_create(\n+    const kernel_ChainType chain_type);\n+\n+/**\n+ * Destroy the chain parameters.\n+ */\n+void kernel_chain_parameters_destroy(const kernel_ChainParameters* chain_parameters);\n+\n+/**\n+ * @brief Creates an object for holding the kernel notification callbacks.\n+ *\n+ * @param[in] callbacks Holds the callbacks that will be invoked by the kernel notifications.\n+ */\n+kernel_Notifications* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_notifications_create(\n+    kernel_NotificationInterfaceCallbacks callbacks);\n+\n+/**\n+ * Destroy the kernel notifications.\n+ */\n+void kernel_notifications_destroy(const kernel_Notifications* notifications);\n+\n+/**\n+ * Creates an empty context options.\n+ */\n+kernel_ContextOptions* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_context_options_create();\n+\n+/**\n+ * @brief Sets the chain params for the context options. The context created\n+ * with the options will be configured for these chain parameters.\n+ *\n+ * @param[in] context_options  Non-null, previously created with kernel_context_options_create.\n+ * @param[in] chain_parameters Is set to the context options.\n+ */\n+void kernel_context_options_set_chainparams(\n+    kernel_ContextOptions* context_options,\n+    const kernel_ChainParameters* chain_parameters\n+) BITCOINKERNEL_ARG_NONNULL(1) BITCOINKERNEL_ARG_NONNULL(2);\n+\n+/**\n+ * @brief Set the kernel notifications for the context options. The context\n+ * created with the options will be configured with these notifications.\n+ *\n+ * @param[in] context_options Non-null, previously created with kernel_context_options_create.\n+ * @param[in] notifications   Is set to the context options.\n+ */\n+void kernel_context_options_set_notifications(\n+    kernel_ContextOptions* context_options,\n+    const kernel_Notifications* notifications\n+) BITCOINKERNEL_ARG_NONNULL(1) BITCOINKERNEL_ARG_NONNULL(2);\n+\n+/**\n+ * Destroy the context options.\n+ */\n+void kernel_context_options_destroy(kernel_ContextOptions* context_options);\n+\n+/**\n+ * @brief Create a new kernel context. If the options have not been previously\n+ * set, their corresponding fields will be initialized to default values; the\n+ * context will assume mainnet chain parameters and won't attempt to call the\n+ * kernel notification callbacks.\n+ *\n+ * @param[in] context_options Nullable, created with kernel_context_options_create.\n+ * @return                    The allocated kernel context, or null on error.\n+ */\n+kernel_Context* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_context_create(\n+    const kernel_ContextOptions* context_options);\n+\n+/**\n+ * @brief Interrupt can be used to halt long-running validation functions like\n+ * when reindexing, importing or processing blocks.\n+ *\n+ * @param[in] context  Non-null.\n+ * @return             True if the interrupt was successful.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_context_interrupt(\n+    kernel_Context* context\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the context.\n+ */\n+void kernel_context_destroy(kernel_Context* context);\n+\n+/**\n+ * @brief Create options for the chainstate manager.\n+ *\n+ * @param[in] context        Non-null, the created options will associate with this kernel context\n+ *                           for the duration of their lifetime. The same context needs to be used\n+ *                           when instantiating the chainstate manager.\n+ * @param[in] data_directory Non-null, directory containing the chainstate data. If the directory\n+ *                           does not exist yet, it will be created.\n+ * @return                   The allocated chainstate manager options, or null on error.\n+ */\n+kernel_ChainstateManagerOptions* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_chainstate_manager_options_create(\n+    const kernel_Context* context,\n+    const char* data_directory\n+) BITCOINKERNEL_ARG_NONNULL(1) BITCOINKERNEL_ARG_NONNULL(2);\n+\n+/**\n+ * Destroy the chainstate manager options.\n+ */\n+void kernel_chainstate_manager_options_destroy(kernel_ChainstateManagerOptions* chainstate_manager_options);\n+\n+/**\n+ * @brief Create options for the block manager. The block manager is used\n+ * internally by the chainstate manager for block storage and indexing.\n+ *\n+ * @param[in] context          Non-null, the created options will associate with this kernel context\n+ *                             for the duration of their lifetime. The same context needs to be used\n+ *                             when instantiating the chainstate manager.\n+ * @param[in] blocks_directory Non-null, directory containing the block data. If the directory does\n+ *                             not exist yet, it will be created.\n+ * @return                     The allocated block manager options, or null on error.\n+ */\n+kernel_BlockManagerOptions* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_block_manager_options_create(\n+    const kernel_Context* context,\n+    const char* blocks_directory\n+) BITCOINKERNEL_ARG_NONNULL(1) BITCOINKERNEL_ARG_NONNULL(2);\n+\n+/**\n+ * @brief Set the number of available worker threads used during validation.\n+ *\n+ * @param[in] chainstate_manager_options Non-null, options to be set.\n+ * @param[in] worker_threads The number of worker threads that should be spawned in the thread pool\n+ *                           used for validation. The number should be greater than 0.",
      "path": "src/kernel/bitcoinkernel.h",
      "position": 718,
      "original_position": 717,
      "commit_id": "34a8429ff3a870c0caaf4c4790becd86c5acde38",
      "original_commit_id": "6c9121f7907262b2bf065a7ceeb8bca620060a7f",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: according to the `worker_threads_num`, 0 is accepted too:\r\n> Zero means no parallel verification.\r\n\r\n```suggestion\r\n *                           used for validation. The number must not be negative. When set to zero, no parallel verification is done.\r\n```",
      "created_at": "2024-11-20T16:42:13Z",
      "updated_at": "2024-11-25T21:41:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1850657572",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1850657572"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 718,
      "original_line": 718,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1850697300",
      "pull_request_review_id": 2449240449,
      "id": 1850697300,
      "node_id": "PRRC_kwDOABII585uT2ZU",
      "diff_hunk": "@@ -0,0 +1,1145 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_KERNEL_BITCOINKERNEL_H\n+#define BITCOIN_KERNEL_BITCOINKERNEL_H\n+\n+#ifndef __cplusplus\n+#include <stdbool.h>\n+#include <stddef.h>\n+#include <stdint.h>\n+#else\n+#include <cstddef>\n+#include <cstdint>\n+#endif // __cplusplus\n+\n+\n+#if !defined(BITCOINKERNEL_GNUC_PREREQ)\n+#if defined(__GNUC__) && defined(__GNUC_MINOR__)\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) \\\n+    ((__GNUC__ << 16) + __GNUC_MINOR__ >= ((_maj) << 16) + (_min))\n+#else\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) 0\n+#endif\n+#endif\n+\n+/* Warning attributes */\n+#if defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT __attribute__((__warn_unused_result__))\n+#else\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT\n+#endif\n+#if !defined(BITCOINKERNEL_BUILD) && defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_ARG_NONNULL(_x) __attribute__((__nonnull__(_x)))",
      "path": "src/kernel/bitcoinkernel.h",
      "position": null,
      "original_position": 34,
      "commit_id": "34a8429ff3a870c0caaf4c4790becd86c5acde38",
      "original_commit_id": "33c71843e3fde0b795687a8626220f02f7243662",
      "in_reply_to_id": 1757015877,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thanks, decided to take this. I was a bit careful here, because I lifted the check from secp, which also does not use variadic args: https://github.com/bitcoin-core/secp256k1/blob/master/include/secp256k1.h#L174. But thinking a bit more about it, I could not come up with a good reason not to, so took your suggestion.",
      "created_at": "2024-11-20T17:06:26Z",
      "updated_at": "2024-11-20T17:06:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1850697300",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1850697300"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 34,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1852510169",
      "pull_request_review_id": 2448664774,
      "id": 1852510169,
      "node_id": "PRRC_kwDOABII585uaw_Z",
      "diff_hunk": "@@ -0,0 +1,1190 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_KERNEL_BITCOINKERNEL_H\n+#define BITCOIN_KERNEL_BITCOINKERNEL_H\n+\n+#ifndef __cplusplus\n+#include <stdbool.h>\n+#include <stddef.h>\n+#include <stdint.h>\n+#else\n+#include <cstddef>\n+#include <cstdint>\n+#endif // __cplusplus\n+\n+\n+#if !defined(BITCOINKERNEL_GNUC_PREREQ)\n+#if defined(__GNUC__) && defined(__GNUC_MINOR__)\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) \\\n+    ((__GNUC__ << 16) + __GNUC_MINOR__ >= ((_maj) << 16) + (_min))\n+#else\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) 0\n+#endif\n+#endif\n+\n+/* Warning attributes */\n+#if defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT __attribute__((__warn_unused_result__))\n+#else\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT\n+#endif\n+#if !defined(BITCOINKERNEL_BUILD) && defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_ARG_NONNULL(...) __attribute__((__nonnull__(__VA_ARGS__)))\n+#else\n+#define BITCOINKERNEL_ARG_NONNULL(_x)\n+#endif\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif // __cplusplus\n+\n+/**\n+ * ------ Context ------\n+ *\n+ * The library provides a built-in static constant kernel context. This static\n+ * context offers only limited functionality. It detects and self-checks the\n+ * correct sha256 implementation, initializes the random number generator and\n+ * self-checks the secp256k1 static context. It is used internally for\n+ * otherwise \"context-free\" operations. This means that the user is not\n+ * required to initialize their own context before using the library.\n+ *\n+ * The user should create their own context for passing it to state-rich validation\n+ * functions and holding callbacks for kernel events.\n+ *\n+ * ------ Error handling ------\n+ *\n+ * Functions communicate an error through their return types, usually returning\n+ * a nullptr, or false if an error is encountered. Additionally, verification\n+ * functions, e.g. for scripts, may communicate more detailed error information\n+ * through status code out parameters.\n+ *\n+ * Fine-grained validation information is communicated through the validation\n+ * interface.\n+ *\n+ * The kernel notifications issue callbacks for errors. These are usually\n+ * indicative of a system error. If such an error is issued, it is recommended\n+ * to halt and tear down the existing kernel objects. Remediating the error may\n+ * require system intervention by the user.\n+ *\n+ * ------ Pointer and argument conventions ------\n+ *\n+ * The user is responsible for de-allocating the memory owned by pointers\n+ * returned by functions. Typically pointers returned by *_create(...) functions\n+ * can be de-allocated by corresponding *_destroy(...) functions.\n+ *\n+ * A function that takes pointer arguments makes no assumptions on their\n+ * lifetime. Once the function returns the user can safely de-allocate the\n+ * passed in arguments.\n+ *\n+ * Pointers passed by callbacks are not owned by the user and are only valid for\n+ * the duration of the callback. They must not be de-allocated by the user.\n+ *\n+ * Array lengths follow the pointer argument they describe.\n+ */\n+\n+/**\n+ * Opaque data structure for holding a transaction.\n+ */\n+typedef struct kernel_Transaction kernel_Transaction;\n+\n+/**\n+ * Opaque data structure for holding a script pubkey.\n+ */\n+typedef struct kernel_ScriptPubkey kernel_ScriptPubkey;\n+\n+/**\n+ * Opaque data structure for holding a transaction output.\n+ */\n+typedef struct kernel_TransactionOutput kernel_TransactionOutput;\n+\n+/**\n+ * Opaque data structure for holding a logging connection.\n+ *\n+ * The logging connection can be used to manually stop logging.\n+ *\n+ * Messages that were logged before a connection is created are buffered in a\n+ * 1MB buffer. Logging can alternatively be permanently disabled by calling\n+ * kernel_disable_logging().\n+ */\n+typedef struct kernel_LoggingConnection kernel_LoggingConnection;\n+\n+/**\n+ * Opaque data structure for holding the chain parameters.\n+ *\n+ * These are eventually placed into a kernel context through the kernel context\n+ * options. The parameters describe the properties of a chain, and may be\n+ * instantiated for either mainnet, testnet, signet, or regtest.\n+ */\n+typedef struct kernel_ChainParameters kernel_ChainParameters;\n+\n+/**\n+ * Opaque data structure for holding callbacks for reacting to events that may\n+ * be encountered during library operations.\n+ */\n+typedef struct kernel_Notifications kernel_Notifications;\n+\n+/**\n+ * Opaque data structure for holding options for creating a new kernel context.\n+ *\n+ * Once a kernel context has been created from these options, they may be\n+ * destroyed. The options hold the notification callbacks as well as the\n+ * selected chain type until they are passed to the context. If no options are\n+ * configured, the context will be instantiated with no callbacks and for\n+ * mainnet. Their content and scope can be expanded over time.\n+ */\n+typedef struct kernel_ContextOptions kernel_ContextOptions;\n+\n+/**\n+ * Opaque data structure for holding a kernel context.\n+ *\n+ * The kernel context is used to initialize internal state and hold the chain\n+ * parameters and callbacks for handling error and validation events. Once other\n+ * validation objects are instantiated from it, the context needs to be kept in\n+ * memory for the duration of their lifetimes.\n+ *\n+ * The processing of validation events is done through an internal task\n+ * runner owned by the context. The task runner drives the execution of events\n+ * triggering validation interface callbacks. Multiple validation interfaces can\n+ * be registered with the context. The kernel will create an event for each of\n+ * the registered validation interfaces through the task runner.\n+ *\n+ * A constructed context can be safely used from multiple threads, but functions\n+ * taking it as a non-cost argument need exclusive access to it.\n+ */\n+typedef struct kernel_Context kernel_Context;\n+\n+/**\n+ * Opaque data structure for holding a block index pointer.\n+ *\n+ * This is a pointer to an element in the block index currently in memory of the\n+ * chainstate manager. It is valid for the lifetime of the chainstate manager it\n+ * was retrieved from.\n+ */\n+typedef struct kernel_BlockIndex kernel_BlockIndex;\n+\n+/**\n+ * Opaque data structure for holding options for creating a new chainstate\n+ * manager.\n+ *\n+ * The chainstate manager options are used to set some parameters for the\n+ * chainstate manager. For now it just holds default options.\n+ */\n+typedef struct kernel_ChainstateManagerOptions kernel_ChainstateManagerOptions;\n+\n+/**\n+ * Opaque data structure for holding options for creating a new chainstate\n+ * manager.\n+ *\n+ * The chainstate manager has an internal block manager that takes its own set\n+ * of parameters. It is initialized with default options.\n+ */\n+typedef struct kernel_BlockManagerOptions kernel_BlockManagerOptions;\n+\n+/**\n+ * Opaque data structure for holding a chainstate manager.\n+ *\n+ * The chainstate manager is the central object for doing validation tasks as\n+ * well as retrieving data from the chain. Internally it is a complex data\n+ * structure with diverse functionality.\n+ *\n+ * The chainstate manager is only valid for as long as the context with which it\n+ * was created remains in memory.\n+ *\n+ * Its functionality will be more and more exposed in the future.\n+ */\n+typedef struct kernel_ChainstateManager kernel_ChainstateManager;\n+\n+/**\n+ * Opaque data structure for holding parameters used for loading the chainstate\n+ * of a chainstate manager.\n+ *\n+ * Is initialized with default parameters.\n+ */\n+typedef struct kernel_ChainstateLoadOptions kernel_ChainstateLoadOptions;\n+\n+/**\n+ * Opaque data structure for holding a block.\n+ */\n+typedef struct kernel_Block kernel_Block;\n+\n+/**\n+ * Opaque data structure for holding a non-owned block. This is typically a\n+ * block available to the user through one of the validation callbacks.\n+ */\n+typedef struct kernel_BlockPointer kernel_BlockPointer;\n+\n+/**\n+ * Opaque data structure for holding the state of a block during validation.\n+ *\n+ * Contains information indicating whether validation was successful, and if not\n+ * which step during block validation failed.\n+ */\n+typedef struct kernel_BlockValidationState kernel_BlockValidationState;\n+\n+/**\n+ * Opaque data structure for holding a validation interface.\n+ *\n+ * The validation interface can be registered with the internal task runner of an\n+ * existing context. It holds callbacks that will be triggered by certain\n+ * validation events. The callbacks registered with it will block further\n+ * validation progress when triggered.\n+ */\n+typedef struct kernel_ValidationInterface kernel_ValidationInterface;\n+\n+/**\n+ * Opaque data structure for holding a block undo struct.\n+ *\n+ * It holds all the previous outputs consumed by all transactions in a specific\n+ * block. Internally it holds a nested vector. The top level vector has an entry\n+ * for each transaction in a block (in order of the actual transactions of the\n+ * block and minus the coinbase transaction). Each entry is in turn a vector of\n+ * all the previous outputs of a transaction (in order of their corresponding\n+ * inputs).\n+ */\n+typedef struct kernel_BlockUndo kernel_BlockUndo;\n+\n+/** Current sync state passed to tip changed callbacks. */\n+typedef enum {\n+    kernel_INIT_REINDEX,\n+    kernel_INIT_DOWNLOAD,\n+    kernel_POST_INIT\n+} kernel_SynchronizationState;\n+\n+/** Possible warning types issued by validation. */\n+typedef enum {\n+    kernel_UNKNOWN_NEW_RULES_ACTIVATED,\n+    kernel_LARGE_WORK_INVALID_CHAIN\n+} kernel_Warning;\n+\n+/** Callback function types */\n+\n+/**\n+ * Function signature for the global logging callback. All bitcoin kernel\n+ * internal logs will pass through this callback.\n+ */\n+typedef void (*kernel_LogCallback)(void* user_data, const char* message);\n+\n+/**\n+ * Function signatures for the kernel notifications.\n+ */\n+typedef void (*kernel_NotifyBlockTip)(void* user_data, kernel_SynchronizationState state, kernel_BlockIndex* index);\n+typedef void (*kernel_NotifyHeaderTip)(void* user_data, kernel_SynchronizationState state, int64_t height, int64_t timestamp, bool presync);\n+typedef void (*kernel_NotifyProgress)(void* user_data, const char* title, int progress_percent, bool resume_possible);\n+typedef void (*kernel_NotifyWarningSet)(void* user_data, kernel_Warning warning, const char* message);\n+typedef void (*kernel_NotifyWarningUnset)(void* user_data, kernel_Warning warning);\n+typedef void (*kernel_NotifyFlushError)(void* user_data, const char* message);\n+typedef void (*kernel_NotifyFatalError)(void* user_data, const char* message);\n+\n+/**\n+ * Function signatures for the validation interface.\n+ */\n+typedef void (*kernel_ValidationInterfaceBlockChecked)(void* user_data, const kernel_BlockPointer* block, const kernel_BlockValidationState* state);\n+\n+/**\n+ * Whether a validated data structure is valid, invalid, or an error was\n+ * encountered during processing.\n+ */\n+typedef enum {\n+    kernel_VALIDATION_STATE_VALID = 0,\n+    kernel_VALIDATION_STATE_INVALID,\n+    kernel_VALIDATION_STATE_ERROR,\n+} kernel_ValidationMode;\n+\n+/**\n+ * A granular \"reason\" why a block was invalid.\n+ */\n+typedef enum {\n+    kernel_BLOCK_RESULT_UNSET = 0, //!< initial value. Block has not yet been rejected\n+    kernel_BLOCK_CONSENSUS,        //!< invalid by consensus rules (excluding any below reasons)\n+    kernel_BLOCK_CACHED_INVALID,  //!< this block was cached as being invalid and we didn't store the reason why\n+    kernel_BLOCK_INVALID_HEADER,  //!< invalid proof of work or time too old\n+    kernel_BLOCK_MUTATED,         //!< the block's data didn't match the data committed to by the PoW\n+    kernel_BLOCK_MISSING_PREV,    //!< We don't have the previous block the checked one is built on\n+    kernel_BLOCK_INVALID_PREV,    //!< A block this one builds on is invalid\n+    kernel_BLOCK_TIME_FUTURE,     //!< block timestamp was > 2 hours in the future (or our clock is bad)\n+    kernel_BLOCK_CHECKPOINT,      //!< the block failed to meet one of our checkpoints\n+    kernel_BLOCK_HEADER_LOW_WORK, //!< the block header may be on a too-little-work chain\n+} kernel_BlockValidationResult;\n+\n+/**\n+ * Holds the validation interface callbacks. The user data pointer may be used\n+ * to point to user-defined structures to make processing the validation\n+ * callbacks easier.\n+ */\n+typedef struct {\n+    void* user_data;                                      //!< Holds a user-defined opaque structure that is passed to the validation\n+                                                          //!< interface callbacks.\n+    kernel_ValidationInterfaceBlockChecked block_checked; //!< Called when a new block has been checked. Contains the\n+                                                          //!< result of its validation.\n+} kernel_ValidationInterfaceCallbacks;\n+\n+/**\n+ * A struct for holding the kernel notification callbacks. The user data\n+ * pointer may be used to point to user-defined structures to make processing\n+ * the notifications easier. Note that this makes it the user's responsibility\n+ * to ensure that the user_data outlives the kernel objects. Notifications can\n+ * occur even as kernel objects are deleted, so care has to be taken to ensure\n+ * safe unwinding.\n+ */\n+typedef struct {\n+    void* user_data;                         //!< Holds a user-defined opaque structure that is passed to the notification callbacks.\n+    kernel_NotifyBlockTip block_tip;         //!< The chain's tip was updated to the provided block index.\n+    kernel_NotifyHeaderTip header_tip;       //!< A new best block header was added.\n+    kernel_NotifyProgress progress;          //!< Reports on current block synchronization progress.\n+    kernel_NotifyWarningSet warning_set;     //!< A warning issued by the kernel library during validation.\n+    kernel_NotifyWarningUnset warning_unset; //!< A previous condition leading to the issuance of a warning is no longer given.\n+    kernel_NotifyFlushError flush_error;     //!< An error encountered when flushing data to disk.\n+    kernel_NotifyFatalError fatal_error;     //!< A un-recoverable system error encountered by the library.\n+} kernel_NotificationInterfaceCallbacks;\n+\n+/**\n+ * A collection of logging categories that may be encountered by kernel code.\n+ */\n+typedef enum {\n+    kernel_LOG_ALL = 0,\n+    kernel_LOG_BENCH,\n+    kernel_LOG_BLOCKSTORAGE,\n+    kernel_LOG_COINDB,\n+    kernel_LOG_LEVELDB,\n+    kernel_LOG_LOCK,\n+    kernel_LOG_MEMPOOL,\n+    kernel_LOG_PRUNE,\n+    kernel_LOG_RAND,\n+    kernel_LOG_REINDEX,\n+    kernel_LOG_VALIDATION,\n+    kernel_LOG_KERNEL,\n+} kernel_LogCategory;\n+\n+/**\n+ * The level at which logs should be produced.\n+ */\n+typedef enum {\n+    kernel_LOG_INFO = 0,\n+    kernel_LOG_DEBUG,\n+    kernel_LOG_TRACE,\n+} kernel_LogLevel;\n+\n+/**\n+ * Options controlling the format of log messages.\n+ */\n+typedef struct {\n+    bool log_timestamps;               //!< Prepend a timestamp to log messages.\n+    bool log_time_micros;              //!< Log timestamps in microsecond precision.\n+    bool log_threadnames;              //!< Prepend the name of the thread to log messages.\n+    bool log_sourcelocations;          //!< Prepend the source location to log messages.\n+    bool always_print_category_levels; //!< Prepend the log category and level to log messages.\n+} kernel_LoggingOptions;\n+\n+/**\n+ * A collection of status codes that may be issued by the script verify function.\n+ */\n+typedef enum {\n+    kernel_SCRIPT_VERIFY_OK = 0,\n+    kernel_SCRIPT_VERIFY_ERROR_TX_INPUT_INDEX, //!< The provided input index is out of range of the actual number of inputs of the transaction.\n+    kernel_SCRIPT_VERIFY_ERROR_INVALID_FLAGS, //!< The provided bitfield for the flags was invalid.\n+    kernel_SCRIPT_VERIFY_ERROR_INVALID_FLAGS_COMBINATION, //!< The flags very combined in an invalid way.\n+    kernel_SCRIPT_VERIFY_ERROR_SPENT_OUTPUTS_REQUIRED, //!< The taproot flag was set, so valid spent_outputs have to be provided.\n+    kernel_SCRIPT_VERIFY_ERROR_SPENT_OUTPUTS_MISMATCH, //!< The number of spent outputs does not match the number of inputs of the tx.\n+} kernel_ScriptVerifyStatus;\n+\n+/**\n+ * Script verification flags that may be composed with each other.\n+ */\n+typedef enum\n+{\n+    kernel_SCRIPT_FLAGS_VERIFY_NONE                = 0,\n+    kernel_SCRIPT_FLAGS_VERIFY_P2SH                = (1U << 0), //!< evaluate P2SH (BIP16) subscripts\n+    kernel_SCRIPT_FLAGS_VERIFY_DERSIG              = (1U << 2), //!< enforce strict DER (BIP66) compliance\n+    kernel_SCRIPT_FLAGS_VERIFY_NULLDUMMY           = (1U << 4), //!< enforce NULLDUMMY (BIP147)\n+    kernel_SCRIPT_FLAGS_VERIFY_CHECKLOCKTIMEVERIFY = (1U << 9), //!< enable CHECKLOCKTIMEVERIFY (BIP65)\n+    kernel_SCRIPT_FLAGS_VERIFY_CHECKSEQUENCEVERIFY = (1U << 10), //!< enable CHECKSEQUENCEVERIFY (BIP112)\n+    kernel_SCRIPT_FLAGS_VERIFY_WITNESS             = (1U << 11), //!< enable WITNESS (BIP141)\n+\n+    kernel_SCRIPT_FLAGS_VERIFY_TAPROOT             = (1U << 17), //!< enable TAPROOT (BIPs 341 & 342)\n+    kernel_SCRIPT_FLAGS_VERIFY_ALL                 = kernel_SCRIPT_FLAGS_VERIFY_P2SH |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_DERSIG |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_NULLDUMMY |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_CHECKLOCKTIMEVERIFY |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_CHECKSEQUENCEVERIFY |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_WITNESS |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_TAPROOT\n+} kernel_ScriptFlags;\n+\n+/**\n+ * Chain type used for creating chain params.\n+ */\n+typedef enum {\n+    kernel_CHAIN_TYPE_MAINNET = 0,\n+    kernel_CHAIN_TYPE_TESTNET,\n+    kernel_CHAIN_TYPE_TESTNET_4,\n+    kernel_CHAIN_TYPE_SIGNET,\n+    kernel_CHAIN_TYPE_REGTEST,\n+} kernel_ChainType;\n+\n+/**\n+ * A type-safe block identifier.\n+ */\n+typedef struct {\n+    unsigned char hash[32];\n+} kernel_BlockHash;\n+\n+/**\n+ * Convenience struct for holding serialized data.\n+ */\n+typedef struct {\n+    unsigned char* data;\n+    size_t size;\n+} kernel_ByteArray;\n+\n+/**\n+ * @brief Create a new transaction from the serialized data.\n+ *\n+ * @param[in] raw_transaction     Non-null.\n+ * @param[in] raw_transaction_len Length of the serialized transaction.\n+ * @return                        The transaction, or null on error.\n+ */\n+kernel_Transaction* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_transaction_create(\n+    const unsigned char* raw_transaction, size_t raw_transaction_len\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the transaction.\n+ */\n+void kernel_transaction_destroy(kernel_Transaction* transaction);\n+\n+/**\n+ * @brief Create a script pubkey from serialized data.\n+ * @param[in] script_pubkey     Non-null.\n+ * @param[in] script_pubkey_len Length of the script pubkey data.\n+ * @return                      The script pubkey, or null on error.\n+ */\n+kernel_ScriptPubkey* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_script_pubkey_create(\n+    const unsigned char* script_pubkey, size_t script_pubkey_len\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * @brief Copies the script pubkey data into the returned byte array.\n+ * @param[in] script_pubkey Non-null.\n+ * @return                  The serialized script pubkey data.\n+ */\n+kernel_ByteArray* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_copy_script_pubkey_data(\n+        const kernel_ScriptPubkey* script_pubkey\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the script pubkey.\n+ */\n+void kernel_script_pubkey_destroy(kernel_ScriptPubkey* script_pubkey);\n+\n+/**\n+ * @brief Create a transaction output from a script pubkey and an amount.\n+ * @param[in] script_pubkey Non-null.\n+ * @param[in] amount        The amount associated with the script pubkey for this output.\n+ * @return                  The transaction output.\n+ */\n+kernel_TransactionOutput* kernel_transaction_output_create(\n+    kernel_ScriptPubkey* script_pubkey,\n+    int64_t amount\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the transaction output.\n+ */\n+void kernel_transaction_output_destroy(kernel_TransactionOutput* transaction_output);\n+\n+/**\n+ * @brief Verify if the input at input_index of tx_to spends the script pubkey\n+ * under the constraints specified by flags. If the\n+ * `kernel_SCRIPT_FLAGS_VERIFY_WITNESS` flag is set in the flags bitfield, the\n+ * amount parameter is used. If the taproot flag is set, the spent outputs\n+ * parameter is used to validate taproot transactions.\n+ *\n+ * @param[in] script_pubkey     Non-null, script pubkey to be spent.\n+ * @param[in] amount            Amount of the script pubkey's associated output. May be zero if\n+ *                              the witness flag is not set.\n+ * @param[in] tx_to             Non-null, transaction spending the script_pubkey.\n+ * @param[in] spent_outputs     Nullable if the taproot flag is not set. Points to an array of\n+ *                              outputs spent by the transaction.\n+ * @param[in] spent_outputs_len Length of the spent_outputs array.\n+ * @param[in] input_index       Index of the input in tx_to spending the script_pubkey.\n+ * @param[in] flags             Bitfield of kernel_ScriptFlags controlling validation constraints.\n+ * @param[out] status           Nullable, will be set to an error code if the operation fails.\n+ *                              Should be set to kernel_SCRIPT_VERIFY_OK.\n+ * @return                      True if the script is valid.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_verify_script(\n+    const kernel_ScriptPubkey* script_pubkey,\n+    int64_t amount,\n+    const kernel_Transaction* tx_to,\n+    const kernel_TransactionOutput** spent_outputs, size_t spent_outputs_len,\n+    unsigned int input_index,\n+    unsigned int flags,\n+    kernel_ScriptVerifyStatus* status\n+) BITCOINKERNEL_ARG_NONNULL(1, 3);\n+\n+/**\n+ * @brief This disables the global internal logger. No log messages will be\n+ * buffered internally anymore once this is called and the buffer is cleared.\n+ * This function should only be called once. Log messages will be buffered until\n+ * this function is called, or a logging connection is created.\n+ */\n+void kernel_disable_logging();\n+\n+/**\n+ * @brief Set the log level of the global internal logger. This does not enable\n+ * the selected categories. Use `kernel_enable_log_category` to start logging\n+ * from a specific, or all categories.\n+ *\n+ * @param[in] category If kernel_LOG_ALL is chosen, all messages at the specified level\n+ *                     will be logged. Otherwise only messages from the specified category\n+ *                     will be logged at the specified level and above.\n+ * @param[in] level    Log level at which the log category is set.\n+ * @return             True on success.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_add_log_level_category(const kernel_LogCategory category, kernel_LogLevel level);\n+\n+/**\n+ * @brief Enable a specific log category for the global internal logger.\n+ *\n+ * @param[in] category If kernel_LOG_ALL is chosen, all categories will be enabled.\n+ * @return             True on success.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_enable_log_category(const kernel_LogCategory category);\n+\n+/**\n+ * Disable a specific log category for the global internal logger.\n+ *\n+ * @param[in] category If kernel_LOG_ALL is chosen, all categories will be disabled.\n+ * @return             True on success.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_disable_log_category(const kernel_LogCategory category);\n+\n+/**\n+ * @brief Start logging messages through the provided callback. Log messages\n+ * produced before this function is first called are buffered and on calling this\n+ * function are logged immediately.\n+ *\n+ * @param[in] callback  Non-null, function through which messages will be logged.\n+ * @param[in] user_data Nullable, holds a user-defined opaque structure. Is passed back\n+ *                      to the user through the callback.\n+ * @param[in] options   Sets formatting options of the log messages.\n+ * @return              A new kernel logging connection, or null on error.\n+ */\n+kernel_LoggingConnection* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_logging_connection_create(\n+    kernel_LogCallback callback,\n+    void* user_data,\n+    const kernel_LoggingOptions options\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Stop logging and destroy the logging connection.\n+ */\n+void kernel_logging_connection_destroy(kernel_LoggingConnection* logging_connection);\n+\n+/**\n+ * @brief Creates a chain parameters struct with default parameters based on the\n+ * passed in chain type.\n+ *\n+ * @param[in] chain_type Controls the chain parameters type created.\n+ * @return               An allocated chain parameters opaque struct.\n+ */\n+const kernel_ChainParameters* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_chain_parameters_create(\n+    const kernel_ChainType chain_type);\n+\n+/**\n+ * Destroy the chain parameters.\n+ */\n+void kernel_chain_parameters_destroy(const kernel_ChainParameters* chain_parameters);\n+\n+/**\n+ * @brief Creates an object for holding the kernel notification callbacks.\n+ *\n+ * @param[in] callbacks Holds the callbacks that will be invoked by the kernel notifications.\n+ */\n+kernel_Notifications* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_notifications_create(\n+    kernel_NotificationInterfaceCallbacks callbacks);\n+\n+/**\n+ * Destroy the kernel notifications.\n+ */\n+void kernel_notifications_destroy(const kernel_Notifications* notifications);\n+\n+/**\n+ * Creates an empty context options.\n+ */\n+kernel_ContextOptions* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_context_options_create();\n+\n+/**\n+ * @brief Sets the chain params for the context options. The context created\n+ * with the options will be configured for these chain parameters.\n+ *\n+ * @param[in] context_options  Non-null, previously created with kernel_context_options_create.\n+ * @param[in] chain_parameters Is set to the context options.\n+ */\n+void kernel_context_options_set_chainparams(\n+    kernel_ContextOptions* context_options,\n+    const kernel_ChainParameters* chain_parameters\n+) BITCOINKERNEL_ARG_NONNULL(1, 2);\n+\n+/**\n+ * @brief Set the kernel notifications for the context options. The context\n+ * created with the options will be configured with these notifications.\n+ *\n+ * @param[in] context_options Non-null, previously created with kernel_context_options_create.\n+ * @param[in] notifications   Is set to the context options.\n+ */\n+void kernel_context_options_set_notifications(\n+    kernel_ContextOptions* context_options,\n+    const kernel_Notifications* notifications\n+) BITCOINKERNEL_ARG_NONNULL(1, 2);\n+\n+/**\n+ * Destroy the context options.\n+ */\n+void kernel_context_options_destroy(kernel_ContextOptions* context_options);\n+\n+/**\n+ * @brief Create a new kernel context. If the options have not been previously\n+ * set, their corresponding fields will be initialized to default values; the\n+ * context will assume mainnet chain parameters and won't attempt to call the\n+ * kernel notification callbacks.\n+ *\n+ * @param[in] context_options Nullable, created with kernel_context_options_create.\n+ * @return                    The allocated kernel context, or null on error.\n+ */\n+kernel_Context* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_context_create(\n+    const kernel_ContextOptions* context_options);\n+\n+/**\n+ * @brief Interrupt can be used to halt long-running validation functions like\n+ * when reindexing, importing or processing blocks.\n+ *\n+ * @param[in] context  Non-null.\n+ * @return             True if the interrupt was successful.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_context_interrupt(\n+    kernel_Context* context\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the context.\n+ */\n+void kernel_context_destroy(kernel_Context* context);\n+\n+/**\n+ * @brief Create options for the chainstate manager.\n+ *\n+ * @param[in] context        Non-null, the created options will associate with this kernel context\n+ *                           for the duration of their lifetime. The same context needs to be used\n+ *                           when instantiating the chainstate manager.\n+ * @param[in] data_directory Non-null, directory containing the chainstate data. If the directory\n+ *                           does not exist yet, it will be created.\n+ * @return                   The allocated chainstate manager options, or null on error.\n+ */\n+kernel_ChainstateManagerOptions* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_chainstate_manager_options_create(\n+    const kernel_Context* context,\n+    const char* data_directory\n+) BITCOINKERNEL_ARG_NONNULL(1, 2);\n+\n+/**\n+ * Destroy the chainstate manager options.\n+ */\n+void kernel_chainstate_manager_options_destroy(kernel_ChainstateManagerOptions* chainstate_manager_options);\n+\n+/**\n+ * @brief Create options for the block manager. The block manager is used\n+ * internally by the chainstate manager for block storage and indexing.\n+ *\n+ * @param[in] context          Non-null, the created options will associate with this kernel context\n+ *                             for the duration of their lifetime. The same context needs to be used\n+ *                             when instantiating the chainstate manager.\n+ * @param[in] blocks_directory Non-null, directory containing the block data. If the directory does\n+ *                             not exist yet, it will be created.\n+ * @return                     The allocated block manager options, or null on error.\n+ */\n+kernel_BlockManagerOptions* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_block_manager_options_create(\n+    const kernel_Context* context,\n+    const char* blocks_directory\n+) BITCOINKERNEL_ARG_NONNULL(1, 2);\n+\n+/**\n+ * @brief Set the number of available worker threads used during validation.\n+ *\n+ * @param[in] chainstate_manager_options Non-null, options to be set.\n+ * @param[in] worker_threads The number of worker threads that should be spawned in the thread pool\n+ *                           used for validation. The number should be greater than 0.\n+ */\n+void kernel_chainstate_manager_options_set_worker_threads_num(\n+        kernel_ChainstateManagerOptions* chainstate_manager_options,\n+        int worker_threads\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the block manager options.\n+ */\n+void kernel_block_manager_options_destroy(kernel_BlockManagerOptions* block_manager_options);\n+\n+/**\n+ * @brief Create a chainstate manager. This is the main object for many\n+ * validation tasks as well as for retrieving data from the chain. It is only\n+ * valid for as long as the passed in context also remains in memory.\n+ *\n+ * @param[in] chainstate_manager_options Non-null, created by kernel_chainstate_manager_options_create.\n+ * @param[in] block_manager_options      Non-null, created by kernel_block_manager_options_create.\n+ * @param[in] context                    Non-null, the created chainstate manager will associate with this\n+ *                                       kernel context for the duration of its lifetime. The same context\n+ *                                       needs to be used for later interactions with the chainstate manager.\n+ * @return                               The allocated chainstate manager, or null on error.\n+ */\n+kernel_ChainstateManager* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_chainstate_manager_create(\n+    const kernel_Context* context,\n+    kernel_ChainstateManagerOptions* chainstate_manager_options,\n+    kernel_BlockManagerOptions* block_manager_options\n+) BITCOINKERNEL_ARG_NONNULL(1, 2, 3);\n+\n+/**\n+ * Destroy the chainstate manager.\n+ */\n+void kernel_chainstate_manager_destroy(kernel_ChainstateManager* chainstate_manager, const kernel_Context* context);\n+\n+/**\n+ * @brief Creates a new validation interface for consuming events issued by the\n+ * chainstate manager. The interface should be created and registered before the\n+ * chainstate manager is created to avoid missing validation events.\n+ *\n+ * @param[in] validation_interface_callbacks The callbacks used for passing validation information to the\n+ *                                           user.\n+ * @return                                   A validation interface. This should remain in memory for as\n+ *                                           long as the user expects to receive validation events.\n+ */\n+kernel_ValidationInterface* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_validation_interface_create(\n+    kernel_ValidationInterfaceCallbacks validation_interface_callbacks);\n+\n+/**\n+ * @brief Register a validation interface with the internal task runner\n+ * associated with this context. This also registers it with the chainstate\n+ * manager if the chainstate manager is subsequently created with this context.\n+ *\n+ * @param[in] context              Non-null, will register the validation interface with this context.\n+ * @param[in] validation_interface Non-null.\n+ * @return                         True on success.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_validation_interface_register(\n+    kernel_Context* context,\n+    kernel_ValidationInterface* validation_interface\n+) BITCOINKERNEL_ARG_NONNULL(1, 2);\n+\n+/**\n+ * @brief Unregister a validation interface from the internal task runner\n+ * associated with this context. This should be done before destroying the\n+ * kernel context it was previously registered with.\n+ *\n+ * @param[in] context              Non-null, will deregister the validation interface from this context.\n+ * @param[in] validation_interface Non-null.\n+ * @return                         True on success.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_validation_interface_unregister(\n+    kernel_Context* context,\n+    kernel_ValidationInterface* validation_interface\n+) BITCOINKERNEL_ARG_NONNULL(1, 2);\n+\n+/**\n+ * Destroy the validation interface. This should be done after unregistering it\n+ * if the validation interface was previously registered with a chainstate\n+ * manager.\n+ */\n+void kernel_validation_interface_destroy(kernel_ValidationInterface* validation_interface);\n+\n+/**\n+ * Create options for loading the chainstate.\n+ */\n+kernel_ChainstateLoadOptions* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_chainstate_load_options_create();\n+\n+/**\n+ * @brief Sets wipe block tree db in the chainstate load options.\n+ *\n+ * @param[in] chainstate_load_options Non-null, created with kernel_chainstate_load_options_create.\n+ * @param[in] wipe_block_tree_db      Set wipe block tree db.\n+ */\n+void kernel_chainstate_load_options_set_wipe_block_tree_db(\n+    kernel_ChainstateLoadOptions* chainstate_load_options,\n+    bool wipe_block_tree_db\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * @brief Sets wipe chainstate db in the chainstate load options.\n+ *\n+ * @param[in] chainstate_load_options Non-null, created with kernel_chainstate_load_options_create.\n+ * @param[in] wipe_chainstate_db      Set wipe chainstate db.\n+ */\n+void kernel_chainstate_load_options_set_wipe_chainstate_db(\n+    kernel_ChainstateLoadOptions* chainstate_load_options,\n+    bool wipe_chainstate_db\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * @brief Sets block tree db in memory in the chainstate load options.\n+ *\n+ * @param[in] chainstate_load_options Non-null, created with kernel_chainstate_load_options_create.\n+ * @param[in] block_tree_db_in_memory Set block tree db in memory.\n+ */\n+void kernel_chainstate_load_options_set_block_tree_db_in_memory(\n+    kernel_ChainstateLoadOptions* chainstate_load_options,\n+    bool block_tree_db_in_memory\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * @brief Sets chainstate db in memory in the chainstate load options.\n+ *\n+ * @param[in] chainstate_load_options Non-null, created with kernel_chainstate_load_options_create.\n+ * @param[in] chainstate_db_in_memory Set chainstate db in memory.\n+ */\n+void kernel_chainstate_load_options_set_chainstate_db_in_memory(\n+    kernel_ChainstateLoadOptions* chainstate_load_options,\n+    bool chainstate_db_in_memory\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the chainstate load options\n+ */\n+void kernel_chainstate_load_options_destroy(kernel_ChainstateLoadOptions* chainstate_load_options);\n+\n+/**\n+ * @brief This function must be called to initialize the chainstate manager\n+ * before doing validation tasks or interacting with its indexes.\n+ *\n+ * @param[in] context                 Non-null.\n+ * @param[in] chainstate_load_options Non-null, created by kernel_chainstate_load_options_create.\n+ * @param[in] chainstate_manager      Non-null, will load the chainstate(s) and initialize indexes.\n+ * @return                            True on success, false on error.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_chainstate_manager_load_chainstate(\n+    const kernel_Context* context,\n+    kernel_ChainstateLoadOptions* chainstate_load_options,\n+    kernel_ChainstateManager* chainstate_manager\n+) BITCOINKERNEL_ARG_NONNULL(1, 2, 3);\n+\n+/**\n+ * @brief May be called after kernel_chainstate_manager_load_chainstate to\n+ * initialize the chainstate manager. Triggers the start of a reindex if the\n+ * option was previously set for the chainstate and block manager. Can also\n+ * import an array of existing block files selected by the user.\n+ *\n+ * @param[in] context              Non-null.\n+ * @param[in] chainstate_manager   Non-null.\n+ * @param[in] block_file_paths     Nullable, array of block files described by their full filesystem paths.\n+ * @param[in] block_file_paths_len Length of the block_file_paths array.\n+ * @return                         True if the import blocks call was completed successfully.\n+ */\n+bool kernel_import_blocks(const kernel_Context* context,\n+                          kernel_ChainstateManager* chainstate_manager,\n+                          const char** block_file_paths, size_t block_file_paths_len\n+) BITCOINKERNEL_ARG_NONNULL(1, 2);\n+\n+/**\n+ * @brief Process and validate the passed in block with the chainstate\n+ * manager. More detailed validation information in case of a failure can also\n+ * be retrieved through a registered validation interface. If the block fails\n+ * to validate the `block_checked` callback's 'BlockValidationState' will\n+ * contain details.\n+ *\n+ * @param[in] context            Non-null.\n+ * @param[in] chainstate_manager Non-null.\n+ * @param[in] block              Non-null, block to be validated.\n+ * @param[out] new_block         Nullable, will be set to true if this block was not processed before, and false otherwise.\n+ * @return                       True if processing the block was successful. Will also return true for valid, but duplicate blocks.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_chainstate_manager_process_block(\n+    const kernel_Context* context,\n+    kernel_ChainstateManager* chainstate_manager,\n+    kernel_Block* block,\n+    bool* new_block\n+) BITCOINKERNEL_ARG_NONNULL(1, 2, 3);\n+\n+/**\n+ * @brief Parse a serialized raw block into a new block object.\n+ *\n+ * @param[in] raw_block     Non-null, serialized block.\n+ * @param[in] raw_block_len Length of the serialized block.\n+ * @return                  The allocated block, or null on error.\n+ */\n+kernel_Block* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_block_create(\n+    const unsigned char* raw_block, size_t raw_block_len\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * @brief Calculate and return the hash of a block.\n+ *\n+ * @param[in] block Non-null.\n+ * @return    The block hash.\n+ */\n+kernel_BlockHash* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_block_get_hash(\n+    kernel_Block* block\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the block.\n+ */\n+void kernel_block_destroy(kernel_Block* block);\n+\n+/**\n+ * @brief Copies block data into the returned byte array.\n+ *\n+ * @param[in] block  Non-null.\n+ * @return           Allocated byte array holding the block data, or null on error.\n+ */\n+kernel_ByteArray* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_copy_block_data(\n+    kernel_Block* block\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * @brief Copies block data into the returned byte array.\n+ *\n+ * @param[in] block  Non-null.\n+ * @return           Allocated byte array holding the block data, or null on error.\n+ */\n+kernel_ByteArray* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_copy_block_pointer_data(\n+    const kernel_BlockPointer* block\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * @brief Calculate and return the hash of a block.\n+ *\n+ * @param[in] block Non-null.\n+ * @return    The block hash.\n+ */\n+kernel_BlockHash* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_block_pointer_get_hash(\n+    const kernel_BlockPointer* block\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * A helper function for destroying an existing byte array.\n+ */\n+void kernel_byte_array_destroy(kernel_ByteArray* byte_array);\n+\n+/**\n+ * Returns the validation mode from an opaque block validation state pointer.\n+ */\n+kernel_ValidationMode kernel_get_validation_mode_from_block_validation_state(\n+    const kernel_BlockValidationState* block_validation_state\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Returns the validation result from an opaque block validation state pointer.\n+ */\n+kernel_BlockValidationResult kernel_get_block_validation_result_from_block_validation_state(\n+    const kernel_BlockValidationState* block_validation_state\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * @brief Get the block index entry of the current chain tip. Once returned,\n+ * there is no guarantee that it remains in the active chain.\n+ *\n+ * @param[in] context            Non-null.\n+ * @param[in] chainstate_manager Non-null.\n+ * @return                       The block index of the current tip.\n+ */\n+kernel_BlockIndex* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_get_block_index_from_tip(\n+    const kernel_Context* context,\n+    kernel_ChainstateManager* chainstate_manager\n+) BITCOINKERNEL_ARG_NONNULL(1, 2);\n+\n+/**\n+ * @brief Get the block index entry of the genesis block.\n+ *\n+ * @param[in] context            Non-null.\n+ * @param[in] chainstate_manager Non-null.\n+ * @return                       The block index of the genesis block, or null on error.\n+ */\n+kernel_BlockIndex* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_get_block_index_from_genesis(\n+    const kernel_Context* context,\n+    kernel_ChainstateManager* chainstate_manager\n+) BITCOINKERNEL_ARG_NONNULL(1, 2);\n+\n+/**\n+ * @brief Retrieve a block index by its block hash.\n+ *\n+ * @param[in] context            Non-null.\n+ * @param[in] chainstate_manager Non-null.\n+ * @param[in] block_hash         Non-null.\n+ * @return                       The block index of the block with the passed in hash, or null on error.\n+ */\n+kernel_BlockIndex* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_get_block_index_by_hash(\n+    const kernel_Context* context,\n+    kernel_ChainstateManager* chainstate_manager,\n+    kernel_BlockHash* block_hash\n+) BITCOINKERNEL_ARG_NONNULL(1, 2, 3);\n+\n+/**\n+ * @brief Retrieve a block index by its height in the currently active chain.\n+ * Once retrieved there is no guarantee that it remains in the active chain.\n+ *\n+ * @param[in] context            Non-null.\n+ * @param[in] chainstate_manager Non-null.\n+ * @param[in] block_height       Height in the chain of the to be retrieved block index.\n+ * @return                       The block index at a certain height in the currently active chain, or null on error.\n+ */\n+kernel_BlockIndex* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_get_block_index_by_height(\n+    const kernel_Context* context,\n+    kernel_ChainstateManager* chainstate_manager,\n+    int block_height\n+) BITCOINKERNEL_ARG_NONNULL(1, 2);\n+\n+/**\n+ * @brief Return the next block index in the currently active chain, or null if\n+ * the current block index is the tip, or is not in the currently active\n+ * chain.\n+ *\n+ * @param[in] context            Non-null.\n+ * @param[in] block_index        Non-null.\n+ * @param[in] chainstate_manager Non-null.\n+ * @return                       The next block index in the currently active chain, or null on error.\n+ */\n+kernel_BlockIndex* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_get_next_block_index(\n+    const kernel_Context* context,\n+    kernel_BlockIndex* block_index,\n+    kernel_ChainstateManager* chainstate_manager",
      "path": "src/kernel/bitcoinkernel.h",
      "position": 1049,
      "original_position": 1048,
      "commit_id": "34a8429ff3a870c0caaf4c4790becd86c5acde38",
      "original_commit_id": "97fe2b25af31ca612c1f8d9f3de739fa3dee3902",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: for the other `block_index` getters, `chainstate_manager` is the second argument - would keep that consistent",
      "created_at": "2024-11-21T16:51:03Z",
      "updated_at": "2024-11-25T21:41:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1852510169",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1852510169"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1049,
      "original_line": 1049,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1852512769",
      "pull_request_review_id": 2448664774,
      "id": 1852512769,
      "node_id": "PRRC_kwDOABII585uaxoB",
      "diff_hunk": "@@ -0,0 +1,1190 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_KERNEL_BITCOINKERNEL_H\n+#define BITCOIN_KERNEL_BITCOINKERNEL_H\n+\n+#ifndef __cplusplus\n+#include <stdbool.h>\n+#include <stddef.h>\n+#include <stdint.h>\n+#else\n+#include <cstddef>\n+#include <cstdint>\n+#endif // __cplusplus\n+\n+\n+#if !defined(BITCOINKERNEL_GNUC_PREREQ)\n+#if defined(__GNUC__) && defined(__GNUC_MINOR__)\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) \\\n+    ((__GNUC__ << 16) + __GNUC_MINOR__ >= ((_maj) << 16) + (_min))\n+#else\n+#define BITCOINKERNEL_GNUC_PREREQ(_maj, _min) 0\n+#endif\n+#endif\n+\n+/* Warning attributes */\n+#if defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT __attribute__((__warn_unused_result__))\n+#else\n+#define BITCOINKERNEL_WARN_UNUSED_RESULT\n+#endif\n+#if !defined(BITCOINKERNEL_BUILD) && defined(__GNUC__) && BITCOINKERNEL_GNUC_PREREQ(3, 4)\n+#define BITCOINKERNEL_ARG_NONNULL(...) __attribute__((__nonnull__(__VA_ARGS__)))\n+#else\n+#define BITCOINKERNEL_ARG_NONNULL(_x)\n+#endif\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif // __cplusplus\n+\n+/**\n+ * ------ Context ------\n+ *\n+ * The library provides a built-in static constant kernel context. This static\n+ * context offers only limited functionality. It detects and self-checks the\n+ * correct sha256 implementation, initializes the random number generator and\n+ * self-checks the secp256k1 static context. It is used internally for\n+ * otherwise \"context-free\" operations. This means that the user is not\n+ * required to initialize their own context before using the library.\n+ *\n+ * The user should create their own context for passing it to state-rich validation\n+ * functions and holding callbacks for kernel events.\n+ *\n+ * ------ Error handling ------\n+ *\n+ * Functions communicate an error through their return types, usually returning\n+ * a nullptr, or false if an error is encountered. Additionally, verification\n+ * functions, e.g. for scripts, may communicate more detailed error information\n+ * through status code out parameters.\n+ *\n+ * Fine-grained validation information is communicated through the validation\n+ * interface.\n+ *\n+ * The kernel notifications issue callbacks for errors. These are usually\n+ * indicative of a system error. If such an error is issued, it is recommended\n+ * to halt and tear down the existing kernel objects. Remediating the error may\n+ * require system intervention by the user.\n+ *\n+ * ------ Pointer and argument conventions ------\n+ *\n+ * The user is responsible for de-allocating the memory owned by pointers\n+ * returned by functions. Typically pointers returned by *_create(...) functions\n+ * can be de-allocated by corresponding *_destroy(...) functions.\n+ *\n+ * A function that takes pointer arguments makes no assumptions on their\n+ * lifetime. Once the function returns the user can safely de-allocate the\n+ * passed in arguments.\n+ *\n+ * Pointers passed by callbacks are not owned by the user and are only valid for\n+ * the duration of the callback. They must not be de-allocated by the user.\n+ *\n+ * Array lengths follow the pointer argument they describe.\n+ */\n+\n+/**\n+ * Opaque data structure for holding a transaction.\n+ */\n+typedef struct kernel_Transaction kernel_Transaction;\n+\n+/**\n+ * Opaque data structure for holding a script pubkey.\n+ */\n+typedef struct kernel_ScriptPubkey kernel_ScriptPubkey;\n+\n+/**\n+ * Opaque data structure for holding a transaction output.\n+ */\n+typedef struct kernel_TransactionOutput kernel_TransactionOutput;\n+\n+/**\n+ * Opaque data structure for holding a logging connection.\n+ *\n+ * The logging connection can be used to manually stop logging.\n+ *\n+ * Messages that were logged before a connection is created are buffered in a\n+ * 1MB buffer. Logging can alternatively be permanently disabled by calling\n+ * kernel_disable_logging().\n+ */\n+typedef struct kernel_LoggingConnection kernel_LoggingConnection;\n+\n+/**\n+ * Opaque data structure for holding the chain parameters.\n+ *\n+ * These are eventually placed into a kernel context through the kernel context\n+ * options. The parameters describe the properties of a chain, and may be\n+ * instantiated for either mainnet, testnet, signet, or regtest.\n+ */\n+typedef struct kernel_ChainParameters kernel_ChainParameters;\n+\n+/**\n+ * Opaque data structure for holding callbacks for reacting to events that may\n+ * be encountered during library operations.\n+ */\n+typedef struct kernel_Notifications kernel_Notifications;\n+\n+/**\n+ * Opaque data structure for holding options for creating a new kernel context.\n+ *\n+ * Once a kernel context has been created from these options, they may be\n+ * destroyed. The options hold the notification callbacks as well as the\n+ * selected chain type until they are passed to the context. If no options are\n+ * configured, the context will be instantiated with no callbacks and for\n+ * mainnet. Their content and scope can be expanded over time.\n+ */\n+typedef struct kernel_ContextOptions kernel_ContextOptions;\n+\n+/**\n+ * Opaque data structure for holding a kernel context.\n+ *\n+ * The kernel context is used to initialize internal state and hold the chain\n+ * parameters and callbacks for handling error and validation events. Once other\n+ * validation objects are instantiated from it, the context needs to be kept in\n+ * memory for the duration of their lifetimes.\n+ *\n+ * The processing of validation events is done through an internal task\n+ * runner owned by the context. The task runner drives the execution of events\n+ * triggering validation interface callbacks. Multiple validation interfaces can\n+ * be registered with the context. The kernel will create an event for each of\n+ * the registered validation interfaces through the task runner.\n+ *\n+ * A constructed context can be safely used from multiple threads, but functions\n+ * taking it as a non-cost argument need exclusive access to it.\n+ */\n+typedef struct kernel_Context kernel_Context;\n+\n+/**\n+ * Opaque data structure for holding a block index pointer.\n+ *\n+ * This is a pointer to an element in the block index currently in memory of the\n+ * chainstate manager. It is valid for the lifetime of the chainstate manager it\n+ * was retrieved from.\n+ */\n+typedef struct kernel_BlockIndex kernel_BlockIndex;\n+\n+/**\n+ * Opaque data structure for holding options for creating a new chainstate\n+ * manager.\n+ *\n+ * The chainstate manager options are used to set some parameters for the\n+ * chainstate manager. For now it just holds default options.\n+ */\n+typedef struct kernel_ChainstateManagerOptions kernel_ChainstateManagerOptions;\n+\n+/**\n+ * Opaque data structure for holding options for creating a new chainstate\n+ * manager.\n+ *\n+ * The chainstate manager has an internal block manager that takes its own set\n+ * of parameters. It is initialized with default options.\n+ */\n+typedef struct kernel_BlockManagerOptions kernel_BlockManagerOptions;\n+\n+/**\n+ * Opaque data structure for holding a chainstate manager.\n+ *\n+ * The chainstate manager is the central object for doing validation tasks as\n+ * well as retrieving data from the chain. Internally it is a complex data\n+ * structure with diverse functionality.\n+ *\n+ * The chainstate manager is only valid for as long as the context with which it\n+ * was created remains in memory.\n+ *\n+ * Its functionality will be more and more exposed in the future.\n+ */\n+typedef struct kernel_ChainstateManager kernel_ChainstateManager;\n+\n+/**\n+ * Opaque data structure for holding parameters used for loading the chainstate\n+ * of a chainstate manager.\n+ *\n+ * Is initialized with default parameters.\n+ */\n+typedef struct kernel_ChainstateLoadOptions kernel_ChainstateLoadOptions;\n+\n+/**\n+ * Opaque data structure for holding a block.\n+ */\n+typedef struct kernel_Block kernel_Block;\n+\n+/**\n+ * Opaque data structure for holding a non-owned block. This is typically a\n+ * block available to the user through one of the validation callbacks.\n+ */\n+typedef struct kernel_BlockPointer kernel_BlockPointer;\n+\n+/**\n+ * Opaque data structure for holding the state of a block during validation.\n+ *\n+ * Contains information indicating whether validation was successful, and if not\n+ * which step during block validation failed.\n+ */\n+typedef struct kernel_BlockValidationState kernel_BlockValidationState;\n+\n+/**\n+ * Opaque data structure for holding a validation interface.\n+ *\n+ * The validation interface can be registered with the internal task runner of an\n+ * existing context. It holds callbacks that will be triggered by certain\n+ * validation events. The callbacks registered with it will block further\n+ * validation progress when triggered.\n+ */\n+typedef struct kernel_ValidationInterface kernel_ValidationInterface;\n+\n+/**\n+ * Opaque data structure for holding a block undo struct.\n+ *\n+ * It holds all the previous outputs consumed by all transactions in a specific\n+ * block. Internally it holds a nested vector. The top level vector has an entry\n+ * for each transaction in a block (in order of the actual transactions of the\n+ * block and minus the coinbase transaction). Each entry is in turn a vector of\n+ * all the previous outputs of a transaction (in order of their corresponding\n+ * inputs).\n+ */\n+typedef struct kernel_BlockUndo kernel_BlockUndo;\n+\n+/** Current sync state passed to tip changed callbacks. */\n+typedef enum {\n+    kernel_INIT_REINDEX,\n+    kernel_INIT_DOWNLOAD,\n+    kernel_POST_INIT\n+} kernel_SynchronizationState;\n+\n+/** Possible warning types issued by validation. */\n+typedef enum {\n+    kernel_UNKNOWN_NEW_RULES_ACTIVATED,\n+    kernel_LARGE_WORK_INVALID_CHAIN\n+} kernel_Warning;\n+\n+/** Callback function types */\n+\n+/**\n+ * Function signature for the global logging callback. All bitcoin kernel\n+ * internal logs will pass through this callback.\n+ */\n+typedef void (*kernel_LogCallback)(void* user_data, const char* message);\n+\n+/**\n+ * Function signatures for the kernel notifications.\n+ */\n+typedef void (*kernel_NotifyBlockTip)(void* user_data, kernel_SynchronizationState state, kernel_BlockIndex* index);\n+typedef void (*kernel_NotifyHeaderTip)(void* user_data, kernel_SynchronizationState state, int64_t height, int64_t timestamp, bool presync);\n+typedef void (*kernel_NotifyProgress)(void* user_data, const char* title, int progress_percent, bool resume_possible);\n+typedef void (*kernel_NotifyWarningSet)(void* user_data, kernel_Warning warning, const char* message);\n+typedef void (*kernel_NotifyWarningUnset)(void* user_data, kernel_Warning warning);\n+typedef void (*kernel_NotifyFlushError)(void* user_data, const char* message);\n+typedef void (*kernel_NotifyFatalError)(void* user_data, const char* message);\n+\n+/**\n+ * Function signatures for the validation interface.\n+ */\n+typedef void (*kernel_ValidationInterfaceBlockChecked)(void* user_data, const kernel_BlockPointer* block, const kernel_BlockValidationState* state);\n+\n+/**\n+ * Whether a validated data structure is valid, invalid, or an error was\n+ * encountered during processing.\n+ */\n+typedef enum {\n+    kernel_VALIDATION_STATE_VALID = 0,\n+    kernel_VALIDATION_STATE_INVALID,\n+    kernel_VALIDATION_STATE_ERROR,\n+} kernel_ValidationMode;\n+\n+/**\n+ * A granular \"reason\" why a block was invalid.\n+ */\n+typedef enum {\n+    kernel_BLOCK_RESULT_UNSET = 0, //!< initial value. Block has not yet been rejected\n+    kernel_BLOCK_CONSENSUS,        //!< invalid by consensus rules (excluding any below reasons)\n+    kernel_BLOCK_CACHED_INVALID,  //!< this block was cached as being invalid and we didn't store the reason why\n+    kernel_BLOCK_INVALID_HEADER,  //!< invalid proof of work or time too old\n+    kernel_BLOCK_MUTATED,         //!< the block's data didn't match the data committed to by the PoW\n+    kernel_BLOCK_MISSING_PREV,    //!< We don't have the previous block the checked one is built on\n+    kernel_BLOCK_INVALID_PREV,    //!< A block this one builds on is invalid\n+    kernel_BLOCK_TIME_FUTURE,     //!< block timestamp was > 2 hours in the future (or our clock is bad)\n+    kernel_BLOCK_CHECKPOINT,      //!< the block failed to meet one of our checkpoints\n+    kernel_BLOCK_HEADER_LOW_WORK, //!< the block header may be on a too-little-work chain\n+} kernel_BlockValidationResult;\n+\n+/**\n+ * Holds the validation interface callbacks. The user data pointer may be used\n+ * to point to user-defined structures to make processing the validation\n+ * callbacks easier.\n+ */\n+typedef struct {\n+    void* user_data;                                      //!< Holds a user-defined opaque structure that is passed to the validation\n+                                                          //!< interface callbacks.\n+    kernel_ValidationInterfaceBlockChecked block_checked; //!< Called when a new block has been checked. Contains the\n+                                                          //!< result of its validation.\n+} kernel_ValidationInterfaceCallbacks;\n+\n+/**\n+ * A struct for holding the kernel notification callbacks. The user data\n+ * pointer may be used to point to user-defined structures to make processing\n+ * the notifications easier. Note that this makes it the user's responsibility\n+ * to ensure that the user_data outlives the kernel objects. Notifications can\n+ * occur even as kernel objects are deleted, so care has to be taken to ensure\n+ * safe unwinding.\n+ */\n+typedef struct {\n+    void* user_data;                         //!< Holds a user-defined opaque structure that is passed to the notification callbacks.\n+    kernel_NotifyBlockTip block_tip;         //!< The chain's tip was updated to the provided block index.\n+    kernel_NotifyHeaderTip header_tip;       //!< A new best block header was added.\n+    kernel_NotifyProgress progress;          //!< Reports on current block synchronization progress.\n+    kernel_NotifyWarningSet warning_set;     //!< A warning issued by the kernel library during validation.\n+    kernel_NotifyWarningUnset warning_unset; //!< A previous condition leading to the issuance of a warning is no longer given.\n+    kernel_NotifyFlushError flush_error;     //!< An error encountered when flushing data to disk.\n+    kernel_NotifyFatalError fatal_error;     //!< A un-recoverable system error encountered by the library.\n+} kernel_NotificationInterfaceCallbacks;\n+\n+/**\n+ * A collection of logging categories that may be encountered by kernel code.\n+ */\n+typedef enum {\n+    kernel_LOG_ALL = 0,\n+    kernel_LOG_BENCH,\n+    kernel_LOG_BLOCKSTORAGE,\n+    kernel_LOG_COINDB,\n+    kernel_LOG_LEVELDB,\n+    kernel_LOG_LOCK,\n+    kernel_LOG_MEMPOOL,\n+    kernel_LOG_PRUNE,\n+    kernel_LOG_RAND,\n+    kernel_LOG_REINDEX,\n+    kernel_LOG_VALIDATION,\n+    kernel_LOG_KERNEL,\n+} kernel_LogCategory;\n+\n+/**\n+ * The level at which logs should be produced.\n+ */\n+typedef enum {\n+    kernel_LOG_INFO = 0,\n+    kernel_LOG_DEBUG,\n+    kernel_LOG_TRACE,\n+} kernel_LogLevel;\n+\n+/**\n+ * Options controlling the format of log messages.\n+ */\n+typedef struct {\n+    bool log_timestamps;               //!< Prepend a timestamp to log messages.\n+    bool log_time_micros;              //!< Log timestamps in microsecond precision.\n+    bool log_threadnames;              //!< Prepend the name of the thread to log messages.\n+    bool log_sourcelocations;          //!< Prepend the source location to log messages.\n+    bool always_print_category_levels; //!< Prepend the log category and level to log messages.\n+} kernel_LoggingOptions;\n+\n+/**\n+ * A collection of status codes that may be issued by the script verify function.\n+ */\n+typedef enum {\n+    kernel_SCRIPT_VERIFY_OK = 0,\n+    kernel_SCRIPT_VERIFY_ERROR_TX_INPUT_INDEX, //!< The provided input index is out of range of the actual number of inputs of the transaction.\n+    kernel_SCRIPT_VERIFY_ERROR_INVALID_FLAGS, //!< The provided bitfield for the flags was invalid.\n+    kernel_SCRIPT_VERIFY_ERROR_INVALID_FLAGS_COMBINATION, //!< The flags very combined in an invalid way.\n+    kernel_SCRIPT_VERIFY_ERROR_SPENT_OUTPUTS_REQUIRED, //!< The taproot flag was set, so valid spent_outputs have to be provided.\n+    kernel_SCRIPT_VERIFY_ERROR_SPENT_OUTPUTS_MISMATCH, //!< The number of spent outputs does not match the number of inputs of the tx.\n+} kernel_ScriptVerifyStatus;\n+\n+/**\n+ * Script verification flags that may be composed with each other.\n+ */\n+typedef enum\n+{\n+    kernel_SCRIPT_FLAGS_VERIFY_NONE                = 0,\n+    kernel_SCRIPT_FLAGS_VERIFY_P2SH                = (1U << 0), //!< evaluate P2SH (BIP16) subscripts\n+    kernel_SCRIPT_FLAGS_VERIFY_DERSIG              = (1U << 2), //!< enforce strict DER (BIP66) compliance\n+    kernel_SCRIPT_FLAGS_VERIFY_NULLDUMMY           = (1U << 4), //!< enforce NULLDUMMY (BIP147)\n+    kernel_SCRIPT_FLAGS_VERIFY_CHECKLOCKTIMEVERIFY = (1U << 9), //!< enable CHECKLOCKTIMEVERIFY (BIP65)\n+    kernel_SCRIPT_FLAGS_VERIFY_CHECKSEQUENCEVERIFY = (1U << 10), //!< enable CHECKSEQUENCEVERIFY (BIP112)\n+    kernel_SCRIPT_FLAGS_VERIFY_WITNESS             = (1U << 11), //!< enable WITNESS (BIP141)\n+\n+    kernel_SCRIPT_FLAGS_VERIFY_TAPROOT             = (1U << 17), //!< enable TAPROOT (BIPs 341 & 342)\n+    kernel_SCRIPT_FLAGS_VERIFY_ALL                 = kernel_SCRIPT_FLAGS_VERIFY_P2SH |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_DERSIG |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_NULLDUMMY |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_CHECKLOCKTIMEVERIFY |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_CHECKSEQUENCEVERIFY |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_WITNESS |\n+                                                     kernel_SCRIPT_FLAGS_VERIFY_TAPROOT\n+} kernel_ScriptFlags;\n+\n+/**\n+ * Chain type used for creating chain params.\n+ */\n+typedef enum {\n+    kernel_CHAIN_TYPE_MAINNET = 0,\n+    kernel_CHAIN_TYPE_TESTNET,\n+    kernel_CHAIN_TYPE_TESTNET_4,\n+    kernel_CHAIN_TYPE_SIGNET,\n+    kernel_CHAIN_TYPE_REGTEST,\n+} kernel_ChainType;\n+\n+/**\n+ * A type-safe block identifier.\n+ */\n+typedef struct {\n+    unsigned char hash[32];\n+} kernel_BlockHash;\n+\n+/**\n+ * Convenience struct for holding serialized data.\n+ */\n+typedef struct {\n+    unsigned char* data;\n+    size_t size;\n+} kernel_ByteArray;\n+\n+/**\n+ * @brief Create a new transaction from the serialized data.\n+ *\n+ * @param[in] raw_transaction     Non-null.\n+ * @param[in] raw_transaction_len Length of the serialized transaction.\n+ * @return                        The transaction, or null on error.\n+ */\n+kernel_Transaction* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_transaction_create(\n+    const unsigned char* raw_transaction, size_t raw_transaction_len\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the transaction.\n+ */\n+void kernel_transaction_destroy(kernel_Transaction* transaction);\n+\n+/**\n+ * @brief Create a script pubkey from serialized data.\n+ * @param[in] script_pubkey     Non-null.\n+ * @param[in] script_pubkey_len Length of the script pubkey data.\n+ * @return                      The script pubkey, or null on error.\n+ */\n+kernel_ScriptPubkey* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_script_pubkey_create(\n+    const unsigned char* script_pubkey, size_t script_pubkey_len\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * @brief Copies the script pubkey data into the returned byte array.\n+ * @param[in] script_pubkey Non-null.\n+ * @return                  The serialized script pubkey data.\n+ */\n+kernel_ByteArray* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_copy_script_pubkey_data(\n+        const kernel_ScriptPubkey* script_pubkey\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the script pubkey.\n+ */\n+void kernel_script_pubkey_destroy(kernel_ScriptPubkey* script_pubkey);\n+\n+/**\n+ * @brief Create a transaction output from a script pubkey and an amount.\n+ * @param[in] script_pubkey Non-null.\n+ * @param[in] amount        The amount associated with the script pubkey for this output.\n+ * @return                  The transaction output.\n+ */\n+kernel_TransactionOutput* kernel_transaction_output_create(\n+    kernel_ScriptPubkey* script_pubkey,\n+    int64_t amount\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the transaction output.\n+ */\n+void kernel_transaction_output_destroy(kernel_TransactionOutput* transaction_output);\n+\n+/**\n+ * @brief Verify if the input at input_index of tx_to spends the script pubkey\n+ * under the constraints specified by flags. If the\n+ * `kernel_SCRIPT_FLAGS_VERIFY_WITNESS` flag is set in the flags bitfield, the\n+ * amount parameter is used. If the taproot flag is set, the spent outputs\n+ * parameter is used to validate taproot transactions.\n+ *\n+ * @param[in] script_pubkey     Non-null, script pubkey to be spent.\n+ * @param[in] amount            Amount of the script pubkey's associated output. May be zero if\n+ *                              the witness flag is not set.\n+ * @param[in] tx_to             Non-null, transaction spending the script_pubkey.\n+ * @param[in] spent_outputs     Nullable if the taproot flag is not set. Points to an array of\n+ *                              outputs spent by the transaction.\n+ * @param[in] spent_outputs_len Length of the spent_outputs array.\n+ * @param[in] input_index       Index of the input in tx_to spending the script_pubkey.\n+ * @param[in] flags             Bitfield of kernel_ScriptFlags controlling validation constraints.\n+ * @param[out] status           Nullable, will be set to an error code if the operation fails.\n+ *                              Should be set to kernel_SCRIPT_VERIFY_OK.\n+ * @return                      True if the script is valid.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_verify_script(\n+    const kernel_ScriptPubkey* script_pubkey,\n+    int64_t amount,\n+    const kernel_Transaction* tx_to,\n+    const kernel_TransactionOutput** spent_outputs, size_t spent_outputs_len,\n+    unsigned int input_index,\n+    unsigned int flags,\n+    kernel_ScriptVerifyStatus* status\n+) BITCOINKERNEL_ARG_NONNULL(1, 3);\n+\n+/**\n+ * @brief This disables the global internal logger. No log messages will be\n+ * buffered internally anymore once this is called and the buffer is cleared.\n+ * This function should only be called once. Log messages will be buffered until\n+ * this function is called, or a logging connection is created.\n+ */\n+void kernel_disable_logging();\n+\n+/**\n+ * @brief Set the log level of the global internal logger. This does not enable\n+ * the selected categories. Use `kernel_enable_log_category` to start logging\n+ * from a specific, or all categories.\n+ *\n+ * @param[in] category If kernel_LOG_ALL is chosen, all messages at the specified level\n+ *                     will be logged. Otherwise only messages from the specified category\n+ *                     will be logged at the specified level and above.\n+ * @param[in] level    Log level at which the log category is set.\n+ * @return             True on success.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_add_log_level_category(const kernel_LogCategory category, kernel_LogLevel level);\n+\n+/**\n+ * @brief Enable a specific log category for the global internal logger.\n+ *\n+ * @param[in] category If kernel_LOG_ALL is chosen, all categories will be enabled.\n+ * @return             True on success.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_enable_log_category(const kernel_LogCategory category);\n+\n+/**\n+ * Disable a specific log category for the global internal logger.\n+ *\n+ * @param[in] category If kernel_LOG_ALL is chosen, all categories will be disabled.\n+ * @return             True on success.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_disable_log_category(const kernel_LogCategory category);\n+\n+/**\n+ * @brief Start logging messages through the provided callback. Log messages\n+ * produced before this function is first called are buffered and on calling this\n+ * function are logged immediately.\n+ *\n+ * @param[in] callback  Non-null, function through which messages will be logged.\n+ * @param[in] user_data Nullable, holds a user-defined opaque structure. Is passed back\n+ *                      to the user through the callback.\n+ * @param[in] options   Sets formatting options of the log messages.\n+ * @return              A new kernel logging connection, or null on error.\n+ */\n+kernel_LoggingConnection* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_logging_connection_create(\n+    kernel_LogCallback callback,\n+    void* user_data,\n+    const kernel_LoggingOptions options\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Stop logging and destroy the logging connection.\n+ */\n+void kernel_logging_connection_destroy(kernel_LoggingConnection* logging_connection);\n+\n+/**\n+ * @brief Creates a chain parameters struct with default parameters based on the\n+ * passed in chain type.\n+ *\n+ * @param[in] chain_type Controls the chain parameters type created.\n+ * @return               An allocated chain parameters opaque struct.\n+ */\n+const kernel_ChainParameters* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_chain_parameters_create(\n+    const kernel_ChainType chain_type);\n+\n+/**\n+ * Destroy the chain parameters.\n+ */\n+void kernel_chain_parameters_destroy(const kernel_ChainParameters* chain_parameters);\n+\n+/**\n+ * @brief Creates an object for holding the kernel notification callbacks.\n+ *\n+ * @param[in] callbacks Holds the callbacks that will be invoked by the kernel notifications.\n+ */\n+kernel_Notifications* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_notifications_create(\n+    kernel_NotificationInterfaceCallbacks callbacks);\n+\n+/**\n+ * Destroy the kernel notifications.\n+ */\n+void kernel_notifications_destroy(const kernel_Notifications* notifications);\n+\n+/**\n+ * Creates an empty context options.\n+ */\n+kernel_ContextOptions* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_context_options_create();\n+\n+/**\n+ * @brief Sets the chain params for the context options. The context created\n+ * with the options will be configured for these chain parameters.\n+ *\n+ * @param[in] context_options  Non-null, previously created with kernel_context_options_create.\n+ * @param[in] chain_parameters Is set to the context options.\n+ */\n+void kernel_context_options_set_chainparams(\n+    kernel_ContextOptions* context_options,\n+    const kernel_ChainParameters* chain_parameters\n+) BITCOINKERNEL_ARG_NONNULL(1, 2);\n+\n+/**\n+ * @brief Set the kernel notifications for the context options. The context\n+ * created with the options will be configured with these notifications.\n+ *\n+ * @param[in] context_options Non-null, previously created with kernel_context_options_create.\n+ * @param[in] notifications   Is set to the context options.\n+ */\n+void kernel_context_options_set_notifications(\n+    kernel_ContextOptions* context_options,\n+    const kernel_Notifications* notifications\n+) BITCOINKERNEL_ARG_NONNULL(1, 2);\n+\n+/**\n+ * Destroy the context options.\n+ */\n+void kernel_context_options_destroy(kernel_ContextOptions* context_options);\n+\n+/**\n+ * @brief Create a new kernel context. If the options have not been previously\n+ * set, their corresponding fields will be initialized to default values; the\n+ * context will assume mainnet chain parameters and won't attempt to call the\n+ * kernel notification callbacks.\n+ *\n+ * @param[in] context_options Nullable, created with kernel_context_options_create.\n+ * @return                    The allocated kernel context, or null on error.\n+ */\n+kernel_Context* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_context_create(\n+    const kernel_ContextOptions* context_options);\n+\n+/**\n+ * @brief Interrupt can be used to halt long-running validation functions like\n+ * when reindexing, importing or processing blocks.\n+ *\n+ * @param[in] context  Non-null.\n+ * @return             True if the interrupt was successful.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_context_interrupt(\n+    kernel_Context* context\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the context.\n+ */\n+void kernel_context_destroy(kernel_Context* context);\n+\n+/**\n+ * @brief Create options for the chainstate manager.\n+ *\n+ * @param[in] context        Non-null, the created options will associate with this kernel context\n+ *                           for the duration of their lifetime. The same context needs to be used\n+ *                           when instantiating the chainstate manager.\n+ * @param[in] data_directory Non-null, directory containing the chainstate data. If the directory\n+ *                           does not exist yet, it will be created.\n+ * @return                   The allocated chainstate manager options, or null on error.\n+ */\n+kernel_ChainstateManagerOptions* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_chainstate_manager_options_create(\n+    const kernel_Context* context,\n+    const char* data_directory\n+) BITCOINKERNEL_ARG_NONNULL(1, 2);\n+\n+/**\n+ * Destroy the chainstate manager options.\n+ */\n+void kernel_chainstate_manager_options_destroy(kernel_ChainstateManagerOptions* chainstate_manager_options);\n+\n+/**\n+ * @brief Create options for the block manager. The block manager is used\n+ * internally by the chainstate manager for block storage and indexing.\n+ *\n+ * @param[in] context          Non-null, the created options will associate with this kernel context\n+ *                             for the duration of their lifetime. The same context needs to be used\n+ *                             when instantiating the chainstate manager.\n+ * @param[in] blocks_directory Non-null, directory containing the block data. If the directory does\n+ *                             not exist yet, it will be created.\n+ * @return                     The allocated block manager options, or null on error.\n+ */\n+kernel_BlockManagerOptions* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_block_manager_options_create(\n+    const kernel_Context* context,\n+    const char* blocks_directory\n+) BITCOINKERNEL_ARG_NONNULL(1, 2);\n+\n+/**\n+ * @brief Set the number of available worker threads used during validation.\n+ *\n+ * @param[in] chainstate_manager_options Non-null, options to be set.\n+ * @param[in] worker_threads The number of worker threads that should be spawned in the thread pool\n+ *                           used for validation. The number should be greater than 0.\n+ */\n+void kernel_chainstate_manager_options_set_worker_threads_num(\n+        kernel_ChainstateManagerOptions* chainstate_manager_options,\n+        int worker_threads\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the block manager options.\n+ */\n+void kernel_block_manager_options_destroy(kernel_BlockManagerOptions* block_manager_options);\n+\n+/**\n+ * @brief Create a chainstate manager. This is the main object for many\n+ * validation tasks as well as for retrieving data from the chain. It is only\n+ * valid for as long as the passed in context also remains in memory.\n+ *\n+ * @param[in] chainstate_manager_options Non-null, created by kernel_chainstate_manager_options_create.\n+ * @param[in] block_manager_options      Non-null, created by kernel_block_manager_options_create.\n+ * @param[in] context                    Non-null, the created chainstate manager will associate with this\n+ *                                       kernel context for the duration of its lifetime. The same context\n+ *                                       needs to be used for later interactions with the chainstate manager.\n+ * @return                               The allocated chainstate manager, or null on error.\n+ */\n+kernel_ChainstateManager* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_chainstate_manager_create(\n+    const kernel_Context* context,\n+    kernel_ChainstateManagerOptions* chainstate_manager_options,\n+    kernel_BlockManagerOptions* block_manager_options\n+) BITCOINKERNEL_ARG_NONNULL(1, 2, 3);\n+\n+/**\n+ * Destroy the chainstate manager.\n+ */\n+void kernel_chainstate_manager_destroy(kernel_ChainstateManager* chainstate_manager, const kernel_Context* context);\n+\n+/**\n+ * @brief Creates a new validation interface for consuming events issued by the\n+ * chainstate manager. The interface should be created and registered before the\n+ * chainstate manager is created to avoid missing validation events.\n+ *\n+ * @param[in] validation_interface_callbacks The callbacks used for passing validation information to the\n+ *                                           user.\n+ * @return                                   A validation interface. This should remain in memory for as\n+ *                                           long as the user expects to receive validation events.\n+ */\n+kernel_ValidationInterface* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_validation_interface_create(\n+    kernel_ValidationInterfaceCallbacks validation_interface_callbacks);\n+\n+/**\n+ * @brief Register a validation interface with the internal task runner\n+ * associated with this context. This also registers it with the chainstate\n+ * manager if the chainstate manager is subsequently created with this context.\n+ *\n+ * @param[in] context              Non-null, will register the validation interface with this context.\n+ * @param[in] validation_interface Non-null.\n+ * @return                         True on success.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_validation_interface_register(\n+    kernel_Context* context,\n+    kernel_ValidationInterface* validation_interface\n+) BITCOINKERNEL_ARG_NONNULL(1, 2);\n+\n+/**\n+ * @brief Unregister a validation interface from the internal task runner\n+ * associated with this context. This should be done before destroying the\n+ * kernel context it was previously registered with.\n+ *\n+ * @param[in] context              Non-null, will deregister the validation interface from this context.\n+ * @param[in] validation_interface Non-null.\n+ * @return                         True on success.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_validation_interface_unregister(\n+    kernel_Context* context,\n+    kernel_ValidationInterface* validation_interface\n+) BITCOINKERNEL_ARG_NONNULL(1, 2);\n+\n+/**\n+ * Destroy the validation interface. This should be done after unregistering it\n+ * if the validation interface was previously registered with a chainstate\n+ * manager.\n+ */\n+void kernel_validation_interface_destroy(kernel_ValidationInterface* validation_interface);\n+\n+/**\n+ * Create options for loading the chainstate.\n+ */\n+kernel_ChainstateLoadOptions* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_chainstate_load_options_create();\n+\n+/**\n+ * @brief Sets wipe block tree db in the chainstate load options.\n+ *\n+ * @param[in] chainstate_load_options Non-null, created with kernel_chainstate_load_options_create.\n+ * @param[in] wipe_block_tree_db      Set wipe block tree db.\n+ */\n+void kernel_chainstate_load_options_set_wipe_block_tree_db(\n+    kernel_ChainstateLoadOptions* chainstate_load_options,\n+    bool wipe_block_tree_db\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * @brief Sets wipe chainstate db in the chainstate load options.\n+ *\n+ * @param[in] chainstate_load_options Non-null, created with kernel_chainstate_load_options_create.\n+ * @param[in] wipe_chainstate_db      Set wipe chainstate db.\n+ */\n+void kernel_chainstate_load_options_set_wipe_chainstate_db(\n+    kernel_ChainstateLoadOptions* chainstate_load_options,\n+    bool wipe_chainstate_db\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * @brief Sets block tree db in memory in the chainstate load options.\n+ *\n+ * @param[in] chainstate_load_options Non-null, created with kernel_chainstate_load_options_create.\n+ * @param[in] block_tree_db_in_memory Set block tree db in memory.\n+ */\n+void kernel_chainstate_load_options_set_block_tree_db_in_memory(\n+    kernel_ChainstateLoadOptions* chainstate_load_options,\n+    bool block_tree_db_in_memory\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * @brief Sets chainstate db in memory in the chainstate load options.\n+ *\n+ * @param[in] chainstate_load_options Non-null, created with kernel_chainstate_load_options_create.\n+ * @param[in] chainstate_db_in_memory Set chainstate db in memory.\n+ */\n+void kernel_chainstate_load_options_set_chainstate_db_in_memory(\n+    kernel_ChainstateLoadOptions* chainstate_load_options,\n+    bool chainstate_db_in_memory\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the chainstate load options\n+ */\n+void kernel_chainstate_load_options_destroy(kernel_ChainstateLoadOptions* chainstate_load_options);\n+\n+/**\n+ * @brief This function must be called to initialize the chainstate manager\n+ * before doing validation tasks or interacting with its indexes.\n+ *\n+ * @param[in] context                 Non-null.\n+ * @param[in] chainstate_load_options Non-null, created by kernel_chainstate_load_options_create.\n+ * @param[in] chainstate_manager      Non-null, will load the chainstate(s) and initialize indexes.\n+ * @return                            True on success, false on error.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_chainstate_manager_load_chainstate(\n+    const kernel_Context* context,\n+    kernel_ChainstateLoadOptions* chainstate_load_options,\n+    kernel_ChainstateManager* chainstate_manager\n+) BITCOINKERNEL_ARG_NONNULL(1, 2, 3);\n+\n+/**\n+ * @brief May be called after kernel_chainstate_manager_load_chainstate to\n+ * initialize the chainstate manager. Triggers the start of a reindex if the\n+ * option was previously set for the chainstate and block manager. Can also\n+ * import an array of existing block files selected by the user.\n+ *\n+ * @param[in] context              Non-null.\n+ * @param[in] chainstate_manager   Non-null.\n+ * @param[in] block_file_paths     Nullable, array of block files described by their full filesystem paths.\n+ * @param[in] block_file_paths_len Length of the block_file_paths array.\n+ * @return                         True if the import blocks call was completed successfully.\n+ */\n+bool kernel_import_blocks(const kernel_Context* context,\n+                          kernel_ChainstateManager* chainstate_manager,\n+                          const char** block_file_paths, size_t block_file_paths_len\n+) BITCOINKERNEL_ARG_NONNULL(1, 2);\n+\n+/**\n+ * @brief Process and validate the passed in block with the chainstate\n+ * manager. More detailed validation information in case of a failure can also\n+ * be retrieved through a registered validation interface. If the block fails\n+ * to validate the `block_checked` callback's 'BlockValidationState' will\n+ * contain details.\n+ *\n+ * @param[in] context            Non-null.\n+ * @param[in] chainstate_manager Non-null.\n+ * @param[in] block              Non-null, block to be validated.\n+ * @param[out] new_block         Nullable, will be set to true if this block was not processed before, and false otherwise.\n+ * @return                       True if processing the block was successful. Will also return true for valid, but duplicate blocks.\n+ */\n+bool BITCOINKERNEL_WARN_UNUSED_RESULT kernel_chainstate_manager_process_block(\n+    const kernel_Context* context,\n+    kernel_ChainstateManager* chainstate_manager,\n+    kernel_Block* block,\n+    bool* new_block\n+) BITCOINKERNEL_ARG_NONNULL(1, 2, 3);\n+\n+/**\n+ * @brief Parse a serialized raw block into a new block object.\n+ *\n+ * @param[in] raw_block     Non-null, serialized block.\n+ * @param[in] raw_block_len Length of the serialized block.\n+ * @return                  The allocated block, or null on error.\n+ */\n+kernel_Block* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_block_create(\n+    const unsigned char* raw_block, size_t raw_block_len\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * @brief Calculate and return the hash of a block.\n+ *\n+ * @param[in] block Non-null.\n+ * @return    The block hash.\n+ */\n+kernel_BlockHash* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_block_get_hash(\n+    kernel_Block* block\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Destroy the block.\n+ */\n+void kernel_block_destroy(kernel_Block* block);\n+\n+/**\n+ * @brief Copies block data into the returned byte array.\n+ *\n+ * @param[in] block  Non-null.\n+ * @return           Allocated byte array holding the block data, or null on error.\n+ */\n+kernel_ByteArray* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_copy_block_data(\n+    kernel_Block* block\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * @brief Copies block data into the returned byte array.\n+ *\n+ * @param[in] block  Non-null.\n+ * @return           Allocated byte array holding the block data, or null on error.\n+ */\n+kernel_ByteArray* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_copy_block_pointer_data(\n+    const kernel_BlockPointer* block\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * @brief Calculate and return the hash of a block.\n+ *\n+ * @param[in] block Non-null.\n+ * @return    The block hash.\n+ */\n+kernel_BlockHash* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_block_pointer_get_hash(\n+    const kernel_BlockPointer* block\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * A helper function for destroying an existing byte array.\n+ */\n+void kernel_byte_array_destroy(kernel_ByteArray* byte_array);\n+\n+/**\n+ * Returns the validation mode from an opaque block validation state pointer.\n+ */\n+kernel_ValidationMode kernel_get_validation_mode_from_block_validation_state(\n+    const kernel_BlockValidationState* block_validation_state\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * Returns the validation result from an opaque block validation state pointer.\n+ */\n+kernel_BlockValidationResult kernel_get_block_validation_result_from_block_validation_state(\n+    const kernel_BlockValidationState* block_validation_state\n+) BITCOINKERNEL_ARG_NONNULL(1);\n+\n+/**\n+ * @brief Get the block index entry of the current chain tip. Once returned,\n+ * there is no guarantee that it remains in the active chain.\n+ *\n+ * @param[in] context            Non-null.\n+ * @param[in] chainstate_manager Non-null.\n+ * @return                       The block index of the current tip.\n+ */\n+kernel_BlockIndex* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_get_block_index_from_tip(\n+    const kernel_Context* context,\n+    kernel_ChainstateManager* chainstate_manager\n+) BITCOINKERNEL_ARG_NONNULL(1, 2);\n+\n+/**\n+ * @brief Get the block index entry of the genesis block.\n+ *\n+ * @param[in] context            Non-null.\n+ * @param[in] chainstate_manager Non-null.\n+ * @return                       The block index of the genesis block, or null on error.\n+ */\n+kernel_BlockIndex* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_get_block_index_from_genesis(\n+    const kernel_Context* context,\n+    kernel_ChainstateManager* chainstate_manager\n+) BITCOINKERNEL_ARG_NONNULL(1, 2);\n+\n+/**\n+ * @brief Retrieve a block index by its block hash.\n+ *\n+ * @param[in] context            Non-null.\n+ * @param[in] chainstate_manager Non-null.\n+ * @param[in] block_hash         Non-null.\n+ * @return                       The block index of the block with the passed in hash, or null on error.\n+ */\n+kernel_BlockIndex* BITCOINKERNEL_WARN_UNUSED_RESULT kernel_get_block_index_by_hash(",
      "path": "src/kernel/bitcoinkernel.h",
      "position": 1015,
      "original_position": 1014,
      "commit_id": "34a8429ff3a870c0caaf4c4790becd86c5acde38",
      "original_commit_id": "97fe2b25af31ca612c1f8d9f3de739fa3dee3902",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: `from/by` naming inconsistency, I think my preference would lie with `from` (i.e. update to `kernel_get_block_index_from_hash` and `kernel_get_block_index_from_height`)\r\n\r\n(_technically_, could update `kernel_get_next_block_index` -> `kernel_get_block_index_from_previous` and `kernel_get_previous_block_index` -> `kernel_get_block_index_from_next`, but... `from_next` sounds weird?)",
      "created_at": "2024-11-21T16:52:39Z",
      "updated_at": "2024-11-25T21:41:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1852512769",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1852512769"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1015,
      "original_line": 1015,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1857036990",
      "pull_request_review_id": 2448664774,
      "id": 1857036990,
      "node_id": "PRRC_kwDOABII585usCK-",
      "diff_hunk": "@@ -1,10 +1,1217 @@\n-// Copyright (c) 2022 The Bitcoin Core developers\n+// Copyright (c) 2022-present The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <kernel/bitcoinkernel.h>\n+\n+#include <chain.h>\n+#include <coins.h>\n+#include <consensus/amount.h>\n+#include <consensus/validation.h>\n+#include <kernel/chainparams.h>\n+#include <kernel/checks.h>\n+#include <kernel/context.h>\n+#include <kernel/notifications_interface.h>\n+#include <kernel/warning.h>\n+#include <logging.h>\n+#include <node/blockstorage.h>\n+#include <node/caches.h>\n+#include <node/chainstate.h>\n+#include <primitives/block.h>\n+#include <primitives/transaction.h>\n+#include <script/interpreter.h>\n+#include <script/script.h>\n+#include <serialize.h>\n+#include <streams.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <uint256.h>\n+#include <undo.h>\n+#include <util/fs.h>\n+#include <util/result.h>\n+#include <util/signalinterrupt.h>\n+#include <util/task_runner.h>\n+#include <util/translation.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+#include <cassert>\n+#include <cstddef>\n+#include <cstring>\n+#include <exception>\n #include <functional>\n+#include <list>\n+#include <memory>\n+#include <span>\n #include <string>\n+#include <tuple>\n+#include <utility>\n+#include <vector>\n+\n+using util::ImmediateTaskRunner;\n \n // Define G_TRANSLATION_FUN symbol in libbitcoinkernel library so users of the\n // library aren't required to export this symbol\n-extern const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+extern const std::function<std::string(const char*)> G_TRANSLATION_FUN{nullptr};\n+\n+static const kernel::Context kernel_context_static{};\n+\n+namespace {\n+\n+/** Check that all specified flags are part of the libbitcoinkernel interface. */\n+bool verify_flags(unsigned int flags)\n+{\n+    return (flags & ~(kernel_SCRIPT_FLAGS_VERIFY_ALL)) == 0;\n+}\n+\n+bool is_valid_flag_combination(unsigned int flags)\n+{\n+    if (flags & SCRIPT_VERIFY_CLEANSTACK && ~flags & (SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS)) return false;\n+    if (flags & SCRIPT_VERIFY_WITNESS && ~flags & SCRIPT_VERIFY_P2SH) return false;\n+    return true;\n+}\n+\n+std::string log_level_to_string(const kernel_LogLevel level)\n+{\n+    switch (level) {\n+    case kernel_LogLevel::kernel_LOG_INFO: {\n+        return \"info\";\n+    }\n+    case kernel_LogLevel::kernel_LOG_DEBUG: {\n+        return \"debug\";\n+    }\n+    case kernel_LogLevel::kernel_LOG_TRACE: {\n+        return \"trace\";\n+    }\n+    } // no default case, so the compiler can warn about missing cases\n+    assert(false);\n+}\n+\n+std::string log_category_to_string(const kernel_LogCategory category)\n+{\n+    switch (category) {\n+    case kernel_LogCategory::kernel_LOG_BENCH: {\n+        return \"bench\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_BLOCKSTORAGE: {\n+        return \"blockstorage\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_COINDB: {\n+        return \"coindb\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_LEVELDB: {\n+        return \"leveldb\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_LOCK: {\n+        return \"lock\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_MEMPOOL: {\n+        return \"mempool\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_PRUNE: {\n+        return \"prune\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_RAND: {\n+        return \"rand\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_REINDEX: {\n+        return \"reindex\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_VALIDATION: {\n+        return \"validation\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_KERNEL: {\n+        return \"kernel\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_ALL: {\n+        return \"all\";\n+    }\n+    } // no default case, so the compiler can warn about missing cases\n+    assert(false);\n+}\n+\n+kernel_SynchronizationState cast_state(SynchronizationState state)\n+{\n+    switch (state) {\n+    case SynchronizationState::INIT_REINDEX:\n+        return kernel_SynchronizationState::kernel_INIT_REINDEX;\n+    case SynchronizationState::INIT_DOWNLOAD:\n+        return kernel_SynchronizationState::kernel_INIT_DOWNLOAD;\n+    case SynchronizationState::POST_INIT:\n+        return kernel_SynchronizationState::kernel_POST_INIT;\n+    } // no default case, so the compiler can warn about missing cases\n+    assert(false);\n+}\n+\n+kernel_Warning cast_kernel_warning(kernel::Warning warning)\n+{\n+    switch (warning) {\n+    case kernel::Warning::UNKNOWN_NEW_RULES_ACTIVATED:\n+        return kernel_Warning::kernel_LARGE_WORK_INVALID_CHAIN;\n+    case kernel::Warning::LARGE_WORK_INVALID_CHAIN:\n+        return kernel_Warning::kernel_LARGE_WORK_INVALID_CHAIN;\n+    } // no default case, so the compiler can warn about missing cases\n+    assert(false);\n+}\n+\n+class KernelNotifications : public kernel::Notifications\n+{\n+private:\n+    kernel_NotificationInterfaceCallbacks m_cbs;\n+\n+public:\n+    KernelNotifications(kernel_NotificationInterfaceCallbacks cbs)\n+        : m_cbs{cbs}\n+    {\n+    }\n+\n+    kernel::InterruptResult blockTip(SynchronizationState state, CBlockIndex& index) override\n+    {\n+        if (m_cbs.block_tip) m_cbs.block_tip((void*) m_cbs.user_data, cast_state(state), reinterpret_cast<const kernel_BlockIndex*>(&index));\n+        return {};\n+    }\n+    void headerTip(SynchronizationState state, int64_t height, int64_t timestamp, bool presync) override\n+    {\n+        if (m_cbs.header_tip) m_cbs.header_tip((void*) m_cbs.user_data, cast_state(state), height, timestamp, presync);\n+    }\n+    void warningSet(kernel::Warning id, const bilingual_str& message) override\n+    {\n+        if (m_cbs.warning_set) m_cbs.warning_set((void*) m_cbs.user_data, cast_kernel_warning(id), message.original.c_str());\n+    }\n+    void warningUnset(kernel::Warning id) override\n+    {\n+        if (m_cbs.warning_unset) m_cbs.warning_unset((void*) m_cbs.user_data, cast_kernel_warning(id));\n+    }\n+    void flushError(const bilingual_str& message) override\n+    {\n+        if (m_cbs.flush_error) m_cbs.flush_error((void*) m_cbs.user_data, message.original.c_str());\n+    }\n+    void fatalError(const bilingual_str& message) override\n+    {\n+        if (m_cbs.fatal_error) m_cbs.fatal_error((void*) m_cbs.user_data, message.original.c_str());\n+    }\n+};\n+\n+struct ContextOptions {\n+    std::unique_ptr<const KernelNotifications> m_notifications;\n+    std::unique_ptr<const CChainParams> m_chainparams;\n+};\n+\n+class Context\n+{\n+public:\n+    std::unique_ptr<kernel::Context> m_context;\n+\n+    std::unique_ptr<KernelNotifications> m_notifications;\n+\n+    std::unique_ptr<util::SignalInterrupt> m_interrupt;\n+\n+    std::unique_ptr<ValidationSignals> m_signals;\n+\n+    std::unique_ptr<const CChainParams> m_chainparams;\n+\n+    Context(const ContextOptions* options, bool& sane)\n+        : m_context{std::make_unique<kernel::Context>()},\n+          m_interrupt{std::make_unique<util::SignalInterrupt>()},\n+          m_signals{std::make_unique<ValidationSignals>(std::make_unique<ImmediateTaskRunner>())}\n+    {\n+        if (options && options->m_notifications) {\n+            m_notifications = std::make_unique<KernelNotifications>(*options->m_notifications);\n+        } else {\n+            m_notifications = std::make_unique<KernelNotifications>(kernel_NotificationInterfaceCallbacks{\n+                nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr});\n+        }\n+\n+        if (options && options->m_chainparams) {\n+            m_chainparams = std::make_unique<const CChainParams>(*options->m_chainparams);\n+        } else {\n+            m_chainparams = CChainParams::Main();\n+        }\n+\n+        if (!kernel::SanityChecks(*m_context)) {\n+            sane = false;\n+        }\n+    }\n+};\n+\n+class KernelValidationInterface final : public CValidationInterface\n+{\n+public:\n+    const kernel_ValidationInterfaceCallbacks m_cbs;\n+\n+    explicit KernelValidationInterface(const kernel_ValidationInterfaceCallbacks vi_cbs) : m_cbs{vi_cbs} {}\n+\n+protected:\n+    void BlockChecked(const CBlock& block, const BlockValidationState& stateIn) override\n+    {\n+        if (m_cbs.block_checked) {\n+            m_cbs.block_checked((void*) m_cbs.user_data,\n+                                reinterpret_cast<const kernel_BlockPointer*>(&block),\n+                                reinterpret_cast<const kernel_BlockValidationState*>(&stateIn));\n+        }\n+    }\n+};\n+\n+const CTransaction* cast_transaction(const kernel_Transaction* transaction)\n+{\n+    assert(transaction);\n+    return reinterpret_cast<const CTransaction*>(transaction);\n+}\n+\n+const CScript* cast_script_pubkey(const kernel_ScriptPubkey* script_pubkey)\n+{\n+    assert(script_pubkey);\n+    return reinterpret_cast<const CScript*>(script_pubkey);\n+}\n+\n+const CTxOut* cast_transaction_output(const kernel_TransactionOutput* transaction_output)\n+{\n+    assert(transaction_output);\n+    return reinterpret_cast<const CTxOut*>(transaction_output);\n+}\n+\n+const ContextOptions* cast_const_context_options(const kernel_ContextOptions* options)\n+{\n+    assert(options);\n+    return reinterpret_cast<const ContextOptions*>(options);\n+}\n+\n+ContextOptions* cast_context_options(kernel_ContextOptions* options)\n+{\n+    assert(options);\n+    return reinterpret_cast<ContextOptions*>(options);\n+}\n+\n+const CChainParams* cast_const_chain_params(const kernel_ChainParameters* chain_params)\n+{\n+    assert(chain_params);\n+    return reinterpret_cast<const CChainParams*>(chain_params);\n+}\n+\n+const KernelNotifications* cast_const_notifications(const kernel_Notifications* notifications)\n+{\n+    assert(notifications);\n+    return reinterpret_cast<const KernelNotifications*>(notifications);\n+}\n+\n+Context* cast_context(kernel_Context* context)\n+{\n+    assert(context);\n+    return reinterpret_cast<Context*>(context);\n+}\n+\n+const Context* cast_const_context(const kernel_Context* context)\n+{\n+    assert(context);\n+    return reinterpret_cast<const Context*>(context);\n+}\n+\n+const ChainstateManager::Options* cast_const_chainstate_manager_options(const kernel_ChainstateManagerOptions* options)\n+{\n+    assert(options);\n+    return reinterpret_cast<const ChainstateManager::Options*>(options);\n+}\n+\n+ChainstateManager::Options* cast_chainstate_manager_options(kernel_ChainstateManagerOptions* options)\n+{\n+    assert(options);\n+    return reinterpret_cast<ChainstateManager::Options*>(options);\n+}\n+\n+const node::BlockManager::Options* cast_const_block_manager_options(const kernel_BlockManagerOptions* options)\n+{\n+    assert(options);\n+    return reinterpret_cast<const node::BlockManager::Options*>(options);\n+}\n+\n+ChainstateManager* cast_chainstate_manager(kernel_ChainstateManager* chainman)\n+{\n+    assert(chainman);\n+    return reinterpret_cast<ChainstateManager*>(chainman);\n+}\n+\n+node::ChainstateLoadOptions* cast_chainstate_load_options(kernel_ChainstateLoadOptions* options)\n+{\n+    assert(options);\n+    return reinterpret_cast<node::ChainstateLoadOptions*>(options);\n+}\n+\n+const node::ChainstateLoadOptions* cast_const_chainstate_load_options(const kernel_ChainstateLoadOptions* options)\n+{\n+    assert(options);\n+    return reinterpret_cast<const node::ChainstateLoadOptions*>(options);\n+}\n+\n+std::shared_ptr<CBlock>* cast_cblocksharedpointer(kernel_Block* block)\n+{\n+    assert(block);\n+    return reinterpret_cast<std::shared_ptr<CBlock>*>(block);\n+}\n+\n+std::shared_ptr<KernelValidationInterface>* cast_validation_interface(kernel_ValidationInterface* interface)\n+{\n+    assert(interface);\n+    return reinterpret_cast<std::shared_ptr<KernelValidationInterface>*>(interface);\n+}\n+\n+const BlockValidationState* cast_block_validation_state(const kernel_BlockValidationState* block_validation_state)\n+{\n+    assert(block_validation_state);\n+    return reinterpret_cast<const BlockValidationState*>(block_validation_state);\n+}\n+\n+const CBlock* cast_const_cblock(const kernel_BlockPointer* block)\n+{\n+    assert(block);\n+    return reinterpret_cast<const CBlock*>(block);\n+}\n+\n+const CBlockIndex* cast_const_block_index(const kernel_BlockIndex* index)\n+{\n+    assert(index);\n+    return reinterpret_cast<const CBlockIndex*>(index);\n+}\n+\n+const CBlockUndo* cast_const_block_undo(const kernel_BlockUndo* undo)\n+{\n+    assert(undo);\n+    return reinterpret_cast<const CBlockUndo*>(undo);\n+}\n+\n+} // namespace\n+\n+kernel_Transaction* kernel_transaction_create(const unsigned char* raw_transaction, size_t raw_transaction_len)\n+{\n+    try {\n+        DataStream stream{std::span{raw_transaction, raw_transaction_len}};\n+        auto tx = new CTransaction{deserialize, TX_WITH_WITNESS, stream};\n+        return reinterpret_cast<kernel_Transaction*>(tx);\n+    } catch (const std::exception&) {\n+        return nullptr;\n+    }\n+}\n+\n+void kernel_transaction_destroy(kernel_Transaction* transaction)\n+{\n+    if (transaction) {\n+        delete cast_transaction(transaction);\n+    }\n+}\n+\n+kernel_ScriptPubkey* kernel_script_pubkey_create(const unsigned char* script_pubkey_, size_t script_pubkey_len)\n+{\n+    auto script_pubkey = new CScript(script_pubkey_, script_pubkey_ + script_pubkey_len);\n+    return reinterpret_cast<kernel_ScriptPubkey*>(script_pubkey);\n+}\n+\n+kernel_ByteArray* kernel_copy_script_pubkey_data(const kernel_ScriptPubkey* script_pubkey_)\n+{\n+    auto script_pubkey{cast_script_pubkey(script_pubkey_)};\n+\n+    auto byte_array{new kernel_ByteArray{\n+        .data = new unsigned char[script_pubkey->size()],\n+        .size = script_pubkey->size(),\n+    }};\n+\n+    std::memcpy(byte_array->data, script_pubkey->data(), byte_array->size);\n+    return byte_array;\n+}\n+\n+void kernel_script_pubkey_destroy(kernel_ScriptPubkey* script_pubkey)\n+{\n+    if (script_pubkey) {\n+        delete cast_script_pubkey(script_pubkey);\n+    }\n+}\n+\n+kernel_TransactionOutput* kernel_transaction_output_create(const kernel_ScriptPubkey* script_pubkey_, int64_t amount)\n+{\n+    const auto& script_pubkey{*cast_script_pubkey(script_pubkey_)};\n+    const CAmount& value{amount};\n+    auto tx_out{new CTxOut(value, script_pubkey)};\n+    return reinterpret_cast<kernel_TransactionOutput*>(tx_out);\n+}\n+\n+void kernel_transaction_output_destroy(kernel_TransactionOutput* output)\n+{\n+    if (output) {\n+        delete cast_transaction_output(output);\n+    }\n+}\n+\n+bool kernel_verify_script(const kernel_ScriptPubkey* script_pubkey_,\n+                         const int64_t amount_,\n+                         const kernel_Transaction* tx_to,\n+                         const kernel_TransactionOutput** spent_outputs_, size_t spent_outputs_len,\n+                         const unsigned int input_index,\n+                         const unsigned int flags,\n+                         kernel_ScriptVerifyStatus* status)\n+{\n+    const CAmount amount{amount_};\n+    const auto& script_pubkey{*cast_script_pubkey(script_pubkey_)};\n+\n+    if (!verify_flags(flags)) {\n+        if (status) *status = kernel_SCRIPT_VERIFY_ERROR_INVALID_FLAGS;\n+        return false;\n+    }\n+\n+    if (!is_valid_flag_combination(flags)) {\n+        if (status) *status = kernel_SCRIPT_VERIFY_ERROR_INVALID_FLAGS_COMBINATION;\n+        return false;\n+    }\n+\n+    if (flags & kernel_SCRIPT_FLAGS_VERIFY_TAPROOT && spent_outputs_ == nullptr) {\n+        if (status) *status = kernel_SCRIPT_VERIFY_ERROR_SPENT_OUTPUTS_REQUIRED;\n+        return false;\n+    }\n+\n+    const CTransaction& tx{*cast_transaction(tx_to)};\n+    std::vector<CTxOut> spent_outputs;\n+    if (spent_outputs_ != nullptr) {\n+        if (spent_outputs_len != tx.vin.size()) {\n+            if (status) *status = kernel_SCRIPT_VERIFY_ERROR_SPENT_OUTPUTS_MISMATCH;\n+            return false;\n+        }\n+        spent_outputs.reserve(spent_outputs_len);\n+        for (size_t i = 0; i < spent_outputs_len; i++) {\n+            const CTxOut& tx_out{*reinterpret_cast<const CTxOut*>(spent_outputs_[i])};\n+            spent_outputs.push_back(tx_out);\n+        }\n+    }\n+\n+    if (input_index >= tx.vin.size()) {\n+        if (status) *status = kernel_SCRIPT_VERIFY_ERROR_TX_INPUT_INDEX;\n+        return false;\n+    }\n+    PrecomputedTransactionData txdata{tx};\n+\n+    if (spent_outputs_ != nullptr && flags & kernel_SCRIPT_FLAGS_VERIFY_TAPROOT) {\n+        txdata.Init(tx, std::move(spent_outputs));\n+    }\n+\n+    return VerifyScript(tx.vin[input_index].scriptSig,",
      "path": "src/kernel/bitcoinkernel.cpp",
      "position": 494,
      "original_position": 494,
      "commit_id": "34a8429ff3a870c0caaf4c4790becd86c5acde38",
      "original_commit_id": "34a8429ff3a870c0caaf4c4790becd86c5acde38",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think it's confusing that this function can return `False` and have `status == kernel_SCRIPT_VERIFY_OK`. How about adding a `kernel_SCRIPT_VERIFY_ERROR` catch-all member for unspecified errors? Or alternatively, requiring the user to provide a nullptr and only setting it to `kernel_SCRIPT_VERIFY_OK` is that's actually so?",
      "created_at": "2024-11-25T17:38:59Z",
      "updated_at": "2024-11-25T21:41:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1857036990",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1857036990"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 492,
      "original_line": 492,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1857397944",
      "pull_request_review_id": 2459717939,
      "id": 1857397944,
      "node_id": "PRRC_kwDOABII585utaS4",
      "diff_hunk": "@@ -1,10 +1,1217 @@\n-// Copyright (c) 2022 The Bitcoin Core developers\n+// Copyright (c) 2022-present The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <kernel/bitcoinkernel.h>\n+\n+#include <chain.h>\n+#include <coins.h>\n+#include <consensus/amount.h>\n+#include <consensus/validation.h>\n+#include <kernel/chainparams.h>\n+#include <kernel/checks.h>\n+#include <kernel/context.h>\n+#include <kernel/notifications_interface.h>\n+#include <kernel/warning.h>\n+#include <logging.h>\n+#include <node/blockstorage.h>\n+#include <node/caches.h>\n+#include <node/chainstate.h>\n+#include <primitives/block.h>\n+#include <primitives/transaction.h>\n+#include <script/interpreter.h>\n+#include <script/script.h>\n+#include <serialize.h>\n+#include <streams.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <uint256.h>\n+#include <undo.h>\n+#include <util/fs.h>\n+#include <util/result.h>\n+#include <util/signalinterrupt.h>\n+#include <util/task_runner.h>\n+#include <util/translation.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+#include <cassert>\n+#include <cstddef>\n+#include <cstring>\n+#include <exception>\n #include <functional>\n+#include <list>\n+#include <memory>\n+#include <span>\n #include <string>\n+#include <tuple>\n+#include <utility>\n+#include <vector>\n+\n+using util::ImmediateTaskRunner;\n \n // Define G_TRANSLATION_FUN symbol in libbitcoinkernel library so users of the\n // library aren't required to export this symbol\n-extern const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+extern const std::function<std::string(const char*)> G_TRANSLATION_FUN{nullptr};\n+\n+static const kernel::Context kernel_context_static{};\n+\n+namespace {\n+\n+/** Check that all specified flags are part of the libbitcoinkernel interface. */\n+bool verify_flags(unsigned int flags)\n+{\n+    return (flags & ~(kernel_SCRIPT_FLAGS_VERIFY_ALL)) == 0;\n+}\n+\n+bool is_valid_flag_combination(unsigned int flags)\n+{\n+    if (flags & SCRIPT_VERIFY_CLEANSTACK && ~flags & (SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS)) return false;\n+    if (flags & SCRIPT_VERIFY_WITNESS && ~flags & SCRIPT_VERIFY_P2SH) return false;\n+    return true;\n+}\n+\n+std::string log_level_to_string(const kernel_LogLevel level)\n+{\n+    switch (level) {\n+    case kernel_LogLevel::kernel_LOG_INFO: {\n+        return \"info\";\n+    }\n+    case kernel_LogLevel::kernel_LOG_DEBUG: {\n+        return \"debug\";\n+    }\n+    case kernel_LogLevel::kernel_LOG_TRACE: {\n+        return \"trace\";\n+    }\n+    } // no default case, so the compiler can warn about missing cases\n+    assert(false);\n+}\n+\n+std::string log_category_to_string(const kernel_LogCategory category)\n+{\n+    switch (category) {\n+    case kernel_LogCategory::kernel_LOG_BENCH: {\n+        return \"bench\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_BLOCKSTORAGE: {\n+        return \"blockstorage\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_COINDB: {\n+        return \"coindb\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_LEVELDB: {\n+        return \"leveldb\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_LOCK: {\n+        return \"lock\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_MEMPOOL: {\n+        return \"mempool\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_PRUNE: {\n+        return \"prune\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_RAND: {\n+        return \"rand\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_REINDEX: {\n+        return \"reindex\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_VALIDATION: {\n+        return \"validation\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_KERNEL: {\n+        return \"kernel\";\n+    }\n+    case kernel_LogCategory::kernel_LOG_ALL: {\n+        return \"all\";\n+    }\n+    } // no default case, so the compiler can warn about missing cases\n+    assert(false);\n+}\n+\n+kernel_SynchronizationState cast_state(SynchronizationState state)\n+{\n+    switch (state) {\n+    case SynchronizationState::INIT_REINDEX:\n+        return kernel_SynchronizationState::kernel_INIT_REINDEX;\n+    case SynchronizationState::INIT_DOWNLOAD:\n+        return kernel_SynchronizationState::kernel_INIT_DOWNLOAD;\n+    case SynchronizationState::POST_INIT:\n+        return kernel_SynchronizationState::kernel_POST_INIT;\n+    } // no default case, so the compiler can warn about missing cases\n+    assert(false);\n+}\n+\n+kernel_Warning cast_kernel_warning(kernel::Warning warning)\n+{\n+    switch (warning) {\n+    case kernel::Warning::UNKNOWN_NEW_RULES_ACTIVATED:\n+        return kernel_Warning::kernel_LARGE_WORK_INVALID_CHAIN;\n+    case kernel::Warning::LARGE_WORK_INVALID_CHAIN:\n+        return kernel_Warning::kernel_LARGE_WORK_INVALID_CHAIN;\n+    } // no default case, so the compiler can warn about missing cases\n+    assert(false);\n+}\n+\n+class KernelNotifications : public kernel::Notifications\n+{\n+private:\n+    kernel_NotificationInterfaceCallbacks m_cbs;\n+\n+public:\n+    KernelNotifications(kernel_NotificationInterfaceCallbacks cbs)\n+        : m_cbs{cbs}\n+    {\n+    }\n+\n+    kernel::InterruptResult blockTip(SynchronizationState state, CBlockIndex& index) override\n+    {\n+        if (m_cbs.block_tip) m_cbs.block_tip((void*) m_cbs.user_data, cast_state(state), reinterpret_cast<const kernel_BlockIndex*>(&index));\n+        return {};\n+    }\n+    void headerTip(SynchronizationState state, int64_t height, int64_t timestamp, bool presync) override\n+    {\n+        if (m_cbs.header_tip) m_cbs.header_tip((void*) m_cbs.user_data, cast_state(state), height, timestamp, presync);\n+    }\n+    void warningSet(kernel::Warning id, const bilingual_str& message) override\n+    {\n+        if (m_cbs.warning_set) m_cbs.warning_set((void*) m_cbs.user_data, cast_kernel_warning(id), message.original.c_str());\n+    }\n+    void warningUnset(kernel::Warning id) override\n+    {\n+        if (m_cbs.warning_unset) m_cbs.warning_unset((void*) m_cbs.user_data, cast_kernel_warning(id));\n+    }\n+    void flushError(const bilingual_str& message) override\n+    {\n+        if (m_cbs.flush_error) m_cbs.flush_error((void*) m_cbs.user_data, message.original.c_str());\n+    }\n+    void fatalError(const bilingual_str& message) override\n+    {\n+        if (m_cbs.fatal_error) m_cbs.fatal_error((void*) m_cbs.user_data, message.original.c_str());\n+    }\n+};\n+\n+struct ContextOptions {\n+    std::unique_ptr<const KernelNotifications> m_notifications;\n+    std::unique_ptr<const CChainParams> m_chainparams;\n+};\n+\n+class Context\n+{\n+public:\n+    std::unique_ptr<kernel::Context> m_context;\n+\n+    std::unique_ptr<KernelNotifications> m_notifications;\n+\n+    std::unique_ptr<util::SignalInterrupt> m_interrupt;\n+\n+    std::unique_ptr<ValidationSignals> m_signals;\n+\n+    std::unique_ptr<const CChainParams> m_chainparams;\n+\n+    Context(const ContextOptions* options, bool& sane)\n+        : m_context{std::make_unique<kernel::Context>()},\n+          m_interrupt{std::make_unique<util::SignalInterrupt>()},\n+          m_signals{std::make_unique<ValidationSignals>(std::make_unique<ImmediateTaskRunner>())}\n+    {\n+        if (options && options->m_notifications) {\n+            m_notifications = std::make_unique<KernelNotifications>(*options->m_notifications);\n+        } else {\n+            m_notifications = std::make_unique<KernelNotifications>(kernel_NotificationInterfaceCallbacks{\n+                nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr});\n+        }\n+\n+        if (options && options->m_chainparams) {\n+            m_chainparams = std::make_unique<const CChainParams>(*options->m_chainparams);\n+        } else {\n+            m_chainparams = CChainParams::Main();\n+        }\n+\n+        if (!kernel::SanityChecks(*m_context)) {\n+            sane = false;\n+        }\n+    }\n+};\n+\n+class KernelValidationInterface final : public CValidationInterface\n+{\n+public:\n+    const kernel_ValidationInterfaceCallbacks m_cbs;\n+\n+    explicit KernelValidationInterface(const kernel_ValidationInterfaceCallbacks vi_cbs) : m_cbs{vi_cbs} {}\n+\n+protected:\n+    void BlockChecked(const CBlock& block, const BlockValidationState& stateIn) override\n+    {\n+        if (m_cbs.block_checked) {\n+            m_cbs.block_checked((void*) m_cbs.user_data,\n+                                reinterpret_cast<const kernel_BlockPointer*>(&block),\n+                                reinterpret_cast<const kernel_BlockValidationState*>(&stateIn));\n+        }\n+    }\n+};\n+\n+const CTransaction* cast_transaction(const kernel_Transaction* transaction)\n+{\n+    assert(transaction);\n+    return reinterpret_cast<const CTransaction*>(transaction);\n+}\n+\n+const CScript* cast_script_pubkey(const kernel_ScriptPubkey* script_pubkey)\n+{\n+    assert(script_pubkey);\n+    return reinterpret_cast<const CScript*>(script_pubkey);\n+}\n+\n+const CTxOut* cast_transaction_output(const kernel_TransactionOutput* transaction_output)\n+{\n+    assert(transaction_output);\n+    return reinterpret_cast<const CTxOut*>(transaction_output);\n+}\n+\n+const ContextOptions* cast_const_context_options(const kernel_ContextOptions* options)\n+{\n+    assert(options);\n+    return reinterpret_cast<const ContextOptions*>(options);\n+}\n+\n+ContextOptions* cast_context_options(kernel_ContextOptions* options)\n+{\n+    assert(options);\n+    return reinterpret_cast<ContextOptions*>(options);\n+}\n+\n+const CChainParams* cast_const_chain_params(const kernel_ChainParameters* chain_params)\n+{\n+    assert(chain_params);\n+    return reinterpret_cast<const CChainParams*>(chain_params);\n+}\n+\n+const KernelNotifications* cast_const_notifications(const kernel_Notifications* notifications)\n+{\n+    assert(notifications);\n+    return reinterpret_cast<const KernelNotifications*>(notifications);\n+}\n+\n+Context* cast_context(kernel_Context* context)\n+{\n+    assert(context);\n+    return reinterpret_cast<Context*>(context);\n+}\n+\n+const Context* cast_const_context(const kernel_Context* context)\n+{\n+    assert(context);\n+    return reinterpret_cast<const Context*>(context);\n+}\n+\n+const ChainstateManager::Options* cast_const_chainstate_manager_options(const kernel_ChainstateManagerOptions* options)\n+{\n+    assert(options);\n+    return reinterpret_cast<const ChainstateManager::Options*>(options);\n+}\n+\n+ChainstateManager::Options* cast_chainstate_manager_options(kernel_ChainstateManagerOptions* options)\n+{\n+    assert(options);\n+    return reinterpret_cast<ChainstateManager::Options*>(options);\n+}\n+\n+const node::BlockManager::Options* cast_const_block_manager_options(const kernel_BlockManagerOptions* options)\n+{\n+    assert(options);\n+    return reinterpret_cast<const node::BlockManager::Options*>(options);\n+}\n+\n+ChainstateManager* cast_chainstate_manager(kernel_ChainstateManager* chainman)\n+{\n+    assert(chainman);\n+    return reinterpret_cast<ChainstateManager*>(chainman);\n+}\n+\n+node::ChainstateLoadOptions* cast_chainstate_load_options(kernel_ChainstateLoadOptions* options)\n+{\n+    assert(options);\n+    return reinterpret_cast<node::ChainstateLoadOptions*>(options);\n+}\n+\n+const node::ChainstateLoadOptions* cast_const_chainstate_load_options(const kernel_ChainstateLoadOptions* options)\n+{\n+    assert(options);\n+    return reinterpret_cast<const node::ChainstateLoadOptions*>(options);\n+}\n+\n+std::shared_ptr<CBlock>* cast_cblocksharedpointer(kernel_Block* block)\n+{\n+    assert(block);\n+    return reinterpret_cast<std::shared_ptr<CBlock>*>(block);\n+}\n+\n+std::shared_ptr<KernelValidationInterface>* cast_validation_interface(kernel_ValidationInterface* interface)\n+{\n+    assert(interface);\n+    return reinterpret_cast<std::shared_ptr<KernelValidationInterface>*>(interface);\n+}\n+\n+const BlockValidationState* cast_block_validation_state(const kernel_BlockValidationState* block_validation_state)\n+{\n+    assert(block_validation_state);\n+    return reinterpret_cast<const BlockValidationState*>(block_validation_state);\n+}\n+\n+const CBlock* cast_const_cblock(const kernel_BlockPointer* block)\n+{\n+    assert(block);\n+    return reinterpret_cast<const CBlock*>(block);\n+}\n+\n+const CBlockIndex* cast_const_block_index(const kernel_BlockIndex* index)\n+{\n+    assert(index);\n+    return reinterpret_cast<const CBlockIndex*>(index);\n+}\n+\n+const CBlockUndo* cast_const_block_undo(const kernel_BlockUndo* undo)\n+{\n+    assert(undo);\n+    return reinterpret_cast<const CBlockUndo*>(undo);\n+}\n+\n+} // namespace\n+\n+kernel_Transaction* kernel_transaction_create(const unsigned char* raw_transaction, size_t raw_transaction_len)\n+{\n+    try {\n+        DataStream stream{std::span{raw_transaction, raw_transaction_len}};\n+        auto tx = new CTransaction{deserialize, TX_WITH_WITNESS, stream};\n+        return reinterpret_cast<kernel_Transaction*>(tx);\n+    } catch (const std::exception&) {\n+        return nullptr;\n+    }\n+}\n+\n+void kernel_transaction_destroy(kernel_Transaction* transaction)\n+{\n+    if (transaction) {\n+        delete cast_transaction(transaction);\n+    }\n+}\n+\n+kernel_ScriptPubkey* kernel_script_pubkey_create(const unsigned char* script_pubkey_, size_t script_pubkey_len)\n+{\n+    auto script_pubkey = new CScript(script_pubkey_, script_pubkey_ + script_pubkey_len);\n+    return reinterpret_cast<kernel_ScriptPubkey*>(script_pubkey);\n+}\n+\n+kernel_ByteArray* kernel_copy_script_pubkey_data(const kernel_ScriptPubkey* script_pubkey_)\n+{\n+    auto script_pubkey{cast_script_pubkey(script_pubkey_)};\n+\n+    auto byte_array{new kernel_ByteArray{\n+        .data = new unsigned char[script_pubkey->size()],\n+        .size = script_pubkey->size(),\n+    }};\n+\n+    std::memcpy(byte_array->data, script_pubkey->data(), byte_array->size);\n+    return byte_array;\n+}\n+\n+void kernel_script_pubkey_destroy(kernel_ScriptPubkey* script_pubkey)\n+{\n+    if (script_pubkey) {\n+        delete cast_script_pubkey(script_pubkey);\n+    }\n+}\n+\n+kernel_TransactionOutput* kernel_transaction_output_create(const kernel_ScriptPubkey* script_pubkey_, int64_t amount)\n+{\n+    const auto& script_pubkey{*cast_script_pubkey(script_pubkey_)};\n+    const CAmount& value{amount};\n+    auto tx_out{new CTxOut(value, script_pubkey)};\n+    return reinterpret_cast<kernel_TransactionOutput*>(tx_out);\n+}\n+\n+void kernel_transaction_output_destroy(kernel_TransactionOutput* output)\n+{\n+    if (output) {\n+        delete cast_transaction_output(output);\n+    }\n+}\n+\n+bool kernel_verify_script(const kernel_ScriptPubkey* script_pubkey_,\n+                         const int64_t amount_,\n+                         const kernel_Transaction* tx_to,\n+                         const kernel_TransactionOutput** spent_outputs_, size_t spent_outputs_len,\n+                         const unsigned int input_index,\n+                         const unsigned int flags,\n+                         kernel_ScriptVerifyStatus* status)\n+{\n+    const CAmount amount{amount_};\n+    const auto& script_pubkey{*cast_script_pubkey(script_pubkey_)};\n+\n+    if (!verify_flags(flags)) {\n+        if (status) *status = kernel_SCRIPT_VERIFY_ERROR_INVALID_FLAGS;\n+        return false;\n+    }\n+\n+    if (!is_valid_flag_combination(flags)) {\n+        if (status) *status = kernel_SCRIPT_VERIFY_ERROR_INVALID_FLAGS_COMBINATION;\n+        return false;\n+    }\n+\n+    if (flags & kernel_SCRIPT_FLAGS_VERIFY_TAPROOT && spent_outputs_ == nullptr) {\n+        if (status) *status = kernel_SCRIPT_VERIFY_ERROR_SPENT_OUTPUTS_REQUIRED;\n+        return false;\n+    }\n+\n+    const CTransaction& tx{*cast_transaction(tx_to)};\n+    std::vector<CTxOut> spent_outputs;\n+    if (spent_outputs_ != nullptr) {\n+        if (spent_outputs_len != tx.vin.size()) {\n+            if (status) *status = kernel_SCRIPT_VERIFY_ERROR_SPENT_OUTPUTS_MISMATCH;\n+            return false;\n+        }\n+        spent_outputs.reserve(spent_outputs_len);\n+        for (size_t i = 0; i < spent_outputs_len; i++) {\n+            const CTxOut& tx_out{*reinterpret_cast<const CTxOut*>(spent_outputs_[i])};\n+            spent_outputs.push_back(tx_out);\n+        }\n+    }\n+\n+    if (input_index >= tx.vin.size()) {\n+        if (status) *status = kernel_SCRIPT_VERIFY_ERROR_TX_INPUT_INDEX;\n+        return false;\n+    }\n+    PrecomputedTransactionData txdata{tx};\n+\n+    if (spent_outputs_ != nullptr && flags & kernel_SCRIPT_FLAGS_VERIFY_TAPROOT) {\n+        txdata.Init(tx, std::move(spent_outputs));\n+    }\n+\n+    return VerifyScript(tx.vin[input_index].scriptSig,",
      "path": "src/kernel/bitcoinkernel.cpp",
      "position": 494,
      "original_position": 494,
      "commit_id": "34a8429ff3a870c0caaf4c4790becd86c5acde38",
      "original_commit_id": "34a8429ff3a870c0caaf4c4790becd86c5acde38",
      "in_reply_to_id": 1857036990,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "We discussed during the last workshop that ideally we don't have any status codes here at all. But the problem is annoying to tackle. You'd probably want to pass this function a script verify object that has already passed through the required pre-checks. But then you have to either copy the objects into this object, or give ownership up to that object, which I don't think is desirable. The alternative to that is having a function with the same signature that you can call to check the arguments. But then you're forced to check them here again. I'm coming around to the option of replacing the status codes with log messages, but then we're sacrificing a bit of responsiveness to the developer.",
      "created_at": "2024-11-25T21:58:46Z",
      "updated_at": "2024-11-25T21:58:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30595#discussion_r1857397944",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1857397944"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30595"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 492,
      "original_line": 492,
      "side": "RIGHT"
    }
  ]
}