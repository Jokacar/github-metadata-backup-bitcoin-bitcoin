{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130",
    "id": 1654449705,
    "node_id": "PR_kwDOABII585inOYp",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29130",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/29130.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/29130.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29130",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29130/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/746b6d88395607abbd3c13bbdcdd4ca83e9bc9e4",
    "number": 29130,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "wallet: Add `createwalletdescriptor` and `gethdkeys` RPCs for adding new automatically generated descriptors",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This PR adds a `createwalletdescriptor` RPC which allows users to add new automatically generated descriptors to their wallet, e.g. to upgrade a 0.21.x wallet to contain a taproot descriptor. This RPC takes 3 arguments: the output type to create a descriptor for, whether the descriptor will be internal or external, and the HD key to use if the user wishes to use a specific key. The HD key is an optional parameter. If it is not specified, the wallet will use the key shared by the active descriptors, if they are all single key. For most users in the expected upgrade scenario, this should be sufficient. In more advanced cases, the user must specify the HD key to use.\r\n\r\nCurrently, specified HD keys must already exist in the wallet. To make it easier for the user to know, `gethdkeys` is also added to list out the HD keys in use by all of the descriptors in the wallet. This will include all HD keys, whether we have the private key, for it, which descriptors use it and their activeness, and optionally the extended private key. In this way, users with more complex wallets will be still be able to get HD keys from their wallet for use in other scenarios, and if they want to use `createwalletdescriptor`, they can easily get the keys that they can specify to it.\r\n\r\nSee also https://github.com/bitcoin/bitcoin/pull/26728#issuecomment-1866961865",
    "labels": [
      {
        "id": 149424,
        "node_id": "MDU6TGFiZWwxNDk0MjQ=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
        "name": "Wallet",
        "color": "08a781",
        "default": false
      }
    ],
    "created_at": "2023-12-22T00:05:47Z",
    "updated_at": "2024-03-25T13:15:02Z",
    "mergeable": true,
    "mergeable_state": "blocked",
    "merge_commit_sha": "a6a54002a8967e9e78d44ff4c60df0e0de2e4813",
    "assignees": [],
    "requested_reviewers": [
      {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "achow101:createwalletdescriptor-without-new-records",
      "ref": "createwalletdescriptor-without-new-records",
      "sha": "746b6d88395607abbd3c13bbdcdd4ca83e9bc9e4",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 45006379,
        "node_id": "MDEwOlJlcG9zaXRvcnk0NTAwNjM3OQ==",
        "name": "bitcoin",
        "full_name": "achow101/bitcoin",
        "owner": {
          "login": "achow101",
          "id": 3782274,
          "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
          "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/achow101",
          "html_url": "https://github.com/achow101",
          "followers_url": "https://api.github.com/users/achow101/followers",
          "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
          "organizations_url": "https://api.github.com/users/achow101/orgs",
          "repos_url": "https://api.github.com/users/achow101/repos",
          "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/achow101/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/achow101/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/achow101/bitcoin",
        "archive_url": "https://api.github.com/repos/achow101/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/achow101/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/achow101/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/achow101/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/achow101/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/achow101/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/achow101/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/achow101/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/achow101/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/achow101/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/achow101/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/achow101/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/achow101/bitcoin/events",
        "forks_url": "https://api.github.com/repos/achow101/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/achow101/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/achow101/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/achow101/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/achow101/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/achow101/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/achow101/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/achow101/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/achow101/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/achow101/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/achow101/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/achow101/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/achow101/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/achow101/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/achow101/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/achow101/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:achow101/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/achow101/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/achow101/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/achow101/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/achow101/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/achow101/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/achow101/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/achow101/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/achow101/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/achow101/bitcoin/hooks",
        "svn_url": "https://github.com/achow101/bitcoin",
        "homepage": "https://bitcoin.org/en/download",
        "language": "C++",
        "forks_count": 10,
        "stargazers_count": 35,
        "watchers_count": 35,
        "size": 267685,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2024-03-21T17:44:06Z",
        "created_at": "2015-10-27T00:20:28Z",
        "updated_at": "2024-01-13T23:12:15Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "b50554babdddf452acaa51bac757736766c70e81",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 34913,
        "stargazers_count": 75024,
        "watchers_count": 75024,
        "size": 253769,
        "default_branch": "master",
        "open_issues_count": 707,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2024-03-25T13:54:51Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2024-03-25T12:22:05Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 775,
    "deletions": 63,
    "changed_files": 16,
    "commits": 13,
    "review_comments": 94,
    "comments": 9
  },
  "events": [
    {
      "event": "commented",
      "id": 1867069599,
      "node_id": "IC_kwDOABII585vSTif",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1867069599",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-22T00:05:50Z",
      "updated_at": "2024-03-25T10:41:54Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage\nFor detailed information about the code coverage, see the [test coverage report](https://corecheck.dev/bitcoin/bitcoin/pulls/29130).\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| ACK | [furszy](https://github.com/bitcoin/bitcoin/pull/29130#pullrequestreview-1950215482), [Sjors](https://github.com/bitcoin/bitcoin/pull/29130#issuecomment-2017702776) |\n| Stale ACK | [ryanofsky](https://github.com/bitcoin/bitcoin/pull/29130#pullrequestreview-1898607527) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#29675](https://github.com/bitcoin/bitcoin/pull/29675) (wallet: Be able to receive and spend inputs involving MuSig2 aggregate keys by achow101)\n* [#29136](https://github.com/bitcoin/bitcoin/pull/29136) (wallet: `addhdkey` RPC to add just keys to wallets via new `void(KEY)` descriptor by achow101)\n* [#28724](https://github.com/bitcoin/bitcoin/pull/28724) (wallet: Cleanup accidental encryption keys in watchonly wallets by achow101)\n* [#28574](https://github.com/bitcoin/bitcoin/pull/28574) (wallet: optimize migration process, batch db transactions by furszy)\n* [#28333](https://github.com/bitcoin/bitcoin/pull/28333) (wallet: Construct ScriptPubKeyMans with all data rather than loaded progressively by achow101)\n* [#27865](https://github.com/bitcoin/bitcoin/pull/27865) (wallet: Track no-longer-spendable TXOs separately by achow101)\n* [#27286](https://github.com/bitcoin/bitcoin/pull/27286) (wallet: Keep track of the wallet's own transaction outputs in memory by achow101)\n* [#25979](https://github.com/bitcoin/bitcoin/pull/25979) ([WIP] wallet: standardize change output detection process by furszy)\n* [#22838](https://github.com/bitcoin/bitcoin/pull/22838) (descriptors: Be able to specify change and receiving in a single descriptor string by achow101)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#issuecomment-1867069599",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29130"
    },
    {
      "event": "labeled",
      "id": 11321203626,
      "node_id": "LE_lADOABII5856YTyLzwAAAAKiy9uq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11321203626",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-22T00:05:53Z",
      "label": {
        "name": "Wallet",
        "color": "08a781"
      }
    },
    {
      "event": "labeled",
      "id": 11321423866,
      "node_id": "LE_lADOABII5856YTyLzwAAAAKizzf6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11321423866",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-22T00:51:53Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-22T05:47:48Z",
      "updated_at": "2023-12-22T05:47:48Z",
      "source": {
        "issue": {
          "id": 2036429651,
          "node_id": "PR_kwDOABII585huQZ6",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29054",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29054/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29054/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29054/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/29054",
          "number": 29054,
          "state": "closed",
          "state_reason": null,
          "title": "wallet: reenable sethdseed for descriptor wallets",
          "body": "Enable `sethdseed` for descriptor wallets. To be able to use `createwalletdescriptor` with the other address types, we need a way to change the wallet extended key, and so `sethdseed` has been updated and enabled for descriptor wallets. As with legacy wallets, when called without parameters, it will generate a new random master key for the wallet. It can also take a xprv and set that as the master key. It still takes a BIP 32 seed as WIF or as hex as we do for legacy wallets. The seed will be transformed into and stored as a BIP 32 extended key. The latter is to give us greater compatibility with other wallets which often produce non-WIF HD seeds.\r\n\r\nSplit from #25907",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 3,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29054",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/29054",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/29054.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/29054.patch"
          },
          "closed_at": "2024-01-06T00:06:40Z",
          "created_at": "2023-12-11T20:00:27Z",
          "updated_at": "2024-01-06T00:06:40Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-22T06:46:28Z",
      "updated_at": "2023-12-22T06:46:28Z",
      "source": {
        "issue": {
          "id": 1960227017,
          "node_id": "PR_kwDOABII585dsR7G",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28724",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28724/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28724/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28724/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/28724",
          "number": 28724,
          "state": "open",
          "state_reason": null,
          "title": "wallet: Cleanup accidental encryption keys in watchonly wallets",
          "body": "An earlier version allowed users to create watchonly wallets (wallets without private keys) that were \"encrypted\". Such wallets would have a stored encryption keys, but nothing would actually be encrypted with them. This can cause unexpected behavior such as https://github.com/bitcoin-core/gui/issues/772.\r\n\r\nWe can detect such wallets as they will have the disable private keys flag set, no encrypted keys, and encryption keys. For such wallets, we can remove those encryption keys thereby avoiding any issues that may result from this unexpected situation.",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            },
            {
              "id": 5334691551,
              "node_id": "LA_kwDOABII588AAAABPfju3w",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/CI%20failed",
              "name": "CI failed",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 2,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28724",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/28724",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/28724.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/28724.patch"
          },
          "created_at": "2023-10-24T23:02:08Z",
          "updated_at": "2024-03-19T05:07:00Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-22T06:47:22Z",
      "updated_at": "2023-12-22T06:47:22Z",
      "source": {
        "issue": {
          "id": 1958204865,
          "node_id": "PR_kwDOABII585dlfBo",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28710",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28710/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28710/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28710/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/28710",
          "number": 28710,
          "state": "open",
          "state_reason": null,
          "title": "Remove the legacy wallet and BDB dependency",
          "body": "The final step of #20160.\r\n\r\nA bare minimum of legacy wallet code is kept in order to perform wallet migration. Migration of legacy wallets uses the independent BDB parser and a minimal `LegacyDataSPKM` that allows the legacy data to be loaded so that the migration can be completed.\r\n\r\nAll tests which tested legacy wallet behavior have been removed. The `--descriptors` and `--legacy-wallet` options are removed from the functional tests.\r\n\r\nBDB has been removed as a dependency and documentation have been updated to reflect that.\r\n\r\nDepends on #26596",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            },
            {
              "id": 5334691551,
              "node_id": "LA_kwDOABII588AAAABPfju3w",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/CI%20failed",
              "name": "CI failed",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 2,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28710",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/28710",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/28710.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/28710.patch"
          },
          "created_at": "2023-10-23T23:36:07Z",
          "updated_at": "2024-03-18T16:26:35Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-22T06:58:03Z",
      "updated_at": "2023-12-22T06:58:03Z",
      "source": {
        "issue": {
          "id": 1924207353,
          "node_id": "PR_kwDOABII585by2eU",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28574",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28574/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28574/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28574/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/28574",
          "number": 28574,
          "state": "open",
          "state_reason": null,
          "title": "wallet: optimize migration process, batch db transactions",
          "body": "Last step in a chain of PRs (#26836, #28894, #28987, #29403).\r\n\r\nThe initial benchmark conducted locally showed a ~65% processing time reduction, on a SSD.\r\nResults, from the very first benchmark, can be found at the end of the description.\r\n\r\n#### Detailed Description:\r\nThe current wallet migration process performs only individual db writes. Accessing disk to\r\ndelete all legacy records, clone and clean each address book entry for every created wallet,\r\ncreate each new descriptor (with their corresponding master key, caches and key pool), and\r\nalso clone and delete each transaction that requires to be transferred to a different wallet.\r\n\r\nThis work consolidates all individual disk writes into two batch operations. One for the descriptors\r\ncreation from the legacy data and a second one for the execution of the migration process itself.\r\nEfficiently dumping all the information to disk at once atomically at the end of each process.\r\n\r\nThis represent a speed up and also a consistency improvement. During migration, we either\r\nwant to succeed or fail. No other outcomes should be accepted. We should never leave a\r\npartially migrated wallet on disk and request the user to manually restore the previous wallet from\r\na backup (at least not if we can avoid it).\r\n\r\nAdditionally, since db transactions relevant to the key pool generation were also batched, this work\r\nalso speeds up the regular wallet creation process.\r\n\r\n#### Note for Testers:\r\nThe first commit introduces a benchmark for the migration process. This one can be\r\ncherry-picked on top of master to compare results pre and post changes.\r\n\r\nPlease note that the benchmark setup may take some time (~70 seconds here) due to the absence\r\nof a batching mechanism for the address generation process (`GetNewDestination()` calls). Which,\r\nI plan to address in a separate PR, just to not continue expanding this PR.\r\n\r\n————————————————————————\r\n\r\nBenchmark on master (debug mode)\r\n|               ns/op |                op/s |    err% |     total | benchmark\r\n|--------------------:|--------------------:|--------:|----------:|:-----------\r\n|   65,093,884,958.00 |                0.02 |    0.0% |     65.09 | `WalletMigration`\r\n\r\nBenchmark on this branch (debug mode)\r\n|               ns/op |                op/s |    err% |     total | benchmark\r\n|--------------------:|--------------------:|--------:|----------:|:----------\r\n|   22,926,814,750.00 |                0.04 |    0.0% |     22.93 | `WalletMigration`",
          "user": {
            "login": "furszy",
            "id": 5377650,
            "node_id": "MDQ6VXNlcjUzNzc2NTA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/furszy",
            "html_url": "https://github.com/furszy",
            "followers_url": "https://api.github.com/users/furszy/followers",
            "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
            "organizations_url": "https://api.github.com/users/furszy/orgs",
            "repos_url": "https://api.github.com/users/furszy/repos",
            "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/furszy/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 7,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28574",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/28574",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/28574.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/28574.patch"
          },
          "created_at": "2023-10-03T13:54:18Z",
          "updated_at": "2024-03-22T21:16:47Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-22T07:22:24Z",
      "updated_at": "2023-12-22T07:22:24Z",
      "source": {
        "issue": {
          "id": 1864300532,
          "node_id": "PR_kwDOABII585YpjCI",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28333",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28333/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28333/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28333/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/28333",
          "number": 28333,
          "state": "open",
          "state_reason": null,
          "title": "wallet: Construct ScriptPubKeyMans with all data rather than loaded progressively",
          "body": "Instead of constructing ScriptPubKeyMans with no data, and then loading data as we find it, we should gather everything first and then load it all on construction. If there actually is no data and we want to setup generation, then that should also occur in a constructor rather than afterwards.\r\n\r\nThis change is only applied to DescriptorScriptPubKeyMan and ExternalSignerScriptPubKeyMan, and should be done for any ScriptPubKeyMans added in the future. I don't think it's really worth it to do this for LegacyScriptPubKeyMan since it would make loading performance worse (or cause layer violations) and it's (supposed to be) going away soon.",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            },
            {
              "id": 5334691551,
              "node_id": "LA_kwDOABII588AAAABPfju3w",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/CI%20failed",
              "name": "CI failed",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 2,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28333",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/28333",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/28333.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/28333.patch"
          },
          "created_at": "2023-08-24T02:55:39Z",
          "updated_at": "2024-03-19T05:56:02Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-22T07:56:14Z",
      "updated_at": "2023-12-22T07:56:14Z",
      "source": {
        "issue": {
          "id": 1753342247,
          "node_id": "PR_kwDOABII585SzfoS",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27865",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27865/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27865/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27865/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/27865",
          "number": 27865,
          "state": "open",
          "state_reason": null,
          "title": "wallet: Track no-longer-spendable TXOs separately",
          "body": "In #27286, the wallet keeps track of all of its transaction outputs, even if they are already spent or are otherwise unspendable. This TXO set is iterated for balance checking and coin selection preparation, which can still be slow for wallets that have had a lot of activity. This PR aims to improve the performance of such wallets by moving UTXOs that are definitely no longer spendable to a different map in the wallet so that far fewer TXOs need to be iterated for the aforementioned functions.\r\n\r\nUnspendable TXOs (not to be confused with Unspent TXOs) are those which have a spending transaction that has been confirmed, or are no longer valid due to reorgs. TXOs that are spent in unconfirmed transactions remain in the primary TXO set, and are filtered out of balance and coin selection as before.\r\n\r\nDepends on #27286",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            },
            {
              "id": 5334691551,
              "node_id": "LA_kwDOABII588AAAABPfju3w",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/CI%20failed",
              "name": "CI failed",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 6,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27865",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/27865",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/27865.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/27865.patch"
          },
          "created_at": "2023-06-12T18:40:10Z",
          "updated_at": "2024-03-22T10:48:24Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-22T08:16:13Z",
      "updated_at": "2023-12-22T08:16:13Z",
      "source": {
        "issue": {
          "id": 1632858009,
          "node_id": "PR_kwDOABII585MfYTP",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27286",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27286/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27286/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27286/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/27286",
          "number": 27286,
          "state": "open",
          "state_reason": null,
          "title": "wallet: Keep track of the wallet's own transaction outputs in memory",
          "body": "Currently, the wallet is not actually aware about its own transaction outputs. Instead, it will iterate all of the transactions stored in `mapWallet`, and then all of the outputs of those transactions, in order to figure out what belongs to it for the purposes of coin selection and balance calculation. For balance calculation, there is caching that results in it only iterating all of the transactions, but not all of the outputs. However when the cache is dirty, everything is iterated. This is especially problematic for wallets that have a lot of transactions, or transactions that have a lot of unrelated outputs (as may occur with coinjoins or batched payments).\r\n\r\nThis PR helps to resolve this issue by making the wallet track all of the outputs that belong to it in a new member `m_txos`. Note that this includes outputs that may have already been spent. Both balance calculation (`GetBalance`) and coin selection (`AvailableCoins`) are updated to iterate `m_txos`. This is generally faster since it ignores all of the unrelated outputs, and it is not slower as in the worst case of wallets containing only single output transactions, it's exactly the same number of outputs iterated.\r\n\r\n`m_txos` is memory only, and it is populated during wallet loading. When each transaction is loaded, all of its outputs are checked to see if it is `IsMine`, and if so, an entry added to `m_txos`. When new transactions are received, the same procedure is done.\r\n\r\nSince imports can change the `IsMine` status of a transaction (although they can only be \"promoted\" from watchonly to spendable), all of the import RPCs will be a bit slower as they re-iterate all transactions and all outputs to update `m_txos`.\r\n\r\nEach output in `m_txos` is stored in a new `WalletTXO` class. This class contains references to the parent `CWalletTx` and the `CTxOut` itself. It also caches the `IsMine` value of the txout. This should be safe as `IsMine` should not change unless there are imports. This allows us to have additional performance improvements in places that use these `WalletTXO`s as they can use the cached `IsMine` rather than repeatedly calling `IsMine` which can be expensive.\r\n\r\nThe existing `WalletBalance` benchmark demonstrates the performance improvement that this PR makes. The existing `WalletAvailableCoins` benchmark doesn't as all of the outputs used in that benchmark belong to the test wallet. I've updated that benchmark to have a bunch of unrelated outputs in each transaction so that the difference is demonstrated.\r\n\r\nThis is part of a larger project to have the wallet actually track and store a set of its UTXOs.\r\n\r\nBuilt on #24914 as it requires loading the txs last in order for `m_txos` to be built correctly.\r\n\r\n***\r\n\r\n## Benchmarks:\r\n\r\nMaster:\r\n\r\n|               ns/op |                op/s |    err% |          ins/op |         bra/op |   miss% |     total | benchmark\r\n|--------------------:|--------------------:|--------:|----------------:|---------------:|--------:|----------:|:----------\r\n|       92,245,141.50 |               10.84 |    0.1% |  988,823,975.00 |  66,803,340.50 |    0.0% |      2.04 | `WalletAvailableCoins`\r\n|            5,709.90 |          175,134.50 |    0.5% |       80,968.24 |      25,539.15 |    0.1% |      0.01 | `WalletBalanceClean`\r\n|          139,396.17 |            7,173.80 |    0.6% |    1,383,390.50 |     430,276.86 |    0.0% |      0.01 | `WalletBalanceDirty`\r\n|            5,055.80 |          197,792.47 |    0.3% |       80,968.10 |      25,539.02 |    0.1% |      0.01 | `WalletBalanceMine`\r\n|                9.79 |      102,152,396.19 |    0.1% |          161.00 |          37.00 |    0.0% |      0.01 | `WalletBalanceWatch`\r\n|        1,552,736.00 |              644.02 |    1.5% |   20,316,315.80 |     618,545.80 |    0.6% |      0.08 | `WalletCreateTxUseOnlyPresetInputs`\r\n|      114,114,732.00 |                8.76 |    0.5% |1,291,047,717.60 | 320,244,602.00 |    0.0% |      6.30 | `WalletCreateTxUsePresetInputsAndCoinSelection`\r\n|      359,315,754.00 |                2.78 |    0.1% |4,339,447,818.00 | 136,619,757.00 |    0.7% |      1.80 | `WalletLoadingDescriptors`\r\n|       98,230,601.00 |               10.18 |    0.1% |  537,688,964.00 |  97,332,266.00 |    0.3% |      0.49 | `WalletLoadingLegacy`\r\n\r\nPR:\r\n\r\n|               ns/op |                op/s |    err% |          ins/op |         bra/op |   miss% |     total | benchmark\r\n|--------------------:|--------------------:|--------:|----------------:|---------------:|--------:|----------:|:----------\r\n|       75,319,868.50 |               13.28 |    0.2% |  863,758,229.00 |  30,892,593.00 |    0.2% |      1.66 | `WalletAvailableCoins`\r\n|            2,367.62 |          422,364.95 |    1.0% |       35,785.05 |       9,893.01 |    0.2% |      0.01 | `WalletBalanceClean`\r\n|            2,685.58 |          372,359.55 |    0.2% |       36,501.05 |      10,027.01 |    0.1% |      0.01 | `WalletBalanceDirty`\r\n|            3,462.24 |          288,830.68 |    2.7% |       35,785.06 |       9,893.01 |    0.3% |      0.01 | `WalletBalanceMine`\r\n|               11.65 |       85,838,176.97 |    0.1% |          180.00 |          42.00 |    0.0% |      0.01 | `WalletBalanceWatch`\r\n|        1,563,092.60 |              639.76 |    1.5% |   20,426,154.40 |     649,953.80 |    0.6% |      0.09 | `WalletCreateTxUseOnlyPresetInputs`\r\n|       58,367,804.40 |               17.13 |    0.9% |  587,164,005.00 | 107,905,843.80 |    0.1% |      3.21 | `WalletCreateTxUsePresetInputsAndCoinSelection`\r\n|      365,302,636.00 |                2.74 |    0.2% |4,349,345,147.00 | 138,730,668.00 |    0.8% |      1.83 | `WalletLoadingDescriptors`\r\n|      124,995,585.00 |                8.00 |    1.2% |  801,998,316.00 | 103,210,721.00 |    0.3% |      0.63 | `WalletLoadingLegacy`\r\n",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 7,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27286",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/27286",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/27286.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/27286.patch"
          },
          "created_at": "2023-03-20T21:02:45Z",
          "updated_at": "2024-03-20T17:33:25Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-22T08:33:05Z",
      "updated_at": "2023-12-22T08:33:05Z",
      "source": {
        "issue": {
          "id": 1503703234,
          "node_id": "PR_kwDOABII585F0rVt",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26728",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26728/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26728/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26728/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/26728",
          "number": 26728,
          "state": "closed",
          "state_reason": null,
          "title": "wallet: Have the wallet store the key for automatically generated descriptors",
          "body": "The wallet currently does not know the master key that was used to generate the automatically generated descriptors. This makes it difficult to add new automatically generated descriptors when new ones are introduced. So instead of losing this information after the descriptors are created, have `CWallet` store it. The xpub will be stored in a new `activehdkey` field. The private key must be one of the keys that is used by the descriptors, and will be extracted upon loading.\r\n\r\nAs this is a new field, wallets will be automatically upgraded upon loading. This loading is backwards compatible and uses a new non-required flag `WALLET_FLAG_GLOBAL_HD_KEY` to signal that the upgrade completed. The upgrade will search for an xpub that is shared by `pkh()`, `wpkh()`, and `sh(wpkh()` descriptors with the derivation pattern that we use. For new wallets, the xpub will be set during descriptor creation rather than trying to reverse engineer it. The flag will be set for all wallets, regardless of whether such an xpub was found or can even exist, in order to indicate that the upgrade will not need to be run in the future.\r\n\r\nThis allows us to have a `gethdkey` command which is useful for those who need a simple way to get an xpub from a wallet. `gethdkey` can also take a boolean parameter to indicate whether it should also output the corresponding xprv.\r\n\r\nSupercedes #23417",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 65,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26728",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/26728",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/26728.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/26728.patch"
          },
          "closed_at": "2024-01-06T00:05:58Z",
          "created_at": "2022-12-19T22:31:05Z",
          "updated_at": "2024-01-10T17:33:56Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-22T08:46:49Z",
      "updated_at": "2023-12-22T08:46:49Z",
      "source": {
        "issue": {
          "id": 1361274567,
          "node_id": "PR_kwDOABII584-VbNV",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26008",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26008/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26008/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26008/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/26008",
          "number": 26008,
          "state": "closed",
          "state_reason": null,
          "title": "wallet: cache IsMine scriptPubKeys to improve performance of descriptor wallets",
          "body": "Wallets that have a ton of non-ranged descriptors (such as a migrated non-HD wallet) perform fairly poorly due to looping through all of the wallet's `ScriptPubKeyMan`s. This is done in various places, such as `IsMine`, and helper functions for fetching a `ScriptPubKeyMan` and a `SolvingProvider`. This also has a bit of a performance impact on standard descriptor wallets, although less noticeable due to the small number of SPKMs.\r\n\r\nAs these functions are based on doing `IsMine` for each `ScriptPubKeyMan`, we can improve this performance by caching `IsMine` scriptPubKeys for all descriptors and use that to determine which `ScriptPubKeyMan` to actually use for those things. This cache is used exclusively and we no longer iterate the SPKMs.\r\n\r\nAlso added a benchmark for `IsMine`.",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "milestone": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/61",
            "html_url": "https://github.com/bitcoin/bitcoin/milestone/61",
            "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/61/labels",
            "id": 9334188,
            "node_id": "MI_kwDOABII584Ajm2s",
            "number": 61,
            "state": "open",
            "title": "27.0",
            "description": "",
            "creator": {
              "login": "sipa",
              "id": 548488,
              "node_id": "MDQ6VXNlcjU0ODQ4OA==",
              "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/sipa",
              "html_url": "https://github.com/sipa",
              "followers_url": "https://api.github.com/users/sipa/followers",
              "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
              "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
              "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
              "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
              "organizations_url": "https://api.github.com/users/sipa/orgs",
              "repos_url": "https://api.github.com/users/sipa/repos",
              "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
              "received_events_url": "https://api.github.com/users/sipa/received_events",
              "type": "User",
              "site_admin": false
            },
            "open_issues": 7,
            "closed_issues": 63,
            "created_at": "2023-04-27T08:01:57Z",
            "updated_at": "2024-03-24T14:15:08Z"
          },
          "locked": false,
          "comments": 24,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26008",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/26008",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/26008.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/26008.patch"
          },
          "closed_at": "2024-02-20T10:17:58Z",
          "created_at": "2022-09-04T23:03:15Z",
          "updated_at": "2024-02-20T10:17:59Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-22T08:47:43Z",
      "updated_at": "2023-12-22T08:47:43Z",
      "source": {
        "issue": {
          "id": 1347108338,
          "node_id": "PR_kwDOABII5849mUDu",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25907",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25907/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25907/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25907/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/25907",
          "number": 25907,
          "state": "closed",
          "state_reason": null,
          "title": "wallet: rpc to add automatically generated descriptors",
          "body": "It is useful to have a RPC that can create and add the automatically generated descriptors (that are normally made during creation) to a wallet. This is especially useful when a new default descriptor has been implemented as it allows wallets created before that time to quickly and easily add that type of descriptor.\r\n\r\nIn particular, descriptor wallets created before Taproot was implemented can use the new `createwalletdescriptor` RPC in order to get a Taproot descriptor.\r\n\r\nFurthermore, to keep the newly generated descriptor in line with the existing descriptors, this PR uses #26728 as it exposes a \"wallet extended key\" for us (in addition to upgrading wallets implemented prior to have a wallet xpub). The newly generated descriptors will use the \"wallet extended key\" stored in `CWallet` that PR adds.\r\n\r\n`createwalletdescriptor` is generic and so it can also be used with the other address types. Of course, it given the same wallet extended key, address type, and internal-ness, it will create the same descriptor. So some refactoring has been done in order to detect that the same descriptor is about to be created, and to avoid overwriting any existing descriptors.",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 18,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25907",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/25907",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/25907.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/25907.patch"
          },
          "closed_at": "2024-01-06T00:06:14Z",
          "created_at": "2022-08-22T23:17:45Z",
          "updated_at": "2024-01-06T00:06:14Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-22T09:01:16Z",
      "updated_at": "2023-12-22T09:01:16Z",
      "source": {
        "issue": {
          "id": 983140832,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NzIyNzY4MTc5",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22838",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22838/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22838/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22838/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/22838",
          "number": 22838,
          "state": "open",
          "state_reason": null,
          "title": "descriptors: Be able to specify change and receiving in a single descriptor string",
          "body": "It is convenient to have a descriptor which specifies both receiving and change addresses in a single string. However, as discussed in https://github.com/bitcoin/bitcoin/issues/17190#issuecomment-895515768, it is not feasible to use a generic multipath specification like BIP 88 due to combinatorial blow up and that it would result in unexpected descriptors.\r\n\r\nTo resolve that problem, this PR proposes a targeted solution which allows only a single pair of 2 derivation indexes to be inserted in the place of a single derivation index. So instead of two descriptor `wpkh(xpub.../0/0/*)` and `wpkh(xpub.../0/1/*)` to represent receive and change addresses, this could be written as `wpkh(xpub.../0/<0;1>/*)`. The multipath specifier is of the form `<NUM;NUM>`. Each `NUM` can have its own hardened specifier, e.g. `<0;1h>` is valid. The multipath specifier can also only appear in one path index in the derivation path.\r\n\r\nThis results in the parser returning two descriptors. The first descriptor uses the first `NUM` in all pairs present, and the second uses the second `NUM`. In our implementation, if a multipath descriptor is not provided, a pair is still returned, but the second element is just `nullptr`.\r\n\r\nThe wallet will not output the multipath descriptors (yet). Furthermore, when a multipath descriptor is imported, it is expanded to the two descriptors and each imported on its own, with the second descriptor being implicitly for internal (change) addresses. There is no change to how the wallet stores or outputs descriptors (yet).\r\n\r\nNote that the path specifier is different from what was proposed. It uses angle brackets and the semicolon because these are unused characters available in the character set and I wanted to avoid conflicts with characters already in use in descriptors.\r\n\r\nCloses #17190 ",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            },
            {
              "id": 98279177,
              "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
              "name": "RPC/REST/ZMQ",
              "color": "0052cc",
              "default": false
            },
            {
              "id": 1482182044,
              "node_id": "MDU6TGFiZWwxNDgyMTgyMDQ0",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Descriptors",
              "name": "Descriptors",
              "description": "",
              "color": "e9f76c",
              "default": false
            },
            {
              "id": 5334691551,
              "node_id": "LA_kwDOABII588AAAABPfju3w",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/CI%20failed",
              "name": "CI failed",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 41,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22838",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/22838",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/22838.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/22838.patch"
          },
          "created_at": "2021-08-30T19:46:34Z",
          "updated_at": "2024-03-22T12:22:35Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-22T09:06:16Z",
      "updated_at": "2023-12-22T09:06:16Z",
      "source": {
        "issue": {
          "id": 930266556,
          "node_id": "MDExOlB1bGxSZXF1ZXN0Njc3OTg5MzM4",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22341",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22341/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22341/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22341/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/22341",
          "number": 22341,
          "state": "closed",
          "state_reason": null,
          "title": "rpc: add path to gethdkey",
          "body": "Depends on #26728.\r\n\r\nThis PR expands the wallet RPC `gethdkey` introduced in #26728. It takes a BIP32 path as argument and returns the xpub, along with the master key fingerprint.\r\n\r\nTo test this PR:\r\n\r\n* create a regular descriptor wallet\r\n* call `getxpub m/86h/0h/0h`\r\n* call `listdescriptors`, compare the xpub in the `tr()` descriptor with the previous step\r\n\r\n## Bigger picture\r\n\r\nThis paves the way for using Bitcoin Core as one signer in a multisig setup. It simplifies the proposed flow in #22067.\r\n\r\nThe eventual flow would be:\r\n1. Create a blank wallet with a seed (either with no descriptors, or where its single key descriptors are not `active`, so they don't get used when calling `getnewaddress`). \r\n2. Call `getxpub m/87h/0h/0h` (as suggested in [BIP 87](https://github.com/bitcoin/bips/blob/master/bip-0087.mediawiki))\r\n3. (Manually, with Specter or with a simple Python utility - TBD): craft a multisig descriptor containing this xpub\r\n4. Call `importdescriptors` which will allow the import if its own fingerprint is recognized (and after checking the xpub)\r\n5. The usual flow with `getnewaddress`, `send` and `walletprocesspsbt` (and their GUI equivalents)\r\n\r\nThis PR makes step (2) possible.\r\n\r\nStep (1) would require a followup, because blank wallets currently can't have a seed. Step 4 would also require a followup,  so that `importdescriptors` treats an `xpub` as if it was an `xpriv`, after checking that it can derive the xpub from the seed (that matches the fingerprint)\r\n\r\nOn the GUI side a wizard could perform the above steps and guide the user, where they either:\r\n* export their own xpub and then import a descriptor from somewhere else (performing some sanity checks); or\r\n* import xpub(s) from other wallets, compose a multisig and get the descriptors for export; or\r\n* get xpub(s) from connected hardware devices and configure a multisig (with or without a key on their machine)",
          "user": {
            "login": "Sjors",
            "id": 10217,
            "node_id": "MDQ6VXNlcjEwMjE3",
            "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Sjors",
            "html_url": "https://github.com/Sjors",
            "followers_url": "https://api.github.com/users/Sjors/followers",
            "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
            "organizations_url": "https://api.github.com/users/Sjors/orgs",
            "repos_url": "https://api.github.com/users/Sjors/repos",
            "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/Sjors/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            },
            {
              "id": 98279177,
              "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
              "name": "RPC/REST/ZMQ",
              "color": "0052cc",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 36,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22341",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/22341",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/22341.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/22341.patch"
          },
          "closed_at": "2024-02-13T09:49:14Z",
          "created_at": "2021-06-25T15:12:03Z",
          "updated_at": "2024-02-13T09:49:15Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11328920111,
      "node_id": "HRFPE_lADOABII5856YTyLzwAAAAKjQZov",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11328920111",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-22T19:08:53Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11329093832,
      "node_id": "HRFPE_lADOABII5856YTyLzwAAAAKjREDI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11329093832",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-22T19:46:50Z"
    },
    {
      "event": "unlabeled",
      "id": 11329345966,
      "node_id": "UNLE_lADOABII5856YTyLzwAAAAKjSBmu",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11329345966",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-22T20:44:43Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11329633135,
      "node_id": "HRFPE_lADOABII5856YTyLzwAAAAKjTHtv",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11329633135",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-22T22:08:38Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11329641705,
      "node_id": "HRFPE_lADOABII5856YTyLzwAAAAKjTJzp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11329641705",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-22T22:11:43Z"
    },
    {
      "event": "labeled",
      "id": 11329641992,
      "node_id": "LE_lADOABII5856YTyLzwAAAAKjTJ4I",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11329641992",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-22T22:11:48Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "unlabeled",
      "id": 11329755579,
      "node_id": "UNLE_lADOABII5856YTyLzwAAAAKjTlm7",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11329755579",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-22T22:53:54Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-22T23:40:16Z",
      "updated_at": "2023-12-22T23:40:16Z",
      "source": {
        "issue": {
          "id": 2054578166,
          "node_id": "PR_kwDOABII585ir-jz",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29136",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29136/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29136/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29136/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/29136",
          "number": 29136,
          "state": "open",
          "state_reason": null,
          "title": "wallet: `addhdkey` RPC to add just keys to wallets via new `void(KEY)` descriptor",
          "body": "It is sometimes useful for the wallet to have keys that it can sign with but are not (initially) involved in any scripts, e.g. for setting up a multisig. Ryanofsky [suggested](https://github.com/bitcoin/bitcoin/pull/26728#issuecomment-1867721948) A `void(KEY)` descriptor which allows for a key to be specified, but produces no scripts. These can be imported into the wallet, and subsequently retrieved with `gethdkeys`. Additionally, `listdescriptors` will output these descriptors so that they can be easily backed up.\r\n\r\nIn order to make it easier for people to add HD keys to their wallet, and to generate a new one if they want to rotate their descriptors, an `addhdkey` RPC is also added. Without arguments, it will generate a new HD key and add it to the wallet via a `void(KEY)` descriptor. If provided a private key, it will construct the descriptor and add it to the wallet.\r\n\r\nSee also: https://github.com/bitcoin/bitcoin/pull/26728#issuecomment-1866961865\r\n\r\nBased on #29130 as `gethdkeys` is useful for testing this.",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 4,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29136",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/29136",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/29136.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/29136.patch"
          },
          "created_at": "2023-12-22T23:40:15Z",
          "updated_at": "2024-03-20T13:19:02Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "reviewed",
      "id": 1795206875,
      "node_id": "PRR_kwDOABII585rAK7b",
      "url": null,
      "actor": null,
      "commit_id": "08b9b414d9f4b4b65bf5ec0ff875889997631a79",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK 08b9b414d9f4b4b65bf5ec0ff875889997631a79. I think I'm maybe halfway through reviewing, but here are my comments so far.\r\n",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#pullrequestreview-1795206875",
      "submitted_at": "2023-12-23T00:03:45Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11329932659,
      "node_id": "HRFPE_lADOABII5856YTyLzwAAAAKjUQ1z",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11329932659",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-23T00:24:11Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11330085020,
      "node_id": "HRFPE_lADOABII5856YTyLzwAAAAKjU2Cc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11330085020",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-23T02:10:40Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11330097569,
      "node_id": "HRFPE_lADOABII5856YTyLzwAAAAKjU5Gh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11330097569",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-23T02:22:33Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11330108716,
      "node_id": "HRFPE_lADOABII5856YTyLzwAAAAKjU70s",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11330108716",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-23T02:32:37Z"
    },
    {
      "event": "labeled",
      "id": 11330174380,
      "node_id": "LE_lADOABII5856YTyLzwAAAAKjVL2s",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11330174380",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-23T03:17:37Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 1795440020,
      "node_id": "PRR_kwDOABII585rBD2U",
      "url": null,
      "actor": null,
      "commit_id": "e0ad5bce210681c40eebd892bcfbca25c1c63136",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#pullrequestreview-1795440020",
      "submitted_at": "2023-12-23T14:07:12Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
    },
    {
      "event": "subscribed",
      "id": 11333070166,
      "node_id": "SE_lADOABII5856YTyLzwAAAAKjgO1W",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11333070166",
      "actor": {
        "login": "124maa",
        "id": 139474901,
        "node_id": "U_kgDOCFA31Q",
        "avatar_url": "https://avatars.githubusercontent.com/u/139474901?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/124maa",
        "html_url": "https://github.com/124maa",
        "followers_url": "https://api.github.com/users/124maa/followers",
        "following_url": "https://api.github.com/users/124maa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/124maa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/124maa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/124maa/subscriptions",
        "organizations_url": "https://api.github.com/users/124maa/orgs",
        "repos_url": "https://api.github.com/users/124maa/repos",
        "events_url": "https://api.github.com/users/124maa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/124maa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-24T21:55:17Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-27T01:22:08Z",
      "updated_at": "2023-12-27T01:22:08Z",
      "source": {
        "issue": {
          "id": 2052431458,
          "node_id": "PR_kwDOABII585iknFs",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29129",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29129/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29129/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29129/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/29129",
          "number": 29129,
          "state": "open",
          "state_reason": null,
          "title": "wallet, rpc: add BIP44 `account` in `createwallet`",
          "body": "This PR adds an `account` parameter in `createwallet` RPC. It's the\r\nBIP44 account that will be used in `SetupDescriptorScriptPubKeyMans`\r\nto fetch the descriptors from the external signer.",
          "user": {
            "login": "brunoerg",
            "id": 19480819,
            "node_id": "MDQ6VXNlcjE5NDgwODE5",
            "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/brunoerg",
            "html_url": "https://github.com/brunoerg",
            "followers_url": "https://api.github.com/users/brunoerg/followers",
            "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
            "organizations_url": "https://api.github.com/users/brunoerg/orgs",
            "repos_url": "https://api.github.com/users/brunoerg/repos",
            "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/brunoerg/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 5334691551,
              "node_id": "LA_kwDOABII588AAAABPfju3w",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/CI%20failed",
              "name": "CI failed",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 8,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29129",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/29129",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/29129.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/29129.patch"
          },
          "created_at": "2023-12-21T13:31:11Z",
          "updated_at": "2024-03-19T03:56:13Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "UserError0815",
        "id": 125211937,
        "node_id": "U_kgDOB3aVIQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/125211937?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/UserError0815",
        "html_url": "https://github.com/UserError0815",
        "followers_url": "https://api.github.com/users/UserError0815/followers",
        "following_url": "https://api.github.com/users/UserError0815/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/UserError0815/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/UserError0815/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/UserError0815/subscriptions",
        "organizations_url": "https://api.github.com/users/UserError0815/orgs",
        "repos_url": "https://api.github.com/users/UserError0815/repos",
        "events_url": "https://api.github.com/users/UserError0815/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/UserError0815/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-27T20:07:56Z",
      "updated_at": "2023-12-27T20:07:56Z",
      "source": {
        "issue": {
          "id": 2057631599,
          "node_id": "I_kwDOAyUWps56pPdv",
          "url": "https://api.github.com/repos/syscoin/syscoin/issues/538",
          "repository_url": "https://api.github.com/repos/syscoin/syscoin",
          "labels_url": "https://api.github.com/repos/syscoin/syscoin/issues/538/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/syscoin/syscoin/issues/538/comments",
          "events_url": "https://api.github.com/repos/syscoin/syscoin/issues/538/events",
          "html_url": "https://github.com/syscoin/syscoin/issues/538",
          "number": 538,
          "state": "open",
          "state_reason": null,
          "title": "Feature request: Allow users to insert seed / passphrases / master hd key",
          "body": "### Please describe the feature you'd like to see added.\r\n\r\nHello\r\n\r\nI miss the ability to insert my own passphrase while creating a new wallet.\r\n\r\n### Is your feature related to a problem, if so please describe it.\r\n\r\nI am currently using a blank wallet with a single private key from a specific seed that is imported with the console which has no hdseed*.\r\n\r\n**The support for the legacy wallets will be removed in the future.**\r\n\r\nMy concern is how can i create a wallet with my own private key?\r\nOr will my current wallet, a blank wallet+single private key (no hdseed), work in the future?\r\n\r\n![warning](https://i.imgur.com/NxcEqIW.png)\r\n\r\nI have no trust in wallets that randomly created. My keys my wallet.\r\n\r\n*console: sethdseed is not the solution because the private key i use is derived from a seed word. And it will generate other private keys rather than my.\r\n\r\n### Describe the solution you'd like\r\n\r\nThis is an example of how Raven Core solved it with the extended seed words.\r\n\r\n![wallet](https://i.imgur.com/OKmtKYJ.png)\r\n\r\n\r\n### Describe any alternatives you've considered\r\n\r\n_No response_\r\n\r\n### Please leave any additional context\r\n\r\n_No response_",
          "user": {
            "login": "UserError0815",
            "id": 125211937,
            "node_id": "U_kgDOB3aVIQ",
            "avatar_url": "https://avatars.githubusercontent.com/u/125211937?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/UserError0815",
            "html_url": "https://github.com/UserError0815",
            "followers_url": "https://api.github.com/users/UserError0815/followers",
            "following_url": "https://api.github.com/users/UserError0815/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/UserError0815/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/UserError0815/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/UserError0815/subscriptions",
            "organizations_url": "https://api.github.com/users/UserError0815/orgs",
            "repos_url": "https://api.github.com/users/UserError0815/repos",
            "events_url": "https://api.github.com/users/UserError0815/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/UserError0815/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "NONE",
          "locked": false,
          "comments": 6,
          "created_at": "2023-12-27T17:45:47Z",
          "updated_at": "2023-12-29T23:15:43Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "UserError0815",
        "id": 125211937,
        "node_id": "U_kgDOB3aVIQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/125211937?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/UserError0815",
        "html_url": "https://github.com/UserError0815",
        "followers_url": "https://api.github.com/users/UserError0815/followers",
        "following_url": "https://api.github.com/users/UserError0815/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/UserError0815/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/UserError0815/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/UserError0815/subscriptions",
        "organizations_url": "https://api.github.com/users/UserError0815/orgs",
        "repos_url": "https://api.github.com/users/UserError0815/repos",
        "events_url": "https://api.github.com/users/UserError0815/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/UserError0815/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-27T20:13:54Z",
      "updated_at": "2023-12-27T20:13:54Z",
      "source": {
        "issue": {
          "id": 2057572584,
          "node_id": "I_kwDOBVv5N856pBDo",
          "url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/issues/542",
          "repository_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc",
          "labels_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/issues/542/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/issues/542/comments",
          "events_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/issues/542/events",
          "html_url": "https://github.com/Bitcoin-ABC/bitcoin-abc/issues/542",
          "number": 542,
          "state": "open",
          "state_reason": null,
          "title": "Feature request: Allow users to insert seed / passphrases / master hd key",
          "body": "Hello\r\n\r\nI miss the ability to insert my own passphrase while creating a new wallet.\r\nI am currently using a blank wallet with a single private key that is imported with the console which has no hdseed.\r\n\r\nThis is an example of how Raven Core solved it with the extended seed words.\r\n\r\nThank you very much\r\n\r\n\r\n![wallet](https://i.imgur.com/GNaoZtc.png)\r\n",
          "user": {
            "login": "UserError0815",
            "id": 125211937,
            "node_id": "U_kgDOB3aVIQ",
            "avatar_url": "https://avatars.githubusercontent.com/u/125211937?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/UserError0815",
            "html_url": "https://github.com/UserError0815",
            "followers_url": "https://api.github.com/users/UserError0815/followers",
            "following_url": "https://api.github.com/users/UserError0815/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/UserError0815/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/UserError0815/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/UserError0815/subscriptions",
            "organizations_url": "https://api.github.com/users/UserError0815/orgs",
            "repos_url": "https://api.github.com/users/UserError0815/repos",
            "events_url": "https://api.github.com/users/UserError0815/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/UserError0815/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "NONE",
          "locked": false,
          "comments": 1,
          "created_at": "2023-12-27T16:34:07Z",
          "updated_at": "2023-12-28T23:26:03Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11374789881,
      "node_id": "HRFPE_lADOABII5856YTyLzwAAAAKl_YT5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11374789881",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-03T00:30:42Z"
    },
    {
      "event": "unlabeled",
      "id": 11374959478,
      "node_id": "UNLE_lADOABII5856YTyLzwAAAAKmABt2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11374959478",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-03T01:25:32Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 1809920961,
      "node_id": "PRR_kwDOABII585r4TPB",
      "url": null,
      "actor": null,
      "commit_id": "c10150b6150083440af4f0aa1110c8aa99ba2dc8",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Code review ACK c10150b6150083440af4f0aa1110c8aa99ba2dc8. Left a lot of suggestions, but none are important. Overall this looks great and is very cleanly implemented.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#pullrequestreview-1809920961",
      "submitted_at": "2024-01-09T19:11:55Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11437162298,
      "node_id": "HRFPE_lADOABII5856YTyLzwAAAAKptT86",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11437162298",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-10T00:27:05Z"
    },
    {
      "event": "reviewed",
      "id": 1813747756,
      "node_id": "PRR_kwDOABII585sG5gs",
      "url": null,
      "actor": null,
      "commit_id": "b55b46f07ae60bbd51ed9abb2f8c5b3249af60f2",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Code review ACK b55b46f07ae60bbd51ed9abb2f8c5b3249af60f2. Looks great! Just suggested changes since last review",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#pullrequestreview-1813747756",
      "submitted_at": "2024-01-10T17:28:11Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
    },
    {
      "event": "labeled",
      "id": 11491130818,
      "node_id": "LE_lADOABII5856YTyLzwAAAAKs7L3C",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11491130818",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-15T18:18:46Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-16T07:37:02Z",
      "updated_at": "2024-01-16T07:37:02Z",
      "source": {
        "issue": {
          "id": 1833542215,
          "node_id": "PR_kwDOABII585XB4Gh",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28201",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28201/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28201/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28201/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/28201",
          "number": 28201,
          "state": "open",
          "state_reason": null,
          "title": "Silent Payments: sending",
          "body": "This PR is part of integrating silent payments into Bitcoin Core. Status and tracking for the project is managed in https://github.com/bitcoin/bitcoin/issues/28536\r\n\r\nThis PR depends on #28122 and is marked as a draft until it is merged. If interested in those commits, please review on #28122\r\n\r\n## Sending \r\n### Silent Payments logic\r\n\r\nThe main focus of this PR is:\r\n\r\n* Applying the Taptweak to a taproot internal private key (this is a copy-paste of the code for applying the taptweak in the signing process)\r\n* Getting a private key from a given `scriptPubKey`\r\n* Creating silent payment outputs\r\n* Applying the created scriptPubKeys back to the vector of `CRecipients`\r\n\r\nThe functions are then used together to create silent payment outputs during `CreateTransactionInternal`.\r\n\r\n### Final steps\r\n\r\nThe last commits ensure that:\r\n\r\n* Coin selection is silent payments aware and knows to exclude taproot script path spends and inputs with unknown witness when funding a transaction which pays to a silent payment address\r\n* The change output type is correctly chosen when paying to a silent payment address\r\n* Functional tests\r\n",
          "user": {
            "login": "josibake",
            "id": 7444140,
            "node_id": "MDQ6VXNlcjc0NDQxNDA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/josibake",
            "html_url": "https://github.com/josibake",
            "followers_url": "https://api.github.com/users/josibake/followers",
            "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
            "organizations_url": "https://api.github.com/users/josibake/orgs",
            "repos_url": "https://api.github.com/users/josibake/repos",
            "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/josibake/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            },
            {
              "id": 249581124,
              "node_id": "MDU6TGFiZWwyNDk1ODExMjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Privacy",
              "name": "Privacy",
              "color": "5319e7",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 6,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28201",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/28201",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/28201.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/28201.patch"
          },
          "created_at": "2023-08-02T16:37:04Z",
          "updated_at": "2024-02-20T11:53:04Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-22T03:33:46Z",
      "updated_at": "2024-01-22T03:33:46Z",
      "source": {
        "issue": {
          "id": 1359383041,
          "node_id": "PR_kwDOABII584-PV2_",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25979",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25979/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25979/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25979/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/25979",
          "number": 25979,
          "state": "open",
          "state_reason": null,
          "title": "[WIP] wallet: standardize change output detection process",
          "body": "Depends on https://github.com/bitcoin/bitcoin/pull/27601, please go there first.\r\n\r\nThis work aims to define, and implement a base standard mechanism to\r\ndetect individual change outputs.\r\n\r\n### Context\r\n\r\nCurrently, the wallet detects whether an output is change or not based\r\non data stored in the address book.\r\n\r\nThere is no notion of “change outputs”, the wallet detects change scripts.\r\n\r\nConnoting that any address book record modification has implications\r\non all the historical outputs related to that particular destination. Meaning\r\nthat all those outputs can either be change or not. There is no middle-ground\r\ngranular distinction.\r\n\r\n#### How Change Detection Currently Works?\r\n\r\nThe wallet walks-through the transaction outputs, extracts the script\r\ndestination and verify the following two points:\r\n\r\n1) If the destination doesn't exist in the address book, then the script\r\n    is a \"change address\".\r\n   \r\n2) If the destination exists in the address book, but it doesn't have a\r\n     label, then the script is a \"change address\".\r\n\r\n### Motivation\r\n\r\nThere are a good number of problems in the current approach:\r\n\r\n- We make the wallet dependent on an external structure, with separate storage.\r\n   Which has to be updated and maintained along with the wallet state.\r\n\r\n- It cannot be maintained nor recovered across different wallet instances.\r\n   Cannot re-create the, possibly custom, address book data only by importing\r\n   the wallet descriptor string.\r\n\r\n- As the address book is an structure that the user can freely modify, the change\r\n   detection process might differ through different wallets.\r\n \r\n- The current rudimentary assumptions of \"no address book entry\" or \"no label set for the address book entry\"\r\n  to denote that certain script destination is change or not can easily be broken:\r\n  E.g. derive an address from one of the wallet’s external paths manually. Then send coins to it.\r\n  As the receive destination wasn't created inside the wallet, the wallet has no associated address book entry.\r\n  So, the reception is invalidly detected as change (added a test case for it).\r\n\r\n- The wallet can't detect change outputs on more complex scripts such as multi-sig change outputs.\r\n\r\n- The wallet is not able to detect change outputs going to an internal address if the internal address has a label.\r\n  (E.g. the user can manually set a label for the internal address and, doing that, make that all the change\r\n  outputs, in the wallet history, that were sent to the destination are no longer detected as change).\r\n\r\n- There isn’t a way to distinguish the external reception of coins into an internal address. Coins reception on any\r\n   internal address are always detected as change.\r\n\r\n### New Change Detection Mechanism Goals\r\n\r\nAiming to:\r\n\r\n* Define a base mechanism to align different wallet implementations. Preventing each piece of software\r\n  from diverging on the basic change outputs distinction.\r\n\r\n* Detect change outputs on-demand without requiring to maintain an external data structure synced with the\r\n   latest wallet state.\r\n\r\n* Independently, and accurately, detect change outputs regardless data stored in structures that the user\r\n   can freely modify.\r\n\r\n* Granular distinction between change vs non-change outputs that were sent to the same internal address.\r\n  E.g. the reception of coins, from an external source, on internal addresses will not longer be detected\r\n  as change anymore.\r\n\r\n* Expand the change detection to more complex scripts such as a multi-sig protected addresses. (While they\r\n  are added into the wallet on an internal spkm)\r\n\r\n#### Change Output Detection Rules\r\n\r\nA transaction output is change if it fulfills the following points:\r\n\r\n1) At least one of the parent transaction inputs is from the wallet. (If none of them are, then the wallet is receiving coins\r\n    on an internal address).\r\n\r\n2) The script extracted destination is from the wallet and is located in one of the internal script pub key manager.\r\n    (e.g. derived from an internal derivation path)\r\n\r\n#### What about legacy wallets?\r\n\r\nIf the legacy wallet is HD post-split, we have an internal derivation path, so we can follow the same process as\r\ndescriptors wallet. Unless the destination is on the pre-split key pool, in which case, we fallback to the follow-up\r\ncase.\r\n\r\nIf the legacy wallet is pre-split, we continue using the address book as we either have an HD wallet with keys\r\nderived only on the external path, or we are using raw keypool.\r\n\r\n———————————————————————\r\n\r\n#### Extra Note\r\nThis PR, in about 85% at least, is about expanding the current test coverage for the change output detection area.\r\n\r\n#### TO DO (still WIP):\r\n\r\n* [x] Save “internal” flag on non-active descriptors so the wallet can use them on the change detection process.\r\n   (which will fix the currently failing test cases).\r\n* [ ] Re-organize commits so tests always pass.\r\n* [ ] Verify backwards compatibility.",
          "user": {
            "login": "furszy",
            "id": 5377650,
            "node_id": "MDQ6VXNlcjUzNzc2NTA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/furszy",
            "html_url": "https://github.com/furszy",
            "followers_url": "https://api.github.com/users/furszy/followers",
            "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
            "organizations_url": "https://api.github.com/users/furszy/orgs",
            "repos_url": "https://api.github.com/users/furszy/repos",
            "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/furszy/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            },
            {
              "id": 5334691551,
              "node_id": "LA_kwDOABII588AAAABPfju3w",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/CI%20failed",
              "name": "CI failed",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 9,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25979",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/25979",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/25979.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/25979.patch"
          },
          "created_at": "2022-09-01T20:40:07Z",
          "updated_at": "2024-03-20T16:59:29Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-12T11:28:59Z",
      "updated_at": "2024-02-12T11:28:59Z",
      "source": {
        "issue": {
          "id": 1117366052,
          "node_id": "I_kwDOABII585Cmack",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24193",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24193/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24193/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24193/events",
          "html_url": "https://github.com/bitcoin/bitcoin/issues/24193",
          "number": 24193,
          "state": "open",
          "state_reason": null,
          "title": "Add taproot descriptor to existing descriptor wallet",
          "body": "Fresh descriptor wallets will have a `tr()` descriptor as of v23.0, but existing ones won't.\r\n\r\nProbably needs #23417.",
          "user": {
            "login": "Sjors",
            "id": 10217,
            "node_id": "MDQ6VXNlcjEwMjE3",
            "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Sjors",
            "html_url": "https://github.com/Sjors",
            "followers_url": "https://api.github.com/users/Sjors/followers",
            "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
            "organizations_url": "https://api.github.com/users/Sjors/orgs",
            "repos_url": "https://api.github.com/users/Sjors/repos",
            "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/Sjors/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 64583,
              "node_id": "MDU6TGFiZWw2NDU4Mw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Feature",
              "name": "Feature",
              "color": "7cf575",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 2,
          "created_at": "2022-01-28T12:47:43Z",
          "updated_at": "2024-02-12T11:29:00Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 1938577167,
      "node_id": "IC_kwDOABII585zjFcP",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1938577167",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-12T12:21:20Z",
      "updated_at": "2024-02-12T12:21:20Z",
      "author_association": "MEMBER",
      "body": "```\r\nwallet/scriptpubkeyman.cpp:2161:42: error: no member named 'GetEncryptionKey' in 'wallet::WalletStorage'\r\n        if (!Assume(DecryptKey(m_storage.GetEncryptionKey(), crypted_secret, it->second.first, key))) {\r\n                               ~~~~~~~~~ ^",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#issuecomment-1938577167",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29130"
    },
    {
      "event": "reviewed",
      "id": 1877425600,
      "node_id": "PRR_kwDOABII585v5z3A",
      "url": null,
      "actor": null,
      "commit_id": "b55b46f07ae60bbd51ed9abb2f8c5b3249af60f2",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Concept ACK. This removes a lot of the complexity compared to #26728.\r\n\r\nDid a light code review of b55b46f07ae60bbd51ed9abb2f8c5b3249af60f2 which looks good, though clearly CI is unhappy. ",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#pullrequestreview-1877425600",
      "submitted_at": "2024-02-13T12:21:28Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11792832551,
      "node_id": "HRFPE_lADOABII5856YTyLzwAAAAK-6Fgn",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11792832551",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-13T18:53:55Z"
    },
    {
      "event": "commented",
      "id": 1942188367,
      "node_id": "IC_kwDOABII585zw3FP",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1942188367",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-13T18:54:12Z",
      "updated_at": "2024-02-13T18:54:12Z",
      "author_association": "MEMBER",
      "body": "Rebased for silent merge conflict.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#issuecomment-1942188367",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29130"
    },
    {
      "event": "unlabeled",
      "id": 11794521234,
      "node_id": "UNLE_lADOABII5856YTyLzwAAAAK_AhyS",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11794521234",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-13T22:08:04Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 1882763867,
      "node_id": "PRR_kwDOABII585wOLJb",
      "url": null,
      "actor": null,
      "commit_id": "0a3b5739ce8b9a2d219bcf3208069436c66fd5bb",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Code review ACK 0a3b5739ce8b9a2d219bcf3208069436c66fd5bb. Just rebase and some python test cleanups since last review",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#pullrequestreview-1882763867",
      "submitted_at": "2024-02-15T13:28:04Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
    },
    {
      "event": "review_requested",
      "id": 11815484147,
      "node_id": "RRE_lADOABII5856YTyLzwAAAALAQfrz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11815484147",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-15T13:28:08Z",
      "requested_reviewer": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "commented",
      "id": 1946159253,
      "node_id": "IC_kwDOABII5850AAiV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1946159253",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-15T14:02:51Z",
      "updated_at": "2024-02-15T14:02:51Z",
      "author_association": "MEMBER",
      "body": "Light utACK 0a3b5739ce8b9a2d219bcf3208069436c66fd5bb",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#issuecomment-1946159253",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29130"
    },
    {
      "event": "review_request_removed",
      "id": 11815932701,
      "node_id": "RRRE_lADOABII5856YTyLzwAAAALASNMd",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11815932701",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-15T14:02:56Z",
      "requested_reviewer": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "labeled",
      "id": 11860598085,
      "node_id": "LE_lADOABII5856YTyLzwAAAALC8l1F",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11860598085",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-20T11:45:35Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGVmNjc0NTg3OWQ4N2NkYjZmMTA2MTMzNzg2N2E2ODkxNjdlOTY1YTE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ef6745879d87cdb6f1061337867a689167e965a1",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/ef6745879d87cdb6f1061337867a689167e965a1",
      "tree": {
        "sha": "a01513193f5f7f4c4e54465b89373893964f79b3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a01513193f5f7f4c4e54465b89373893964f79b3"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/45b2a91897ca8f4a3e0c1adcfb30cf570971da4e",
          "sha": "45b2a91897ca8f4a3e0c1adcfb30cf570971da4e",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/45b2a91897ca8f4a3e0c1adcfb30cf570971da4e"
        }
      ],
      "message": "key: Add constructor for CExtKey that takes CExtPubKey and CKey\n\nWe often need to construct a CExtKey given an CExtPubKey and CKey, so\nimplement a constructor that does that for us.",
      "committer": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2024-02-20T16:20:58Z"
      },
      "author": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2023-12-20T23:11:41Z"
      },
      "sha": "ef6745879d87cdb6f1061337867a689167e965a1"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGZlNjc4NDE0NjRjYzBmOTcwYTFjMjMzY2FiYTkyY2I3OGU5Yzc4ZGM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fe67841464cc0f970a1c233caba92cb78e9c78dc",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/fe67841464cc0f970a1c233caba92cb78e9c78dc",
      "tree": {
        "sha": "d2219d5dac15ccb6772ef596f25a8fa51b2535ff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d2219d5dac15ccb6772ef596f25a8fa51b2535ff"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ef6745879d87cdb6f1061337867a689167e965a1",
          "sha": "ef6745879d87cdb6f1061337867a689167e965a1",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/ef6745879d87cdb6f1061337867a689167e965a1"
        }
      ],
      "message": "descriptor: Be able to get the pubkeys involved in a descriptor",
      "committer": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2024-02-20T16:20:58Z"
      },
      "author": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2023-12-20T23:11:49Z"
      },
      "sha": "fe67841464cc0f970a1c233caba92cb78e9c78dc"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11864479293,
      "node_id": "HRFPE_lADOABII5856YTyLzwAAAALDLZY9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11864479293",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-20T16:35:37Z"
    },
    {
      "event": "unlabeled",
      "id": 11865612316,
      "node_id": "UNLE_lADOABII5856YTyLzwAAAALDPuAc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11865612316",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-20T18:11:21Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 1959130540,
      "node_id": "IC_kwDOABII5850xfWs",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1959130540",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-22T10:19:54Z",
      "updated_at": "2024-02-22T10:19:54Z",
      "author_association": "MEMBER",
      "body": "re-utACK 36c82cd0e23b4149fb145d2dd271ab1de385c53a",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#issuecomment-1959130540",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29130"
    },
    {
      "event": "review_requested",
      "id": 11888995276,
      "node_id": "RRE_lADOABII5856YTyLzwAAAALEo6vM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11888995276",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-22T10:19:59Z",
      "requested_reviewer": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "reviewed",
      "id": 1898607527,
      "node_id": "PRR_kwDOABII585xKnOn",
      "url": null,
      "actor": null,
      "commit_id": "36c82cd0e23b4149fb145d2dd271ab1de385c53a",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Code review ACK 36c82cd0e23b4149fb145d2dd271ab1de385c53a. No changes since last review other than rebase",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#pullrequestreview-1898607527",
      "submitted_at": "2024-02-23T17:26:53Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
    },
    {
      "event": "reviewed",
      "id": 1921911495,
      "node_id": "PRR_kwDOABII585yjgrH",
      "url": null,
      "actor": null,
      "commit_id": "36c82cd0e23b4149fb145d2dd271ab1de385c53a",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "body": "",
      "user": {
        "login": "Pelambrds",
        "id": 117357534,
        "node_id": "U_kgDOBv673g",
        "avatar_url": "https://avatars.githubusercontent.com/u/117357534?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Pelambrds",
        "html_url": "https://github.com/Pelambrds",
        "followers_url": "https://api.github.com/users/Pelambrds/followers",
        "following_url": "https://api.github.com/users/Pelambrds/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Pelambrds/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Pelambrds/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Pelambrds/subscriptions",
        "organizations_url": "https://api.github.com/users/Pelambrds/orgs",
        "repos_url": "https://api.github.com/users/Pelambrds/repos",
        "events_url": "https://api.github.com/users/Pelambrds/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Pelambrds/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#pullrequestreview-1921911495",
      "submitted_at": "2024-03-07T09:27:05Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
    },
    {
      "event": "reviewed",
      "id": 1934278266,
      "node_id": "PRR_kwDOABII585zSr56",
      "url": null,
      "actor": null,
      "commit_id": "36c82cd0e23b4149fb145d2dd271ab1de385c53a",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Concept ACK, haven't finished yet. Only very small things so far.\r\nWill continue.",
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#pullrequestreview-1934278266",
      "submitted_at": "2024-03-16T21:37:07Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
    },
    {
      "event": "reviewed",
      "id": 1943234354,
      "node_id": "PRR_kwDOABII585z02cy",
      "url": null,
      "actor": null,
      "commit_id": "36c82cd0e23b4149fb145d2dd271ab1de385c53a",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "The introduced `gethdkeys` returns the descriptors in \"public\" format (the xpub at depth 0) while the existing `listdescriptors` returns them normalized (the xpub at the last hardened child).\r\n\r\nUsers will not be able to derive the last hardened child only with the root xpub info on the descriptor. Is there any rationale behind this or was just an overlook?",
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#pullrequestreview-1943234354",
      "submitted_at": "2024-03-18T14:22:19Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
    },
    {
      "event": "commented",
      "id": 2004295911,
      "node_id": "IC_kwDOABII5853dyDn",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2004295911",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-18T15:52:09Z",
      "updated_at": "2024-03-18T15:52:09Z",
      "author_association": "MEMBER",
      "body": "> Users will not be able to derive the last hardened child only with the root xpub info on the descriptor. Is there any rationale behind this or was just an overlook?\r\n\r\nThis was intentional since the last hardened child is different for each script type. I think future work, such as a revival of #22341, can make it possible to get keys at other derivation paths.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#issuecomment-2004295911",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29130"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGZhNmEyNTk5ODViNjEyMzVlYmMyMWVhZTJhNzYwMTRjYzk0MzdkNWY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa6a259985b61235ebc21eae2a76014cc9437d5f",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/fa6a259985b61235ebc21eae2a76014cc9437d5f",
      "tree": {
        "sha": "56739826534161587b26879d9b87fc7bfefa447f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/56739826534161587b26879d9b87fc7bfefa447f"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fe67841464cc0f970a1c233caba92cb78e9c78dc",
          "sha": "fe67841464cc0f970a1c233caba92cb78e9c78dc",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/fe67841464cc0f970a1c233caba92cb78e9c78dc"
        }
      ],
      "message": "desc spkm: Add functions to retrieve specific private keys",
      "committer": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2024-03-18T15:53:20Z"
      },
      "author": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2023-12-21T22:27:51Z"
      },
      "sha": "fa6a259985b61235ebc21eae2a76014cc9437d5f"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDY2NjMyZTVjMjRjMWI1OWFmZWYxZTg5YjU2MmZiZDAxMTdhYjZlZjU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/66632e5c24c1b59afef1e89b562fbd0117ab6ef5",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/66632e5c24c1b59afef1e89b562fbd0117ab6ef5",
      "tree": {
        "sha": "ab85f866628ce9003255b3ef00e42cc881e3499b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ab85f866628ce9003255b3ef00e42cc881e3499b"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa6a259985b61235ebc21eae2a76014cc9437d5f",
          "sha": "fa6a259985b61235ebc21eae2a76014cc9437d5f",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/fa6a259985b61235ebc21eae2a76014cc9437d5f"
        }
      ],
      "message": "wallet: Add IsActiveScriptPubKeyMan\n\nGiven a ScriptPubKeyMan, it's useful to ask the wallet whether it is\ncurrently active.",
      "committer": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2024-03-18T15:53:23Z"
      },
      "author": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2023-12-21T22:33:19Z"
      },
      "sha": "66632e5c24c1b59afef1e89b562fbd0117ab6ef5"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12155286941,
      "node_id": "HRFPE_lADOABII5856YTyLzwAAAALUgvWd",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12155286941",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-18T16:21:01Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-19T00:10:56Z",
      "updated_at": "2024-03-19T00:10:56Z",
      "source": {
        "issue": {
          "id": 2193536131,
          "node_id": "PR_kwDOABII585qA2aJ",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29675",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29675/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29675/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29675/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/29675",
          "number": 29675,
          "state": "open",
          "state_reason": null,
          "title": "wallet: Be able to receive and spend inputs involving MuSig2 aggregate keys",
          "body": "This PR implements the [proposed](https://github.com/bitcoin/bips/pull/1540) MuSig2 descriptors, derivation, and PSBT fields so that the wallet can receive and spend from taproot addresses that have keys involving a MuSig2 aggregate key.\r\n\r\nThis pulls in (an older version of) the musig module in libsecp (https://github.com/bitcoin-core/secp256k1/pull/1479) in order to do all of the necessary MuSig2 computation.\r\n\r\nAn open question is whether the approach for handling the secnonces is ideal and safe. Since nonces must not be reused, this PR holds them exclusively in memory, so a restart of the software will require a restart of the MuSig2 signing process. Additionally, the current MuSig API in libsecp basically involves us holding onto and passing around an opaque libsecp object. There may be some additional work there to make the code more ergonomic.",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            },
            {
              "id": 5334691551,
              "node_id": "LA_kwDOABII588AAAABPfju3w",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/CI%20failed",
              "name": "CI failed",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 5,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/29675",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/29675.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/29675.patch"
          },
          "created_at": "2024-03-18T22:32:37Z",
          "updated_at": "2024-03-22T15:43:17Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "reviewed",
      "id": 1946397243,
      "node_id": "PRR_kwDOABII5850A6o7",
      "url": null,
      "actor": null,
      "commit_id": "bb1b405aa56929b8cc6e43478ef1a341f9957f5e",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "> > Users will not be able to derive the last hardened child only with the root xpub info on the descriptor. Is there any rationale behind this or was just an overlook?\r\n> \r\n> This was intentional since the last hardened child is different for each script type. I think future work, such as a revival of #22341, can make it possible to get keys at other derivation paths.\r\n\r\nBut how the current output is useful? No outputted descriptor can be imported in another wallet. The wallet will throw a \"Cannot expand descriptor. Probably because of hardened derivations without private keys provided\". What do you think about also retrieving the normalized descriptor in another field `desc_normalized`?",
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#pullrequestreview-1946397243",
      "submitted_at": "2024-03-19T14:22:14Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12172286862,
      "node_id": "HRFPE_lADOABII5856YTyLzwAAAALVhluO",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12172286862",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-19T16:25:35Z"
    },
    {
      "event": "commented",
      "id": 2007625893,
      "node_id": "IC_kwDOABII5853qfCl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2007625893",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-19T16:26:09Z",
      "updated_at": "2024-03-19T16:26:09Z",
      "author_association": "MEMBER",
      "body": "> But how the current output is useful? No outputted descriptor can be imported in another wallet. The wallet will throw a \"Cannot expand descriptor. Probably because of hardened derivations without private keys provided\". What do you think about also retrieving the normalized descriptor in another field `desc_normalized`?\r\n\r\nSorry, misread your comment. The key is supposed to be the root, but the descriptors should be normalized. I've changed that.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#issuecomment-2007625893",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29130"
    },
    {
      "event": "reviewed",
      "id": 1948974245,
      "node_id": "PRR_kwDOABII5850Kvyl",
      "url": null,
      "actor": null,
      "commit_id": "d7fc8a8bec5edb657f65ef35042d801e2913ab81",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Code review ACK d7fc8a8bec5ed",
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#pullrequestreview-1948974245",
      "submitted_at": "2024-03-20T14:44:23Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
    },
    {
      "event": "review_requested",
      "id": 12186047643,
      "node_id": "RRE_lADOABII5856YTyLzwAAAALWWFSb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12186047643",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-20T14:44:27Z",
      "requested_reviewer": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "review_requested",
      "id": 12186047838,
      "node_id": "RRE_lADOABII5856YTyLzwAAAALWWFVe",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12186047838",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-20T14:44:28Z",
      "requested_reviewer": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDVmZWJlMjhjOWUxMzFmYjkzZmFjOWMzNWY4MGM0Mjc1OTY1NGYxNTA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5febe28c9e131fb93fac9c35f80c42759654f150",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/5febe28c9e131fb93fac9c35f80c42759654f150",
      "tree": {
        "sha": "4c7c0b0d8abb56b73a17c40d3812172b6fa2f478",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4c7c0b0d8abb56b73a17c40d3812172b6fa2f478"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/66632e5c24c1b59afef1e89b562fbd0117ab6ef5",
          "sha": "66632e5c24c1b59afef1e89b562fbd0117ab6ef5",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/66632e5c24c1b59afef1e89b562fbd0117ab6ef5"
        }
      ],
      "message": "wallet, rpc: Add gethdkeys RPC\n\ngethdkeys retrieves all HD keys stored in the wallet's descriptors.",
      "committer": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2024-03-20T20:15:43Z"
      },
      "author": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2023-12-21T22:14:51Z"
      },
      "sha": "5febe28c9e131fb93fac9c35f80c42759654f150"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDNiMDlkMGViN2YyYzFkNmViZGFiNzNkMThkYjI4ZTViZjdkNzRmMTg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3b09d0eb7f2c1d6ebdab73d18db28e5bf7d74f18",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/3b09d0eb7f2c1d6ebdab73d18db28e5bf7d74f18",
      "tree": {
        "sha": "6b292e024293f348097214fcd72e07dbc32f2853",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6b292e024293f348097214fcd72e07dbc32f2853"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5febe28c9e131fb93fac9c35f80c42759654f150",
          "sha": "5febe28c9e131fb93fac9c35f80c42759654f150",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/5febe28c9e131fb93fac9c35f80c42759654f150"
        }
      ],
      "message": "tests: Test for gethdkeys",
      "committer": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2024-03-20T20:15:43Z"
      },
      "author": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2023-12-20T23:11:51Z"
      },
      "sha": "3b09d0eb7f2c1d6ebdab73d18db28e5bf7d74f18"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDU0ZTc0ZjQ2ZWExMGU0NzliZTY4Mjc1MGMxMjc5MTY1ZjI5YmIyZjQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/54e74f46ea10e479be682750c1279165f29bb2f4",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/54e74f46ea10e479be682750c1279165f29bb2f4",
      "tree": {
        "sha": "51cf003042827ed13a74b5a00eac8b95c5ebf7e3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/51cf003042827ed13a74b5a00eac8b95c5ebf7e3"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3b09d0eb7f2c1d6ebdab73d18db28e5bf7d74f18",
          "sha": "3b09d0eb7f2c1d6ebdab73d18db28e5bf7d74f18",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/3b09d0eb7f2c1d6ebdab73d18db28e5bf7d74f18"
        }
      ],
      "message": "wallet: Refactor function for single DescSPKM setup\n\nWe will need access to a function that sets up a singular\nDescriptorSPKM, so refactor this out of the multiple DescriptorSPKM\nsetup function.",
      "committer": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2024-03-20T20:15:43Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "github@achow101.com",
        "date": "2022-12-19T21:59:25Z"
      },
      "sha": "54e74f46ea10e479be682750c1279165f29bb2f4"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDczOTI2ZjJkMzFiNjFmZjc4ZDVmMGM4ZjliNWUzMTMwZmIxZjk2MjA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/73926f2d31b61ff78d5f0c8f9b5e3130fb1f9620",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/73926f2d31b61ff78d5f0c8f9b5e3130fb1f9620",
      "tree": {
        "sha": "504e90ebc9c36714bd66b262182fbdc30a941933",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/504e90ebc9c36714bd66b262182fbdc30a941933"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/54e74f46ea10e479be682750c1279165f29bb2f4",
          "sha": "54e74f46ea10e479be682750c1279165f29bb2f4",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/54e74f46ea10e479be682750c1279165f29bb2f4"
        }
      ],
      "message": "wallet, descspkm: Refactor wallet descriptor generation to standalone func",
      "committer": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2024-03-20T20:15:43Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "github@achow101.com",
        "date": "2022-08-22T20:55:39Z"
      },
      "sha": "73926f2d31b61ff78d5f0c8f9b5e3130fb1f9620"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDg1YjFmYjE5ZGQzYTNmM2M2OGRhMWM1ZTYwYTZlYjkxMWUxMTE5YTY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/85b1fb19dd3a3f3c68da1c5e60a6eb911e1119a6",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/85b1fb19dd3a3f3c68da1c5e60a6eb911e1119a6",
      "tree": {
        "sha": "611c00c937e3a100ca92c374bd6dc43b896ddd87",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/611c00c937e3a100ca92c374bd6dc43b896ddd87"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/73926f2d31b61ff78d5f0c8f9b5e3130fb1f9620",
          "sha": "73926f2d31b61ff78d5f0c8f9b5e3130fb1f9620",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/73926f2d31b61ff78d5f0c8f9b5e3130fb1f9620"
        }
      ],
      "message": "wallet: Add GetActiveHDPubKeys to retrieve xpubs from active descriptors",
      "committer": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2024-03-20T20:15:43Z"
      },
      "author": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2023-12-21T23:35:29Z"
      },
      "sha": "85b1fb19dd3a3f3c68da1c5e60a6eb911e1119a6"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDhlMWE0NzUwNjJlNjIzMjFlNThhMDYyNDM4NWNjM2ZhMDg4NWFhMTI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8e1a475062e62321e58a0624385cc3fa0885aa12",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/8e1a475062e62321e58a0624385cc3fa0885aa12",
      "tree": {
        "sha": "de0e423e73aa76323430d4ff6279470fa302d1e5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/de0e423e73aa76323430d4ff6279470fa302d1e5"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/85b1fb19dd3a3f3c68da1c5e60a6eb911e1119a6",
          "sha": "85b1fb19dd3a3f3c68da1c5e60a6eb911e1119a6",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/85b1fb19dd3a3f3c68da1c5e60a6eb911e1119a6"
        }
      ],
      "message": "wallet: Be able to retrieve single key from descriptors\n\nAdds CWallet::GetKey which retrieves a single key from the descriptors\nstored in the wallet.",
      "committer": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2024-03-20T20:15:43Z"
      },
      "author": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2023-12-21T23:39:23Z"
      },
      "sha": "8e1a475062e62321e58a0624385cc3fa0885aa12"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDQ2MGFlMWJmNjdjMDA1MTAzM2MxODAyZDQ0Nzg3ZDE3M2FiYjkyNDg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/460ae1bf67c0051033c1802d44787d173abb9248",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/460ae1bf67c0051033c1802d44787d173abb9248",
      "tree": {
        "sha": "45416f61e62d554cd96e76b218ed59fa4d8327a2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/45416f61e62d554cd96e76b218ed59fa4d8327a2"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8e1a475062e62321e58a0624385cc3fa0885aa12",
          "sha": "8e1a475062e62321e58a0624385cc3fa0885aa12",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/8e1a475062e62321e58a0624385cc3fa0885aa12"
        }
      ],
      "message": "wallet, rpc: Add createwalletdescriptor RPC",
      "committer": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2024-03-20T20:15:43Z"
      },
      "author": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2023-12-21T23:27:45Z"
      },
      "sha": "460ae1bf67c0051033c1802d44787d173abb9248"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDI0MDJiNjMwNjIxNWE5ZWU4ZDVmNDA2OGVhODFmNGU3ZjMyNGFkZWI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2402b6306215a9ee8d5f4068ea81f4e7f324adeb",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/2402b6306215a9ee8d5f4068ea81f4e7f324adeb",
      "tree": {
        "sha": "39eaca18a074172e8978eed542e017068a4dcad7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/39eaca18a074172e8978eed542e017068a4dcad7"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/460ae1bf67c0051033c1802d44787d173abb9248",
          "sha": "460ae1bf67c0051033c1802d44787d173abb9248",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/460ae1bf67c0051033c1802d44787d173abb9248"
        }
      ],
      "message": "wallet: Test upgrade of pre-taproot wallet to have tr() descriptors",
      "committer": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2024-03-20T20:15:43Z"
      },
      "author": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2023-12-21T23:44:03Z"
      },
      "sha": "2402b6306215a9ee8d5f4068ea81f4e7f324adeb"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDc0NmI2ZDg4Mzk1NjA3YWJiZDNjMTNiYmRjZGQ0Y2E4M2U5YmM5ZTQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/746b6d88395607abbd3c13bbdcdd4ca83e9bc9e4",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/746b6d88395607abbd3c13bbdcdd4ca83e9bc9e4",
      "tree": {
        "sha": "39b381972d546d74445c41e8730feb3de1de04c1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/39b381972d546d74445c41e8730feb3de1de04c1"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2402b6306215a9ee8d5f4068ea81f4e7f324adeb",
          "sha": "2402b6306215a9ee8d5f4068ea81f4e7f324adeb",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/2402b6306215a9ee8d5f4068ea81f4e7f324adeb"
        }
      ],
      "message": "test: Add test for createwalletdescriptor",
      "committer": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2024-03-20T20:15:43Z"
      },
      "author": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2023-12-22T17:55:59Z"
      },
      "sha": "746b6d88395607abbd3c13bbdcdd4ca83e9bc9e4"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12190825882,
      "node_id": "HRFPE_lADOABII5856YTyLzwAAAALWoT2a",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12190825882",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-20T20:15:54Z"
    },
    {
      "event": "reviewed",
      "id": 1950215482,
      "node_id": "PRR_kwDOABII5850Pe06",
      "url": null,
      "actor": null,
      "commit_id": "746b6d88395607abbd3c13bbdcdd4ca83e9bc9e4",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "ACK 746b6d8",
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#pullrequestreview-1950215482",
      "submitted_at": "2024-03-20T21:20:51Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
    },
    {
      "event": "comment_deleted",
      "id": 12227315584,
      "node_id": "CDE_lADOABII5856YTyLzwAAAALYzgeA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12227315584",
      "actor": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-24T18:51:58Z"
    },
    {
      "event": "commented",
      "id": 2017702776,
      "node_id": "IC_kwDOABII5854Q7N4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2017702776",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-25T10:41:51Z",
      "updated_at": "2024-03-25T10:55:53Z",
      "author_association": "MEMBER",
      "body": "re-utACK 746b6d88395607abbd3c13bbdcdd4ca83e9bc9e4\r\n\r\n> The key is supposed to be the root, but the descriptors should be normalized. I've changed that.\r\n\r\nThat's much better.\r\n\r\nIt would be nice if you can call `createwalletdescriptor` on a blank wallet and it just creates a seed and adds the descriptor. @ryanofsky above suggested an addition `generate` keyword for that: https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435607572\r\n\r\nBut we might as well do that in a followup along with some of the other suggestions in the that comment. For setting a up a multisig it's useful to have a seed without descriptor _and_ a way to get an xpub at an arbitrary path from it. Right now, with or without this PR, you can only achieve that by creating a dummy wallet and taking the root xpriv. You then manually create the multisig descriptor, with the xpriv as your key and the xpub from your counterpary and import that that in the eventual multisig wallet. Then you use `listdescriptors` to get the xpub to hand to your counterparty.\r\n\r\nBut if they also use Bitcoin Core you have a chicken-egg problem (which involves more workarounds).",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#issuecomment-2017702776",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29130"
    },
    {
      "event": "mentioned",
      "id": 12232656773,
      "node_id": "MEE_lADOABII5856YTyLzwAAAALZH4eF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12232656773",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-25T10:43:15Z"
    },
    {
      "event": "subscribed",
      "id": 12232656798,
      "node_id": "SE_lADOABII5856YTyLzwAAAALZH4ee",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12232656798",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-25T10:43:15Z"
    },
    {
      "event": "commented",
      "id": 2017985472,
      "node_id": "IC_kwDOABII5854SAPA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2017985472",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-25T13:15:01Z",
      "updated_at": "2024-03-25T13:15:01Z",
      "author_association": "MEMBER",
      "body": "> It would be nice if you can call createwalletdescriptor on a blank wallet and it just creates a seed and adds the descriptor. @ryanofsky above suggested an addition generate keyword for that: https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435607572\r\n\r\nAgree. Also @Sjors, another possibility could be adding a 'generate-seed' command to the `bitcoin-wallet` binary.",
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#issuecomment-2017985472",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29130"
    },
    {
      "event": "mentioned",
      "id": 12234464938,
      "node_id": "MEE_lADOABII5856YTyLzwAAAALZOx6q",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12234464938",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-25T13:15:02Z"
    },
    {
      "event": "subscribed",
      "id": 12234464965,
      "node_id": "SE_lADOABII5856YTyLzwAAAALZOx7F",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12234464965",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-25T13:15:02Z"
    },
    {
      "event": "mentioned",
      "id": 12234464989,
      "node_id": "MEE_lADOABII5856YTyLzwAAAALZOx7d",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12234464989",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-25T13:15:02Z"
    },
    {
      "event": "subscribed",
      "id": 12234465010,
      "node_id": "SE_lADOABII5856YTyLzwAAAALZOx7y",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12234465010",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-25T13:15:02Z"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435355508",
      "pull_request_review_id": 1795206875,
      "id": 1435355508,
      "node_id": "PRRC_kwDOABII585Vjcl0",
      "diff_hunk": "@@ -2137,6 +2138,35 @@ std::map<CKeyID, CKey> DescriptorScriptPubKeyMan::GetKeys() const\n     return m_map_keys;\n }\n \n+bool DescriptorScriptPubKeyMan::HasPrivKey(const CPubKey& pubkey) const",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 12,
      "commit_id": "746b6d88395607abbd3c13bbdcdd4ca83e9bc9e4",
      "original_commit_id": "484711baa994d482110edaf510377181b8b2b465",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"desc spkm: Add functions to retrieve specific private keys\" (484711baa994d482110edaf510377181b8b2b465)\r\n\r\nIt looks like this function would be a little more flexible and efficient if took a CKeyID parameter instead of a CPubKey",
      "created_at": "2023-12-22T21:34:00Z",
      "updated_at": "2023-12-23T00:03:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435355508",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435355508"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2141,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435366492",
      "pull_request_review_id": 1795206875,
      "id": 1435366492,
      "node_id": "PRRC_kwDOABII585VjfRc",
      "diff_hunk": "@@ -813,6 +813,106 @@ static RPCHelpMan migratewallet()\n     };\n }\n \n+RPCHelpMan gethdkeys()\n+{\n+    return RPCHelpMan{\n+        \"gethdkeys\",\n+        \"\\nList all BIP 32 HD keys in the wallet and which descriptors use them.\\n\",\n+        {\n+            {\"active_only\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show the keys for only active descriptors\"},\n+            {\"private\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show private keys.\"}",
      "path": "src/wallet/rpc/wallet.cpp",
      "position": null,
      "original_position": 11,
      "commit_id": "746b6d88395607abbd3c13bbdcdd4ca83e9bc9e4",
      "original_commit_id": "5deafad2f61f626b50b6c173558ac7236cceff13",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"wallet, rpc: Add gethdkeys RPC\" (5deafad2f61f626b50b6c173558ac7236cceff13)\r\n\r\nWould suggest making these name-only parameters to avoid different bool options being confused with each other, and to leave room to add new positional parameters in the future. You could do this with:\r\n\r\n```diff\r\n--- a/src/rpc/client.cpp\r\n+++ b/src/rpc/client.cpp\r\n@@ -274,8 +274,9 @@ static const CRPCConvertParam vRPCConvertParams[] =\r\n     { \"logging\", 1, \"exclude\" },\r\n     { \"disconnectnode\", 1, \"nodeid\" },\r\n     { \"upgradewallet\", 0, \"version\" },\r\n+    { \"gethdkeys\", 0, \"options\" },\r\n     { \"gethdkeys\", 0, \"active_only\" },\r\n-    { \"gethdkeys\", 1, \"private\" },\r\n+    { \"gethdkeys\", 0, \"private\" },\r\n     { \"createwalletdescriptor\", 1, \"internal\" },\r\n     // Echo with conversion (For testing only)\r\n     { \"echojson\", 0, \"arg0\" },\r\n--- a/src/wallet/rpc/wallet.cpp\r\n+++ b/src/wallet/rpc/wallet.cpp\r\n@@ -819,8 +819,9 @@ RPCHelpMan gethdkeys()\r\n         \"gethdkeys\",\r\n         \"\\nList all BIP 32 HD keys in the wallet and which descriptors use them.\\n\",\r\n         {\r\n-            {\"active_only\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show the keys for only active descriptors\"},\r\n-            {\"private\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show private keys.\"}\r\n+            {\"options\", RPCArg::Type::OBJ_NAMED_PARAMS, RPCArg::Optional::OMITTED, \"\", {\r\n+                {\"active_only\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show the keys for only active descriptors\"},\r\n+                {\"private\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show private keys.\"}}},\r\n         },\r\n         RPCResult{RPCResult::Type::ARR, \"\", \"\", {\r\n             {\r\n@@ -851,8 +852,9 @@ RPCHelpMan gethdkeys()\r\n                 throw JSONRPCError(RPC_WALLET_ERROR, \"gethdkeys is not available for non-descriptor wallets\");\r\n             }\r\n \r\n-            const bool active_only = !request.params[0].isNull() && request.params[0].get_bool();\r\n-            const bool priv = !request.params[1].isNull() && request.params[1].get_bool();\r\n+            UniValue options{request.params[0].isNull() ? UniValue::VOBJ : request.params[0]};\r\n+            const bool active_only{options.exists(\"active_only\") ? options[\"active_only\"].get_bool() : false};\r\n+            const bool priv{options.exists(\"private\") ? options[\"private\"].get_bool() : false};\r\n             if (priv) {\r\n                 EnsureWalletIsUnlocked(*wallet);\r\n             }\r\n```",
      "created_at": "2023-12-22T22:13:42Z",
      "updated_at": "2023-12-23T00:03:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435366492",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435366492"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
        }
      },
      "start_line": null,
      "original_start_line": 822,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 823,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435368965",
      "pull_request_review_id": 1795206875,
      "id": 1435368965,
      "node_id": "PRRC_kwDOABII585Vjf4F",
      "diff_hunk": "@@ -813,6 +813,106 @@ static RPCHelpMan migratewallet()\n     };\n }\n \n+RPCHelpMan gethdkeys()\n+{\n+    return RPCHelpMan{\n+        \"gethdkeys\",\n+        \"\\nList all BIP 32 HD keys in the wallet and which descriptors use them.\\n\",\n+        {\n+            {\"active_only\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show the keys for only active descriptors\"},",
      "path": "src/wallet/rpc/wallet.cpp",
      "position": null,
      "original_position": 10,
      "commit_id": "746b6d88395607abbd3c13bbdcdd4ca83e9bc9e4",
      "original_commit_id": "5deafad2f61f626b50b6c173558ac7236cceff13",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"wallet, rpc: Add gethdkeys RPC\" (5deafad2f61f626b50b6c173558ac7236cceff13)\r\n\r\nNote: This is better than what I suggested. I was originally thinking this default should be true, to make it more convenient to get active hd key and ignore other keys. But defaulting to false is actually better, because it's still easy to get the active hd key with an option, and it's probably more confusing to see missing keys than extra keys. Also this default makes `gethdkeys` output more consistent with `listdescriptors` output.",
      "created_at": "2023-12-22T22:23:59Z",
      "updated_at": "2023-12-23T00:03:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435368965",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435368965"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 822,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435369940",
      "pull_request_review_id": 1795206875,
      "id": 1435369940,
      "node_id": "PRRC_kwDOABII585VjgHU",
      "diff_hunk": "@@ -813,6 +813,106 @@ static RPCHelpMan migratewallet()\n     };\n }\n \n+RPCHelpMan gethdkeys()\n+{\n+    return RPCHelpMan{\n+        \"gethdkeys\",\n+        \"\\nList all BIP 32 HD keys in the wallet and which descriptors use them.\\n\",\n+        {\n+            {\"active_only\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show the keys for only active descriptors\"},\n+            {\"private\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show private keys.\"}\n+        },\n+        RPCResult{RPCResult::Type::ARR, \"\", \"\", {\n+            {\n+                {RPCResult::Type::OBJ, \"\", \"\", {\n+                    {RPCResult::Type::STR, \"xpub\", \"The extended public key\"},\n+                    {RPCResult::Type::BOOL, \"has_private\", \"Whether the wallet has the private key for this xpub\"},\n+                    {RPCResult::Type::STR, \"xprv\", /*optional=*/true, \"The extended private key if private is true\"},\n+                    {RPCResult::Type::ARR, \"descriptors\", \"Array of descriptor objects that use this HD key\",\n+                    {\n+                        {RPCResult::Type::OBJ, \"\", \"\", {\n+                            {RPCResult::Type::STR, \"desc\", \"Descriptor string representation\"},\n+                            {RPCResult::Type::BOOL, \"active\", \"Whether this descriptor is currently used to generate new addresses\"},\n+                        }},\n+                    }},\n+                }},\n+            }\n+        }},\n+        RPCExamples{\n+            HelpExampleCli(\"gethdkeys\", \"\") + HelpExampleRpc(\"gethdkeys\", \"\")\n+            + HelpExampleCli(\"gethdkeys\", \"true\") + HelpExampleRpc(\"gethdkeys\", \"true\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            const std::shared_ptr<const CWallet> wallet = GetWalletForJSONRPCRequest(request);\n+            if (!wallet) return UniValue::VNULL;\n+\n+            if (!wallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"gethdkeys is not available for non-descriptor wallets\");\n+            }\n+\n+            const bool active_only = !request.params[0].isNull() && request.params[0].get_bool();\n+            const bool priv = !request.params[1].isNull() && request.params[1].get_bool();\n+            if (priv) {\n+                EnsureWalletIsUnlocked(*wallet);\n+            }\n+\n+            LOCK(wallet->cs_wallet);\n+\n+            std::set<ScriptPubKeyMan*> spkms;\n+            if (active_only) {\n+                spkms = wallet->GetActiveScriptPubKeyMans();\n+            } else {\n+                spkms = wallet->GetAllScriptPubKeyMans();\n+            }\n+\n+            std::map<CExtPubKey, std::set<std::tuple<std::string, bool, bool>>> wallet_xpubs;\n+            std::map<CExtPubKey, CExtKey> wallet_xprvs;\n+            for (auto spkm : spkms) {\n+                auto desc_spkm{dynamic_cast<DescriptorScriptPubKeyMan*>(spkm)};\n+                LOCK(desc_spkm->cs_desc_man);",
      "path": "src/wallet/rpc/wallet.cpp",
      "position": 66,
      "original_position": 61,
      "commit_id": "746b6d88395607abbd3c13bbdcdd4ca83e9bc9e4",
      "original_commit_id": "5deafad2f61f626b50b6c173558ac7236cceff13",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"wallet, rpc: Add gethdkeys RPC\" (5deafad2f61f626b50b6c173558ac7236cceff13)\r\n\r\nCould use `Assert(desc_spkm)` to avoid undefined behavior if it is null.",
      "created_at": "2023-12-22T22:27:14Z",
      "updated_at": "2023-12-23T00:03:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435369940",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435369940"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 882,
      "original_line": 882,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435372329",
      "pull_request_review_id": 1795206875,
      "id": 1435372329,
      "node_id": "PRRC_kwDOABII585Vjgsp",
      "diff_hunk": "@@ -813,6 +813,106 @@ static RPCHelpMan migratewallet()\n     };\n }\n \n+RPCHelpMan gethdkeys()\n+{\n+    return RPCHelpMan{\n+        \"gethdkeys\",\n+        \"\\nList all BIP 32 HD keys in the wallet and which descriptors use them.\\n\",\n+        {\n+            {\"active_only\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show the keys for only active descriptors\"},\n+            {\"private\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show private keys.\"}\n+        },\n+        RPCResult{RPCResult::Type::ARR, \"\", \"\", {\n+            {\n+                {RPCResult::Type::OBJ, \"\", \"\", {\n+                    {RPCResult::Type::STR, \"xpub\", \"The extended public key\"},\n+                    {RPCResult::Type::BOOL, \"has_private\", \"Whether the wallet has the private key for this xpub\"},\n+                    {RPCResult::Type::STR, \"xprv\", /*optional=*/true, \"The extended private key if private is true\"},\n+                    {RPCResult::Type::ARR, \"descriptors\", \"Array of descriptor objects that use this HD key\",\n+                    {\n+                        {RPCResult::Type::OBJ, \"\", \"\", {\n+                            {RPCResult::Type::STR, \"desc\", \"Descriptor string representation\"},\n+                            {RPCResult::Type::BOOL, \"active\", \"Whether this descriptor is currently used to generate new addresses\"},\n+                        }},\n+                    }},\n+                }},\n+            }\n+        }},\n+        RPCExamples{\n+            HelpExampleCli(\"gethdkeys\", \"\") + HelpExampleRpc(\"gethdkeys\", \"\")\n+            + HelpExampleCli(\"gethdkeys\", \"true\") + HelpExampleRpc(\"gethdkeys\", \"true\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            const std::shared_ptr<const CWallet> wallet = GetWalletForJSONRPCRequest(request);\n+            if (!wallet) return UniValue::VNULL;\n+\n+            if (!wallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"gethdkeys is not available for non-descriptor wallets\");\n+            }\n+\n+            const bool active_only = !request.params[0].isNull() && request.params[0].get_bool();\n+            const bool priv = !request.params[1].isNull() && request.params[1].get_bool();\n+            if (priv) {\n+                EnsureWalletIsUnlocked(*wallet);\n+            }\n+\n+            LOCK(wallet->cs_wallet);\n+\n+            std::set<ScriptPubKeyMan*> spkms;\n+            if (active_only) {\n+                spkms = wallet->GetActiveScriptPubKeyMans();\n+            } else {\n+                spkms = wallet->GetAllScriptPubKeyMans();\n+            }\n+\n+            std::map<CExtPubKey, std::set<std::tuple<std::string, bool, bool>>> wallet_xpubs;\n+            std::map<CExtPubKey, CExtKey> wallet_xprvs;\n+            for (auto spkm : spkms) {\n+                auto desc_spkm{dynamic_cast<DescriptorScriptPubKeyMan*>(spkm)};",
      "path": "src/wallet/rpc/wallet.cpp",
      "position": null,
      "original_position": 60,
      "commit_id": "746b6d88395607abbd3c13bbdcdd4ca83e9bc9e4",
      "original_commit_id": "5deafad2f61f626b50b6c173558ac7236cceff13",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"wallet, rpc: Add gethdkeys RPC\" (5deafad2f61f626b50b6c173558ac7236cceff13)\r\n\r\nThis is just general style feedback, but I think where possible it's better to use `auto&` or `auto*` instead of bare `auto` because with bare `auto` in c++, you don't know if a potentially expensive object copy will happen without manually checking the type. With `auto&` or `auto*` you know there won't be an big copy without having to think about it. Up to you though if you prefer less verbosity instead",
      "created_at": "2023-12-22T22:38:36Z",
      "updated_at": "2023-12-23T00:03:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435372329",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435372329"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
        }
      },
      "start_line": null,
      "original_start_line": 871,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 872,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435375318",
      "pull_request_review_id": 1795206875,
      "id": 1435375318,
      "node_id": "PRRC_kwDOABII585VjhbW",
      "diff_hunk": "@@ -813,6 +813,106 @@ static RPCHelpMan migratewallet()\n     };\n }\n \n+RPCHelpMan gethdkeys()\n+{\n+    return RPCHelpMan{\n+        \"gethdkeys\",\n+        \"\\nList all BIP 32 HD keys in the wallet and which descriptors use them.\\n\",\n+        {\n+            {\"active_only\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show the keys for only active descriptors\"},\n+            {\"private\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show private keys.\"}\n+        },\n+        RPCResult{RPCResult::Type::ARR, \"\", \"\", {\n+            {\n+                {RPCResult::Type::OBJ, \"\", \"\", {\n+                    {RPCResult::Type::STR, \"xpub\", \"The extended public key\"},\n+                    {RPCResult::Type::BOOL, \"has_private\", \"Whether the wallet has the private key for this xpub\"},\n+                    {RPCResult::Type::STR, \"xprv\", /*optional=*/true, \"The extended private key if private is true\"},\n+                    {RPCResult::Type::ARR, \"descriptors\", \"Array of descriptor objects that use this HD key\",\n+                    {\n+                        {RPCResult::Type::OBJ, \"\", \"\", {\n+                            {RPCResult::Type::STR, \"desc\", \"Descriptor string representation\"},\n+                            {RPCResult::Type::BOOL, \"active\", \"Whether this descriptor is currently used to generate new addresses\"},\n+                        }},\n+                    }},\n+                }},\n+            }\n+        }},\n+        RPCExamples{\n+            HelpExampleCli(\"gethdkeys\", \"\") + HelpExampleRpc(\"gethdkeys\", \"\")\n+            + HelpExampleCli(\"gethdkeys\", \"true\") + HelpExampleRpc(\"gethdkeys\", \"true\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            const std::shared_ptr<const CWallet> wallet = GetWalletForJSONRPCRequest(request);\n+            if (!wallet) return UniValue::VNULL;\n+\n+            if (!wallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"gethdkeys is not available for non-descriptor wallets\");\n+            }\n+\n+            const bool active_only = !request.params[0].isNull() && request.params[0].get_bool();\n+            const bool priv = !request.params[1].isNull() && request.params[1].get_bool();\n+            if (priv) {\n+                EnsureWalletIsUnlocked(*wallet);\n+            }\n+\n+            LOCK(wallet->cs_wallet);\n+\n+            std::set<ScriptPubKeyMan*> spkms;\n+            if (active_only) {\n+                spkms = wallet->GetActiveScriptPubKeyMans();\n+            } else {\n+                spkms = wallet->GetAllScriptPubKeyMans();\n+            }\n+\n+            std::map<CExtPubKey, std::set<std::tuple<std::string, bool, bool>>> wallet_xpubs;\n+            std::map<CExtPubKey, CExtKey> wallet_xprvs;\n+            for (auto spkm : spkms) {\n+                auto desc_spkm{dynamic_cast<DescriptorScriptPubKeyMan*>(spkm)};\n+                LOCK(desc_spkm->cs_desc_man);\n+                WalletDescriptor w_desc = desc_spkm->GetWalletDescriptor();\n+\n+                // Retrieve the pubkeys from the descriptor\n+                std::set<CPubKey> desc_pubkeys;\n+                std::set<CExtPubKey> desc_xpubs;\n+                w_desc.descriptor->GetPubKeys(desc_pubkeys, desc_xpubs);\n+                for (const CExtPubKey& xpub : desc_xpubs) {\n+                    wallet_xpubs[xpub].emplace(w_desc.descriptor->ToString(), wallet->IsActiveScriptPubKeyMan(spkm), desc_spkm->HasPrivKey(xpub.pubkey));\n+                    if (std::optional<CKey> key = desc_spkm->GetKey(xpub.pubkey)) {\n+                        wallet_xprvs[xpub] = CExtKey(xpub, *key);\n+                    }",
      "path": "src/wallet/rpc/wallet.cpp",
      "position": null,
      "original_position": 72,
      "commit_id": "746b6d88395607abbd3c13bbdcdd4ca83e9bc9e4",
      "original_commit_id": "5deafad2f61f626b50b6c173558ac7236cceff13",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"wallet, rpc: Add gethdkeys RPC\" (5deafad2f61f626b50b6c173558ac7236cceff13)\r\n\r\nIt seems like theoretically there could be a race condition if the wallet became locked during this loop. Also the code ignores other potential errors. Would maybe suggest:\r\n\r\n```c++\r\nif (priv && desc_spkm->HasPrivKey(xpub.pubkey)) {\r\n  wallet_xprvs[xpub] = CExtKey(xpub, *CHECK_NONFATAL(desc_spkm->GetKey(xpub.pubkey)));\r\n}\r\n```",
      "created_at": "2023-12-22T22:49:36Z",
      "updated_at": "2023-12-23T00:03:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435375318",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435375318"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
        }
      },
      "start_line": null,
      "original_start_line": 882,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 896,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435376241",
      "pull_request_review_id": 1795206875,
      "id": 1435376241,
      "node_id": "PRRC_kwDOABII585Vjhpx",
      "diff_hunk": "@@ -813,6 +813,106 @@ static RPCHelpMan migratewallet()\n     };\n }\n \n+RPCHelpMan gethdkeys()\n+{\n+    return RPCHelpMan{\n+        \"gethdkeys\",\n+        \"\\nList all BIP 32 HD keys in the wallet and which descriptors use them.\\n\",\n+        {\n+            {\"active_only\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show the keys for only active descriptors\"},\n+            {\"private\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show private keys.\"}\n+        },\n+        RPCResult{RPCResult::Type::ARR, \"\", \"\", {\n+            {\n+                {RPCResult::Type::OBJ, \"\", \"\", {\n+                    {RPCResult::Type::STR, \"xpub\", \"The extended public key\"},\n+                    {RPCResult::Type::BOOL, \"has_private\", \"Whether the wallet has the private key for this xpub\"},\n+                    {RPCResult::Type::STR, \"xprv\", /*optional=*/true, \"The extended private key if private is true\"},\n+                    {RPCResult::Type::ARR, \"descriptors\", \"Array of descriptor objects that use this HD key\",\n+                    {\n+                        {RPCResult::Type::OBJ, \"\", \"\", {\n+                            {RPCResult::Type::STR, \"desc\", \"Descriptor string representation\"},\n+                            {RPCResult::Type::BOOL, \"active\", \"Whether this descriptor is currently used to generate new addresses\"},\n+                        }},\n+                    }},\n+                }},\n+            }\n+        }},\n+        RPCExamples{\n+            HelpExampleCli(\"gethdkeys\", \"\") + HelpExampleRpc(\"gethdkeys\", \"\")\n+            + HelpExampleCli(\"gethdkeys\", \"true\") + HelpExampleRpc(\"gethdkeys\", \"true\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            const std::shared_ptr<const CWallet> wallet = GetWalletForJSONRPCRequest(request);\n+            if (!wallet) return UniValue::VNULL;\n+\n+            if (!wallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"gethdkeys is not available for non-descriptor wallets\");\n+            }\n+\n+            const bool active_only = !request.params[0].isNull() && request.params[0].get_bool();\n+            const bool priv = !request.params[1].isNull() && request.params[1].get_bool();\n+            if (priv) {\n+                EnsureWalletIsUnlocked(*wallet);\n+            }\n+\n+            LOCK(wallet->cs_wallet);\n+\n+            std::set<ScriptPubKeyMan*> spkms;\n+            if (active_only) {\n+                spkms = wallet->GetActiveScriptPubKeyMans();\n+            } else {\n+                spkms = wallet->GetAllScriptPubKeyMans();\n+            }\n+\n+            std::map<CExtPubKey, std::set<std::tuple<std::string, bool, bool>>> wallet_xpubs;\n+            std::map<CExtPubKey, CExtKey> wallet_xprvs;\n+            for (auto spkm : spkms) {\n+                auto desc_spkm{dynamic_cast<DescriptorScriptPubKeyMan*>(spkm)};\n+                LOCK(desc_spkm->cs_desc_man);\n+                WalletDescriptor w_desc = desc_spkm->GetWalletDescriptor();\n+\n+                // Retrieve the pubkeys from the descriptor\n+                std::set<CPubKey> desc_pubkeys;\n+                std::set<CExtPubKey> desc_xpubs;\n+                w_desc.descriptor->GetPubKeys(desc_pubkeys, desc_xpubs);\n+                for (const CExtPubKey& xpub : desc_xpubs) {\n+                    wallet_xpubs[xpub].emplace(w_desc.descriptor->ToString(), wallet->IsActiveScriptPubKeyMan(spkm), desc_spkm->HasPrivKey(xpub.pubkey));\n+                    if (std::optional<CKey> key = desc_spkm->GetKey(xpub.pubkey)) {\n+                        wallet_xprvs[xpub] = CExtKey(xpub, *key);\n+                    }\n+                }\n+            }\n+\n+            UniValue response(UniValue::VARR);\n+            for (const auto& [xpub, descs] : wallet_xpubs) {\n+                bool has_xprv = false;\n+                UniValue descriptors(UniValue::VARR);\n+                for (const auto& [desc, active, has_priv] : descs) {\n+                    UniValue d(UniValue::VOBJ);\n+                    d.pushKV(\"desc\", desc);",
      "path": "src/wallet/rpc/wallet.cpp",
      "position": 90,
      "original_position": 82,
      "commit_id": "746b6d88395607abbd3c13bbdcdd4ca83e9bc9e4",
      "original_commit_id": "5deafad2f61f626b50b6c173558ac7236cceff13",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"wallet, rpc: Add gethdkeys RPC\" (5deafad2f61f626b50b6c173558ac7236cceff13)\r\n\r\nNot important but I think I would suggest switching to `auto&` in the loops above and using `std::move(desc)` here to avoid copying strings when not necessary.",
      "created_at": "2023-12-22T22:52:24Z",
      "updated_at": "2023-12-23T00:03:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435376241",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435376241"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 906,
      "original_line": 906,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435377746",
      "pull_request_review_id": 1795206875,
      "id": 1435377746,
      "node_id": "PRRC_kwDOABII585VjiBS",
      "diff_hunk": "@@ -813,6 +813,106 @@ static RPCHelpMan migratewallet()\n     };\n }\n \n+RPCHelpMan gethdkeys()\n+{\n+    return RPCHelpMan{\n+        \"gethdkeys\",\n+        \"\\nList all BIP 32 HD keys in the wallet and which descriptors use them.\\n\",\n+        {\n+            {\"active_only\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show the keys for only active descriptors\"},\n+            {\"private\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show private keys.\"}\n+        },\n+        RPCResult{RPCResult::Type::ARR, \"\", \"\", {\n+            {\n+                {RPCResult::Type::OBJ, \"\", \"\", {\n+                    {RPCResult::Type::STR, \"xpub\", \"The extended public key\"},\n+                    {RPCResult::Type::BOOL, \"has_private\", \"Whether the wallet has the private key for this xpub\"},\n+                    {RPCResult::Type::STR, \"xprv\", /*optional=*/true, \"The extended private key if private is true\"},\n+                    {RPCResult::Type::ARR, \"descriptors\", \"Array of descriptor objects that use this HD key\",\n+                    {\n+                        {RPCResult::Type::OBJ, \"\", \"\", {\n+                            {RPCResult::Type::STR, \"desc\", \"Descriptor string representation\"},\n+                            {RPCResult::Type::BOOL, \"active\", \"Whether this descriptor is currently used to generate new addresses\"},\n+                        }},\n+                    }},\n+                }},\n+            }\n+        }},\n+        RPCExamples{\n+            HelpExampleCli(\"gethdkeys\", \"\") + HelpExampleRpc(\"gethdkeys\", \"\")\n+            + HelpExampleCli(\"gethdkeys\", \"true\") + HelpExampleRpc(\"gethdkeys\", \"true\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            const std::shared_ptr<const CWallet> wallet = GetWalletForJSONRPCRequest(request);\n+            if (!wallet) return UniValue::VNULL;\n+\n+            if (!wallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"gethdkeys is not available for non-descriptor wallets\");\n+            }\n+\n+            const bool active_only = !request.params[0].isNull() && request.params[0].get_bool();\n+            const bool priv = !request.params[1].isNull() && request.params[1].get_bool();\n+            if (priv) {\n+                EnsureWalletIsUnlocked(*wallet);\n+            }\n+\n+            LOCK(wallet->cs_wallet);\n+\n+            std::set<ScriptPubKeyMan*> spkms;\n+            if (active_only) {\n+                spkms = wallet->GetActiveScriptPubKeyMans();\n+            } else {\n+                spkms = wallet->GetAllScriptPubKeyMans();\n+            }\n+\n+            std::map<CExtPubKey, std::set<std::tuple<std::string, bool, bool>>> wallet_xpubs;\n+            std::map<CExtPubKey, CExtKey> wallet_xprvs;\n+            for (auto spkm : spkms) {\n+                auto desc_spkm{dynamic_cast<DescriptorScriptPubKeyMan*>(spkm)};\n+                LOCK(desc_spkm->cs_desc_man);\n+                WalletDescriptor w_desc = desc_spkm->GetWalletDescriptor();\n+\n+                // Retrieve the pubkeys from the descriptor\n+                std::set<CPubKey> desc_pubkeys;\n+                std::set<CExtPubKey> desc_xpubs;\n+                w_desc.descriptor->GetPubKeys(desc_pubkeys, desc_xpubs);\n+                for (const CExtPubKey& xpub : desc_xpubs) {\n+                    wallet_xpubs[xpub].emplace(w_desc.descriptor->ToString(), wallet->IsActiveScriptPubKeyMan(spkm), desc_spkm->HasPrivKey(xpub.pubkey));\n+                    if (std::optional<CKey> key = desc_spkm->GetKey(xpub.pubkey)) {\n+                        wallet_xprvs[xpub] = CExtKey(xpub, *key);\n+                    }\n+                }\n+            }\n+\n+            UniValue response(UniValue::VARR);\n+            for (const auto& [xpub, descs] : wallet_xpubs) {\n+                bool has_xprv = false;\n+                UniValue descriptors(UniValue::VARR);\n+                for (const auto& [desc, active, has_priv] : descs) {\n+                    UniValue d(UniValue::VOBJ);\n+                    d.pushKV(\"desc\", desc);\n+                    d.pushKV(\"active\", active);\n+                    has_xprv |= has_priv;\n+\n+                    descriptors.push_back(d);",
      "path": "src/wallet/rpc/wallet.cpp",
      "position": null,
      "original_position": 86,
      "commit_id": "746b6d88395607abbd3c13bbdcdd4ca83e9bc9e4",
      "original_commit_id": "5deafad2f61f626b50b6c173558ac7236cceff13",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"wallet, rpc: Add gethdkeys RPC\" (5deafad2f61f626b50b6c173558ac7236cceff13)\r\n\r\nCould use std::move here and on line 906 as well to avoid copying univalue objects. I will stop commenting about copies, though. I don't think they are important, I just figure it's very easy to avoid copying and we don't need 3 copies of each descriptor string so why not avoid it.",
      "created_at": "2023-12-22T22:56:22Z",
      "updated_at": "2023-12-23T00:03:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435377746",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435377746"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 898,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435381067",
      "pull_request_review_id": 1795206875,
      "id": 1435381067,
      "node_id": "PRRC_kwDOABII585Vji1L",
      "diff_hunk": "@@ -3553,6 +3553,25 @@ void CWallet::LoadDescriptorScriptPubKeyMan(uint256 id, WalletDescriptor& desc)\n     }\n }\n \n+uint256 CWallet::SetupDescriptorScriptPubKeyMan(WalletBatch& batch, const CExtKey& master_key, const OutputType& output_type, bool internal)\n+{\n+    AssertLockHeld(cs_wallet);\n+    auto spk_manager = std::unique_ptr<DescriptorScriptPubKeyMan>(new DescriptorScriptPubKeyMan(*this, m_keypool_size));\n+    if (IsCrypted()) {\n+        if (IsLocked()) {\n+            throw std::runtime_error(std::string(__func__) + \": Wallet is locked, cannot setup new descriptors\");\n+        }\n+        if (!spk_manager->CheckDecryptionKey(vMasterKey) && !spk_manager->Encrypt(vMasterKey, nullptr)) {",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 12,
      "commit_id": "746b6d88395607abbd3c13bbdcdd4ca83e9bc9e4",
      "original_commit_id": "280d26b19e9222afa902ad09cd7b42c2eb3e0044",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"wallet: Refactor function for single DescSPKM setup\" (280d26b19e9222afa902ad09cd7b42c2eb3e0044)\r\n\r\nSeems like the &batch argument option is replaced with nullptr here. This seems like a bug, but if it is intended behavior should definitely have a comment explaining the nullptr.",
      "created_at": "2023-12-22T23:05:00Z",
      "updated_at": "2023-12-23T00:03:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435381067",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435381067"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3564,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435383694",
      "pull_request_review_id": 1795206875,
      "id": 1435383694,
      "node_id": "PRRC_kwDOABII585VjjeO",
      "diff_hunk": "@@ -3553,6 +3553,25 @@ void CWallet::LoadDescriptorScriptPubKeyMan(uint256 id, WalletDescriptor& desc)\n     }\n }\n \n+uint256 CWallet::SetupDescriptorScriptPubKeyMan(WalletBatch& batch, const CExtKey& master_key, const OutputType& output_type, bool internal)",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "746b6d88395607abbd3c13bbdcdd4ca83e9bc9e4",
      "original_commit_id": "280d26b19e9222afa902ad09cd7b42c2eb3e0044",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"wallet: Refactor function for single DescSPKM setup\" (280d26b19e9222afa902ad09cd7b42c2eb3e0044)\r\n\r\nNot important, but I think it would be a little better to return DescriptorScriptPubKeyMan& to make the return type self-documenting. Also to avoid the need for callers to have to look up the keyman object after they just created it.",
      "created_at": "2023-12-22T23:11:32Z",
      "updated_at": "2023-12-23T00:03:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435383694",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435383694"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3556,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435387051",
      "pull_request_review_id": 1795206875,
      "id": 1435387051,
      "node_id": "PRRC_kwDOABII585VjkSr",
      "diff_hunk": "@@ -624,6 +624,7 @@ class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n \n     bool IsHDEnabled() const override;\n \n+    static WalletDescriptor GenerateWalletDescriptor(const CExtKey& master_key, const OutputType& output_type, bool internal);",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": null,
      "original_position": 4,
      "commit_id": "746b6d88395607abbd3c13bbdcdd4ca83e9bc9e4",
      "original_commit_id": "fc3ccf068fbbf429eff9dce072bc33d78ad27509",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"wallet, descspkm: Refactor wallet descriptor generation to static func\" (fc3ccf068fbbf429eff9dce072bc33d78ad27509)\r\n\r\nNot important, but it doesn't seem like it makes sense for this function to be attached to the keyman class. If you want it to be a static method, it would probably make more sense being a static method of WalletDescriptor, since it is basically just a constructor for it. But I would probably make it a standalone function not attached to any class, just to reduce interdependencies in this code.\r\n\r\nAlso since the private key is not used here, I think it would be clearer for this to take a CExtPubKey parameter instead of a CPubKey.",
      "created_at": "2023-12-22T23:21:18Z",
      "updated_at": "2023-12-23T00:03:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435387051",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435387051"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 627,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435387959",
      "pull_request_review_id": 1795206875,
      "id": 1435387959,
      "node_id": "PRRC_kwDOABII585Vjkg3",
      "diff_hunk": "@@ -1044,6 +1044,12 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n \n     //! Whether the (external) signer performs R-value signature grinding\n     bool CanGrindR() const;\n+\n+    //! Find the single xpub used by all active descriptors, or return nullopt\n+    std::optional<CExtPubKey> GetActiveHDPubKey() const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+\n+    //! Find the private key for the given public key from the wallet's descriptors\n+    std::optional<CKey> CWallet::GetKey(const CPubKey& pubkey) const;",
      "path": "src/wallet/wallet.h",
      "position": null,
      "original_position": 9,
      "commit_id": "746b6d88395607abbd3c13bbdcdd4ca83e9bc9e4",
      "original_commit_id": "647118e36563ef421b6c4f6edeac33ce6aff5588",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"wallet: Add GetActiveHDPubKey to retrieve hd key from active descriptors\" (647118e36563ef421b6c4f6edeac33ce6aff5588)\r\n\r\nThis is probably in the wrong commit, I don't see this method being added here.",
      "created_at": "2023-12-22T23:24:06Z",
      "updated_at": "2023-12-23T00:03:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435387959",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435387959"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1052,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435391901",
      "pull_request_review_id": 1795206875,
      "id": 1435391901,
      "node_id": "PRRC_kwDOABII585Vjled",
      "diff_hunk": "@@ -4365,4 +4365,37 @@ util::Result<MigrationResult> MigrateLegacyToDescriptor(const std::string& walle\n     }\n     return res;\n }\n+\n+std::optional<CExtPubKey> CWallet::GetActiveHDPubKey() const\n+{\n+    AssertLockHeld(cs_wallet);\n+\n+    if (!IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) return std::nullopt;\n+\n+    std::optional<CExtPubKey> active_xpub;\n+    for (const auto& spkm : GetActiveScriptPubKeyMans()) {\n+        const DescriptorScriptPubKeyMan* desc_spkm = dynamic_cast<DescriptorScriptPubKeyMan*>(spkm);\n+        assert(desc_spkm);\n+        LOCK(desc_spkm->cs_desc_man);\n+        WalletDescriptor w_desc = desc_spkm->GetWalletDescriptor();\n+\n+        // We can only determine the active hd key if all descriptors have exactly 1 xpub\n+        std::set<CPubKey> desc_pubkeys;\n+        std::set<CExtPubKey> desc_xpubs;\n+        w_desc.descriptor->GetPubKeys(desc_pubkeys, desc_xpubs);\n+        if (desc_xpubs.size() != 1 || desc_pubkeys.size() != 0) {\n+            return std::nullopt;\n+        }\n+        const CExtPubKey& xpub = *desc_xpubs.begin();\n+\n+        // All active descriptors must have the same xpub",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 27,
      "commit_id": "746b6d88395607abbd3c13bbdcdd4ca83e9bc9e4",
      "original_commit_id": "647118e36563ef421b6c4f6edeac33ce6aff5588",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"wallet: Add GetActiveHDPubKey to retrieve hd key from active descriptors\" (647118e36563ef421b6c4f6edeac33ce6aff5588)\r\n\r\nI'm confused. Is this actually true? I thought `importdescriptors` let you freely import descriptors with different keys and control which ones are active.\r\n\r\nIf this is always true, it would be helpful if comment mentioned what was enforcing it (since it's not obvious where to look). If it's not true, I think would be better if this function returned `std::set<CExtPubKey>` instead of `std::optional<CExtPubKey>` and callers decided what to do if the set size is more than 1.",
      "created_at": "2023-12-22T23:33:49Z",
      "updated_at": "2023-12-23T00:03:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435391901",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435391901"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4391,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435398854",
      "pull_request_review_id": 1795206875,
      "id": 1435398854,
      "node_id": "PRRC_kwDOABII585VjnLG",
      "diff_hunk": "@@ -913,6 +913,108 @@ RPCHelpMan gethdkeys()\n     };\n }\n \n+static RPCHelpMan createwalletdescriptor()\n+{\n+    return RPCHelpMan{\"createwalletdescriptor\",\n+        \"Creates the wallet's descriptor for the given address type. \"\n+        \"Only works on wallets that contain automatically generated descriptors. \"\n+        \"The address type must be one that the wallet does not already have a descriptor for.\"\n+        + HELP_REQUIRING_PASSPHRASE,\n+        {\n+            {\"address_type\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The address type the descriptor will produce. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", \\\"bech32\\\", and \\\"bech32m\\\".\"},\n+            {\"internal\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"Both external and internal will be generated unless this parameter is specified\"}, \"Whether to only make one descriptor that is internal (if parameter is true) or external (if parameter is false)\"},\n+            {\"hdkey\", RPCArg::Type::STR, RPCArg::DefaultHint{\"The HD key used by all other active descriptors\"}, \"The HD key that the wallet knows the private key of, listed using 'gethdkeys', to use for this descriptor's key\"},",
      "path": "src/wallet/rpc/wallet.cpp",
      "position": null,
      "original_position": 14,
      "commit_id": "746b6d88395607abbd3c13bbdcdd4ca83e9bc9e4",
      "original_commit_id": "01b2aab1f8f61bc85345e106893e0ff2e590a56a",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"wallet, rpc: Add createwalletdescriptor RPC\" (01b2aab1f8f61bc85345e106893e0ff2e590a56a)\r\n\r\nWould suggest making the internal and hdkey paramers name-only parameters using OBJ_NAMED_PARAMS (see earlier comment https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435366492) to avoid usage errors and make it easier to add new options and arguments later.\r\n\r\nWould suggest keeping address_type as a positional parameter, though, since it's required and the values are unambiguous. Also could consider renaming \"address_type\" to just \"type\" to make it easier to pass by name and because maybe we will want to support creating other types of descriptors that don't correspond exactly to address types.",
      "created_at": "2023-12-22T23:56:11Z",
      "updated_at": "2023-12-23T00:05:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435398854",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435398854"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
        }
      },
      "start_line": null,
      "original_start_line": 924,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 926,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435423974",
      "pull_request_review_id": 1795367297,
      "id": 1435423974,
      "node_id": "PRRC_kwDOABII585VjtTm",
      "diff_hunk": "@@ -813,6 +813,106 @@ static RPCHelpMan migratewallet()\n     };\n }\n \n+RPCHelpMan gethdkeys()\n+{\n+    return RPCHelpMan{\n+        \"gethdkeys\",\n+        \"\\nList all BIP 32 HD keys in the wallet and which descriptors use them.\\n\",\n+        {\n+            {\"active_only\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show the keys for only active descriptors\"},\n+            {\"private\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show private keys.\"}\n+        },\n+        RPCResult{RPCResult::Type::ARR, \"\", \"\", {\n+            {\n+                {RPCResult::Type::OBJ, \"\", \"\", {\n+                    {RPCResult::Type::STR, \"xpub\", \"The extended public key\"},\n+                    {RPCResult::Type::BOOL, \"has_private\", \"Whether the wallet has the private key for this xpub\"},\n+                    {RPCResult::Type::STR, \"xprv\", /*optional=*/true, \"The extended private key if private is true\"},\n+                    {RPCResult::Type::ARR, \"descriptors\", \"Array of descriptor objects that use this HD key\",\n+                    {\n+                        {RPCResult::Type::OBJ, \"\", \"\", {\n+                            {RPCResult::Type::STR, \"desc\", \"Descriptor string representation\"},\n+                            {RPCResult::Type::BOOL, \"active\", \"Whether this descriptor is currently used to generate new addresses\"},\n+                        }},\n+                    }},\n+                }},\n+            }\n+        }},\n+        RPCExamples{\n+            HelpExampleCli(\"gethdkeys\", \"\") + HelpExampleRpc(\"gethdkeys\", \"\")\n+            + HelpExampleCli(\"gethdkeys\", \"true\") + HelpExampleRpc(\"gethdkeys\", \"true\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            const std::shared_ptr<const CWallet> wallet = GetWalletForJSONRPCRequest(request);\n+            if (!wallet) return UniValue::VNULL;\n+\n+            if (!wallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"gethdkeys is not available for non-descriptor wallets\");\n+            }\n+\n+            const bool active_only = !request.params[0].isNull() && request.params[0].get_bool();\n+            const bool priv = !request.params[1].isNull() && request.params[1].get_bool();\n+            if (priv) {\n+                EnsureWalletIsUnlocked(*wallet);\n+            }\n+\n+            LOCK(wallet->cs_wallet);\n+\n+            std::set<ScriptPubKeyMan*> spkms;\n+            if (active_only) {\n+                spkms = wallet->GetActiveScriptPubKeyMans();\n+            } else {\n+                spkms = wallet->GetAllScriptPubKeyMans();\n+            }\n+\n+            std::map<CExtPubKey, std::set<std::tuple<std::string, bool, bool>>> wallet_xpubs;\n+            std::map<CExtPubKey, CExtKey> wallet_xprvs;\n+            for (auto spkm : spkms) {\n+                auto desc_spkm{dynamic_cast<DescriptorScriptPubKeyMan*>(spkm)};\n+                LOCK(desc_spkm->cs_desc_man);\n+                WalletDescriptor w_desc = desc_spkm->GetWalletDescriptor();\n+\n+                // Retrieve the pubkeys from the descriptor\n+                std::set<CPubKey> desc_pubkeys;\n+                std::set<CExtPubKey> desc_xpubs;\n+                w_desc.descriptor->GetPubKeys(desc_pubkeys, desc_xpubs);\n+                for (const CExtPubKey& xpub : desc_xpubs) {\n+                    wallet_xpubs[xpub].emplace(w_desc.descriptor->ToString(), wallet->IsActiveScriptPubKeyMan(spkm), desc_spkm->HasPrivKey(xpub.pubkey));\n+                    if (std::optional<CKey> key = desc_spkm->GetKey(xpub.pubkey)) {\n+                        wallet_xprvs[xpub] = CExtKey(xpub, *key);\n+                    }",
      "path": "src/wallet/rpc/wallet.cpp",
      "position": null,
      "original_position": 72,
      "commit_id": "746b6d88395607abbd3c13bbdcdd4ca83e9bc9e4",
      "original_commit_id": "5deafad2f61f626b50b6c173558ac7236cceff13",
      "in_reply_to_id": 1435375318,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`cs_wallet` is being held earlier, and that will prevent the wallet from locked.",
      "created_at": "2023-12-23T01:22:47Z",
      "updated_at": "2023-12-23T01:22:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435423974",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435423974"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
        }
      },
      "start_line": null,
      "original_start_line": 882,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 896,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435436394",
      "pull_request_review_id": 1795372509,
      "id": 1435436394,
      "node_id": "PRRC_kwDOABII585VjwVq",
      "diff_hunk": "@@ -2137,6 +2138,35 @@ std::map<CKeyID, CKey> DescriptorScriptPubKeyMan::GetKeys() const\n     return m_map_keys;\n }\n \n+bool DescriptorScriptPubKeyMan::HasPrivKey(const CPubKey& pubkey) const",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 12,
      "commit_id": "746b6d88395607abbd3c13bbdcdd4ca83e9bc9e4",
      "original_commit_id": "484711baa994d482110edaf510377181b8b2b465",
      "in_reply_to_id": 1435355508,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2023-12-23T02:10:45Z",
      "updated_at": "2023-12-23T02:10:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435436394",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435436394"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2141,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435436422",
      "pull_request_review_id": 1795372516,
      "id": 1435436422,
      "node_id": "PRRC_kwDOABII585VjwWG",
      "diff_hunk": "@@ -813,6 +813,106 @@ static RPCHelpMan migratewallet()\n     };\n }\n \n+RPCHelpMan gethdkeys()\n+{\n+    return RPCHelpMan{\n+        \"gethdkeys\",\n+        \"\\nList all BIP 32 HD keys in the wallet and which descriptors use them.\\n\",\n+        {\n+            {\"active_only\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show the keys for only active descriptors\"},\n+            {\"private\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show private keys.\"}",
      "path": "src/wallet/rpc/wallet.cpp",
      "position": null,
      "original_position": 11,
      "commit_id": "746b6d88395607abbd3c13bbdcdd4ca83e9bc9e4",
      "original_commit_id": "5deafad2f61f626b50b6c173558ac7236cceff13",
      "in_reply_to_id": 1435366492,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done as suggested",
      "created_at": "2023-12-23T02:10:52Z",
      "updated_at": "2023-12-23T02:10:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435436422",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435436422"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
        }
      },
      "start_line": null,
      "original_start_line": 822,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 823,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435436471",
      "pull_request_review_id": 1795372530,
      "id": 1435436471,
      "node_id": "PRRC_kwDOABII585VjwW3",
      "diff_hunk": "@@ -813,6 +813,106 @@ static RPCHelpMan migratewallet()\n     };\n }\n \n+RPCHelpMan gethdkeys()\n+{\n+    return RPCHelpMan{\n+        \"gethdkeys\",\n+        \"\\nList all BIP 32 HD keys in the wallet and which descriptors use them.\\n\",\n+        {\n+            {\"active_only\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show the keys for only active descriptors\"},\n+            {\"private\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show private keys.\"}\n+        },\n+        RPCResult{RPCResult::Type::ARR, \"\", \"\", {\n+            {\n+                {RPCResult::Type::OBJ, \"\", \"\", {\n+                    {RPCResult::Type::STR, \"xpub\", \"The extended public key\"},\n+                    {RPCResult::Type::BOOL, \"has_private\", \"Whether the wallet has the private key for this xpub\"},\n+                    {RPCResult::Type::STR, \"xprv\", /*optional=*/true, \"The extended private key if private is true\"},\n+                    {RPCResult::Type::ARR, \"descriptors\", \"Array of descriptor objects that use this HD key\",\n+                    {\n+                        {RPCResult::Type::OBJ, \"\", \"\", {\n+                            {RPCResult::Type::STR, \"desc\", \"Descriptor string representation\"},\n+                            {RPCResult::Type::BOOL, \"active\", \"Whether this descriptor is currently used to generate new addresses\"},\n+                        }},\n+                    }},\n+                }},\n+            }\n+        }},\n+        RPCExamples{\n+            HelpExampleCli(\"gethdkeys\", \"\") + HelpExampleRpc(\"gethdkeys\", \"\")\n+            + HelpExampleCli(\"gethdkeys\", \"true\") + HelpExampleRpc(\"gethdkeys\", \"true\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            const std::shared_ptr<const CWallet> wallet = GetWalletForJSONRPCRequest(request);\n+            if (!wallet) return UniValue::VNULL;\n+\n+            if (!wallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"gethdkeys is not available for non-descriptor wallets\");\n+            }\n+\n+            const bool active_only = !request.params[0].isNull() && request.params[0].get_bool();\n+            const bool priv = !request.params[1].isNull() && request.params[1].get_bool();\n+            if (priv) {\n+                EnsureWalletIsUnlocked(*wallet);\n+            }\n+\n+            LOCK(wallet->cs_wallet);\n+\n+            std::set<ScriptPubKeyMan*> spkms;\n+            if (active_only) {\n+                spkms = wallet->GetActiveScriptPubKeyMans();\n+            } else {\n+                spkms = wallet->GetAllScriptPubKeyMans();\n+            }\n+\n+            std::map<CExtPubKey, std::set<std::tuple<std::string, bool, bool>>> wallet_xpubs;\n+            std::map<CExtPubKey, CExtKey> wallet_xprvs;\n+            for (auto spkm : spkms) {\n+                auto desc_spkm{dynamic_cast<DescriptorScriptPubKeyMan*>(spkm)};\n+                LOCK(desc_spkm->cs_desc_man);",
      "path": "src/wallet/rpc/wallet.cpp",
      "position": 66,
      "original_position": 61,
      "commit_id": "746b6d88395607abbd3c13bbdcdd4ca83e9bc9e4",
      "original_commit_id": "5deafad2f61f626b50b6c173558ac7236cceff13",
      "in_reply_to_id": 1435369940,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added a `CHECK_NONFATAL` (one of the linters doesn't like `Assert`)",
      "created_at": "2023-12-23T02:11:03Z",
      "updated_at": "2023-12-23T02:11:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435436471",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435436471"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 882,
      "original_line": 882,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435436629",
      "pull_request_review_id": 1795372564,
      "id": 1435436629,
      "node_id": "PRRC_kwDOABII585VjwZV",
      "diff_hunk": "@@ -813,6 +813,106 @@ static RPCHelpMan migratewallet()\n     };\n }\n \n+RPCHelpMan gethdkeys()\n+{\n+    return RPCHelpMan{\n+        \"gethdkeys\",\n+        \"\\nList all BIP 32 HD keys in the wallet and which descriptors use them.\\n\",\n+        {\n+            {\"active_only\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show the keys for only active descriptors\"},\n+            {\"private\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show private keys.\"}\n+        },\n+        RPCResult{RPCResult::Type::ARR, \"\", \"\", {\n+            {\n+                {RPCResult::Type::OBJ, \"\", \"\", {\n+                    {RPCResult::Type::STR, \"xpub\", \"The extended public key\"},\n+                    {RPCResult::Type::BOOL, \"has_private\", \"Whether the wallet has the private key for this xpub\"},\n+                    {RPCResult::Type::STR, \"xprv\", /*optional=*/true, \"The extended private key if private is true\"},\n+                    {RPCResult::Type::ARR, \"descriptors\", \"Array of descriptor objects that use this HD key\",\n+                    {\n+                        {RPCResult::Type::OBJ, \"\", \"\", {\n+                            {RPCResult::Type::STR, \"desc\", \"Descriptor string representation\"},\n+                            {RPCResult::Type::BOOL, \"active\", \"Whether this descriptor is currently used to generate new addresses\"},\n+                        }},\n+                    }},\n+                }},\n+            }\n+        }},\n+        RPCExamples{\n+            HelpExampleCli(\"gethdkeys\", \"\") + HelpExampleRpc(\"gethdkeys\", \"\")\n+            + HelpExampleCli(\"gethdkeys\", \"true\") + HelpExampleRpc(\"gethdkeys\", \"true\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            const std::shared_ptr<const CWallet> wallet = GetWalletForJSONRPCRequest(request);\n+            if (!wallet) return UniValue::VNULL;\n+\n+            if (!wallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"gethdkeys is not available for non-descriptor wallets\");\n+            }\n+\n+            const bool active_only = !request.params[0].isNull() && request.params[0].get_bool();\n+            const bool priv = !request.params[1].isNull() && request.params[1].get_bool();\n+            if (priv) {\n+                EnsureWalletIsUnlocked(*wallet);\n+            }\n+\n+            LOCK(wallet->cs_wallet);\n+\n+            std::set<ScriptPubKeyMan*> spkms;\n+            if (active_only) {\n+                spkms = wallet->GetActiveScriptPubKeyMans();\n+            } else {\n+                spkms = wallet->GetAllScriptPubKeyMans();\n+            }\n+\n+            std::map<CExtPubKey, std::set<std::tuple<std::string, bool, bool>>> wallet_xpubs;\n+            std::map<CExtPubKey, CExtKey> wallet_xprvs;\n+            for (auto spkm : spkms) {\n+                auto desc_spkm{dynamic_cast<DescriptorScriptPubKeyMan*>(spkm)};",
      "path": "src/wallet/rpc/wallet.cpp",
      "position": null,
      "original_position": 60,
      "commit_id": "746b6d88395607abbd3c13bbdcdd4ca83e9bc9e4",
      "original_commit_id": "5deafad2f61f626b50b6c173558ac7236cceff13",
      "in_reply_to_id": 1435372329,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2023-12-23T02:11:31Z",
      "updated_at": "2023-12-23T02:11:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435436629",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435436629"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
        }
      },
      "start_line": null,
      "original_start_line": 871,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 872,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435436652",
      "pull_request_review_id": 1795372573,
      "id": 1435436652,
      "node_id": "PRRC_kwDOABII585VjwZs",
      "diff_hunk": "@@ -813,6 +813,106 @@ static RPCHelpMan migratewallet()\n     };\n }\n \n+RPCHelpMan gethdkeys()\n+{\n+    return RPCHelpMan{\n+        \"gethdkeys\",\n+        \"\\nList all BIP 32 HD keys in the wallet and which descriptors use them.\\n\",\n+        {\n+            {\"active_only\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show the keys for only active descriptors\"},\n+            {\"private\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show private keys.\"}\n+        },\n+        RPCResult{RPCResult::Type::ARR, \"\", \"\", {\n+            {\n+                {RPCResult::Type::OBJ, \"\", \"\", {\n+                    {RPCResult::Type::STR, \"xpub\", \"The extended public key\"},\n+                    {RPCResult::Type::BOOL, \"has_private\", \"Whether the wallet has the private key for this xpub\"},\n+                    {RPCResult::Type::STR, \"xprv\", /*optional=*/true, \"The extended private key if private is true\"},\n+                    {RPCResult::Type::ARR, \"descriptors\", \"Array of descriptor objects that use this HD key\",\n+                    {\n+                        {RPCResult::Type::OBJ, \"\", \"\", {\n+                            {RPCResult::Type::STR, \"desc\", \"Descriptor string representation\"},\n+                            {RPCResult::Type::BOOL, \"active\", \"Whether this descriptor is currently used to generate new addresses\"},\n+                        }},\n+                    }},\n+                }},\n+            }\n+        }},\n+        RPCExamples{\n+            HelpExampleCli(\"gethdkeys\", \"\") + HelpExampleRpc(\"gethdkeys\", \"\")\n+            + HelpExampleCli(\"gethdkeys\", \"true\") + HelpExampleRpc(\"gethdkeys\", \"true\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            const std::shared_ptr<const CWallet> wallet = GetWalletForJSONRPCRequest(request);\n+            if (!wallet) return UniValue::VNULL;\n+\n+            if (!wallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"gethdkeys is not available for non-descriptor wallets\");\n+            }\n+\n+            const bool active_only = !request.params[0].isNull() && request.params[0].get_bool();\n+            const bool priv = !request.params[1].isNull() && request.params[1].get_bool();\n+            if (priv) {\n+                EnsureWalletIsUnlocked(*wallet);\n+            }\n+\n+            LOCK(wallet->cs_wallet);\n+\n+            std::set<ScriptPubKeyMan*> spkms;\n+            if (active_only) {\n+                spkms = wallet->GetActiveScriptPubKeyMans();\n+            } else {\n+                spkms = wallet->GetAllScriptPubKeyMans();\n+            }\n+\n+            std::map<CExtPubKey, std::set<std::tuple<std::string, bool, bool>>> wallet_xpubs;\n+            std::map<CExtPubKey, CExtKey> wallet_xprvs;\n+            for (auto spkm : spkms) {\n+                auto desc_spkm{dynamic_cast<DescriptorScriptPubKeyMan*>(spkm)};\n+                LOCK(desc_spkm->cs_desc_man);\n+                WalletDescriptor w_desc = desc_spkm->GetWalletDescriptor();\n+\n+                // Retrieve the pubkeys from the descriptor\n+                std::set<CPubKey> desc_pubkeys;\n+                std::set<CExtPubKey> desc_xpubs;\n+                w_desc.descriptor->GetPubKeys(desc_pubkeys, desc_xpubs);\n+                for (const CExtPubKey& xpub : desc_xpubs) {\n+                    wallet_xpubs[xpub].emplace(w_desc.descriptor->ToString(), wallet->IsActiveScriptPubKeyMan(spkm), desc_spkm->HasPrivKey(xpub.pubkey));\n+                    if (std::optional<CKey> key = desc_spkm->GetKey(xpub.pubkey)) {\n+                        wallet_xprvs[xpub] = CExtKey(xpub, *key);\n+                    }\n+                }\n+            }\n+\n+            UniValue response(UniValue::VARR);\n+            for (const auto& [xpub, descs] : wallet_xpubs) {\n+                bool has_xprv = false;\n+                UniValue descriptors(UniValue::VARR);\n+                for (const auto& [desc, active, has_priv] : descs) {\n+                    UniValue d(UniValue::VOBJ);\n+                    d.pushKV(\"desc\", desc);",
      "path": "src/wallet/rpc/wallet.cpp",
      "position": 90,
      "original_position": 82,
      "commit_id": "746b6d88395607abbd3c13bbdcdd4ca83e9bc9e4",
      "original_commit_id": "5deafad2f61f626b50b6c173558ac7236cceff13",
      "in_reply_to_id": 1435376241,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2023-12-23T02:11:39Z",
      "updated_at": "2023-12-23T02:11:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435436652",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435436652"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 906,
      "original_line": 906,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435436670",
      "pull_request_review_id": 1795372596,
      "id": 1435436670,
      "node_id": "PRRC_kwDOABII585VjwZ-",
      "diff_hunk": "@@ -813,6 +813,106 @@ static RPCHelpMan migratewallet()\n     };\n }\n \n+RPCHelpMan gethdkeys()\n+{\n+    return RPCHelpMan{\n+        \"gethdkeys\",\n+        \"\\nList all BIP 32 HD keys in the wallet and which descriptors use them.\\n\",\n+        {\n+            {\"active_only\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show the keys for only active descriptors\"},\n+            {\"private\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show private keys.\"}\n+        },\n+        RPCResult{RPCResult::Type::ARR, \"\", \"\", {\n+            {\n+                {RPCResult::Type::OBJ, \"\", \"\", {\n+                    {RPCResult::Type::STR, \"xpub\", \"The extended public key\"},\n+                    {RPCResult::Type::BOOL, \"has_private\", \"Whether the wallet has the private key for this xpub\"},\n+                    {RPCResult::Type::STR, \"xprv\", /*optional=*/true, \"The extended private key if private is true\"},\n+                    {RPCResult::Type::ARR, \"descriptors\", \"Array of descriptor objects that use this HD key\",\n+                    {\n+                        {RPCResult::Type::OBJ, \"\", \"\", {\n+                            {RPCResult::Type::STR, \"desc\", \"Descriptor string representation\"},\n+                            {RPCResult::Type::BOOL, \"active\", \"Whether this descriptor is currently used to generate new addresses\"},\n+                        }},\n+                    }},\n+                }},\n+            }\n+        }},\n+        RPCExamples{\n+            HelpExampleCli(\"gethdkeys\", \"\") + HelpExampleRpc(\"gethdkeys\", \"\")\n+            + HelpExampleCli(\"gethdkeys\", \"true\") + HelpExampleRpc(\"gethdkeys\", \"true\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            const std::shared_ptr<const CWallet> wallet = GetWalletForJSONRPCRequest(request);\n+            if (!wallet) return UniValue::VNULL;\n+\n+            if (!wallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"gethdkeys is not available for non-descriptor wallets\");\n+            }\n+\n+            const bool active_only = !request.params[0].isNull() && request.params[0].get_bool();\n+            const bool priv = !request.params[1].isNull() && request.params[1].get_bool();\n+            if (priv) {\n+                EnsureWalletIsUnlocked(*wallet);\n+            }\n+\n+            LOCK(wallet->cs_wallet);\n+\n+            std::set<ScriptPubKeyMan*> spkms;\n+            if (active_only) {\n+                spkms = wallet->GetActiveScriptPubKeyMans();\n+            } else {\n+                spkms = wallet->GetAllScriptPubKeyMans();\n+            }\n+\n+            std::map<CExtPubKey, std::set<std::tuple<std::string, bool, bool>>> wallet_xpubs;\n+            std::map<CExtPubKey, CExtKey> wallet_xprvs;\n+            for (auto spkm : spkms) {\n+                auto desc_spkm{dynamic_cast<DescriptorScriptPubKeyMan*>(spkm)};\n+                LOCK(desc_spkm->cs_desc_man);\n+                WalletDescriptor w_desc = desc_spkm->GetWalletDescriptor();\n+\n+                // Retrieve the pubkeys from the descriptor\n+                std::set<CPubKey> desc_pubkeys;\n+                std::set<CExtPubKey> desc_xpubs;\n+                w_desc.descriptor->GetPubKeys(desc_pubkeys, desc_xpubs);\n+                for (const CExtPubKey& xpub : desc_xpubs) {\n+                    wallet_xpubs[xpub].emplace(w_desc.descriptor->ToString(), wallet->IsActiveScriptPubKeyMan(spkm), desc_spkm->HasPrivKey(xpub.pubkey));\n+                    if (std::optional<CKey> key = desc_spkm->GetKey(xpub.pubkey)) {\n+                        wallet_xprvs[xpub] = CExtKey(xpub, *key);\n+                    }\n+                }\n+            }\n+\n+            UniValue response(UniValue::VARR);\n+            for (const auto& [xpub, descs] : wallet_xpubs) {\n+                bool has_xprv = false;\n+                UniValue descriptors(UniValue::VARR);\n+                for (const auto& [desc, active, has_priv] : descs) {\n+                    UniValue d(UniValue::VOBJ);\n+                    d.pushKV(\"desc\", desc);\n+                    d.pushKV(\"active\", active);\n+                    has_xprv |= has_priv;\n+\n+                    descriptors.push_back(d);",
      "path": "src/wallet/rpc/wallet.cpp",
      "position": null,
      "original_position": 86,
      "commit_id": "746b6d88395607abbd3c13bbdcdd4ca83e9bc9e4",
      "original_commit_id": "5deafad2f61f626b50b6c173558ac7236cceff13",
      "in_reply_to_id": 1435377746,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2023-12-23T02:11:43Z",
      "updated_at": "2023-12-23T02:11:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435436670",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435436670"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 898,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435436690",
      "pull_request_review_id": 1795372622,
      "id": 1435436690,
      "node_id": "PRRC_kwDOABII585VjwaS",
      "diff_hunk": "@@ -3553,6 +3553,25 @@ void CWallet::LoadDescriptorScriptPubKeyMan(uint256 id, WalletDescriptor& desc)\n     }\n }\n \n+uint256 CWallet::SetupDescriptorScriptPubKeyMan(WalletBatch& batch, const CExtKey& master_key, const OutputType& output_type, bool internal)\n+{\n+    AssertLockHeld(cs_wallet);\n+    auto spk_manager = std::unique_ptr<DescriptorScriptPubKeyMan>(new DescriptorScriptPubKeyMan(*this, m_keypool_size));\n+    if (IsCrypted()) {\n+        if (IsLocked()) {\n+            throw std::runtime_error(std::string(__func__) + \": Wallet is locked, cannot setup new descriptors\");\n+        }\n+        if (!spk_manager->CheckDecryptionKey(vMasterKey) && !spk_manager->Encrypt(vMasterKey, nullptr)) {",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 12,
      "commit_id": "746b6d88395607abbd3c13bbdcdd4ca83e9bc9e4",
      "original_commit_id": "280d26b19e9222afa902ad09cd7b42c2eb3e0044",
      "in_reply_to_id": 1435381067,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Indeed, fixed.",
      "created_at": "2023-12-23T02:11:52Z",
      "updated_at": "2023-12-23T02:11:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435436690",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435436690"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3564,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435436779",
      "pull_request_review_id": 1795372651,
      "id": 1435436779,
      "node_id": "PRRC_kwDOABII585Vjwbr",
      "diff_hunk": "@@ -624,6 +624,7 @@ class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n \n     bool IsHDEnabled() const override;\n \n+    static WalletDescriptor GenerateWalletDescriptor(const CExtKey& master_key, const OutputType& output_type, bool internal);",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": null,
      "original_position": 4,
      "commit_id": "746b6d88395607abbd3c13bbdcdd4ca83e9bc9e4",
      "original_commit_id": "fc3ccf068fbbf429eff9dce072bc33d78ad27509",
      "in_reply_to_id": 1435387051,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2023-12-23T02:12:05Z",
      "updated_at": "2023-12-23T02:12:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435436779",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435436779"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 627,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435436813",
      "pull_request_review_id": 1795372662,
      "id": 1435436813,
      "node_id": "PRRC_kwDOABII585VjwcN",
      "diff_hunk": "@@ -1044,6 +1044,12 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n \n     //! Whether the (external) signer performs R-value signature grinding\n     bool CanGrindR() const;\n+\n+    //! Find the single xpub used by all active descriptors, or return nullopt\n+    std::optional<CExtPubKey> GetActiveHDPubKey() const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+\n+    //! Find the private key for the given public key from the wallet's descriptors\n+    std::optional<CKey> CWallet::GetKey(const CPubKey& pubkey) const;",
      "path": "src/wallet/wallet.h",
      "position": null,
      "original_position": 9,
      "commit_id": "746b6d88395607abbd3c13bbdcdd4ca83e9bc9e4",
      "original_commit_id": "647118e36563ef421b6c4f6edeac33ce6aff5588",
      "in_reply_to_id": 1435387959,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Moved to the right commit.",
      "created_at": "2023-12-23T02:12:14Z",
      "updated_at": "2023-12-23T02:12:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435436813",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435436813"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1052,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435437218",
      "pull_request_review_id": 1795372884,
      "id": 1435437218,
      "node_id": "PRRC_kwDOABII585Vjwii",
      "diff_hunk": "@@ -4365,4 +4365,37 @@ util::Result<MigrationResult> MigrateLegacyToDescriptor(const std::string& walle\n     }\n     return res;\n }\n+\n+std::optional<CExtPubKey> CWallet::GetActiveHDPubKey() const\n+{\n+    AssertLockHeld(cs_wallet);\n+\n+    if (!IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) return std::nullopt;\n+\n+    std::optional<CExtPubKey> active_xpub;\n+    for (const auto& spkm : GetActiveScriptPubKeyMans()) {\n+        const DescriptorScriptPubKeyMan* desc_spkm = dynamic_cast<DescriptorScriptPubKeyMan*>(spkm);\n+        assert(desc_spkm);\n+        LOCK(desc_spkm->cs_desc_man);\n+        WalletDescriptor w_desc = desc_spkm->GetWalletDescriptor();\n+\n+        // We can only determine the active hd key if all descriptors have exactly 1 xpub\n+        std::set<CPubKey> desc_pubkeys;\n+        std::set<CExtPubKey> desc_xpubs;\n+        w_desc.descriptor->GetPubKeys(desc_pubkeys, desc_xpubs);\n+        if (desc_xpubs.size() != 1 || desc_pubkeys.size() != 0) {\n+            return std::nullopt;\n+        }\n+        const CExtPubKey& xpub = *desc_xpubs.begin();\n+\n+        // All active descriptors must have the same xpub",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 27,
      "commit_id": "746b6d88395607abbd3c13bbdcdd4ca83e9bc9e4",
      "original_commit_id": "647118e36563ef421b6c4f6edeac33ce6aff5588",
      "in_reply_to_id": 1435391901,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This function was intended to only return a `CExtPubKey` if all active descriptors shared the same xpub, so if they differed, it would return `std::nullopt`. The comment was stating what it was attempting to do, not what it was expecting.\r\n\r\nIn any case, having the caller determine what to do if there is more than one xpub in the active descriptors is probably better, so I've changed it to do that and this comment is no longer relevant.",
      "created_at": "2023-12-23T02:14:11Z",
      "updated_at": "2023-12-23T02:14:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435437218",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435437218"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4391,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435437249",
      "pull_request_review_id": 1795372892,
      "id": 1435437249,
      "node_id": "PRRC_kwDOABII585VjwjB",
      "diff_hunk": "@@ -913,6 +913,108 @@ RPCHelpMan gethdkeys()\n     };\n }\n \n+static RPCHelpMan createwalletdescriptor()\n+{\n+    return RPCHelpMan{\"createwalletdescriptor\",\n+        \"Creates the wallet's descriptor for the given address type. \"\n+        \"Only works on wallets that contain automatically generated descriptors. \"\n+        \"The address type must be one that the wallet does not already have a descriptor for.\"\n+        + HELP_REQUIRING_PASSPHRASE,\n+        {\n+            {\"address_type\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The address type the descriptor will produce. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", \\\"bech32\\\", and \\\"bech32m\\\".\"},\n+            {\"internal\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"Both external and internal will be generated unless this parameter is specified\"}, \"Whether to only make one descriptor that is internal (if parameter is true) or external (if parameter is false)\"},\n+            {\"hdkey\", RPCArg::Type::STR, RPCArg::DefaultHint{\"The HD key used by all other active descriptors\"}, \"The HD key that the wallet knows the private key of, listed using 'gethdkeys', to use for this descriptor's key\"},",
      "path": "src/wallet/rpc/wallet.cpp",
      "position": null,
      "original_position": 14,
      "commit_id": "746b6d88395607abbd3c13bbdcdd4ca83e9bc9e4",
      "original_commit_id": "01b2aab1f8f61bc85345e106893e0ff2e590a56a",
      "in_reply_to_id": 1435398854,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done as suggested.",
      "created_at": "2023-12-23T02:14:18Z",
      "updated_at": "2023-12-23T02:14:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435437249",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435437249"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
        }
      },
      "start_line": null,
      "original_start_line": 924,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 926,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435439477",
      "pull_request_review_id": 1795373568,
      "id": 1435439477,
      "node_id": "PRRC_kwDOABII585VjxF1",
      "diff_hunk": "@@ -3553,6 +3553,25 @@ void CWallet::LoadDescriptorScriptPubKeyMan(uint256 id, WalletDescriptor& desc)\n     }\n }\n \n+uint256 CWallet::SetupDescriptorScriptPubKeyMan(WalletBatch& batch, const CExtKey& master_key, const OutputType& output_type, bool internal)",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "746b6d88395607abbd3c13bbdcdd4ca83e9bc9e4",
      "original_commit_id": "280d26b19e9222afa902ad09cd7b42c2eb3e0044",
      "in_reply_to_id": 1435383694,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2023-12-23T02:22:37Z",
      "updated_at": "2023-12-23T02:22:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435439477",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435439477"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3556,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435607572",
      "pull_request_review_id": 1795440020,
      "id": 1435607572,
      "node_id": "PRRC_kwDOABII585VkaIU",
      "diff_hunk": "@@ -813,6 +813,216 @@ static RPCHelpMan migratewallet()\n     };\n }\n \n+RPCHelpMan gethdkeys()\n+{\n+    return RPCHelpMan{\n+        \"gethdkeys\",\n+        \"\\nList all BIP 32 HD keys in the wallet and which descriptors use them.\\n\",\n+        {\n+            {\"options\", RPCArg::Type::OBJ_NAMED_PARAMS, RPCArg::Optional::OMITTED, \"\", {\n+                {\"active_only\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show the keys for only active descriptors\"},\n+                {\"private\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show private keys.\"}\n+            }},\n+        },\n+        RPCResult{RPCResult::Type::ARR, \"\", \"\", {\n+            {\n+                {RPCResult::Type::OBJ, \"\", \"\", {\n+                    {RPCResult::Type::STR, \"xpub\", \"The extended public key\"},\n+                    {RPCResult::Type::BOOL, \"has_private\", \"Whether the wallet has the private key for this xpub\"},\n+                    {RPCResult::Type::STR, \"xprv\", /*optional=*/true, \"The extended private key if private is true\"},\n+                    {RPCResult::Type::ARR, \"descriptors\", \"Array of descriptor objects that use this HD key\",\n+                    {\n+                        {RPCResult::Type::OBJ, \"\", \"\", {\n+                            {RPCResult::Type::STR, \"desc\", \"Descriptor string representation\"},\n+                            {RPCResult::Type::BOOL, \"active\", \"Whether this descriptor is currently used to generate new addresses\"},\n+                        }},\n+                    }},\n+                }},\n+            }\n+        }},\n+        RPCExamples{\n+            HelpExampleCli(\"gethdkeys\", \"\") + HelpExampleRpc(\"gethdkeys\", \"\")\n+            + HelpExampleCli(\"gethdkeys\", \"true\") + HelpExampleRpc(\"gethdkeys\", \"true\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            const std::shared_ptr<const CWallet> wallet = GetWalletForJSONRPCRequest(request);\n+            if (!wallet) return UniValue::VNULL;\n+\n+            if (!wallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"gethdkeys is not available for non-descriptor wallets\");\n+            }\n+\n+            LOCK(wallet->cs_wallet);\n+\n+            UniValue options{request.params[0].isNull() ? UniValue::VOBJ : request.params[0]};\n+            const bool active_only{options.exists(\"active_only\") ? options[\"active_only\"].get_bool() : false};\n+            const bool priv{options.exists(\"private\") ? options[\"private\"].get_bool() : false};\n+            if (priv) {\n+                EnsureWalletIsUnlocked(*wallet);\n+            }\n+\n+\n+            std::set<ScriptPubKeyMan*> spkms;\n+            if (active_only) {\n+                spkms = wallet->GetActiveScriptPubKeyMans();\n+            } else {\n+                spkms = wallet->GetAllScriptPubKeyMans();\n+            }\n+\n+            std::map<CExtPubKey, std::set<std::tuple<std::string, bool, bool>>> wallet_xpubs;\n+            std::map<CExtPubKey, CExtKey> wallet_xprvs;\n+            for (auto* spkm : spkms) {\n+                auto* desc_spkm{dynamic_cast<DescriptorScriptPubKeyMan*>(spkm)};\n+                CHECK_NONFATAL(desc_spkm);\n+                LOCK(desc_spkm->cs_desc_man);\n+                WalletDescriptor w_desc = desc_spkm->GetWalletDescriptor();\n+\n+                // Retrieve the pubkeys from the descriptor\n+                std::set<CPubKey> desc_pubkeys;\n+                std::set<CExtPubKey> desc_xpubs;\n+                w_desc.descriptor->GetPubKeys(desc_pubkeys, desc_xpubs);\n+                for (const CExtPubKey& xpub : desc_xpubs) {\n+                    wallet_xpubs[xpub].emplace(w_desc.descriptor->ToString(), wallet->IsActiveScriptPubKeyMan(spkm), desc_spkm->HasPrivKey(xpub.pubkey.GetID()));\n+                    if (std::optional<CKey> key = desc_spkm->GetKey(xpub.pubkey.GetID())) {\n+                        wallet_xprvs[xpub] = CExtKey(xpub, *key);\n+                    }\n+                }\n+            }\n+\n+            UniValue response(UniValue::VARR);\n+            for (const auto& [xpub, descs] : wallet_xpubs) {\n+                bool has_xprv = false;\n+                UniValue descriptors(UniValue::VARR);\n+                for (const auto& [desc, active, has_priv] : descs) {\n+                    UniValue d(UniValue::VOBJ);\n+                    d.pushKV(\"desc\", std::move(desc));\n+                    d.pushKV(\"active\", active);\n+                    has_xprv |= has_priv;\n+\n+                    descriptors.push_back(std::move(d));\n+                }\n+                UniValue xpub_info(UniValue::VOBJ);\n+                xpub_info.pushKV(\"xpub\", EncodeExtPubKey(xpub));\n+                xpub_info.pushKV(\"has_private\", has_xprv);\n+                if (priv) {\n+                    xpub_info.pushKV(\"xprv\", EncodeExtKey(wallet_xprvs.at(xpub)));\n+                }\n+                xpub_info.pushKV(\"descriptors\", std::move(descriptors));\n+\n+                response.push_back(std::move(xpub_info));\n+            }\n+\n+            return response;\n+        },\n+    };\n+}\n+\n+static RPCHelpMan createwalletdescriptor()",
      "path": "src/wallet/rpc/wallet.cpp",
      "position": 112,
      "original_position": 109,
      "commit_id": "746b6d88395607abbd3c13bbdcdd4ca83e9bc9e4",
      "original_commit_id": "e0ad5bce210681c40eebd892bcfbca25c1c63136",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Since this PR is adding the `createwalletdescriptor` method, maybe this is a good place to list some ways it could be extended in the future:\r\n\r\n- Probably it would be good not to require wallet to be unlocked when dealing with public keys. Currently the specified `hdkey` is unencrypted and reencrypted, but this shouldn't be necessary because the key is already in the wallet. (The only reason this seems to happen now is to copy the key, because internally we store keys in a slightly denormalized format, once per descriptor.)\r\n\r\n- It would be nice if `hdkey` parameter accepted not just public hd keys, but also private hd keys, and a \"generate\" value in a blank wallet so users don't need to chain together multiple commands to accomplish simple tasks, and so we only need two RPC methods which add descriptors and keys to the wallet: `importdescriptors` and `createwalletdescriptor`, without a third `addhdkey` method. Examples:\r\n  ```shell\r\n  # In a blank wallet, generate an hd key and use it in a new descriptor\r\n  createwalletdescriptor bech32 generate\r\n\r\n   # In a blank wallet, import an hd key and use it in a new descriptor\r\n  createwalletdescriptor bech32 xprv...\r\n  ```\r\n\r\n- It sounds like we want to discourage having multiple hd keys per wallet, and encourage having separate wallets instead. But if we did want to allow these, we could add a `force` option to allow creating descriptors with new hd keys even when existing hd keys are present. We could also allow a `rotate` option to allow this and additionally set descriptors using old keys to be inactive.\r\n\r\n- The `hdkey` parameter could accept hd master keys in different formats, for example as seed keys like the current `sethdseed` method, or seed hex strings like [#29054](https://github.com/bitcoin/bitcoin/pull/29054/commits/840516148cdb6ed6ce956d2d2c96a1cacc12bc85), or seed shares like [#27351](https://github.com/bitcoin/bitcoin/pull/27351/commits/e29e656cbdd7e230cd5d04910e93c1cc562d593b).\r\n\r\n- It would be nice if `type` parameter accepted a \"defaults\" value to set up descriptors for all default output types. Examples:\r\n  ```shell\r\n  # In a blank wallet, generate an hd key and generate default set of descriptors\r\n  createwalletdescriptor defaults generate\r\n\r\n  # Add missing descriptors to an existing wallet. For example, upgrade\r\n  # an older wallet not supporting bech32m to support it.\r\n  createwalletdescriptor defaults\r\n  ```\r\n\r\n- To support multisig, `type` parameter could accept an \"hdkey\" value to generate an [unused](https://github.com/bitcoin/bitcoin/pull/29136#issuecomment-1868202696) hd key in a blank wallet:\r\n  ```shell\r\n  # In a blank wallet, generate an hd key in an unused descriptor and output unused(xpub...)\r\n  createwalletdescriptor hdkey generate\r\n\r\n  # Alternately, import an unused key\r\n  createwalletdescriptor hdkey xprv...\r\n\r\n  # Import multisig descriptor with wallet public keys\r\n  importdescriptors [...]\r\n  ```\r\n\r\n- Maybe in the future to make multisig setup easier, `type` parameter could accept a \"multisig\" value and additional options to make it easier to create the descriptor using the right keys without doing extra work or using an outside tool.\r\n\r\n- Not recommending it, but I could imagine `type` and `hdkey` parameters being extended to accept other values in the future. For example maybe with [#27351](https://github.com/bitcoin/bitcoin/pull/27351), a \"codex32\" type could be useful. And if a wallet didn't have the same hdkey for every output type, it might be useful to be able specify \"default' for the hdkey parameter to use the hd key from the default output type, like `getnewaddress`.\r\n\r\n- It could make sense for `createwalletdescriptor` and `importdescriptors` to have other options in common. For example, it might make sense for `createwalletdescriptor` to accept a `timestamp` option when adding a descriptor with an existing hdkey, to rescan for transactions with the new descriptor.  In general `createwalletdescriptor` could be a higher level alternative to `importdescriptors` that is less flexible but easier to use for common tasks.\r\n\r\n- It could make sense to add an \"external\" type and `hd_account` option (see [#29129 (comment)](https://github.com/bitcoin/bitcoin/pull/29129#issuecomment-1869859432)) for external signer wallets :\r\n  ```shell\r\n  # Add descriptors from the external signer with the specified BIP44 account\r\n  createwalletdescriptor type=external hd_account=123\r\n  ```",
      "created_at": "2023-12-23T13:45:20Z",
      "updated_at": "2024-01-09T23:56:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1435607572",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435607572"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 928,
      "original_line": 928,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1445260009",
      "pull_request_review_id": 1809920961,
      "id": 1445260009,
      "node_id": "PRRC_kwDOABII585WJOrp",
      "diff_hunk": "@@ -628,6 +628,8 @@ class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n     bool SetupDescriptorGeneration(WalletBatch& batch, const CExtKey& master_key, OutputType addr_type, bool internal);\n \n     bool HavePrivateKeys() const override;\n+    bool HasPrivKey(const CKeyID& keyid) const EXCLUSIVE_LOCKS_REQUIRED(cs_desc_man);\n+    std::optional<CKey> GetKey(const CKeyID& keyid) const EXCLUSIVE_LOCKS_REQUIRED(cs_desc_man);",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": 6,
      "original_position": 5,
      "commit_id": "746b6d88395607abbd3c13bbdcdd4ca83e9bc9e4",
      "original_commit_id": "ebd02d73241c0922f486cdf14719281c079b45c7",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"desc spkm: Add functions to retrieve specific private keys\" (ebd02d73241c0922f486cdf14719281c079b45c7)\r\n\r\nMaybe add a comment saying it returns nullopt if the key doesn't exist, or can't be decrypted because the wallet is locked, or because there's decryption error. Otherwise it's not clear what the function is assuming or when it returns nullopt.",
      "created_at": "2024-01-08T19:55:07Z",
      "updated_at": "2024-01-09T19:11:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1445260009",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1445260009"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 638,
      "original_line": 638,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1445262239",
      "pull_request_review_id": 1809920961,
      "id": 1445262239,
      "node_id": "PRRC_kwDOABII585WJPOf",
      "diff_hunk": "@@ -813,6 +813,111 @@ static RPCHelpMan migratewallet()\n     };\n }\n \n+RPCHelpMan gethdkeys()\n+{\n+    return RPCHelpMan{\n+        \"gethdkeys\",\n+        \"\\nList all BIP 32 HD keys in the wallet and which descriptors use them.\\n\",\n+        {\n+            {\"options\", RPCArg::Type::OBJ_NAMED_PARAMS, RPCArg::Optional::OMITTED, \"\", {\n+                {\"active_only\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show the keys for only active descriptors\"},\n+                {\"private\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show private keys.\"}\n+            }},\n+        },\n+        RPCResult{RPCResult::Type::ARR, \"\", \"\", {\n+            {\n+                {RPCResult::Type::OBJ, \"\", \"\", {\n+                    {RPCResult::Type::STR, \"xpub\", \"The extended public key\"},\n+                    {RPCResult::Type::BOOL, \"has_private\", \"Whether the wallet has the private key for this xpub\"},\n+                    {RPCResult::Type::STR, \"xprv\", /*optional=*/true, \"The extended private key if private is true\"},\n+                    {RPCResult::Type::ARR, \"descriptors\", \"Array of descriptor objects that use this HD key\",\n+                    {\n+                        {RPCResult::Type::OBJ, \"\", \"\", {\n+                            {RPCResult::Type::STR, \"desc\", \"Descriptor string representation\"},\n+                            {RPCResult::Type::BOOL, \"active\", \"Whether this descriptor is currently used to generate new addresses\"},\n+                        }},\n+                    }},\n+                }},\n+            }\n+        }},\n+        RPCExamples{\n+            HelpExampleCli(\"gethdkeys\", \"\") + HelpExampleRpc(\"gethdkeys\", \"\")\n+            + HelpExampleCli(\"gethdkeys\", \"true\") + HelpExampleRpc(\"gethdkeys\", \"true\")",
      "path": "src/wallet/rpc/wallet.cpp",
      "position": null,
      "original_position": 33,
      "commit_id": "746b6d88395607abbd3c13bbdcdd4ca83e9bc9e4",
      "original_commit_id": "cbe990b1a95e6331106c3ce6d1f2abd860f88ea8",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"wallet, rpc: Add gethdkeys RPC\" (cbe990b1a95e6331106c3ce6d1f2abd860f88ea8)\r\n\r\nI  think this example is not right anymore since the parameter needs to be named. There seems to be a HelpExampleCliNamed function for this.",
      "created_at": "2024-01-08T19:57:16Z",
      "updated_at": "2024-01-09T19:11:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1445262239",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1445262239"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 845,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1445380623",
      "pull_request_review_id": 1809920961,
      "id": 1445380623,
      "node_id": "PRRC_kwDOABII585WJsIP",
      "diff_hunk": "@@ -4366,4 +4366,26 @@ util::Result<MigrationResult> MigrateLegacyToDescriptor(const std::string& walle\n     }\n     return res;\n }\n+\n+std::set<CExtPubKey> CWallet::GetActiveHDPubKeys() const\n+{\n+    AssertLockHeld(cs_wallet);\n+\n+    if (!IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) return {};\n+\n+    std::set<CExtPubKey> active_xpubs;\n+    for (const auto& spkm : GetActiveScriptPubKeyMans()) {\n+        const DescriptorScriptPubKeyMan* desc_spkm = dynamic_cast<DescriptorScriptPubKeyMan*>(spkm);\n+        assert(desc_spkm);\n+        LOCK(desc_spkm->cs_desc_man);\n+        WalletDescriptor w_desc = desc_spkm->GetWalletDescriptor();\n+\n+        // We can only determine the active hd key if all descriptors have exactly 1 xpub",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 18,
      "commit_id": "746b6d88395607abbd3c13bbdcdd4ca83e9bc9e4",
      "original_commit_id": "2621ca0e6418b406161b21b6afac159b0be775b7",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"wallet: Add GetActiveHDPubKeys to retrieve xpubs from active descriptors\" (2621ca0e6418b406161b21b6afac159b0be775b7)\r\n\r\nShould delete this comment if it just applies to calling code (it doesn't seem to be enforced here).",
      "created_at": "2024-01-08T21:49:01Z",
      "updated_at": "2024-01-09T19:11:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1445380623",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1445380623"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4383,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446440048",
      "pull_request_review_id": 1809920961,
      "id": 1446440048,
      "node_id": "PRRC_kwDOABII585WNuxw",
      "diff_hunk": "@@ -936,6 +936,7 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n \n     //! Returns all unique ScriptPubKeyMans in m_internal_spk_managers and m_external_spk_managers\n     std::set<ScriptPubKeyMan*> GetActiveScriptPubKeyMans() const;\n+    bool IsActiveScriptPubKeyMan(const ScriptPubKeyMan* spkm) const;",
      "path": "src/wallet/wallet.h",
      "position": null,
      "original_position": 4,
      "commit_id": "746b6d88395607abbd3c13bbdcdd4ca83e9bc9e4",
      "original_commit_id": "2c98b2f395eafa125054e2f6e7c570e18795e318",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"wallet: Add IsActiveScriptPubKeyMan\" (2c98b2f395eafa125054e2f6e7c570e18795e318)\r\n\r\nWould be a little better to take a reference than a pointer, since it's not useful to be able to pass null.",
      "created_at": "2024-01-09T18:10:37Z",
      "updated_at": "2024-01-09T19:11:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1446440048",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446440048"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 939,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446457022",
      "pull_request_review_id": 1809920961,
      "id": 1446457022,
      "node_id": "PRRC_kwDOABII585WNy6-",
      "diff_hunk": "@@ -1011,6 +1011,8 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n     //! @param[in] internal Whether this ScriptPubKeyMan provides change addresses\n     void DeactivateScriptPubKeyMan(uint256 id, OutputType type, bool internal);\n \n+    //! Create new DescriptorScriptPubKeyMan and add it to the wallet\n+    DescriptorScriptPubKeyMan* SetupDescriptorScriptPubKeyMan(WalletBatch& batch, const CExtKey& master_key, const OutputType& output_type, bool internal) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);",
      "path": "src/wallet/wallet.h",
      "position": null,
      "original_position": 5,
      "commit_id": "746b6d88395607abbd3c13bbdcdd4ca83e9bc9e4",
      "original_commit_id": "8d107d5f48c2fae0d09bf9be79f9cf47daad6241",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"wallet: Refactor function for single DescSPKM setup\" (8d107d5f48c2fae0d09bf9be79f9cf47daad6241)\r\n\r\nWould be good for this to return a reference instead of a pointer. It seems to never return null, always return non-null or throw an exception.",
      "created_at": "2024-01-09T18:28:34Z",
      "updated_at": "2024-01-09T19:11:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1446457022",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446457022"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1015,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446462443",
      "pull_request_review_id": 1809920961,
      "id": 1446462443,
      "node_id": "PRRC_kwDOABII585WN0Pr",
      "diff_hunk": "@@ -4366,4 +4366,26 @@ util::Result<MigrationResult> MigrateLegacyToDescriptor(const std::string& walle\n     }\n     return res;\n }\n+\n+std::set<CExtPubKey> CWallet::GetActiveHDPubKeys() const\n+{\n+    AssertLockHeld(cs_wallet);\n+\n+    if (!IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) return {};",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 9,
      "commit_id": "746b6d88395607abbd3c13bbdcdd4ca83e9bc9e4",
      "original_commit_id": "2621ca0e6418b406161b21b6afac159b0be775b7",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"wallet: Add GetActiveHDPubKeys to retrieve xpubs from active descriptors\" (2621ca0e6418b406161b21b6afac159b0be775b7)\r\n\r\nWould probably be good to change this to an assert. Otherwise it could be called in legacy code and seem to succeed but never return data.",
      "created_at": "2024-01-09T18:34:32Z",
      "updated_at": "2024-01-09T19:11:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1446462443",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446462443"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4374,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446464920",
      "pull_request_review_id": 1809920961,
      "id": 1446464920,
      "node_id": "PRRC_kwDOABII585WN02Y",
      "diff_hunk": "@@ -4366,4 +4366,26 @@ util::Result<MigrationResult> MigrateLegacyToDescriptor(const std::string& walle\n     }\n     return res;\n }\n+\n+std::set<CExtPubKey> CWallet::GetActiveHDPubKeys() const\n+{\n+    AssertLockHeld(cs_wallet);\n+\n+    if (!IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) return {};\n+\n+    std::set<CExtPubKey> active_xpubs;\n+    for (const auto& spkm : GetActiveScriptPubKeyMans()) {\n+        const DescriptorScriptPubKeyMan* desc_spkm = dynamic_cast<DescriptorScriptPubKeyMan*>(spkm);\n+        assert(desc_spkm);\n+        LOCK(desc_spkm->cs_desc_man);\n+        WalletDescriptor w_desc = desc_spkm->GetWalletDescriptor();\n+\n+        // We can only determine the active hd key if all descriptors have exactly 1 xpub\n+        std::set<CPubKey> desc_pubkeys;\n+        std::set<CExtPubKey> desc_xpubs;\n+        w_desc.descriptor->GetPubKeys(desc_pubkeys, desc_xpubs);\n+        active_xpubs.merge(desc_xpubs);",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 22,
      "commit_id": "746b6d88395607abbd3c13bbdcdd4ca83e9bc9e4",
      "original_commit_id": "2621ca0e6418b406161b21b6afac159b0be775b7",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"wallet: Add GetActiveHDPubKeys to retrieve xpubs from active descriptors\" (2621ca0e6418b406161b21b6afac159b0be775b7)\r\n\r\nstd::move would be appropriate here",
      "created_at": "2024-01-09T18:37:16Z",
      "updated_at": "2024-01-09T19:11:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1446464920",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446464920"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4387,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446468708",
      "pull_request_review_id": 1809920961,
      "id": 1446468708,
      "node_id": "PRRC_kwDOABII585WN1xk",
      "diff_hunk": "@@ -4388,4 +4388,19 @@ std::set<CExtPubKey> CWallet::GetActiveHDPubKeys() const\n     }\n     return active_xpubs;\n }\n+\n+std::optional<CKey> CWallet::GetKey(const CKeyID& keyid) const\n+{\n+    if (!IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) return std::nullopt;",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 7,
      "commit_id": "746b6d88395607abbd3c13bbdcdd4ca83e9bc9e4",
      "original_commit_id": "8bcb89d3730d30a3202fcee172fd709a9f588a4e",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"wallet: Be able to retrieve single key from descriptors\" (8bcb89d3730d30a3202fcee172fd709a9f588a4e)\r\n\r\nAgain I think this would be a little better as an assert so if this is called in legacy wallet code it doesn't appear to succeed but never return anything.",
      "created_at": "2024-01-09T18:39:48Z",
      "updated_at": "2024-01-09T19:11:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1446468708",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446468708"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4394,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446469811",
      "pull_request_review_id": 1809920961,
      "id": 1446469811,
      "node_id": "PRRC_kwDOABII585WN2Cz",
      "diff_hunk": "@@ -1047,6 +1047,9 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n \n     //! Retrieve the xpubs in use by the active descriptors\n     std::set<CExtPubKey> GetActiveHDPubKeys() const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+\n+    //! Find the private key for the given public key from the wallet's descriptors\n+    std::optional<CKey> GetKey(const CKeyID& keyid) const;",
      "path": "src/wallet/wallet.h",
      "position": 27,
      "original_position": 6,
      "commit_id": "746b6d88395607abbd3c13bbdcdd4ca83e9bc9e4",
      "original_commit_id": "8bcb89d3730d30a3202fcee172fd709a9f588a4e",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"wallet: Be able to retrieve single key from descriptors\" (8bcb89d3730d30a3202fcee172fd709a9f588a4e)\r\n\r\nAgain would be good to say this returns null when the key is missing or the wallet is locked.",
      "created_at": "2024-01-09T18:41:04Z",
      "updated_at": "2024-01-09T19:11:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1446469811",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446469811"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1065,
      "original_line": 1065,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446473752",
      "pull_request_review_id": 1809920961,
      "id": 1446473752,
      "node_id": "PRRC_kwDOABII585WN3AY",
      "diff_hunk": "@@ -918,6 +918,111 @@ RPCHelpMan gethdkeys()\n     };\n }\n \n+static RPCHelpMan createwalletdescriptor()\n+{\n+    return RPCHelpMan{\"createwalletdescriptor\",\n+        \"Creates the wallet's descriptor for the given address type. \"\n+        \"Only works on wallets that contain automatically generated descriptors. \"\n+        \"The address type must be one that the wallet does not already have a descriptor for.\"\n+        + HELP_REQUIRING_PASSPHRASE,\n+        {\n+            {\"type\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The address type the descriptor will produce. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", \\\"bech32\\\", and \\\"bech32m\\\".\"},\n+            {\"options\", RPCArg::Type::OBJ_NAMED_PARAMS, RPCArg::Optional::OMITTED, \"\", {\n+                {\"internal\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"Both external and internal will be generated unless this parameter is specified\"}, \"Whether to only make one descriptor that is internal (if parameter is true) or external (if parameter is false)\"},\n+                {\"hdkey\", RPCArg::Type::STR, RPCArg::DefaultHint{\"The HD key used by all other active descriptors\"}, \"The HD key that the wallet knows the private key of, listed using 'gethdkeys', to use for this descriptor's key\"},\n+            }},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+            {\n+                {RPCResult::Type::ARR, \"descs\", \"The public descriptors that were added to the wallet\",\n+                    {{RPCResult::Type::STR, \"\", \"\"}}\n+                }\n+            },\n+        },\n+        RPCExamples{\n+            HelpExampleCli(\"createwalletdescriptor\", \"bech32m\")\n+            + HelpExampleRpc(\"createwalletdescriptor\", \"bech32m\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+            if (!pwallet) return UniValue::VNULL;\n+\n+            //  Make sure wallet is a descriptor wallet\n+            if (!pwallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"createwalletdescriptor is not available for non-descriptor wallets\");\n+            }\n+\n+            std::optional<OutputType> output_type = ParseOutputType(request.params[0].get_str());\n+            if (!output_type) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Unknown address type '%s'\", request.params[0].get_str()));\n+            }\n+\n+            UniValue options{request.params[1].isNull() ? UniValue::VOBJ : request.params[1]};\n+            UniValue internal{options[\"internal\"]};",
      "path": "src/wallet/rpc/wallet.cpp",
      "position": null,
      "original_position": 46,
      "commit_id": "746b6d88395607abbd3c13bbdcdd4ca83e9bc9e4",
      "original_commit_id": "ed177c90c8e5d3b5f22b6744b725ff760b5897c1",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"wallet, rpc: Add createwalletdescriptor RPC\" (ed177c90c8e5d3b5f22b6744b725ff760b5897c1)\r\n\r\nMaybe consider calling the local variable something like like `opt_internal` or `internal_only` since there is another variable below called `internal` which shadows this.",
      "created_at": "2024-01-09T18:45:28Z",
      "updated_at": "2024-01-09T19:11:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1446473752",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446473752"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 963,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446475089",
      "pull_request_review_id": 1809920961,
      "id": 1446475089,
      "node_id": "PRRC_kwDOABII585WN3VR",
      "diff_hunk": "@@ -918,6 +918,111 @@ RPCHelpMan gethdkeys()\n     };\n }\n \n+static RPCHelpMan createwalletdescriptor()\n+{\n+    return RPCHelpMan{\"createwalletdescriptor\",\n+        \"Creates the wallet's descriptor for the given address type. \"\n+        \"Only works on wallets that contain automatically generated descriptors. \"\n+        \"The address type must be one that the wallet does not already have a descriptor for.\"\n+        + HELP_REQUIRING_PASSPHRASE,\n+        {\n+            {\"type\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The address type the descriptor will produce. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", \\\"bech32\\\", and \\\"bech32m\\\".\"},\n+            {\"options\", RPCArg::Type::OBJ_NAMED_PARAMS, RPCArg::Optional::OMITTED, \"\", {\n+                {\"internal\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"Both external and internal will be generated unless this parameter is specified\"}, \"Whether to only make one descriptor that is internal (if parameter is true) or external (if parameter is false)\"},\n+                {\"hdkey\", RPCArg::Type::STR, RPCArg::DefaultHint{\"The HD key used by all other active descriptors\"}, \"The HD key that the wallet knows the private key of, listed using 'gethdkeys', to use for this descriptor's key\"},\n+            }},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+            {\n+                {RPCResult::Type::ARR, \"descs\", \"The public descriptors that were added to the wallet\",\n+                    {{RPCResult::Type::STR, \"\", \"\"}}\n+                }\n+            },\n+        },\n+        RPCExamples{\n+            HelpExampleCli(\"createwalletdescriptor\", \"bech32m\")\n+            + HelpExampleRpc(\"createwalletdescriptor\", \"bech32m\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+            if (!pwallet) return UniValue::VNULL;\n+\n+            //  Make sure wallet is a descriptor wallet\n+            if (!pwallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"createwalletdescriptor is not available for non-descriptor wallets\");\n+            }\n+\n+            std::optional<OutputType> output_type = ParseOutputType(request.params[0].get_str());\n+            if (!output_type) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Unknown address type '%s'\", request.params[0].get_str()));\n+            }\n+\n+            UniValue options{request.params[1].isNull() ? UniValue::VOBJ : request.params[1]};\n+            UniValue internal{options[\"internal\"]};\n+            UniValue hdkey{options[\"hdkey\"]};\n+\n+            std::vector<bool> internals;\n+            if (internal.isNull()) {\n+                internals.push_back(false);\n+                internals.push_back(true);\n+            } else {\n+                internals.push_back(internal.get_bool());\n+            }\n+\n+            LOCK(pwallet->cs_wallet);\n+            EnsureWalletIsUnlocked(*pwallet);",
      "path": "src/wallet/rpc/wallet.cpp",
      "position": 165,
      "original_position": 58,
      "commit_id": "746b6d88395607abbd3c13bbdcdd4ca83e9bc9e4",
      "original_commit_id": "ed177c90c8e5d3b5f22b6744b725ff760b5897c1",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"wallet, rpc: Add createwalletdescriptor RPC\" (ed177c90c8e5d3b5f22b6744b725ff760b5897c1)\r\n\r\nIt would be nice to drop the requirement that the wallet is unlocked. If this is just copying the key from one descriptor to another, there should not be a need to decrypt it, I would think.",
      "created_at": "2024-01-09T18:46:55Z",
      "updated_at": "2024-01-09T19:11:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1446475089",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446475089"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 981,
      "original_line": 981,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446477656",
      "pull_request_review_id": 1809920961,
      "id": 1446477656,
      "node_id": "PRRC_kwDOABII585WN39Y",
      "diff_hunk": "@@ -918,6 +918,111 @@ RPCHelpMan gethdkeys()\n     };\n }\n \n+static RPCHelpMan createwalletdescriptor()\n+{\n+    return RPCHelpMan{\"createwalletdescriptor\",\n+        \"Creates the wallet's descriptor for the given address type. \"\n+        \"Only works on wallets that contain automatically generated descriptors. \"\n+        \"The address type must be one that the wallet does not already have a descriptor for.\"\n+        + HELP_REQUIRING_PASSPHRASE,\n+        {\n+            {\"type\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The address type the descriptor will produce. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", \\\"bech32\\\", and \\\"bech32m\\\".\"},\n+            {\"options\", RPCArg::Type::OBJ_NAMED_PARAMS, RPCArg::Optional::OMITTED, \"\", {\n+                {\"internal\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"Both external and internal will be generated unless this parameter is specified\"}, \"Whether to only make one descriptor that is internal (if parameter is true) or external (if parameter is false)\"},\n+                {\"hdkey\", RPCArg::Type::STR, RPCArg::DefaultHint{\"The HD key used by all other active descriptors\"}, \"The HD key that the wallet knows the private key of, listed using 'gethdkeys', to use for this descriptor's key\"},\n+            }},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+            {\n+                {RPCResult::Type::ARR, \"descs\", \"The public descriptors that were added to the wallet\",\n+                    {{RPCResult::Type::STR, \"\", \"\"}}\n+                }\n+            },\n+        },\n+        RPCExamples{\n+            HelpExampleCli(\"createwalletdescriptor\", \"bech32m\")\n+            + HelpExampleRpc(\"createwalletdescriptor\", \"bech32m\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+            if (!pwallet) return UniValue::VNULL;\n+\n+            //  Make sure wallet is a descriptor wallet\n+            if (!pwallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"createwalletdescriptor is not available for non-descriptor wallets\");\n+            }\n+\n+            std::optional<OutputType> output_type = ParseOutputType(request.params[0].get_str());\n+            if (!output_type) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Unknown address type '%s'\", request.params[0].get_str()));\n+            }\n+\n+            UniValue options{request.params[1].isNull() ? UniValue::VOBJ : request.params[1]};\n+            UniValue internal{options[\"internal\"]};\n+            UniValue hdkey{options[\"hdkey\"]};\n+\n+            std::vector<bool> internals;\n+            if (internal.isNull()) {\n+                internals.push_back(false);\n+                internals.push_back(true);\n+            } else {\n+                internals.push_back(internal.get_bool());\n+            }\n+\n+            LOCK(pwallet->cs_wallet);\n+            EnsureWalletIsUnlocked(*pwallet);\n+\n+            CExtPubKey xpub;\n+            if (hdkey.isNull()) {\n+                std::set<CExtPubKey> active_xpubs = pwallet->GetActiveHDPubKeys();\n+                if (active_xpubs.size() != 1) {\n+                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Unable to determine which HD key to use from active descriptors. Please specify with 'hdkey'\");\n+                }\n+                xpub = *active_xpubs.begin();\n+            } else {\n+                xpub = DecodeExtPubKey(hdkey.get_str());\n+                if (!xpub.pubkey.IsValid()) {\n+                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Unable to parse HD key. Please provide a valid xpub\");\n+                }\n+            }\n+\n+            std::optional<CKey> key = pwallet->GetKey(xpub.pubkey.GetID());\n+            if (!key) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Private key for %s is not known\", EncodeExtPubKey(xpub)));\n+            }\n+            CExtKey active_hdkey(xpub, *key);\n+\n+            std::vector<DescriptorScriptPubKeyMan*> spkms;\n+            WalletBatch batch{pwallet->GetDatabase()};\n+            for (bool internal : internals) {\n+                WalletDescriptor w_desc = GenerateWalletDescriptor(xpub, *output_type, internal);\n+                uint256 w_id = DescriptorID(*w_desc.descriptor);\n+                if (pwallet->GetScriptPubKeyMan(w_id)) {\n+                    throw JSONRPCError(RPC_WALLET_ERROR, \"Descriptor already exists\");\n+                }\n+                spkms.emplace_back(pwallet->SetupDescriptorScriptPubKeyMan(batch, active_hdkey, *output_type, internal));\n+            }\n+\n+            // Generate spks, fill caches, etc.\n+            pwallet->TopUpKeyPool();\n+\n+            // Fetch each descspkm from the wallet in order to get the descriptor strings\n+            UniValue descs{UniValue::VARR};\n+            for (const auto* spkm : spkms) {\n+                std::string desc_str;\n+                bool ok = spkm->GetDescriptorString(desc_str, false);\n+                CHECK_NONFATAL(ok);\n+                descs.push_back(desc_str);\n+            }\n+            UniValue out{UniValue::VOBJ};\n+            out.pushKV(\"descs\", descs);",
      "path": "src/wallet/rpc/wallet.cpp",
      "position": null,
      "original_position": 103,
      "commit_id": "746b6d88395607abbd3c13bbdcdd4ca83e9bc9e4",
      "original_commit_id": "ed177c90c8e5d3b5f22b6744b725ff760b5897c1",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"wallet, rpc: Add createwalletdescriptor RPC\" (ed177c90c8e5d3b5f22b6744b725ff760b5897c1)\r\n\r\nCould std::move",
      "created_at": "2024-01-09T18:49:50Z",
      "updated_at": "2024-01-09T19:11:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1446477656",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446477656"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1020,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446480817",
      "pull_request_review_id": 1809920961,
      "id": 1446480817,
      "node_id": "PRRC_kwDOABII585WN4ux",
      "diff_hunk": "@@ -0,0 +1,125 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2023 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test wallet createwalletdescriptor RPC.\"\"\"\n+\n+from test_framework.descriptors import descsum_create\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+)\n+from test_framework.wallet_util import WalletUnlock\n+\n+\n+class WalletCreateDescriptorTest(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        self.add_wallet_options(parser, descriptors=True, legacy=False)\n+\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self.test_basic()\n+        self.test_imported_other_keys()\n+        self.test_encrypted()\n+\n+    def test_basic(self):\n+        def_wallet = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n+        self.nodes[0].createwallet(\"blank\", blank=True)\n+        wallet = self.nodes[0].get_wallet_rpc(\"blank\")\n+\n+        xpub_info = def_wallet.gethdkeys(private=True)\n+        xpub = xpub_info[0][\"xpub\"]\n+        xprv = xpub_info[0][\"xprv\"]\n+\n+        assert_raises_rpc_error(-5, \"Unable to determine which HD key to use from active descriptors. Please specify with 'hdkey'\", wallet.createwalletdescriptor, \"bech32\")\n+        assert_raises_rpc_error(-5, f\"Private key for {xpub} is not known\", wallet.createwalletdescriptor, type=\"bech32\", hdkey=xpub)\n+\n+        self.log.info(\"Test createwalletdescriptor after importing active descriptor to blank wallet\")\n+        # Import one active descriptor\n+        assert_equal(wallet.importdescriptors([{\"desc\": descsum_create(f\"pkh({xprv}/44h/2h/0h/0/0/*)\"), \"timestamp\": \"now\", \"active\": True}])[0][\"success\"], True)\n+        curr_descs = set([(d[\"desc\"], d[\"active\"], d[\"internal\"]) for d in wallet.listdescriptors(private=True)[\"descriptors\"]])\n+        assert_equal(len(curr_descs), 1)\n+        assert_equal(len(wallet.gethdkeys()), 1)\n+\n+        old_descs = curr_descs\n+        wallet.createwalletdescriptor(\"bech32\")",
      "path": "test/functional/wallet_createwalletdescriptor.py",
      "position": null,
      "original_position": 52,
      "commit_id": "746b6d88395607abbd3c13bbdcdd4ca83e9bc9e4",
      "original_commit_id": "c10150b6150083440af4f0aa1110c8aa99ba2dc8",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"test: Add test for createwalletdescriptor\" (c10150b6150083440af4f0aa1110c8aa99ba2dc8)\r\n\r\nSeems no test is not checking the createwalletdescriptor return value. Might be useful to add.",
      "created_at": "2024-01-09T18:53:19Z",
      "updated_at": "2024-01-09T19:11:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1446480817",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446480817"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 52,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446492828",
      "pull_request_review_id": 1809920961,
      "id": 1446492828,
      "node_id": "PRRC_kwDOABII585WN7qc",
      "diff_hunk": "@@ -918,6 +918,111 @@ RPCHelpMan gethdkeys()\n     };\n }\n \n+static RPCHelpMan createwalletdescriptor()\n+{\n+    return RPCHelpMan{\"createwalletdescriptor\",\n+        \"Creates the wallet's descriptor for the given address type. \"\n+        \"Only works on wallets that contain automatically generated descriptors. \"\n+        \"The address type must be one that the wallet does not already have a descriptor for.\"\n+        + HELP_REQUIRING_PASSPHRASE,\n+        {\n+            {\"type\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The address type the descriptor will produce. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", \\\"bech32\\\", and \\\"bech32m\\\".\"},\n+            {\"options\", RPCArg::Type::OBJ_NAMED_PARAMS, RPCArg::Optional::OMITTED, \"\", {\n+                {\"internal\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"Both external and internal will be generated unless this parameter is specified\"}, \"Whether to only make one descriptor that is internal (if parameter is true) or external (if parameter is false)\"},\n+                {\"hdkey\", RPCArg::Type::STR, RPCArg::DefaultHint{\"The HD key used by all other active descriptors\"}, \"The HD key that the wallet knows the private key of, listed using 'gethdkeys', to use for this descriptor's key\"},\n+            }},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+            {\n+                {RPCResult::Type::ARR, \"descs\", \"The public descriptors that were added to the wallet\",\n+                    {{RPCResult::Type::STR, \"\", \"\"}}\n+                }\n+            },\n+        },\n+        RPCExamples{\n+            HelpExampleCli(\"createwalletdescriptor\", \"bech32m\")\n+            + HelpExampleRpc(\"createwalletdescriptor\", \"bech32m\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+            if (!pwallet) return UniValue::VNULL;\n+\n+            //  Make sure wallet is a descriptor wallet\n+            if (!pwallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"createwalletdescriptor is not available for non-descriptor wallets\");\n+            }\n+\n+            std::optional<OutputType> output_type = ParseOutputType(request.params[0].get_str());\n+            if (!output_type) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Unknown address type '%s'\", request.params[0].get_str()));\n+            }\n+\n+            UniValue options{request.params[1].isNull() ? UniValue::VOBJ : request.params[1]};\n+            UniValue internal{options[\"internal\"]};\n+            UniValue hdkey{options[\"hdkey\"]};\n+\n+            std::vector<bool> internals;\n+            if (internal.isNull()) {\n+                internals.push_back(false);\n+                internals.push_back(true);\n+            } else {\n+                internals.push_back(internal.get_bool());\n+            }\n+\n+            LOCK(pwallet->cs_wallet);\n+            EnsureWalletIsUnlocked(*pwallet);\n+\n+            CExtPubKey xpub;\n+            if (hdkey.isNull()) {\n+                std::set<CExtPubKey> active_xpubs = pwallet->GetActiveHDPubKeys();\n+                if (active_xpubs.size() != 1) {\n+                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Unable to determine which HD key to use from active descriptors. Please specify with 'hdkey'\");\n+                }\n+                xpub = *active_xpubs.begin();\n+            } else {\n+                xpub = DecodeExtPubKey(hdkey.get_str());\n+                if (!xpub.pubkey.IsValid()) {\n+                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Unable to parse HD key. Please provide a valid xpub\");\n+                }\n+            }\n+\n+            std::optional<CKey> key = pwallet->GetKey(xpub.pubkey.GetID());\n+            if (!key) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Private key for %s is not known\", EncodeExtPubKey(xpub)));\n+            }\n+            CExtKey active_hdkey(xpub, *key);\n+\n+            std::vector<DescriptorScriptPubKeyMan*> spkms;\n+            WalletBatch batch{pwallet->GetDatabase()};\n+            for (bool internal : internals) {\n+                WalletDescriptor w_desc = GenerateWalletDescriptor(xpub, *output_type, internal);\n+                uint256 w_id = DescriptorID(*w_desc.descriptor);\n+                if (pwallet->GetScriptPubKeyMan(w_id)) {\n+                    throw JSONRPCError(RPC_WALLET_ERROR, \"Descriptor already exists\");",
      "path": "src/wallet/rpc/wallet.cpp",
      "position": null,
      "original_position": 86,
      "commit_id": "746b6d88395607abbd3c13bbdcdd4ca83e9bc9e4",
      "original_commit_id": "ed177c90c8e5d3b5f22b6744b725ff760b5897c1",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"wallet, rpc: Add createwalletdescriptor RPC\" (ed177c90c8e5d3b5f22b6744b725ff760b5897c1)\r\n\r\nIt doesn't seem great to throw in the middle of this loop, since it could result in a situation where one descriptor is partially created, but the RPC returns an error because the second descriptor already exists.\r\n\r\nProbably the nicer to thing would be to only throw if no descriptor was created:\r\n\r\n```c++\r\nfor (bool internal : internals) {\r\n    WalletDescriptor w_desc = GenerateWalletDescriptor(xpub, *output_type, internal);\r\n    uint256 w_id = DescriptorID(*w_desc.descriptor);\r\n    // Don't create descriptors that already exist.\r\n    if (!pwallet->GetScriptPubKeyMan(w_id)) {\r\n        spkms.emplace_back(pwallet->SetupDescriptorScriptPubKeyMan(batch, active_hdkey, *output_type, internal));\r\n    }\r\n}\r\nif (spkms.empty()) throw JSONRPCError(RPC_WALLET_ERROR, \"Descriptor already exists\");\r\n```",
      "created_at": "2024-01-09T19:06:18Z",
      "updated_at": "2024-01-09T19:11:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1446492828",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446492828"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1003,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446759709",
      "pull_request_review_id": 1812232543,
      "id": 1446759709,
      "node_id": "PRRC_kwDOABII585WO80d",
      "diff_hunk": "@@ -628,6 +628,8 @@ class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n     bool SetupDescriptorGeneration(WalletBatch& batch, const CExtKey& master_key, OutputType addr_type, bool internal);\n \n     bool HavePrivateKeys() const override;\n+    bool HasPrivKey(const CKeyID& keyid) const EXCLUSIVE_LOCKS_REQUIRED(cs_desc_man);\n+    std::optional<CKey> GetKey(const CKeyID& keyid) const EXCLUSIVE_LOCKS_REQUIRED(cs_desc_man);",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": 6,
      "original_position": 5,
      "commit_id": "746b6d88395607abbd3c13bbdcdd4ca83e9bc9e4",
      "original_commit_id": "ebd02d73241c0922f486cdf14719281c079b45c7",
      "in_reply_to_id": 1445260009,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2024-01-10T00:27:09Z",
      "updated_at": "2024-01-10T00:27:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1446759709",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446759709"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 638,
      "original_line": 638,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446759761",
      "pull_request_review_id": 1812232683,
      "id": 1446759761,
      "node_id": "PRRC_kwDOABII585WO81R",
      "diff_hunk": "@@ -813,6 +813,111 @@ static RPCHelpMan migratewallet()\n     };\n }\n \n+RPCHelpMan gethdkeys()\n+{\n+    return RPCHelpMan{\n+        \"gethdkeys\",\n+        \"\\nList all BIP 32 HD keys in the wallet and which descriptors use them.\\n\",\n+        {\n+            {\"options\", RPCArg::Type::OBJ_NAMED_PARAMS, RPCArg::Optional::OMITTED, \"\", {\n+                {\"active_only\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show the keys for only active descriptors\"},\n+                {\"private\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show private keys.\"}\n+            }},\n+        },\n+        RPCResult{RPCResult::Type::ARR, \"\", \"\", {\n+            {\n+                {RPCResult::Type::OBJ, \"\", \"\", {\n+                    {RPCResult::Type::STR, \"xpub\", \"The extended public key\"},\n+                    {RPCResult::Type::BOOL, \"has_private\", \"Whether the wallet has the private key for this xpub\"},\n+                    {RPCResult::Type::STR, \"xprv\", /*optional=*/true, \"The extended private key if private is true\"},\n+                    {RPCResult::Type::ARR, \"descriptors\", \"Array of descriptor objects that use this HD key\",\n+                    {\n+                        {RPCResult::Type::OBJ, \"\", \"\", {\n+                            {RPCResult::Type::STR, \"desc\", \"Descriptor string representation\"},\n+                            {RPCResult::Type::BOOL, \"active\", \"Whether this descriptor is currently used to generate new addresses\"},\n+                        }},\n+                    }},\n+                }},\n+            }\n+        }},\n+        RPCExamples{\n+            HelpExampleCli(\"gethdkeys\", \"\") + HelpExampleRpc(\"gethdkeys\", \"\")\n+            + HelpExampleCli(\"gethdkeys\", \"true\") + HelpExampleRpc(\"gethdkeys\", \"true\")",
      "path": "src/wallet/rpc/wallet.cpp",
      "position": null,
      "original_position": 33,
      "commit_id": "746b6d88395607abbd3c13bbdcdd4ca83e9bc9e4",
      "original_commit_id": "cbe990b1a95e6331106c3ce6d1f2abd860f88ea8",
      "in_reply_to_id": 1445262239,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed",
      "created_at": "2024-01-10T00:27:15Z",
      "updated_at": "2024-01-10T00:27:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1446759761",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446759761"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 845,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446759842",
      "pull_request_review_id": 1812232823,
      "id": 1446759842,
      "node_id": "PRRC_kwDOABII585WO82i",
      "diff_hunk": "@@ -4366,4 +4366,26 @@ util::Result<MigrationResult> MigrateLegacyToDescriptor(const std::string& walle\n     }\n     return res;\n }\n+\n+std::set<CExtPubKey> CWallet::GetActiveHDPubKeys() const\n+{\n+    AssertLockHeld(cs_wallet);\n+\n+    if (!IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) return {};\n+\n+    std::set<CExtPubKey> active_xpubs;\n+    for (const auto& spkm : GetActiveScriptPubKeyMans()) {\n+        const DescriptorScriptPubKeyMan* desc_spkm = dynamic_cast<DescriptorScriptPubKeyMan*>(spkm);\n+        assert(desc_spkm);\n+        LOCK(desc_spkm->cs_desc_man);\n+        WalletDescriptor w_desc = desc_spkm->GetWalletDescriptor();\n+\n+        // We can only determine the active hd key if all descriptors have exactly 1 xpub",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 18,
      "commit_id": "746b6d88395607abbd3c13bbdcdd4ca83e9bc9e4",
      "original_commit_id": "2621ca0e6418b406161b21b6afac159b0be775b7",
      "in_reply_to_id": 1445380623,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2024-01-10T00:27:21Z",
      "updated_at": "2024-01-10T00:27:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1446759842",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446759842"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4383,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446760427",
      "pull_request_review_id": 1812233556,
      "id": 1446760427,
      "node_id": "PRRC_kwDOABII585WO8_r",
      "diff_hunk": "@@ -936,6 +936,7 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n \n     //! Returns all unique ScriptPubKeyMans in m_internal_spk_managers and m_external_spk_managers\n     std::set<ScriptPubKeyMan*> GetActiveScriptPubKeyMans() const;\n+    bool IsActiveScriptPubKeyMan(const ScriptPubKeyMan* spkm) const;",
      "path": "src/wallet/wallet.h",
      "position": null,
      "original_position": 4,
      "commit_id": "746b6d88395607abbd3c13bbdcdd4ca83e9bc9e4",
      "original_commit_id": "2c98b2f395eafa125054e2f6e7c570e18795e318",
      "in_reply_to_id": 1446440048,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2024-01-10T00:27:39Z",
      "updated_at": "2024-01-10T00:27:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1446760427",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446760427"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 939,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446760540",
      "pull_request_review_id": 1812233704,
      "id": 1446760540,
      "node_id": "PRRC_kwDOABII585WO9Bc",
      "diff_hunk": "@@ -1011,6 +1011,8 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n     //! @param[in] internal Whether this ScriptPubKeyMan provides change addresses\n     void DeactivateScriptPubKeyMan(uint256 id, OutputType type, bool internal);\n \n+    //! Create new DescriptorScriptPubKeyMan and add it to the wallet\n+    DescriptorScriptPubKeyMan* SetupDescriptorScriptPubKeyMan(WalletBatch& batch, const CExtKey& master_key, const OutputType& output_type, bool internal) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);",
      "path": "src/wallet/wallet.h",
      "position": null,
      "original_position": 5,
      "commit_id": "746b6d88395607abbd3c13bbdcdd4ca83e9bc9e4",
      "original_commit_id": "8d107d5f48c2fae0d09bf9be79f9cf47daad6241",
      "in_reply_to_id": 1446457022,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2024-01-10T00:27:52Z",
      "updated_at": "2024-01-10T00:27:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1446760540",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446760540"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1015,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446760584",
      "pull_request_review_id": 1812233758,
      "id": 1446760584,
      "node_id": "PRRC_kwDOABII585WO9CI",
      "diff_hunk": "@@ -4366,4 +4366,26 @@ util::Result<MigrationResult> MigrateLegacyToDescriptor(const std::string& walle\n     }\n     return res;\n }\n+\n+std::set<CExtPubKey> CWallet::GetActiveHDPubKeys() const\n+{\n+    AssertLockHeld(cs_wallet);\n+\n+    if (!IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) return {};",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 9,
      "commit_id": "746b6d88395607abbd3c13bbdcdd4ca83e9bc9e4",
      "original_commit_id": "2621ca0e6418b406161b21b6afac159b0be775b7",
      "in_reply_to_id": 1446462443,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2024-01-10T00:27:57Z",
      "updated_at": "2024-01-10T00:27:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1446760584",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446760584"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4374,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446760618",
      "pull_request_review_id": 1812233807,
      "id": 1446760618,
      "node_id": "PRRC_kwDOABII585WO9Cq",
      "diff_hunk": "@@ -4366,4 +4366,26 @@ util::Result<MigrationResult> MigrateLegacyToDescriptor(const std::string& walle\n     }\n     return res;\n }\n+\n+std::set<CExtPubKey> CWallet::GetActiveHDPubKeys() const\n+{\n+    AssertLockHeld(cs_wallet);\n+\n+    if (!IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) return {};\n+\n+    std::set<CExtPubKey> active_xpubs;\n+    for (const auto& spkm : GetActiveScriptPubKeyMans()) {\n+        const DescriptorScriptPubKeyMan* desc_spkm = dynamic_cast<DescriptorScriptPubKeyMan*>(spkm);\n+        assert(desc_spkm);\n+        LOCK(desc_spkm->cs_desc_man);\n+        WalletDescriptor w_desc = desc_spkm->GetWalletDescriptor();\n+\n+        // We can only determine the active hd key if all descriptors have exactly 1 xpub\n+        std::set<CPubKey> desc_pubkeys;\n+        std::set<CExtPubKey> desc_xpubs;\n+        w_desc.descriptor->GetPubKeys(desc_pubkeys, desc_xpubs);\n+        active_xpubs.merge(desc_xpubs);",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 22,
      "commit_id": "746b6d88395607abbd3c13bbdcdd4ca83e9bc9e4",
      "original_commit_id": "2621ca0e6418b406161b21b6afac159b0be775b7",
      "in_reply_to_id": 1446464920,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2024-01-10T00:28:01Z",
      "updated_at": "2024-01-10T00:28:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1446760618",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446760618"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4387,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446760656",
      "pull_request_review_id": 1812233867,
      "id": 1446760656,
      "node_id": "PRRC_kwDOABII585WO9DQ",
      "diff_hunk": "@@ -4388,4 +4388,19 @@ std::set<CExtPubKey> CWallet::GetActiveHDPubKeys() const\n     }\n     return active_xpubs;\n }\n+\n+std::optional<CKey> CWallet::GetKey(const CKeyID& keyid) const\n+{\n+    if (!IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) return std::nullopt;",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 7,
      "commit_id": "746b6d88395607abbd3c13bbdcdd4ca83e9bc9e4",
      "original_commit_id": "8bcb89d3730d30a3202fcee172fd709a9f588a4e",
      "in_reply_to_id": 1446468708,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2024-01-10T00:28:08Z",
      "updated_at": "2024-01-10T00:28:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1446760656",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446760656"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4394,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446760708",
      "pull_request_review_id": 1812233950,
      "id": 1446760708,
      "node_id": "PRRC_kwDOABII585WO9EE",
      "diff_hunk": "@@ -1047,6 +1047,9 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n \n     //! Retrieve the xpubs in use by the active descriptors\n     std::set<CExtPubKey> GetActiveHDPubKeys() const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+\n+    //! Find the private key for the given public key from the wallet's descriptors\n+    std::optional<CKey> GetKey(const CKeyID& keyid) const;",
      "path": "src/wallet/wallet.h",
      "position": 27,
      "original_position": 6,
      "commit_id": "746b6d88395607abbd3c13bbdcdd4ca83e9bc9e4",
      "original_commit_id": "8bcb89d3730d30a3202fcee172fd709a9f588a4e",
      "in_reply_to_id": 1446469811,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2024-01-10T00:28:13Z",
      "updated_at": "2024-01-10T00:28:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1446760708",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446760708"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1065,
      "original_line": 1065,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446760770",
      "pull_request_review_id": 1812234007,
      "id": 1446760770,
      "node_id": "PRRC_kwDOABII585WO9FC",
      "diff_hunk": "@@ -918,6 +918,111 @@ RPCHelpMan gethdkeys()\n     };\n }\n \n+static RPCHelpMan createwalletdescriptor()\n+{\n+    return RPCHelpMan{\"createwalletdescriptor\",\n+        \"Creates the wallet's descriptor for the given address type. \"\n+        \"Only works on wallets that contain automatically generated descriptors. \"\n+        \"The address type must be one that the wallet does not already have a descriptor for.\"\n+        + HELP_REQUIRING_PASSPHRASE,\n+        {\n+            {\"type\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The address type the descriptor will produce. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", \\\"bech32\\\", and \\\"bech32m\\\".\"},\n+            {\"options\", RPCArg::Type::OBJ_NAMED_PARAMS, RPCArg::Optional::OMITTED, \"\", {\n+                {\"internal\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"Both external and internal will be generated unless this parameter is specified\"}, \"Whether to only make one descriptor that is internal (if parameter is true) or external (if parameter is false)\"},\n+                {\"hdkey\", RPCArg::Type::STR, RPCArg::DefaultHint{\"The HD key used by all other active descriptors\"}, \"The HD key that the wallet knows the private key of, listed using 'gethdkeys', to use for this descriptor's key\"},\n+            }},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+            {\n+                {RPCResult::Type::ARR, \"descs\", \"The public descriptors that were added to the wallet\",\n+                    {{RPCResult::Type::STR, \"\", \"\"}}\n+                }\n+            },\n+        },\n+        RPCExamples{\n+            HelpExampleCli(\"createwalletdescriptor\", \"bech32m\")\n+            + HelpExampleRpc(\"createwalletdescriptor\", \"bech32m\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+            if (!pwallet) return UniValue::VNULL;\n+\n+            //  Make sure wallet is a descriptor wallet\n+            if (!pwallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"createwalletdescriptor is not available for non-descriptor wallets\");\n+            }\n+\n+            std::optional<OutputType> output_type = ParseOutputType(request.params[0].get_str());\n+            if (!output_type) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Unknown address type '%s'\", request.params[0].get_str()));\n+            }\n+\n+            UniValue options{request.params[1].isNull() ? UniValue::VOBJ : request.params[1]};\n+            UniValue internal{options[\"internal\"]};",
      "path": "src/wallet/rpc/wallet.cpp",
      "position": null,
      "original_position": 46,
      "commit_id": "746b6d88395607abbd3c13bbdcdd4ca83e9bc9e4",
      "original_commit_id": "ed177c90c8e5d3b5f22b6744b725ff760b5897c1",
      "in_reply_to_id": 1446473752,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2024-01-10T00:28:18Z",
      "updated_at": "2024-01-10T00:28:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1446760770",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446760770"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 963,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446760887",
      "pull_request_review_id": 1812234152,
      "id": 1446760887,
      "node_id": "PRRC_kwDOABII585WO9G3",
      "diff_hunk": "@@ -918,6 +918,111 @@ RPCHelpMan gethdkeys()\n     };\n }\n \n+static RPCHelpMan createwalletdescriptor()\n+{\n+    return RPCHelpMan{\"createwalletdescriptor\",\n+        \"Creates the wallet's descriptor for the given address type. \"\n+        \"Only works on wallets that contain automatically generated descriptors. \"\n+        \"The address type must be one that the wallet does not already have a descriptor for.\"\n+        + HELP_REQUIRING_PASSPHRASE,\n+        {\n+            {\"type\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The address type the descriptor will produce. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", \\\"bech32\\\", and \\\"bech32m\\\".\"},\n+            {\"options\", RPCArg::Type::OBJ_NAMED_PARAMS, RPCArg::Optional::OMITTED, \"\", {\n+                {\"internal\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"Both external and internal will be generated unless this parameter is specified\"}, \"Whether to only make one descriptor that is internal (if parameter is true) or external (if parameter is false)\"},\n+                {\"hdkey\", RPCArg::Type::STR, RPCArg::DefaultHint{\"The HD key used by all other active descriptors\"}, \"The HD key that the wallet knows the private key of, listed using 'gethdkeys', to use for this descriptor's key\"},\n+            }},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+            {\n+                {RPCResult::Type::ARR, \"descs\", \"The public descriptors that were added to the wallet\",\n+                    {{RPCResult::Type::STR, \"\", \"\"}}\n+                }\n+            },\n+        },\n+        RPCExamples{\n+            HelpExampleCli(\"createwalletdescriptor\", \"bech32m\")\n+            + HelpExampleRpc(\"createwalletdescriptor\", \"bech32m\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+            if (!pwallet) return UniValue::VNULL;\n+\n+            //  Make sure wallet is a descriptor wallet\n+            if (!pwallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"createwalletdescriptor is not available for non-descriptor wallets\");\n+            }\n+\n+            std::optional<OutputType> output_type = ParseOutputType(request.params[0].get_str());\n+            if (!output_type) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Unknown address type '%s'\", request.params[0].get_str()));\n+            }\n+\n+            UniValue options{request.params[1].isNull() ? UniValue::VOBJ : request.params[1]};\n+            UniValue internal{options[\"internal\"]};\n+            UniValue hdkey{options[\"hdkey\"]};\n+\n+            std::vector<bool> internals;\n+            if (internal.isNull()) {\n+                internals.push_back(false);\n+                internals.push_back(true);\n+            } else {\n+                internals.push_back(internal.get_bool());\n+            }\n+\n+            LOCK(pwallet->cs_wallet);\n+            EnsureWalletIsUnlocked(*pwallet);\n+\n+            CExtPubKey xpub;\n+            if (hdkey.isNull()) {\n+                std::set<CExtPubKey> active_xpubs = pwallet->GetActiveHDPubKeys();\n+                if (active_xpubs.size() != 1) {\n+                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Unable to determine which HD key to use from active descriptors. Please specify with 'hdkey'\");\n+                }\n+                xpub = *active_xpubs.begin();\n+            } else {\n+                xpub = DecodeExtPubKey(hdkey.get_str());\n+                if (!xpub.pubkey.IsValid()) {\n+                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Unable to parse HD key. Please provide a valid xpub\");\n+                }\n+            }\n+\n+            std::optional<CKey> key = pwallet->GetKey(xpub.pubkey.GetID());\n+            if (!key) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Private key for %s is not known\", EncodeExtPubKey(xpub)));\n+            }\n+            CExtKey active_hdkey(xpub, *key);\n+\n+            std::vector<DescriptorScriptPubKeyMan*> spkms;\n+            WalletBatch batch{pwallet->GetDatabase()};\n+            for (bool internal : internals) {\n+                WalletDescriptor w_desc = GenerateWalletDescriptor(xpub, *output_type, internal);\n+                uint256 w_id = DescriptorID(*w_desc.descriptor);\n+                if (pwallet->GetScriptPubKeyMan(w_id)) {\n+                    throw JSONRPCError(RPC_WALLET_ERROR, \"Descriptor already exists\");\n+                }\n+                spkms.emplace_back(pwallet->SetupDescriptorScriptPubKeyMan(batch, active_hdkey, *output_type, internal));\n+            }\n+\n+            // Generate spks, fill caches, etc.\n+            pwallet->TopUpKeyPool();\n+\n+            // Fetch each descspkm from the wallet in order to get the descriptor strings\n+            UniValue descs{UniValue::VARR};\n+            for (const auto* spkm : spkms) {\n+                std::string desc_str;\n+                bool ok = spkm->GetDescriptorString(desc_str, false);\n+                CHECK_NONFATAL(ok);\n+                descs.push_back(desc_str);\n+            }\n+            UniValue out{UniValue::VOBJ};\n+            out.pushKV(\"descs\", descs);",
      "path": "src/wallet/rpc/wallet.cpp",
      "position": null,
      "original_position": 103,
      "commit_id": "746b6d88395607abbd3c13bbdcdd4ca83e9bc9e4",
      "original_commit_id": "ed177c90c8e5d3b5f22b6744b725ff760b5897c1",
      "in_reply_to_id": 1446477656,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2024-01-10T00:28:30Z",
      "updated_at": "2024-01-10T00:28:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1446760887",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446760887"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1020,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446761034",
      "pull_request_review_id": 1812234347,
      "id": 1446761034,
      "node_id": "PRRC_kwDOABII585WO9JK",
      "diff_hunk": "@@ -0,0 +1,125 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2023 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test wallet createwalletdescriptor RPC.\"\"\"\n+\n+from test_framework.descriptors import descsum_create\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+)\n+from test_framework.wallet_util import WalletUnlock\n+\n+\n+class WalletCreateDescriptorTest(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        self.add_wallet_options(parser, descriptors=True, legacy=False)\n+\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self.test_basic()\n+        self.test_imported_other_keys()\n+        self.test_encrypted()\n+\n+    def test_basic(self):\n+        def_wallet = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n+        self.nodes[0].createwallet(\"blank\", blank=True)\n+        wallet = self.nodes[0].get_wallet_rpc(\"blank\")\n+\n+        xpub_info = def_wallet.gethdkeys(private=True)\n+        xpub = xpub_info[0][\"xpub\"]\n+        xprv = xpub_info[0][\"xprv\"]\n+\n+        assert_raises_rpc_error(-5, \"Unable to determine which HD key to use from active descriptors. Please specify with 'hdkey'\", wallet.createwalletdescriptor, \"bech32\")\n+        assert_raises_rpc_error(-5, f\"Private key for {xpub} is not known\", wallet.createwalletdescriptor, type=\"bech32\", hdkey=xpub)\n+\n+        self.log.info(\"Test createwalletdescriptor after importing active descriptor to blank wallet\")\n+        # Import one active descriptor\n+        assert_equal(wallet.importdescriptors([{\"desc\": descsum_create(f\"pkh({xprv}/44h/2h/0h/0/0/*)\"), \"timestamp\": \"now\", \"active\": True}])[0][\"success\"], True)\n+        curr_descs = set([(d[\"desc\"], d[\"active\"], d[\"internal\"]) for d in wallet.listdescriptors(private=True)[\"descriptors\"]])\n+        assert_equal(len(curr_descs), 1)\n+        assert_equal(len(wallet.gethdkeys()), 1)\n+\n+        old_descs = curr_descs\n+        wallet.createwalletdescriptor(\"bech32\")",
      "path": "test/functional/wallet_createwalletdescriptor.py",
      "position": null,
      "original_position": 52,
      "commit_id": "746b6d88395607abbd3c13bbdcdd4ca83e9bc9e4",
      "original_commit_id": "c10150b6150083440af4f0aa1110c8aa99ba2dc8",
      "in_reply_to_id": 1446480817,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Updated the test to check this.",
      "created_at": "2024-01-10T00:28:48Z",
      "updated_at": "2024-01-10T00:28:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1446761034",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446761034"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 52,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446761065",
      "pull_request_review_id": 1812234398,
      "id": 1446761065,
      "node_id": "PRRC_kwDOABII585WO9Jp",
      "diff_hunk": "@@ -918,6 +918,111 @@ RPCHelpMan gethdkeys()\n     };\n }\n \n+static RPCHelpMan createwalletdescriptor()\n+{\n+    return RPCHelpMan{\"createwalletdescriptor\",\n+        \"Creates the wallet's descriptor for the given address type. \"\n+        \"Only works on wallets that contain automatically generated descriptors. \"\n+        \"The address type must be one that the wallet does not already have a descriptor for.\"\n+        + HELP_REQUIRING_PASSPHRASE,\n+        {\n+            {\"type\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The address type the descriptor will produce. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", \\\"bech32\\\", and \\\"bech32m\\\".\"},\n+            {\"options\", RPCArg::Type::OBJ_NAMED_PARAMS, RPCArg::Optional::OMITTED, \"\", {\n+                {\"internal\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"Both external and internal will be generated unless this parameter is specified\"}, \"Whether to only make one descriptor that is internal (if parameter is true) or external (if parameter is false)\"},\n+                {\"hdkey\", RPCArg::Type::STR, RPCArg::DefaultHint{\"The HD key used by all other active descriptors\"}, \"The HD key that the wallet knows the private key of, listed using 'gethdkeys', to use for this descriptor's key\"},\n+            }},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+            {\n+                {RPCResult::Type::ARR, \"descs\", \"The public descriptors that were added to the wallet\",\n+                    {{RPCResult::Type::STR, \"\", \"\"}}\n+                }\n+            },\n+        },\n+        RPCExamples{\n+            HelpExampleCli(\"createwalletdescriptor\", \"bech32m\")\n+            + HelpExampleRpc(\"createwalletdescriptor\", \"bech32m\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+            if (!pwallet) return UniValue::VNULL;\n+\n+            //  Make sure wallet is a descriptor wallet\n+            if (!pwallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"createwalletdescriptor is not available for non-descriptor wallets\");\n+            }\n+\n+            std::optional<OutputType> output_type = ParseOutputType(request.params[0].get_str());\n+            if (!output_type) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Unknown address type '%s'\", request.params[0].get_str()));\n+            }\n+\n+            UniValue options{request.params[1].isNull() ? UniValue::VOBJ : request.params[1]};\n+            UniValue internal{options[\"internal\"]};\n+            UniValue hdkey{options[\"hdkey\"]};\n+\n+            std::vector<bool> internals;\n+            if (internal.isNull()) {\n+                internals.push_back(false);\n+                internals.push_back(true);\n+            } else {\n+                internals.push_back(internal.get_bool());\n+            }\n+\n+            LOCK(pwallet->cs_wallet);\n+            EnsureWalletIsUnlocked(*pwallet);\n+\n+            CExtPubKey xpub;\n+            if (hdkey.isNull()) {\n+                std::set<CExtPubKey> active_xpubs = pwallet->GetActiveHDPubKeys();\n+                if (active_xpubs.size() != 1) {\n+                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Unable to determine which HD key to use from active descriptors. Please specify with 'hdkey'\");\n+                }\n+                xpub = *active_xpubs.begin();\n+            } else {\n+                xpub = DecodeExtPubKey(hdkey.get_str());\n+                if (!xpub.pubkey.IsValid()) {\n+                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Unable to parse HD key. Please provide a valid xpub\");\n+                }\n+            }\n+\n+            std::optional<CKey> key = pwallet->GetKey(xpub.pubkey.GetID());\n+            if (!key) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Private key for %s is not known\", EncodeExtPubKey(xpub)));\n+            }\n+            CExtKey active_hdkey(xpub, *key);\n+\n+            std::vector<DescriptorScriptPubKeyMan*> spkms;\n+            WalletBatch batch{pwallet->GetDatabase()};\n+            for (bool internal : internals) {\n+                WalletDescriptor w_desc = GenerateWalletDescriptor(xpub, *output_type, internal);\n+                uint256 w_id = DescriptorID(*w_desc.descriptor);\n+                if (pwallet->GetScriptPubKeyMan(w_id)) {\n+                    throw JSONRPCError(RPC_WALLET_ERROR, \"Descriptor already exists\");",
      "path": "src/wallet/rpc/wallet.cpp",
      "position": null,
      "original_position": 86,
      "commit_id": "746b6d88395607abbd3c13bbdcdd4ca83e9bc9e4",
      "original_commit_id": "ed177c90c8e5d3b5f22b6744b725ff760b5897c1",
      "in_reply_to_id": 1446492828,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2024-01-10T00:28:53Z",
      "updated_at": "2024-01-10T00:28:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1446761065",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446761065"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1003,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446761386",
      "pull_request_review_id": 1812234939,
      "id": 1446761386,
      "node_id": "PRRC_kwDOABII585WO9Oq",
      "diff_hunk": "@@ -918,6 +918,111 @@ RPCHelpMan gethdkeys()\n     };\n }\n \n+static RPCHelpMan createwalletdescriptor()\n+{\n+    return RPCHelpMan{\"createwalletdescriptor\",\n+        \"Creates the wallet's descriptor for the given address type. \"\n+        \"Only works on wallets that contain automatically generated descriptors. \"\n+        \"The address type must be one that the wallet does not already have a descriptor for.\"\n+        + HELP_REQUIRING_PASSPHRASE,\n+        {\n+            {\"type\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The address type the descriptor will produce. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", \\\"bech32\\\", and \\\"bech32m\\\".\"},\n+            {\"options\", RPCArg::Type::OBJ_NAMED_PARAMS, RPCArg::Optional::OMITTED, \"\", {\n+                {\"internal\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"Both external and internal will be generated unless this parameter is specified\"}, \"Whether to only make one descriptor that is internal (if parameter is true) or external (if parameter is false)\"},\n+                {\"hdkey\", RPCArg::Type::STR, RPCArg::DefaultHint{\"The HD key used by all other active descriptors\"}, \"The HD key that the wallet knows the private key of, listed using 'gethdkeys', to use for this descriptor's key\"},\n+            }},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+            {\n+                {RPCResult::Type::ARR, \"descs\", \"The public descriptors that were added to the wallet\",\n+                    {{RPCResult::Type::STR, \"\", \"\"}}\n+                }\n+            },\n+        },\n+        RPCExamples{\n+            HelpExampleCli(\"createwalletdescriptor\", \"bech32m\")\n+            + HelpExampleRpc(\"createwalletdescriptor\", \"bech32m\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+            if (!pwallet) return UniValue::VNULL;\n+\n+            //  Make sure wallet is a descriptor wallet\n+            if (!pwallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"createwalletdescriptor is not available for non-descriptor wallets\");\n+            }\n+\n+            std::optional<OutputType> output_type = ParseOutputType(request.params[0].get_str());\n+            if (!output_type) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Unknown address type '%s'\", request.params[0].get_str()));\n+            }\n+\n+            UniValue options{request.params[1].isNull() ? UniValue::VOBJ : request.params[1]};\n+            UniValue internal{options[\"internal\"]};\n+            UniValue hdkey{options[\"hdkey\"]};\n+\n+            std::vector<bool> internals;\n+            if (internal.isNull()) {\n+                internals.push_back(false);\n+                internals.push_back(true);\n+            } else {\n+                internals.push_back(internal.get_bool());\n+            }\n+\n+            LOCK(pwallet->cs_wallet);\n+            EnsureWalletIsUnlocked(*pwallet);",
      "path": "src/wallet/rpc/wallet.cpp",
      "position": 165,
      "original_position": 58,
      "commit_id": "746b6d88395607abbd3c13bbdcdd4ca83e9bc9e4",
      "original_commit_id": "ed177c90c8e5d3b5f22b6744b725ff760b5897c1",
      "in_reply_to_id": 1446475089,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think that would require a much more invasive refactor as it requires accessing much lower level data. Perhaps for a followup.",
      "created_at": "2024-01-10T00:29:38Z",
      "updated_at": "2024-01-10T00:29:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1446761386",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446761386"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 981,
      "original_line": 981,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1487519941",
      "pull_request_review_id": 1877425600,
      "id": 1487519941,
      "node_id": "PRRC_kwDOABII585YqcDF",
      "diff_hunk": "@@ -355,6 +355,26 @@ def run_test(self):\n             down_wallet_name = f\"re_down_{node.version}\"\n             down_backup_path = os.path.join(self.options.tmpdir, f\"{down_wallet_name}.dat\")\n             wallet.backupwallet(down_backup_path)\n+\n+            # Check that taproot descriptors can be added to 0.21 wallets\n+            # This must be done after the backup is created so that 0.21 can still load\n+            # the backup\n+            if self.options.descriptors and self.major_version_equals(node, 21):\n+                assert_raises_rpc_error(-12, \"No bech32m addresses available\", wallet.getnewaddress, address_type=\"bech32m\")\n+                xpubs = wallet.gethdkeys(active_only=True)\n+                assert_equal(len(xpubs), 1)\n+                assert_equal(len(xpubs[0][\"descriptors\"]), 6)\n+                wallet.createwalletdescriptor(\"bech32m\")\n+                xpubs = wallet.gethdkeys(active_only=True)\n+                assert_equal(len(xpubs), 1)\n+                assert_equal(len(xpubs[0][\"descriptors\"]), 8)\n+                tr_descs = [desc[\"desc\"] for desc in xpubs[0][\"descriptors\"] if desc[\"desc\"].startswith(\"tr(\")]\n+                print(tr_descs)",
      "path": "test/functional/wallet_backwards_compatibility.py",
      "position": null,
      "original_position": 18,
      "commit_id": "746b6d88395607abbd3c13bbdcdd4ca83e9bc9e4",
      "original_commit_id": "b09e9ae6a61a96d3e04619f7514a57470e220abe",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "b09e9ae6a61a96d3e04619f7514a57470e220abe: nit drop `print`",
      "created_at": "2024-02-13T09:59:04Z",
      "updated_at": "2024-02-13T12:21:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1487519941",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1487519941"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 372,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1487554071",
      "pull_request_review_id": 1877425600,
      "id": 1487554071,
      "node_id": "PRRC_kwDOABII585YqkYX",
      "diff_hunk": "@@ -0,0 +1,123 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2023 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test wallet createwalletdescriptor RPC.\"\"\"\n+\n+from test_framework.descriptors import descsum_create\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+)\n+from test_framework.wallet_util import WalletUnlock\n+\n+\n+class WalletCreateDescriptorTest(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        self.add_wallet_options(parser, descriptors=True, legacy=False)\n+\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self.test_basic()\n+        self.test_imported_other_keys()\n+        self.test_encrypted()\n+\n+    def test_basic(self):\n+        def_wallet = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n+        self.nodes[0].createwallet(\"blank\", blank=True)\n+        wallet = self.nodes[0].get_wallet_rpc(\"blank\")\n+\n+        xpub_info = def_wallet.gethdkeys(private=True)\n+        xpub = xpub_info[0][\"xpub\"]\n+        xprv = xpub_info[0][\"xprv\"]\n+        expected_descs = []\n+        for desc in def_wallet.listdescriptors()[\"descriptors\"]:\n+            if desc[\"desc\"].startswith(\"wpkh(\"):\n+                expected_descs.append(desc[\"desc\"])\n+\n+        assert_raises_rpc_error(-5, \"Unable to determine which HD key to use from active descriptors. Please specify with 'hdkey'\", wallet.createwalletdescriptor, \"bech32\")\n+        assert_raises_rpc_error(-5, f\"Private key for {xpub} is not known\", wallet.createwalletdescriptor, type=\"bech32\", hdkey=xpub)\n+\n+        self.log.info(\"Test createwalletdescriptor after importing active descriptor to blank wallet\")\n+        # Import one active descriptor\n+        assert_equal(wallet.importdescriptors([{\"desc\": descsum_create(f\"pkh({xprv}/44h/2h/0h/0/0/*)\"), \"timestamp\": \"now\", \"active\": True}])[0][\"success\"], True)\n+        assert_equal(len(wallet.listdescriptors()[\"descriptors\"]), 1)\n+        assert_equal(len(wallet.gethdkeys()), 1)\n+\n+        new_descs = wallet.createwalletdescriptor(\"bech32\")[\"descs\"]\n+        assert_equal(len(new_descs), 2)\n+        assert_equal(len(wallet.gethdkeys()), 1)\n+        assert_equal(new_descs, expected_descs)\n+\n+        self.log.info(\"Test descriptor creation options\")\n+        old_descs = set([(d[\"desc\"], d[\"active\"], d[\"internal\"]) for d in wallet.listdescriptors(private=True)[\"descriptors\"]])\n+        wallet.createwalletdescriptor(type=\"bech32m\", internal=False)[\"descs\"]",
      "path": "test/functional/wallet_createwalletdescriptor.py",
      "position": null,
      "original_position": 61,
      "commit_id": "746b6d88395607abbd3c13bbdcdd4ca83e9bc9e4",
      "original_commit_id": "b55b46f07ae60bbd51ed9abb2f8c5b3249af60f2",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "b55b46f07ae60bbd51ed9abb2f8c5b3249af60f2: nit: `[\"descs\"]` is not used",
      "created_at": "2024-02-13T10:19:02Z",
      "updated_at": "2024-02-13T12:21:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1487554071",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1487554071"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 61,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1487737712",
      "pull_request_review_id": 1877425600,
      "id": 1487737712,
      "node_id": "PRRC_kwDOABII585YrRNw",
      "diff_hunk": "@@ -0,0 +1,192 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2023 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test wallet gethdkeys RPC.\"\"\"\n+\n+from test_framework.descriptors import descsum_create\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+)\n+from test_framework.wallet_util import WalletUnlock\n+\n+\n+class WalletGetHDKeyTest(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        self.add_wallet_options(parser, descriptors=True, legacy=False)\n+\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self.test_basic_gethdkeys()\n+        self.test_ranged_imports()\n+        self.test_lone_key_imports()\n+        self.test_ranged_multisig()\n+        self.test_mixed_multisig()\n+\n+    def test_basic_gethdkeys(self):\n+        self.log.info(\"Test gethdkeys basics\")\n+        self.nodes[0].createwallet(\"basic\")\n+        wallet = self.nodes[0].get_wallet_rpc(\"basic\")\n+        xpub_info = wallet.gethdkeys()\n+        assert_equal(len(xpub_info), 1)\n+        assert_equal(xpub_info[0][\"has_private\"], True)\n+\n+        assert \"xprv\" not in xpub_info[0]\n+        xpub = xpub_info[0][\"xpub\"]\n+\n+        xpub_info = wallet.gethdkeys(private=True)\n+        xprv = xpub_info[0][\"xprv\"]\n+        assert_equal(xpub_info[0][\"xpub\"], xpub)\n+        assert_equal(xpub_info[0][\"has_private\"], True)\n+\n+        descs = wallet.listdescriptors(True)\n+        for desc in descs[\"descriptors\"]:\n+            if \"range\" in desc:\n+                assert xprv in desc[\"desc\"]\n+\n+        self.log.info(\"HD pubkey can be retrieved from encrypted wallets\")\n+        prev_xprv = xprv\n+        wallet.encryptwallet(\"pass\")\n+        # HD key is rotated on encryption, there should now be 2 HD keys\n+        assert_equal(len(wallet.gethdkeys()), 2)\n+        # New key is active, should be able to get only that one and its descriptors\n+        xpub_info = wallet.gethdkeys(active_only=True)\n+        assert_equal(len(xpub_info), 1)\n+        assert xpub_info[0][\"xpub\"] != xpub\n+        assert \"xprv\" not in xpub_info[0]\n+        assert_equal(xpub_info[0][\"has_private\"], True)\n+\n+        self.log.info(\"HD privkey can be retrieved from encrypted wallets\")\n+        assert_raises_rpc_error(-13, \"Error: Please enter the wallet passphrase with walletpassphrase first\", wallet.gethdkeys, private=True)\n+        with WalletUnlock(wallet, \"pass\"):\n+            xpub_info = wallet.gethdkeys(active_only=True, private=True)[0]\n+            assert xpub_info[\"xprv\"] != xprv\n+            for desc in wallet.listdescriptors(True)[\"descriptors\"]:\n+                if desc[\"active\"]:\n+                    # After encrypting, HD key was rotated and should appear in all active descriptors\n+                    assert xpub_info[\"xprv\"] in desc[\"desc\"]\n+                else:\n+                    # Inactive descriptors should have the previous HD key\n+                    assert prev_xprv in desc[\"desc\"]\n+\n+    def test_ranged_imports(self):\n+        self.log.info(\"Keys of imported ranged descriptors appear in gethdkeys\")\n+        def_wallet = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n+        self.nodes[0].createwallet(\"imports\")\n+        wallet = self.nodes[0].get_wallet_rpc(\"imports\")\n+\n+        xpub_info = wallet.gethdkeys()\n+        assert_equal(len(xpub_info), 1)\n+        active_xpub = xpub_info[0][\"xpub\"]\n+\n+        import_xpub = def_wallet.gethdkeys(active_only=True)[0][\"xpub\"]\n+        desc_import = def_wallet.listdescriptors(True)[\"descriptors\"]\n+        for desc in desc_import:\n+            desc[\"active\"] = False\n+        wallet.importdescriptors(desc_import)\n+        assert_equal(wallet.gethdkeys(active_only=True), xpub_info)\n+\n+        xpub_info = wallet.gethdkeys()\n+        assert_equal(len(xpub_info), 2)\n+        for x in xpub_info:\n+            if x[\"xpub\"] == active_xpub:\n+                for desc in x[\"descriptors\"]:\n+                    assert_equal(desc[\"active\"], True)\n+            elif x[\"xpub\"] == import_xpub:\n+                for desc in x[\"descriptors\"]:\n+                    assert_equal(desc[\"active\"], False)\n+            else:\n+                assert False\n+\n+\n+    def test_lone_key_imports(self):\n+        self.log.info(\"Non-HD keys do not appear in gethdkeys\")\n+        self.nodes[0].createwallet(\"lonekey\", blank=True)\n+        wallet = self.nodes[0].get_wallet_rpc(\"lonekey\")\n+\n+        assert_equal(wallet.gethdkeys(), [])\n+        wallet.importdescriptors([{\"desc\": descsum_create(\"wpkh(cTe1f5rdT8A8DFgVWTjyPwACsDPJM9ff4QngFxUixCSvvbg1x6sh)\"), \"timestamp\": \"now\"}])\n+        assert_equal(wallet.gethdkeys(), [])\n+\n+        self.log.info(\"Non-ranged HD keys should appear in gethdkeys\")",
      "path": "test/functional/wallet_gethdkeys.py",
      "position": null,
      "original_position": 119,
      "commit_id": "746b6d88395607abbd3c13bbdcdd4ca83e9bc9e4",
      "original_commit_id": "8221484b95c9e376ea6cb437eb972457485b65a7",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "8221484b95c9e376ea6cb437eb972457485b65a7: \"HD keys of non-ranged descriptors\" ?",
      "created_at": "2024-02-13T12:08:30Z",
      "updated_at": "2024-02-13T12:21:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1487737712",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1487737712"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 119,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1488424495",
      "pull_request_review_id": 1878709061,
      "id": 1488424495,
      "node_id": "PRRC_kwDOABII585Yt44v",
      "diff_hunk": "@@ -355,6 +355,26 @@ def run_test(self):\n             down_wallet_name = f\"re_down_{node.version}\"\n             down_backup_path = os.path.join(self.options.tmpdir, f\"{down_wallet_name}.dat\")\n             wallet.backupwallet(down_backup_path)\n+\n+            # Check that taproot descriptors can be added to 0.21 wallets\n+            # This must be done after the backup is created so that 0.21 can still load\n+            # the backup\n+            if self.options.descriptors and self.major_version_equals(node, 21):\n+                assert_raises_rpc_error(-12, \"No bech32m addresses available\", wallet.getnewaddress, address_type=\"bech32m\")\n+                xpubs = wallet.gethdkeys(active_only=True)\n+                assert_equal(len(xpubs), 1)\n+                assert_equal(len(xpubs[0][\"descriptors\"]), 6)\n+                wallet.createwalletdescriptor(\"bech32m\")\n+                xpubs = wallet.gethdkeys(active_only=True)\n+                assert_equal(len(xpubs), 1)\n+                assert_equal(len(xpubs[0][\"descriptors\"]), 8)\n+                tr_descs = [desc[\"desc\"] for desc in xpubs[0][\"descriptors\"] if desc[\"desc\"].startswith(\"tr(\")]\n+                print(tr_descs)",
      "path": "test/functional/wallet_backwards_compatibility.py",
      "position": null,
      "original_position": 18,
      "commit_id": "746b6d88395607abbd3c13bbdcdd4ca83e9bc9e4",
      "original_commit_id": "b09e9ae6a61a96d3e04619f7514a57470e220abe",
      "in_reply_to_id": 1487519941,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2024-02-13T18:53:56Z",
      "updated_at": "2024-02-13T18:53:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1488424495",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1488424495"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 372,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1488424589",
      "pull_request_review_id": 1878709138,
      "id": 1488424589,
      "node_id": "PRRC_kwDOABII585Yt46N",
      "diff_hunk": "@@ -0,0 +1,123 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2023 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test wallet createwalletdescriptor RPC.\"\"\"\n+\n+from test_framework.descriptors import descsum_create\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+)\n+from test_framework.wallet_util import WalletUnlock\n+\n+\n+class WalletCreateDescriptorTest(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        self.add_wallet_options(parser, descriptors=True, legacy=False)\n+\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self.test_basic()\n+        self.test_imported_other_keys()\n+        self.test_encrypted()\n+\n+    def test_basic(self):\n+        def_wallet = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n+        self.nodes[0].createwallet(\"blank\", blank=True)\n+        wallet = self.nodes[0].get_wallet_rpc(\"blank\")\n+\n+        xpub_info = def_wallet.gethdkeys(private=True)\n+        xpub = xpub_info[0][\"xpub\"]\n+        xprv = xpub_info[0][\"xprv\"]\n+        expected_descs = []\n+        for desc in def_wallet.listdescriptors()[\"descriptors\"]:\n+            if desc[\"desc\"].startswith(\"wpkh(\"):\n+                expected_descs.append(desc[\"desc\"])\n+\n+        assert_raises_rpc_error(-5, \"Unable to determine which HD key to use from active descriptors. Please specify with 'hdkey'\", wallet.createwalletdescriptor, \"bech32\")\n+        assert_raises_rpc_error(-5, f\"Private key for {xpub} is not known\", wallet.createwalletdescriptor, type=\"bech32\", hdkey=xpub)\n+\n+        self.log.info(\"Test createwalletdescriptor after importing active descriptor to blank wallet\")\n+        # Import one active descriptor\n+        assert_equal(wallet.importdescriptors([{\"desc\": descsum_create(f\"pkh({xprv}/44h/2h/0h/0/0/*)\"), \"timestamp\": \"now\", \"active\": True}])[0][\"success\"], True)\n+        assert_equal(len(wallet.listdescriptors()[\"descriptors\"]), 1)\n+        assert_equal(len(wallet.gethdkeys()), 1)\n+\n+        new_descs = wallet.createwalletdescriptor(\"bech32\")[\"descs\"]\n+        assert_equal(len(new_descs), 2)\n+        assert_equal(len(wallet.gethdkeys()), 1)\n+        assert_equal(new_descs, expected_descs)\n+\n+        self.log.info(\"Test descriptor creation options\")\n+        old_descs = set([(d[\"desc\"], d[\"active\"], d[\"internal\"]) for d in wallet.listdescriptors(private=True)[\"descriptors\"]])\n+        wallet.createwalletdescriptor(type=\"bech32m\", internal=False)[\"descs\"]",
      "path": "test/functional/wallet_createwalletdescriptor.py",
      "position": null,
      "original_position": 61,
      "commit_id": "746b6d88395607abbd3c13bbdcdd4ca83e9bc9e4",
      "original_commit_id": "b55b46f07ae60bbd51ed9abb2f8c5b3249af60f2",
      "in_reply_to_id": 1487554071,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2024-02-13T18:54:00Z",
      "updated_at": "2024-02-13T18:54:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1488424589",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1488424589"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 61,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1488424666",
      "pull_request_review_id": 1878709230,
      "id": 1488424666,
      "node_id": "PRRC_kwDOABII585Yt47a",
      "diff_hunk": "@@ -0,0 +1,192 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2023 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test wallet gethdkeys RPC.\"\"\"\n+\n+from test_framework.descriptors import descsum_create\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+)\n+from test_framework.wallet_util import WalletUnlock\n+\n+\n+class WalletGetHDKeyTest(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        self.add_wallet_options(parser, descriptors=True, legacy=False)\n+\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self.test_basic_gethdkeys()\n+        self.test_ranged_imports()\n+        self.test_lone_key_imports()\n+        self.test_ranged_multisig()\n+        self.test_mixed_multisig()\n+\n+    def test_basic_gethdkeys(self):\n+        self.log.info(\"Test gethdkeys basics\")\n+        self.nodes[0].createwallet(\"basic\")\n+        wallet = self.nodes[0].get_wallet_rpc(\"basic\")\n+        xpub_info = wallet.gethdkeys()\n+        assert_equal(len(xpub_info), 1)\n+        assert_equal(xpub_info[0][\"has_private\"], True)\n+\n+        assert \"xprv\" not in xpub_info[0]\n+        xpub = xpub_info[0][\"xpub\"]\n+\n+        xpub_info = wallet.gethdkeys(private=True)\n+        xprv = xpub_info[0][\"xprv\"]\n+        assert_equal(xpub_info[0][\"xpub\"], xpub)\n+        assert_equal(xpub_info[0][\"has_private\"], True)\n+\n+        descs = wallet.listdescriptors(True)\n+        for desc in descs[\"descriptors\"]:\n+            if \"range\" in desc:\n+                assert xprv in desc[\"desc\"]\n+\n+        self.log.info(\"HD pubkey can be retrieved from encrypted wallets\")\n+        prev_xprv = xprv\n+        wallet.encryptwallet(\"pass\")\n+        # HD key is rotated on encryption, there should now be 2 HD keys\n+        assert_equal(len(wallet.gethdkeys()), 2)\n+        # New key is active, should be able to get only that one and its descriptors\n+        xpub_info = wallet.gethdkeys(active_only=True)\n+        assert_equal(len(xpub_info), 1)\n+        assert xpub_info[0][\"xpub\"] != xpub\n+        assert \"xprv\" not in xpub_info[0]\n+        assert_equal(xpub_info[0][\"has_private\"], True)\n+\n+        self.log.info(\"HD privkey can be retrieved from encrypted wallets\")\n+        assert_raises_rpc_error(-13, \"Error: Please enter the wallet passphrase with walletpassphrase first\", wallet.gethdkeys, private=True)\n+        with WalletUnlock(wallet, \"pass\"):\n+            xpub_info = wallet.gethdkeys(active_only=True, private=True)[0]\n+            assert xpub_info[\"xprv\"] != xprv\n+            for desc in wallet.listdescriptors(True)[\"descriptors\"]:\n+                if desc[\"active\"]:\n+                    # After encrypting, HD key was rotated and should appear in all active descriptors\n+                    assert xpub_info[\"xprv\"] in desc[\"desc\"]\n+                else:\n+                    # Inactive descriptors should have the previous HD key\n+                    assert prev_xprv in desc[\"desc\"]\n+\n+    def test_ranged_imports(self):\n+        self.log.info(\"Keys of imported ranged descriptors appear in gethdkeys\")\n+        def_wallet = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n+        self.nodes[0].createwallet(\"imports\")\n+        wallet = self.nodes[0].get_wallet_rpc(\"imports\")\n+\n+        xpub_info = wallet.gethdkeys()\n+        assert_equal(len(xpub_info), 1)\n+        active_xpub = xpub_info[0][\"xpub\"]\n+\n+        import_xpub = def_wallet.gethdkeys(active_only=True)[0][\"xpub\"]\n+        desc_import = def_wallet.listdescriptors(True)[\"descriptors\"]\n+        for desc in desc_import:\n+            desc[\"active\"] = False\n+        wallet.importdescriptors(desc_import)\n+        assert_equal(wallet.gethdkeys(active_only=True), xpub_info)\n+\n+        xpub_info = wallet.gethdkeys()\n+        assert_equal(len(xpub_info), 2)\n+        for x in xpub_info:\n+            if x[\"xpub\"] == active_xpub:\n+                for desc in x[\"descriptors\"]:\n+                    assert_equal(desc[\"active\"], True)\n+            elif x[\"xpub\"] == import_xpub:\n+                for desc in x[\"descriptors\"]:\n+                    assert_equal(desc[\"active\"], False)\n+            else:\n+                assert False\n+\n+\n+    def test_lone_key_imports(self):\n+        self.log.info(\"Non-HD keys do not appear in gethdkeys\")\n+        self.nodes[0].createwallet(\"lonekey\", blank=True)\n+        wallet = self.nodes[0].get_wallet_rpc(\"lonekey\")\n+\n+        assert_equal(wallet.gethdkeys(), [])\n+        wallet.importdescriptors([{\"desc\": descsum_create(\"wpkh(cTe1f5rdT8A8DFgVWTjyPwACsDPJM9ff4QngFxUixCSvvbg1x6sh)\"), \"timestamp\": \"now\"}])\n+        assert_equal(wallet.gethdkeys(), [])\n+\n+        self.log.info(\"Non-ranged HD keys should appear in gethdkeys\")",
      "path": "test/functional/wallet_gethdkeys.py",
      "position": null,
      "original_position": 119,
      "commit_id": "746b6d88395607abbd3c13bbdcdd4ca83e9bc9e4",
      "original_commit_id": "8221484b95c9e376ea6cb437eb972457485b65a7",
      "in_reply_to_id": 1487737712,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2024-02-13T18:54:04Z",
      "updated_at": "2024-02-13T18:54:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1488424666",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1488424666"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 119,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1523322545",
      "pull_request_review_id": 1934278266,
      "id": 1523322545,
      "node_id": "PRRC_kwDOABII585azA6x",
      "diff_hunk": "@@ -2143,6 +2144,37 @@ std::map<CKeyID, CKey> DescriptorScriptPubKeyMan::GetKeys() const\n     return m_map_keys;\n }\n \n+bool DescriptorScriptPubKeyMan::HasPrivKey(const CKeyID& keyid) const\n+{\n+    AssertLockHeld(cs_desc_man);\n+    return m_map_keys.find(keyid) != m_map_keys.end()\n+        || m_map_crypted_keys.find(keyid) != m_map_crypted_keys.end();",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 16,
      "commit_id": "746b6d88395607abbd3c13bbdcdd4ca83e9bc9e4",
      "original_commit_id": "76a9e3e6e115283b094012624cae878408ade354",
      "in_reply_to_id": null,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 76a9e3e6e1:\r\n\r\ntiny tiny nit: Since c++20, we got `map.contains()`.\r\n```c++\r\nreturn m_map_keys.contains(keyid) || m_map_crypted_keys.contains(keyid);\r\n```",
      "created_at": "2024-03-13T14:04:22Z",
      "updated_at": "2024-03-16T21:39:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1523322545",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1523322545"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
        }
      },
      "start_line": null,
      "original_start_line": 2150,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 2151,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1526894129",
      "pull_request_review_id": 1934278266,
      "id": 1526894129,
      "node_id": "PRRC_kwDOABII585bAo4x",
      "diff_hunk": "@@ -817,6 +817,111 @@ static RPCHelpMan migratewallet()\n     };\n }\n \n+RPCHelpMan gethdkeys()\n+{\n+    return RPCHelpMan{\n+        \"gethdkeys\",\n+        \"\\nList all BIP 32 HD keys in the wallet and which descriptors use them.\\n\",\n+        {\n+            {\"options\", RPCArg::Type::OBJ_NAMED_PARAMS, RPCArg::Optional::OMITTED, \"\", {\n+                {\"active_only\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show the keys for only active descriptors\"},\n+                {\"private\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show private keys.\"}\n+            }},\n+        },\n+        RPCResult{RPCResult::Type::ARR, \"\", \"\", {\n+            {\n+                {RPCResult::Type::OBJ, \"\", \"\", {\n+                    {RPCResult::Type::STR, \"xpub\", \"The extended public key\"},\n+                    {RPCResult::Type::BOOL, \"has_private\", \"Whether the wallet has the private key for this xpub\"},\n+                    {RPCResult::Type::STR, \"xprv\", /*optional=*/true, \"The extended private key if private is true\"},\n+                    {RPCResult::Type::ARR, \"descriptors\", \"Array of descriptor objects that use this HD key\",\n+                    {\n+                        {RPCResult::Type::OBJ, \"\", \"\", {\n+                            {RPCResult::Type::STR, \"desc\", \"Descriptor string representation\"},\n+                            {RPCResult::Type::BOOL, \"active\", \"Whether this descriptor is currently used to generate new addresses\"},\n+                        }},\n+                    }},\n+                }},\n+            }\n+        }},\n+        RPCExamples{\n+            HelpExampleCli(\"gethdkeys\", \"\") + HelpExampleRpc(\"gethdkeys\", \"\")\n+            + HelpExampleCliNamed(\"gethdkeys\", {{\"active_only\", \"true\"}, {\"private\", \"true\"}}) + HelpExampleRpcNamed(\"gethdkeys\", {{\"active_only\", \"true\"}, {\"private\", \"true\"}})\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            const std::shared_ptr<const CWallet> wallet = GetWalletForJSONRPCRequest(request);\n+            if (!wallet) return UniValue::VNULL;\n+\n+            if (!wallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"gethdkeys is not available for non-descriptor wallets\");\n+            }\n+\n+            LOCK(wallet->cs_wallet);\n+\n+            UniValue options{request.params[0].isNull() ? UniValue::VOBJ : request.params[0]};\n+            const bool active_only{options.exists(\"active_only\") ? options[\"active_only\"].get_bool() : false};\n+            const bool priv{options.exists(\"private\") ? options[\"private\"].get_bool() : false};\n+            if (priv) {\n+                EnsureWalletIsUnlocked(*wallet);\n+            }\n+\n+\n+            std::set<ScriptPubKeyMan*> spkms;\n+            if (active_only) {\n+                spkms = wallet->GetActiveScriptPubKeyMans();\n+            } else {\n+                spkms = wallet->GetAllScriptPubKeyMans();\n+            }\n+\n+            std::map<CExtPubKey, std::set<std::tuple<std::string, bool, bool>>> wallet_xpubs;\n+            std::map<CExtPubKey, CExtKey> wallet_xprvs;\n+            for (auto* spkm : spkms) {\n+                auto* desc_spkm{dynamic_cast<DescriptorScriptPubKeyMan*>(spkm)};\n+                CHECK_NONFATAL(desc_spkm);\n+                LOCK(desc_spkm->cs_desc_man);\n+                WalletDescriptor w_desc = desc_spkm->GetWalletDescriptor();\n+\n+                // Retrieve the pubkeys from the descriptor\n+                std::set<CPubKey> desc_pubkeys;\n+                std::set<CExtPubKey> desc_xpubs;\n+                w_desc.descriptor->GetPubKeys(desc_pubkeys, desc_xpubs);\n+                for (const CExtPubKey& xpub : desc_xpubs) {\n+                    wallet_xpubs[xpub].emplace(w_desc.descriptor->ToString(), wallet->IsActiveScriptPubKeyMan(*spkm), desc_spkm->HasPrivKey(xpub.pubkey.GetID()));\n+                    if (std::optional<CKey> key = desc_spkm->GetKey(xpub.pubkey.GetID())) {\n+                        wallet_xprvs[xpub] = CExtKey(xpub, *key);\n+                    }",
      "path": "src/wallet/rpc/wallet.cpp",
      "position": null,
      "original_position": 77,
      "commit_id": "746b6d88395607abbd3c13bbdcdd4ca83e9bc9e4",
      "original_commit_id": "449636474a6d980aa47f40233df0f5d71b5e7918",
      "in_reply_to_id": null,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 449636474a:\r\n\r\nShould only get the key when the \"private\" arg is true.",
      "created_at": "2024-03-15T22:00:57Z",
      "updated_at": "2024-03-16T21:37:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1526894129",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1526894129"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
        }
      },
      "start_line": null,
      "original_start_line": 891,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 896,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1527175233",
      "pull_request_review_id": 1934278266,
      "id": 1527175233,
      "node_id": "PRRC_kwDOABII585bBthB",
      "diff_hunk": "@@ -922,6 +922,113 @@ RPCHelpMan gethdkeys()\n     };\n }\n \n+static RPCHelpMan createwalletdescriptor()\n+{\n+    return RPCHelpMan{\"createwalletdescriptor\",\n+        \"Creates the wallet's descriptor for the given address type. \"\n+        \"Only works on wallets that contain automatically generated descriptors. \"",
      "path": "src/wallet/rpc/wallet.cpp",
      "position": null,
      "original_position": 8,
      "commit_id": "746b6d88395607abbd3c13bbdcdd4ca83e9bc9e4",
      "original_commit_id": "9e3e731641634104f4662ae52057c34feec7b43d",
      "in_reply_to_id": null,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 9e3e73164:\r\nThe command also work on manually generated wallets; for instance, the user could have imported one (or many) ranged descriptor on an empty wallet.",
      "created_at": "2024-03-16T13:41:19Z",
      "updated_at": "2024-03-16T21:37:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1527175233",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1527175233"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 929,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1527183153",
      "pull_request_review_id": 1934278266,
      "id": 1527183153,
      "node_id": "PRRC_kwDOABII585bBvcx",
      "diff_hunk": "@@ -922,6 +922,113 @@ RPCHelpMan gethdkeys()\n     };\n }\n \n+static RPCHelpMan createwalletdescriptor()\n+{\n+    return RPCHelpMan{\"createwalletdescriptor\",\n+        \"Creates the wallet's descriptor for the given address type. \"\n+        \"Only works on wallets that contain automatically generated descriptors. \"\n+        \"The address type must be one that the wallet does not already have a descriptor for.\"\n+        + HELP_REQUIRING_PASSPHRASE,\n+        {\n+            {\"type\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The address type the descriptor will produce. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", \\\"bech32\\\", and \\\"bech32m\\\".\"},\n+            {\"options\", RPCArg::Type::OBJ_NAMED_PARAMS, RPCArg::Optional::OMITTED, \"\", {\n+                {\"internal\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"Both external and internal will be generated unless this parameter is specified\"}, \"Whether to only make one descriptor that is internal (if parameter is true) or external (if parameter is false)\"},\n+                {\"hdkey\", RPCArg::Type::STR, RPCArg::DefaultHint{\"The HD key used by all other active descriptors\"}, \"The HD key that the wallet knows the private key of, listed using 'gethdkeys', to use for this descriptor's key\"},\n+            }},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+            {\n+                {RPCResult::Type::ARR, \"descs\", \"The public descriptors that were added to the wallet\",\n+                    {{RPCResult::Type::STR, \"\", \"\"}}\n+                }\n+            },\n+        },\n+        RPCExamples{\n+            HelpExampleCli(\"createwalletdescriptor\", \"bech32m\")\n+            + HelpExampleRpc(\"createwalletdescriptor\", \"bech32m\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+            if (!pwallet) return UniValue::VNULL;\n+\n+            //  Make sure wallet is a descriptor wallet\n+            if (!pwallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"createwalletdescriptor is not available for non-descriptor wallets\");\n+            }\n+\n+            std::optional<OutputType> output_type = ParseOutputType(request.params[0].get_str());\n+            if (!output_type) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Unknown address type '%s'\", request.params[0].get_str()));\n+            }\n+\n+            UniValue options{request.params[1].isNull() ? UniValue::VOBJ : request.params[1]};\n+            UniValue internal_only{options[\"internal\"]};\n+            UniValue hdkey{options[\"hdkey\"]};\n+\n+            std::vector<bool> internals;\n+            if (internal_only.isNull()) {\n+                internals.push_back(false);\n+                internals.push_back(true);\n+            } else {\n+                internals.push_back(internal_only.get_bool());\n+            }\n+\n+            LOCK(pwallet->cs_wallet);\n+            EnsureWalletIsUnlocked(*pwallet);\n+\n+            CExtPubKey xpub;\n+            if (hdkey.isNull()) {\n+                std::set<CExtPubKey> active_xpubs = pwallet->GetActiveHDPubKeys();\n+                if (active_xpubs.size() != 1) {\n+                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Unable to determine which HD key to use from active descriptors. Please specify with 'hdkey'\");\n+                }\n+                xpub = *active_xpubs.begin();\n+            } else {\n+                xpub = DecodeExtPubKey(hdkey.get_str());\n+                if (!xpub.pubkey.IsValid()) {\n+                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Unable to parse HD key. Please provide a valid xpub\");\n+                }\n+            }\n+\n+            std::optional<CKey> key = pwallet->GetKey(xpub.pubkey.GetID());\n+            if (!key) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Private key for %s is not known\", EncodeExtPubKey(xpub)));\n+            }\n+            CExtKey active_hdkey(xpub, *key);\n+\n+            std::vector<std::reference_wrapper<DescriptorScriptPubKeyMan>> spkms;\n+            WalletBatch batch{pwallet->GetDatabase()};\n+            for (bool internal : internals) {\n+                WalletDescriptor w_desc = GenerateWalletDescriptor(xpub, *output_type, internal);\n+                uint256 w_id = DescriptorID(*w_desc.descriptor);\n+                if (!pwallet->GetScriptPubKeyMan(w_id)) {\n+                    spkms.emplace_back(pwallet->SetupDescriptorScriptPubKeyMan(batch, active_hdkey, *output_type, internal));\n+                }\n+            }\n+            if (spkms.empty()) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Descriptor already exists\");\n+            }\n+\n+            // Generate spks, fill caches, etc.\n+            pwallet->TopUpKeyPool();",
      "path": "src/wallet/rpc/wallet.cpp",
      "position": null,
      "original_position": 94,
      "commit_id": "746b6d88395607abbd3c13bbdcdd4ca83e9bc9e4",
      "original_commit_id": "9e3e731641634104f4662ae52057c34feec7b43d",
      "in_reply_to_id": null,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Shouldn't be needed, `SetupDescriptorGeneration()` calls `TopUpWithDB()` internally.",
      "created_at": "2024-03-16T14:42:07Z",
      "updated_at": "2024-03-16T21:37:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1527183153",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1527183153"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
        }
      },
      "start_line": null,
      "original_start_line": 1014,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1015,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1527250719",
      "pull_request_review_id": 1934278266,
      "id": 1527250719,
      "node_id": "PRRC_kwDOABII585bB_8f",
      "diff_hunk": "@@ -817,6 +817,111 @@ static RPCHelpMan migratewallet()\n     };\n }\n \n+RPCHelpMan gethdkeys()\n+{\n+    return RPCHelpMan{\n+        \"gethdkeys\",\n+        \"\\nList all BIP 32 HD keys in the wallet and which descriptors use them.\\n\",\n+        {\n+            {\"options\", RPCArg::Type::OBJ_NAMED_PARAMS, RPCArg::Optional::OMITTED, \"\", {\n+                {\"active_only\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show the keys for only active descriptors\"},\n+                {\"private\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show private keys.\"}\n+            }},\n+        },\n+        RPCResult{RPCResult::Type::ARR, \"\", \"\", {\n+            {\n+                {RPCResult::Type::OBJ, \"\", \"\", {\n+                    {RPCResult::Type::STR, \"xpub\", \"The extended public key\"},\n+                    {RPCResult::Type::BOOL, \"has_private\", \"Whether the wallet has the private key for this xpub\"},\n+                    {RPCResult::Type::STR, \"xprv\", /*optional=*/true, \"The extended private key if private is true\"},",
      "path": "src/wallet/rpc/wallet.cpp",
      "position": null,
      "original_position": 20,
      "commit_id": "746b6d88395607abbd3c13bbdcdd4ca83e9bc9e4",
      "original_commit_id": "449636474a6d980aa47f40233df0f5d71b5e7918",
      "in_reply_to_id": null,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n                    {RPCResult::Type::STR, \"xprv\", /*optional=*/true, \"The extended private key if \\\"private\\\" is true\"},\r\n```",
      "created_at": "2024-03-16T20:27:56Z",
      "updated_at": "2024-03-16T21:37:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1527250719",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1527250719"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 836,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1527251518",
      "pull_request_review_id": 1934278266,
      "id": 1527251518,
      "node_id": "PRRC_kwDOABII585bCAI-",
      "diff_hunk": "@@ -817,6 +817,111 @@ static RPCHelpMan migratewallet()\n     };\n }\n \n+RPCHelpMan gethdkeys()\n+{\n+    return RPCHelpMan{\n+        \"gethdkeys\",\n+        \"\\nList all BIP 32 HD keys in the wallet and which descriptors use them.\\n\",\n+        {\n+            {\"options\", RPCArg::Type::OBJ_NAMED_PARAMS, RPCArg::Optional::OMITTED, \"\", {\n+                {\"active_only\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show the keys for only active descriptors\"},\n+                {\"private\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show private keys.\"}",
      "path": "src/wallet/rpc/wallet.cpp",
      "position": null,
      "original_position": 12,
      "commit_id": "746b6d88395607abbd3c13bbdcdd4ca83e9bc9e4",
      "original_commit_id": "449636474a6d980aa47f40233df0f5d71b5e7918",
      "in_reply_to_id": null,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "s/\"Show private keys.\"/\"Show private keys\" (without the \".\" at the end). Or add the dot to the first argument.",
      "created_at": "2024-03-16T20:29:58Z",
      "updated_at": "2024-03-16T21:37:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1527251518",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1527251518"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
        }
      },
      "start_line": null,
      "original_start_line": 827,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 828,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1527253171",
      "pull_request_review_id": 1934278266,
      "id": 1527253171,
      "node_id": "PRRC_kwDOABII585bCAiz",
      "diff_hunk": "@@ -0,0 +1,192 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2023 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test wallet gethdkeys RPC.\"\"\"\n+\n+from test_framework.descriptors import descsum_create\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+)\n+from test_framework.wallet_util import WalletUnlock\n+\n+\n+class WalletGetHDKeyTest(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        self.add_wallet_options(parser, descriptors=True, legacy=False)\n+\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self.test_basic_gethdkeys()\n+        self.test_ranged_imports()\n+        self.test_lone_key_imports()\n+        self.test_ranged_multisig()\n+        self.test_mixed_multisig()\n+\n+    def test_basic_gethdkeys(self):\n+        self.log.info(\"Test gethdkeys basics\")\n+        self.nodes[0].createwallet(\"basic\")\n+        wallet = self.nodes[0].get_wallet_rpc(\"basic\")\n+        xpub_info = wallet.gethdkeys()\n+        assert_equal(len(xpub_info), 1)\n+        assert_equal(xpub_info[0][\"has_private\"], True)\n+\n+        assert \"xprv\" not in xpub_info[0]\n+        xpub = xpub_info[0][\"xpub\"]\n+\n+        xpub_info = wallet.gethdkeys(private=True)\n+        xprv = xpub_info[0][\"xprv\"]\n+        assert_equal(xpub_info[0][\"xpub\"], xpub)\n+        assert_equal(xpub_info[0][\"has_private\"], True)\n+\n+        descs = wallet.listdescriptors(True)\n+        for desc in descs[\"descriptors\"]:\n+            if \"range\" in desc:\n+                assert xprv in desc[\"desc\"]",
      "path": "test/functional/wallet_gethdkeys.py",
      "position": null,
      "original_position": 53,
      "commit_id": "746b6d88395607abbd3c13bbdcdd4ca83e9bc9e4",
      "original_commit_id": "79206eaaf8c4331e27ca8d48d924179a4dcdddab",
      "in_reply_to_id": null,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 79206eaaf8c4:\r\nnit: As the wallet generates ranged descriptors by default, can remove the `if \"range\" in desc:` line.\r\n\r\nAlso, why you did not perform the same check with the xpub?",
      "created_at": "2024-03-16T20:36:19Z",
      "updated_at": "2024-03-16T21:37:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1527253171",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1527253171"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
        }
      },
      "start_line": null,
      "original_start_line": 51,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 53,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1527257196",
      "pull_request_review_id": 1934278266,
      "id": 1527257196,
      "node_id": "PRRC_kwDOABII585bCBhs",
      "diff_hunk": "@@ -0,0 +1,192 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2023 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test wallet gethdkeys RPC.\"\"\"\n+\n+from test_framework.descriptors import descsum_create\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+)\n+from test_framework.wallet_util import WalletUnlock\n+\n+\n+class WalletGetHDKeyTest(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        self.add_wallet_options(parser, descriptors=True, legacy=False)\n+\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self.test_basic_gethdkeys()\n+        self.test_ranged_imports()\n+        self.test_lone_key_imports()\n+        self.test_ranged_multisig()\n+        self.test_mixed_multisig()\n+\n+    def test_basic_gethdkeys(self):\n+        self.log.info(\"Test gethdkeys basics\")\n+        self.nodes[0].createwallet(\"basic\")\n+        wallet = self.nodes[0].get_wallet_rpc(\"basic\")\n+        xpub_info = wallet.gethdkeys()\n+        assert_equal(len(xpub_info), 1)\n+        assert_equal(xpub_info[0][\"has_private\"], True)\n+\n+        assert \"xprv\" not in xpub_info[0]\n+        xpub = xpub_info[0][\"xpub\"]\n+\n+        xpub_info = wallet.gethdkeys(private=True)\n+        xprv = xpub_info[0][\"xprv\"]\n+        assert_equal(xpub_info[0][\"xpub\"], xpub)\n+        assert_equal(xpub_info[0][\"has_private\"], True)\n+\n+        descs = wallet.listdescriptors(True)\n+        for desc in descs[\"descriptors\"]:\n+            if \"range\" in desc:\n+                assert xprv in desc[\"desc\"]\n+\n+        self.log.info(\"HD pubkey can be retrieved from encrypted wallets\")\n+        prev_xprv = xprv\n+        wallet.encryptwallet(\"pass\")\n+        # HD key is rotated on encryption, there should now be 2 HD keys\n+        assert_equal(len(wallet.gethdkeys()), 2)\n+        # New key is active, should be able to get only that one and its descriptors\n+        xpub_info = wallet.gethdkeys(active_only=True)\n+        assert_equal(len(xpub_info), 1)\n+        assert xpub_info[0][\"xpub\"] != xpub\n+        assert \"xprv\" not in xpub_info[0]\n+        assert_equal(xpub_info[0][\"has_private\"], True)\n+\n+        self.log.info(\"HD privkey can be retrieved from encrypted wallets\")\n+        assert_raises_rpc_error(-13, \"Error: Please enter the wallet passphrase with walletpassphrase first\", wallet.gethdkeys, private=True)\n+        with WalletUnlock(wallet, \"pass\"):\n+            xpub_info = wallet.gethdkeys(active_only=True, private=True)[0]\n+            assert xpub_info[\"xprv\"] != xprv\n+            for desc in wallet.listdescriptors(True)[\"descriptors\"]:\n+                if desc[\"active\"]:\n+                    # After encrypting, HD key was rotated and should appear in all active descriptors\n+                    assert xpub_info[\"xprv\"] in desc[\"desc\"]\n+                else:\n+                    # Inactive descriptors should have the previous HD key\n+                    assert prev_xprv in desc[\"desc\"]\n+\n+    def test_ranged_imports(self):\n+        self.log.info(\"Keys of imported ranged descriptors appear in gethdkeys\")\n+        def_wallet = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n+        self.nodes[0].createwallet(\"imports\")\n+        wallet = self.nodes[0].get_wallet_rpc(\"imports\")\n+\n+        xpub_info = wallet.gethdkeys()\n+        assert_equal(len(xpub_info), 1)\n+        active_xpub = xpub_info[0][\"xpub\"]\n+\n+        import_xpub = def_wallet.gethdkeys(active_only=True)[0][\"xpub\"]\n+        desc_import = def_wallet.listdescriptors(True)[\"descriptors\"]\n+        for desc in desc_import:\n+            desc[\"active\"] = False\n+        wallet.importdescriptors(desc_import)\n+        assert_equal(wallet.gethdkeys(active_only=True), xpub_info)\n+\n+        xpub_info = wallet.gethdkeys()\n+        assert_equal(len(xpub_info), 2)\n+        for x in xpub_info:\n+            if x[\"xpub\"] == active_xpub:\n+                for desc in x[\"descriptors\"]:\n+                    assert_equal(desc[\"active\"], True)\n+            elif x[\"xpub\"] == import_xpub:\n+                for desc in x[\"descriptors\"]:\n+                    assert_equal(desc[\"active\"], False)\n+            else:\n+                assert False\n+\n+\n+    def test_lone_key_imports(self):\n+        self.log.info(\"Non-HD keys do not appear in gethdkeys\")\n+        self.nodes[0].createwallet(\"lonekey\", blank=True)\n+        wallet = self.nodes[0].get_wallet_rpc(\"lonekey\")\n+\n+        assert_equal(wallet.gethdkeys(), [])\n+        wallet.importdescriptors([{\"desc\": descsum_create(\"wpkh(cTe1f5rdT8A8DFgVWTjyPwACsDPJM9ff4QngFxUixCSvvbg1x6sh)\"), \"timestamp\": \"now\"}])\n+        assert_equal(wallet.gethdkeys(), [])\n+\n+        self.log.info(\"HD keys of non-ranged descriptors should appear in gethdkeys\")\n+        def_wallet = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n+        xpub_info = def_wallet.gethdkeys(private=True)\n+        xpub = xpub_info[0][\"xpub\"]\n+        xprv = xpub_info[0][\"xprv\"]\n+        prv_desc = descsum_create(f\"wpkh({xprv})\")\n+        pub_desc = descsum_create(f\"wpkh({xpub})\")\n+        assert_equal(wallet.importdescriptors([{\"desc\": prv_desc, \"timestamp\": \"now\"}])[0][\"success\"], True)\n+        xpub_info = wallet.gethdkeys()\n+        assert_equal(len(xpub_info), 1)\n+        assert_equal(xpub_info[0][\"xpub\"], xpub)\n+        assert_equal(len(xpub_info[0][\"descriptors\"]), 1)\n+        assert_equal(xpub_info[0][\"descriptors\"][0][\"desc\"], pub_desc)\n+        assert_equal(xpub_info[0][\"descriptors\"][0][\"active\"], False)\n+\n+    def test_ranged_multisig(self):\n+        self.log.info(\"HD keys of a multisig appear in gethdkeys\")\n+        def_wallet = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n+        self.nodes[0].createwallet(\"ranged_multisig\")\n+        wallet = self.nodes[0].get_wallet_rpc(\"ranged_multisig\")\n+\n+        xpub1 = wallet.gethdkeys()[0][\"xpub\"]\n+        xprv1 = wallet.gethdkeys(private=True)[0][\"xprv\"]\n+        xpub2 = def_wallet.gethdkeys()[0][\"xpub\"]\n+\n+        prv_multi_desc = descsum_create(f\"wsh(multi(2,{xprv1}/*,{xpub2}/*))\")\n+        pub_multi_desc = descsum_create(f\"wsh(multi(2,{xpub1}/*,{xpub2}/*))\")\n+        assert_equal(wallet.importdescriptors([{\"desc\": prv_multi_desc, \"timestamp\": \"now\"}])[0][\"success\"], True)\n+\n+        xpub_info = wallet.gethdkeys()\n+        assert_equal(len(xpub_info), 2)\n+        for x in xpub_info:\n+            if x[\"xpub\"] == xpub1:\n+                for d in x[\"descriptors\"]:\n+                    if d[\"desc\"] == pub_multi_desc:\n+                        assert_equal(d[\"active\"], False)\n+                        break\n+                else:\n+                    assert False",
      "path": "test/functional/wallet_gethdkeys.py",
      "position": null,
      "original_position": 157,
      "commit_id": "746b6d88395607abbd3c13bbdcdd4ca83e9bc9e4",
      "original_commit_id": "79206eaaf8c4331e27ca8d48d924179a4dcdddab",
      "in_reply_to_id": null,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 79206eaa:\r\nWhat is the purpose behind the last 'else' path? Existence check?",
      "created_at": "2024-03-16T20:49:27Z",
      "updated_at": "2024-03-16T21:38:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1527257196",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1527257196"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
        }
      },
      "start_line": null,
      "original_start_line": 150,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 157,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1527258422",
      "pull_request_review_id": 1934278266,
      "id": 1527258422,
      "node_id": "PRRC_kwDOABII585bCB02",
      "diff_hunk": "@@ -0,0 +1,192 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2023 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test wallet gethdkeys RPC.\"\"\"\n+\n+from test_framework.descriptors import descsum_create\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+)\n+from test_framework.wallet_util import WalletUnlock\n+\n+\n+class WalletGetHDKeyTest(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        self.add_wallet_options(parser, descriptors=True, legacy=False)\n+\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self.test_basic_gethdkeys()\n+        self.test_ranged_imports()\n+        self.test_lone_key_imports()\n+        self.test_ranged_multisig()\n+        self.test_mixed_multisig()\n+\n+    def test_basic_gethdkeys(self):\n+        self.log.info(\"Test gethdkeys basics\")\n+        self.nodes[0].createwallet(\"basic\")\n+        wallet = self.nodes[0].get_wallet_rpc(\"basic\")\n+        xpub_info = wallet.gethdkeys()\n+        assert_equal(len(xpub_info), 1)\n+        assert_equal(xpub_info[0][\"has_private\"], True)\n+\n+        assert \"xprv\" not in xpub_info[0]\n+        xpub = xpub_info[0][\"xpub\"]\n+\n+        xpub_info = wallet.gethdkeys(private=True)\n+        xprv = xpub_info[0][\"xprv\"]\n+        assert_equal(xpub_info[0][\"xpub\"], xpub)\n+        assert_equal(xpub_info[0][\"has_private\"], True)\n+\n+        descs = wallet.listdescriptors(True)\n+        for desc in descs[\"descriptors\"]:\n+            if \"range\" in desc:\n+                assert xprv in desc[\"desc\"]\n+\n+        self.log.info(\"HD pubkey can be retrieved from encrypted wallets\")\n+        prev_xprv = xprv\n+        wallet.encryptwallet(\"pass\")\n+        # HD key is rotated on encryption, there should now be 2 HD keys\n+        assert_equal(len(wallet.gethdkeys()), 2)\n+        # New key is active, should be able to get only that one and its descriptors\n+        xpub_info = wallet.gethdkeys(active_only=True)\n+        assert_equal(len(xpub_info), 1)\n+        assert xpub_info[0][\"xpub\"] != xpub\n+        assert \"xprv\" not in xpub_info[0]\n+        assert_equal(xpub_info[0][\"has_private\"], True)\n+\n+        self.log.info(\"HD privkey can be retrieved from encrypted wallets\")\n+        assert_raises_rpc_error(-13, \"Error: Please enter the wallet passphrase with walletpassphrase first\", wallet.gethdkeys, private=True)\n+        with WalletUnlock(wallet, \"pass\"):\n+            xpub_info = wallet.gethdkeys(active_only=True, private=True)[0]\n+            assert xpub_info[\"xprv\"] != xprv\n+            for desc in wallet.listdescriptors(True)[\"descriptors\"]:\n+                if desc[\"active\"]:\n+                    # After encrypting, HD key was rotated and should appear in all active descriptors\n+                    assert xpub_info[\"xprv\"] in desc[\"desc\"]\n+                else:\n+                    # Inactive descriptors should have the previous HD key\n+                    assert prev_xprv in desc[\"desc\"]\n+\n+    def test_ranged_imports(self):\n+        self.log.info(\"Keys of imported ranged descriptors appear in gethdkeys\")\n+        def_wallet = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n+        self.nodes[0].createwallet(\"imports\")\n+        wallet = self.nodes[0].get_wallet_rpc(\"imports\")\n+\n+        xpub_info = wallet.gethdkeys()\n+        assert_equal(len(xpub_info), 1)\n+        active_xpub = xpub_info[0][\"xpub\"]\n+\n+        import_xpub = def_wallet.gethdkeys(active_only=True)[0][\"xpub\"]\n+        desc_import = def_wallet.listdescriptors(True)[\"descriptors\"]\n+        for desc in desc_import:\n+            desc[\"active\"] = False\n+        wallet.importdescriptors(desc_import)\n+        assert_equal(wallet.gethdkeys(active_only=True), xpub_info)\n+\n+        xpub_info = wallet.gethdkeys()\n+        assert_equal(len(xpub_info), 2)\n+        for x in xpub_info:\n+            if x[\"xpub\"] == active_xpub:\n+                for desc in x[\"descriptors\"]:\n+                    assert_equal(desc[\"active\"], True)\n+            elif x[\"xpub\"] == import_xpub:\n+                for desc in x[\"descriptors\"]:\n+                    assert_equal(desc[\"active\"], False)\n+            else:\n+                assert False\n+\n+\n+    def test_lone_key_imports(self):\n+        self.log.info(\"Non-HD keys do not appear in gethdkeys\")\n+        self.nodes[0].createwallet(\"lonekey\", blank=True)\n+        wallet = self.nodes[0].get_wallet_rpc(\"lonekey\")\n+\n+        assert_equal(wallet.gethdkeys(), [])\n+        wallet.importdescriptors([{\"desc\": descsum_create(\"wpkh(cTe1f5rdT8A8DFgVWTjyPwACsDPJM9ff4QngFxUixCSvvbg1x6sh)\"), \"timestamp\": \"now\"}])\n+        assert_equal(wallet.gethdkeys(), [])\n+\n+        self.log.info(\"HD keys of non-ranged descriptors should appear in gethdkeys\")\n+        def_wallet = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n+        xpub_info = def_wallet.gethdkeys(private=True)\n+        xpub = xpub_info[0][\"xpub\"]\n+        xprv = xpub_info[0][\"xprv\"]\n+        prv_desc = descsum_create(f\"wpkh({xprv})\")\n+        pub_desc = descsum_create(f\"wpkh({xpub})\")\n+        assert_equal(wallet.importdescriptors([{\"desc\": prv_desc, \"timestamp\": \"now\"}])[0][\"success\"], True)\n+        xpub_info = wallet.gethdkeys()\n+        assert_equal(len(xpub_info), 1)\n+        assert_equal(xpub_info[0][\"xpub\"], xpub)\n+        assert_equal(len(xpub_info[0][\"descriptors\"]), 1)\n+        assert_equal(xpub_info[0][\"descriptors\"][0][\"desc\"], pub_desc)\n+        assert_equal(xpub_info[0][\"descriptors\"][0][\"active\"], False)\n+\n+    def test_ranged_multisig(self):\n+        self.log.info(\"HD keys of a multisig appear in gethdkeys\")\n+        def_wallet = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n+        self.nodes[0].createwallet(\"ranged_multisig\")\n+        wallet = self.nodes[0].get_wallet_rpc(\"ranged_multisig\")\n+\n+        xpub1 = wallet.gethdkeys()[0][\"xpub\"]\n+        xprv1 = wallet.gethdkeys(private=True)[0][\"xprv\"]\n+        xpub2 = def_wallet.gethdkeys()[0][\"xpub\"]\n+\n+        prv_multi_desc = descsum_create(f\"wsh(multi(2,{xprv1}/*,{xpub2}/*))\")\n+        pub_multi_desc = descsum_create(f\"wsh(multi(2,{xpub1}/*,{xpub2}/*))\")\n+        assert_equal(wallet.importdescriptors([{\"desc\": prv_multi_desc, \"timestamp\": \"now\"}])[0][\"success\"], True)\n+\n+        xpub_info = wallet.gethdkeys()\n+        assert_equal(len(xpub_info), 2)\n+        for x in xpub_info:\n+            if x[\"xpub\"] == xpub1:\n+                for d in x[\"descriptors\"]:\n+                    if d[\"desc\"] == pub_multi_desc:\n+                        assert_equal(d[\"active\"], False)\n+                        break\n+                else:\n+                    assert False\n+            elif x[\"xpub\"] == xpub2:\n+                assert_equal(len(x[\"descriptors\"]), 1)\n+                assert_equal(x[\"descriptors\"][0][\"desc\"], pub_multi_desc)\n+                assert_equal(x[\"descriptors\"][0][\"active\"], False)\n+            else:\n+                assert False\n+\n+    def test_mixed_multisig(self):\n+        self.log.info(\"Non-HD keys of a multisig do not appear in gethdkeys\")\n+        def_wallet = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n+        self.nodes[0].createwallet(\"single_multisig\")\n+        wallet = self.nodes[0].get_wallet_rpc(\"single_multisig\")\n+\n+        xpub = wallet.gethdkeys()[0][\"xpub\"]\n+        xprv = wallet.gethdkeys(private=True)[0][\"xprv\"]\n+        pub = def_wallet.getaddressinfo(def_wallet.getnewaddress())[\"pubkey\"]\n+\n+        prv_multi_desc = descsum_create(f\"wsh(multi(2,{xprv},{pub}))\")\n+        pub_multi_desc = descsum_create(f\"wsh(multi(2,{xpub},{pub}))\")\n+        import_res = wallet.importdescriptors([{\"desc\": prv_multi_desc, \"timestamp\": \"now\"}])\n+        assert_equal(import_res[0][\"success\"], True)\n+\n+        xpub_info = wallet.gethdkeys()\n+        assert_equal(len(xpub_info), 1)\n+        assert_equal(xpub_info[0][\"xpub\"], xpub)\n+        for d in xpub_info[0][\"descriptors\"]:\n+            if d[\"desc\"] == pub_multi_desc:\n+                assert_equal(d[\"active\"], False)\n+                break\n+        else:\n+            assert False",
      "path": "test/functional/wallet_gethdkeys.py",
      "position": null,
      "original_position": 188,
      "commit_id": "746b6d88395607abbd3c13bbdcdd4ca83e9bc9e4",
      "original_commit_id": "79206eaaf8c4331e27ca8d48d924179a4dcdddab",
      "in_reply_to_id": null,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 79206eaa:\r\nSame as above; not sure what is the purpose behind the last 'else' path. Could replace it for:\r\n```python3\r\nfound_desc = next((d for d in xpub_info[0][\"descriptors\"] if d[\"desc\"] == pub_multi_desc), None)\r\nassert found_desc is not None\r\nassert_equal(found_desc[\"active\"], False)\r\n```",
      "created_at": "2024-03-16T20:53:41Z",
      "updated_at": "2024-03-16T21:38:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1527258422",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1527258422"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
        }
      },
      "start_line": null,
      "original_start_line": 183,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 188,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1527273791",
      "pull_request_review_id": 1934278266,
      "id": 1527273791,
      "node_id": "PRRC_kwDOABII585bCFk_",
      "diff_hunk": "@@ -922,6 +922,113 @@ RPCHelpMan gethdkeys()\n     };\n }\n \n+static RPCHelpMan createwalletdescriptor()\n+{\n+    return RPCHelpMan{\"createwalletdescriptor\",\n+        \"Creates the wallet's descriptor for the given address type. \"\n+        \"Only works on wallets that contain automatically generated descriptors. \"\n+        \"The address type must be one that the wallet does not already have a descriptor for.\"\n+        + HELP_REQUIRING_PASSPHRASE,\n+        {\n+            {\"type\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The address type the descriptor will produce. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", \\\"bech32\\\", and \\\"bech32m\\\".\"},\n+            {\"options\", RPCArg::Type::OBJ_NAMED_PARAMS, RPCArg::Optional::OMITTED, \"\", {\n+                {\"internal\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"Both external and internal will be generated unless this parameter is specified\"}, \"Whether to only make one descriptor that is internal (if parameter is true) or external (if parameter is false)\"},\n+                {\"hdkey\", RPCArg::Type::STR, RPCArg::DefaultHint{\"The HD key used by all other active descriptors\"}, \"The HD key that the wallet knows the private key of, listed using 'gethdkeys', to use for this descriptor's key\"},\n+            }},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+            {\n+                {RPCResult::Type::ARR, \"descs\", \"The public descriptors that were added to the wallet\",\n+                    {{RPCResult::Type::STR, \"\", \"\"}}\n+                }\n+            },\n+        },\n+        RPCExamples{\n+            HelpExampleCli(\"createwalletdescriptor\", \"bech32m\")\n+            + HelpExampleRpc(\"createwalletdescriptor\", \"bech32m\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+            if (!pwallet) return UniValue::VNULL;\n+\n+            //  Make sure wallet is a descriptor wallet\n+            if (!pwallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"createwalletdescriptor is not available for non-descriptor wallets\");\n+            }\n+\n+            std::optional<OutputType> output_type = ParseOutputType(request.params[0].get_str());\n+            if (!output_type) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Unknown address type '%s'\", request.params[0].get_str()));\n+            }\n+\n+            UniValue options{request.params[1].isNull() ? UniValue::VOBJ : request.params[1]};\n+            UniValue internal_only{options[\"internal\"]};\n+            UniValue hdkey{options[\"hdkey\"]};\n+\n+            std::vector<bool> internals;\n+            if (internal_only.isNull()) {\n+                internals.push_back(false);\n+                internals.push_back(true);\n+            } else {\n+                internals.push_back(internal_only.get_bool());\n+            }\n+\n+            LOCK(pwallet->cs_wallet);\n+            EnsureWalletIsUnlocked(*pwallet);\n+\n+            CExtPubKey xpub;\n+            if (hdkey.isNull()) {\n+                std::set<CExtPubKey> active_xpubs = pwallet->GetActiveHDPubKeys();\n+                if (active_xpubs.size() != 1) {\n+                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Unable to determine which HD key to use from active descriptors. Please specify with 'hdkey'\");\n+                }\n+                xpub = *active_xpubs.begin();\n+            } else {\n+                xpub = DecodeExtPubKey(hdkey.get_str());\n+                if (!xpub.pubkey.IsValid()) {\n+                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Unable to parse HD key. Please provide a valid xpub\");\n+                }\n+            }\n+\n+            std::optional<CKey> key = pwallet->GetKey(xpub.pubkey.GetID());\n+            if (!key) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Private key for %s is not known\", EncodeExtPubKey(xpub)));\n+            }\n+            CExtKey active_hdkey(xpub, *key);\n+\n+            std::vector<std::reference_wrapper<DescriptorScriptPubKeyMan>> spkms;\n+            WalletBatch batch{pwallet->GetDatabase()};\n+            for (bool internal : internals) {\n+                WalletDescriptor w_desc = GenerateWalletDescriptor(xpub, *output_type, internal);\n+                uint256 w_id = DescriptorID(*w_desc.descriptor);\n+                if (!pwallet->GetScriptPubKeyMan(w_id)) {\n+                    spkms.emplace_back(pwallet->SetupDescriptorScriptPubKeyMan(batch, active_hdkey, *output_type, internal));\n+                }",
      "path": "src/wallet/rpc/wallet.cpp",
      "position": 194,
      "original_position": 87,
      "commit_id": "746b6d88395607abbd3c13bbdcdd4ca83e9bc9e4",
      "original_commit_id": "9e3e731641634104f4662ae52057c34feec7b43d",
      "in_reply_to_id": null,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Future note:\r\nIf we ever decide to batch this processes' db write, will need to change the flow a bit (the db write failure at the end would leave the wallet in an inconsistent state with the spkm loaded in memory).",
      "created_at": "2024-03-16T21:31:05Z",
      "updated_at": "2024-03-16T21:37:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1527273791",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1527273791"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
        }
      },
      "start_line": 1009,
      "original_start_line": 1007,
      "start_side": "RIGHT",
      "line": 1010,
      "original_line": 1010,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1528810531",
      "pull_request_review_id": 1943481319,
      "id": 1528810531,
      "node_id": "PRRC_kwDOABII585bH8wj",
      "diff_hunk": "@@ -0,0 +1,192 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2023 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test wallet gethdkeys RPC.\"\"\"\n+\n+from test_framework.descriptors import descsum_create\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+)\n+from test_framework.wallet_util import WalletUnlock\n+\n+\n+class WalletGetHDKeyTest(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        self.add_wallet_options(parser, descriptors=True, legacy=False)\n+\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self.test_basic_gethdkeys()\n+        self.test_ranged_imports()\n+        self.test_lone_key_imports()\n+        self.test_ranged_multisig()\n+        self.test_mixed_multisig()\n+\n+    def test_basic_gethdkeys(self):\n+        self.log.info(\"Test gethdkeys basics\")\n+        self.nodes[0].createwallet(\"basic\")\n+        wallet = self.nodes[0].get_wallet_rpc(\"basic\")\n+        xpub_info = wallet.gethdkeys()\n+        assert_equal(len(xpub_info), 1)\n+        assert_equal(xpub_info[0][\"has_private\"], True)\n+\n+        assert \"xprv\" not in xpub_info[0]\n+        xpub = xpub_info[0][\"xpub\"]\n+\n+        xpub_info = wallet.gethdkeys(private=True)\n+        xprv = xpub_info[0][\"xprv\"]\n+        assert_equal(xpub_info[0][\"xpub\"], xpub)\n+        assert_equal(xpub_info[0][\"has_private\"], True)\n+\n+        descs = wallet.listdescriptors(True)\n+        for desc in descs[\"descriptors\"]:\n+            if \"range\" in desc:\n+                assert xprv in desc[\"desc\"]\n+\n+        self.log.info(\"HD pubkey can be retrieved from encrypted wallets\")\n+        prev_xprv = xprv\n+        wallet.encryptwallet(\"pass\")\n+        # HD key is rotated on encryption, there should now be 2 HD keys\n+        assert_equal(len(wallet.gethdkeys()), 2)\n+        # New key is active, should be able to get only that one and its descriptors\n+        xpub_info = wallet.gethdkeys(active_only=True)\n+        assert_equal(len(xpub_info), 1)\n+        assert xpub_info[0][\"xpub\"] != xpub\n+        assert \"xprv\" not in xpub_info[0]\n+        assert_equal(xpub_info[0][\"has_private\"], True)\n+\n+        self.log.info(\"HD privkey can be retrieved from encrypted wallets\")\n+        assert_raises_rpc_error(-13, \"Error: Please enter the wallet passphrase with walletpassphrase first\", wallet.gethdkeys, private=True)\n+        with WalletUnlock(wallet, \"pass\"):\n+            xpub_info = wallet.gethdkeys(active_only=True, private=True)[0]\n+            assert xpub_info[\"xprv\"] != xprv\n+            for desc in wallet.listdescriptors(True)[\"descriptors\"]:\n+                if desc[\"active\"]:\n+                    # After encrypting, HD key was rotated and should appear in all active descriptors\n+                    assert xpub_info[\"xprv\"] in desc[\"desc\"]\n+                else:\n+                    # Inactive descriptors should have the previous HD key\n+                    assert prev_xprv in desc[\"desc\"]\n+\n+    def test_ranged_imports(self):\n+        self.log.info(\"Keys of imported ranged descriptors appear in gethdkeys\")\n+        def_wallet = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n+        self.nodes[0].createwallet(\"imports\")\n+        wallet = self.nodes[0].get_wallet_rpc(\"imports\")\n+\n+        xpub_info = wallet.gethdkeys()\n+        assert_equal(len(xpub_info), 1)\n+        active_xpub = xpub_info[0][\"xpub\"]\n+\n+        import_xpub = def_wallet.gethdkeys(active_only=True)[0][\"xpub\"]\n+        desc_import = def_wallet.listdescriptors(True)[\"descriptors\"]\n+        for desc in desc_import:\n+            desc[\"active\"] = False\n+        wallet.importdescriptors(desc_import)\n+        assert_equal(wallet.gethdkeys(active_only=True), xpub_info)\n+\n+        xpub_info = wallet.gethdkeys()\n+        assert_equal(len(xpub_info), 2)\n+        for x in xpub_info:\n+            if x[\"xpub\"] == active_xpub:\n+                for desc in x[\"descriptors\"]:\n+                    assert_equal(desc[\"active\"], True)\n+            elif x[\"xpub\"] == import_xpub:\n+                for desc in x[\"descriptors\"]:\n+                    assert_equal(desc[\"active\"], False)\n+            else:\n+                assert False\n+\n+\n+    def test_lone_key_imports(self):\n+        self.log.info(\"Non-HD keys do not appear in gethdkeys\")\n+        self.nodes[0].createwallet(\"lonekey\", blank=True)\n+        wallet = self.nodes[0].get_wallet_rpc(\"lonekey\")\n+\n+        assert_equal(wallet.gethdkeys(), [])\n+        wallet.importdescriptors([{\"desc\": descsum_create(\"wpkh(cTe1f5rdT8A8DFgVWTjyPwACsDPJM9ff4QngFxUixCSvvbg1x6sh)\"), \"timestamp\": \"now\"}])\n+        assert_equal(wallet.gethdkeys(), [])\n+\n+        self.log.info(\"HD keys of non-ranged descriptors should appear in gethdkeys\")\n+        def_wallet = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n+        xpub_info = def_wallet.gethdkeys(private=True)\n+        xpub = xpub_info[0][\"xpub\"]\n+        xprv = xpub_info[0][\"xprv\"]\n+        prv_desc = descsum_create(f\"wpkh({xprv})\")\n+        pub_desc = descsum_create(f\"wpkh({xpub})\")\n+        assert_equal(wallet.importdescriptors([{\"desc\": prv_desc, \"timestamp\": \"now\"}])[0][\"success\"], True)\n+        xpub_info = wallet.gethdkeys()\n+        assert_equal(len(xpub_info), 1)\n+        assert_equal(xpub_info[0][\"xpub\"], xpub)\n+        assert_equal(len(xpub_info[0][\"descriptors\"]), 1)\n+        assert_equal(xpub_info[0][\"descriptors\"][0][\"desc\"], pub_desc)\n+        assert_equal(xpub_info[0][\"descriptors\"][0][\"active\"], False)\n+\n+    def test_ranged_multisig(self):\n+        self.log.info(\"HD keys of a multisig appear in gethdkeys\")\n+        def_wallet = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n+        self.nodes[0].createwallet(\"ranged_multisig\")\n+        wallet = self.nodes[0].get_wallet_rpc(\"ranged_multisig\")\n+\n+        xpub1 = wallet.gethdkeys()[0][\"xpub\"]\n+        xprv1 = wallet.gethdkeys(private=True)[0][\"xprv\"]\n+        xpub2 = def_wallet.gethdkeys()[0][\"xpub\"]\n+\n+        prv_multi_desc = descsum_create(f\"wsh(multi(2,{xprv1}/*,{xpub2}/*))\")\n+        pub_multi_desc = descsum_create(f\"wsh(multi(2,{xpub1}/*,{xpub2}/*))\")\n+        assert_equal(wallet.importdescriptors([{\"desc\": prv_multi_desc, \"timestamp\": \"now\"}])[0][\"success\"], True)\n+\n+        xpub_info = wallet.gethdkeys()\n+        assert_equal(len(xpub_info), 2)\n+        for x in xpub_info:\n+            if x[\"xpub\"] == xpub1:\n+                for d in x[\"descriptors\"]:\n+                    if d[\"desc\"] == pub_multi_desc:\n+                        assert_equal(d[\"active\"], False)\n+                        break\n+                else:\n+                    assert False",
      "path": "test/functional/wallet_gethdkeys.py",
      "position": null,
      "original_position": 157,
      "commit_id": "746b6d88395607abbd3c13bbdcdd4ca83e9bc9e4",
      "original_commit_id": "79206eaaf8c4331e27ca8d48d924179a4dcdddab",
      "in_reply_to_id": 1527257196,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes. It is to check that the target descriptor was actually found.",
      "created_at": "2024-03-18T15:44:54Z",
      "updated_at": "2024-03-18T15:44:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1528810531",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1528810531"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
        }
      },
      "start_line": null,
      "original_start_line": 150,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 157,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1528870218",
      "pull_request_review_id": 1943582908,
      "id": 1528870218,
      "node_id": "PRRC_kwDOABII585bILVK",
      "diff_hunk": "@@ -2143,6 +2144,37 @@ std::map<CKeyID, CKey> DescriptorScriptPubKeyMan::GetKeys() const\n     return m_map_keys;\n }\n \n+bool DescriptorScriptPubKeyMan::HasPrivKey(const CKeyID& keyid) const\n+{\n+    AssertLockHeld(cs_desc_man);\n+    return m_map_keys.find(keyid) != m_map_keys.end()\n+        || m_map_crypted_keys.find(keyid) != m_map_crypted_keys.end();",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 16,
      "commit_id": "746b6d88395607abbd3c13bbdcdd4ca83e9bc9e4",
      "original_commit_id": "76a9e3e6e115283b094012624cae878408ade354",
      "in_reply_to_id": 1523322545,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2024-03-18T16:21:04Z",
      "updated_at": "2024-03-18T16:21:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1528870218",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1528870218"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
        }
      },
      "start_line": null,
      "original_start_line": 2150,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 2151,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1528870330",
      "pull_request_review_id": 1943583058,
      "id": 1528870330,
      "node_id": "PRRC_kwDOABII585bILW6",
      "diff_hunk": "@@ -817,6 +817,111 @@ static RPCHelpMan migratewallet()\n     };\n }\n \n+RPCHelpMan gethdkeys()\n+{\n+    return RPCHelpMan{\n+        \"gethdkeys\",\n+        \"\\nList all BIP 32 HD keys in the wallet and which descriptors use them.\\n\",\n+        {\n+            {\"options\", RPCArg::Type::OBJ_NAMED_PARAMS, RPCArg::Optional::OMITTED, \"\", {\n+                {\"active_only\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show the keys for only active descriptors\"},\n+                {\"private\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show private keys.\"}\n+            }},\n+        },\n+        RPCResult{RPCResult::Type::ARR, \"\", \"\", {\n+            {\n+                {RPCResult::Type::OBJ, \"\", \"\", {\n+                    {RPCResult::Type::STR, \"xpub\", \"The extended public key\"},\n+                    {RPCResult::Type::BOOL, \"has_private\", \"Whether the wallet has the private key for this xpub\"},\n+                    {RPCResult::Type::STR, \"xprv\", /*optional=*/true, \"The extended private key if private is true\"},\n+                    {RPCResult::Type::ARR, \"descriptors\", \"Array of descriptor objects that use this HD key\",\n+                    {\n+                        {RPCResult::Type::OBJ, \"\", \"\", {\n+                            {RPCResult::Type::STR, \"desc\", \"Descriptor string representation\"},\n+                            {RPCResult::Type::BOOL, \"active\", \"Whether this descriptor is currently used to generate new addresses\"},\n+                        }},\n+                    }},\n+                }},\n+            }\n+        }},\n+        RPCExamples{\n+            HelpExampleCli(\"gethdkeys\", \"\") + HelpExampleRpc(\"gethdkeys\", \"\")\n+            + HelpExampleCliNamed(\"gethdkeys\", {{\"active_only\", \"true\"}, {\"private\", \"true\"}}) + HelpExampleRpcNamed(\"gethdkeys\", {{\"active_only\", \"true\"}, {\"private\", \"true\"}})\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            const std::shared_ptr<const CWallet> wallet = GetWalletForJSONRPCRequest(request);\n+            if (!wallet) return UniValue::VNULL;\n+\n+            if (!wallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"gethdkeys is not available for non-descriptor wallets\");\n+            }\n+\n+            LOCK(wallet->cs_wallet);\n+\n+            UniValue options{request.params[0].isNull() ? UniValue::VOBJ : request.params[0]};\n+            const bool active_only{options.exists(\"active_only\") ? options[\"active_only\"].get_bool() : false};\n+            const bool priv{options.exists(\"private\") ? options[\"private\"].get_bool() : false};\n+            if (priv) {\n+                EnsureWalletIsUnlocked(*wallet);\n+            }\n+\n+\n+            std::set<ScriptPubKeyMan*> spkms;\n+            if (active_only) {\n+                spkms = wallet->GetActiveScriptPubKeyMans();\n+            } else {\n+                spkms = wallet->GetAllScriptPubKeyMans();\n+            }\n+\n+            std::map<CExtPubKey, std::set<std::tuple<std::string, bool, bool>>> wallet_xpubs;\n+            std::map<CExtPubKey, CExtKey> wallet_xprvs;\n+            for (auto* spkm : spkms) {\n+                auto* desc_spkm{dynamic_cast<DescriptorScriptPubKeyMan*>(spkm)};\n+                CHECK_NONFATAL(desc_spkm);\n+                LOCK(desc_spkm->cs_desc_man);\n+                WalletDescriptor w_desc = desc_spkm->GetWalletDescriptor();\n+\n+                // Retrieve the pubkeys from the descriptor\n+                std::set<CPubKey> desc_pubkeys;\n+                std::set<CExtPubKey> desc_xpubs;\n+                w_desc.descriptor->GetPubKeys(desc_pubkeys, desc_xpubs);\n+                for (const CExtPubKey& xpub : desc_xpubs) {\n+                    wallet_xpubs[xpub].emplace(w_desc.descriptor->ToString(), wallet->IsActiveScriptPubKeyMan(*spkm), desc_spkm->HasPrivKey(xpub.pubkey.GetID()));\n+                    if (std::optional<CKey> key = desc_spkm->GetKey(xpub.pubkey.GetID())) {\n+                        wallet_xprvs[xpub] = CExtKey(xpub, *key);\n+                    }",
      "path": "src/wallet/rpc/wallet.cpp",
      "position": null,
      "original_position": 77,
      "commit_id": "746b6d88395607abbd3c13bbdcdd4ca83e9bc9e4",
      "original_commit_id": "449636474a6d980aa47f40233df0f5d71b5e7918",
      "in_reply_to_id": 1526894129,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2024-03-18T16:21:08Z",
      "updated_at": "2024-03-18T16:21:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1528870330",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1528870330"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
        }
      },
      "start_line": null,
      "original_start_line": 891,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 896,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1528870494",
      "pull_request_review_id": 1943583338,
      "id": 1528870494,
      "node_id": "PRRC_kwDOABII585bILZe",
      "diff_hunk": "@@ -922,6 +922,113 @@ RPCHelpMan gethdkeys()\n     };\n }\n \n+static RPCHelpMan createwalletdescriptor()\n+{\n+    return RPCHelpMan{\"createwalletdescriptor\",\n+        \"Creates the wallet's descriptor for the given address type. \"\n+        \"Only works on wallets that contain automatically generated descriptors. \"",
      "path": "src/wallet/rpc/wallet.cpp",
      "position": null,
      "original_position": 8,
      "commit_id": "746b6d88395607abbd3c13bbdcdd4ca83e9bc9e4",
      "original_commit_id": "9e3e731641634104f4662ae52057c34feec7b43d",
      "in_reply_to_id": 1527175233,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Removed",
      "created_at": "2024-03-18T16:21:15Z",
      "updated_at": "2024-03-18T16:21:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1528870494",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1528870494"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 929,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1528870581",
      "pull_request_review_id": 1943583476,
      "id": 1528870581,
      "node_id": "PRRC_kwDOABII585bILa1",
      "diff_hunk": "@@ -922,6 +922,113 @@ RPCHelpMan gethdkeys()\n     };\n }\n \n+static RPCHelpMan createwalletdescriptor()\n+{\n+    return RPCHelpMan{\"createwalletdescriptor\",\n+        \"Creates the wallet's descriptor for the given address type. \"\n+        \"Only works on wallets that contain automatically generated descriptors. \"\n+        \"The address type must be one that the wallet does not already have a descriptor for.\"\n+        + HELP_REQUIRING_PASSPHRASE,\n+        {\n+            {\"type\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The address type the descriptor will produce. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", \\\"bech32\\\", and \\\"bech32m\\\".\"},\n+            {\"options\", RPCArg::Type::OBJ_NAMED_PARAMS, RPCArg::Optional::OMITTED, \"\", {\n+                {\"internal\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"Both external and internal will be generated unless this parameter is specified\"}, \"Whether to only make one descriptor that is internal (if parameter is true) or external (if parameter is false)\"},\n+                {\"hdkey\", RPCArg::Type::STR, RPCArg::DefaultHint{\"The HD key used by all other active descriptors\"}, \"The HD key that the wallet knows the private key of, listed using 'gethdkeys', to use for this descriptor's key\"},\n+            }},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+            {\n+                {RPCResult::Type::ARR, \"descs\", \"The public descriptors that were added to the wallet\",\n+                    {{RPCResult::Type::STR, \"\", \"\"}}\n+                }\n+            },\n+        },\n+        RPCExamples{\n+            HelpExampleCli(\"createwalletdescriptor\", \"bech32m\")\n+            + HelpExampleRpc(\"createwalletdescriptor\", \"bech32m\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+            if (!pwallet) return UniValue::VNULL;\n+\n+            //  Make sure wallet is a descriptor wallet\n+            if (!pwallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"createwalletdescriptor is not available for non-descriptor wallets\");\n+            }\n+\n+            std::optional<OutputType> output_type = ParseOutputType(request.params[0].get_str());\n+            if (!output_type) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Unknown address type '%s'\", request.params[0].get_str()));\n+            }\n+\n+            UniValue options{request.params[1].isNull() ? UniValue::VOBJ : request.params[1]};\n+            UniValue internal_only{options[\"internal\"]};\n+            UniValue hdkey{options[\"hdkey\"]};\n+\n+            std::vector<bool> internals;\n+            if (internal_only.isNull()) {\n+                internals.push_back(false);\n+                internals.push_back(true);\n+            } else {\n+                internals.push_back(internal_only.get_bool());\n+            }\n+\n+            LOCK(pwallet->cs_wallet);\n+            EnsureWalletIsUnlocked(*pwallet);\n+\n+            CExtPubKey xpub;\n+            if (hdkey.isNull()) {\n+                std::set<CExtPubKey> active_xpubs = pwallet->GetActiveHDPubKeys();\n+                if (active_xpubs.size() != 1) {\n+                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Unable to determine which HD key to use from active descriptors. Please specify with 'hdkey'\");\n+                }\n+                xpub = *active_xpubs.begin();\n+            } else {\n+                xpub = DecodeExtPubKey(hdkey.get_str());\n+                if (!xpub.pubkey.IsValid()) {\n+                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Unable to parse HD key. Please provide a valid xpub\");\n+                }\n+            }\n+\n+            std::optional<CKey> key = pwallet->GetKey(xpub.pubkey.GetID());\n+            if (!key) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Private key for %s is not known\", EncodeExtPubKey(xpub)));\n+            }\n+            CExtKey active_hdkey(xpub, *key);\n+\n+            std::vector<std::reference_wrapper<DescriptorScriptPubKeyMan>> spkms;\n+            WalletBatch batch{pwallet->GetDatabase()};\n+            for (bool internal : internals) {\n+                WalletDescriptor w_desc = GenerateWalletDescriptor(xpub, *output_type, internal);\n+                uint256 w_id = DescriptorID(*w_desc.descriptor);\n+                if (!pwallet->GetScriptPubKeyMan(w_id)) {\n+                    spkms.emplace_back(pwallet->SetupDescriptorScriptPubKeyMan(batch, active_hdkey, *output_type, internal));\n+                }\n+            }\n+            if (spkms.empty()) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Descriptor already exists\");\n+            }\n+\n+            // Generate spks, fill caches, etc.\n+            pwallet->TopUpKeyPool();",
      "path": "src/wallet/rpc/wallet.cpp",
      "position": null,
      "original_position": 94,
      "commit_id": "746b6d88395607abbd3c13bbdcdd4ca83e9bc9e4",
      "original_commit_id": "9e3e731641634104f4662ae52057c34feec7b43d",
      "in_reply_to_id": 1527183153,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Removed",
      "created_at": "2024-03-18T16:21:19Z",
      "updated_at": "2024-03-18T16:21:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1528870581",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1528870581"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
        }
      },
      "start_line": null,
      "original_start_line": 1014,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1015,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1528870655",
      "pull_request_review_id": 1943583608,
      "id": 1528870655,
      "node_id": "PRRC_kwDOABII585bILb_",
      "diff_hunk": "@@ -817,6 +817,111 @@ static RPCHelpMan migratewallet()\n     };\n }\n \n+RPCHelpMan gethdkeys()\n+{\n+    return RPCHelpMan{\n+        \"gethdkeys\",\n+        \"\\nList all BIP 32 HD keys in the wallet and which descriptors use them.\\n\",\n+        {\n+            {\"options\", RPCArg::Type::OBJ_NAMED_PARAMS, RPCArg::Optional::OMITTED, \"\", {\n+                {\"active_only\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show the keys for only active descriptors\"},\n+                {\"private\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show private keys.\"}\n+            }},\n+        },\n+        RPCResult{RPCResult::Type::ARR, \"\", \"\", {\n+            {\n+                {RPCResult::Type::OBJ, \"\", \"\", {\n+                    {RPCResult::Type::STR, \"xpub\", \"The extended public key\"},\n+                    {RPCResult::Type::BOOL, \"has_private\", \"Whether the wallet has the private key for this xpub\"},\n+                    {RPCResult::Type::STR, \"xprv\", /*optional=*/true, \"The extended private key if private is true\"},",
      "path": "src/wallet/rpc/wallet.cpp",
      "position": null,
      "original_position": 20,
      "commit_id": "746b6d88395607abbd3c13bbdcdd4ca83e9bc9e4",
      "original_commit_id": "449636474a6d980aa47f40233df0f5d71b5e7918",
      "in_reply_to_id": 1527250719,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2024-03-18T16:21:23Z",
      "updated_at": "2024-03-18T16:21:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1528870655",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1528870655"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 836,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1528870742",
      "pull_request_review_id": 1943583736,
      "id": 1528870742,
      "node_id": "PRRC_kwDOABII585bILdW",
      "diff_hunk": "@@ -817,6 +817,111 @@ static RPCHelpMan migratewallet()\n     };\n }\n \n+RPCHelpMan gethdkeys()\n+{\n+    return RPCHelpMan{\n+        \"gethdkeys\",\n+        \"\\nList all BIP 32 HD keys in the wallet and which descriptors use them.\\n\",\n+        {\n+            {\"options\", RPCArg::Type::OBJ_NAMED_PARAMS, RPCArg::Optional::OMITTED, \"\", {\n+                {\"active_only\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show the keys for only active descriptors\"},\n+                {\"private\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show private keys.\"}",
      "path": "src/wallet/rpc/wallet.cpp",
      "position": null,
      "original_position": 12,
      "commit_id": "746b6d88395607abbd3c13bbdcdd4ca83e9bc9e4",
      "original_commit_id": "449636474a6d980aa47f40233df0f5d71b5e7918",
      "in_reply_to_id": 1527251518,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2024-03-18T16:21:26Z",
      "updated_at": "2024-03-18T16:21:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1528870742",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1528870742"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
        }
      },
      "start_line": null,
      "original_start_line": 827,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 828,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1528870810",
      "pull_request_review_id": 1943583825,
      "id": 1528870810,
      "node_id": "PRRC_kwDOABII585bILea",
      "diff_hunk": "@@ -0,0 +1,192 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2023 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test wallet gethdkeys RPC.\"\"\"\n+\n+from test_framework.descriptors import descsum_create\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+)\n+from test_framework.wallet_util import WalletUnlock\n+\n+\n+class WalletGetHDKeyTest(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        self.add_wallet_options(parser, descriptors=True, legacy=False)\n+\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self.test_basic_gethdkeys()\n+        self.test_ranged_imports()\n+        self.test_lone_key_imports()\n+        self.test_ranged_multisig()\n+        self.test_mixed_multisig()\n+\n+    def test_basic_gethdkeys(self):\n+        self.log.info(\"Test gethdkeys basics\")\n+        self.nodes[0].createwallet(\"basic\")\n+        wallet = self.nodes[0].get_wallet_rpc(\"basic\")\n+        xpub_info = wallet.gethdkeys()\n+        assert_equal(len(xpub_info), 1)\n+        assert_equal(xpub_info[0][\"has_private\"], True)\n+\n+        assert \"xprv\" not in xpub_info[0]\n+        xpub = xpub_info[0][\"xpub\"]\n+\n+        xpub_info = wallet.gethdkeys(private=True)\n+        xprv = xpub_info[0][\"xprv\"]\n+        assert_equal(xpub_info[0][\"xpub\"], xpub)\n+        assert_equal(xpub_info[0][\"has_private\"], True)\n+\n+        descs = wallet.listdescriptors(True)\n+        for desc in descs[\"descriptors\"]:\n+            if \"range\" in desc:\n+                assert xprv in desc[\"desc\"]",
      "path": "test/functional/wallet_gethdkeys.py",
      "position": null,
      "original_position": 53,
      "commit_id": "746b6d88395607abbd3c13bbdcdd4ca83e9bc9e4",
      "original_commit_id": "79206eaaf8c4331e27ca8d48d924179a4dcdddab",
      "in_reply_to_id": 1527253171,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> nit: As the wallet generates ranged descriptors by default, can remove the `if \"range\" in desc:` line.\r\n\r\nDone\r\n\r\n> Also, why you did not perform the same check with the xpub?\r\n\r\nSince `gethdkeys` returns the master xpub but `listdescriptors false` returns normalized descriptors, we can't easily do this check.",
      "created_at": "2024-03-18T16:21:29Z",
      "updated_at": "2024-03-18T16:21:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1528870810",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1528870810"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
        }
      },
      "start_line": null,
      "original_start_line": 51,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 53,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1528871144",
      "pull_request_review_id": 1943584348,
      "id": 1528871144,
      "node_id": "PRRC_kwDOABII585bILjo",
      "diff_hunk": "@@ -0,0 +1,192 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2023 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test wallet gethdkeys RPC.\"\"\"\n+\n+from test_framework.descriptors import descsum_create\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+)\n+from test_framework.wallet_util import WalletUnlock\n+\n+\n+class WalletGetHDKeyTest(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        self.add_wallet_options(parser, descriptors=True, legacy=False)\n+\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self.test_basic_gethdkeys()\n+        self.test_ranged_imports()\n+        self.test_lone_key_imports()\n+        self.test_ranged_multisig()\n+        self.test_mixed_multisig()\n+\n+    def test_basic_gethdkeys(self):\n+        self.log.info(\"Test gethdkeys basics\")\n+        self.nodes[0].createwallet(\"basic\")\n+        wallet = self.nodes[0].get_wallet_rpc(\"basic\")\n+        xpub_info = wallet.gethdkeys()\n+        assert_equal(len(xpub_info), 1)\n+        assert_equal(xpub_info[0][\"has_private\"], True)\n+\n+        assert \"xprv\" not in xpub_info[0]\n+        xpub = xpub_info[0][\"xpub\"]\n+\n+        xpub_info = wallet.gethdkeys(private=True)\n+        xprv = xpub_info[0][\"xprv\"]\n+        assert_equal(xpub_info[0][\"xpub\"], xpub)\n+        assert_equal(xpub_info[0][\"has_private\"], True)\n+\n+        descs = wallet.listdescriptors(True)\n+        for desc in descs[\"descriptors\"]:\n+            if \"range\" in desc:\n+                assert xprv in desc[\"desc\"]\n+\n+        self.log.info(\"HD pubkey can be retrieved from encrypted wallets\")\n+        prev_xprv = xprv\n+        wallet.encryptwallet(\"pass\")\n+        # HD key is rotated on encryption, there should now be 2 HD keys\n+        assert_equal(len(wallet.gethdkeys()), 2)\n+        # New key is active, should be able to get only that one and its descriptors\n+        xpub_info = wallet.gethdkeys(active_only=True)\n+        assert_equal(len(xpub_info), 1)\n+        assert xpub_info[0][\"xpub\"] != xpub\n+        assert \"xprv\" not in xpub_info[0]\n+        assert_equal(xpub_info[0][\"has_private\"], True)\n+\n+        self.log.info(\"HD privkey can be retrieved from encrypted wallets\")\n+        assert_raises_rpc_error(-13, \"Error: Please enter the wallet passphrase with walletpassphrase first\", wallet.gethdkeys, private=True)\n+        with WalletUnlock(wallet, \"pass\"):\n+            xpub_info = wallet.gethdkeys(active_only=True, private=True)[0]\n+            assert xpub_info[\"xprv\"] != xprv\n+            for desc in wallet.listdescriptors(True)[\"descriptors\"]:\n+                if desc[\"active\"]:\n+                    # After encrypting, HD key was rotated and should appear in all active descriptors\n+                    assert xpub_info[\"xprv\"] in desc[\"desc\"]\n+                else:\n+                    # Inactive descriptors should have the previous HD key\n+                    assert prev_xprv in desc[\"desc\"]\n+\n+    def test_ranged_imports(self):\n+        self.log.info(\"Keys of imported ranged descriptors appear in gethdkeys\")\n+        def_wallet = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n+        self.nodes[0].createwallet(\"imports\")\n+        wallet = self.nodes[0].get_wallet_rpc(\"imports\")\n+\n+        xpub_info = wallet.gethdkeys()\n+        assert_equal(len(xpub_info), 1)\n+        active_xpub = xpub_info[0][\"xpub\"]\n+\n+        import_xpub = def_wallet.gethdkeys(active_only=True)[0][\"xpub\"]\n+        desc_import = def_wallet.listdescriptors(True)[\"descriptors\"]\n+        for desc in desc_import:\n+            desc[\"active\"] = False\n+        wallet.importdescriptors(desc_import)\n+        assert_equal(wallet.gethdkeys(active_only=True), xpub_info)\n+\n+        xpub_info = wallet.gethdkeys()\n+        assert_equal(len(xpub_info), 2)\n+        for x in xpub_info:\n+            if x[\"xpub\"] == active_xpub:\n+                for desc in x[\"descriptors\"]:\n+                    assert_equal(desc[\"active\"], True)\n+            elif x[\"xpub\"] == import_xpub:\n+                for desc in x[\"descriptors\"]:\n+                    assert_equal(desc[\"active\"], False)\n+            else:\n+                assert False\n+\n+\n+    def test_lone_key_imports(self):\n+        self.log.info(\"Non-HD keys do not appear in gethdkeys\")\n+        self.nodes[0].createwallet(\"lonekey\", blank=True)\n+        wallet = self.nodes[0].get_wallet_rpc(\"lonekey\")\n+\n+        assert_equal(wallet.gethdkeys(), [])\n+        wallet.importdescriptors([{\"desc\": descsum_create(\"wpkh(cTe1f5rdT8A8DFgVWTjyPwACsDPJM9ff4QngFxUixCSvvbg1x6sh)\"), \"timestamp\": \"now\"}])\n+        assert_equal(wallet.gethdkeys(), [])\n+\n+        self.log.info(\"HD keys of non-ranged descriptors should appear in gethdkeys\")\n+        def_wallet = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n+        xpub_info = def_wallet.gethdkeys(private=True)\n+        xpub = xpub_info[0][\"xpub\"]\n+        xprv = xpub_info[0][\"xprv\"]\n+        prv_desc = descsum_create(f\"wpkh({xprv})\")\n+        pub_desc = descsum_create(f\"wpkh({xpub})\")\n+        assert_equal(wallet.importdescriptors([{\"desc\": prv_desc, \"timestamp\": \"now\"}])[0][\"success\"], True)\n+        xpub_info = wallet.gethdkeys()\n+        assert_equal(len(xpub_info), 1)\n+        assert_equal(xpub_info[0][\"xpub\"], xpub)\n+        assert_equal(len(xpub_info[0][\"descriptors\"]), 1)\n+        assert_equal(xpub_info[0][\"descriptors\"][0][\"desc\"], pub_desc)\n+        assert_equal(xpub_info[0][\"descriptors\"][0][\"active\"], False)\n+\n+    def test_ranged_multisig(self):\n+        self.log.info(\"HD keys of a multisig appear in gethdkeys\")\n+        def_wallet = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n+        self.nodes[0].createwallet(\"ranged_multisig\")\n+        wallet = self.nodes[0].get_wallet_rpc(\"ranged_multisig\")\n+\n+        xpub1 = wallet.gethdkeys()[0][\"xpub\"]\n+        xprv1 = wallet.gethdkeys(private=True)[0][\"xprv\"]\n+        xpub2 = def_wallet.gethdkeys()[0][\"xpub\"]\n+\n+        prv_multi_desc = descsum_create(f\"wsh(multi(2,{xprv1}/*,{xpub2}/*))\")\n+        pub_multi_desc = descsum_create(f\"wsh(multi(2,{xpub1}/*,{xpub2}/*))\")\n+        assert_equal(wallet.importdescriptors([{\"desc\": prv_multi_desc, \"timestamp\": \"now\"}])[0][\"success\"], True)\n+\n+        xpub_info = wallet.gethdkeys()\n+        assert_equal(len(xpub_info), 2)\n+        for x in xpub_info:\n+            if x[\"xpub\"] == xpub1:\n+                for d in x[\"descriptors\"]:\n+                    if d[\"desc\"] == pub_multi_desc:\n+                        assert_equal(d[\"active\"], False)\n+                        break\n+                else:\n+                    assert False",
      "path": "test/functional/wallet_gethdkeys.py",
      "position": null,
      "original_position": 157,
      "commit_id": "746b6d88395607abbd3c13bbdcdd4ca83e9bc9e4",
      "original_commit_id": "79206eaaf8c4331e27ca8d48d924179a4dcdddab",
      "in_reply_to_id": 1527257196,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Changed to use the suggestion below",
      "created_at": "2024-03-18T16:21:42Z",
      "updated_at": "2024-03-18T16:21:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1528871144",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1528871144"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
        }
      },
      "start_line": null,
      "original_start_line": 150,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 157,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1528871253",
      "pull_request_review_id": 1943584506,
      "id": 1528871253,
      "node_id": "PRRC_kwDOABII585bILlV",
      "diff_hunk": "@@ -0,0 +1,192 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2023 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test wallet gethdkeys RPC.\"\"\"\n+\n+from test_framework.descriptors import descsum_create\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+)\n+from test_framework.wallet_util import WalletUnlock\n+\n+\n+class WalletGetHDKeyTest(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        self.add_wallet_options(parser, descriptors=True, legacy=False)\n+\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self.test_basic_gethdkeys()\n+        self.test_ranged_imports()\n+        self.test_lone_key_imports()\n+        self.test_ranged_multisig()\n+        self.test_mixed_multisig()\n+\n+    def test_basic_gethdkeys(self):\n+        self.log.info(\"Test gethdkeys basics\")\n+        self.nodes[0].createwallet(\"basic\")\n+        wallet = self.nodes[0].get_wallet_rpc(\"basic\")\n+        xpub_info = wallet.gethdkeys()\n+        assert_equal(len(xpub_info), 1)\n+        assert_equal(xpub_info[0][\"has_private\"], True)\n+\n+        assert \"xprv\" not in xpub_info[0]\n+        xpub = xpub_info[0][\"xpub\"]\n+\n+        xpub_info = wallet.gethdkeys(private=True)\n+        xprv = xpub_info[0][\"xprv\"]\n+        assert_equal(xpub_info[0][\"xpub\"], xpub)\n+        assert_equal(xpub_info[0][\"has_private\"], True)\n+\n+        descs = wallet.listdescriptors(True)\n+        for desc in descs[\"descriptors\"]:\n+            if \"range\" in desc:\n+                assert xprv in desc[\"desc\"]\n+\n+        self.log.info(\"HD pubkey can be retrieved from encrypted wallets\")\n+        prev_xprv = xprv\n+        wallet.encryptwallet(\"pass\")\n+        # HD key is rotated on encryption, there should now be 2 HD keys\n+        assert_equal(len(wallet.gethdkeys()), 2)\n+        # New key is active, should be able to get only that one and its descriptors\n+        xpub_info = wallet.gethdkeys(active_only=True)\n+        assert_equal(len(xpub_info), 1)\n+        assert xpub_info[0][\"xpub\"] != xpub\n+        assert \"xprv\" not in xpub_info[0]\n+        assert_equal(xpub_info[0][\"has_private\"], True)\n+\n+        self.log.info(\"HD privkey can be retrieved from encrypted wallets\")\n+        assert_raises_rpc_error(-13, \"Error: Please enter the wallet passphrase with walletpassphrase first\", wallet.gethdkeys, private=True)\n+        with WalletUnlock(wallet, \"pass\"):\n+            xpub_info = wallet.gethdkeys(active_only=True, private=True)[0]\n+            assert xpub_info[\"xprv\"] != xprv\n+            for desc in wallet.listdescriptors(True)[\"descriptors\"]:\n+                if desc[\"active\"]:\n+                    # After encrypting, HD key was rotated and should appear in all active descriptors\n+                    assert xpub_info[\"xprv\"] in desc[\"desc\"]\n+                else:\n+                    # Inactive descriptors should have the previous HD key\n+                    assert prev_xprv in desc[\"desc\"]\n+\n+    def test_ranged_imports(self):\n+        self.log.info(\"Keys of imported ranged descriptors appear in gethdkeys\")\n+        def_wallet = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n+        self.nodes[0].createwallet(\"imports\")\n+        wallet = self.nodes[0].get_wallet_rpc(\"imports\")\n+\n+        xpub_info = wallet.gethdkeys()\n+        assert_equal(len(xpub_info), 1)\n+        active_xpub = xpub_info[0][\"xpub\"]\n+\n+        import_xpub = def_wallet.gethdkeys(active_only=True)[0][\"xpub\"]\n+        desc_import = def_wallet.listdescriptors(True)[\"descriptors\"]\n+        for desc in desc_import:\n+            desc[\"active\"] = False\n+        wallet.importdescriptors(desc_import)\n+        assert_equal(wallet.gethdkeys(active_only=True), xpub_info)\n+\n+        xpub_info = wallet.gethdkeys()\n+        assert_equal(len(xpub_info), 2)\n+        for x in xpub_info:\n+            if x[\"xpub\"] == active_xpub:\n+                for desc in x[\"descriptors\"]:\n+                    assert_equal(desc[\"active\"], True)\n+            elif x[\"xpub\"] == import_xpub:\n+                for desc in x[\"descriptors\"]:\n+                    assert_equal(desc[\"active\"], False)\n+            else:\n+                assert False\n+\n+\n+    def test_lone_key_imports(self):\n+        self.log.info(\"Non-HD keys do not appear in gethdkeys\")\n+        self.nodes[0].createwallet(\"lonekey\", blank=True)\n+        wallet = self.nodes[0].get_wallet_rpc(\"lonekey\")\n+\n+        assert_equal(wallet.gethdkeys(), [])\n+        wallet.importdescriptors([{\"desc\": descsum_create(\"wpkh(cTe1f5rdT8A8DFgVWTjyPwACsDPJM9ff4QngFxUixCSvvbg1x6sh)\"), \"timestamp\": \"now\"}])\n+        assert_equal(wallet.gethdkeys(), [])\n+\n+        self.log.info(\"HD keys of non-ranged descriptors should appear in gethdkeys\")\n+        def_wallet = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n+        xpub_info = def_wallet.gethdkeys(private=True)\n+        xpub = xpub_info[0][\"xpub\"]\n+        xprv = xpub_info[0][\"xprv\"]\n+        prv_desc = descsum_create(f\"wpkh({xprv})\")\n+        pub_desc = descsum_create(f\"wpkh({xpub})\")\n+        assert_equal(wallet.importdescriptors([{\"desc\": prv_desc, \"timestamp\": \"now\"}])[0][\"success\"], True)\n+        xpub_info = wallet.gethdkeys()\n+        assert_equal(len(xpub_info), 1)\n+        assert_equal(xpub_info[0][\"xpub\"], xpub)\n+        assert_equal(len(xpub_info[0][\"descriptors\"]), 1)\n+        assert_equal(xpub_info[0][\"descriptors\"][0][\"desc\"], pub_desc)\n+        assert_equal(xpub_info[0][\"descriptors\"][0][\"active\"], False)\n+\n+    def test_ranged_multisig(self):\n+        self.log.info(\"HD keys of a multisig appear in gethdkeys\")\n+        def_wallet = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n+        self.nodes[0].createwallet(\"ranged_multisig\")\n+        wallet = self.nodes[0].get_wallet_rpc(\"ranged_multisig\")\n+\n+        xpub1 = wallet.gethdkeys()[0][\"xpub\"]\n+        xprv1 = wallet.gethdkeys(private=True)[0][\"xprv\"]\n+        xpub2 = def_wallet.gethdkeys()[0][\"xpub\"]\n+\n+        prv_multi_desc = descsum_create(f\"wsh(multi(2,{xprv1}/*,{xpub2}/*))\")\n+        pub_multi_desc = descsum_create(f\"wsh(multi(2,{xpub1}/*,{xpub2}/*))\")\n+        assert_equal(wallet.importdescriptors([{\"desc\": prv_multi_desc, \"timestamp\": \"now\"}])[0][\"success\"], True)\n+\n+        xpub_info = wallet.gethdkeys()\n+        assert_equal(len(xpub_info), 2)\n+        for x in xpub_info:\n+            if x[\"xpub\"] == xpub1:\n+                for d in x[\"descriptors\"]:\n+                    if d[\"desc\"] == pub_multi_desc:\n+                        assert_equal(d[\"active\"], False)\n+                        break\n+                else:\n+                    assert False\n+            elif x[\"xpub\"] == xpub2:\n+                assert_equal(len(x[\"descriptors\"]), 1)\n+                assert_equal(x[\"descriptors\"][0][\"desc\"], pub_multi_desc)\n+                assert_equal(x[\"descriptors\"][0][\"active\"], False)\n+            else:\n+                assert False\n+\n+    def test_mixed_multisig(self):\n+        self.log.info(\"Non-HD keys of a multisig do not appear in gethdkeys\")\n+        def_wallet = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n+        self.nodes[0].createwallet(\"single_multisig\")\n+        wallet = self.nodes[0].get_wallet_rpc(\"single_multisig\")\n+\n+        xpub = wallet.gethdkeys()[0][\"xpub\"]\n+        xprv = wallet.gethdkeys(private=True)[0][\"xprv\"]\n+        pub = def_wallet.getaddressinfo(def_wallet.getnewaddress())[\"pubkey\"]\n+\n+        prv_multi_desc = descsum_create(f\"wsh(multi(2,{xprv},{pub}))\")\n+        pub_multi_desc = descsum_create(f\"wsh(multi(2,{xpub},{pub}))\")\n+        import_res = wallet.importdescriptors([{\"desc\": prv_multi_desc, \"timestamp\": \"now\"}])\n+        assert_equal(import_res[0][\"success\"], True)\n+\n+        xpub_info = wallet.gethdkeys()\n+        assert_equal(len(xpub_info), 1)\n+        assert_equal(xpub_info[0][\"xpub\"], xpub)\n+        for d in xpub_info[0][\"descriptors\"]:\n+            if d[\"desc\"] == pub_multi_desc:\n+                assert_equal(d[\"active\"], False)\n+                break\n+        else:\n+            assert False",
      "path": "test/functional/wallet_gethdkeys.py",
      "position": null,
      "original_position": 188,
      "commit_id": "746b6d88395607abbd3c13bbdcdd4ca83e9bc9e4",
      "original_commit_id": "79206eaaf8c4331e27ca8d48d924179a4dcdddab",
      "in_reply_to_id": 1527258422,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Changed as suggested",
      "created_at": "2024-03-18T16:21:46Z",
      "updated_at": "2024-03-18T16:21:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1528871253",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1528871253"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
        }
      },
      "start_line": null,
      "original_start_line": 183,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 188,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1532132759",
      "pull_request_review_id": 1948974245,
      "id": 1532132759,
      "node_id": "PRRC_kwDOABII585bUn2X",
      "diff_hunk": "@@ -817,6 +817,113 @@ static RPCHelpMan migratewallet()\n     };\n }\n \n+RPCHelpMan gethdkeys()\n+{\n+    return RPCHelpMan{\n+        \"gethdkeys\",\n+        \"\\nList all BIP 32 HD keys in the wallet and which descriptors use them.\\n\",\n+        {\n+            {\"options\", RPCArg::Type::OBJ_NAMED_PARAMS, RPCArg::Optional::OMITTED, \"\", {\n+                {\"active_only\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show the keys for only active descriptors\"},\n+                {\"private\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show private keys\"}\n+            }},\n+        },\n+        RPCResult{RPCResult::Type::ARR, \"\", \"\", {\n+            {\n+                {RPCResult::Type::OBJ, \"\", \"\", {\n+                    {RPCResult::Type::STR, \"xpub\", \"The extended public key\"},\n+                    {RPCResult::Type::BOOL, \"has_private\", \"Whether the wallet has the private key for this xpub\"},\n+                    {RPCResult::Type::STR, \"xprv\", /*optional=*/true, \"The extended private key if \\\"private\\\" is true\"},\n+                    {RPCResult::Type::ARR, \"descriptors\", \"Array of descriptor objects that use this HD key\",\n+                    {\n+                        {RPCResult::Type::OBJ, \"\", \"\", {\n+                            {RPCResult::Type::STR, \"desc\", \"Descriptor string representation\"},\n+                            {RPCResult::Type::BOOL, \"active\", \"Whether this descriptor is currently used to generate new addresses\"},\n+                        }},\n+                    }},\n+                }},\n+            }\n+        }},\n+        RPCExamples{\n+            HelpExampleCli(\"gethdkeys\", \"\") + HelpExampleRpc(\"gethdkeys\", \"\")\n+            + HelpExampleCliNamed(\"gethdkeys\", {{\"active_only\", \"true\"}, {\"private\", \"true\"}}) + HelpExampleRpcNamed(\"gethdkeys\", {{\"active_only\", \"true\"}, {\"private\", \"true\"}})\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            const std::shared_ptr<const CWallet> wallet = GetWalletForJSONRPCRequest(request);\n+            if (!wallet) return UniValue::VNULL;\n+\n+            if (!wallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"gethdkeys is not available for non-descriptor wallets\");\n+            }\n+\n+            LOCK(wallet->cs_wallet);\n+\n+            UniValue options{request.params[0].isNull() ? UniValue::VOBJ : request.params[0]};\n+            const bool active_only{options.exists(\"active_only\") ? options[\"active_only\"].get_bool() : false};\n+            const bool priv{options.exists(\"private\") ? options[\"private\"].get_bool() : false};\n+            if (priv) {\n+                EnsureWalletIsUnlocked(*wallet);\n+            }\n+\n+\n+            std::set<ScriptPubKeyMan*> spkms;\n+            if (active_only) {\n+                spkms = wallet->GetActiveScriptPubKeyMans();\n+            } else {\n+                spkms = wallet->GetAllScriptPubKeyMans();\n+            }\n+\n+            std::map<CExtPubKey, std::set<std::tuple<std::string, bool, bool>>> wallet_xpubs;\n+            std::map<CExtPubKey, CExtKey> wallet_xprvs;\n+            for (auto* spkm : spkms) {\n+                auto* desc_spkm{dynamic_cast<DescriptorScriptPubKeyMan*>(spkm)};\n+                CHECK_NONFATAL(desc_spkm);\n+                LOCK(desc_spkm->cs_desc_man);\n+                WalletDescriptor w_desc = desc_spkm->GetWalletDescriptor();\n+\n+                // Retrieve the pubkeys from the descriptor\n+                std::set<CPubKey> desc_pubkeys;\n+                std::set<CExtPubKey> desc_xpubs;\n+                w_desc.descriptor->GetPubKeys(desc_pubkeys, desc_xpubs);\n+                for (const CExtPubKey& xpub : desc_xpubs) {\n+                    std::string desc_str;\n+                    desc_spkm->GetDescriptorString(desc_str, false);",
      "path": "src/wallet/rpc/wallet.cpp",
      "position": null,
      "original_position": 75,
      "commit_id": "746b6d88395607abbd3c13bbdcdd4ca83e9bc9e4",
      "original_commit_id": "21d0bc38ab78d21d4a3fb590935790e949b554a3",
      "in_reply_to_id": null,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 21d0bc38ab:\r\n\r\nNote about this:\r\nThis works on encrypted wallets because the last hardened extended pubkey is cached after creation. If it wouldn't be cached for some reason, this command would fail (`gethdkeys` does not require the wallet to be unlocked).\r\n\r\nCould, as a simple error catching method, check the `GetDescriptorString` return value.",
      "created_at": "2024-03-20T13:59:34Z",
      "updated_at": "2024-03-20T16:06:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1532132759",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1532132759"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
        }
      },
      "start_line": null,
      "original_start_line": 890,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 891,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1532157313",
      "pull_request_review_id": 1948974245,
      "id": 1532157313,
      "node_id": "PRRC_kwDOABII585bUt2B",
      "diff_hunk": "@@ -817,6 +817,113 @@ static RPCHelpMan migratewallet()\n     };\n }\n \n+RPCHelpMan gethdkeys()\n+{\n+    return RPCHelpMan{\n+        \"gethdkeys\",\n+        \"\\nList all BIP 32 HD keys in the wallet and which descriptors use them.\\n\",\n+        {\n+            {\"options\", RPCArg::Type::OBJ_NAMED_PARAMS, RPCArg::Optional::OMITTED, \"\", {\n+                {\"active_only\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show the keys for only active descriptors\"},\n+                {\"private\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show private keys\"}\n+            }},\n+        },\n+        RPCResult{RPCResult::Type::ARR, \"\", \"\", {\n+            {\n+                {RPCResult::Type::OBJ, \"\", \"\", {\n+                    {RPCResult::Type::STR, \"xpub\", \"The extended public key\"},\n+                    {RPCResult::Type::BOOL, \"has_private\", \"Whether the wallet has the private key for this xpub\"},\n+                    {RPCResult::Type::STR, \"xprv\", /*optional=*/true, \"The extended private key if \\\"private\\\" is true\"},\n+                    {RPCResult::Type::ARR, \"descriptors\", \"Array of descriptor objects that use this HD key\",\n+                    {\n+                        {RPCResult::Type::OBJ, \"\", \"\", {\n+                            {RPCResult::Type::STR, \"desc\", \"Descriptor string representation\"},\n+                            {RPCResult::Type::BOOL, \"active\", \"Whether this descriptor is currently used to generate new addresses\"},\n+                        }},\n+                    }},\n+                }},\n+            }\n+        }},\n+        RPCExamples{\n+            HelpExampleCli(\"gethdkeys\", \"\") + HelpExampleRpc(\"gethdkeys\", \"\")\n+            + HelpExampleCliNamed(\"gethdkeys\", {{\"active_only\", \"true\"}, {\"private\", \"true\"}}) + HelpExampleRpcNamed(\"gethdkeys\", {{\"active_only\", \"true\"}, {\"private\", \"true\"}})\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            const std::shared_ptr<const CWallet> wallet = GetWalletForJSONRPCRequest(request);\n+            if (!wallet) return UniValue::VNULL;\n+\n+            if (!wallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"gethdkeys is not available for non-descriptor wallets\");\n+            }\n+\n+            LOCK(wallet->cs_wallet);\n+\n+            UniValue options{request.params[0].isNull() ? UniValue::VOBJ : request.params[0]};\n+            const bool active_only{options.exists(\"active_only\") ? options[\"active_only\"].get_bool() : false};\n+            const bool priv{options.exists(\"private\") ? options[\"private\"].get_bool() : false};\n+            if (priv) {\n+                EnsureWalletIsUnlocked(*wallet);\n+            }\n+\n+\n+            std::set<ScriptPubKeyMan*> spkms;\n+            if (active_only) {\n+                spkms = wallet->GetActiveScriptPubKeyMans();\n+            } else {\n+                spkms = wallet->GetAllScriptPubKeyMans();\n+            }\n+\n+            std::map<CExtPubKey, std::set<std::tuple<std::string, bool, bool>>> wallet_xpubs;\n+            std::map<CExtPubKey, CExtKey> wallet_xprvs;\n+            for (auto* spkm : spkms) {\n+                auto* desc_spkm{dynamic_cast<DescriptorScriptPubKeyMan*>(spkm)};\n+                CHECK_NONFATAL(desc_spkm);\n+                LOCK(desc_spkm->cs_desc_man);\n+                WalletDescriptor w_desc = desc_spkm->GetWalletDescriptor();\n+\n+                // Retrieve the pubkeys from the descriptor\n+                std::set<CPubKey> desc_pubkeys;\n+                std::set<CExtPubKey> desc_xpubs;\n+                w_desc.descriptor->GetPubKeys(desc_pubkeys, desc_xpubs);\n+                for (const CExtPubKey& xpub : desc_xpubs) {\n+                    std::string desc_str;\n+                    desc_spkm->GetDescriptorString(desc_str, false);\n+                    wallet_xpubs[xpub].emplace(desc_str, wallet->IsActiveScriptPubKeyMan(*spkm), desc_spkm->HasPrivKey(xpub.pubkey.GetID()));\n+                    if (std::optional<CKey> key = priv ? desc_spkm->GetKey(xpub.pubkey.GetID()) : std::nullopt) {\n+                        wallet_xprvs[xpub] = CExtKey(xpub, *key);\n+                    }\n+                }\n+            }\n+\n+            UniValue response(UniValue::VARR);\n+            for (const auto& [xpub, descs] : wallet_xpubs) {\n+                bool has_xprv = false;\n+                UniValue descriptors(UniValue::VARR);\n+                for (const auto& [desc, active, has_priv] : descs) {\n+                    UniValue d(UniValue::VOBJ);\n+                    d.pushKV(\"desc\", desc);",
      "path": "src/wallet/rpc/wallet.cpp",
      "position": 90,
      "original_position": 89,
      "commit_id": "746b6d88395607abbd3c13bbdcdd4ca83e9bc9e4",
      "original_commit_id": "21d0bc38ab78d21d4a3fb590935790e949b554a3",
      "in_reply_to_id": null,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 21d0bc38ab:\r\n\r\nBetter to return the descriptors sorted:\r\n```diff\r\ndiff --git a/src/wallet/rpc/wallet.cpp b/src/wallet/rpc/wallet.cpp\r\n--- a/src/wallet/rpc/wallet.cpp\t(revision d7fc8a8bec5edb657f65ef35042d801e2913ab81)\r\n+++ b/src/wallet/rpc/wallet.cpp\t(date 1710943877002)\r\n@@ -874,7 +874,7 @@\r\n                 spkms = wallet->GetAllScriptPubKeyMans();\r\n             }\r\n \r\n-            std::map<CExtPubKey, std::set<std::tuple<std::string, bool, bool>>> wallet_xpubs;\r\n+            std::map<CExtPubKey, std::vector<std::tuple<std::string, bool, bool>>> wallet_xpubs;\r\n             std::map<CExtPubKey, CExtKey> wallet_xprvs;\r\n             for (auto* spkm : spkms) {\r\n                 auto* desc_spkm{dynamic_cast<DescriptorScriptPubKeyMan*>(spkm)};\r\n@@ -889,7 +889,7 @@\r\n                 for (const CExtPubKey& xpub : desc_xpubs) {\r\n                     std::string desc_str;\r\n                     desc_spkm->GetDescriptorString(desc_str, false);\r\n-                    wallet_xpubs[xpub].emplace(desc_str, wallet->IsActiveScriptPubKeyMan(*spkm), desc_spkm->HasPrivKey(xpub.pubkey.GetID()));\r\n+                    wallet_xpubs[xpub].emplace_back(desc_str, wallet->IsActiveScriptPubKeyMan(*spkm), desc_spkm->HasPrivKey(xpub.pubkey.GetID()));\r\n                     if (std::optional<CKey> key = priv ? desc_spkm->GetKey(xpub.pubkey.GetID()) : std::nullopt) {\r\n                         wallet_xprvs[xpub] = CExtKey(xpub, *key);\r\n                     }\r\n@@ -897,9 +897,15 @@\r\n             }\r\n \r\n             UniValue response(UniValue::VARR);\r\n-            for (const auto& [xpub, descs] : wallet_xpubs) {\r\n-                bool has_xprv = false;\r\n+            for (auto& [xpub, descs] : wallet_xpubs) {\r\n                 UniValue descriptors(UniValue::VARR);\r\n+\r\n+                // Sort descriptors\r\n+                std::sort(descs.begin(), descs.end(), [](const auto& a, const auto& b) {\r\n+                    return std::get<0>(a) < std::get<0>(b);\r\n+                });\r\n+\r\n+                bool has_xprv = false;\r\n                 for (const auto& [desc, active, has_priv] : descs) {\r\n                     UniValue d(UniValue::VOBJ);\r\n                     d.pushKV(\"desc\", desc);\r\n```",
      "created_at": "2024-03-20T14:14:59Z",
      "updated_at": "2024-03-20T14:44:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1532157313",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1532157313"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
        }
      },
      "start_line": 900,
      "original_start_line": 899,
      "start_side": "RIGHT",
      "line": 906,
      "original_line": 906,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1532182363",
      "pull_request_review_id": 1948974245,
      "id": 1532182363,
      "node_id": "PRRC_kwDOABII585bUz9b",
      "diff_hunk": "@@ -942,6 +942,7 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n \n     //! Returns all unique ScriptPubKeyMans in m_internal_spk_managers and m_external_spk_managers\n     std::set<ScriptPubKeyMan*> GetActiveScriptPubKeyMans() const;\n+    bool IsActiveScriptPubKeyMan(const ScriptPubKeyMan& spkm) const;",
      "path": "src/wallet/wallet.h",
      "position": 4,
      "original_position": 4,
      "commit_id": "746b6d88395607abbd3c13bbdcdd4ca83e9bc9e4",
      "original_commit_id": "66632e5c24c1b59afef1e89b562fbd0117ab6ef5",
      "in_reply_to_id": null,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "tiny nit:\r\nTo follow the same pattern used across this class, should pass the spkm pointer instead of the const ref (and return early if it is nullptr).\r\n\r\nSide note:\r\nIt is not really something that we should tackle nor discuss here but I think it would be better to return the is_active, and other spkm information, on the initial lookup function instead of introducing multiple functions that retrieves the information after wise. E.g. `GetAllScriptPubKeyMansInfo()` could return a struct instead of the bare spkm pointers.",
      "created_at": "2024-03-20T14:29:14Z",
      "updated_at": "2024-03-20T14:44:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1532182363",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1532182363"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 945,
      "original_line": 945,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1532200095",
      "pull_request_review_id": 1948974245,
      "id": 1532200095,
      "node_id": "PRRC_kwDOABII585bU4Sf",
      "diff_hunk": "@@ -4486,4 +4486,25 @@ void CWallet::TopUpCallback(const std::set<CScript>& spks, ScriptPubKeyMan* spkm\n     // Update scriptPubKey cache\n     CacheNewScriptPubKeys(spks, spkm);\n }\n+\n+std::set<CExtPubKey> CWallet::GetActiveHDPubKeys() const",
      "path": "src/wallet/wallet.cpp",
      "position": 71,
      "original_position": 5,
      "commit_id": "746b6d88395607abbd3c13bbdcdd4ca83e9bc9e4",
      "original_commit_id": "5f3e3cd13137a91c74fb87f0520005d065a83e46",
      "in_reply_to_id": null,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I do agree on encapsulating this function but have to say that it's inconsistent to how previous commits on this PR were implemented (`gethdkeys` accesses the wallet internals to obtain the same information).\r\n\r\nYet, this is not blocking. Just a comment. We lack of an structure here.",
      "created_at": "2024-03-20T14:36:27Z",
      "updated_at": "2024-03-20T14:44:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1532200095",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1532200095"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 4490,
      "original_line": 4490,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1532774651",
      "pull_request_review_id": 1950025980,
      "id": 1532774651,
      "node_id": "PRRC_kwDOABII585bXEj7",
      "diff_hunk": "@@ -942,6 +942,7 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n \n     //! Returns all unique ScriptPubKeyMans in m_internal_spk_managers and m_external_spk_managers\n     std::set<ScriptPubKeyMan*> GetActiveScriptPubKeyMans() const;\n+    bool IsActiveScriptPubKeyMan(const ScriptPubKeyMan& spkm) const;",
      "path": "src/wallet/wallet.h",
      "position": 4,
      "original_position": 4,
      "commit_id": "746b6d88395607abbd3c13bbdcdd4ca83e9bc9e4",
      "original_commit_id": "66632e5c24c1b59afef1e89b562fbd0117ab6ef5",
      "in_reply_to_id": 1532182363,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It's probably not a great idea to be passing around raw pointers and we should be moving away from doing that.",
      "created_at": "2024-03-20T20:01:18Z",
      "updated_at": "2024-03-20T20:01:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1532774651",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1532774651"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 945,
      "original_line": 945,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1532780330",
      "pull_request_review_id": 1950035237,
      "id": 1532780330,
      "node_id": "PRRC_kwDOABII585bXF8q",
      "diff_hunk": "@@ -817,6 +817,113 @@ static RPCHelpMan migratewallet()\n     };\n }\n \n+RPCHelpMan gethdkeys()\n+{\n+    return RPCHelpMan{\n+        \"gethdkeys\",\n+        \"\\nList all BIP 32 HD keys in the wallet and which descriptors use them.\\n\",\n+        {\n+            {\"options\", RPCArg::Type::OBJ_NAMED_PARAMS, RPCArg::Optional::OMITTED, \"\", {\n+                {\"active_only\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show the keys for only active descriptors\"},\n+                {\"private\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show private keys\"}\n+            }},\n+        },\n+        RPCResult{RPCResult::Type::ARR, \"\", \"\", {\n+            {\n+                {RPCResult::Type::OBJ, \"\", \"\", {\n+                    {RPCResult::Type::STR, \"xpub\", \"The extended public key\"},\n+                    {RPCResult::Type::BOOL, \"has_private\", \"Whether the wallet has the private key for this xpub\"},\n+                    {RPCResult::Type::STR, \"xprv\", /*optional=*/true, \"The extended private key if \\\"private\\\" is true\"},\n+                    {RPCResult::Type::ARR, \"descriptors\", \"Array of descriptor objects that use this HD key\",\n+                    {\n+                        {RPCResult::Type::OBJ, \"\", \"\", {\n+                            {RPCResult::Type::STR, \"desc\", \"Descriptor string representation\"},\n+                            {RPCResult::Type::BOOL, \"active\", \"Whether this descriptor is currently used to generate new addresses\"},\n+                        }},\n+                    }},\n+                }},\n+            }\n+        }},\n+        RPCExamples{\n+            HelpExampleCli(\"gethdkeys\", \"\") + HelpExampleRpc(\"gethdkeys\", \"\")\n+            + HelpExampleCliNamed(\"gethdkeys\", {{\"active_only\", \"true\"}, {\"private\", \"true\"}}) + HelpExampleRpcNamed(\"gethdkeys\", {{\"active_only\", \"true\"}, {\"private\", \"true\"}})\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            const std::shared_ptr<const CWallet> wallet = GetWalletForJSONRPCRequest(request);\n+            if (!wallet) return UniValue::VNULL;\n+\n+            if (!wallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"gethdkeys is not available for non-descriptor wallets\");\n+            }\n+\n+            LOCK(wallet->cs_wallet);\n+\n+            UniValue options{request.params[0].isNull() ? UniValue::VOBJ : request.params[0]};\n+            const bool active_only{options.exists(\"active_only\") ? options[\"active_only\"].get_bool() : false};\n+            const bool priv{options.exists(\"private\") ? options[\"private\"].get_bool() : false};\n+            if (priv) {\n+                EnsureWalletIsUnlocked(*wallet);\n+            }\n+\n+\n+            std::set<ScriptPubKeyMan*> spkms;\n+            if (active_only) {\n+                spkms = wallet->GetActiveScriptPubKeyMans();\n+            } else {\n+                spkms = wallet->GetAllScriptPubKeyMans();\n+            }\n+\n+            std::map<CExtPubKey, std::set<std::tuple<std::string, bool, bool>>> wallet_xpubs;\n+            std::map<CExtPubKey, CExtKey> wallet_xprvs;\n+            for (auto* spkm : spkms) {\n+                auto* desc_spkm{dynamic_cast<DescriptorScriptPubKeyMan*>(spkm)};\n+                CHECK_NONFATAL(desc_spkm);\n+                LOCK(desc_spkm->cs_desc_man);\n+                WalletDescriptor w_desc = desc_spkm->GetWalletDescriptor();\n+\n+                // Retrieve the pubkeys from the descriptor\n+                std::set<CPubKey> desc_pubkeys;\n+                std::set<CExtPubKey> desc_xpubs;\n+                w_desc.descriptor->GetPubKeys(desc_pubkeys, desc_xpubs);\n+                for (const CExtPubKey& xpub : desc_xpubs) {\n+                    std::string desc_str;\n+                    desc_spkm->GetDescriptorString(desc_str, false);\n+                    wallet_xpubs[xpub].emplace(desc_str, wallet->IsActiveScriptPubKeyMan(*spkm), desc_spkm->HasPrivKey(xpub.pubkey.GetID()));\n+                    if (std::optional<CKey> key = priv ? desc_spkm->GetKey(xpub.pubkey.GetID()) : std::nullopt) {\n+                        wallet_xprvs[xpub] = CExtKey(xpub, *key);\n+                    }\n+                }\n+            }\n+\n+            UniValue response(UniValue::VARR);\n+            for (const auto& [xpub, descs] : wallet_xpubs) {\n+                bool has_xprv = false;\n+                UniValue descriptors(UniValue::VARR);\n+                for (const auto& [desc, active, has_priv] : descs) {\n+                    UniValue d(UniValue::VOBJ);\n+                    d.pushKV(\"desc\", desc);",
      "path": "src/wallet/rpc/wallet.cpp",
      "position": 90,
      "original_position": 89,
      "commit_id": "746b6d88395607abbd3c13bbdcdd4ca83e9bc9e4",
      "original_commit_id": "21d0bc38ab78d21d4a3fb590935790e949b554a3",
      "in_reply_to_id": 1532157313,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't think it's meaningfully useful to explicitly sort them, and we don't do that anywhere else. Also, `std::set` does sorting itself, so I don't think this would even change the output.",
      "created_at": "2024-03-20T20:05:10Z",
      "updated_at": "2024-03-20T20:05:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1532780330",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1532780330"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
        }
      },
      "start_line": 900,
      "original_start_line": 899,
      "start_side": "RIGHT",
      "line": 906,
      "original_line": 906,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1532781127",
      "pull_request_review_id": 1950036588,
      "id": 1532781127,
      "node_id": "PRRC_kwDOABII585bXGJH",
      "diff_hunk": "@@ -4486,4 +4486,25 @@ void CWallet::TopUpCallback(const std::set<CScript>& spks, ScriptPubKeyMan* spkm\n     // Update scriptPubKey cache\n     CacheNewScriptPubKeys(spks, spkm);\n }\n+\n+std::set<CExtPubKey> CWallet::GetActiveHDPubKeys() const",
      "path": "src/wallet/wallet.cpp",
      "position": 71,
      "original_position": 5,
      "commit_id": "746b6d88395607abbd3c13bbdcdd4ca83e9bc9e4",
      "original_commit_id": "5f3e3cd13137a91c74fb87f0520005d065a83e46",
      "in_reply_to_id": 1532200095,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`gethdkeys` can get pubkeys for inactive descriptors, so it can't use this function.",
      "created_at": "2024-03-20T20:06:00Z",
      "updated_at": "2024-03-20T20:06:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1532781127",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1532781127"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 4490,
      "original_line": 4490,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1532794982",
      "pull_request_review_id": 1950057309,
      "id": 1532794982,
      "node_id": "PRRC_kwDOABII585bXJhm",
      "diff_hunk": "@@ -817,6 +817,113 @@ static RPCHelpMan migratewallet()\n     };\n }\n \n+RPCHelpMan gethdkeys()\n+{\n+    return RPCHelpMan{\n+        \"gethdkeys\",\n+        \"\\nList all BIP 32 HD keys in the wallet and which descriptors use them.\\n\",\n+        {\n+            {\"options\", RPCArg::Type::OBJ_NAMED_PARAMS, RPCArg::Optional::OMITTED, \"\", {\n+                {\"active_only\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show the keys for only active descriptors\"},\n+                {\"private\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show private keys\"}\n+            }},\n+        },\n+        RPCResult{RPCResult::Type::ARR, \"\", \"\", {\n+            {\n+                {RPCResult::Type::OBJ, \"\", \"\", {\n+                    {RPCResult::Type::STR, \"xpub\", \"The extended public key\"},\n+                    {RPCResult::Type::BOOL, \"has_private\", \"Whether the wallet has the private key for this xpub\"},\n+                    {RPCResult::Type::STR, \"xprv\", /*optional=*/true, \"The extended private key if \\\"private\\\" is true\"},\n+                    {RPCResult::Type::ARR, \"descriptors\", \"Array of descriptor objects that use this HD key\",\n+                    {\n+                        {RPCResult::Type::OBJ, \"\", \"\", {\n+                            {RPCResult::Type::STR, \"desc\", \"Descriptor string representation\"},\n+                            {RPCResult::Type::BOOL, \"active\", \"Whether this descriptor is currently used to generate new addresses\"},\n+                        }},\n+                    }},\n+                }},\n+            }\n+        }},\n+        RPCExamples{\n+            HelpExampleCli(\"gethdkeys\", \"\") + HelpExampleRpc(\"gethdkeys\", \"\")\n+            + HelpExampleCliNamed(\"gethdkeys\", {{\"active_only\", \"true\"}, {\"private\", \"true\"}}) + HelpExampleRpcNamed(\"gethdkeys\", {{\"active_only\", \"true\"}, {\"private\", \"true\"}})\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            const std::shared_ptr<const CWallet> wallet = GetWalletForJSONRPCRequest(request);\n+            if (!wallet) return UniValue::VNULL;\n+\n+            if (!wallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"gethdkeys is not available for non-descriptor wallets\");\n+            }\n+\n+            LOCK(wallet->cs_wallet);\n+\n+            UniValue options{request.params[0].isNull() ? UniValue::VOBJ : request.params[0]};\n+            const bool active_only{options.exists(\"active_only\") ? options[\"active_only\"].get_bool() : false};\n+            const bool priv{options.exists(\"private\") ? options[\"private\"].get_bool() : false};\n+            if (priv) {\n+                EnsureWalletIsUnlocked(*wallet);\n+            }\n+\n+\n+            std::set<ScriptPubKeyMan*> spkms;\n+            if (active_only) {\n+                spkms = wallet->GetActiveScriptPubKeyMans();\n+            } else {\n+                spkms = wallet->GetAllScriptPubKeyMans();\n+            }\n+\n+            std::map<CExtPubKey, std::set<std::tuple<std::string, bool, bool>>> wallet_xpubs;\n+            std::map<CExtPubKey, CExtKey> wallet_xprvs;\n+            for (auto* spkm : spkms) {\n+                auto* desc_spkm{dynamic_cast<DescriptorScriptPubKeyMan*>(spkm)};\n+                CHECK_NONFATAL(desc_spkm);\n+                LOCK(desc_spkm->cs_desc_man);\n+                WalletDescriptor w_desc = desc_spkm->GetWalletDescriptor();\n+\n+                // Retrieve the pubkeys from the descriptor\n+                std::set<CPubKey> desc_pubkeys;\n+                std::set<CExtPubKey> desc_xpubs;\n+                w_desc.descriptor->GetPubKeys(desc_pubkeys, desc_xpubs);\n+                for (const CExtPubKey& xpub : desc_xpubs) {\n+                    std::string desc_str;\n+                    desc_spkm->GetDescriptorString(desc_str, false);",
      "path": "src/wallet/rpc/wallet.cpp",
      "position": null,
      "original_position": 75,
      "commit_id": "746b6d88395607abbd3c13bbdcdd4ca83e9bc9e4",
      "original_commit_id": "21d0bc38ab78d21d4a3fb590935790e949b554a3",
      "in_reply_to_id": 1532132759,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It shouldn't fail so I've made added a `CHECK_NONFATAL`. Also added `[[nodiscard]]` to `GetDescriptorString`.",
      "created_at": "2024-03-20T20:16:19Z",
      "updated_at": "2024-03-20T20:16:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1532794982",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1532794982"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
        }
      },
      "start_line": null,
      "original_start_line": 890,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 891,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1532796693",
      "pull_request_review_id": 1950060403,
      "id": 1532796693,
      "node_id": "PRRC_kwDOABII585bXJ8V",
      "diff_hunk": "@@ -817,6 +817,113 @@ static RPCHelpMan migratewallet()\n     };\n }\n \n+RPCHelpMan gethdkeys()\n+{\n+    return RPCHelpMan{\n+        \"gethdkeys\",\n+        \"\\nList all BIP 32 HD keys in the wallet and which descriptors use them.\\n\",\n+        {\n+            {\"options\", RPCArg::Type::OBJ_NAMED_PARAMS, RPCArg::Optional::OMITTED, \"\", {\n+                {\"active_only\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show the keys for only active descriptors\"},\n+                {\"private\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show private keys\"}\n+            }},\n+        },\n+        RPCResult{RPCResult::Type::ARR, \"\", \"\", {\n+            {\n+                {RPCResult::Type::OBJ, \"\", \"\", {\n+                    {RPCResult::Type::STR, \"xpub\", \"The extended public key\"},\n+                    {RPCResult::Type::BOOL, \"has_private\", \"Whether the wallet has the private key for this xpub\"},\n+                    {RPCResult::Type::STR, \"xprv\", /*optional=*/true, \"The extended private key if \\\"private\\\" is true\"},\n+                    {RPCResult::Type::ARR, \"descriptors\", \"Array of descriptor objects that use this HD key\",\n+                    {\n+                        {RPCResult::Type::OBJ, \"\", \"\", {\n+                            {RPCResult::Type::STR, \"desc\", \"Descriptor string representation\"},\n+                            {RPCResult::Type::BOOL, \"active\", \"Whether this descriptor is currently used to generate new addresses\"},\n+                        }},\n+                    }},\n+                }},\n+            }\n+        }},\n+        RPCExamples{\n+            HelpExampleCli(\"gethdkeys\", \"\") + HelpExampleRpc(\"gethdkeys\", \"\")\n+            + HelpExampleCliNamed(\"gethdkeys\", {{\"active_only\", \"true\"}, {\"private\", \"true\"}}) + HelpExampleRpcNamed(\"gethdkeys\", {{\"active_only\", \"true\"}, {\"private\", \"true\"}})\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            const std::shared_ptr<const CWallet> wallet = GetWalletForJSONRPCRequest(request);\n+            if (!wallet) return UniValue::VNULL;\n+\n+            if (!wallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"gethdkeys is not available for non-descriptor wallets\");\n+            }\n+\n+            LOCK(wallet->cs_wallet);\n+\n+            UniValue options{request.params[0].isNull() ? UniValue::VOBJ : request.params[0]};\n+            const bool active_only{options.exists(\"active_only\") ? options[\"active_only\"].get_bool() : false};\n+            const bool priv{options.exists(\"private\") ? options[\"private\"].get_bool() : false};\n+            if (priv) {\n+                EnsureWalletIsUnlocked(*wallet);\n+            }\n+\n+\n+            std::set<ScriptPubKeyMan*> spkms;\n+            if (active_only) {\n+                spkms = wallet->GetActiveScriptPubKeyMans();\n+            } else {\n+                spkms = wallet->GetAllScriptPubKeyMans();\n+            }\n+\n+            std::map<CExtPubKey, std::set<std::tuple<std::string, bool, bool>>> wallet_xpubs;\n+            std::map<CExtPubKey, CExtKey> wallet_xprvs;\n+            for (auto* spkm : spkms) {\n+                auto* desc_spkm{dynamic_cast<DescriptorScriptPubKeyMan*>(spkm)};\n+                CHECK_NONFATAL(desc_spkm);\n+                LOCK(desc_spkm->cs_desc_man);\n+                WalletDescriptor w_desc = desc_spkm->GetWalletDescriptor();\n+\n+                // Retrieve the pubkeys from the descriptor\n+                std::set<CPubKey> desc_pubkeys;\n+                std::set<CExtPubKey> desc_xpubs;\n+                w_desc.descriptor->GetPubKeys(desc_pubkeys, desc_xpubs);\n+                for (const CExtPubKey& xpub : desc_xpubs) {\n+                    std::string desc_str;\n+                    desc_spkm->GetDescriptorString(desc_str, false);\n+                    wallet_xpubs[xpub].emplace(desc_str, wallet->IsActiveScriptPubKeyMan(*spkm), desc_spkm->HasPrivKey(xpub.pubkey.GetID()));\n+                    if (std::optional<CKey> key = priv ? desc_spkm->GetKey(xpub.pubkey.GetID()) : std::nullopt) {\n+                        wallet_xprvs[xpub] = CExtKey(xpub, *key);\n+                    }\n+                }\n+            }\n+\n+            UniValue response(UniValue::VARR);\n+            for (const auto& [xpub, descs] : wallet_xpubs) {\n+                bool has_xprv = false;\n+                UniValue descriptors(UniValue::VARR);\n+                for (const auto& [desc, active, has_priv] : descs) {\n+                    UniValue d(UniValue::VOBJ);\n+                    d.pushKV(\"desc\", desc);",
      "path": "src/wallet/rpc/wallet.cpp",
      "position": 90,
      "original_position": 89,
      "commit_id": "746b6d88395607abbd3c13bbdcdd4ca83e9bc9e4",
      "original_commit_id": "21d0bc38ab78d21d4a3fb590935790e949b554a3",
      "in_reply_to_id": 1532157313,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> I don't think it's meaningfully useful to explicitly sort them, and we don't do that anywhere else.\r\n\r\nWe sort them in `listdescriptors`: [src/wallet/rpc/backup.cpp#L1827](https://github.com/bitcoin/bitcoin/blob/b50554babdddf452acaa51bac757736766c70e81/src/wallet/rpc/backup.cpp#L1827).\r\n\r\n> Also, `std::set` does sorting itself, so I don't think this would even change the output.\r\n\r\n`std::set` sorts based on the top element, the std::tuple in this case. Not based on the descriptor string.\r\n\r\n-------\r\n\r\nYet, this was just an UX nit. Either way is fine for me.",
      "created_at": "2024-03-20T20:17:36Z",
      "updated_at": "2024-03-20T20:17:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1532796693",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1532796693"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
        }
      },
      "start_line": 900,
      "original_start_line": 899,
      "start_side": "RIGHT",
      "line": 906,
      "original_line": 906,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1532803037",
      "pull_request_review_id": 1950071823,
      "id": 1532803037,
      "node_id": "PRRC_kwDOABII585bXLfd",
      "diff_hunk": "@@ -817,6 +817,113 @@ static RPCHelpMan migratewallet()\n     };\n }\n \n+RPCHelpMan gethdkeys()\n+{\n+    return RPCHelpMan{\n+        \"gethdkeys\",\n+        \"\\nList all BIP 32 HD keys in the wallet and which descriptors use them.\\n\",\n+        {\n+            {\"options\", RPCArg::Type::OBJ_NAMED_PARAMS, RPCArg::Optional::OMITTED, \"\", {\n+                {\"active_only\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show the keys for only active descriptors\"},\n+                {\"private\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show private keys\"}\n+            }},\n+        },\n+        RPCResult{RPCResult::Type::ARR, \"\", \"\", {\n+            {\n+                {RPCResult::Type::OBJ, \"\", \"\", {\n+                    {RPCResult::Type::STR, \"xpub\", \"The extended public key\"},\n+                    {RPCResult::Type::BOOL, \"has_private\", \"Whether the wallet has the private key for this xpub\"},\n+                    {RPCResult::Type::STR, \"xprv\", /*optional=*/true, \"The extended private key if \\\"private\\\" is true\"},\n+                    {RPCResult::Type::ARR, \"descriptors\", \"Array of descriptor objects that use this HD key\",\n+                    {\n+                        {RPCResult::Type::OBJ, \"\", \"\", {\n+                            {RPCResult::Type::STR, \"desc\", \"Descriptor string representation\"},\n+                            {RPCResult::Type::BOOL, \"active\", \"Whether this descriptor is currently used to generate new addresses\"},\n+                        }},\n+                    }},\n+                }},\n+            }\n+        }},\n+        RPCExamples{\n+            HelpExampleCli(\"gethdkeys\", \"\") + HelpExampleRpc(\"gethdkeys\", \"\")\n+            + HelpExampleCliNamed(\"gethdkeys\", {{\"active_only\", \"true\"}, {\"private\", \"true\"}}) + HelpExampleRpcNamed(\"gethdkeys\", {{\"active_only\", \"true\"}, {\"private\", \"true\"}})\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            const std::shared_ptr<const CWallet> wallet = GetWalletForJSONRPCRequest(request);\n+            if (!wallet) return UniValue::VNULL;\n+\n+            if (!wallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"gethdkeys is not available for non-descriptor wallets\");\n+            }\n+\n+            LOCK(wallet->cs_wallet);\n+\n+            UniValue options{request.params[0].isNull() ? UniValue::VOBJ : request.params[0]};\n+            const bool active_only{options.exists(\"active_only\") ? options[\"active_only\"].get_bool() : false};\n+            const bool priv{options.exists(\"private\") ? options[\"private\"].get_bool() : false};\n+            if (priv) {\n+                EnsureWalletIsUnlocked(*wallet);\n+            }\n+\n+\n+            std::set<ScriptPubKeyMan*> spkms;\n+            if (active_only) {\n+                spkms = wallet->GetActiveScriptPubKeyMans();\n+            } else {\n+                spkms = wallet->GetAllScriptPubKeyMans();\n+            }\n+\n+            std::map<CExtPubKey, std::set<std::tuple<std::string, bool, bool>>> wallet_xpubs;\n+            std::map<CExtPubKey, CExtKey> wallet_xprvs;\n+            for (auto* spkm : spkms) {\n+                auto* desc_spkm{dynamic_cast<DescriptorScriptPubKeyMan*>(spkm)};\n+                CHECK_NONFATAL(desc_spkm);\n+                LOCK(desc_spkm->cs_desc_man);\n+                WalletDescriptor w_desc = desc_spkm->GetWalletDescriptor();\n+\n+                // Retrieve the pubkeys from the descriptor\n+                std::set<CPubKey> desc_pubkeys;\n+                std::set<CExtPubKey> desc_xpubs;\n+                w_desc.descriptor->GetPubKeys(desc_pubkeys, desc_xpubs);\n+                for (const CExtPubKey& xpub : desc_xpubs) {\n+                    std::string desc_str;\n+                    desc_spkm->GetDescriptorString(desc_str, false);\n+                    wallet_xpubs[xpub].emplace(desc_str, wallet->IsActiveScriptPubKeyMan(*spkm), desc_spkm->HasPrivKey(xpub.pubkey.GetID()));\n+                    if (std::optional<CKey> key = priv ? desc_spkm->GetKey(xpub.pubkey.GetID()) : std::nullopt) {\n+                        wallet_xprvs[xpub] = CExtKey(xpub, *key);\n+                    }\n+                }\n+            }\n+\n+            UniValue response(UniValue::VARR);\n+            for (const auto& [xpub, descs] : wallet_xpubs) {\n+                bool has_xprv = false;\n+                UniValue descriptors(UniValue::VARR);\n+                for (const auto& [desc, active, has_priv] : descs) {\n+                    UniValue d(UniValue::VOBJ);\n+                    d.pushKV(\"desc\", desc);",
      "path": "src/wallet/rpc/wallet.cpp",
      "position": 90,
      "original_position": 89,
      "commit_id": "746b6d88395607abbd3c13bbdcdd4ca83e9bc9e4",
      "original_commit_id": "21d0bc38ab78d21d4a3fb590935790e949b554a3",
      "in_reply_to_id": 1532157313,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Sorting on `std::tuple` will sort lexicographically on the items in the tuple. Since the descriptor string is the first item in the tuple, and are unique, it should be sorted by the descriptor strings.",
      "created_at": "2024-03-20T20:23:45Z",
      "updated_at": "2024-03-20T20:23:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1532803037",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1532803037"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
        }
      },
      "start_line": 900,
      "original_start_line": 899,
      "start_side": "RIGHT",
      "line": 906,
      "original_line": 906,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1532885914",
      "pull_request_review_id": 1950206758,
      "id": 1532885914,
      "node_id": "PRRC_kwDOABII585bXfua",
      "diff_hunk": "@@ -817,6 +817,113 @@ static RPCHelpMan migratewallet()\n     };\n }\n \n+RPCHelpMan gethdkeys()\n+{\n+    return RPCHelpMan{\n+        \"gethdkeys\",\n+        \"\\nList all BIP 32 HD keys in the wallet and which descriptors use them.\\n\",\n+        {\n+            {\"options\", RPCArg::Type::OBJ_NAMED_PARAMS, RPCArg::Optional::OMITTED, \"\", {\n+                {\"active_only\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show the keys for only active descriptors\"},\n+                {\"private\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show private keys\"}\n+            }},\n+        },\n+        RPCResult{RPCResult::Type::ARR, \"\", \"\", {\n+            {\n+                {RPCResult::Type::OBJ, \"\", \"\", {\n+                    {RPCResult::Type::STR, \"xpub\", \"The extended public key\"},\n+                    {RPCResult::Type::BOOL, \"has_private\", \"Whether the wallet has the private key for this xpub\"},\n+                    {RPCResult::Type::STR, \"xprv\", /*optional=*/true, \"The extended private key if \\\"private\\\" is true\"},\n+                    {RPCResult::Type::ARR, \"descriptors\", \"Array of descriptor objects that use this HD key\",\n+                    {\n+                        {RPCResult::Type::OBJ, \"\", \"\", {\n+                            {RPCResult::Type::STR, \"desc\", \"Descriptor string representation\"},\n+                            {RPCResult::Type::BOOL, \"active\", \"Whether this descriptor is currently used to generate new addresses\"},\n+                        }},\n+                    }},\n+                }},\n+            }\n+        }},\n+        RPCExamples{\n+            HelpExampleCli(\"gethdkeys\", \"\") + HelpExampleRpc(\"gethdkeys\", \"\")\n+            + HelpExampleCliNamed(\"gethdkeys\", {{\"active_only\", \"true\"}, {\"private\", \"true\"}}) + HelpExampleRpcNamed(\"gethdkeys\", {{\"active_only\", \"true\"}, {\"private\", \"true\"}})\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            const std::shared_ptr<const CWallet> wallet = GetWalletForJSONRPCRequest(request);\n+            if (!wallet) return UniValue::VNULL;\n+\n+            if (!wallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"gethdkeys is not available for non-descriptor wallets\");\n+            }\n+\n+            LOCK(wallet->cs_wallet);\n+\n+            UniValue options{request.params[0].isNull() ? UniValue::VOBJ : request.params[0]};\n+            const bool active_only{options.exists(\"active_only\") ? options[\"active_only\"].get_bool() : false};\n+            const bool priv{options.exists(\"private\") ? options[\"private\"].get_bool() : false};\n+            if (priv) {\n+                EnsureWalletIsUnlocked(*wallet);\n+            }\n+\n+\n+            std::set<ScriptPubKeyMan*> spkms;\n+            if (active_only) {\n+                spkms = wallet->GetActiveScriptPubKeyMans();\n+            } else {\n+                spkms = wallet->GetAllScriptPubKeyMans();\n+            }\n+\n+            std::map<CExtPubKey, std::set<std::tuple<std::string, bool, bool>>> wallet_xpubs;\n+            std::map<CExtPubKey, CExtKey> wallet_xprvs;\n+            for (auto* spkm : spkms) {\n+                auto* desc_spkm{dynamic_cast<DescriptorScriptPubKeyMan*>(spkm)};\n+                CHECK_NONFATAL(desc_spkm);\n+                LOCK(desc_spkm->cs_desc_man);\n+                WalletDescriptor w_desc = desc_spkm->GetWalletDescriptor();\n+\n+                // Retrieve the pubkeys from the descriptor\n+                std::set<CPubKey> desc_pubkeys;\n+                std::set<CExtPubKey> desc_xpubs;\n+                w_desc.descriptor->GetPubKeys(desc_pubkeys, desc_xpubs);\n+                for (const CExtPubKey& xpub : desc_xpubs) {\n+                    std::string desc_str;\n+                    desc_spkm->GetDescriptorString(desc_str, false);\n+                    wallet_xpubs[xpub].emplace(desc_str, wallet->IsActiveScriptPubKeyMan(*spkm), desc_spkm->HasPrivKey(xpub.pubkey.GetID()));\n+                    if (std::optional<CKey> key = priv ? desc_spkm->GetKey(xpub.pubkey.GetID()) : std::nullopt) {\n+                        wallet_xprvs[xpub] = CExtKey(xpub, *key);\n+                    }\n+                }\n+            }\n+\n+            UniValue response(UniValue::VARR);\n+            for (const auto& [xpub, descs] : wallet_xpubs) {\n+                bool has_xprv = false;\n+                UniValue descriptors(UniValue::VARR);\n+                for (const auto& [desc, active, has_priv] : descs) {\n+                    UniValue d(UniValue::VOBJ);\n+                    d.pushKV(\"desc\", desc);",
      "path": "src/wallet/rpc/wallet.cpp",
      "position": 90,
      "original_position": 89,
      "commit_id": "746b6d88395607abbd3c13bbdcdd4ca83e9bc9e4",
      "original_commit_id": "21d0bc38ab78d21d4a3fb590935790e949b554a3",
      "in_reply_to_id": 1532157313,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> Sorting on `std::tuple` will sort lexicographically on the items in the tuple. Since the descriptor string is the first item in the tuple, and are unique, it should be sorted by the descriptor strings.\r\n\r\nHmm, I was sure I saw a different ordering this morning. But 🤷🏼 ..  ",
      "created_at": "2024-03-20T21:17:46Z",
      "updated_at": "2024-03-20T21:17:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1532885914",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1532885914"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
        }
      },
      "start_line": 900,
      "original_start_line": 899,
      "start_side": "RIGHT",
      "line": 906,
      "original_line": 906,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1537372661",
      "pull_request_review_id": 1957368070,
      "id": 1537372661,
      "node_id": "PRRC_kwDOABII585bonH1",
      "diff_hunk": "@@ -817,6 +817,113 @@ static RPCHelpMan migratewallet()\n     };\n }\n \n+RPCHelpMan gethdkeys()\n+{\n+    return RPCHelpMan{\n+        \"gethdkeys\",\n+        \"\\nList all BIP 32 HD keys in the wallet and which descriptors use them.\\n\",\n+        {\n+            {\"options\", RPCArg::Type::OBJ_NAMED_PARAMS, RPCArg::Optional::OMITTED, \"\", {\n+                {\"active_only\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show the keys for only active descriptors\"},\n+                {\"private\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Show private keys\"}\n+            }},\n+        },\n+        RPCResult{RPCResult::Type::ARR, \"\", \"\", {\n+            {\n+                {RPCResult::Type::OBJ, \"\", \"\", {\n+                    {RPCResult::Type::STR, \"xpub\", \"The extended public key\"},\n+                    {RPCResult::Type::BOOL, \"has_private\", \"Whether the wallet has the private key for this xpub\"},\n+                    {RPCResult::Type::STR, \"xprv\", /*optional=*/true, \"The extended private key if \\\"private\\\" is true\"},\n+                    {RPCResult::Type::ARR, \"descriptors\", \"Array of descriptor objects that use this HD key\",\n+                    {\n+                        {RPCResult::Type::OBJ, \"\", \"\", {\n+                            {RPCResult::Type::STR, \"desc\", \"Descriptor string representation\"},\n+                            {RPCResult::Type::BOOL, \"active\", \"Whether this descriptor is currently used to generate new addresses\"},\n+                        }},\n+                    }},\n+                }},\n+            }\n+        }},\n+        RPCExamples{\n+            HelpExampleCli(\"gethdkeys\", \"\") + HelpExampleRpc(\"gethdkeys\", \"\")\n+            + HelpExampleCliNamed(\"gethdkeys\", {{\"active_only\", \"true\"}, {\"private\", \"true\"}}) + HelpExampleRpcNamed(\"gethdkeys\", {{\"active_only\", \"true\"}, {\"private\", \"true\"}})\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            const std::shared_ptr<const CWallet> wallet = GetWalletForJSONRPCRequest(request);\n+            if (!wallet) return UniValue::VNULL;\n+\n+            if (!wallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"gethdkeys is not available for non-descriptor wallets\");\n+            }\n+\n+            LOCK(wallet->cs_wallet);\n+\n+            UniValue options{request.params[0].isNull() ? UniValue::VOBJ : request.params[0]};\n+            const bool active_only{options.exists(\"active_only\") ? options[\"active_only\"].get_bool() : false};\n+            const bool priv{options.exists(\"private\") ? options[\"private\"].get_bool() : false};\n+            if (priv) {\n+                EnsureWalletIsUnlocked(*wallet);\n+            }\n+\n+\n+            std::set<ScriptPubKeyMan*> spkms;\n+            if (active_only) {\n+                spkms = wallet->GetActiveScriptPubKeyMans();\n+            } else {\n+                spkms = wallet->GetAllScriptPubKeyMans();\n+            }\n+\n+            std::map<CExtPubKey, std::set<std::tuple<std::string, bool, bool>>> wallet_xpubs;\n+            std::map<CExtPubKey, CExtKey> wallet_xprvs;\n+            for (auto* spkm : spkms) {\n+                auto* desc_spkm{dynamic_cast<DescriptorScriptPubKeyMan*>(spkm)};\n+                CHECK_NONFATAL(desc_spkm);\n+                LOCK(desc_spkm->cs_desc_man);\n+                WalletDescriptor w_desc = desc_spkm->GetWalletDescriptor();\n+\n+                // Retrieve the pubkeys from the descriptor\n+                std::set<CPubKey> desc_pubkeys;\n+                std::set<CExtPubKey> desc_xpubs;\n+                w_desc.descriptor->GetPubKeys(desc_pubkeys, desc_xpubs);\n+                for (const CExtPubKey& xpub : desc_xpubs) {\n+                    std::string desc_str;\n+                    desc_spkm->GetDescriptorString(desc_str, false);\n+                    wallet_xpubs[xpub].emplace(desc_str, wallet->IsActiveScriptPubKeyMan(*spkm), desc_spkm->HasPrivKey(xpub.pubkey.GetID()));\n+                    if (std::optional<CKey> key = priv ? desc_spkm->GetKey(xpub.pubkey.GetID()) : std::nullopt) {\n+                        wallet_xprvs[xpub] = CExtKey(xpub, *key);\n+                    }\n+                }\n+            }\n+\n+            UniValue response(UniValue::VARR);\n+            for (const auto& [xpub, descs] : wallet_xpubs) {\n+                bool has_xprv = false;\n+                UniValue descriptors(UniValue::VARR);\n+                for (const auto& [desc, active, has_priv] : descs) {\n+                    UniValue d(UniValue::VOBJ);\n+                    d.pushKV(\"desc\", desc);",
      "path": "src/wallet/rpc/wallet.cpp",
      "position": 90,
      "original_position": 89,
      "commit_id": "746b6d88395607abbd3c13bbdcdd4ca83e9bc9e4",
      "original_commit_id": "21d0bc38ab78d21d4a3fb590935790e949b554a3",
      "in_reply_to_id": 1532157313,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Just tried and they're neatly grouped by type. `tr()` is listed before `wpkh` which takes getting used to since we introduced `tr()` later, but such is the alphabet.",
      "created_at": "2024-03-25T10:33:12Z",
      "updated_at": "2024-03-25T10:33:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29130#discussion_r1537372661",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1537372661"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29130"
        }
      },
      "start_line": 900,
      "original_start_line": 899,
      "start_side": "RIGHT",
      "line": 906,
      "original_line": 906,
      "side": "RIGHT"
    }
  ]
}