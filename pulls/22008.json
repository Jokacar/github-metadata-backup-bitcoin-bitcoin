{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22008",
    "id": 649433573,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NjQ5NDMzNTcz",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22008",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/22008.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/22008.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22008",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22008/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22008/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22008/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/96c2c9520e80ee4fed92f0e1ab859d59fcbdb110",
    "number": 22008,
    "state": "closed",
    "locked": true,
    "maintainer_can_modify": false,
    "title": "wallet: Cleanup and refactor CreateTransactionInternal",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "#17331 did some refactors and cleanup of `CreateTransactionInternal` to make it easier to understand, however it is still a bit convoluted even though it doesn't have to be. This PR does additional cleanup and refactoring to `CreateTransactionInternal` so that it is easier to understand. Some unnecessary code was removed, some variables moved around to where they matter, and several indents removed.",
    "labels": [
      {
        "id": 149424,
        "node_id": "MDU6TGFiZWwxNDk0MjQ=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
        "name": "Wallet",
        "color": "08a781",
        "default": false
      }
    ],
    "active_lock_reason": "resolved",
    "created_at": "2021-05-20T20:35:58Z",
    "updated_at": "2022-08-18T18:24:47Z",
    "closed_at": "2021-06-09T10:37:59Z",
    "mergeable_state": "unknown",
    "merged_at": "2021-06-09T10:37:59Z",
    "merge_commit_sha": "58f8b156ed7b50f60c7d575fbd9b759f9fe9494b",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "head": {
      "label": "achow101:refactor-createtx",
      "ref": "refactor-createtx",
      "sha": "96c2c9520e80ee4fed92f0e1ab859d59fcbdb110",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 45006379,
        "node_id": "MDEwOlJlcG9zaXRvcnk0NTAwNjM3OQ==",
        "name": "bitcoin",
        "full_name": "achow101/bitcoin",
        "owner": {
          "login": "achow101",
          "id": 3782274,
          "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
          "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/achow101",
          "html_url": "https://github.com/achow101",
          "followers_url": "https://api.github.com/users/achow101/followers",
          "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
          "organizations_url": "https://api.github.com/users/achow101/orgs",
          "repos_url": "https://api.github.com/users/achow101/repos",
          "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/achow101/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/achow101/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/achow101/bitcoin",
        "archive_url": "https://api.github.com/repos/achow101/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/achow101/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/achow101/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/achow101/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/achow101/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/achow101/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/achow101/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/achow101/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/achow101/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/achow101/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/achow101/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/achow101/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/achow101/bitcoin/events",
        "forks_url": "https://api.github.com/repos/achow101/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/achow101/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/achow101/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/achow101/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/achow101/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/achow101/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/achow101/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/achow101/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/achow101/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/achow101/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/achow101/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/achow101/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/achow101/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/achow101/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/achow101/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/achow101/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:achow101/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/achow101/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/achow101/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/achow101/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/achow101/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/achow101/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/achow101/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/achow101/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/achow101/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/achow101/bitcoin/hooks",
        "svn_url": "https://github.com/achow101/bitcoin",
        "homepage": "https://bitcoin.org/en/download",
        "language": "C++",
        "forks_count": 9,
        "stargazers_count": 35,
        "watchers_count": 35,
        "size": 243677,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-08-02T20:20:33Z",
        "created_at": "2015-10-27T00:20:28Z",
        "updated_at": "2023-07-28T14:25:30Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "346e52afd6d5e317c96fc506bb54cde13e87c8b2",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 35476,
        "stargazers_count": 70608,
        "watchers_count": 70608,
        "size": 236222,
        "default_branch": "master",
        "open_issues_count": 672,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-08-02T20:20:41Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-08-02T18:21:18Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22008"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 282,
    "deletions": 291,
    "changed_files": 4,
    "commits": 9,
    "review_comments": 16,
    "comments": 11
  },
  "events": [
    {
      "event": "labeled",
      "id": 4776204641,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQ3NzYyMDQ2NDE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4776204641",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-20T21:58:12Z",
      "label": {
        "name": "Wallet",
        "color": "08a781"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-21T03:52:39Z",
      "updated_at": "2021-05-21T03:52:39Z",
      "source": {
        "issue": {
          "id": 897562524,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NjQ5NTU3Njg3",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22009",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22009/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22009/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22009/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/22009",
          "number": 22009,
          "state": "closed",
          "state_reason": null,
          "title": "wallet: Decide which coin selection solution to use based on waste metric",
          "body": "Branch and Bound introduced a metric that we call waste. This metric is used as part of bounding the search tree, but it can be generalized to all coin selection solutions, including those with change. As such, this PR introduces the waste metric at a higher level so that we can run both of our coin selection algorithms (BnB and KnapsackSolver) and choose the one which has the least waste. In the event that both find a solution with the same change, we choose the one that spends more inputs.\r\n\r\nAlso this PR sets the long term feerate to 10 sat/vb rather than using the 1008 block estimate. This allows the long term feerate to be the feerate that we switch between consolidating and optimizing for fees. This also removes a bug where the long term feerate would incorrectly be set to the fallback fee. While this doesn't matter prior to this PR, it does have an effect following this. The long term feerate can be configured by the user through a new `-consolidatefeerate` option.",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "comments": 25,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22009",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/22009",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/22009.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/22009.patch"
          },
          "closed_at": "2021-09-01T04:59:41Z",
          "created_at": "2021-05-21T00:02:57Z",
          "updated_at": "2022-10-30T19:10:03Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 845634461,
      "node_id": "MDEyOklzc3VlQ29tbWVudDg0NTYzNDQ2MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/845634461",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-21T03:55:09Z",
      "updated_at": "2021-06-05T07:17:54Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #22155 (wallet test: Add test for subtract fee from recipient behavior by ryanofsky)\n* #22100 (refactor: Clean up new wallet spend, receive files added #21207 by ryanofsky)\n* #22009 (wallet: Decide which coin selection solution to use based on waste metric by achow101)\n* #21206 (refactor: Make CWalletTx sync state type-safe by ryanofsky)\n* #20205 (wallet: Properly support a wallet id by achow101)\n* #17526 (Use Single Random Draw In addition to knapsack as coin selection fallback by achow101)\n* #17211 (Allow fundrawtransaction and walletcreatefundedpsbt to take external inputs by achow101)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22008#issuecomment-845634461",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22008"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-21T07:56:35Z",
      "updated_at": "2021-05-21T07:56:35Z",
      "source": {
        "issue": {
          "id": 809868091,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NTc0NjU0ODE5",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21207",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21207/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21207/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21207/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/21207",
          "number": 21207,
          "state": "closed",
          "state_reason": null,
          "title": "MOVEONLY: CWallet transaction code out of wallet.cpp/.h",
          "body": "This commit just moves function without making any changes. It can be reviewed with `git log -p -n1 --color-moved=dimmed_zebra`\r\n\r\nMotivation for this change is to make `wallet.cpp/h` less monolithic and start to make wallet transaction state tracking comprehensible so bugs in https://github.com/bitcoin-core/bitcoin-devwiki/wiki/Wallet-Transaction-Conflict-Tracking can be fixed safely without introducing new problems.\r\n\r\nThis moves wallet classes and methods that deal with transactions out of `wallet.cpp/.h` into better organized files:\r\n\r\n- `transaction.cpp/.h` - CWalletTx and CMerkleTx class definitions\r\n- `receive.cpp/.h` - functions checking received transactions and computing balances\r\n- `spend.cpp/.h` - functions creating transactions and finding spendable coins\r\n\r\nAfter #20773, when loading is separated from syncing it will also be possible to move more `wallet.cpp/.h` functions to:\r\n\r\n- `sync.cpp/.h` - functions handling chain notifications and rescanning\r\n\r\nThis commit arranges `receive.cpp` and `spend.cpp` functions in dependency order so it's possible to skim `receive.cpp` and get an idea of how computing balances works, and skim `spend.cpp` and get an idea of how transactions are created, without having to jump all over `wallet.cpp` where functions are not in order and there is a lot of unrelated code.\r\n\r\nFollowup commit \"refactor: Detach wallet transaction methods\" in https://github.com/bitcoin/bitcoin/pull/21206 follows up this PR and tweaks function names and arguments to reflect new locations. The two commits are split into separate PRs because this commit is more work to maintain and less work to review, while the other commit is less work to maintain and more work to review, so hopefully this commit can be merged earlier.",
          "user": {
            "login": "ryanofsky",
            "id": 7133040,
            "node_id": "MDQ6VXNlcjcxMzMwNDA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ryanofsky",
            "html_url": "https://github.com/ryanofsky",
            "followers_url": "https://api.github.com/users/ryanofsky/followers",
            "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
            "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
            "repos_url": "https://api.github.com/users/ryanofsky/repos",
            "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": true,
          "comments": 29,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21207",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/21207",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/21207.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/21207.patch"
          },
          "closed_at": "2021-05-30T10:00:58Z",
          "created_at": "2021-02-17T05:30:24Z",
          "updated_at": "2021-05-31T12:56:21Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-21T07:58:51Z",
      "updated_at": "2021-05-21T07:58:51Z",
      "source": {
        "issue": {
          "id": 809858281,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NTc0NjQ2NTc4",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21206",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21206/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21206/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21206/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/21206",
          "number": 21206,
          "state": "closed",
          "state_reason": null,
          "title": "refactor: Make CWalletTx sync state type-safe",
          "body": "Current `CWalletTx` state representation makes it possible to set inconsistent states that won't be handled correctly by wallet sync code or serialized & deserialized back into the same form.\r\n\r\nFor example, it is possible to call `setConflicted` without setting a conflicting block hash, or `setConfirmed` with no transaction index. And it's possible update individual `m_confirm` and `fInMempool` data fields without setting an overall consistent state that can be serialized and handled correctly.\r\n\r\nFix this without changing behavior by using `std::variant`, instead of an enum and collection of fields, to represent sync state, so state tracking code is safer and more legible.\r\n\r\nThis is a first step to fixing state tracking bugs https://github.com/bitcoin-core/bitcoin-devwiki/wiki/Wallet-Transaction-Conflict-Tracking, by adding an extra margin of safety that can prevent new bugs from being introduced as existing bugs are fixed.",
          "user": {
            "login": "ryanofsky",
            "id": 7133040,
            "node_id": "MDQ6VXNlcjcxMzMwNDA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ryanofsky",
            "html_url": "https://github.com/ryanofsky",
            "followers_url": "https://api.github.com/users/ryanofsky/followers",
            "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
            "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
            "repos_url": "https://api.github.com/users/ryanofsky/repos",
            "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            },
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": true,
          "comments": 7,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21206",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/21206",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/21206.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/21206.patch"
          },
          "closed_at": "2021-11-25T18:42:24Z",
          "created_at": "2021-02-17T05:08:18Z",
          "updated_at": "2023-04-11T14:43:02Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-21T09:01:37Z",
      "updated_at": "2021-05-21T09:01:37Z",
      "source": {
        "issue": {
          "id": 764895200,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NTM4NzUyMjQ5",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20640",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20640/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20640/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20640/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/20640",
          "number": 20640,
          "state": "closed",
          "state_reason": null,
          "title": "wallet, refactor: return out-params of CreateTransaction() as optional struct",
          "body": "The method `CWallet::CreateTransaction` currently returns several values in the form of out-parameters:\r\n* the actual newly created transaction (`CTransactionRef& tx`)\r\n* its required fee (`CAmount& nFeeRate`)\r\n* the position of the change output (`int& nChangePosInOut`) -- as the name suggests, this is both an in- and out-param\r\n\r\nBy returning these values in an optional structure (which returns no value a.k.a. `std::nullopt` if an error occured), the interfaces is shorter, cleaner (requested change position is now in-param and can be passed by value) and callers don't have to create dummy variables for results that they are not interested in. \r\n\r\nNote that the names of the replaced out-variables were kept in `CreateTransactionInternal` to keep the diff minimal. Also, the fee calculation data (`FeeCalculation& fee_calc_out`) would be another candidate to put into the structure, but `FeeCalculation` is currently an opaque data type in the wallet interface and I think it should stay that way.\r\n\r\nAs a potential follow-up, I think it would make sense to also do the same refactoring for `CWallet::FundTransaction`, which has a very similar parameter structure.\r\n\r\nSuggested by laanwj in https://github.com/bitcoin/bitcoin/pull/20588#issuecomment-739838428.",
          "user": {
            "login": "theStack",
            "id": 91535,
            "node_id": "MDQ6VXNlcjkxNTM1",
            "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/theStack",
            "html_url": "https://github.com/theStack",
            "followers_url": "https://api.github.com/users/theStack/followers",
            "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
            "organizations_url": "https://api.github.com/users/theStack/orgs",
            "repos_url": "https://api.github.com/users/theStack/repos",
            "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/theStack/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            },
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": true,
          "comments": 17,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20640",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/20640",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/20640.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/20640.patch"
          },
          "closed_at": "2022-05-17T10:05:17Z",
          "created_at": "2020-12-13T04:03:13Z",
          "updated_at": "2023-05-17T10:02:10Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-21T12:22:46Z",
      "updated_at": "2021-05-21T12:22:46Z",
      "source": {
        "issue": {
          "id": 525313174,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MzQyOTI5NTAy",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17526",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17526/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17526/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17526/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/17526",
          "number": 17526,
          "state": "closed",
          "state_reason": null,
          "title": "Add Single Random Draw as an additional coin selection algorithm",
          "body": "To ease in the use of SRD as our fallback mechanism, this PR adds it as a secondary fallback algorithm in addition to the knapsack solver. Since #22009, the solution with the least waste will be chosen. This pattern is continued with SRD simply being another solution whose waste is compared.",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 64583,
              "node_id": "MDU6TGFiZWw2NDU4Mw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Feature",
              "name": "Feature",
              "color": "7cf575",
              "default": false
            },
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "comments": 25,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17526",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/17526",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/17526.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/17526.patch"
          },
          "closed_at": "2021-09-28T01:36:31Z",
          "created_at": "2019-11-19T22:47:59Z",
          "updated_at": "2023-03-22T10:20:18Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-21T12:28:21Z",
      "updated_at": "2021-05-21T12:28:21Z",
      "source": {
        "issue": {
          "id": 516676752,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MzM1OTA0MjIz",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17355",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17355/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17355/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17355/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/17355",
          "number": 17355,
          "state": "closed",
          "state_reason": null,
          "title": "gui: grey out used address in address book",
          "body": "Implements issue #17174, to grey out used addresses in the address book when the wallet has the `avoid_reuse` flag set.\r\n\r\nthis commit brings the `IsUsedDestination` method into the `Wallet.h` interface. It is then called in `addresstablemodel.cpp` to determine whether the address has been used or not whilst setting the font colour\r\n\r\nmaster\r\n<img width=\"840\" alt=\"Screenshot 2019-11-02 at 17 36 51\" src=\"https://user-images.githubusercontent.com/31032215/68075122-897dec00-fd9b-11e9-95ac-4a8f36635cc9.png\">\r\n\r\npr\r\n<img width=\"836\" alt=\"Screenshot 2019-11-02 at 17 33 41\" src=\"https://user-images.githubusercontent.com/31032215/68075130-9e5a7f80-fd9b-11e9-93e3-6d687b982c34.png\">\r\n\r\n",
          "user": {
            "login": "za-kk",
            "id": 31032215,
            "node_id": "MDQ6VXNlcjMxMDMyMjE1",
            "avatar_url": "https://avatars.githubusercontent.com/u/31032215?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/za-kk",
            "html_url": "https://github.com/za-kk",
            "followers_url": "https://api.github.com/users/za-kk/followers",
            "following_url": "https://api.github.com/users/za-kk/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/za-kk/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/za-kk/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/za-kk/subscriptions",
            "organizations_url": "https://api.github.com/users/za-kk/orgs",
            "repos_url": "https://api.github.com/users/za-kk/repos",
            "events_url": "https://api.github.com/users/za-kk/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/za-kk/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135946,
              "node_id": "MDU6TGFiZWwxMzU5NDY=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/GUI",
              "name": "GUI",
              "color": "02d7e1",
              "default": false
            },
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            },
            {
              "id": 749416508,
              "node_id": "MDU6TGFiZWw3NDk0MTY1MDg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Up%20for%20grabs",
              "name": "Up for grabs",
              "color": "99a810",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": true,
          "comments": 39,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17355",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/17355",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/17355.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/17355.patch"
          },
          "closed_at": "2021-11-14T15:02:54Z",
          "created_at": "2019-11-02T18:12:59Z",
          "updated_at": "2022-11-14T13:09:45Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-21T12:33:30Z",
      "updated_at": "2021-05-21T12:33:30Z",
      "source": {
        "issue": {
          "id": 510304768,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MzMwNzAyNTU0",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17211",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17211/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17211/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17211/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/17211",
          "number": 17211,
          "state": "closed",
          "state_reason": null,
          "title": "Allow fundrawtransaction and walletcreatefundedpsbt to take external inputs",
          "body": "Currently `fundrawtransaction` and `walletcreatefundedpsbt` both do not allow external inputs as the wallet does not have the information necessary to estimate their fees.\r\n\r\nThis PR adds an additional argument to both those RPCs which allows the user to specify solving data. This way, the wallet can use that solving data to estimate the size of those inputs. The solving data can be public keys, scripts, or descriptors.",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            },
            {
              "id": 98279177,
              "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
              "name": "RPC/REST/ZMQ",
              "color": "0052cc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "comments": 19,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17211",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/17211",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/17211.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/17211.patch"
          },
          "closed_at": "2021-10-04T09:08:48Z",
          "created_at": "2019-10-21T21:29:04Z",
          "updated_at": "2022-10-30T19:10:34Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "reviewed",
      "id": 665540991,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjY1NTQwOTkx",
      "url": null,
      "actor": null,
      "commit_id": "6c0cb3cac4928ea3774843f642f8a637e3ba85e0",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "utACK 6c0cb3c (the 9 commits in this PR)\r\n\r\nLinter seems upset (about indentation?) in the scripted diff commit.\r\n\r\nMaybe also move `CreateTransactionInternal` out of the header?\r\n\r\nFor code archaeologists wondering about 472e42c2974c3ecca6bdb71f082925d86e3def35 why \"Dummy fill vin\" was added in the first place: it was introduced in #12699, but it's not clear to me why. @instagibbs?",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22008#pullrequestreview-665540991",
      "submitted_at": "2021-05-21T14:39:01Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22008"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-21T23:09:24Z",
      "updated_at": "2021-05-21T23:09:24Z",
      "source": {
        "issue": {
          "id": 898656394,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NjUwNTEyNzQ2",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22019",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22019/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22019/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22019/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/22019",
          "number": 22019,
          "state": "closed",
          "state_reason": null,
          "title": "wallet: Introduce SelectionResult for encapsulating a coin selection solution",
          "body": "Instead of returning a set of selected coins and their total value as separate items, encapsulate both of these, and other variables, into a new `SelectionResult` struct. This allows us to have all of the things relevant to a coin selection solution be in a single object. `SelectionResult` enables us to implement the waste calculation in a cleaner way.\r\n\r\nAll of the coin selection functions (`SelectCoinsBnB`, `KnapsackSolver`, `AttemptSelection`, and `SelectCoins`) are changed to use a `SelectionResult` as the output parameter.\r\n\r\nBased on #22009",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "comments": 8,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22019",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/22019",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/22019.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/22019.patch"
          },
          "closed_at": "2021-12-09T16:22:18Z",
          "created_at": "2021-05-21T23:09:24Z",
          "updated_at": "2022-12-13T10:02:47Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-24T22:05:33Z",
      "updated_at": "2021-05-24T22:05:33Z",
      "source": {
        "issue": {
          "id": 899573997,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NjUxMjU3NTUy",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22042",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22042/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22042/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22042/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/22042",
          "number": 22042,
          "state": "closed",
          "state_reason": null,
          "title": "Replace size/weight estimate tuple with struct for named fields",
          "body": "For clarity of return values of size estimation functions.",
          "user": {
            "login": "instagibbs",
            "id": 5767891,
            "node_id": "MDQ6VXNlcjU3Njc4OTE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/instagibbs",
            "html_url": "https://github.com/instagibbs",
            "followers_url": "https://api.github.com/users/instagibbs/followers",
            "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
            "organizations_url": "https://api.github.com/users/instagibbs/orgs",
            "repos_url": "https://api.github.com/users/instagibbs/repos",
            "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/instagibbs/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 7,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22042",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/22042",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/22042.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/22042.patch"
          },
          "closed_at": "2021-05-26T06:25:42Z",
          "created_at": "2021-05-24T11:27:46Z",
          "updated_at": "2022-08-16T17:23:07Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4793539479,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDc5MzUzOTQ3OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4793539479",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-25T15:31:58Z"
    },
    {
      "event": "ready_for_review",
      "id": 4793634902,
      "node_id": "MDE5OlJlYWR5Rm9yUmV2aWV3RXZlbnQ0NzkzNjM0OTAy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4793634902",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-25T15:47:17Z"
    },
    {
      "event": "commented",
      "id": 847985686,
      "node_id": "MDEyOklzc3VlQ29tbWVudDg0Nzk4NTY4Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/847985686",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-25T15:47:45Z",
      "updated_at": "2021-05-25T15:47:45Z",
      "author_association": "MEMBER",
      "body": "With #17331 now merged, this is ready for review.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22008#issuecomment-847985686",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22008"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4793647018,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDc5MzY0NzAxOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4793647018",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-25T15:49:16Z"
    },
    {
      "event": "commented",
      "id": 848012016,
      "node_id": "MDEyOklzc3VlQ29tbWVudDg0ODAxMjAxNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/848012016",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-25T16:13:18Z",
      "updated_at": "2021-05-25T16:13:18Z",
      "author_association": "MEMBER",
      "body": "re-utACK a2dd0dbc91da89a5672d2e578998252b1a3ceabc",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22008#issuecomment-848012016",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22008"
    },
    {
      "event": "labeled",
      "id": 4797441040,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQ3OTc0NDEwNDA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4797441040",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-26T07:50:06Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4800724584,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDgwMDcyNDU4NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4800724584",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-26T16:53:28Z"
    },
    {
      "event": "reviewed",
      "id": 669228402,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjY5MjI4NDAy",
      "url": null,
      "actor": null,
      "commit_id": "d58f1fb0fdd43ed186073f9db477d9afd760c637",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22008#pullrequestreview-669228402",
      "submitted_at": "2021-05-26T17:56:35Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22008"
    },
    {
      "event": "commented",
      "id": 849007602,
      "node_id": "MDEyOklzc3VlQ29tbWVudDg0OTAwNzYwMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/849007602",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-26T18:10:33Z",
      "updated_at": "2021-05-26T18:10:33Z",
      "author_association": "CONTRIBUTOR",
      "body": "tACK c2a5bd68ef60d9c64512b205ff6ea4ce7dca8602\r\n\r\nThe rebase ate my most pressing comment. Thanks @instagibbs for https://github.com/bitcoin/bitcoin/pull/22042. :heart: ",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22008#issuecomment-849007602",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22008"
    },
    {
      "event": "mentioned",
      "id": 4801163512,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDgwMTE2MzUxMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4801163512",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-26T18:10:33Z"
    },
    {
      "event": "subscribed",
      "id": 4801163518,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQ4MDExNjM1MTg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4801163518",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-26T18:10:33Z"
    },
    {
      "event": "unlabeled",
      "id": 4801191543,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50NDgwMTE5MTU0Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4801191543",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-26T18:16:35Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 849017814,
      "node_id": "MDEyOklzc3VlQ29tbWVudDg0OTAxNzgxNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/849017814",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-26T18:26:32Z",
      "updated_at": "2021-05-26T18:28:09Z",
      "author_association": "MEMBER",
      "body": "The last rebase broke the fee estimation test on CI, though perhaps a coincidence; I can't reproduce:\r\n\r\n```\r\nself.run_test()\r\nFile \"/tmp/cirrus-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/test/functional/feature_fee_estimation.py\", line 256, in run_test\r\ncheck_estimates(self.nodes[1], self.fees_per_kb)\r\nFile \"/tmp/cirrus-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/test/functional/feature_fee_estimation.py\", line 140, in check_estimates\r\ncheck_smart_estimates(node, fees_seen)\r\nFile \"/tmp/cirrus-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/test/functional/feature_fee_estimation.py\", line 130, in check_smart_estimates\r\n% (feerate, last_feerate))\r\nAssertionError: Estimated fee (0.000565) larger than last fee (0.000479) for lower number of confirms\r\n```\r\n\r\nc2a5bd68ef60d9c64512b205ff6ea4ce7dca8602 looks like a correct rebase",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22008#issuecomment-849017814",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22008"
    },
    {
      "event": "commented",
      "id": 849039623,
      "node_id": "MDEyOklzc3VlQ29tbWVudDg0OTAzOTYyMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/849039623",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-26T18:59:50Z",
      "updated_at": "2021-05-26T18:59:50Z",
      "author_association": "CONTRIBUTOR",
      "body": "Code review ACK c2a5bd68ef60d9c64512b205ff6ea4ce7dca8602. I like `inputs_sum` and `recipients_sum`",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22008#issuecomment-849039623",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22008"
    },
    {
      "event": "added_to_project",
      "id": 4807741792,
      "node_id": "MDE5OkFkZGVkVG9Qcm9qZWN0RXZlbnQ0ODA3NzQxNzky",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4807741792",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-27T19:07:43Z",
      "project_card": {
        "id": 61992612,
        "url": "https://api.github.com/projects/columns/cards/61992612",
        "project_id": 481835,
        "project_url": "https://api.github.com/projects/481835",
        "column_name": "Blockers"
      }
    },
    {
      "event": "reviewed",
      "id": 671176599,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjcxMTc2NTk5",
      "url": null,
      "actor": null,
      "commit_id": "c2a5bd68ef60d9c64512b205ff6ea4ce7dca8602",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "utACK c2a5bd68ef\r\n\r\nA few minor suggestions",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22008#pullrequestreview-671176599",
      "submitted_at": "2021-05-28T12:10:24Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22008"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4813855427,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDgxMzg1NTQyNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4813855427",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-28T17:22:41Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-29T10:09:51Z",
      "updated_at": "2021-05-29T10:09:51Z",
      "source": {
        "issue": {
          "id": 725905053,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NTA3MDYzNzgw",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20205",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20205/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20205/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20205/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/20205",
          "number": 20205,
          "state": "closed",
          "state_reason": null,
          "title": "wallet: Properly support a wallet id",
          "body": "Adds a unique id for each wallet that is saved in a new \"walletid\" record. For compatibility, wallets using BDB will use the BDB generated id. All other wallets will have a randomly generated id if an id does not already exist.\r\n\r\nAlternative to #20204",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 34,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20205",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/20205",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/20205.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/20205.patch"
          },
          "closed_at": "2022-10-12T18:20:59Z",
          "created_at": "2020-10-20T20:06:17Z",
          "updated_at": "2022-10-12T18:20:59Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "reviewed",
      "id": 671810704,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjcxODEwNzA0",
      "url": null,
      "actor": null,
      "commit_id": "ca46cdc2af4919093a8fce8693c49f874f57d492",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Code review & functional test run ACK ca46cdc2af4919093a8fce8693c49f874f57d492\r\n\r\nUnfortunately I am going to merge #21207 first so this will need one more rebase before merge sorry.",
      "user": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22008#pullrequestreview-671810704",
      "submitted_at": "2021-05-30T09:40:19Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22008"
    },
    {
      "event": "labeled",
      "id": 4817053091,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQ4MTcwNTMwOTE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4817053091",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-30T11:54:13Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMjk5NTk2M2I1ZDBiOWJjYTUwM2IwY2M2OWM3NDdmNGNlZGVjMWU0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b2995963b5d0b9bca503b0cc69c747f4cedec1e4",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/b2995963b5d0b9bca503b0cc69c747f4cedec1e4",
      "tree": {
        "sha": "1f807a9f28cdc3fe58765ccd3b9f2a4b887b1f34",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1f807a9f28cdc3fe58765ccd3b9f2a4b887b1f34"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/55a156fca08713b020aafef91f40df8ce4bc3cae",
          "sha": "55a156fca08713b020aafef91f40df8ce4bc3cae",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/55a156fca08713b020aafef91f40df8ce4bc3cae"
        }
      ],
      "message": "Move cs_wallet lock in CreateTransactionInternal to top of function\n\nIt isn't necessary to not lock parts of this function. Just lock the\nwhole thing and get rid of an indent.",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-05-30T17:59:32Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-05-20T18:51:50Z"
      },
      "sha": "b2995963b5d0b9bca503b0cc69c747f4cedec1e4"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMmFlZTNiYmM3NjVhMWYwMmU0Y2VhZGIyZmE1OTI4YWM1MjRmMWE3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d2aee3bbc765a1f02e4ceadb2fa5928ac524f1a7",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/d2aee3bbc765a1f02e4ceadb2fa5928ac524f1a7",
      "tree": {
        "sha": "e16bc2df68d6ae04945f7f9e52bae1f04a020e37",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e16bc2df68d6ae04945f7f9e52bae1f04a020e37"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b2995963b5d0b9bca503b0cc69c747f4cedec1e4",
          "sha": "b2995963b5d0b9bca503b0cc69c747f4cedec1e4",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/b2995963b5d0b9bca503b0cc69c747f4cedec1e4"
        }
      ],
      "message": "Remove extraneous scope in CreateTransactionInternal\n\nThese brackets were restricting a scope for no apparent reason. Remove\nthem and dedent.",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-05-30T18:01:29Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-05-20T18:53:36Z"
      },
      "sha": "d2aee3bbc765a1f02e4ceadb2fa5928ac524f1a7"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYWMyMWM3OTNmOGZiYjRkNWRlYmM1NWFjOTdjNDA2YzdjOTNmZjQ4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dac21c793f8fbb4d5debc55ac97c406c7c93ff48",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/dac21c793f8fbb4d5debc55ac97c406c7c93ff48",
      "tree": {
        "sha": "ca8168963814dd688da88332f7add854a441acb7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ca8168963814dd688da88332f7add854a441acb7"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d2aee3bbc765a1f02e4ceadb2fa5928ac524f1a7",
          "sha": "d2aee3bbc765a1f02e4ceadb2fa5928ac524f1a7",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/d2aee3bbc765a1f02e4ceadb2fa5928ac524f1a7"
        }
      ],
      "message": "Rename nValue and nValueToSelect\n\nnValue is the sum of the intended recipient amounts, so name it that for\nclarity.\n\nnValueToSelect is the coin selection target value, so name it\nselection_target for clarity.",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-05-30T18:03:43Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-05-17T20:20:40Z"
      },
      "sha": "dac21c793f8fbb4d5debc55ac97c406c7c93ff48"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZDFkNmQzMzI0YTg0MTA4N2Y2ZDVkYTcyMzM5NGU4ZDdkZjA3ZWM3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cd1d6d3324a841087f6d5da723394e8d7df07ec7",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/cd1d6d3324a841087f6d5da723394e8d7df07ec7",
      "tree": {
        "sha": "a4cd0e3e35939f788c736ec1b4ae6885dd9cc573",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a4cd0e3e35939f788c736ec1b4ae6885dd9cc573"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dac21c793f8fbb4d5debc55ac97c406c7c93ff48",
          "sha": "dac21c793f8fbb4d5debc55ac97c406c7c93ff48",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/dac21c793f8fbb4d5debc55ac97c406c7c93ff48"
        }
      ],
      "message": "Rename nSubtractFeeFromAmount in CreateTransaction\n\nRenamed to outputs_to_subtract_fee_from for clarity.",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-05-30T18:05:15Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-05-17T20:22:30Z"
      },
      "sha": "cd1d6d3324a841087f6d5da723394e8d7df07ec7"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMmFiNDMwNjUxNTk0ZWQzZDEwYTZlZDc1ZjE5ZGU1MTk3ZjBlOWIw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/32ab430651594ed3d10a6ed75f19de5197f0e9b0",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/32ab430651594ed3d10a6ed75f19de5197f0e9b0",
      "tree": {
        "sha": "f658b8a102786669ff0021a944c4f7ebee99216f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f658b8a102786669ff0021a944c4f7ebee99216f"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cd1d6d3324a841087f6d5da723394e8d7df07ec7",
          "sha": "cd1d6d3324a841087f6d5da723394e8d7df07ec7",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/cd1d6d3324a841087f6d5da723394e8d7df07ec7"
        }
      ],
      "message": "Move recipients vector checks to beginning of CreateTransaction\n\nEnsuring that the recipients vector is not empty and that the amounts\nare non-negative can be done in CreateTransaction rather than\nCreateTransactionInternal. Additionally, these checks should happen as\nsoon as possible, so they are done at the beginning of\nCreateTransaction.",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-05-30T18:05:42Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-05-17T20:23:08Z"
      },
      "sha": "32ab430651594ed3d10a6ed75f19de5197f0e9b0"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNjRlMDY5OGE1NDNhMTllODFhZTQwN2NjNTIzOTcwZTZlZDkyNGU4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/364e0698a543a19e81ae407cc523970e6ed924e8",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/364e0698a543a19e81ae407cc523970e6ed924e8",
      "tree": {
        "sha": "a09efcbe22968510110756540c6ca52f92551b66",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a09efcbe22968510110756540c6ca52f92551b66"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/32ab430651594ed3d10a6ed75f19de5197f0e9b0",
          "sha": "32ab430651594ed3d10a6ed75f19de5197f0e9b0",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/32ab430651594ed3d10a6ed75f19de5197f0e9b0"
        }
      ],
      "message": "Move variable initializations to where they are used\n\n- txNew nLockTime setting to txNew init\n- FeeCalc to the fee estimation fetching\n- setCoins to prior to SelectCoins\n- nBytes to CalculateMaximumSignedTxSize call\n- tx_sizes to CalculateMaximumSignedTxSize call\n- coin_selection_params.m_avoid_partial_spends to params init",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-05-30T18:06:13Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-05-17T20:26:40Z"
      },
      "sha": "364e0698a543a19e81ae407cc523970e6ed924e8"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMzljYWMwNTQ3Yzk2MGRmMGE4OTBlODlmNDNiNDU4MTQ3YjRiMDdh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d39cac0547c960df0a890e89f43b458147b4b07a",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/d39cac0547c960df0a890e89f43b458147b4b07a",
      "tree": {
        "sha": "a66c10ff2b818bdf113d4d1cff42f8f9f713f6d7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a66c10ff2b818bdf113d4d1cff42f8f9f713f6d7"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/364e0698a543a19e81ae407cc523970e6ed924e8",
          "sha": "364e0698a543a19e81ae407cc523970e6ed924e8",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/364e0698a543a19e81ae407cc523970e6ed924e8"
        }
      ],
      "message": "Set m_subtract_fee_outputs during recipients vector loop\n\nInstead of setting this afterwards based on the results from the loop,\njust do it inside of the loop itself.\n\nFixed some styling nearby",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-05-30T18:06:40Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-05-17T20:29:31Z"
      },
      "sha": "d39cac0547c960df0a890e89f43b458147b4b07a"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNTgzZjczMzU0YzYxN2VkZTkxNDVmOTczOGYxM2NlZGYxYzEzZTA4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b583f73354c617ede9145f9738f13cedf1c13e08",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/b583f73354c617ede9145f9738f13cedf1c13e08",
      "tree": {
        "sha": "c5d699c9f7d57662c25abcf94afea0eac45624aa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c5d699c9f7d57662c25abcf94afea0eac45624aa"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d39cac0547c960df0a890e89f43b458147b4b07a",
          "sha": "d39cac0547c960df0a890e89f43b458147b4b07a",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/d39cac0547c960df0a890e89f43b458147b4b07a"
        }
      ],
      "message": "Move vin filling to before final fee setting\n\nIt's unnecessary to fill in the vin with dummy inputs, calculate the\nfee, then fill in the vin with the actual inputs. Just fill the vin with\nthe actual inputs the first time.",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-05-30T18:07:49Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-05-17T20:31:06Z"
      },
      "sha": "b583f73354c617ede9145f9738f13cedf1c13e08"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NmMyYzk1MjBlODBlZTRmZWQ5MmYwZTFhYjg1OWQ1OWZjYmRiMTEw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/96c2c9520e80ee4fed92f0e1ab859d59fcbdb110",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/96c2c9520e80ee4fed92f0e1ab859d59fcbdb110",
      "tree": {
        "sha": "45f98c0735d5b390d4223174b1ef6ec0901f84ac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/45f98c0735d5b390d4223174b1ef6ec0901f84ac"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b583f73354c617ede9145f9738f13cedf1c13e08",
          "sha": "b583f73354c617ede9145f9738f13cedf1c13e08",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/b583f73354c617ede9145f9738f13cedf1c13e08"
        }
      ],
      "message": "scripted-diff: Rename SelectCoinsMinConf to AttemptSelection\n\nSelectCoinsMinConf is a bit of a misnomer now since it really just does\nall of the coin selection given some parameters. So rename this to\nsomething less annoying to say and makes a bit more sense.\n\n-BEGIN VERIFY SCRIPT-\nsed -i 's/SelectCoinsMinConf/AttemptSelection/g' $(git grep -l SelectCoinsMinConf ./src)\n-END VERIFY SCRIPT-",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-05-30T18:10:10Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-05-20T19:21:15Z"
      },
      "sha": "96c2c9520e80ee4fed92f0e1ab859d59fcbdb110"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4817435105,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDgxNzQzNTEwNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4817435105",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-30T18:18:37Z"
    },
    {
      "event": "unlabeled",
      "id": 4817540228,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50NDgxNzU0MDIyOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4817540228",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-30T20:12:54Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-31T03:51:22Z",
      "updated_at": "2021-05-31T03:51:22Z",
      "source": {
        "issue": {
          "id": 906719920,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NjU3NjcwMDE2",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22100",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22100/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22100/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22100/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/22100",
          "number": 22100,
          "state": "closed",
          "state_reason": null,
          "title": "refactor: Clean up new wallet spend, receive files added #21207",
          "body": "This makes `CWallet` and `CWalletTx` methods in `spend.cpp` and `receive.cpp` files into standalone functions.\r\n\r\nIt's a followup to [#21207 MOVEONLY: CWallet transaction code out of wallet.cpp/.h](https://github.com/bitcoin/bitcoin/pull/21207), which moved code from `wallet.cpp` to new `spend.cpp` and `receive.cpp` files.\r\n\r\nThere are no changes in behavior. This is just making methods into functions and removing circular dependencies created by #21207. There are no comment or documentation changes, either. Removed comments from `transaction.h` are just migrated to `spend.h`, `receive.h`, and `wallet.h`.\r\n\r\n---\r\n\r\nThis commit was split off from #21206 so there are a few earlier review comments there",
          "user": {
            "login": "ryanofsky",
            "id": 7133040,
            "node_id": "MDQ6VXNlcjcxMzMwNDA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ryanofsky",
            "html_url": "https://github.com/ryanofsky",
            "followers_url": "https://api.github.com/users/ryanofsky/followers",
            "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
            "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
            "repos_url": "https://api.github.com/users/ryanofsky/repos",
            "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            },
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 17,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22100",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/22100",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/22100.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/22100.patch"
          },
          "closed_at": "2021-09-03T09:22:16Z",
          "created_at": "2021-05-30T11:09:45Z",
          "updated_at": "2022-09-03T11:51:30Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "reviewed",
      "id": 675439314,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njc1NDM5MzE0",
      "url": null,
      "actor": null,
      "commit_id": "96c2c9520e80ee4fed92f0e1ab859d59fcbdb110",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "reACK 96c2c95",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22008#pullrequestreview-675439314",
      "submitted_at": "2021-06-04T11:04:41Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22008"
    },
    {
      "event": "reviewed",
      "id": 676223208,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njc2MjIzMjA4",
      "url": null,
      "actor": null,
      "commit_id": "96c2c9520e80ee4fed92f0e1ab859d59fcbdb110",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Code review ACK 96c2c9520e80ee4fed92f0e1ab859d59fcbdb110. No significant changes since last review, just rebase, moving lock and negative amounts check and fixing up some comments",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22008#pullrequestreview-676223208",
      "submitted_at": "2021-06-04T12:17:02Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22008"
    },
    {
      "event": "commented",
      "id": 854733594,
      "node_id": "MDEyOklzc3VlQ29tbWVudDg1NDczMzU5NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/854733594",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-04T13:42:47Z",
      "updated_at": "2021-06-04T13:46:04Z",
      "author_association": "CONTRIBUTOR",
      "body": "Maybe another cleanup for later, but the separate `fee_needed` and `nFeeRet` variables haven't been needed since the `CreateTransactionInternal` while loop was removed in 9d3bd74ab4430532d6e53eef8cf77ad999044b14. `fee_needed` was only introduced before that commit because if a change output was dropped in an early iteration of the loop, `fee_needed` would hold the cost of the transaction without the change output for the current loop iteration, while `nFeeRet` would reflect the cost of the transaction with change for future iterations. So `fee_needed` can be dropped now without changing behavior, which I think would clarify the code:\r\n\r\n```diff\r\ndiff --git a/src/wallet/spend.cpp b/src/wallet/spend.cpp\r\nindex c8ded4c51e2..45a02f59a18 100644\r\n--- a/src/wallet/spend.cpp\r\n+++ b/src/wallet/spend.cpp\r\n@@ -756,9 +756,8 @@ bool CWallet::CreateTransactionInternal(\r\n     nFeeRet = coin_selection_params.m_effective_feerate.GetFee(nBytes);\r\n \r\n     // Subtract fee from the change output if not subtracting it from recipient outputs\r\n-    CAmount fee_needed = nFeeRet;\r\n     if (!coin_selection_params.m_subtract_fee_outputs) {\r\n-        change_position->nValue -= fee_needed;\r\n+        change_position->nValue -= nFeeRet;\r\n     }\r\n \r\n     // We want to drop the change to fees if:\r\n@@ -774,17 +773,12 @@ bool CWallet::CreateTransactionInternal(\r\n         // Because we have dropped this change, the tx size and required fee will be different, so let's recalculate those\r\n         tx_sizes = CalculateMaximumSignedTxSize(CTransaction(txNew), this, coin_control.fAllowWatchOnly);\r\n         nBytes = tx_sizes.vsize;\r\n-        fee_needed = coin_selection_params.m_effective_feerate.GetFee(nBytes);\r\n-    }\r\n-\r\n-    // Update nFeeRet in case fee_needed changed due to dropping the change output\r\n-    if (fee_needed <= change_and_fee - change_amount) {\r\n-        nFeeRet = change_and_fee - change_amount;\r\n+        nFeeRet = coin_selection_params.m_effective_feerate.GetFee(nBytes);\r\n     }\r\n \r\n     // Reduce output values for subtractFeeFromAmount\r\n     if (coin_selection_params.m_subtract_fee_outputs) {\r\n-        CAmount to_reduce = fee_needed + change_amount - change_and_fee;\r\n+        CAmount to_reduce = nFeeRet + change_amount - change_and_fee;\r\n         int i = 0;\r\n         bool fFirst = true;\r\n         for (const auto& recipient : vecSend)\r\n@@ -816,7 +810,15 @@ bool CWallet::CreateTransactionInternal(\r\n             }\r\n             ++i;\r\n         }\r\n-        nFeeRet = fee_needed;\r\n+    } else if (nFeeRet <= change_and_fee - change_amount) {\r\n+        // If dropping the change output covered the fee, update the returned\r\n+        // fee amount. Note that that in subtract-fee-from-recipients case\r\n+        // above, if the change output is dropped, the change dust value will\r\n+        // be paid to recipients, rather than to the miner (`to_reduce` above\r\n+        // will be negative). In that case, the dust amount sent is an\r\n+        // additional cost of the transaction, but it's not considered part of\r\n+        // the fee since it isn't paid to the miner, so nFeeRet doesn't change here.\r\n+        nFeeRet = change_and_fee - change_amount;\r\n     }\r\n \r\n     // Give up if change keypool ran out and change is required\r\n\r\n```\r\n\r\n\r\n",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22008#issuecomment-854733594",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22008"
    },
    {
      "event": "commented",
      "id": 854880614,
      "node_id": "MDEyOklzc3VlQ29tbWVudDg1NDg4MDYxNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/854880614",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-04T17:07:49Z",
      "updated_at": "2021-06-04T17:07:49Z",
      "author_association": "MEMBER",
      "body": "@ryanofsky I agree that `fee_needed` can be dropped, but I don't think your diff is necessarily correct. Looking at it now, I don't think the current behavior is correct either (and your diff maintains this behavior). We shouldn't ever be paying more to the recipient than the sender expects. The excess, if it is dust, should be burned as fees. So your diff, and the current behavior, is incorrect in that if the dropped change output is more than fees, then recipients will receive more than requested by the sender.\r\n\r\nBy simply removing `fee_needed`, I think we can get the behavior that we want. In this case, after the change is dropped, we will update `nFeeRet` to be the dropped change amount. Then `to_reduce` ends up being 0 and the recipients don't pay any fees, but also don't get anything back, so the excess is paid as fees. I believe that this is the intended behavior, and is simpler to understand too.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22008#issuecomment-854880614",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22008"
    },
    {
      "event": "mentioned",
      "id": 4844367475,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDg0NDM2NzQ3NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4844367475",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-04T17:07:49Z"
    },
    {
      "event": "subscribed",
      "id": 4844367480,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQ4NDQzNjc0ODA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4844367480",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-04T17:07:49Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4844385086,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDg0NDM4NTA4Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4844385086",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-04T17:12:15Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4844403874,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDg0NDQwMzg3NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4844403874",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-04T17:17:07Z"
    },
    {
      "event": "reviewed",
      "id": 676528963,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njc2NTI4OTYz",
      "url": null,
      "actor": null,
      "commit_id": "303a6645dc604e1d074a1aa6253f4dc8a1c3109e",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Reluctant code review ACK 303a6645dc604e1d074a1aa6253f4dc8a1c3109e because it does what is described, but I would prefer previous push 96c2c9520e80ee4fed92f0e1ab859d59fcbdb110 over this push, and then addressing `fee_needed` behavior and cleanup in a followup PR, ideally including a unit test so we are sure this continues to function as intended.\r\n\r\nI wouldn't completely object to changing the behavior like 303a6645dc604e1d074a1aa6253f4dc8a1c3109e does, since the difference is only for small amounts (the cost of a change output) and only in the-subtract-from-recipient case, so I don't think it is too important. But I do think the current behavior does make sense, and I preserved it intentionally in https://github.com/bitcoin/bitcoin/pull/22008#issuecomment-854733594 and not by accident. Thinking about use-cases, if I enable subtracting-from-recipient, it seems likely I'm transferring funds internally and not making an external payment, and so would prefer to keep my funds instead of overpaying the miner. Even if this is an external payment, then the subtract-from-recipient option already implies the recipient is not sensitive to the exact amount, and so if I'm topping up an external account or a channel, or paying for an online service, again the new behavior would be throwing away my own money/credits to give to a miner.\r\n\r\nThe one part of current behavior that is perhaps is less than ideal is the fact that the returned `nFeeRet` doesn't reflect the full cost of sending the transaction. I would fix this just by changing the `else if (nFeeRet..` to `if (nFeeRet...` and dropping the long \"note\" in https://github.com/bitcoin/bitcoin/pull/22008#issuecomment-854733594",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22008#pullrequestreview-676528963",
      "submitted_at": "2021-06-04T18:05:03Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22008"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4844603250,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDg0NDYwMzI1MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4844603250",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-04T18:09:52Z"
    },
    {
      "event": "commented",
      "id": 854912977,
      "node_id": "MDEyOklzc3VlQ29tbWVudDg1NDkxMjk3Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/854912977",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-04T18:10:50Z",
      "updated_at": "2021-06-04T18:10:50Z",
      "author_association": "MEMBER",
      "body": "I've reverted back to 96c2c9520e80ee4fed92f0e1ab859d59fcbdb110\r\n\r\nI think we should discuss the intended behavior of subtract fee from recipients during the wallet meeting today.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22008#issuecomment-854912977",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22008"
    },
    {
      "event": "reviewed",
      "id": 676556845,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njc2NTU2ODQ1",
      "url": null,
      "actor": null,
      "commit_id": "96c2c9520e80ee4fed92f0e1ab859d59fcbdb110",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Code review ACK 96c2c9520e80ee4fed92f0e1ab859d59fcbdb110 also acked previously (was reverted).\r\n\r\nWill check out the IRC. I will say I don't see a need to tackle `fee_needed` in this PR since the PR is already doing a bunch of things and has already had a good amount of review. `fee_needed` logic also seems more tied to removing the while loop in #17331 than anything done here. And especially if it will change behavior, I think it could be better as standalone PR so it can be discussed and understood without having wade through a ton of refactoring.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22008#pullrequestreview-676556845",
      "submitted_at": "2021-06-04T18:19:58Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22008"
    },
    {
      "event": "referenced",
      "id": 4845664848,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQ4NDU2NjQ4NDg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4845664848",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "73bd26cb3df75c1e5f8d2686e4d8a5a32f1409f2",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/73bd26cb3df75c1e5f8d2686e4d8a5a32f1409f2",
      "created_at": "2021-06-04T22:59:42Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-04T23:10:51Z",
      "updated_at": "2021-06-04T23:10:51Z",
      "source": {
        "issue": {
          "id": 911961800,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NjYyMTcwMjIz",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22155",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22155/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22155/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22155/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/22155",
          "number": 22155,
          "state": "closed",
          "state_reason": null,
          "title": "wallet test: Add test for subtract fee from recipient behavior",
          "body": "This adds test coverage for wallet subtract from recipient behavior without changing it. Behavior seems to have changed recently in a minor way in #17331 without being noticed.",
          "user": {
            "login": "ryanofsky",
            "id": 7133040,
            "node_id": "MDQ6VXNlcjcxMzMwNDA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ryanofsky",
            "html_url": "https://github.com/ryanofsky",
            "followers_url": "https://api.github.com/users/ryanofsky/followers",
            "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
            "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
            "repos_url": "https://api.github.com/users/ryanofsky/repos",
            "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            },
            {
              "id": 62963516,
              "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
              "name": "Tests",
              "color": "d4c5f9",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 12,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22155",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/22155",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/22155.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/22155.patch"
          },
          "closed_at": "2021-07-27T09:24:05Z",
          "created_at": "2021-06-04T23:10:51Z",
          "updated_at": "2022-08-16T17:25:58Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 856026671,
      "node_id": "MDEyOklzc3VlQ29tbWVudDg1NjAyNjY3MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/856026671",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-07T15:20:17Z",
      "updated_at": "2021-06-07T15:20:17Z",
      "author_association": "CONTRIBUTOR",
      "body": "re: https://github.com/bitcoin/bitcoin/pull/22008#issuecomment-854733594\r\n\r\n> Maybe another cleanup for later, but the separate fee_needed and nFeeRet variables haven't been needed [...]\r\n\r\nfee_needed cleanup was discussed more in [IRC](https://www.erisian.com.au/bitcoin-core-dev/log-2021-06-04.html#l-221) and is addressed in #22155 for now adding by a unit test to exercise and check the relevant behavior, since there isn't other test coverage",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22008#issuecomment-856026671",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22008"
    },
    {
      "event": "commented",
      "id": 856033716,
      "node_id": "MDEyOklzc3VlQ29tbWVudDg1NjAzMzcxNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/856033716",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-07T15:25:20Z",
      "updated_at": "2021-06-07T15:25:20Z",
      "author_association": "CONTRIBUTOR",
      "body": "This is probably close to ready to being merged\r\n\r\nUp to date ACKs\r\n\r\nglozow https://github.com/bitcoin/bitcoin/pull/22008#pullrequestreview-675439314\r\nryanofsky https://github.com/bitcoin/bitcoin/pull/22008#pullrequestreview-676223208\r\n\r\nPrevious ACKS\r\n\r\nSjors https://github.com/bitcoin/bitcoin/pull/22008#pullrequestreview-665540991\r\nSjors https://github.com/bitcoin/bitcoin/pull/22008#issuecomment-848012016\r\nXekyo https://github.com/bitcoin/bitcoin/pull/22008#issuecomment-849007602\r\nryanofsky https://github.com/bitcoin/bitcoin/pull/22008#issuecomment-849039623\r\nglozow https://github.com/bitcoin/bitcoin/pull/22008#pullrequestreview-671176599\r\nmeshcollider https://github.com/bitcoin/bitcoin/pull/22008#pullrequestreview-671810704",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22008#issuecomment-856033716",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22008"
    },
    {
      "event": "referenced",
      "id": 4858620936,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQ4NTg2MjA5MzY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4858620936",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "4f7c483754f11f4916690b7bd34b095c44413f93",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/4f7c483754f11f4916690b7bd34b095c44413f93",
      "created_at": "2021-06-08T13:39:50Z"
    },
    {
      "event": "referenced",
      "id": 4858643793,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQ4NTg2NDM3OTM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4858643793",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "972e87c08268879576b9287b5998739bef1c4cc1",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/972e87c08268879576b9287b5998739bef1c4cc1",
      "created_at": "2021-06-08T13:43:21Z"
    },
    {
      "event": "reviewed",
      "id": 679216938,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njc5MjE2OTM4",
      "url": null,
      "actor": null,
      "commit_id": "96c2c9520e80ee4fed92f0e1ab859d59fcbdb110",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "re-utACK 96c2c9520e80ee4fed92f0e1ab859d59fcbdb110",
      "user": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22008#pullrequestreview-679216938",
      "submitted_at": "2021-06-09T05:18:31Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22008"
    },
    {
      "event": "merged",
      "id": 4864160294,
      "node_id": "MDExOk1lcmdlZEV2ZW50NDg2NDE2MDI5NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4864160294",
      "actor": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "58f8b156ed7b50f60c7d575fbd9b759f9fe9494b",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/58f8b156ed7b50f60c7d575fbd9b759f9fe9494b",
      "created_at": "2021-06-09T10:37:59Z"
    },
    {
      "event": "closed",
      "id": 4864160326,
      "node_id": "MDExOkNsb3NlZEV2ZW50NDg2NDE2MDMyNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4864160326",
      "actor": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-09T10:37:59Z"
    },
    {
      "event": "removed_from_project",
      "id": 4865109356,
      "node_id": "MDIzOlJlbW92ZWRGcm9tUHJvamVjdEV2ZW50NDg2NTEwOTM1Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4865109356",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-09T13:38:24Z",
      "project_card": {
        "id": 61992612,
        "url": "https://api.github.com/projects/columns/cards/61992612",
        "project_id": 481835,
        "project_url": "https://api.github.com/projects/481835",
        "column_name": "Blockers"
      }
    },
    {
      "event": "referenced",
      "id": 4868712584,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQ4Njg3MTI1ODQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4868712584",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "c3ea2f5b82161f9ecab5ddce34931301fa4d9bb5",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/c3ea2f5b82161f9ecab5ddce34931301fa4d9bb5",
      "created_at": "2021-06-10T03:33:24Z"
    },
    {
      "event": "referenced",
      "id": 4871055466,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQ4NzEwNTU0NjY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4871055466",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "8f6113f51de8b04ae39be897b2dedf98c3e8a54b",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/8f6113f51de8b04ae39be897b2dedf98c3e8a54b",
      "created_at": "2021-06-10T12:25:09Z"
    },
    {
      "event": "referenced",
      "id": 4871055559,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQ4NzEwNTU1NTk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4871055559",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "814b8fb28e7e7035f92d0d577ad5953950ec3e74",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/814b8fb28e7e7035f92d0d577ad5953950ec3e74",
      "created_at": "2021-06-10T12:25:10Z"
    },
    {
      "event": "referenced",
      "id": 4871984472,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQ4NzE5ODQ0NzI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4871984472",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "6a50482691964c782eecea573abeff0e2169dfcb",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/6a50482691964c782eecea573abeff0e2169dfcb",
      "created_at": "2021-06-10T14:56:00Z"
    },
    {
      "event": "referenced",
      "id": 4881559833,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQ4ODE1NTk4MzM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4881559833",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "f3cbde4fbb8a0b2bfffe9f07b982fb921eb6fb6d",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/f3cbde4fbb8a0b2bfffe9f07b982fb921eb6fb6d",
      "created_at": "2021-06-12T18:44:04Z"
    },
    {
      "event": "referenced",
      "id": 4881559842,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQ4ODE1NTk4NDI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4881559842",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "0cc10f8377495fb60156d116307848674e4be38e",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/0cc10f8377495fb60156d116307848674e4be38e",
      "created_at": "2021-06-12T18:44:05Z"
    },
    {
      "event": "referenced",
      "id": 5021298617,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDUwMjEyOTg2MTc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5021298617",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "def672f8706e13f4153ff9aca3fb9e1becddae26",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/def672f8706e13f4153ff9aca3fb9e1becddae26",
      "created_at": "2021-07-14T18:18:05Z"
    },
    {
      "event": "referenced",
      "id": 6723198422,
      "node_id": "REFE_lADOABII5841fZVFzwAAAAGQu93W",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6723198422",
      "actor": {
        "login": "gwillen",
        "id": 458997,
        "node_id": "MDQ6VXNlcjQ1ODk5Nw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/458997?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gwillen",
        "html_url": "https://github.com/gwillen",
        "followers_url": "https://api.github.com/users/gwillen/followers",
        "following_url": "https://api.github.com/users/gwillen/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gwillen/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gwillen/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gwillen/subscriptions",
        "organizations_url": "https://api.github.com/users/gwillen/orgs",
        "repos_url": "https://api.github.com/users/gwillen/repos",
        "events_url": "https://api.github.com/users/gwillen/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gwillen/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "a5d97b363b51f74145d7498dbb1cdf67222890a0",
      "commit_url": "https://api.github.com/repos/ElementsProject/elements/commits/a5d97b363b51f74145d7498dbb1cdf67222890a0",
      "created_at": "2022-06-01T21:22:31Z"
    },
    {
      "event": "locked",
      "id": 7216543171,
      "node_id": "LOE_lADOABII5841fZVFzwAAAAGuI7XD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7216543171",
      "actor": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-18T18:24:47Z",
      "lock_reason": "resolved"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/639880355",
      "pull_request_review_id": 669228402,
      "id": 639880355,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzOTg4MDM1NQ==",
      "diff_hunk": "@@ -2798,6 +2798,12 @@ bool CWallet::CreateTransactionInternal(\n {\n     LOCK(cs_wallet);\n \n+    CMutableTransaction txNew; // The resulting transaction that we make\n+    txNew.nLockTime = GetLocktimeForNewTransaction(chain(), GetLastBlockHash(), GetLastBlockHeight());\n+\n+    CoinSelectionParams coin_selection_params; // Parameters for coin selection, init with dummy\n+    coin_selection_params.m_avoid_partial_spends = coin_control.m_avoid_partial_spends;",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 8,
      "commit_id": "96c2c9520e80ee4fed92f0e1ab859d59fcbdb110",
      "original_commit_id": "d58f1fb0fdd43ed186073f9db477d9afd760c637",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "commit d58f1fb0fdd43ed186073f9db477d9afd760c637 Move variable initializations to where they are used;\r\n\r\nNit: the commit message does not mention `m_avoid_partial_spends`, but `m_avoid_reuse`, was this a mix-up?",
      "created_at": "2021-05-26T16:09:22Z",
      "updated_at": "2021-05-26T17:56:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22008#discussion_r639880355",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/639880355"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22008"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2804,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/640957988",
      "pull_request_review_id": 670629741,
      "id": 640957988,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MDk1Nzk4OA==",
      "diff_hunk": "@@ -2798,6 +2798,12 @@ bool CWallet::CreateTransactionInternal(\n {\n     LOCK(cs_wallet);\n \n+    CMutableTransaction txNew; // The resulting transaction that we make\n+    txNew.nLockTime = GetLocktimeForNewTransaction(chain(), GetLastBlockHash(), GetLastBlockHeight());\n+\n+    CoinSelectionParams coin_selection_params; // Parameters for coin selection, init with dummy\n+    coin_selection_params.m_avoid_partial_spends = coin_control.m_avoid_partial_spends;",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 8,
      "commit_id": "96c2c9520e80ee4fed92f0e1ab859d59fcbdb110",
      "original_commit_id": "d58f1fb0fdd43ed186073f9db477d9afd760c637",
      "in_reply_to_id": 639880355,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Oops, yes, that's a typo. Will fix if I have to push this again.",
      "created_at": "2021-05-27T20:52:28Z",
      "updated_at": "2021-05-27T20:52:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22008#discussion_r640957988",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/640957988"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22008"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2804,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/641457718",
      "pull_request_review_id": 671176599,
      "id": 641457718,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MTQ1NzcxOA==",
      "diff_hunk": "@@ -2795,287 +2795,270 @@ bool CWallet::CreateTransactionInternal(\n         FeeCalculation& fee_calc_out,\n         bool sign)\n {\n-    CAmount nValue = 0;\n+    LOCK(cs_wallet);",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 72,
      "commit_id": "96c2c9520e80ee4fed92f0e1ab859d59fcbdb110",
      "original_commit_id": "c2a5bd68ef60d9c64512b205ff6ea4ce7dca8602",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In cb81bede9b Move cs_wallet lock in CreateTransactionInternal to top of function and Remove extraneous scope in CreateTransactionInternal\r\n\r\nSeems like curly braces were supposed to limit the scope of the lock (?) but I am unsure why it should be released in the middle of `CreateTransation()`. If the intention is to hold this lock for all of `CreateTransaction()` (I don't see why we'd want to release it in between calls to `CreateTransactionInternal()`), why not grab the lock in `CreateTransation()` and annotate that `CreateTransactionInternal()` requires `cs_wallet`?",
      "created_at": "2021-05-28T10:51:44Z",
      "updated_at": "2021-05-28T12:10:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22008#discussion_r641457718",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/641457718"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22008"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2798,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/641492447",
      "pull_request_review_id": 671176599,
      "id": 641492447,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MTQ5MjQ0Nw==",
      "diff_hunk": "@@ -2795,287 +2795,270 @@ bool CWallet::CreateTransactionInternal(\n         FeeCalculation& fee_calc_out,\n         bool sign)\n {\n-    CAmount nValue = 0;\n+    LOCK(cs_wallet);\n+\n+    CMutableTransaction txNew; // The resulting transaction that we make\n+    txNew.nLockTime = GetLocktimeForNewTransaction(chain(), GetLastBlockHash(), GetLastBlockHeight());\n+\n+    CoinSelectionParams coin_selection_params; // Parameters for coin selection, init with dummy\n+    coin_selection_params.m_avoid_partial_spends = coin_control.m_avoid_partial_spends;\n+\n+    CAmount recipients_sum = 0;\n     const OutputType change_type = TransactionChangeType(coin_control.m_change_type ? *coin_control.m_change_type : m_default_change_type, vecSend);\n     ReserveDestination reservedest(this, change_type);\n-    unsigned int nSubtractFeeFromAmount = 0;\n-    for (const auto& recipient : vecSend)\n-    {\n-        if (nValue < 0 || recipient.nAmount < 0)\n-        {\n+    unsigned int outputs_to_subtract_fee_from = 0; // The number of outputs which we are subtracting the fee from\n+    for (const auto& recipient : vecSend) {\n+        if (recipients_sum < 0 || recipient.nAmount < 0) {\n             error = _(\"Transaction amounts must not be negative\");\n             return false;\n         }",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 93,
      "commit_id": "96c2c9520e80ee4fed92f0e1ab859d59fcbdb110",
      "original_commit_id": "c2a5bd68ef60d9c64512b205ff6ea4ce7dca8602",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 806c32f6ef Move empty recipients vector check to beginning in CreateTransaction\r\n\r\nI think this check for non-negative amounts should be moved to the beginning of `CreateTransaction()` as well, since it's a sanitization step similar to checking for empty vector. It doesn't need to be checked more than once (and doesn't need the lock).",
      "created_at": "2021-05-28T11:57:56Z",
      "updated_at": "2021-05-28T12:10:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22008#discussion_r641492447",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/641492447"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22008"
        }
      },
      "start_line": null,
      "original_start_line": 2811,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 2814,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/641493935",
      "pull_request_review_id": 671176599,
      "id": 641493935,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MTQ5MzkzNQ==",
      "diff_hunk": "@@ -2795,287 +2795,270 @@ bool CWallet::CreateTransactionInternal(\n         FeeCalculation& fee_calc_out,\n         bool sign)\n {\n-    CAmount nValue = 0;\n+    LOCK(cs_wallet);\n+\n+    CMutableTransaction txNew; // The resulting transaction that we make\n+    txNew.nLockTime = GetLocktimeForNewTransaction(chain(), GetLastBlockHash(), GetLastBlockHeight());\n+\n+    CoinSelectionParams coin_selection_params; // Parameters for coin selection, init with dummy\n+    coin_selection_params.m_avoid_partial_spends = coin_control.m_avoid_partial_spends;\n+\n+    CAmount recipients_sum = 0;\n     const OutputType change_type = TransactionChangeType(coin_control.m_change_type ? *coin_control.m_change_type : m_default_change_type, vecSend);\n     ReserveDestination reservedest(this, change_type);\n-    unsigned int nSubtractFeeFromAmount = 0;\n-    for (const auto& recipient : vecSend)\n-    {\n-        if (nValue < 0 || recipient.nAmount < 0)\n-        {\n+    unsigned int outputs_to_subtract_fee_from = 0; // The number of outputs which we are subtracting the fee from\n+    for (const auto& recipient : vecSend) {\n+        if (recipients_sum < 0 || recipient.nAmount < 0) {\n             error = _(\"Transaction amounts must not be negative\");\n             return false;\n         }\n-        nValue += recipient.nAmount;\n+        recipients_sum += recipient.nAmount;\n \n-        if (recipient.fSubtractFeeFromAmount)\n-            nSubtractFeeFromAmount++;\n+        if (recipient.fSubtractFeeFromAmount) {\n+            outputs_to_subtract_fee_from++;\n+            coin_selection_params.m_subtract_fee_outputs = true;\n+        }\n     }\n-    if (vecSend.empty())\n-    {\n-        error = _(\"Transaction must have at least one recipient\");\n-        return false;\n+\n+    // Create change script that will be used if we need change\n+    // TODO: pass in scriptChange instead of reservedest so\n+    // change transaction isn't always pay-to-bitcoin-address\n+    CScript scriptChange;\n+\n+    // coin control: send change to custom address\n+    if (!std::get_if<CNoDestination>(&coin_control.destChange)) {\n+        scriptChange = GetScriptForDestination(coin_control.destChange);\n+    } else { // no coin control: send change to newly generated address\n+        // Note: We use a new key here to keep it from being obvious which side is the change.\n+        //  The drawback is that by not reusing a previous key, the change may be lost if a\n+        //  backup is restored, if the backup doesn't have the new private key for the change.\n+        //  If we reused the old key, it would be possible to add code to look for and\n+        //  rediscover unknown transactions that were written with keys of ours to recover\n+        //  post-backup change.\n+\n+        // Reserve a new key pair from key pool. If it fails, provide a dummy\n+        // destination in case we don't need change.\n+        CTxDestination dest;\n+        if (!reservedest.GetReservedDestination(dest, true)) {\n+            error = _(\"Transaction needs a change address, but we can't generate it. Please call keypoolrefill first.\");\n+        }\n+        scriptChange = GetScriptForDestination(dest);\n+        // A valid destination implies a change script (and\n+        // vice-versa). An empty change script will abort later, if the\n+        // change keypool ran out, but change is required.\n+        CHECK_NONFATAL(IsValidDestination(dest) != scriptChange.empty());\n+    }\n+    CTxOut change_prototype_txout(0, scriptChange);\n+    coin_selection_params.change_output_size = GetSerializeSize(change_prototype_txout);\n+\n+    // Get size of spending the change output\n+    int change_spend_size = CalculateMaximumSignedInputSize(change_prototype_txout, this);\n+    // If the wallet doesn't know how to sign change output, assume p2sh-p2wpkh\n+    // as lower-bound to allow BnB to do it's thing\n+    if (change_spend_size == -1) {\n+        coin_selection_params.change_spend_size = DUMMY_NESTED_P2WPKH_INPUT_SIZE;\n+    } else {\n+        coin_selection_params.change_spend_size = (size_t)change_spend_size;\n     }\n \n-    CMutableTransaction txNew;\n+    // Set discard feerate\n+    coin_selection_params.m_discard_feerate = GetDiscardRate(*this);\n+\n+    // Get the fee rate to use effective values in coin selection\n     FeeCalculation feeCalc;\n-    TxSize tx_sizes;\n-    int nBytes;\n-    {\n-        std::set<CInputCoin> setCoins;\n-        LOCK(cs_wallet);\n-        txNew.nLockTime = GetLocktimeForNewTransaction(chain(), GetLastBlockHash(), GetLastBlockHeight());\n-        {\n-            std::vector<COutput> vAvailableCoins;\n-            AvailableCoins(vAvailableCoins, &coin_control, 1, MAX_MONEY, MAX_MONEY, 0);\n-            CoinSelectionParams coin_selection_params; // Parameters for coin selection, init with dummy\n-            coin_selection_params.m_avoid_partial_spends = coin_control.m_avoid_partial_spends;\n-\n-            // Create change script that will be used if we need change\n-            // TODO: pass in scriptChange instead of reservedest so\n-            // change transaction isn't always pay-to-bitcoin-address\n-            CScript scriptChange;\n-\n-            // coin control: send change to custom address\n-            if (!std::get_if<CNoDestination>(&coin_control.destChange)) {\n-                scriptChange = GetScriptForDestination(coin_control.destChange);\n-            } else { // no coin control: send change to newly generated address\n-                // Note: We use a new key here to keep it from being obvious which side is the change.\n-                //  The drawback is that by not reusing a previous key, the change may be lost if a\n-                //  backup is restored, if the backup doesn't have the new private key for the change.\n-                //  If we reused the old key, it would be possible to add code to look for and\n-                //  rediscover unknown transactions that were written with keys of ours to recover\n-                //  post-backup change.\n-\n-                // Reserve a new key pair from key pool. If it fails, provide a dummy\n-                // destination in case we don't need change.\n-                CTxDestination dest;\n-                if (!reservedest.GetReservedDestination(dest, true)) {\n-                    error = _(\"Transaction needs a change address, but we can't generate it. Please call keypoolrefill first.\");\n-                }\n-                scriptChange = GetScriptForDestination(dest);\n-                // A valid destination implies a change script (and\n-                // vice-versa). An empty change script will abort later, if the\n-                // change keypool ran out, but change is required.\n-                CHECK_NONFATAL(IsValidDestination(dest) != scriptChange.empty());\n-            }\n-            CTxOut change_prototype_txout(0, scriptChange);\n-            coin_selection_params.change_output_size = GetSerializeSize(change_prototype_txout);\n-\n-            // Get size of spending the change output\n-            int change_spend_size = CalculateMaximumSignedInputSize(change_prototype_txout, this);\n-            // If the wallet doesn't know how to sign change output, assume p2sh-p2wpkh\n-            // as lower-bound to allow BnB to do it's thing\n-            if (change_spend_size == -1) {\n-                coin_selection_params.change_spend_size = DUMMY_NESTED_P2WPKH_INPUT_SIZE;\n-            } else {\n-                coin_selection_params.change_spend_size = (size_t)change_spend_size;\n-            }\n+    coin_selection_params.m_effective_feerate = GetMinimumFeeRate(*this, coin_control, &feeCalc);\n+    // Do not, ever, assume that it's fine to change the fee rate if the user has explicitly\n+    // provided one\n+    if (coin_control.m_feerate && coin_selection_params.m_effective_feerate > *coin_control.m_feerate) {\n+        error = strprintf(_(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\"), coin_control.m_feerate->ToString(FeeEstimateMode::SAT_VB), coin_selection_params.m_effective_feerate.ToString(FeeEstimateMode::SAT_VB));\n+        return false;\n+    }\n+    if (feeCalc.reason == FeeReason::FALLBACK && !m_allow_fallback_fee) {\n+        // eventually allow a fallback fee\n+        error = _(\"Fee estimation failed. Fallbackfee is disabled. Wait a few blocks or enable -fallbackfee.\");\n+        return false;\n+    }\n \n-            // Set discard feerate\n-            coin_selection_params.m_discard_feerate = GetDiscardRate(*this);\n+    // Get long term estimate\n+    CCoinControl cc_temp;\n+    cc_temp.m_confirm_target = chain().estimateMaxBlocks();\n+    coin_selection_params.m_long_term_feerate = GetMinimumFeeRate(*this, cc_temp, nullptr);\n \n-            // Get the fee rate to use effective values in coin selection\n-            coin_selection_params.m_effective_feerate = GetMinimumFeeRate(*this, coin_control, &feeCalc);\n-            // Do not, ever, assume that it's fine to change the fee rate if the user has explicitly\n-            // provided one\n-            if (coin_control.m_feerate && coin_selection_params.m_effective_feerate > *coin_control.m_feerate) {\n-                error = strprintf(_(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\"), coin_control.m_feerate->ToString(FeeEstimateMode::SAT_VB), coin_selection_params.m_effective_feerate.ToString(FeeEstimateMode::SAT_VB));\n-                return false;\n-            }\n-            if (feeCalc.reason == FeeReason::FALLBACK && !m_allow_fallback_fee) {\n-                // eventually allow a fallback fee\n-                error = _(\"Fee estimation failed. Fallbackfee is disabled. Wait a few blocks or enable -fallbackfee.\");\n-                return false;\n-            }\n+    // Calculate the cost of change\n+    // Cost of change is the cost of creating the change output + cost of spending the change output in the future.\n+    // For creating the change output now, we use the effective feerate.\n+    // For spending the change output in the future, we use the discard feerate for now.\n+    // So cost of change = (change output size * effective feerate) + (size of spending change output * discard feerate)\n+    coin_selection_params.m_change_fee = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.change_output_size);\n+    coin_selection_params.m_cost_of_change = coin_selection_params.m_discard_feerate.GetFee(coin_selection_params.change_spend_size) + coin_selection_params.m_change_fee;\n \n-            // Get long term estimate\n-            CCoinControl cc_temp;\n-            cc_temp.m_confirm_target = chain().estimateMaxBlocks();\n-            coin_selection_params.m_long_term_feerate = GetMinimumFeeRate(*this, cc_temp, nullptr);\n+    // vouts to the payees\n+    if (!coin_selection_params.m_subtract_fee_outputs) {\n+        coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+    }\n+    for (const auto& recipient : vecSend)\n+    {\n+        CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n \n-            // Calculate the cost of change\n-            // Cost of change is the cost of creating the change output + cost of spending the change output in the future.\n-            // For creating the change output now, we use the effective feerate.\n-            // For spending the change output in the future, we use the discard feerate for now.\n-            // So cost of change = (change output size * effective feerate) + (size of spending change output * discard feerate)\n-            coin_selection_params.m_change_fee = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.change_output_size);\n-            coin_selection_params.m_cost_of_change = coin_selection_params.m_discard_feerate.GetFee(coin_selection_params.change_spend_size) + coin_selection_params.m_change_fee;\n+        // Include the fee cost for outputs.\n+        if (!coin_selection_params.m_subtract_fee_outputs) {\n+            coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n+        }\n \n-            coin_selection_params.m_subtract_fee_outputs = nSubtractFeeFromAmount != 0; // If we are doing subtract fee from recipient, don't use effective values\n+        if (IsDust(txout, chain().relayDustFee()))\n+        {\n+            error = _(\"Transaction amount too small\");\n+            return false;\n+        }\n+        txNew.vout.push_back(txout);\n+    }\n \n-            // vouts to the payees\n-            if (!coin_selection_params.m_subtract_fee_outputs) {\n-                coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n-            }\n-            for (const auto& recipient : vecSend)\n-            {\n-                CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n+    // Include the fees for things that aren't inputs, excluding the change output\n+    const CAmount not_input_fees = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.tx_noinputs_size);\n+    CAmount selection_target = recipients_sum + not_input_fees;\n \n-                // Include the fee cost for outputs.\n-                if (!coin_selection_params.m_subtract_fee_outputs) {\n-                    coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n-                }\n+    // Get available coins\n+    std::vector<COutput> vAvailableCoins;\n+    AvailableCoins(vAvailableCoins, &coin_control, 1, MAX_MONEY, MAX_MONEY, 0);\n \n-                if (IsDust(txout, chain().relayDustFee()))\n-                {\n-                    error = _(\"Transaction amount too small\");\n-                    return false;\n-                }\n-                txNew.vout.push_back(txout);\n-            }\n+    // Choose coins to use\n+    CAmount inputs_sum = 0;\n+    std::set<CInputCoin> setCoins;\n+    if (!SelectCoins(vAvailableCoins, /* nTargetValue */ selection_target, setCoins, inputs_sum, coin_control, coin_selection_params))\n+    {\n+        error = _(\"Insufficient funds\");\n+        return false;\n+    }\n \n-            // Include the fees for things that aren't inputs, excluding the change output\n-            const CAmount not_input_fees = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.tx_noinputs_size);\n-            CAmount nValueToSelect = nValue + not_input_fees;\n+    // Always make a change output\n+    // We will reduce the fee from this change output later, and remove the output if it is too small.\n+    const CAmount change_and_fee = inputs_sum - recipients_sum;\n+    assert(change_and_fee >= 0);\n+    CTxOut newTxOut(change_and_fee, scriptChange);\n \n-            // Choose coins to use\n-            CAmount inputs_sum = 0;\n-            setCoins.clear();\n-            if (!SelectCoins(vAvailableCoins, /* nTargetValue */ nValueToSelect, setCoins, inputs_sum, coin_control, coin_selection_params))\n-            {\n-                error = _(\"Insufficient funds\");\n-                return false;\n-            }\n+    if (nChangePosInOut == -1)\n+    {\n+        // Insert change txn at random position:\n+        nChangePosInOut = GetRandInt(txNew.vout.size()+1);\n+    }\n+    else if ((unsigned int)nChangePosInOut > txNew.vout.size())\n+    {\n+        error = _(\"Change index out of range\");\n+        return false;\n+    }\n \n-            // Always make a change output\n-            // We will reduce the fee from this change output later, and remove the output if it is too small.\n-            const CAmount change_and_fee = inputs_sum - nValue;\n-            assert(change_and_fee >= 0);\n-            CTxOut newTxOut(change_and_fee, scriptChange);\n+    assert(nChangePosInOut != -1);\n+    auto change_position = txNew.vout.insert(txNew.vout.begin() + nChangePosInOut, newTxOut);\n \n-            if (nChangePosInOut == -1)\n-            {\n-                // Insert change txn at random position:\n-                nChangePosInOut = GetRandInt(txNew.vout.size()+1);\n-            }\n-            else if ((unsigned int)nChangePosInOut > txNew.vout.size())\n-            {\n-                error = _(\"Change index out of range\");\n-                return false;\n-            }\n+    // Shuffle selected coins and fill in final vin\n+    std::vector<CInputCoin> selected_coins(setCoins.begin(), setCoins.end());\n+    Shuffle(selected_coins.begin(), selected_coins.end(), FastRandomContext());\n \n-            assert(nChangePosInOut != -1);\n-            auto change_position = txNew.vout.insert(txNew.vout.begin() + nChangePosInOut, newTxOut);\n+    // Note how the sequence number is set to non-maxint so that\n+    // the nLockTime set above actually works.\n+    //\n+    // BIP125 defines opt-in RBF as any nSequence < maxint-1, so\n+    // we use the highest possible value in that range (maxint-2)\n+    // to avoid conflicting with other possible uses of nSequence,\n+    // and in the spirit of \"smallest possible change from prior\n+    // behavior.\"\n+    const uint32_t nSequence = coin_control.m_signal_bip125_rbf.value_or(m_signal_rbf) ? MAX_BIP125_RBF_SEQUENCE : (CTxIn::SEQUENCE_FINAL - 1);\n+    for (const auto& coin : selected_coins) {\n+        txNew.vin.push_back(CTxIn(coin.outpoint, CScript(), nSequence));\n+    }\n+\n+    // Calculate the transaction fee\n+    TxSize tx_sizes = CalculateMaximumSignedTxSize(CTransaction(txNew), this, coin_control.fAllowWatchOnly);\n+    int nBytes = tx_sizes.vsize;\n+    if (nBytes < 0) {\n+        error = _(\"Signing transaction failed\");\n+        return false;\n+    }\n+    nFeeRet = coin_selection_params.m_effective_feerate.GetFee(nBytes);\n \n-            // Dummy fill vin for maximum size estimation\n-            //\n-            for (const auto& coin : setCoins) {\n-                txNew.vin.push_back(CTxIn(coin.outpoint,CScript()));\n-            }\n+    // Subtract fee from the change output if not subtrating it from recipient outputs",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 396,
      "commit_id": "96c2c9520e80ee4fed92f0e1ab859d59fcbdb110",
      "original_commit_id": "c2a5bd68ef60d9c64512b205ff6ea4ce7dca8602",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In bc0035a417 Remove extraneous scope in CreateTransactionInternal\r\n\r\n```suggestion\r\n    // Subtract fee from the change output if not subtracting it from recipient outputs\r\n```",
      "created_at": "2021-05-28T12:00:35Z",
      "updated_at": "2021-05-28T12:13:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22008#discussion_r641493935",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/641493935"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22008"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2979,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/641497754",
      "pull_request_review_id": 671176599,
      "id": 641497754,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MTQ5Nzc1NA==",
      "diff_hunk": "@@ -2795,287 +2795,270 @@ bool CWallet::CreateTransactionInternal(\n         FeeCalculation& fee_calc_out,\n         bool sign)\n {\n-    CAmount nValue = 0;\n+    LOCK(cs_wallet);\n+\n+    CMutableTransaction txNew; // The resulting transaction that we make\n+    txNew.nLockTime = GetLocktimeForNewTransaction(chain(), GetLastBlockHash(), GetLastBlockHeight());\n+\n+    CoinSelectionParams coin_selection_params; // Parameters for coin selection, init with dummy\n+    coin_selection_params.m_avoid_partial_spends = coin_control.m_avoid_partial_spends;\n+\n+    CAmount recipients_sum = 0;\n     const OutputType change_type = TransactionChangeType(coin_control.m_change_type ? *coin_control.m_change_type : m_default_change_type, vecSend);\n     ReserveDestination reservedest(this, change_type);\n-    unsigned int nSubtractFeeFromAmount = 0;\n-    for (const auto& recipient : vecSend)\n-    {\n-        if (nValue < 0 || recipient.nAmount < 0)\n-        {\n+    unsigned int outputs_to_subtract_fee_from = 0; // The number of outputs which we are subtracting the fee from\n+    for (const auto& recipient : vecSend) {\n+        if (recipients_sum < 0 || recipient.nAmount < 0) {\n             error = _(\"Transaction amounts must not be negative\");\n             return false;\n         }",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 93,
      "commit_id": "96c2c9520e80ee4fed92f0e1ab859d59fcbdb110",
      "original_commit_id": "c2a5bd68ef60d9c64512b205ff6ea4ce7dca8602",
      "in_reply_to_id": 641492447,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It could also be\r\n\r\n```c++\r\nif (std::any_of(vecSend.cbegin(), vecSend.cend(), [](const auto& recipient){ return recipient.nAmount < 0; }))\r\n```",
      "created_at": "2021-05-28T12:07:35Z",
      "updated_at": "2021-05-28T12:10:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22008#discussion_r641497754",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/641497754"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22008"
        }
      },
      "start_line": null,
      "original_start_line": 2811,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 2814,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/641703339",
      "pull_request_review_id": 671507724,
      "id": 641703339,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MTcwMzMzOQ==",
      "diff_hunk": "@@ -2798,6 +2798,12 @@ bool CWallet::CreateTransactionInternal(\n {\n     LOCK(cs_wallet);\n \n+    CMutableTransaction txNew; // The resulting transaction that we make\n+    txNew.nLockTime = GetLocktimeForNewTransaction(chain(), GetLastBlockHash(), GetLastBlockHeight());\n+\n+    CoinSelectionParams coin_selection_params; // Parameters for coin selection, init with dummy\n+    coin_selection_params.m_avoid_partial_spends = coin_control.m_avoid_partial_spends;",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 8,
      "commit_id": "96c2c9520e80ee4fed92f0e1ab859d59fcbdb110",
      "original_commit_id": "d58f1fb0fdd43ed186073f9db477d9afd760c637",
      "in_reply_to_id": 639880355,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed.",
      "created_at": "2021-05-28T17:22:27Z",
      "updated_at": "2021-05-28T17:22:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22008#discussion_r641703339",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/641703339"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22008"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2804,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/641703409",
      "pull_request_review_id": 671507826,
      "id": 641703409,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MTcwMzQwOQ==",
      "diff_hunk": "@@ -2795,287 +2795,270 @@ bool CWallet::CreateTransactionInternal(\n         FeeCalculation& fee_calc_out,\n         bool sign)\n {\n-    CAmount nValue = 0;\n+    LOCK(cs_wallet);",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 72,
      "commit_id": "96c2c9520e80ee4fed92f0e1ab859d59fcbdb110",
      "original_commit_id": "c2a5bd68ef60d9c64512b205ff6ea4ce7dca8602",
      "in_reply_to_id": 641457718,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2021-05-28T17:22:34Z",
      "updated_at": "2021-05-28T17:22:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22008#discussion_r641703409",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/641703409"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22008"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2798,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/641703449",
      "pull_request_review_id": 671507872,
      "id": 641703449,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MTcwMzQ0OQ==",
      "diff_hunk": "@@ -2795,287 +2795,270 @@ bool CWallet::CreateTransactionInternal(\n         FeeCalculation& fee_calc_out,\n         bool sign)\n {\n-    CAmount nValue = 0;\n+    LOCK(cs_wallet);\n+\n+    CMutableTransaction txNew; // The resulting transaction that we make\n+    txNew.nLockTime = GetLocktimeForNewTransaction(chain(), GetLastBlockHash(), GetLastBlockHeight());\n+\n+    CoinSelectionParams coin_selection_params; // Parameters for coin selection, init with dummy\n+    coin_selection_params.m_avoid_partial_spends = coin_control.m_avoid_partial_spends;\n+\n+    CAmount recipients_sum = 0;\n     const OutputType change_type = TransactionChangeType(coin_control.m_change_type ? *coin_control.m_change_type : m_default_change_type, vecSend);\n     ReserveDestination reservedest(this, change_type);\n-    unsigned int nSubtractFeeFromAmount = 0;\n-    for (const auto& recipient : vecSend)\n-    {\n-        if (nValue < 0 || recipient.nAmount < 0)\n-        {\n+    unsigned int outputs_to_subtract_fee_from = 0; // The number of outputs which we are subtracting the fee from\n+    for (const auto& recipient : vecSend) {\n+        if (recipients_sum < 0 || recipient.nAmount < 0) {\n             error = _(\"Transaction amounts must not be negative\");\n             return false;\n         }",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 93,
      "commit_id": "96c2c9520e80ee4fed92f0e1ab859d59fcbdb110",
      "original_commit_id": "c2a5bd68ef60d9c64512b205ff6ea4ce7dca8602",
      "in_reply_to_id": 641492447,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2021-05-28T17:22:39Z",
      "updated_at": "2021-05-28T17:22:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22008#discussion_r641703449",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/641703449"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22008"
        }
      },
      "start_line": null,
      "original_start_line": 2811,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 2814,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/641703512",
      "pull_request_review_id": 671507973,
      "id": 641703512,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MTcwMzUxMg==",
      "diff_hunk": "@@ -2795,287 +2795,270 @@ bool CWallet::CreateTransactionInternal(\n         FeeCalculation& fee_calc_out,\n         bool sign)\n {\n-    CAmount nValue = 0;\n+    LOCK(cs_wallet);\n+\n+    CMutableTransaction txNew; // The resulting transaction that we make\n+    txNew.nLockTime = GetLocktimeForNewTransaction(chain(), GetLastBlockHash(), GetLastBlockHeight());\n+\n+    CoinSelectionParams coin_selection_params; // Parameters for coin selection, init with dummy\n+    coin_selection_params.m_avoid_partial_spends = coin_control.m_avoid_partial_spends;\n+\n+    CAmount recipients_sum = 0;\n     const OutputType change_type = TransactionChangeType(coin_control.m_change_type ? *coin_control.m_change_type : m_default_change_type, vecSend);\n     ReserveDestination reservedest(this, change_type);\n-    unsigned int nSubtractFeeFromAmount = 0;\n-    for (const auto& recipient : vecSend)\n-    {\n-        if (nValue < 0 || recipient.nAmount < 0)\n-        {\n+    unsigned int outputs_to_subtract_fee_from = 0; // The number of outputs which we are subtracting the fee from\n+    for (const auto& recipient : vecSend) {\n+        if (recipients_sum < 0 || recipient.nAmount < 0) {\n             error = _(\"Transaction amounts must not be negative\");\n             return false;\n         }\n-        nValue += recipient.nAmount;\n+        recipients_sum += recipient.nAmount;\n \n-        if (recipient.fSubtractFeeFromAmount)\n-            nSubtractFeeFromAmount++;\n+        if (recipient.fSubtractFeeFromAmount) {\n+            outputs_to_subtract_fee_from++;\n+            coin_selection_params.m_subtract_fee_outputs = true;\n+        }\n     }\n-    if (vecSend.empty())\n-    {\n-        error = _(\"Transaction must have at least one recipient\");\n-        return false;\n+\n+    // Create change script that will be used if we need change\n+    // TODO: pass in scriptChange instead of reservedest so\n+    // change transaction isn't always pay-to-bitcoin-address\n+    CScript scriptChange;\n+\n+    // coin control: send change to custom address\n+    if (!std::get_if<CNoDestination>(&coin_control.destChange)) {\n+        scriptChange = GetScriptForDestination(coin_control.destChange);\n+    } else { // no coin control: send change to newly generated address\n+        // Note: We use a new key here to keep it from being obvious which side is the change.\n+        //  The drawback is that by not reusing a previous key, the change may be lost if a\n+        //  backup is restored, if the backup doesn't have the new private key for the change.\n+        //  If we reused the old key, it would be possible to add code to look for and\n+        //  rediscover unknown transactions that were written with keys of ours to recover\n+        //  post-backup change.\n+\n+        // Reserve a new key pair from key pool. If it fails, provide a dummy\n+        // destination in case we don't need change.\n+        CTxDestination dest;\n+        if (!reservedest.GetReservedDestination(dest, true)) {\n+            error = _(\"Transaction needs a change address, but we can't generate it. Please call keypoolrefill first.\");\n+        }\n+        scriptChange = GetScriptForDestination(dest);\n+        // A valid destination implies a change script (and\n+        // vice-versa). An empty change script will abort later, if the\n+        // change keypool ran out, but change is required.\n+        CHECK_NONFATAL(IsValidDestination(dest) != scriptChange.empty());\n+    }\n+    CTxOut change_prototype_txout(0, scriptChange);\n+    coin_selection_params.change_output_size = GetSerializeSize(change_prototype_txout);\n+\n+    // Get size of spending the change output\n+    int change_spend_size = CalculateMaximumSignedInputSize(change_prototype_txout, this);\n+    // If the wallet doesn't know how to sign change output, assume p2sh-p2wpkh\n+    // as lower-bound to allow BnB to do it's thing\n+    if (change_spend_size == -1) {\n+        coin_selection_params.change_spend_size = DUMMY_NESTED_P2WPKH_INPUT_SIZE;\n+    } else {\n+        coin_selection_params.change_spend_size = (size_t)change_spend_size;\n     }\n \n-    CMutableTransaction txNew;\n+    // Set discard feerate\n+    coin_selection_params.m_discard_feerate = GetDiscardRate(*this);\n+\n+    // Get the fee rate to use effective values in coin selection\n     FeeCalculation feeCalc;\n-    TxSize tx_sizes;\n-    int nBytes;\n-    {\n-        std::set<CInputCoin> setCoins;\n-        LOCK(cs_wallet);\n-        txNew.nLockTime = GetLocktimeForNewTransaction(chain(), GetLastBlockHash(), GetLastBlockHeight());\n-        {\n-            std::vector<COutput> vAvailableCoins;\n-            AvailableCoins(vAvailableCoins, &coin_control, 1, MAX_MONEY, MAX_MONEY, 0);\n-            CoinSelectionParams coin_selection_params; // Parameters for coin selection, init with dummy\n-            coin_selection_params.m_avoid_partial_spends = coin_control.m_avoid_partial_spends;\n-\n-            // Create change script that will be used if we need change\n-            // TODO: pass in scriptChange instead of reservedest so\n-            // change transaction isn't always pay-to-bitcoin-address\n-            CScript scriptChange;\n-\n-            // coin control: send change to custom address\n-            if (!std::get_if<CNoDestination>(&coin_control.destChange)) {\n-                scriptChange = GetScriptForDestination(coin_control.destChange);\n-            } else { // no coin control: send change to newly generated address\n-                // Note: We use a new key here to keep it from being obvious which side is the change.\n-                //  The drawback is that by not reusing a previous key, the change may be lost if a\n-                //  backup is restored, if the backup doesn't have the new private key for the change.\n-                //  If we reused the old key, it would be possible to add code to look for and\n-                //  rediscover unknown transactions that were written with keys of ours to recover\n-                //  post-backup change.\n-\n-                // Reserve a new key pair from key pool. If it fails, provide a dummy\n-                // destination in case we don't need change.\n-                CTxDestination dest;\n-                if (!reservedest.GetReservedDestination(dest, true)) {\n-                    error = _(\"Transaction needs a change address, but we can't generate it. Please call keypoolrefill first.\");\n-                }\n-                scriptChange = GetScriptForDestination(dest);\n-                // A valid destination implies a change script (and\n-                // vice-versa). An empty change script will abort later, if the\n-                // change keypool ran out, but change is required.\n-                CHECK_NONFATAL(IsValidDestination(dest) != scriptChange.empty());\n-            }\n-            CTxOut change_prototype_txout(0, scriptChange);\n-            coin_selection_params.change_output_size = GetSerializeSize(change_prototype_txout);\n-\n-            // Get size of spending the change output\n-            int change_spend_size = CalculateMaximumSignedInputSize(change_prototype_txout, this);\n-            // If the wallet doesn't know how to sign change output, assume p2sh-p2wpkh\n-            // as lower-bound to allow BnB to do it's thing\n-            if (change_spend_size == -1) {\n-                coin_selection_params.change_spend_size = DUMMY_NESTED_P2WPKH_INPUT_SIZE;\n-            } else {\n-                coin_selection_params.change_spend_size = (size_t)change_spend_size;\n-            }\n+    coin_selection_params.m_effective_feerate = GetMinimumFeeRate(*this, coin_control, &feeCalc);\n+    // Do not, ever, assume that it's fine to change the fee rate if the user has explicitly\n+    // provided one\n+    if (coin_control.m_feerate && coin_selection_params.m_effective_feerate > *coin_control.m_feerate) {\n+        error = strprintf(_(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\"), coin_control.m_feerate->ToString(FeeEstimateMode::SAT_VB), coin_selection_params.m_effective_feerate.ToString(FeeEstimateMode::SAT_VB));\n+        return false;\n+    }\n+    if (feeCalc.reason == FeeReason::FALLBACK && !m_allow_fallback_fee) {\n+        // eventually allow a fallback fee\n+        error = _(\"Fee estimation failed. Fallbackfee is disabled. Wait a few blocks or enable -fallbackfee.\");\n+        return false;\n+    }\n \n-            // Set discard feerate\n-            coin_selection_params.m_discard_feerate = GetDiscardRate(*this);\n+    // Get long term estimate\n+    CCoinControl cc_temp;\n+    cc_temp.m_confirm_target = chain().estimateMaxBlocks();\n+    coin_selection_params.m_long_term_feerate = GetMinimumFeeRate(*this, cc_temp, nullptr);\n \n-            // Get the fee rate to use effective values in coin selection\n-            coin_selection_params.m_effective_feerate = GetMinimumFeeRate(*this, coin_control, &feeCalc);\n-            // Do not, ever, assume that it's fine to change the fee rate if the user has explicitly\n-            // provided one\n-            if (coin_control.m_feerate && coin_selection_params.m_effective_feerate > *coin_control.m_feerate) {\n-                error = strprintf(_(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\"), coin_control.m_feerate->ToString(FeeEstimateMode::SAT_VB), coin_selection_params.m_effective_feerate.ToString(FeeEstimateMode::SAT_VB));\n-                return false;\n-            }\n-            if (feeCalc.reason == FeeReason::FALLBACK && !m_allow_fallback_fee) {\n-                // eventually allow a fallback fee\n-                error = _(\"Fee estimation failed. Fallbackfee is disabled. Wait a few blocks or enable -fallbackfee.\");\n-                return false;\n-            }\n+    // Calculate the cost of change\n+    // Cost of change is the cost of creating the change output + cost of spending the change output in the future.\n+    // For creating the change output now, we use the effective feerate.\n+    // For spending the change output in the future, we use the discard feerate for now.\n+    // So cost of change = (change output size * effective feerate) + (size of spending change output * discard feerate)\n+    coin_selection_params.m_change_fee = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.change_output_size);\n+    coin_selection_params.m_cost_of_change = coin_selection_params.m_discard_feerate.GetFee(coin_selection_params.change_spend_size) + coin_selection_params.m_change_fee;\n \n-            // Get long term estimate\n-            CCoinControl cc_temp;\n-            cc_temp.m_confirm_target = chain().estimateMaxBlocks();\n-            coin_selection_params.m_long_term_feerate = GetMinimumFeeRate(*this, cc_temp, nullptr);\n+    // vouts to the payees\n+    if (!coin_selection_params.m_subtract_fee_outputs) {\n+        coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+    }\n+    for (const auto& recipient : vecSend)\n+    {\n+        CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n \n-            // Calculate the cost of change\n-            // Cost of change is the cost of creating the change output + cost of spending the change output in the future.\n-            // For creating the change output now, we use the effective feerate.\n-            // For spending the change output in the future, we use the discard feerate for now.\n-            // So cost of change = (change output size * effective feerate) + (size of spending change output * discard feerate)\n-            coin_selection_params.m_change_fee = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.change_output_size);\n-            coin_selection_params.m_cost_of_change = coin_selection_params.m_discard_feerate.GetFee(coin_selection_params.change_spend_size) + coin_selection_params.m_change_fee;\n+        // Include the fee cost for outputs.\n+        if (!coin_selection_params.m_subtract_fee_outputs) {\n+            coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n+        }\n \n-            coin_selection_params.m_subtract_fee_outputs = nSubtractFeeFromAmount != 0; // If we are doing subtract fee from recipient, don't use effective values\n+        if (IsDust(txout, chain().relayDustFee()))\n+        {\n+            error = _(\"Transaction amount too small\");\n+            return false;\n+        }\n+        txNew.vout.push_back(txout);\n+    }\n \n-            // vouts to the payees\n-            if (!coin_selection_params.m_subtract_fee_outputs) {\n-                coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n-            }\n-            for (const auto& recipient : vecSend)\n-            {\n-                CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n+    // Include the fees for things that aren't inputs, excluding the change output\n+    const CAmount not_input_fees = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.tx_noinputs_size);\n+    CAmount selection_target = recipients_sum + not_input_fees;\n \n-                // Include the fee cost for outputs.\n-                if (!coin_selection_params.m_subtract_fee_outputs) {\n-                    coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n-                }\n+    // Get available coins\n+    std::vector<COutput> vAvailableCoins;\n+    AvailableCoins(vAvailableCoins, &coin_control, 1, MAX_MONEY, MAX_MONEY, 0);\n \n-                if (IsDust(txout, chain().relayDustFee()))\n-                {\n-                    error = _(\"Transaction amount too small\");\n-                    return false;\n-                }\n-                txNew.vout.push_back(txout);\n-            }\n+    // Choose coins to use\n+    CAmount inputs_sum = 0;\n+    std::set<CInputCoin> setCoins;\n+    if (!SelectCoins(vAvailableCoins, /* nTargetValue */ selection_target, setCoins, inputs_sum, coin_control, coin_selection_params))\n+    {\n+        error = _(\"Insufficient funds\");\n+        return false;\n+    }\n \n-            // Include the fees for things that aren't inputs, excluding the change output\n-            const CAmount not_input_fees = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.tx_noinputs_size);\n-            CAmount nValueToSelect = nValue + not_input_fees;\n+    // Always make a change output\n+    // We will reduce the fee from this change output later, and remove the output if it is too small.\n+    const CAmount change_and_fee = inputs_sum - recipients_sum;\n+    assert(change_and_fee >= 0);\n+    CTxOut newTxOut(change_and_fee, scriptChange);\n \n-            // Choose coins to use\n-            CAmount inputs_sum = 0;\n-            setCoins.clear();\n-            if (!SelectCoins(vAvailableCoins, /* nTargetValue */ nValueToSelect, setCoins, inputs_sum, coin_control, coin_selection_params))\n-            {\n-                error = _(\"Insufficient funds\");\n-                return false;\n-            }\n+    if (nChangePosInOut == -1)\n+    {\n+        // Insert change txn at random position:\n+        nChangePosInOut = GetRandInt(txNew.vout.size()+1);\n+    }\n+    else if ((unsigned int)nChangePosInOut > txNew.vout.size())\n+    {\n+        error = _(\"Change index out of range\");\n+        return false;\n+    }\n \n-            // Always make a change output\n-            // We will reduce the fee from this change output later, and remove the output if it is too small.\n-            const CAmount change_and_fee = inputs_sum - nValue;\n-            assert(change_and_fee >= 0);\n-            CTxOut newTxOut(change_and_fee, scriptChange);\n+    assert(nChangePosInOut != -1);\n+    auto change_position = txNew.vout.insert(txNew.vout.begin() + nChangePosInOut, newTxOut);\n \n-            if (nChangePosInOut == -1)\n-            {\n-                // Insert change txn at random position:\n-                nChangePosInOut = GetRandInt(txNew.vout.size()+1);\n-            }\n-            else if ((unsigned int)nChangePosInOut > txNew.vout.size())\n-            {\n-                error = _(\"Change index out of range\");\n-                return false;\n-            }\n+    // Shuffle selected coins and fill in final vin\n+    std::vector<CInputCoin> selected_coins(setCoins.begin(), setCoins.end());\n+    Shuffle(selected_coins.begin(), selected_coins.end(), FastRandomContext());\n \n-            assert(nChangePosInOut != -1);\n-            auto change_position = txNew.vout.insert(txNew.vout.begin() + nChangePosInOut, newTxOut);\n+    // Note how the sequence number is set to non-maxint so that\n+    // the nLockTime set above actually works.\n+    //\n+    // BIP125 defines opt-in RBF as any nSequence < maxint-1, so\n+    // we use the highest possible value in that range (maxint-2)\n+    // to avoid conflicting with other possible uses of nSequence,\n+    // and in the spirit of \"smallest possible change from prior\n+    // behavior.\"\n+    const uint32_t nSequence = coin_control.m_signal_bip125_rbf.value_or(m_signal_rbf) ? MAX_BIP125_RBF_SEQUENCE : (CTxIn::SEQUENCE_FINAL - 1);\n+    for (const auto& coin : selected_coins) {\n+        txNew.vin.push_back(CTxIn(coin.outpoint, CScript(), nSequence));\n+    }\n+\n+    // Calculate the transaction fee\n+    TxSize tx_sizes = CalculateMaximumSignedTxSize(CTransaction(txNew), this, coin_control.fAllowWatchOnly);\n+    int nBytes = tx_sizes.vsize;\n+    if (nBytes < 0) {\n+        error = _(\"Signing transaction failed\");\n+        return false;\n+    }\n+    nFeeRet = coin_selection_params.m_effective_feerate.GetFee(nBytes);\n \n-            // Dummy fill vin for maximum size estimation\n-            //\n-            for (const auto& coin : setCoins) {\n-                txNew.vin.push_back(CTxIn(coin.outpoint,CScript()));\n-            }\n+    // Subtract fee from the change output if not subtrating it from recipient outputs",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 396,
      "commit_id": "96c2c9520e80ee4fed92f0e1ab859d59fcbdb110",
      "original_commit_id": "c2a5bd68ef60d9c64512b205ff6ea4ce7dca8602",
      "in_reply_to_id": 641493935,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2021-05-28T17:22:46Z",
      "updated_at": "2021-05-28T17:22:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22008#discussion_r641703512",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/641703512"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22008"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2979,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/644911809",
      "pull_request_review_id": 675439314,
      "id": 644911809,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0NDkxMTgwOQ==",
      "diff_hunk": "@@ -578,287 +578,266 @@ bool CWallet::CreateTransactionInternal(\n         FeeCalculation& fee_calc_out,\n         bool sign)\n {\n-    CAmount nValue = 0;\n+    AssertLockHeld(cs_wallet);\n+\n+    CMutableTransaction txNew; // The resulting transaction that we make\n+    txNew.nLockTime = GetLocktimeForNewTransaction(chain(), GetLastBlockHash(), GetLastBlockHeight());\n+\n+    CoinSelectionParams coin_selection_params; // Parameters for coin selection, init with dummy\n+    coin_selection_params.m_avoid_partial_spends = coin_control.m_avoid_partial_spends;\n+\n+    CAmount recipients_sum = 0;\n     const OutputType change_type = TransactionChangeType(coin_control.m_change_type ? *coin_control.m_change_type : m_default_change_type, vecSend);\n     ReserveDestination reservedest(this, change_type);\n-    unsigned int nSubtractFeeFromAmount = 0;\n-    for (const auto& recipient : vecSend)\n-    {\n-        if (nValue < 0 || recipient.nAmount < 0)\n-        {\n-            error = _(\"Transaction amounts must not be negative\");\n-            return false;\n+    unsigned int outputs_to_subtract_fee_from = 0; // The number of outputs which we are subtracting the fee from\n+    for (const auto& recipient : vecSend) {\n+        recipients_sum += recipient.nAmount;\n+\n+        if (recipient.fSubtractFeeFromAmount) {\n+            outputs_to_subtract_fee_from++;\n+            coin_selection_params.m_subtract_fee_outputs = true;\n         }\n-        nValue += recipient.nAmount;\n+    }\n \n-        if (recipient.fSubtractFeeFromAmount)\n-            nSubtractFeeFromAmount++;\n+    // Create change script that will be used if we need change\n+    // TODO: pass in scriptChange instead of reservedest so\n+    // change transaction isn't always pay-to-bitcoin-address\n+    CScript scriptChange;\n+\n+    // coin control: send change to custom address\n+    if (!std::get_if<CNoDestination>(&coin_control.destChange)) {\n+        scriptChange = GetScriptForDestination(coin_control.destChange);\n+    } else { // no coin control: send change to newly generated address\n+        // Note: We use a new key here to keep it from being obvious which side is the change.\n+        //  The drawback is that by not reusing a previous key, the change may be lost if a\n+        //  backup is restored, if the backup doesn't have the new private key for the change.\n+        //  If we reused the old key, it would be possible to add code to look for and\n+        //  rediscover unknown transactions that were written with keys of ours to recover\n+        //  post-backup change.\n+\n+        // Reserve a new key pair from key pool. If it fails, provide a dummy\n+        // destination in case we don't need change.\n+        CTxDestination dest;\n+        if (!reservedest.GetReservedDestination(dest, true)) {\n+            error = _(\"Transaction needs a change address, but we can't generate it. Please call keypoolrefill first.\");\n+        }\n+        scriptChange = GetScriptForDestination(dest);\n+        // A valid destination implies a change script (and\n+        // vice-versa). An empty change script will abort later, if the\n+        // change keypool ran out, but change is required.\n+        CHECK_NONFATAL(IsValidDestination(dest) != scriptChange.empty());\n     }\n-    if (vecSend.empty())\n-    {\n-        error = _(\"Transaction must have at least one recipient\");\n-        return false;\n+    CTxOut change_prototype_txout(0, scriptChange);\n+    coin_selection_params.change_output_size = GetSerializeSize(change_prototype_txout);\n+\n+    // Get size of spending the change output\n+    int change_spend_size = CalculateMaximumSignedInputSize(change_prototype_txout, this);\n+    // If the wallet doesn't know how to sign change output, assume p2sh-p2wpkh\n+    // as lower-bound to allow BnB to do it's thing\n+    if (change_spend_size == -1) {\n+        coin_selection_params.change_spend_size = DUMMY_NESTED_P2WPKH_INPUT_SIZE;\n+    } else {\n+        coin_selection_params.change_spend_size = (size_t)change_spend_size;\n     }\n \n-    CMutableTransaction txNew;\n+    // Set discard feerate\n+    coin_selection_params.m_discard_feerate = GetDiscardRate(*this);\n+\n+    // Get the fee rate to use effective values in coin selection\n     FeeCalculation feeCalc;\n-    TxSize tx_sizes;\n-    int nBytes;\n+    coin_selection_params.m_effective_feerate = GetMinimumFeeRate(*this, coin_control, &feeCalc);\n+    // Do not, ever, assume that it's fine to change the fee rate if the user has explicitly\n+    // provided one\n+    if (coin_control.m_feerate && coin_selection_params.m_effective_feerate > *coin_control.m_feerate) {\n+        error = strprintf(_(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\"), coin_control.m_feerate->ToString(FeeEstimateMode::SAT_VB), coin_selection_params.m_effective_feerate.ToString(FeeEstimateMode::SAT_VB));\n+        return false;\n+    }\n+    if (feeCalc.reason == FeeReason::FALLBACK && !m_allow_fallback_fee) {\n+        // eventually allow a fallback fee\n+        error = _(\"Fee estimation failed. Fallbackfee is disabled. Wait a few blocks or enable -fallbackfee.\");\n+        return false;\n+    }\n+\n+    // Get long term estimate\n+    CCoinControl cc_temp;\n+    cc_temp.m_confirm_target = chain().estimateMaxBlocks();\n+    coin_selection_params.m_long_term_feerate = GetMinimumFeeRate(*this, cc_temp, nullptr);\n+\n+    // Calculate the cost of change\n+    // Cost of change is the cost of creating the change output + cost of spending the change output in the future.\n+    // For creating the change output now, we use the effective feerate.\n+    // For spending the change output in the future, we use the discard feerate for now.\n+    // So cost of change = (change output size * effective feerate) + (size of spending change output * discard feerate)\n+    coin_selection_params.m_change_fee = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.change_output_size);\n+    coin_selection_params.m_cost_of_change = coin_selection_params.m_discard_feerate.GetFee(coin_selection_params.change_spend_size) + coin_selection_params.m_change_fee;\n+\n+    // vouts to the payees\n+    if (!coin_selection_params.m_subtract_fee_outputs) {\n+        coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+    }\n+    for (const auto& recipient : vecSend)\n     {\n-        std::set<CInputCoin> setCoins;\n-        LOCK(cs_wallet);\n-        txNew.nLockTime = GetLocktimeForNewTransaction(chain(), GetLastBlockHash(), GetLastBlockHeight());\n-        {\n-            std::vector<COutput> vAvailableCoins;\n-            AvailableCoins(vAvailableCoins, &coin_control, 1, MAX_MONEY, MAX_MONEY, 0);\n-            CoinSelectionParams coin_selection_params; // Parameters for coin selection, init with dummy\n-            coin_selection_params.m_avoid_partial_spends = coin_control.m_avoid_partial_spends;\n-\n-            // Create change script that will be used if we need change\n-            // TODO: pass in scriptChange instead of reservedest so\n-            // change transaction isn't always pay-to-bitcoin-address\n-            CScript scriptChange;\n-\n-            // coin control: send change to custom address\n-            if (!std::get_if<CNoDestination>(&coin_control.destChange)) {\n-                scriptChange = GetScriptForDestination(coin_control.destChange);\n-            } else { // no coin control: send change to newly generated address\n-                // Note: We use a new key here to keep it from being obvious which side is the change.\n-                //  The drawback is that by not reusing a previous key, the change may be lost if a\n-                //  backup is restored, if the backup doesn't have the new private key for the change.\n-                //  If we reused the old key, it would be possible to add code to look for and\n-                //  rediscover unknown transactions that were written with keys of ours to recover\n-                //  post-backup change.\n-\n-                // Reserve a new key pair from key pool. If it fails, provide a dummy\n-                // destination in case we don't need change.\n-                CTxDestination dest;\n-                if (!reservedest.GetReservedDestination(dest, true)) {\n-                    error = _(\"Transaction needs a change address, but we can't generate it. Please call keypoolrefill first.\");\n-                }\n-                scriptChange = GetScriptForDestination(dest);\n-                // A valid destination implies a change script (and\n-                // vice-versa). An empty change script will abort later, if the\n-                // change keypool ran out, but change is required.\n-                CHECK_NONFATAL(IsValidDestination(dest) != scriptChange.empty());\n-            }\n-            CTxOut change_prototype_txout(0, scriptChange);\n-            coin_selection_params.change_output_size = GetSerializeSize(change_prototype_txout);\n-\n-            // Get size of spending the change output\n-            int change_spend_size = CalculateMaximumSignedInputSize(change_prototype_txout, this);\n-            // If the wallet doesn't know how to sign change output, assume p2sh-p2wpkh\n-            // as lower-bound to allow BnB to do it's thing\n-            if (change_spend_size == -1) {\n-                coin_selection_params.change_spend_size = DUMMY_NESTED_P2WPKH_INPUT_SIZE;\n-            } else {\n-                coin_selection_params.change_spend_size = (size_t)change_spend_size;\n-            }\n+        CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n \n-            // Set discard feerate\n-            coin_selection_params.m_discard_feerate = GetDiscardRate(*this);\n+        // Include the fee cost for outputs.\n+        if (!coin_selection_params.m_subtract_fee_outputs) {\n+            coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n+        }\n \n-            // Get the fee rate to use effective values in coin selection\n-            coin_selection_params.m_effective_feerate = GetMinimumFeeRate(*this, coin_control, &feeCalc);\n-            // Do not, ever, assume that it's fine to change the fee rate if the user has explicitly\n-            // provided one\n-            if (coin_control.m_feerate && coin_selection_params.m_effective_feerate > *coin_control.m_feerate) {\n-                error = strprintf(_(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\"), coin_control.m_feerate->ToString(FeeEstimateMode::SAT_VB), coin_selection_params.m_effective_feerate.ToString(FeeEstimateMode::SAT_VB));\n-                return false;\n-            }\n-            if (feeCalc.reason == FeeReason::FALLBACK && !m_allow_fallback_fee) {\n-                // eventually allow a fallback fee\n-                error = _(\"Fee estimation failed. Fallbackfee is disabled. Wait a few blocks or enable -fallbackfee.\");\n-                return false;\n-            }\n+        if (IsDust(txout, chain().relayDustFee()))\n+        {\n+            error = _(\"Transaction amount too small\");\n+            return false;\n+        }\n+        txNew.vout.push_back(txout);\n+    }\n \n-            // Get long term estimate\n-            CCoinControl cc_temp;\n-            cc_temp.m_confirm_target = chain().estimateMaxBlocks();\n-            coin_selection_params.m_long_term_feerate = GetMinimumFeeRate(*this, cc_temp, nullptr);\n+    // Include the fees for things that aren't inputs, excluding the change output\n+    const CAmount not_input_fees = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.tx_noinputs_size);\n+    CAmount selection_target = recipients_sum + not_input_fees;\n \n-            // Calculate the cost of change\n-            // Cost of change is the cost of creating the change output + cost of spending the change output in the future.\n-            // For creating the change output now, we use the effective feerate.\n-            // For spending the change output in the future, we use the discard feerate for now.\n-            // So cost of change = (change output size * effective feerate) + (size of spending change output * discard feerate)\n-            coin_selection_params.m_change_fee = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.change_output_size);\n-            coin_selection_params.m_cost_of_change = coin_selection_params.m_discard_feerate.GetFee(coin_selection_params.change_spend_size) + coin_selection_params.m_change_fee;\n+    // Get available coins\n+    std::vector<COutput> vAvailableCoins;\n+    AvailableCoins(vAvailableCoins, &coin_control, 1, MAX_MONEY, MAX_MONEY, 0);\n \n-            coin_selection_params.m_subtract_fee_outputs = nSubtractFeeFromAmount != 0; // If we are doing subtract fee from recipient, don't use effective values\n+    // Choose coins to use\n+    CAmount inputs_sum = 0;\n+    std::set<CInputCoin> setCoins;\n+    if (!SelectCoins(vAvailableCoins, /* nTargetValue */ selection_target, setCoins, inputs_sum, coin_control, coin_selection_params))\n+    {\n+        error = _(\"Insufficient funds\");\n+        return false;\n+    }\n \n-            // vouts to the payees\n-            if (!coin_selection_params.m_subtract_fee_outputs) {\n-                coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n-            }\n-            for (const auto& recipient : vecSend)\n-            {\n-                CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n+    // Always make a change output\n+    // We will reduce the fee from this change output later, and remove the output if it is too small.\n+    const CAmount change_and_fee = inputs_sum - recipients_sum;\n+    assert(change_and_fee >= 0);\n+    CTxOut newTxOut(change_and_fee, scriptChange);\n \n-                // Include the fee cost for outputs.\n-                if (!coin_selection_params.m_subtract_fee_outputs) {\n-                    coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n-                }\n+    if (nChangePosInOut == -1)\n+    {\n+        // Insert change txn at random position:\n+        nChangePosInOut = GetRandInt(txNew.vout.size()+1);\n+    }\n+    else if ((unsigned int)nChangePosInOut > txNew.vout.size())\n+    {\n+        error = _(\"Change index out of range\");\n+        return false;\n+    }\n \n-                if (IsDust(txout, chain().relayDustFee()))\n-                {\n-                    error = _(\"Transaction amount too small\");\n-                    return false;\n-                }\n-                txNew.vout.push_back(txout);\n-            }\n+    assert(nChangePosInOut != -1);\n+    auto change_position = txNew.vout.insert(txNew.vout.begin() + nChangePosInOut, newTxOut);\n \n-            // Include the fees for things that aren't inputs, excluding the change output\n-            const CAmount not_input_fees = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.tx_noinputs_size);\n-            CAmount nValueToSelect = nValue + not_input_fees;\n+    // Shuffle selected coins and fill in final vin\n+    std::vector<CInputCoin> selected_coins(setCoins.begin(), setCoins.end());",
      "path": "src/wallet/spend.cpp",
      "position": 338,
      "original_position": 338,
      "commit_id": "96c2c9520e80ee4fed92f0e1ab859d59fcbdb110",
      "original_commit_id": "96c2c9520e80ee4fed92f0e1ab859d59fcbdb110",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In b583f73354 Move vin filling to before final fee setting (but not super relevant to this PR)\r\n\r\nQuestion: is there a reason `setCoins` (and `setCoinsRet`, etc. in the coin selection solvers) needs to be a `std::set` instead of a `std::vector`? It doesn't seem like we get much benefit out of using a set, and we convert to vector here anyway?",
      "created_at": "2021-06-03T15:48:09Z",
      "updated_at": "2021-06-04T11:04:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22008#discussion_r644911809",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/644911809"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22008"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 733,
      "original_line": 733,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/645476752",
      "pull_request_review_id": 675439314,
      "id": 645476752,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0NTQ3Njc1Mg==",
      "diff_hunk": "@@ -578,287 +578,266 @@ bool CWallet::CreateTransactionInternal(\n         FeeCalculation& fee_calc_out,\n         bool sign)\n {\n-    CAmount nValue = 0;\n+    AssertLockHeld(cs_wallet);\n+\n+    CMutableTransaction txNew; // The resulting transaction that we make\n+    txNew.nLockTime = GetLocktimeForNewTransaction(chain(), GetLastBlockHash(), GetLastBlockHeight());\n+\n+    CoinSelectionParams coin_selection_params; // Parameters for coin selection, init with dummy\n+    coin_selection_params.m_avoid_partial_spends = coin_control.m_avoid_partial_spends;\n+\n+    CAmount recipients_sum = 0;\n     const OutputType change_type = TransactionChangeType(coin_control.m_change_type ? *coin_control.m_change_type : m_default_change_type, vecSend);\n     ReserveDestination reservedest(this, change_type);\n-    unsigned int nSubtractFeeFromAmount = 0;\n-    for (const auto& recipient : vecSend)\n-    {\n-        if (nValue < 0 || recipient.nAmount < 0)\n-        {\n-            error = _(\"Transaction amounts must not be negative\");\n-            return false;\n+    unsigned int outputs_to_subtract_fee_from = 0; // The number of outputs which we are subtracting the fee from\n+    for (const auto& recipient : vecSend) {\n+        recipients_sum += recipient.nAmount;\n+\n+        if (recipient.fSubtractFeeFromAmount) {\n+            outputs_to_subtract_fee_from++;\n+            coin_selection_params.m_subtract_fee_outputs = true;\n         }\n-        nValue += recipient.nAmount;\n+    }\n \n-        if (recipient.fSubtractFeeFromAmount)\n-            nSubtractFeeFromAmount++;\n+    // Create change script that will be used if we need change\n+    // TODO: pass in scriptChange instead of reservedest so\n+    // change transaction isn't always pay-to-bitcoin-address\n+    CScript scriptChange;\n+\n+    // coin control: send change to custom address\n+    if (!std::get_if<CNoDestination>(&coin_control.destChange)) {\n+        scriptChange = GetScriptForDestination(coin_control.destChange);\n+    } else { // no coin control: send change to newly generated address\n+        // Note: We use a new key here to keep it from being obvious which side is the change.\n+        //  The drawback is that by not reusing a previous key, the change may be lost if a\n+        //  backup is restored, if the backup doesn't have the new private key for the change.\n+        //  If we reused the old key, it would be possible to add code to look for and\n+        //  rediscover unknown transactions that were written with keys of ours to recover\n+        //  post-backup change.\n+\n+        // Reserve a new key pair from key pool. If it fails, provide a dummy\n+        // destination in case we don't need change.\n+        CTxDestination dest;\n+        if (!reservedest.GetReservedDestination(dest, true)) {\n+            error = _(\"Transaction needs a change address, but we can't generate it. Please call keypoolrefill first.\");\n+        }\n+        scriptChange = GetScriptForDestination(dest);\n+        // A valid destination implies a change script (and\n+        // vice-versa). An empty change script will abort later, if the\n+        // change keypool ran out, but change is required.\n+        CHECK_NONFATAL(IsValidDestination(dest) != scriptChange.empty());\n     }\n-    if (vecSend.empty())\n-    {\n-        error = _(\"Transaction must have at least one recipient\");\n-        return false;\n+    CTxOut change_prototype_txout(0, scriptChange);\n+    coin_selection_params.change_output_size = GetSerializeSize(change_prototype_txout);\n+\n+    // Get size of spending the change output\n+    int change_spend_size = CalculateMaximumSignedInputSize(change_prototype_txout, this);\n+    // If the wallet doesn't know how to sign change output, assume p2sh-p2wpkh\n+    // as lower-bound to allow BnB to do it's thing\n+    if (change_spend_size == -1) {\n+        coin_selection_params.change_spend_size = DUMMY_NESTED_P2WPKH_INPUT_SIZE;\n+    } else {\n+        coin_selection_params.change_spend_size = (size_t)change_spend_size;\n     }\n \n-    CMutableTransaction txNew;\n+    // Set discard feerate\n+    coin_selection_params.m_discard_feerate = GetDiscardRate(*this);\n+\n+    // Get the fee rate to use effective values in coin selection\n     FeeCalculation feeCalc;\n-    TxSize tx_sizes;\n-    int nBytes;\n+    coin_selection_params.m_effective_feerate = GetMinimumFeeRate(*this, coin_control, &feeCalc);\n+    // Do not, ever, assume that it's fine to change the fee rate if the user has explicitly\n+    // provided one\n+    if (coin_control.m_feerate && coin_selection_params.m_effective_feerate > *coin_control.m_feerate) {\n+        error = strprintf(_(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\"), coin_control.m_feerate->ToString(FeeEstimateMode::SAT_VB), coin_selection_params.m_effective_feerate.ToString(FeeEstimateMode::SAT_VB));\n+        return false;\n+    }\n+    if (feeCalc.reason == FeeReason::FALLBACK && !m_allow_fallback_fee) {\n+        // eventually allow a fallback fee\n+        error = _(\"Fee estimation failed. Fallbackfee is disabled. Wait a few blocks or enable -fallbackfee.\");\n+        return false;\n+    }\n+\n+    // Get long term estimate\n+    CCoinControl cc_temp;\n+    cc_temp.m_confirm_target = chain().estimateMaxBlocks();\n+    coin_selection_params.m_long_term_feerate = GetMinimumFeeRate(*this, cc_temp, nullptr);\n+\n+    // Calculate the cost of change\n+    // Cost of change is the cost of creating the change output + cost of spending the change output in the future.\n+    // For creating the change output now, we use the effective feerate.\n+    // For spending the change output in the future, we use the discard feerate for now.\n+    // So cost of change = (change output size * effective feerate) + (size of spending change output * discard feerate)\n+    coin_selection_params.m_change_fee = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.change_output_size);\n+    coin_selection_params.m_cost_of_change = coin_selection_params.m_discard_feerate.GetFee(coin_selection_params.change_spend_size) + coin_selection_params.m_change_fee;\n+\n+    // vouts to the payees\n+    if (!coin_selection_params.m_subtract_fee_outputs) {\n+        coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+    }\n+    for (const auto& recipient : vecSend)\n     {\n-        std::set<CInputCoin> setCoins;\n-        LOCK(cs_wallet);\n-        txNew.nLockTime = GetLocktimeForNewTransaction(chain(), GetLastBlockHash(), GetLastBlockHeight());\n-        {\n-            std::vector<COutput> vAvailableCoins;\n-            AvailableCoins(vAvailableCoins, &coin_control, 1, MAX_MONEY, MAX_MONEY, 0);\n-            CoinSelectionParams coin_selection_params; // Parameters for coin selection, init with dummy\n-            coin_selection_params.m_avoid_partial_spends = coin_control.m_avoid_partial_spends;\n-\n-            // Create change script that will be used if we need change\n-            // TODO: pass in scriptChange instead of reservedest so\n-            // change transaction isn't always pay-to-bitcoin-address\n-            CScript scriptChange;\n-\n-            // coin control: send change to custom address\n-            if (!std::get_if<CNoDestination>(&coin_control.destChange)) {\n-                scriptChange = GetScriptForDestination(coin_control.destChange);\n-            } else { // no coin control: send change to newly generated address\n-                // Note: We use a new key here to keep it from being obvious which side is the change.\n-                //  The drawback is that by not reusing a previous key, the change may be lost if a\n-                //  backup is restored, if the backup doesn't have the new private key for the change.\n-                //  If we reused the old key, it would be possible to add code to look for and\n-                //  rediscover unknown transactions that were written with keys of ours to recover\n-                //  post-backup change.\n-\n-                // Reserve a new key pair from key pool. If it fails, provide a dummy\n-                // destination in case we don't need change.\n-                CTxDestination dest;\n-                if (!reservedest.GetReservedDestination(dest, true)) {\n-                    error = _(\"Transaction needs a change address, but we can't generate it. Please call keypoolrefill first.\");\n-                }\n-                scriptChange = GetScriptForDestination(dest);\n-                // A valid destination implies a change script (and\n-                // vice-versa). An empty change script will abort later, if the\n-                // change keypool ran out, but change is required.\n-                CHECK_NONFATAL(IsValidDestination(dest) != scriptChange.empty());\n-            }\n-            CTxOut change_prototype_txout(0, scriptChange);\n-            coin_selection_params.change_output_size = GetSerializeSize(change_prototype_txout);\n-\n-            // Get size of spending the change output\n-            int change_spend_size = CalculateMaximumSignedInputSize(change_prototype_txout, this);\n-            // If the wallet doesn't know how to sign change output, assume p2sh-p2wpkh\n-            // as lower-bound to allow BnB to do it's thing\n-            if (change_spend_size == -1) {\n-                coin_selection_params.change_spend_size = DUMMY_NESTED_P2WPKH_INPUT_SIZE;\n-            } else {\n-                coin_selection_params.change_spend_size = (size_t)change_spend_size;\n-            }\n+        CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n \n-            // Set discard feerate\n-            coin_selection_params.m_discard_feerate = GetDiscardRate(*this);\n+        // Include the fee cost for outputs.\n+        if (!coin_selection_params.m_subtract_fee_outputs) {\n+            coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n+        }\n \n-            // Get the fee rate to use effective values in coin selection\n-            coin_selection_params.m_effective_feerate = GetMinimumFeeRate(*this, coin_control, &feeCalc);\n-            // Do not, ever, assume that it's fine to change the fee rate if the user has explicitly\n-            // provided one\n-            if (coin_control.m_feerate && coin_selection_params.m_effective_feerate > *coin_control.m_feerate) {\n-                error = strprintf(_(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\"), coin_control.m_feerate->ToString(FeeEstimateMode::SAT_VB), coin_selection_params.m_effective_feerate.ToString(FeeEstimateMode::SAT_VB));\n-                return false;\n-            }\n-            if (feeCalc.reason == FeeReason::FALLBACK && !m_allow_fallback_fee) {\n-                // eventually allow a fallback fee\n-                error = _(\"Fee estimation failed. Fallbackfee is disabled. Wait a few blocks or enable -fallbackfee.\");\n-                return false;\n-            }\n+        if (IsDust(txout, chain().relayDustFee()))\n+        {\n+            error = _(\"Transaction amount too small\");\n+            return false;\n+        }\n+        txNew.vout.push_back(txout);\n+    }\n \n-            // Get long term estimate\n-            CCoinControl cc_temp;\n-            cc_temp.m_confirm_target = chain().estimateMaxBlocks();\n-            coin_selection_params.m_long_term_feerate = GetMinimumFeeRate(*this, cc_temp, nullptr);\n+    // Include the fees for things that aren't inputs, excluding the change output\n+    const CAmount not_input_fees = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.tx_noinputs_size);\n+    CAmount selection_target = recipients_sum + not_input_fees;\n \n-            // Calculate the cost of change\n-            // Cost of change is the cost of creating the change output + cost of spending the change output in the future.\n-            // For creating the change output now, we use the effective feerate.\n-            // For spending the change output in the future, we use the discard feerate for now.\n-            // So cost of change = (change output size * effective feerate) + (size of spending change output * discard feerate)\n-            coin_selection_params.m_change_fee = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.change_output_size);\n-            coin_selection_params.m_cost_of_change = coin_selection_params.m_discard_feerate.GetFee(coin_selection_params.change_spend_size) + coin_selection_params.m_change_fee;\n+    // Get available coins\n+    std::vector<COutput> vAvailableCoins;\n+    AvailableCoins(vAvailableCoins, &coin_control, 1, MAX_MONEY, MAX_MONEY, 0);\n \n-            coin_selection_params.m_subtract_fee_outputs = nSubtractFeeFromAmount != 0; // If we are doing subtract fee from recipient, don't use effective values\n+    // Choose coins to use\n+    CAmount inputs_sum = 0;\n+    std::set<CInputCoin> setCoins;\n+    if (!SelectCoins(vAvailableCoins, /* nTargetValue */ selection_target, setCoins, inputs_sum, coin_control, coin_selection_params))\n+    {\n+        error = _(\"Insufficient funds\");\n+        return false;\n+    }\n \n-            // vouts to the payees\n-            if (!coin_selection_params.m_subtract_fee_outputs) {\n-                coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n-            }\n-            for (const auto& recipient : vecSend)\n-            {\n-                CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n+    // Always make a change output\n+    // We will reduce the fee from this change output later, and remove the output if it is too small.\n+    const CAmount change_and_fee = inputs_sum - recipients_sum;\n+    assert(change_and_fee >= 0);\n+    CTxOut newTxOut(change_and_fee, scriptChange);\n \n-                // Include the fee cost for outputs.\n-                if (!coin_selection_params.m_subtract_fee_outputs) {\n-                    coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n-                }\n+    if (nChangePosInOut == -1)\n+    {\n+        // Insert change txn at random position:\n+        nChangePosInOut = GetRandInt(txNew.vout.size()+1);\n+    }\n+    else if ((unsigned int)nChangePosInOut > txNew.vout.size())\n+    {\n+        error = _(\"Change index out of range\");\n+        return false;\n+    }\n \n-                if (IsDust(txout, chain().relayDustFee()))\n-                {\n-                    error = _(\"Transaction amount too small\");\n-                    return false;\n-                }\n-                txNew.vout.push_back(txout);\n-            }\n+    assert(nChangePosInOut != -1);\n+    auto change_position = txNew.vout.insert(txNew.vout.begin() + nChangePosInOut, newTxOut);\n \n-            // Include the fees for things that aren't inputs, excluding the change output\n-            const CAmount not_input_fees = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.tx_noinputs_size);\n-            CAmount nValueToSelect = nValue + not_input_fees;\n+    // Shuffle selected coins and fill in final vin\n+    std::vector<CInputCoin> selected_coins(setCoins.begin(), setCoins.end());\n+    Shuffle(selected_coins.begin(), selected_coins.end(), FastRandomContext());\n \n-            // Choose coins to use\n-            CAmount inputs_sum = 0;\n-            setCoins.clear();\n-            if (!SelectCoins(vAvailableCoins, /* nTargetValue */ nValueToSelect, setCoins, inputs_sum, coin_control, coin_selection_params))\n-            {\n-                error = _(\"Insufficient funds\");\n-                return false;\n-            }\n-\n-            // Always make a change output\n-            // We will reduce the fee from this change output later, and remove the output if it is too small.\n-            const CAmount change_and_fee = inputs_sum - nValue;\n-            assert(change_and_fee >= 0);\n-            CTxOut newTxOut(change_and_fee, scriptChange);\n+    // Note how the sequence number is set to non-maxint so that\n+    // the nLockTime set above actually works.\n+    //\n+    // BIP125 defines opt-in RBF as any nSequence < maxint-1, so\n+    // we use the highest possible value in that range (maxint-2)\n+    // to avoid conflicting with other possible uses of nSequence,\n+    // and in the spirit of \"smallest possible change from prior\n+    // behavior.\"\n+    const uint32_t nSequence = coin_control.m_signal_bip125_rbf.value_or(m_signal_rbf) ? MAX_BIP125_RBF_SEQUENCE : (CTxIn::SEQUENCE_FINAL - 1);\n+    for (const auto& coin : selected_coins) {\n+        txNew.vin.push_back(CTxIn(coin.outpoint, CScript(), nSequence));\n+    }\n \n-            if (nChangePosInOut == -1)\n-            {\n-                // Insert change txn at random position:\n-                nChangePosInOut = GetRandInt(txNew.vout.size()+1);\n-            }\n-            else if ((unsigned int)nChangePosInOut > txNew.vout.size())\n-            {\n-                error = _(\"Change index out of range\");\n-                return false;\n-            }\n+    // Calculate the transaction fee\n+    TxSize tx_sizes = CalculateMaximumSignedTxSize(CTransaction(txNew), this, coin_control.fAllowWatchOnly);\n+    int nBytes = tx_sizes.vsize;\n+    if (nBytes < 0) {\n+        error = _(\"Signing transaction failed\");\n+        return false;\n+    }\n+    nFeeRet = coin_selection_params.m_effective_feerate.GetFee(nBytes);\n \n-            assert(nChangePosInOut != -1);\n-            auto change_position = txNew.vout.insert(txNew.vout.begin() + nChangePosInOut, newTxOut);\n+    // Subtract fee from the change output if not subtracting it from recipient outputs\n+    CAmount fee_needed = nFeeRet;\n+    if (!coin_selection_params.m_subtract_fee_outputs) {\n+        change_position->nValue -= fee_needed;\n+    }\n \n-            // Dummy fill vin for maximum size estimation\n-            //\n-            for (const auto& coin : setCoins) {\n-                txNew.vin.push_back(CTxIn(coin.outpoint,CScript()));\n-            }\n+    // We want to drop the change to fees if:\n+    // 1. The change output would be dust\n+    // 2. The change is within the (almost) exact match window, i.e. it is less than or equal to the cost of the change output (cost_of_change)\n+    CAmount change_amount = change_position->nValue;\n+    if (IsDust(*change_position, coin_selection_params.m_discard_feerate) || change_amount <= coin_selection_params.m_cost_of_change)\n+    {\n+        nChangePosInOut = -1;\n+        change_amount = 0;\n+        txNew.vout.erase(change_position);\n+\n+        // Because we have dropped this change, the tx size and required fee will be different, so let's recalculate those\n+        tx_sizes = CalculateMaximumSignedTxSize(CTransaction(txNew), this, coin_control.fAllowWatchOnly);\n+        nBytes = tx_sizes.vsize;\n+        fee_needed = coin_selection_params.m_effective_feerate.GetFee(nBytes);\n+    }\n \n-            // Calculate the transaction fee\n-            tx_sizes = CalculateMaximumSignedTxSize(CTransaction(txNew), this, coin_control.fAllowWatchOnly);\n-            nBytes = tx_sizes.vsize;\n-            if (nBytes < 0) {\n-                error = _(\"Signing transaction failed\");\n-                return false;\n-            }\n-            nFeeRet = coin_selection_params.m_effective_feerate.GetFee(nBytes);\n+    // Update nFeeRet in case fee_needed changed due to dropping the change output\n+    if (fee_needed <= change_and_fee - change_amount) {\n+        nFeeRet = change_and_fee - change_amount;\n+    }\n \n-            // Subtract fee from the change output if not subtrating it from recipient outputs\n-            CAmount fee_needed = nFeeRet;\n-            if (nSubtractFeeFromAmount == 0) {\n-                change_position->nValue -= fee_needed;\n+    // Reduce output values for subtractFeeFromAmount\n+    if (coin_selection_params.m_subtract_fee_outputs) {\n+        CAmount to_reduce = fee_needed + change_amount - change_and_fee;\n+        int i = 0;\n+        bool fFirst = true;\n+        for (const auto& recipient : vecSend)\n+        {\n+            if (i == nChangePosInOut) {\n+                ++i;\n             }\n+            CTxOut& txout = txNew.vout[i];\n \n-            // We want to drop the change to fees if:\n-            // 1. The change output would be dust\n-            // 2. The change is within the (almost) exact match window, i.e. it is less than or equal to the cost of the change output (cost_of_change)\n-            CAmount change_amount = change_position->nValue;\n-            if (IsDust(*change_position, coin_selection_params.m_discard_feerate) || change_amount <= coin_selection_params.m_cost_of_change)\n+            if (recipient.fSubtractFeeFromAmount)\n             {\n-                nChangePosInOut = -1;\n-                change_amount = 0;\n-                txNew.vout.erase(change_position);\n-\n-                // Because we have dropped this change, the tx size and required fee will be different, so let's recalculate those\n-                tx_sizes = CalculateMaximumSignedTxSize(CTransaction(txNew), this, coin_control.fAllowWatchOnly);\n-                nBytes = tx_sizes.vsize;\n-                fee_needed = coin_selection_params.m_effective_feerate.GetFee(nBytes);\n-            }\n+                txout.nValue -= to_reduce / outputs_to_subtract_fee_from; // Subtract fee equally from each selected recipient\n \n-            // Update nFeeRet in case fee_needed changed due to dropping the change output\n-            if (fee_needed <= change_and_fee - change_amount) {\n-                nFeeRet = change_and_fee - change_amount;\n-            }\n-\n-            // Reduce output values for subtractFeeFromAmount\n-            if (nSubtractFeeFromAmount != 0) {\n-                CAmount to_reduce = fee_needed + change_amount - change_and_fee;\n-                int i = 0;\n-                bool fFirst = true;\n-                for (const auto& recipient : vecSend)\n+                if (fFirst) // first receiver pays the remainder not divisible by output count\n                 {\n-                    if (i == nChangePosInOut) {\n-                        ++i;\n-                    }\n-                    CTxOut& txout = txNew.vout[i];\n-\n-                    if (recipient.fSubtractFeeFromAmount)\n-                    {\n-                        txout.nValue -= to_reduce / nSubtractFeeFromAmount; // Subtract fee equally from each selected recipient\n-\n-                        if (fFirst) // first receiver pays the remainder not divisible by output count\n-                        {\n-                            fFirst = false;\n-                            txout.nValue -= to_reduce % nSubtractFeeFromAmount;\n-                        }\n-\n-                        // Error if this output is reduced to be below dust\n-                        if (IsDust(txout, chain().relayDustFee())) {\n-                            if (txout.nValue < 0) {\n-                                error = _(\"The transaction amount is too small to pay the fee\");\n-                            } else {\n-                                error = _(\"The transaction amount is too small to send after the fee has been deducted\");\n-                            }\n-                            return false;\n-                        }\n-                    }\n-                    ++i;\n+                    fFirst = false;\n+                    txout.nValue -= to_reduce % outputs_to_subtract_fee_from;\n                 }\n-                nFeeRet = fee_needed;\n-            }\n \n-            // Give up if change keypool ran out and change is required\n-            if (scriptChange.empty() && nChangePosInOut != -1) {\n-                return false;\n+                // Error if this output is reduced to be below dust\n+                if (IsDust(txout, chain().relayDustFee())) {\n+                    if (txout.nValue < 0) {\n+                        error = _(\"The transaction amount is too small to pay the fee\");\n+                    } else {\n+                        error = _(\"The transaction amount is too small to send after the fee has been deducted\");\n+                    }\n+                    return false;\n+                }\n             }\n+            ++i;\n         }\n+        nFeeRet = fee_needed;\n+    }\n \n-        // Shuffle selected coins and fill in final vin\n-        txNew.vin.clear();\n-        std::vector<CInputCoin> selected_coins(setCoins.begin(), setCoins.end());\n-        Shuffle(selected_coins.begin(), selected_coins.end(), FastRandomContext());\n-\n-        // Note how the sequence number is set to non-maxint so that\n-        // the nLockTime set above actually works.\n-        //\n-        // BIP125 defines opt-in RBF as any nSequence < maxint-1, so\n-        // we use the highest possible value in that range (maxint-2)\n-        // to avoid conflicting with other possible uses of nSequence,\n-        // and in the spirit of \"smallest possible change from prior\n-        // behavior.\"\n-        const uint32_t nSequence = coin_control.m_signal_bip125_rbf.value_or(m_signal_rbf) ? MAX_BIP125_RBF_SEQUENCE : (CTxIn::SEQUENCE_FINAL - 1);\n-        for (const auto& coin : selected_coins) {\n-            txNew.vin.push_back(CTxIn(coin.outpoint, CScript(), nSequence));\n-        }\n+    // Give up if change keypool ran out and change is required\n+    if (scriptChange.empty() && nChangePosInOut != -1) {\n+        return false;\n+    }",
      "path": "src/wallet/spend.cpp",
      "position": 546,
      "original_position": 546,
      "commit_id": "96c2c9520e80ee4fed92f0e1ab859d59fcbdb110",
      "original_commit_id": "96c2c9520e80ee4fed92f0e1ab859d59fcbdb110",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Question: just wondering, why doesn't this have an error message?",
      "created_at": "2021-06-04T10:47:35Z",
      "updated_at": "2021-06-04T11:04:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22008#discussion_r645476752",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/645476752"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22008"
        }
      },
      "start_line": 823,
      "original_start_line": 823,
      "start_side": "RIGHT",
      "line": 825,
      "original_line": 825,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/645711411",
      "pull_request_review_id": 676483409,
      "id": 645711411,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0NTcxMTQxMQ==",
      "diff_hunk": "@@ -578,287 +578,266 @@ bool CWallet::CreateTransactionInternal(\n         FeeCalculation& fee_calc_out,\n         bool sign)\n {\n-    CAmount nValue = 0;\n+    AssertLockHeld(cs_wallet);\n+\n+    CMutableTransaction txNew; // The resulting transaction that we make\n+    txNew.nLockTime = GetLocktimeForNewTransaction(chain(), GetLastBlockHash(), GetLastBlockHeight());\n+\n+    CoinSelectionParams coin_selection_params; // Parameters for coin selection, init with dummy\n+    coin_selection_params.m_avoid_partial_spends = coin_control.m_avoid_partial_spends;\n+\n+    CAmount recipients_sum = 0;\n     const OutputType change_type = TransactionChangeType(coin_control.m_change_type ? *coin_control.m_change_type : m_default_change_type, vecSend);\n     ReserveDestination reservedest(this, change_type);\n-    unsigned int nSubtractFeeFromAmount = 0;\n-    for (const auto& recipient : vecSend)\n-    {\n-        if (nValue < 0 || recipient.nAmount < 0)\n-        {\n-            error = _(\"Transaction amounts must not be negative\");\n-            return false;\n+    unsigned int outputs_to_subtract_fee_from = 0; // The number of outputs which we are subtracting the fee from\n+    for (const auto& recipient : vecSend) {\n+        recipients_sum += recipient.nAmount;\n+\n+        if (recipient.fSubtractFeeFromAmount) {\n+            outputs_to_subtract_fee_from++;\n+            coin_selection_params.m_subtract_fee_outputs = true;\n         }\n-        nValue += recipient.nAmount;\n+    }\n \n-        if (recipient.fSubtractFeeFromAmount)\n-            nSubtractFeeFromAmount++;\n+    // Create change script that will be used if we need change\n+    // TODO: pass in scriptChange instead of reservedest so\n+    // change transaction isn't always pay-to-bitcoin-address\n+    CScript scriptChange;\n+\n+    // coin control: send change to custom address\n+    if (!std::get_if<CNoDestination>(&coin_control.destChange)) {\n+        scriptChange = GetScriptForDestination(coin_control.destChange);\n+    } else { // no coin control: send change to newly generated address\n+        // Note: We use a new key here to keep it from being obvious which side is the change.\n+        //  The drawback is that by not reusing a previous key, the change may be lost if a\n+        //  backup is restored, if the backup doesn't have the new private key for the change.\n+        //  If we reused the old key, it would be possible to add code to look for and\n+        //  rediscover unknown transactions that were written with keys of ours to recover\n+        //  post-backup change.\n+\n+        // Reserve a new key pair from key pool. If it fails, provide a dummy\n+        // destination in case we don't need change.\n+        CTxDestination dest;\n+        if (!reservedest.GetReservedDestination(dest, true)) {\n+            error = _(\"Transaction needs a change address, but we can't generate it. Please call keypoolrefill first.\");\n+        }\n+        scriptChange = GetScriptForDestination(dest);\n+        // A valid destination implies a change script (and\n+        // vice-versa). An empty change script will abort later, if the\n+        // change keypool ran out, but change is required.\n+        CHECK_NONFATAL(IsValidDestination(dest) != scriptChange.empty());\n     }\n-    if (vecSend.empty())\n-    {\n-        error = _(\"Transaction must have at least one recipient\");\n-        return false;\n+    CTxOut change_prototype_txout(0, scriptChange);\n+    coin_selection_params.change_output_size = GetSerializeSize(change_prototype_txout);\n+\n+    // Get size of spending the change output\n+    int change_spend_size = CalculateMaximumSignedInputSize(change_prototype_txout, this);\n+    // If the wallet doesn't know how to sign change output, assume p2sh-p2wpkh\n+    // as lower-bound to allow BnB to do it's thing\n+    if (change_spend_size == -1) {\n+        coin_selection_params.change_spend_size = DUMMY_NESTED_P2WPKH_INPUT_SIZE;\n+    } else {\n+        coin_selection_params.change_spend_size = (size_t)change_spend_size;\n     }\n \n-    CMutableTransaction txNew;\n+    // Set discard feerate\n+    coin_selection_params.m_discard_feerate = GetDiscardRate(*this);\n+\n+    // Get the fee rate to use effective values in coin selection\n     FeeCalculation feeCalc;\n-    TxSize tx_sizes;\n-    int nBytes;\n+    coin_selection_params.m_effective_feerate = GetMinimumFeeRate(*this, coin_control, &feeCalc);\n+    // Do not, ever, assume that it's fine to change the fee rate if the user has explicitly\n+    // provided one\n+    if (coin_control.m_feerate && coin_selection_params.m_effective_feerate > *coin_control.m_feerate) {\n+        error = strprintf(_(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\"), coin_control.m_feerate->ToString(FeeEstimateMode::SAT_VB), coin_selection_params.m_effective_feerate.ToString(FeeEstimateMode::SAT_VB));\n+        return false;\n+    }\n+    if (feeCalc.reason == FeeReason::FALLBACK && !m_allow_fallback_fee) {\n+        // eventually allow a fallback fee\n+        error = _(\"Fee estimation failed. Fallbackfee is disabled. Wait a few blocks or enable -fallbackfee.\");\n+        return false;\n+    }\n+\n+    // Get long term estimate\n+    CCoinControl cc_temp;\n+    cc_temp.m_confirm_target = chain().estimateMaxBlocks();\n+    coin_selection_params.m_long_term_feerate = GetMinimumFeeRate(*this, cc_temp, nullptr);\n+\n+    // Calculate the cost of change\n+    // Cost of change is the cost of creating the change output + cost of spending the change output in the future.\n+    // For creating the change output now, we use the effective feerate.\n+    // For spending the change output in the future, we use the discard feerate for now.\n+    // So cost of change = (change output size * effective feerate) + (size of spending change output * discard feerate)\n+    coin_selection_params.m_change_fee = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.change_output_size);\n+    coin_selection_params.m_cost_of_change = coin_selection_params.m_discard_feerate.GetFee(coin_selection_params.change_spend_size) + coin_selection_params.m_change_fee;\n+\n+    // vouts to the payees\n+    if (!coin_selection_params.m_subtract_fee_outputs) {\n+        coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+    }\n+    for (const auto& recipient : vecSend)\n     {\n-        std::set<CInputCoin> setCoins;\n-        LOCK(cs_wallet);\n-        txNew.nLockTime = GetLocktimeForNewTransaction(chain(), GetLastBlockHash(), GetLastBlockHeight());\n-        {\n-            std::vector<COutput> vAvailableCoins;\n-            AvailableCoins(vAvailableCoins, &coin_control, 1, MAX_MONEY, MAX_MONEY, 0);\n-            CoinSelectionParams coin_selection_params; // Parameters for coin selection, init with dummy\n-            coin_selection_params.m_avoid_partial_spends = coin_control.m_avoid_partial_spends;\n-\n-            // Create change script that will be used if we need change\n-            // TODO: pass in scriptChange instead of reservedest so\n-            // change transaction isn't always pay-to-bitcoin-address\n-            CScript scriptChange;\n-\n-            // coin control: send change to custom address\n-            if (!std::get_if<CNoDestination>(&coin_control.destChange)) {\n-                scriptChange = GetScriptForDestination(coin_control.destChange);\n-            } else { // no coin control: send change to newly generated address\n-                // Note: We use a new key here to keep it from being obvious which side is the change.\n-                //  The drawback is that by not reusing a previous key, the change may be lost if a\n-                //  backup is restored, if the backup doesn't have the new private key for the change.\n-                //  If we reused the old key, it would be possible to add code to look for and\n-                //  rediscover unknown transactions that were written with keys of ours to recover\n-                //  post-backup change.\n-\n-                // Reserve a new key pair from key pool. If it fails, provide a dummy\n-                // destination in case we don't need change.\n-                CTxDestination dest;\n-                if (!reservedest.GetReservedDestination(dest, true)) {\n-                    error = _(\"Transaction needs a change address, but we can't generate it. Please call keypoolrefill first.\");\n-                }\n-                scriptChange = GetScriptForDestination(dest);\n-                // A valid destination implies a change script (and\n-                // vice-versa). An empty change script will abort later, if the\n-                // change keypool ran out, but change is required.\n-                CHECK_NONFATAL(IsValidDestination(dest) != scriptChange.empty());\n-            }\n-            CTxOut change_prototype_txout(0, scriptChange);\n-            coin_selection_params.change_output_size = GetSerializeSize(change_prototype_txout);\n-\n-            // Get size of spending the change output\n-            int change_spend_size = CalculateMaximumSignedInputSize(change_prototype_txout, this);\n-            // If the wallet doesn't know how to sign change output, assume p2sh-p2wpkh\n-            // as lower-bound to allow BnB to do it's thing\n-            if (change_spend_size == -1) {\n-                coin_selection_params.change_spend_size = DUMMY_NESTED_P2WPKH_INPUT_SIZE;\n-            } else {\n-                coin_selection_params.change_spend_size = (size_t)change_spend_size;\n-            }\n+        CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n \n-            // Set discard feerate\n-            coin_selection_params.m_discard_feerate = GetDiscardRate(*this);\n+        // Include the fee cost for outputs.\n+        if (!coin_selection_params.m_subtract_fee_outputs) {\n+            coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n+        }\n \n-            // Get the fee rate to use effective values in coin selection\n-            coin_selection_params.m_effective_feerate = GetMinimumFeeRate(*this, coin_control, &feeCalc);\n-            // Do not, ever, assume that it's fine to change the fee rate if the user has explicitly\n-            // provided one\n-            if (coin_control.m_feerate && coin_selection_params.m_effective_feerate > *coin_control.m_feerate) {\n-                error = strprintf(_(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\"), coin_control.m_feerate->ToString(FeeEstimateMode::SAT_VB), coin_selection_params.m_effective_feerate.ToString(FeeEstimateMode::SAT_VB));\n-                return false;\n-            }\n-            if (feeCalc.reason == FeeReason::FALLBACK && !m_allow_fallback_fee) {\n-                // eventually allow a fallback fee\n-                error = _(\"Fee estimation failed. Fallbackfee is disabled. Wait a few blocks or enable -fallbackfee.\");\n-                return false;\n-            }\n+        if (IsDust(txout, chain().relayDustFee()))\n+        {\n+            error = _(\"Transaction amount too small\");\n+            return false;\n+        }\n+        txNew.vout.push_back(txout);\n+    }\n \n-            // Get long term estimate\n-            CCoinControl cc_temp;\n-            cc_temp.m_confirm_target = chain().estimateMaxBlocks();\n-            coin_selection_params.m_long_term_feerate = GetMinimumFeeRate(*this, cc_temp, nullptr);\n+    // Include the fees for things that aren't inputs, excluding the change output\n+    const CAmount not_input_fees = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.tx_noinputs_size);\n+    CAmount selection_target = recipients_sum + not_input_fees;\n \n-            // Calculate the cost of change\n-            // Cost of change is the cost of creating the change output + cost of spending the change output in the future.\n-            // For creating the change output now, we use the effective feerate.\n-            // For spending the change output in the future, we use the discard feerate for now.\n-            // So cost of change = (change output size * effective feerate) + (size of spending change output * discard feerate)\n-            coin_selection_params.m_change_fee = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.change_output_size);\n-            coin_selection_params.m_cost_of_change = coin_selection_params.m_discard_feerate.GetFee(coin_selection_params.change_spend_size) + coin_selection_params.m_change_fee;\n+    // Get available coins\n+    std::vector<COutput> vAvailableCoins;\n+    AvailableCoins(vAvailableCoins, &coin_control, 1, MAX_MONEY, MAX_MONEY, 0);\n \n-            coin_selection_params.m_subtract_fee_outputs = nSubtractFeeFromAmount != 0; // If we are doing subtract fee from recipient, don't use effective values\n+    // Choose coins to use\n+    CAmount inputs_sum = 0;\n+    std::set<CInputCoin> setCoins;\n+    if (!SelectCoins(vAvailableCoins, /* nTargetValue */ selection_target, setCoins, inputs_sum, coin_control, coin_selection_params))\n+    {\n+        error = _(\"Insufficient funds\");\n+        return false;\n+    }\n \n-            // vouts to the payees\n-            if (!coin_selection_params.m_subtract_fee_outputs) {\n-                coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n-            }\n-            for (const auto& recipient : vecSend)\n-            {\n-                CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n+    // Always make a change output\n+    // We will reduce the fee from this change output later, and remove the output if it is too small.\n+    const CAmount change_and_fee = inputs_sum - recipients_sum;\n+    assert(change_and_fee >= 0);\n+    CTxOut newTxOut(change_and_fee, scriptChange);\n \n-                // Include the fee cost for outputs.\n-                if (!coin_selection_params.m_subtract_fee_outputs) {\n-                    coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n-                }\n+    if (nChangePosInOut == -1)\n+    {\n+        // Insert change txn at random position:\n+        nChangePosInOut = GetRandInt(txNew.vout.size()+1);\n+    }\n+    else if ((unsigned int)nChangePosInOut > txNew.vout.size())\n+    {\n+        error = _(\"Change index out of range\");\n+        return false;\n+    }\n \n-                if (IsDust(txout, chain().relayDustFee()))\n-                {\n-                    error = _(\"Transaction amount too small\");\n-                    return false;\n-                }\n-                txNew.vout.push_back(txout);\n-            }\n+    assert(nChangePosInOut != -1);\n+    auto change_position = txNew.vout.insert(txNew.vout.begin() + nChangePosInOut, newTxOut);\n \n-            // Include the fees for things that aren't inputs, excluding the change output\n-            const CAmount not_input_fees = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.tx_noinputs_size);\n-            CAmount nValueToSelect = nValue + not_input_fees;\n+    // Shuffle selected coins and fill in final vin\n+    std::vector<CInputCoin> selected_coins(setCoins.begin(), setCoins.end());",
      "path": "src/wallet/spend.cpp",
      "position": 338,
      "original_position": 338,
      "commit_id": "96c2c9520e80ee4fed92f0e1ab859d59fcbdb110",
      "original_commit_id": "96c2c9520e80ee4fed92f0e1ab859d59fcbdb110",
      "in_reply_to_id": 644911809,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "No reason other than it's always been that way. `setCoinsRet` can be traced back to 0.1.0.",
      "created_at": "2021-06-04T16:42:04Z",
      "updated_at": "2021-06-04T16:42:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22008#discussion_r645711411",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/645711411"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22008"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 733,
      "original_line": 733,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/645727221",
      "pull_request_review_id": 676504055,
      "id": 645727221,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0NTcyNzIyMQ==",
      "diff_hunk": "@@ -578,287 +578,266 @@ bool CWallet::CreateTransactionInternal(\n         FeeCalculation& fee_calc_out,\n         bool sign)\n {\n-    CAmount nValue = 0;\n+    AssertLockHeld(cs_wallet);\n+\n+    CMutableTransaction txNew; // The resulting transaction that we make\n+    txNew.nLockTime = GetLocktimeForNewTransaction(chain(), GetLastBlockHash(), GetLastBlockHeight());\n+\n+    CoinSelectionParams coin_selection_params; // Parameters for coin selection, init with dummy\n+    coin_selection_params.m_avoid_partial_spends = coin_control.m_avoid_partial_spends;\n+\n+    CAmount recipients_sum = 0;\n     const OutputType change_type = TransactionChangeType(coin_control.m_change_type ? *coin_control.m_change_type : m_default_change_type, vecSend);\n     ReserveDestination reservedest(this, change_type);\n-    unsigned int nSubtractFeeFromAmount = 0;\n-    for (const auto& recipient : vecSend)\n-    {\n-        if (nValue < 0 || recipient.nAmount < 0)\n-        {\n-            error = _(\"Transaction amounts must not be negative\");\n-            return false;\n+    unsigned int outputs_to_subtract_fee_from = 0; // The number of outputs which we are subtracting the fee from\n+    for (const auto& recipient : vecSend) {\n+        recipients_sum += recipient.nAmount;\n+\n+        if (recipient.fSubtractFeeFromAmount) {\n+            outputs_to_subtract_fee_from++;\n+            coin_selection_params.m_subtract_fee_outputs = true;\n         }\n-        nValue += recipient.nAmount;\n+    }\n \n-        if (recipient.fSubtractFeeFromAmount)\n-            nSubtractFeeFromAmount++;\n+    // Create change script that will be used if we need change\n+    // TODO: pass in scriptChange instead of reservedest so\n+    // change transaction isn't always pay-to-bitcoin-address\n+    CScript scriptChange;\n+\n+    // coin control: send change to custom address\n+    if (!std::get_if<CNoDestination>(&coin_control.destChange)) {\n+        scriptChange = GetScriptForDestination(coin_control.destChange);\n+    } else { // no coin control: send change to newly generated address\n+        // Note: We use a new key here to keep it from being obvious which side is the change.\n+        //  The drawback is that by not reusing a previous key, the change may be lost if a\n+        //  backup is restored, if the backup doesn't have the new private key for the change.\n+        //  If we reused the old key, it would be possible to add code to look for and\n+        //  rediscover unknown transactions that were written with keys of ours to recover\n+        //  post-backup change.\n+\n+        // Reserve a new key pair from key pool. If it fails, provide a dummy\n+        // destination in case we don't need change.\n+        CTxDestination dest;\n+        if (!reservedest.GetReservedDestination(dest, true)) {\n+            error = _(\"Transaction needs a change address, but we can't generate it. Please call keypoolrefill first.\");\n+        }\n+        scriptChange = GetScriptForDestination(dest);\n+        // A valid destination implies a change script (and\n+        // vice-versa). An empty change script will abort later, if the\n+        // change keypool ran out, but change is required.\n+        CHECK_NONFATAL(IsValidDestination(dest) != scriptChange.empty());\n     }\n-    if (vecSend.empty())\n-    {\n-        error = _(\"Transaction must have at least one recipient\");\n-        return false;\n+    CTxOut change_prototype_txout(0, scriptChange);\n+    coin_selection_params.change_output_size = GetSerializeSize(change_prototype_txout);\n+\n+    // Get size of spending the change output\n+    int change_spend_size = CalculateMaximumSignedInputSize(change_prototype_txout, this);\n+    // If the wallet doesn't know how to sign change output, assume p2sh-p2wpkh\n+    // as lower-bound to allow BnB to do it's thing\n+    if (change_spend_size == -1) {\n+        coin_selection_params.change_spend_size = DUMMY_NESTED_P2WPKH_INPUT_SIZE;\n+    } else {\n+        coin_selection_params.change_spend_size = (size_t)change_spend_size;\n     }\n \n-    CMutableTransaction txNew;\n+    // Set discard feerate\n+    coin_selection_params.m_discard_feerate = GetDiscardRate(*this);\n+\n+    // Get the fee rate to use effective values in coin selection\n     FeeCalculation feeCalc;\n-    TxSize tx_sizes;\n-    int nBytes;\n+    coin_selection_params.m_effective_feerate = GetMinimumFeeRate(*this, coin_control, &feeCalc);\n+    // Do not, ever, assume that it's fine to change the fee rate if the user has explicitly\n+    // provided one\n+    if (coin_control.m_feerate && coin_selection_params.m_effective_feerate > *coin_control.m_feerate) {\n+        error = strprintf(_(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\"), coin_control.m_feerate->ToString(FeeEstimateMode::SAT_VB), coin_selection_params.m_effective_feerate.ToString(FeeEstimateMode::SAT_VB));\n+        return false;\n+    }\n+    if (feeCalc.reason == FeeReason::FALLBACK && !m_allow_fallback_fee) {\n+        // eventually allow a fallback fee\n+        error = _(\"Fee estimation failed. Fallbackfee is disabled. Wait a few blocks or enable -fallbackfee.\");\n+        return false;\n+    }\n+\n+    // Get long term estimate\n+    CCoinControl cc_temp;\n+    cc_temp.m_confirm_target = chain().estimateMaxBlocks();\n+    coin_selection_params.m_long_term_feerate = GetMinimumFeeRate(*this, cc_temp, nullptr);\n+\n+    // Calculate the cost of change\n+    // Cost of change is the cost of creating the change output + cost of spending the change output in the future.\n+    // For creating the change output now, we use the effective feerate.\n+    // For spending the change output in the future, we use the discard feerate for now.\n+    // So cost of change = (change output size * effective feerate) + (size of spending change output * discard feerate)\n+    coin_selection_params.m_change_fee = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.change_output_size);\n+    coin_selection_params.m_cost_of_change = coin_selection_params.m_discard_feerate.GetFee(coin_selection_params.change_spend_size) + coin_selection_params.m_change_fee;\n+\n+    // vouts to the payees\n+    if (!coin_selection_params.m_subtract_fee_outputs) {\n+        coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+    }\n+    for (const auto& recipient : vecSend)\n     {\n-        std::set<CInputCoin> setCoins;\n-        LOCK(cs_wallet);\n-        txNew.nLockTime = GetLocktimeForNewTransaction(chain(), GetLastBlockHash(), GetLastBlockHeight());\n-        {\n-            std::vector<COutput> vAvailableCoins;\n-            AvailableCoins(vAvailableCoins, &coin_control, 1, MAX_MONEY, MAX_MONEY, 0);\n-            CoinSelectionParams coin_selection_params; // Parameters for coin selection, init with dummy\n-            coin_selection_params.m_avoid_partial_spends = coin_control.m_avoid_partial_spends;\n-\n-            // Create change script that will be used if we need change\n-            // TODO: pass in scriptChange instead of reservedest so\n-            // change transaction isn't always pay-to-bitcoin-address\n-            CScript scriptChange;\n-\n-            // coin control: send change to custom address\n-            if (!std::get_if<CNoDestination>(&coin_control.destChange)) {\n-                scriptChange = GetScriptForDestination(coin_control.destChange);\n-            } else { // no coin control: send change to newly generated address\n-                // Note: We use a new key here to keep it from being obvious which side is the change.\n-                //  The drawback is that by not reusing a previous key, the change may be lost if a\n-                //  backup is restored, if the backup doesn't have the new private key for the change.\n-                //  If we reused the old key, it would be possible to add code to look for and\n-                //  rediscover unknown transactions that were written with keys of ours to recover\n-                //  post-backup change.\n-\n-                // Reserve a new key pair from key pool. If it fails, provide a dummy\n-                // destination in case we don't need change.\n-                CTxDestination dest;\n-                if (!reservedest.GetReservedDestination(dest, true)) {\n-                    error = _(\"Transaction needs a change address, but we can't generate it. Please call keypoolrefill first.\");\n-                }\n-                scriptChange = GetScriptForDestination(dest);\n-                // A valid destination implies a change script (and\n-                // vice-versa). An empty change script will abort later, if the\n-                // change keypool ran out, but change is required.\n-                CHECK_NONFATAL(IsValidDestination(dest) != scriptChange.empty());\n-            }\n-            CTxOut change_prototype_txout(0, scriptChange);\n-            coin_selection_params.change_output_size = GetSerializeSize(change_prototype_txout);\n-\n-            // Get size of spending the change output\n-            int change_spend_size = CalculateMaximumSignedInputSize(change_prototype_txout, this);\n-            // If the wallet doesn't know how to sign change output, assume p2sh-p2wpkh\n-            // as lower-bound to allow BnB to do it's thing\n-            if (change_spend_size == -1) {\n-                coin_selection_params.change_spend_size = DUMMY_NESTED_P2WPKH_INPUT_SIZE;\n-            } else {\n-                coin_selection_params.change_spend_size = (size_t)change_spend_size;\n-            }\n+        CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n \n-            // Set discard feerate\n-            coin_selection_params.m_discard_feerate = GetDiscardRate(*this);\n+        // Include the fee cost for outputs.\n+        if (!coin_selection_params.m_subtract_fee_outputs) {\n+            coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n+        }\n \n-            // Get the fee rate to use effective values in coin selection\n-            coin_selection_params.m_effective_feerate = GetMinimumFeeRate(*this, coin_control, &feeCalc);\n-            // Do not, ever, assume that it's fine to change the fee rate if the user has explicitly\n-            // provided one\n-            if (coin_control.m_feerate && coin_selection_params.m_effective_feerate > *coin_control.m_feerate) {\n-                error = strprintf(_(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\"), coin_control.m_feerate->ToString(FeeEstimateMode::SAT_VB), coin_selection_params.m_effective_feerate.ToString(FeeEstimateMode::SAT_VB));\n-                return false;\n-            }\n-            if (feeCalc.reason == FeeReason::FALLBACK && !m_allow_fallback_fee) {\n-                // eventually allow a fallback fee\n-                error = _(\"Fee estimation failed. Fallbackfee is disabled. Wait a few blocks or enable -fallbackfee.\");\n-                return false;\n-            }\n+        if (IsDust(txout, chain().relayDustFee()))\n+        {\n+            error = _(\"Transaction amount too small\");\n+            return false;\n+        }\n+        txNew.vout.push_back(txout);\n+    }\n \n-            // Get long term estimate\n-            CCoinControl cc_temp;\n-            cc_temp.m_confirm_target = chain().estimateMaxBlocks();\n-            coin_selection_params.m_long_term_feerate = GetMinimumFeeRate(*this, cc_temp, nullptr);\n+    // Include the fees for things that aren't inputs, excluding the change output\n+    const CAmount not_input_fees = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.tx_noinputs_size);\n+    CAmount selection_target = recipients_sum + not_input_fees;\n \n-            // Calculate the cost of change\n-            // Cost of change is the cost of creating the change output + cost of spending the change output in the future.\n-            // For creating the change output now, we use the effective feerate.\n-            // For spending the change output in the future, we use the discard feerate for now.\n-            // So cost of change = (change output size * effective feerate) + (size of spending change output * discard feerate)\n-            coin_selection_params.m_change_fee = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.change_output_size);\n-            coin_selection_params.m_cost_of_change = coin_selection_params.m_discard_feerate.GetFee(coin_selection_params.change_spend_size) + coin_selection_params.m_change_fee;\n+    // Get available coins\n+    std::vector<COutput> vAvailableCoins;\n+    AvailableCoins(vAvailableCoins, &coin_control, 1, MAX_MONEY, MAX_MONEY, 0);\n \n-            coin_selection_params.m_subtract_fee_outputs = nSubtractFeeFromAmount != 0; // If we are doing subtract fee from recipient, don't use effective values\n+    // Choose coins to use\n+    CAmount inputs_sum = 0;\n+    std::set<CInputCoin> setCoins;\n+    if (!SelectCoins(vAvailableCoins, /* nTargetValue */ selection_target, setCoins, inputs_sum, coin_control, coin_selection_params))\n+    {\n+        error = _(\"Insufficient funds\");\n+        return false;\n+    }\n \n-            // vouts to the payees\n-            if (!coin_selection_params.m_subtract_fee_outputs) {\n-                coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n-            }\n-            for (const auto& recipient : vecSend)\n-            {\n-                CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n+    // Always make a change output\n+    // We will reduce the fee from this change output later, and remove the output if it is too small.\n+    const CAmount change_and_fee = inputs_sum - recipients_sum;\n+    assert(change_and_fee >= 0);\n+    CTxOut newTxOut(change_and_fee, scriptChange);\n \n-                // Include the fee cost for outputs.\n-                if (!coin_selection_params.m_subtract_fee_outputs) {\n-                    coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n-                }\n+    if (nChangePosInOut == -1)\n+    {\n+        // Insert change txn at random position:\n+        nChangePosInOut = GetRandInt(txNew.vout.size()+1);\n+    }\n+    else if ((unsigned int)nChangePosInOut > txNew.vout.size())\n+    {\n+        error = _(\"Change index out of range\");\n+        return false;\n+    }\n \n-                if (IsDust(txout, chain().relayDustFee()))\n-                {\n-                    error = _(\"Transaction amount too small\");\n-                    return false;\n-                }\n-                txNew.vout.push_back(txout);\n-            }\n+    assert(nChangePosInOut != -1);\n+    auto change_position = txNew.vout.insert(txNew.vout.begin() + nChangePosInOut, newTxOut);\n \n-            // Include the fees for things that aren't inputs, excluding the change output\n-            const CAmount not_input_fees = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.tx_noinputs_size);\n-            CAmount nValueToSelect = nValue + not_input_fees;\n+    // Shuffle selected coins and fill in final vin\n+    std::vector<CInputCoin> selected_coins(setCoins.begin(), setCoins.end());\n+    Shuffle(selected_coins.begin(), selected_coins.end(), FastRandomContext());\n \n-            // Choose coins to use\n-            CAmount inputs_sum = 0;\n-            setCoins.clear();\n-            if (!SelectCoins(vAvailableCoins, /* nTargetValue */ nValueToSelect, setCoins, inputs_sum, coin_control, coin_selection_params))\n-            {\n-                error = _(\"Insufficient funds\");\n-                return false;\n-            }\n-\n-            // Always make a change output\n-            // We will reduce the fee from this change output later, and remove the output if it is too small.\n-            const CAmount change_and_fee = inputs_sum - nValue;\n-            assert(change_and_fee >= 0);\n-            CTxOut newTxOut(change_and_fee, scriptChange);\n+    // Note how the sequence number is set to non-maxint so that\n+    // the nLockTime set above actually works.\n+    //\n+    // BIP125 defines opt-in RBF as any nSequence < maxint-1, so\n+    // we use the highest possible value in that range (maxint-2)\n+    // to avoid conflicting with other possible uses of nSequence,\n+    // and in the spirit of \"smallest possible change from prior\n+    // behavior.\"\n+    const uint32_t nSequence = coin_control.m_signal_bip125_rbf.value_or(m_signal_rbf) ? MAX_BIP125_RBF_SEQUENCE : (CTxIn::SEQUENCE_FINAL - 1);\n+    for (const auto& coin : selected_coins) {\n+        txNew.vin.push_back(CTxIn(coin.outpoint, CScript(), nSequence));\n+    }\n \n-            if (nChangePosInOut == -1)\n-            {\n-                // Insert change txn at random position:\n-                nChangePosInOut = GetRandInt(txNew.vout.size()+1);\n-            }\n-            else if ((unsigned int)nChangePosInOut > txNew.vout.size())\n-            {\n-                error = _(\"Change index out of range\");\n-                return false;\n-            }\n+    // Calculate the transaction fee\n+    TxSize tx_sizes = CalculateMaximumSignedTxSize(CTransaction(txNew), this, coin_control.fAllowWatchOnly);\n+    int nBytes = tx_sizes.vsize;\n+    if (nBytes < 0) {\n+        error = _(\"Signing transaction failed\");\n+        return false;\n+    }\n+    nFeeRet = coin_selection_params.m_effective_feerate.GetFee(nBytes);\n \n-            assert(nChangePosInOut != -1);\n-            auto change_position = txNew.vout.insert(txNew.vout.begin() + nChangePosInOut, newTxOut);\n+    // Subtract fee from the change output if not subtracting it from recipient outputs\n+    CAmount fee_needed = nFeeRet;\n+    if (!coin_selection_params.m_subtract_fee_outputs) {\n+        change_position->nValue -= fee_needed;\n+    }\n \n-            // Dummy fill vin for maximum size estimation\n-            //\n-            for (const auto& coin : setCoins) {\n-                txNew.vin.push_back(CTxIn(coin.outpoint,CScript()));\n-            }\n+    // We want to drop the change to fees if:\n+    // 1. The change output would be dust\n+    // 2. The change is within the (almost) exact match window, i.e. it is less than or equal to the cost of the change output (cost_of_change)\n+    CAmount change_amount = change_position->nValue;\n+    if (IsDust(*change_position, coin_selection_params.m_discard_feerate) || change_amount <= coin_selection_params.m_cost_of_change)\n+    {\n+        nChangePosInOut = -1;\n+        change_amount = 0;\n+        txNew.vout.erase(change_position);\n+\n+        // Because we have dropped this change, the tx size and required fee will be different, so let's recalculate those\n+        tx_sizes = CalculateMaximumSignedTxSize(CTransaction(txNew), this, coin_control.fAllowWatchOnly);\n+        nBytes = tx_sizes.vsize;\n+        fee_needed = coin_selection_params.m_effective_feerate.GetFee(nBytes);\n+    }\n \n-            // Calculate the transaction fee\n-            tx_sizes = CalculateMaximumSignedTxSize(CTransaction(txNew), this, coin_control.fAllowWatchOnly);\n-            nBytes = tx_sizes.vsize;\n-            if (nBytes < 0) {\n-                error = _(\"Signing transaction failed\");\n-                return false;\n-            }\n-            nFeeRet = coin_selection_params.m_effective_feerate.GetFee(nBytes);\n+    // Update nFeeRet in case fee_needed changed due to dropping the change output\n+    if (fee_needed <= change_and_fee - change_amount) {\n+        nFeeRet = change_and_fee - change_amount;\n+    }\n \n-            // Subtract fee from the change output if not subtrating it from recipient outputs\n-            CAmount fee_needed = nFeeRet;\n-            if (nSubtractFeeFromAmount == 0) {\n-                change_position->nValue -= fee_needed;\n+    // Reduce output values for subtractFeeFromAmount\n+    if (coin_selection_params.m_subtract_fee_outputs) {\n+        CAmount to_reduce = fee_needed + change_amount - change_and_fee;\n+        int i = 0;\n+        bool fFirst = true;\n+        for (const auto& recipient : vecSend)\n+        {\n+            if (i == nChangePosInOut) {\n+                ++i;\n             }\n+            CTxOut& txout = txNew.vout[i];\n \n-            // We want to drop the change to fees if:\n-            // 1. The change output would be dust\n-            // 2. The change is within the (almost) exact match window, i.e. it is less than or equal to the cost of the change output (cost_of_change)\n-            CAmount change_amount = change_position->nValue;\n-            if (IsDust(*change_position, coin_selection_params.m_discard_feerate) || change_amount <= coin_selection_params.m_cost_of_change)\n+            if (recipient.fSubtractFeeFromAmount)\n             {\n-                nChangePosInOut = -1;\n-                change_amount = 0;\n-                txNew.vout.erase(change_position);\n-\n-                // Because we have dropped this change, the tx size and required fee will be different, so let's recalculate those\n-                tx_sizes = CalculateMaximumSignedTxSize(CTransaction(txNew), this, coin_control.fAllowWatchOnly);\n-                nBytes = tx_sizes.vsize;\n-                fee_needed = coin_selection_params.m_effective_feerate.GetFee(nBytes);\n-            }\n+                txout.nValue -= to_reduce / outputs_to_subtract_fee_from; // Subtract fee equally from each selected recipient\n \n-            // Update nFeeRet in case fee_needed changed due to dropping the change output\n-            if (fee_needed <= change_and_fee - change_amount) {\n-                nFeeRet = change_and_fee - change_amount;\n-            }\n-\n-            // Reduce output values for subtractFeeFromAmount\n-            if (nSubtractFeeFromAmount != 0) {\n-                CAmount to_reduce = fee_needed + change_amount - change_and_fee;\n-                int i = 0;\n-                bool fFirst = true;\n-                for (const auto& recipient : vecSend)\n+                if (fFirst) // first receiver pays the remainder not divisible by output count\n                 {\n-                    if (i == nChangePosInOut) {\n-                        ++i;\n-                    }\n-                    CTxOut& txout = txNew.vout[i];\n-\n-                    if (recipient.fSubtractFeeFromAmount)\n-                    {\n-                        txout.nValue -= to_reduce / nSubtractFeeFromAmount; // Subtract fee equally from each selected recipient\n-\n-                        if (fFirst) // first receiver pays the remainder not divisible by output count\n-                        {\n-                            fFirst = false;\n-                            txout.nValue -= to_reduce % nSubtractFeeFromAmount;\n-                        }\n-\n-                        // Error if this output is reduced to be below dust\n-                        if (IsDust(txout, chain().relayDustFee())) {\n-                            if (txout.nValue < 0) {\n-                                error = _(\"The transaction amount is too small to pay the fee\");\n-                            } else {\n-                                error = _(\"The transaction amount is too small to send after the fee has been deducted\");\n-                            }\n-                            return false;\n-                        }\n-                    }\n-                    ++i;\n+                    fFirst = false;\n+                    txout.nValue -= to_reduce % outputs_to_subtract_fee_from;\n                 }\n-                nFeeRet = fee_needed;\n-            }\n \n-            // Give up if change keypool ran out and change is required\n-            if (scriptChange.empty() && nChangePosInOut != -1) {\n-                return false;\n+                // Error if this output is reduced to be below dust\n+                if (IsDust(txout, chain().relayDustFee())) {\n+                    if (txout.nValue < 0) {\n+                        error = _(\"The transaction amount is too small to pay the fee\");\n+                    } else {\n+                        error = _(\"The transaction amount is too small to send after the fee has been deducted\");\n+                    }\n+                    return false;\n+                }\n             }\n+            ++i;\n         }\n+        nFeeRet = fee_needed;\n+    }\n \n-        // Shuffle selected coins and fill in final vin\n-        txNew.vin.clear();\n-        std::vector<CInputCoin> selected_coins(setCoins.begin(), setCoins.end());\n-        Shuffle(selected_coins.begin(), selected_coins.end(), FastRandomContext());\n-\n-        // Note how the sequence number is set to non-maxint so that\n-        // the nLockTime set above actually works.\n-        //\n-        // BIP125 defines opt-in RBF as any nSequence < maxint-1, so\n-        // we use the highest possible value in that range (maxint-2)\n-        // to avoid conflicting with other possible uses of nSequence,\n-        // and in the spirit of \"smallest possible change from prior\n-        // behavior.\"\n-        const uint32_t nSequence = coin_control.m_signal_bip125_rbf.value_or(m_signal_rbf) ? MAX_BIP125_RBF_SEQUENCE : (CTxIn::SEQUENCE_FINAL - 1);\n-        for (const auto& coin : selected_coins) {\n-            txNew.vin.push_back(CTxIn(coin.outpoint, CScript(), nSequence));\n-        }\n+    // Give up if change keypool ran out and change is required\n+    if (scriptChange.empty() && nChangePosInOut != -1) {\n+        return false;\n+    }",
      "path": "src/wallet/spend.cpp",
      "position": 546,
      "original_position": 546,
      "commit_id": "96c2c9520e80ee4fed92f0e1ab859d59fcbdb110",
      "original_commit_id": "96c2c9520e80ee4fed92f0e1ab859d59fcbdb110",
      "in_reply_to_id": 645476752,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I guess the original author forgot to add one. I've added an error message in a separate commit.",
      "created_at": "2021-06-04T17:08:21Z",
      "updated_at": "2021-06-04T17:08:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22008#discussion_r645727221",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/645727221"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22008"
        }
      },
      "start_line": 823,
      "original_start_line": 823,
      "start_side": "RIGHT",
      "line": 825,
      "original_line": 825,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/645733373",
      "pull_request_review_id": 676512123,
      "id": 645733373,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0NTczMzM3Mw==",
      "diff_hunk": "@@ -578,287 +578,266 @@ bool CWallet::CreateTransactionInternal(\n         FeeCalculation& fee_calc_out,\n         bool sign)\n {\n-    CAmount nValue = 0;\n+    AssertLockHeld(cs_wallet);\n+\n+    CMutableTransaction txNew; // The resulting transaction that we make\n+    txNew.nLockTime = GetLocktimeForNewTransaction(chain(), GetLastBlockHash(), GetLastBlockHeight());\n+\n+    CoinSelectionParams coin_selection_params; // Parameters for coin selection, init with dummy\n+    coin_selection_params.m_avoid_partial_spends = coin_control.m_avoid_partial_spends;\n+\n+    CAmount recipients_sum = 0;\n     const OutputType change_type = TransactionChangeType(coin_control.m_change_type ? *coin_control.m_change_type : m_default_change_type, vecSend);\n     ReserveDestination reservedest(this, change_type);\n-    unsigned int nSubtractFeeFromAmount = 0;\n-    for (const auto& recipient : vecSend)\n-    {\n-        if (nValue < 0 || recipient.nAmount < 0)\n-        {\n-            error = _(\"Transaction amounts must not be negative\");\n-            return false;\n+    unsigned int outputs_to_subtract_fee_from = 0; // The number of outputs which we are subtracting the fee from\n+    for (const auto& recipient : vecSend) {\n+        recipients_sum += recipient.nAmount;\n+\n+        if (recipient.fSubtractFeeFromAmount) {\n+            outputs_to_subtract_fee_from++;\n+            coin_selection_params.m_subtract_fee_outputs = true;\n         }\n-        nValue += recipient.nAmount;\n+    }\n \n-        if (recipient.fSubtractFeeFromAmount)\n-            nSubtractFeeFromAmount++;\n+    // Create change script that will be used if we need change\n+    // TODO: pass in scriptChange instead of reservedest so\n+    // change transaction isn't always pay-to-bitcoin-address\n+    CScript scriptChange;\n+\n+    // coin control: send change to custom address\n+    if (!std::get_if<CNoDestination>(&coin_control.destChange)) {\n+        scriptChange = GetScriptForDestination(coin_control.destChange);\n+    } else { // no coin control: send change to newly generated address\n+        // Note: We use a new key here to keep it from being obvious which side is the change.\n+        //  The drawback is that by not reusing a previous key, the change may be lost if a\n+        //  backup is restored, if the backup doesn't have the new private key for the change.\n+        //  If we reused the old key, it would be possible to add code to look for and\n+        //  rediscover unknown transactions that were written with keys of ours to recover\n+        //  post-backup change.\n+\n+        // Reserve a new key pair from key pool. If it fails, provide a dummy\n+        // destination in case we don't need change.\n+        CTxDestination dest;\n+        if (!reservedest.GetReservedDestination(dest, true)) {\n+            error = _(\"Transaction needs a change address, but we can't generate it. Please call keypoolrefill first.\");\n+        }\n+        scriptChange = GetScriptForDestination(dest);\n+        // A valid destination implies a change script (and\n+        // vice-versa). An empty change script will abort later, if the\n+        // change keypool ran out, but change is required.\n+        CHECK_NONFATAL(IsValidDestination(dest) != scriptChange.empty());\n     }\n-    if (vecSend.empty())\n-    {\n-        error = _(\"Transaction must have at least one recipient\");\n-        return false;\n+    CTxOut change_prototype_txout(0, scriptChange);\n+    coin_selection_params.change_output_size = GetSerializeSize(change_prototype_txout);\n+\n+    // Get size of spending the change output\n+    int change_spend_size = CalculateMaximumSignedInputSize(change_prototype_txout, this);\n+    // If the wallet doesn't know how to sign change output, assume p2sh-p2wpkh\n+    // as lower-bound to allow BnB to do it's thing\n+    if (change_spend_size == -1) {\n+        coin_selection_params.change_spend_size = DUMMY_NESTED_P2WPKH_INPUT_SIZE;\n+    } else {\n+        coin_selection_params.change_spend_size = (size_t)change_spend_size;\n     }\n \n-    CMutableTransaction txNew;\n+    // Set discard feerate\n+    coin_selection_params.m_discard_feerate = GetDiscardRate(*this);\n+\n+    // Get the fee rate to use effective values in coin selection\n     FeeCalculation feeCalc;\n-    TxSize tx_sizes;\n-    int nBytes;\n+    coin_selection_params.m_effective_feerate = GetMinimumFeeRate(*this, coin_control, &feeCalc);\n+    // Do not, ever, assume that it's fine to change the fee rate if the user has explicitly\n+    // provided one\n+    if (coin_control.m_feerate && coin_selection_params.m_effective_feerate > *coin_control.m_feerate) {\n+        error = strprintf(_(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\"), coin_control.m_feerate->ToString(FeeEstimateMode::SAT_VB), coin_selection_params.m_effective_feerate.ToString(FeeEstimateMode::SAT_VB));\n+        return false;\n+    }\n+    if (feeCalc.reason == FeeReason::FALLBACK && !m_allow_fallback_fee) {\n+        // eventually allow a fallback fee\n+        error = _(\"Fee estimation failed. Fallbackfee is disabled. Wait a few blocks or enable -fallbackfee.\");\n+        return false;\n+    }\n+\n+    // Get long term estimate\n+    CCoinControl cc_temp;\n+    cc_temp.m_confirm_target = chain().estimateMaxBlocks();\n+    coin_selection_params.m_long_term_feerate = GetMinimumFeeRate(*this, cc_temp, nullptr);\n+\n+    // Calculate the cost of change\n+    // Cost of change is the cost of creating the change output + cost of spending the change output in the future.\n+    // For creating the change output now, we use the effective feerate.\n+    // For spending the change output in the future, we use the discard feerate for now.\n+    // So cost of change = (change output size * effective feerate) + (size of spending change output * discard feerate)\n+    coin_selection_params.m_change_fee = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.change_output_size);\n+    coin_selection_params.m_cost_of_change = coin_selection_params.m_discard_feerate.GetFee(coin_selection_params.change_spend_size) + coin_selection_params.m_change_fee;\n+\n+    // vouts to the payees\n+    if (!coin_selection_params.m_subtract_fee_outputs) {\n+        coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+    }\n+    for (const auto& recipient : vecSend)\n     {\n-        std::set<CInputCoin> setCoins;\n-        LOCK(cs_wallet);\n-        txNew.nLockTime = GetLocktimeForNewTransaction(chain(), GetLastBlockHash(), GetLastBlockHeight());\n-        {\n-            std::vector<COutput> vAvailableCoins;\n-            AvailableCoins(vAvailableCoins, &coin_control, 1, MAX_MONEY, MAX_MONEY, 0);\n-            CoinSelectionParams coin_selection_params; // Parameters for coin selection, init with dummy\n-            coin_selection_params.m_avoid_partial_spends = coin_control.m_avoid_partial_spends;\n-\n-            // Create change script that will be used if we need change\n-            // TODO: pass in scriptChange instead of reservedest so\n-            // change transaction isn't always pay-to-bitcoin-address\n-            CScript scriptChange;\n-\n-            // coin control: send change to custom address\n-            if (!std::get_if<CNoDestination>(&coin_control.destChange)) {\n-                scriptChange = GetScriptForDestination(coin_control.destChange);\n-            } else { // no coin control: send change to newly generated address\n-                // Note: We use a new key here to keep it from being obvious which side is the change.\n-                //  The drawback is that by not reusing a previous key, the change may be lost if a\n-                //  backup is restored, if the backup doesn't have the new private key for the change.\n-                //  If we reused the old key, it would be possible to add code to look for and\n-                //  rediscover unknown transactions that were written with keys of ours to recover\n-                //  post-backup change.\n-\n-                // Reserve a new key pair from key pool. If it fails, provide a dummy\n-                // destination in case we don't need change.\n-                CTxDestination dest;\n-                if (!reservedest.GetReservedDestination(dest, true)) {\n-                    error = _(\"Transaction needs a change address, but we can't generate it. Please call keypoolrefill first.\");\n-                }\n-                scriptChange = GetScriptForDestination(dest);\n-                // A valid destination implies a change script (and\n-                // vice-versa). An empty change script will abort later, if the\n-                // change keypool ran out, but change is required.\n-                CHECK_NONFATAL(IsValidDestination(dest) != scriptChange.empty());\n-            }\n-            CTxOut change_prototype_txout(0, scriptChange);\n-            coin_selection_params.change_output_size = GetSerializeSize(change_prototype_txout);\n-\n-            // Get size of spending the change output\n-            int change_spend_size = CalculateMaximumSignedInputSize(change_prototype_txout, this);\n-            // If the wallet doesn't know how to sign change output, assume p2sh-p2wpkh\n-            // as lower-bound to allow BnB to do it's thing\n-            if (change_spend_size == -1) {\n-                coin_selection_params.change_spend_size = DUMMY_NESTED_P2WPKH_INPUT_SIZE;\n-            } else {\n-                coin_selection_params.change_spend_size = (size_t)change_spend_size;\n-            }\n+        CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n \n-            // Set discard feerate\n-            coin_selection_params.m_discard_feerate = GetDiscardRate(*this);\n+        // Include the fee cost for outputs.\n+        if (!coin_selection_params.m_subtract_fee_outputs) {\n+            coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n+        }\n \n-            // Get the fee rate to use effective values in coin selection\n-            coin_selection_params.m_effective_feerate = GetMinimumFeeRate(*this, coin_control, &feeCalc);\n-            // Do not, ever, assume that it's fine to change the fee rate if the user has explicitly\n-            // provided one\n-            if (coin_control.m_feerate && coin_selection_params.m_effective_feerate > *coin_control.m_feerate) {\n-                error = strprintf(_(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\"), coin_control.m_feerate->ToString(FeeEstimateMode::SAT_VB), coin_selection_params.m_effective_feerate.ToString(FeeEstimateMode::SAT_VB));\n-                return false;\n-            }\n-            if (feeCalc.reason == FeeReason::FALLBACK && !m_allow_fallback_fee) {\n-                // eventually allow a fallback fee\n-                error = _(\"Fee estimation failed. Fallbackfee is disabled. Wait a few blocks or enable -fallbackfee.\");\n-                return false;\n-            }\n+        if (IsDust(txout, chain().relayDustFee()))\n+        {\n+            error = _(\"Transaction amount too small\");\n+            return false;\n+        }\n+        txNew.vout.push_back(txout);\n+    }\n \n-            // Get long term estimate\n-            CCoinControl cc_temp;\n-            cc_temp.m_confirm_target = chain().estimateMaxBlocks();\n-            coin_selection_params.m_long_term_feerate = GetMinimumFeeRate(*this, cc_temp, nullptr);\n+    // Include the fees for things that aren't inputs, excluding the change output\n+    const CAmount not_input_fees = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.tx_noinputs_size);\n+    CAmount selection_target = recipients_sum + not_input_fees;\n \n-            // Calculate the cost of change\n-            // Cost of change is the cost of creating the change output + cost of spending the change output in the future.\n-            // For creating the change output now, we use the effective feerate.\n-            // For spending the change output in the future, we use the discard feerate for now.\n-            // So cost of change = (change output size * effective feerate) + (size of spending change output * discard feerate)\n-            coin_selection_params.m_change_fee = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.change_output_size);\n-            coin_selection_params.m_cost_of_change = coin_selection_params.m_discard_feerate.GetFee(coin_selection_params.change_spend_size) + coin_selection_params.m_change_fee;\n+    // Get available coins\n+    std::vector<COutput> vAvailableCoins;\n+    AvailableCoins(vAvailableCoins, &coin_control, 1, MAX_MONEY, MAX_MONEY, 0);\n \n-            coin_selection_params.m_subtract_fee_outputs = nSubtractFeeFromAmount != 0; // If we are doing subtract fee from recipient, don't use effective values\n+    // Choose coins to use\n+    CAmount inputs_sum = 0;\n+    std::set<CInputCoin> setCoins;\n+    if (!SelectCoins(vAvailableCoins, /* nTargetValue */ selection_target, setCoins, inputs_sum, coin_control, coin_selection_params))\n+    {\n+        error = _(\"Insufficient funds\");\n+        return false;\n+    }\n \n-            // vouts to the payees\n-            if (!coin_selection_params.m_subtract_fee_outputs) {\n-                coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n-            }\n-            for (const auto& recipient : vecSend)\n-            {\n-                CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n+    // Always make a change output\n+    // We will reduce the fee from this change output later, and remove the output if it is too small.\n+    const CAmount change_and_fee = inputs_sum - recipients_sum;\n+    assert(change_and_fee >= 0);\n+    CTxOut newTxOut(change_and_fee, scriptChange);\n \n-                // Include the fee cost for outputs.\n-                if (!coin_selection_params.m_subtract_fee_outputs) {\n-                    coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n-                }\n+    if (nChangePosInOut == -1)\n+    {\n+        // Insert change txn at random position:\n+        nChangePosInOut = GetRandInt(txNew.vout.size()+1);\n+    }\n+    else if ((unsigned int)nChangePosInOut > txNew.vout.size())\n+    {\n+        error = _(\"Change index out of range\");\n+        return false;\n+    }\n \n-                if (IsDust(txout, chain().relayDustFee()))\n-                {\n-                    error = _(\"Transaction amount too small\");\n-                    return false;\n-                }\n-                txNew.vout.push_back(txout);\n-            }\n+    assert(nChangePosInOut != -1);\n+    auto change_position = txNew.vout.insert(txNew.vout.begin() + nChangePosInOut, newTxOut);\n \n-            // Include the fees for things that aren't inputs, excluding the change output\n-            const CAmount not_input_fees = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.tx_noinputs_size);\n-            CAmount nValueToSelect = nValue + not_input_fees;\n+    // Shuffle selected coins and fill in final vin\n+    std::vector<CInputCoin> selected_coins(setCoins.begin(), setCoins.end());\n+    Shuffle(selected_coins.begin(), selected_coins.end(), FastRandomContext());\n \n-            // Choose coins to use\n-            CAmount inputs_sum = 0;\n-            setCoins.clear();\n-            if (!SelectCoins(vAvailableCoins, /* nTargetValue */ nValueToSelect, setCoins, inputs_sum, coin_control, coin_selection_params))\n-            {\n-                error = _(\"Insufficient funds\");\n-                return false;\n-            }\n-\n-            // Always make a change output\n-            // We will reduce the fee from this change output later, and remove the output if it is too small.\n-            const CAmount change_and_fee = inputs_sum - nValue;\n-            assert(change_and_fee >= 0);\n-            CTxOut newTxOut(change_and_fee, scriptChange);\n+    // Note how the sequence number is set to non-maxint so that\n+    // the nLockTime set above actually works.\n+    //\n+    // BIP125 defines opt-in RBF as any nSequence < maxint-1, so\n+    // we use the highest possible value in that range (maxint-2)\n+    // to avoid conflicting with other possible uses of nSequence,\n+    // and in the spirit of \"smallest possible change from prior\n+    // behavior.\"\n+    const uint32_t nSequence = coin_control.m_signal_bip125_rbf.value_or(m_signal_rbf) ? MAX_BIP125_RBF_SEQUENCE : (CTxIn::SEQUENCE_FINAL - 1);\n+    for (const auto& coin : selected_coins) {\n+        txNew.vin.push_back(CTxIn(coin.outpoint, CScript(), nSequence));\n+    }\n \n-            if (nChangePosInOut == -1)\n-            {\n-                // Insert change txn at random position:\n-                nChangePosInOut = GetRandInt(txNew.vout.size()+1);\n-            }\n-            else if ((unsigned int)nChangePosInOut > txNew.vout.size())\n-            {\n-                error = _(\"Change index out of range\");\n-                return false;\n-            }\n+    // Calculate the transaction fee\n+    TxSize tx_sizes = CalculateMaximumSignedTxSize(CTransaction(txNew), this, coin_control.fAllowWatchOnly);\n+    int nBytes = tx_sizes.vsize;\n+    if (nBytes < 0) {\n+        error = _(\"Signing transaction failed\");\n+        return false;\n+    }\n+    nFeeRet = coin_selection_params.m_effective_feerate.GetFee(nBytes);\n \n-            assert(nChangePosInOut != -1);\n-            auto change_position = txNew.vout.insert(txNew.vout.begin() + nChangePosInOut, newTxOut);\n+    // Subtract fee from the change output if not subtracting it from recipient outputs\n+    CAmount fee_needed = nFeeRet;\n+    if (!coin_selection_params.m_subtract_fee_outputs) {\n+        change_position->nValue -= fee_needed;\n+    }\n \n-            // Dummy fill vin for maximum size estimation\n-            //\n-            for (const auto& coin : setCoins) {\n-                txNew.vin.push_back(CTxIn(coin.outpoint,CScript()));\n-            }\n+    // We want to drop the change to fees if:\n+    // 1. The change output would be dust\n+    // 2. The change is within the (almost) exact match window, i.e. it is less than or equal to the cost of the change output (cost_of_change)\n+    CAmount change_amount = change_position->nValue;\n+    if (IsDust(*change_position, coin_selection_params.m_discard_feerate) || change_amount <= coin_selection_params.m_cost_of_change)\n+    {\n+        nChangePosInOut = -1;\n+        change_amount = 0;\n+        txNew.vout.erase(change_position);\n+\n+        // Because we have dropped this change, the tx size and required fee will be different, so let's recalculate those\n+        tx_sizes = CalculateMaximumSignedTxSize(CTransaction(txNew), this, coin_control.fAllowWatchOnly);\n+        nBytes = tx_sizes.vsize;\n+        fee_needed = coin_selection_params.m_effective_feerate.GetFee(nBytes);\n+    }\n \n-            // Calculate the transaction fee\n-            tx_sizes = CalculateMaximumSignedTxSize(CTransaction(txNew), this, coin_control.fAllowWatchOnly);\n-            nBytes = tx_sizes.vsize;\n-            if (nBytes < 0) {\n-                error = _(\"Signing transaction failed\");\n-                return false;\n-            }\n-            nFeeRet = coin_selection_params.m_effective_feerate.GetFee(nBytes);\n+    // Update nFeeRet in case fee_needed changed due to dropping the change output\n+    if (fee_needed <= change_and_fee - change_amount) {\n+        nFeeRet = change_and_fee - change_amount;\n+    }\n \n-            // Subtract fee from the change output if not subtrating it from recipient outputs\n-            CAmount fee_needed = nFeeRet;\n-            if (nSubtractFeeFromAmount == 0) {\n-                change_position->nValue -= fee_needed;\n+    // Reduce output values for subtractFeeFromAmount\n+    if (coin_selection_params.m_subtract_fee_outputs) {\n+        CAmount to_reduce = fee_needed + change_amount - change_and_fee;\n+        int i = 0;\n+        bool fFirst = true;\n+        for (const auto& recipient : vecSend)\n+        {\n+            if (i == nChangePosInOut) {\n+                ++i;\n             }\n+            CTxOut& txout = txNew.vout[i];\n \n-            // We want to drop the change to fees if:\n-            // 1. The change output would be dust\n-            // 2. The change is within the (almost) exact match window, i.e. it is less than or equal to the cost of the change output (cost_of_change)\n-            CAmount change_amount = change_position->nValue;\n-            if (IsDust(*change_position, coin_selection_params.m_discard_feerate) || change_amount <= coin_selection_params.m_cost_of_change)\n+            if (recipient.fSubtractFeeFromAmount)\n             {\n-                nChangePosInOut = -1;\n-                change_amount = 0;\n-                txNew.vout.erase(change_position);\n-\n-                // Because we have dropped this change, the tx size and required fee will be different, so let's recalculate those\n-                tx_sizes = CalculateMaximumSignedTxSize(CTransaction(txNew), this, coin_control.fAllowWatchOnly);\n-                nBytes = tx_sizes.vsize;\n-                fee_needed = coin_selection_params.m_effective_feerate.GetFee(nBytes);\n-            }\n+                txout.nValue -= to_reduce / outputs_to_subtract_fee_from; // Subtract fee equally from each selected recipient\n \n-            // Update nFeeRet in case fee_needed changed due to dropping the change output\n-            if (fee_needed <= change_and_fee - change_amount) {\n-                nFeeRet = change_and_fee - change_amount;\n-            }\n-\n-            // Reduce output values for subtractFeeFromAmount\n-            if (nSubtractFeeFromAmount != 0) {\n-                CAmount to_reduce = fee_needed + change_amount - change_and_fee;\n-                int i = 0;\n-                bool fFirst = true;\n-                for (const auto& recipient : vecSend)\n+                if (fFirst) // first receiver pays the remainder not divisible by output count\n                 {\n-                    if (i == nChangePosInOut) {\n-                        ++i;\n-                    }\n-                    CTxOut& txout = txNew.vout[i];\n-\n-                    if (recipient.fSubtractFeeFromAmount)\n-                    {\n-                        txout.nValue -= to_reduce / nSubtractFeeFromAmount; // Subtract fee equally from each selected recipient\n-\n-                        if (fFirst) // first receiver pays the remainder not divisible by output count\n-                        {\n-                            fFirst = false;\n-                            txout.nValue -= to_reduce % nSubtractFeeFromAmount;\n-                        }\n-\n-                        // Error if this output is reduced to be below dust\n-                        if (IsDust(txout, chain().relayDustFee())) {\n-                            if (txout.nValue < 0) {\n-                                error = _(\"The transaction amount is too small to pay the fee\");\n-                            } else {\n-                                error = _(\"The transaction amount is too small to send after the fee has been deducted\");\n-                            }\n-                            return false;\n-                        }\n-                    }\n-                    ++i;\n+                    fFirst = false;\n+                    txout.nValue -= to_reduce % outputs_to_subtract_fee_from;\n                 }\n-                nFeeRet = fee_needed;\n-            }\n \n-            // Give up if change keypool ran out and change is required\n-            if (scriptChange.empty() && nChangePosInOut != -1) {\n-                return false;\n+                // Error if this output is reduced to be below dust\n+                if (IsDust(txout, chain().relayDustFee())) {\n+                    if (txout.nValue < 0) {\n+                        error = _(\"The transaction amount is too small to pay the fee\");\n+                    } else {\n+                        error = _(\"The transaction amount is too small to send after the fee has been deducted\");\n+                    }\n+                    return false;\n+                }\n             }\n+            ++i;\n         }\n+        nFeeRet = fee_needed;\n+    }\n \n-        // Shuffle selected coins and fill in final vin\n-        txNew.vin.clear();\n-        std::vector<CInputCoin> selected_coins(setCoins.begin(), setCoins.end());\n-        Shuffle(selected_coins.begin(), selected_coins.end(), FastRandomContext());\n-\n-        // Note how the sequence number is set to non-maxint so that\n-        // the nLockTime set above actually works.\n-        //\n-        // BIP125 defines opt-in RBF as any nSequence < maxint-1, so\n-        // we use the highest possible value in that range (maxint-2)\n-        // to avoid conflicting with other possible uses of nSequence,\n-        // and in the spirit of \"smallest possible change from prior\n-        // behavior.\"\n-        const uint32_t nSequence = coin_control.m_signal_bip125_rbf.value_or(m_signal_rbf) ? MAX_BIP125_RBF_SEQUENCE : (CTxIn::SEQUENCE_FINAL - 1);\n-        for (const auto& coin : selected_coins) {\n-            txNew.vin.push_back(CTxIn(coin.outpoint, CScript(), nSequence));\n-        }\n+    // Give up if change keypool ran out and change is required\n+    if (scriptChange.empty() && nChangePosInOut != -1) {\n+        return false;\n+    }",
      "path": "src/wallet/spend.cpp",
      "position": 546,
      "original_position": 546,
      "commit_id": "96c2c9520e80ee4fed92f0e1ab859d59fcbdb110",
      "original_commit_id": "96c2c9520e80ee4fed92f0e1ab859d59fcbdb110",
      "in_reply_to_id": 645476752,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Oh, actually it does have an error message. It's set earlier in the function when a change address is fetched. When one is not available, the error message is set. If there is a different failure before we get to this particular condition, then that failure takes precedence and the error message is changed. But if we reach this failure condition, then the error message will have been set previously and does not need to be set here. So I dropped the commit I added.",
      "created_at": "2021-06-04T17:19:12Z",
      "updated_at": "2021-06-04T17:19:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22008#discussion_r645733373",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/645733373"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22008"
        }
      },
      "start_line": 823,
      "original_start_line": 823,
      "start_side": "RIGHT",
      "line": 825,
      "original_line": 825,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/645746200",
      "pull_request_review_id": 676528963,
      "id": 645746200,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0NTc0NjIwMA==",
      "diff_hunk": "@@ -774,17 +773,17 @@ bool CWallet::CreateTransactionInternal(\n         // Because we have dropped this change, the tx size and required fee will be different, so let's recalculate those\n         tx_sizes = CalculateMaximumSignedTxSize(CTransaction(txNew), this, coin_control.fAllowWatchOnly);\n         nBytes = tx_sizes.vsize;\n-        fee_needed = coin_selection_params.m_effective_feerate.GetFee(nBytes);\n+        nFeeRet = coin_selection_params.m_effective_feerate.GetFee(nBytes);\n     }\n \n-    // Update nFeeRet in case fee_needed changed due to dropping the change output\n-    if (fee_needed <= change_and_fee - change_amount) {\n+    // Update nFeeRet in case it changed due to dropping the change output",
      "path": "src/wallet/spend.cpp",
      "position": null,
      "original_position": 21,
      "commit_id": "96c2c9520e80ee4fed92f0e1ab859d59fcbdb110",
      "original_commit_id": "303a6645dc604e1d074a1aa6253f4dc8a1c3109e",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Remove unneeded fee_needed variable\" (303a6645dc604e1d074a1aa6253f4dc8a1c3109e)\r\n\r\nI think this comment is a big vague and maybe even misleading because this code isn't just updating the return value but also increasing the fee paid in the subtract-from-outputs case. I would maybe say something like \"// Increase nFeeRet to reflect extra fee paid by giving up the small change amount which is smaller than the cost of the change output.\"\r\n\r\n\r\n",
      "created_at": "2021-06-04T17:42:07Z",
      "updated_at": "2021-06-04T18:05:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22008#discussion_r645746200",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/645746200"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22008"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 779,
      "side": "RIGHT"
    }
  ]
}