{
  "type": "issue",
  "issue": {
    "id": 2632935303,
    "node_id": "I_kwDOABII586c72eH",
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31211",
    "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
    "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31211/labels%7B/name%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31211/comments",
    "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31211/events",
    "html_url": "https://github.com/bitcoin/bitcoin/issues/31211",
    "number": 31211,
    "state": "open",
    "state_reason": null,
    "title": "Mempool leak through the eviction policy",
    "body": "A spy can see whether a transaction exists in a target node's mempool before the node INV-announces it (overcoming the trickle protection).\r\n\r\n0. Fill all the inbound slots of the target (up to 117 by default), and make sure your connections are not protected from eviction (e.g., delay block delivery to the target, etc).\r\n1. Relay txA to the peer from connection CSpy.\r\n2. Issue more connections to the target (say, 100 more).\r\n3. If CSpy was not evicted while others were, it's likely CSpy [was protected](https://github.com/bitcoin/bitcoin/blob/6463117a29294f6ddc9fafecfd1e9023956cc41b/src/node/eviction.cpp#L192) because it provided a **new** transaction txA.\r\n\r\n----------\r\n\r\nIt's quite hard to pull off due to a lot of noise.\r\n\r\nA potential solution is a rolling window of recent transactions (say 1000) instead of the very recent ones. ",
    "user": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "assignees": [],
    "author_association": "MEMBER",
    "locked": false,
    "comments": 0,
    "created_at": "2024-11-04T14:13:41Z",
    "updated_at": "2024-11-04T14:14:42Z"
  },
  "events": []
}