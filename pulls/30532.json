{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30532",
    "id": 1989628214,
    "node_id": "PR_kwDOABII5852l1E2",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/30532",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/30532.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/30532.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30532",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30532/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30532/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30532/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/9113f6b605f9e0a3b438561837f1f4e4142ad3c7",
    "number": 30532,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "refactor: remove deprecated TxidFromString() in favour of transaction_identifier::FromHex()",
    "user": {
      "login": "stickies-v",
      "id": 69010457,
      "node_id": "MDQ6VXNlcjY5MDEwNDU3",
      "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stickies-v",
      "html_url": "https://github.com/stickies-v",
      "followers_url": "https://api.github.com/users/stickies-v/followers",
      "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
      "organizations_url": "https://api.github.com/users/stickies-v/orgs",
      "repos_url": "https://api.github.com/users/stickies-v/repos",
      "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/stickies-v/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Since https://github.com/bitcoin/bitcoin/pull/30482/commits/fab6ddbee64e50d5e2f499aebca35b5911896ec4, `TxidFromString()` has been deprecated because it is less robust than the `transaction_identifier::FromHex()` introduced in [the same PR](https://github.com/bitcoin/bitcoin/pull/30482). Specifically, it tries to recover from length-mismatches, recover from untrimmed whitespace, 0x-prefix and garbage at the end, instead of simply requiring exactly 64 hex-only characters.\r\n\r\nIn this PR, `TxidFromString` is removed completely to clean up the code and prevent further unsafe usage. Unit and fuzz test coverage on `uint256::FromHex()` and functions that wrap it is increased.\r\n\r\nNote: `TxidFromSring` allowed users to prefix strings with \"0x\", this is no longer allowed for `transaction_identifier::FromHex()`, so a helper function for input validation may prove helpful in the future _(this overlaps with the `uint256::uint256S()` vs `uint256::FromHex()` future cleanup)_. It is not relevant to this PR, though, besides the fact that this unused (except for in tests) functionality is removed.\r\n\r\nThe only users of `TxidFromString` are:\r\n- `test`, where it is straightforward to drop in the new `FromHex()` methods without much further concern\r\n- `qt` coincontrol. There is no need for input validation here, but txids are not guaranteed to be 64 characters. This is already handled by the existing code, so again, using `FromHex()` here seems quite straightforward.\r\n\r\nAddresses @maflcko's suggestion: https://github.com/bitcoin/bitcoin/pull/30482#discussion_r1691826934\r\n\r\nAlso removes `WtxidFromString()`, which is a test-only helper function.\r\n\r\n### Testing GUI changes\r\n\r\nTo test the GUI coincontrol affected lines, `regtest` is probably the easiest way to quickly get some test coins, you can use e.g.\r\n\r\n```\r\nalias cli=\"./src/bitcoin-cli -regtest\"\r\ncli createwallet \"coincontrol\"\r\n# generate 10 spendable outputs on 1 address\r\ncli generatetoaddress 10 $(cli -rpcwallet=coincontrol getnewaddress)\r\n# generate 10 spendable outputs on another address\r\ncli generatetoaddress 10 $(cli -rpcwallet=coincontrol getnewaddress)\r\n# make previous outputs spendable\r\ncli generatetoaddress 100 $(cli -rpcwallet=coincontrol getnewaddress)\r\n```",
    "labels": [
      {
        "id": 135961,
        "node_id": "MDU6TGFiZWwxMzU5NjE=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
        "name": "Refactoring",
        "color": "E6F6D6",
        "default": false
      }
    ],
    "created_at": "2024-07-26T15:02:08Z",
    "updated_at": "2024-07-31T13:56:59Z",
    "mergeable": true,
    "mergeable_state": "blocked",
    "merge_commit_sha": "c59d00aaf506d12df52f8c0c7126554658c4790c",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "stickies-v:2024-07/rm-txidfromstring",
      "ref": "2024-07/rm-txidfromstring",
      "sha": "9113f6b605f9e0a3b438561837f1f4e4142ad3c7",
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 431644530,
        "node_id": "R_kgDOGbpfcg",
        "name": "bitcoin",
        "full_name": "stickies-v/bitcoin",
        "owner": {
          "login": "stickies-v",
          "id": 69010457,
          "node_id": "MDQ6VXNlcjY5MDEwNDU3",
          "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/stickies-v",
          "html_url": "https://github.com/stickies-v",
          "followers_url": "https://api.github.com/users/stickies-v/followers",
          "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
          "organizations_url": "https://api.github.com/users/stickies-v/orgs",
          "repos_url": "https://api.github.com/users/stickies-v/repos",
          "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/stickies-v/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/stickies-v/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/stickies-v/bitcoin",
        "archive_url": "https://api.github.com/repos/stickies-v/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/stickies-v/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/stickies-v/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/stickies-v/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/stickies-v/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/stickies-v/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/stickies-v/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/stickies-v/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/stickies-v/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/stickies-v/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/stickies-v/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/stickies-v/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/stickies-v/bitcoin/events",
        "forks_url": "https://api.github.com/repos/stickies-v/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/stickies-v/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/stickies-v/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/stickies-v/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/stickies-v/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/stickies-v/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/stickies-v/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/stickies-v/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/stickies-v/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/stickies-v/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/stickies-v/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/stickies-v/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/stickies-v/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/stickies-v/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/stickies-v/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/stickies-v/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:stickies-v/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/stickies-v/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/stickies-v/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/stickies-v/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/stickies-v/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/stickies-v/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/stickies-v/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/stickies-v/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/stickies-v/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/stickies-v/bitcoin/hooks",
        "svn_url": "https://github.com/stickies-v/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 1,
        "stargazers_count": 2,
        "watchers_count": 2,
        "size": 253798,
        "default_branch": "master",
        "open_issues_count": 1,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2024-07-31T13:53:36Z",
        "created_at": "2021-11-24T22:26:41Z",
        "updated_at": "2024-06-19T14:39:47Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "174bedd8d98b50b57fc46db4c18c10cd862edb01",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 35686,
        "stargazers_count": 77421,
        "watchers_count": 77421,
        "size": 264000,
        "default_branch": "master",
        "open_issues_count": 672,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2024-07-31T13:53:39Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2024-07-31T13:16:39Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30532"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 93,
    "deletions": 57,
    "changed_files": 8,
    "commits": 4,
    "review_comments": 38,
    "comments": 4
  },
  "events": [
    {
      "event": "mentioned",
      "id": 13662561162,
      "node_id": "MEE_lADOABII586Q--0NzwAAAAMuWiOK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13662561162",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-26T15:02:09Z"
    },
    {
      "event": "subscribed",
      "id": 13662561172,
      "node_id": "SE_lADOABII586Q--0NzwAAAAMuWiOU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13662561172",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-26T15:02:09Z"
    },
    {
      "event": "commented",
      "id": 2252954178,
      "node_id": "IC_kwDOABII586GSVpC",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2252954178",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-26T15:02:11Z",
      "updated_at": "2024-07-31T13:53:41Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage\nFor detailed information about the code coverage, see the [test coverage report](https://corecheck.dev/bitcoin/bitcoin/pulls/30532).\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| Stale ACK | [hodlinator](https://github.com/bitcoin/bitcoin/pull/30532#pullrequestreview-2207923972), [maflcko](https://github.com/bitcoin/bitcoin/pull/30532#pullrequestreview-2209589526) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30532#issuecomment-2252954178",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30532"
    },
    {
      "event": "labeled",
      "id": 13662562043,
      "node_id": "LE_lADOABII586Q--0NzwAAAAMuWib7",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13662562043",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-26T15:02:13Z",
      "label": {
        "name": "Refactoring",
        "color": "E6F6D6"
      }
    },
    {
      "event": "reviewed",
      "id": 2202774226,
      "node_id": "PRR_kwDOABII586DS6rS",
      "url": null,
      "actor": null,
      "commit_id": "2cad2ef1886d31e647d88191a2d4a9d0ce834199",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK 2cad2ef1886d31e647d88191a2d4a9d0ce834199\r\n\r\nnit regarding PR summary:\r\nSpecifically, it is lacking length checks to ensure input is exactly 64 characters.\r\n->\r\nSpecifically, it does it's best to recover from length-mismatches, recover from untrimmed whitespace, `0x`-prefix and garbage at the end, instead of simply requiring exactly 64 hex-only characters.",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30532#pullrequestreview-2202774226",
      "submitted_at": "2024-07-26T21:48:38Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30532"
    },
    {
      "event": "reviewed",
      "id": 2203150611,
      "node_id": "PRR_kwDOABII586DUWkT",
      "url": null,
      "actor": null,
      "commit_id": "2cad2ef1886d31e647d88191a2d4a9d0ce834199",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30532#pullrequestreview-2203150611",
      "submitted_at": "2024-07-28T07:49:46Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30532"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13683748476,
      "node_id": "HRFPE_lADOABII586Q--0NzwAAAAMvnW58",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13683748476",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-29T17:04:39Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13683833646,
      "node_id": "HRFPE_lADOABII586Q--0NzwAAAAMvnrsu",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13683833646",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-29T17:12:10Z"
    },
    {
      "event": "labeled",
      "id": 13683834801,
      "node_id": "LE_lADOABII586Q--0NzwAAAAMvnr-x",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13683834801",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-29T17:12:17Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2256471158,
      "node_id": "IC_kwDOABII586GfwR2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2256471158",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-29T17:12:18Z",
      "updated_at": "2024-07-29T17:12:18Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/28061801420</sub>\n\n<details><summary>Hints</summary>\n\nMake sure to run all tests locally, according to the documentation.\n\nThe failure may happen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30532#issuecomment-2256471158",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30532"
    },
    {
      "event": "commented",
      "id": 2256479677,
      "node_id": "IC_kwDOABII586GfyW9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2256479677",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-29T17:16:16Z",
      "updated_at": "2024-07-29T17:16:48Z",
      "author_association": "CONTRIBUTOR",
      "body": "Force pushed to:\r\n- increase unittest coverage on `uint256::FromHex()`, as well as methods that wrap it (`Txid::FromHex()` and `Wtxid::FromHex()`)\r\n- add fuzz target `uint256_fromhex`\r\n\r\n> nit regarding PR summary:\r\n\r\nThanks, updated PR description.",
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30532#issuecomment-2256479677",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30532"
    },
    {
      "event": "unlabeled",
      "id": 13684698694,
      "node_id": "UNLE_lADOABII586Q--0NzwAAAAMvq-5G",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13684698694",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-29T18:29:27Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 2205685953,
      "node_id": "PRR_kwDOABII586DeBjB",
      "url": null,
      "actor": null,
      "commit_id": "30c7351491063dab127cff236074beddff59d1a5",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30532#pullrequestreview-2205685953",
      "submitted_at": "2024-07-29T23:09:45Z",
      "state": "CHANGES_REQUESTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30532"
    },
    {
      "event": "reviewed",
      "id": 2206897116,
      "node_id": "PRR_kwDOABII586DipPc",
      "url": null,
      "actor": null,
      "commit_id": "30c7351491063dab127cff236074beddff59d1a5",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30532#pullrequestreview-2206897116",
      "submitted_at": "2024-07-30T07:39:10Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30532"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13694895588,
      "node_id": "HRFPE_lADOABII586Q--0NzwAAAAMwR4Xk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13694895588",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-30T12:02:52Z"
    },
    {
      "event": "commented",
      "id": 2258191230,
      "node_id": "IC_kwDOABII586GmUN-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2258191230",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-30T12:06:42Z",
      "updated_at": "2024-07-30T12:06:42Z",
      "author_association": "CONTRIBUTOR",
      "body": "Force pushed to address review comments by [removing the new fuzz target and updating the existing one instead](https://github.com/bitcoin/bitcoin/pull/30532#discussion_r1696846017), and [updating a docstring in coincontroldialog.cpp](https://github.com/bitcoin/bitcoin/pull/30532#discussion_r1696759211). No other changes.",
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30532#issuecomment-2258191230",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30532"
    },
    {
      "event": "reviewed",
      "id": 2207923972,
      "node_id": "PRR_kwDOABII586Dmj8E",
      "url": null,
      "actor": null,
      "commit_id": "24a6de35857e88d968ef90cd6fbcda0003f0e3e3",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "ACK 24a6de35857e88d968ef90cd6fbcda0003f0e3e3\r\n\r\nMinor reservation, but not blocking: https://github.com/bitcoin/bitcoin/pull/30532/files#r1695679909\r\n\r\nTried to break `bitcoin-qt` Coin Control dialog on the previous revision (30c7351491063dab127cff236074beddff59d1a5) without success and confirmed that only comments and fuzz code have changed since then.\r\n\r\n(Passed `make check`).",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30532#pullrequestreview-2207923972",
      "submitted_at": "2024-07-30T15:18:04Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30532"
    },
    {
      "event": "reviewed",
      "id": 2209589526,
      "node_id": "PRR_kwDOABII586Ds6kW",
      "url": null,
      "actor": null,
      "commit_id": "24a6de35857e88d968ef90cd6fbcda0003f0e3e3",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Only left some test-only style-nits. Feel free to ignore.\r\n\r\nreview ACK 24a6de35857e88d968ef90cd6fbcda0003f0e3e 🎨\r\n\r\n<details><summary>Show signature</summary>\r\n\r\nSignature:\r\n\r\n```\r\nuntrusted comment: signature from minisign secret key on empty file; verify via: minisign -Vm \"${path_to_any_empty_file}\" -P RWTRmVTMeKV5noAMqVlsMugDDCyyTSbA3Re5AkUrhvLVln0tSaFWglOw -x \"${path_to_this_whole_four_line_signature_blob}\"\r\nRUTRmVTMeKV5npGrKx1nqXCw5zeVHdtdYURB/KlyA/LMFgpNCs+SkW9a8N95d+U4AP1RJMi+krxU1A3Yux4bpwZNLvVBKy0wLgM=\r\ntrusted comment: review ACK 24a6de35857e88d968ef90cd6fbcda0003f0e3e 🎨\r\nmyhszgeXHcG4zBfV085OKVMVT0Z23g+tNmrxR3lxWUxa1Q7mYqyLKn6T29n/APMWsREgWDZ9DtN5m9mZ+ZEHDw==\r\n```\r\n\r\n</details>\r\n",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30532#pullrequestreview-2209589526",
      "submitted_at": "2024-07-31T09:20:24Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30532"
    },
    {
      "event": "reviewed",
      "id": 2209647215,
      "node_id": "PRR_kwDOABII586DtIpv",
      "url": null,
      "actor": null,
      "commit_id": "17ebf1ac133d26676ba7ae3e40042fdf389d146f",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30532#pullrequestreview-2209647215",
      "submitted_at": "2024-07-31T09:23:51Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30532"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGQ1MGJhNzA4OTg5ZTU1ZDYwODE5NTlhY2Q3MmM3YjY4ZWQyOWE4OTA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d50ba708989e55d6081959acd72c7b68ed29a890",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/d50ba708989e55d6081959acd72c7b68ed29a890",
      "tree": {
        "sha": "88f3e418ce2c2d66a38787e8b77dc69061b837c6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/88f3e418ce2c2d66a38787e8b77dc69061b837c6"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 88f3e418ce2c2d66a38787e8b77dc69061b837c6\nparent 5d280130446d57d653c749005a2e363265d87686\nauthor stickies-v <stickies-v@protonmail.com> 1722269814 +0100\ncommitter stickies-v <stickies-v@protonmail.com> 1722433441 +0100\n\ntest: add uint256::FromHex unittest coverage\n\nSimultaneously cover transaction_identifier::FromHex()\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5g/ggIZt5fccjfOgXLHObl5mp1cFAmaqP6EACgkQXLHObl5m\np1d6fQ//W+KrMxg2hz1KR5D8hY5JFnvasKl32e2ikS9mr/vY1LvIYq35NOEmcbev\ncK/vWz/t+WWWfPCtF8OMs5rmF4HNIj/NDVAeIo+YqgcM7x0pwvMg3gFOOs2jL5pS\nG3I+jvaQtozoIETwgWyoKEZ7GKbuvtOWEZVR7QzEFiE8momynFDe9waAa1lt5xoy\nJTB2Rjk4d4Zw0Tkk0bitO9XJJX4MbEWEl4F+PfEblw1Fj4i7h5jInlf5KGZmf6cc\nz0kp8QSX15dR4oJlmi0MQFF1NHAnxaj99NREVzrZh4B7ID9uhRDiTEUNcKVqiOs+\nM3X1zvSyGTsdLmkwSrHv77l3zOymZsj5eKbZIqYRODb1hNEstrUgcS85K4gNvH6o\ngb+BZrxcXRe/RliJgs8e2Jd8u4Jf7x23ESniKwoJrmzAwCd0Q0n3iTv3k3GK9F//\nHNWHjpa2pjyLFvbpr9AaqJxPpzW8hHNaVg9sjI+Px0IaXd9avGlwbW6a9wRinvPY\nNHKDuTmpmwnGvr06JAim4LVlheuy0NGGss5FaiGMTHThbfH1LNzQsovlgdIn3PIN\nVVj6xJUNlXBW2GnQiZx4evRsfUw+cEa5wTBTuyUj0COoiy+1Mt8wBJ28K9bgzbyH\nuQ6SfGp+85i4LQJVZW6pIcav0ghRKgOh5I4tzrFGJURrZgO/wW8=\n=zMKN\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5d280130446d57d653c749005a2e363265d87686",
          "sha": "5d280130446d57d653c749005a2e363265d87686",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/5d280130446d57d653c749005a2e363265d87686"
        }
      ],
      "message": "test: add uint256::FromHex unittest coverage\n\nSimultaneously cover transaction_identifier::FromHex()",
      "committer": {
        "name": "stickies-v",
        "email": "stickies-v@protonmail.com",
        "date": "2024-07-31T13:44:01Z"
      },
      "author": {
        "name": "stickies-v",
        "email": "stickies-v@protonmail.com",
        "date": "2024-07-29T16:16:54Z"
      },
      "sha": "d50ba708989e55d6081959acd72c7b68ed29a890"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDM1YjM0N2JmZTMxZGU2YjExM2Q1NDg4OGY4MDJkZTllNmJlYzcyZDk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/35b347bfe31de6b113d54888f802de9e6bec72d9",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/35b347bfe31de6b113d54888f802de9e6bec72d9",
      "tree": {
        "sha": "63b0421b8a5539f426e7fbdc40f0302e9d4dec5e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/63b0421b8a5539f426e7fbdc40f0302e9d4dec5e"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 63b0421b8a5539f426e7fbdc40f0302e9d4dec5e\nparent d50ba708989e55d6081959acd72c7b68ed29a890\nauthor stickies-v <stickies-v@protonmail.com> 1722270901 +0100\ncommitter stickies-v <stickies-v@protonmail.com> 1722433442 +0100\n\nfuzz: increase FromHex() coverage\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5g/ggIZt5fccjfOgXLHObl5mp1cFAmaqP6IACgkQXLHObl5m\np1cPZw//QYMu0vRnGdrcpQMRDZp5Rbyq3/bYl9QIvKvaZOEJhL0eWZD0vmTtgZft\n4jNWReNXUYFiSeGR485AyhGkj4VrMSfWMDdvqmVpdXgiqdl1oRxvdP40Mmksr+dQ\nmq2j1IAvsMPqS4Vr7uye5qEgiZ7UiF0RbnSkXsHnUFLGiaJ0BVgy2mr7vcotJA+n\nO5NxvBbYNDnAKkjmKm/EJNkV1kO0GEjwa8o6rKh8xhZx3tkoSt53k5vlBdp9uSBE\npv6O+hSSFDitun8dgvn5olCGj3KtVz22I3FydgSQxhd7UQR7l062aa0RjkXGXMuS\nPwSUonRQysspIEu8q6jA87adUztMCz5MhyrsfdQm2u2Ya+uOLLDtOpQ/a8zpRMhJ\nJt70XGuaCNOY1uilzu9v3jxs/rG+/LjQKbtczTmJqAQ4HwjNDID+MncUA46129Em\n3U3s5eW/eRXa30NQ9wMfB1pBnCLgUynD7Y0sDIgj2tFsXpgPC/Mbr7m39fR8X1ie\nSJRQ9G9LM+/c+sBP35Z3Psk3OBUyb6NHfVsDktWHu539UQwdxpzX5fgWDo9mGLly\nxYchCGSHTVxrqBplH6GbgkqcgaCE3c55Pe5gbl5UD4i3DbBTTAC6q3ZTrTi/4Rz0\njd982XY1JOM06CtEkaRmkfKfMCVUBKpugpXMBxrHEv3Je84YSXg=\n=+L2x\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d50ba708989e55d6081959acd72c7b68ed29a890",
          "sha": "d50ba708989e55d6081959acd72c7b68ed29a890",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/d50ba708989e55d6081959acd72c7b68ed29a890"
        }
      ],
      "message": "fuzz: increase FromHex() coverage",
      "committer": {
        "name": "stickies-v",
        "email": "stickies-v@protonmail.com",
        "date": "2024-07-31T13:44:02Z"
      },
      "author": {
        "name": "stickies-v",
        "email": "stickies-v@protonmail.com",
        "date": "2024-07-29T16:35:01Z"
      },
      "sha": "35b347bfe31de6b113d54888f802de9e6bec72d9"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGMxZGRjY2ExNTliMzczYTBlYzBmMmJlNzQ1OTAwMzA4NjJlYWY1ZmM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c1ddcca159b373a0ec0f2be74590030862eaf5fc",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/c1ddcca159b373a0ec0f2be74590030862eaf5fc",
      "tree": {
        "sha": "933a8982a9a0b51fab0e21e6c78dbdf1c7538e36",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/933a8982a9a0b51fab0e21e6c78dbdf1c7538e36"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 933a8982a9a0b51fab0e21e6c78dbdf1c7538e36\nparent 35b347bfe31de6b113d54888f802de9e6bec72d9\nauthor stickies-v <stickies-v@protonmail.com> 1721938161 +0100\ncommitter stickies-v <stickies-v@protonmail.com> 1722433442 +0100\n\ntest: replace WtxidFromString with Wtxid::FromHex\n\nThe newly introduced Wtxid::FromHex is more robust and removes\nthe need for a WtxidFromString helper function\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5g/ggIZt5fccjfOgXLHObl5mp1cFAmaqP6IACgkQXLHObl5m\np1efog/7B2fEcJ9vVsUxAiuBqqjZwva30HxPnqpvJJDzBvjL7cg+sSw/CTUZjVik\nKmVTIyjp/OQKpwm0hic+Dqqz6C8JVVqh4MUPx/DlhrRPJXjKfMzjm37pvQWdCTkK\nKfQuXQDUtKEUn7U/Trk+YuR/tL9xROw5LeG1UYJXxSWcltS4/BiIt4jMxWujNbGd\nrXE1OR81qxC0JrISlw8Y8ksXWQmawZOOxWepJwoG2j80Tzd/gZdQ9izaDrVzzzhU\n381ZzkEz3uP27WVAwtF+0e054ilGpwI0mdIH5M+8M8yBm+xZyq5ixHgcH1fJgVaY\nn6BvssIiv21qayGQRcReLbUG15bLfnmhVivQep/cM8pZDoqP0Uw29lQ9ShITVnSd\n47Y67099tXRB3dmCruMRPbazGSH3nASBwGkvPFeYPkr6S39hQBbKa88AyrqZlvcm\nb5ZcxLsyyhw4lmgTVSKb4r+t5DH3uh0GaGuWmJbA7KSjp93feguOulxWMfMj+spe\nRxcKtBzyVMAv348b+2IzsGnuHFD6gblz9TTkTSh0J0AvRsUwsSPV92SoVeYqpcww\n1H9oetbNoQai90WmvJ4jtOzDJA4pbs0chlp0Hc1pOqGr7ewWab6nAVQStyWRZWBX\nmoZiJRzXnxOijlxmfGv+dS9BMz6OcKHfo3RDFo53g4jyxNRs3Tk=\n=QlVw\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/35b347bfe31de6b113d54888f802de9e6bec72d9",
          "sha": "35b347bfe31de6b113d54888f802de9e6bec72d9",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/35b347bfe31de6b113d54888f802de9e6bec72d9"
        }
      ],
      "message": "test: replace WtxidFromString with Wtxid::FromHex\n\nThe newly introduced Wtxid::FromHex is more robust and removes\nthe need for a WtxidFromString helper function",
      "committer": {
        "name": "stickies-v",
        "email": "stickies-v@protonmail.com",
        "date": "2024-07-31T13:44:02Z"
      },
      "author": {
        "name": "stickies-v",
        "email": "stickies-v@protonmail.com",
        "date": "2024-07-25T20:09:21Z"
      },
      "sha": "c1ddcca159b373a0ec0f2be74590030862eaf5fc"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDkxMTNmNmI2MDVmOWUwYTNiNDM4NTYxODM3ZjFmNGU0MTQyYWQzYzc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9113f6b605f9e0a3b438561837f1f4e4142ad3c7",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/9113f6b605f9e0a3b438561837f1f4e4142ad3c7",
      "tree": {
        "sha": "e53a3c45a61d20ca71ad17920b86f5136269185f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e53a3c45a61d20ca71ad17920b86f5136269185f"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree e53a3c45a61d20ca71ad17920b86f5136269185f\nparent c1ddcca159b373a0ec0f2be74590030862eaf5fc\nauthor stickies-v <stickies-v@protonmail.com> 1721991100 +0100\ncommitter stickies-v <stickies-v@protonmail.com> 1722433443 +0100\n\nrefactor: remove TxidFromString\n\nTxidFromString was deprecated due to missing 64-character length-check\nand hex-check, replace it with the more robust Txid::FromHex.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5g/ggIZt5fccjfOgXLHObl5mp1cFAmaqP6MACgkQXLHObl5m\np1coRA//Wjy1Pa7TTpxHfZGV11m3nCoC+siEiD4a+oKVYQJv9wfe9k33SHzOE2q1\nGLcdpFmLEd739SYPLbLaxvNZ1k3fqTsSoVk7eJLRWBxw2qbuZZViAExpO5oCia/l\nP5PkMVHcfPOVCVl9u9tdITCIdOHuJJVV1GRe5/OeVuuP+rOO/evcVx7KwMPDFW4j\njPQbS6xKAzKK4n/BqAhbOCjwvVGeseVHP/T+xDqPBr9EKL15GRzudw4TjRRBu3md\n3jiRBcIJcJ6e1/ug5RmYShRuKfNIMBM+djXINIfx651Y6gXoNch1BrQZ1F+x9txx\nH4aDu70U8EtwgYcRQmMieDsrJbmFFWusSnkAUdLyCXUfxWfX8UJsogYAEye8tlth\nzLopXnVz0fYPw6RTyTejeIMj9S/vtfPcXBu7hXL5T0a+i/yVfx1on5lWuIbNE4xc\nwMAxCoIBrQhhSxQ3JzhkPp/KucaXGim0BeH5qC4e0uEH7on3WqOyp7fBbYOEMOha\nOaIRJt8knKnDe+//9nglnsgIQS27UKAEvLqf7ztm7NR90HRs4InX/q5Ny4Jv0t66\naM4er8Sczp668y/WPGdsocjWOBSzxZOtUcJnUi5yFc2pA+i2R80CCvDI8QekAt8C\n/jhnT+LuZVSodCvMDRfSFmaeyNb+B0QFz/WIDKO9Ne5Edq3QTTs=\n=EkMa\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c1ddcca159b373a0ec0f2be74590030862eaf5fc",
          "sha": "c1ddcca159b373a0ec0f2be74590030862eaf5fc",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/c1ddcca159b373a0ec0f2be74590030862eaf5fc"
        }
      ],
      "message": "refactor: remove TxidFromString\n\nTxidFromString was deprecated due to missing 64-character length-check\nand hex-check, replace it with the more robust Txid::FromHex.",
      "committer": {
        "name": "stickies-v",
        "email": "stickies-v@protonmail.com",
        "date": "2024-07-31T13:44:03Z"
      },
      "author": {
        "name": "stickies-v",
        "email": "stickies-v@protonmail.com",
        "date": "2024-07-26T10:51:40Z"
      },
      "sha": "9113f6b605f9e0a3b438561837f1f4e4142ad3c7"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13710455761,
      "node_id": "HRFPE_lADOABII586Q--0NzwAAAAMxNPPR",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13710455761",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-31T13:53:38Z"
    },
    {
      "event": "reviewed",
      "id": 2210086223,
      "node_id": "PRR_kwDOABII586Duz1P",
      "url": null,
      "actor": null,
      "commit_id": "9113f6b605f9e0a3b438561837f1f4e4142ad3c7",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Force-pushed to address test-only style nits, and [generalizing `TestFromHex()` further](https://github.com/bitcoin/bitcoin/pull/30532#discussion_r1698197301) to allow for testing`uint160` too. ",
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30532#pullrequestreview-2210086223",
      "submitted_at": "2024-07-31T13:56:59Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30532"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1693622390",
      "pull_request_review_id": 2202774226,
      "id": 1693622390,
      "node_id": "PRRC_kwDOABII585k8qB2",
      "diff_hunk": "@@ -240,7 +235,7 @@ void CoinControlDialog::lockCoin()\n     if (contextMenuItem->checkState(COLUMN_CHECKBOX) == Qt::Checked)\n         contextMenuItem->setCheckState(COLUMN_CHECKBOX, Qt::Unchecked);\n \n-    COutPoint outpt(TxidFromString(contextMenuItem->data(COLUMN_ADDRESS, TxHashRole).toString().toStdString()), contextMenuItem->data(COLUMN_ADDRESS, VOutRole).toUInt());\n+    COutPoint outpt(Txid::FromHex(contextMenuItem->data(COLUMN_ADDRESS, TxHashRole).toString().toStdString()).value(), contextMenuItem->data(COLUMN_ADDRESS, VOutRole).toUInt());",
      "path": "src/qt/coincontroldialog.cpp",
      "position": 33,
      "original_position": 33,
      "commit_id": "9113f6b605f9e0a3b438561837f1f4e4142ad3c7",
      "original_commit_id": "2cad2ef1886d31e647d88191a2d4a9d0ce834199",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This will now throw `std::bad_optional_access` instead of.. trying to make sense of a potentially non-conforming hex string and continuing. I guess that's fair. :) Not sure on the guarantees of a valid hex-string here.",
      "created_at": "2024-07-26T21:31:01Z",
      "updated_at": "2024-07-26T21:48:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30532#discussion_r1693622390",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1693622390"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30532"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 238,
      "original_line": 238,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1693624054",
      "pull_request_review_id": 2202774226,
      "id": 1693624054,
      "node_id": "PRRC_kwDOABII585k8qb2",
      "diff_hunk": "@@ -328,6 +328,15 @@ BOOST_AUTO_TEST_CASE(parse)\n         BOOST_CHECK_EQUAL(uint256S(\" 0x\").GetHex(), s_0);\n         BOOST_CHECK_EQUAL(uint256S(\" \").GetHex(), s_0);\n     }\n+    {\n+        // Make sure FromHex respects string_view length and stops reading at\n+        // end of the substring.\n+        auto chars_68{\"0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123\"};\n+        std::string_view chars_64{chars_68, 64};\n+        BOOST_CHECK(!uint256::FromHex(std::string_view(chars_68, 63))); // too short\n+        BOOST_CHECK_EQUAL(uint256::FromHex(std::string_view(chars_68, 64)).value().ToString(), chars_64);\n+        BOOST_CHECK(!uint256::FromHex(std::string_view(chars_68, 65))); // too long\n+    }",
      "path": "src/test/uint256_tests.cpp",
      "position": null,
      "original_position": 12,
      "commit_id": "9113f6b605f9e0a3b438561837f1f4e4142ad3c7",
      "original_commit_id": "2cad2ef1886d31e647d88191a2d4a9d0ce834199",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good to see the former `TxidFromString()` test resurrected with even more checks!\r\n\r\nI noticed there are no tests for `FromHex` returning `nullopt` for invalid characters, care to add?\r\n\r\nMaybe also mix up the hex case in `chars_68`?\r\n`0123456789abcdef0123456789ABCDEF0123456789abcdef0123456789ABCDEF0123`",
      "created_at": "2024-07-26T21:33:41Z",
      "updated_at": "2024-07-26T21:48:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30532#discussion_r1693624054",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1693624054"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30532"
        }
      },
      "start_line": null,
      "original_start_line": 331,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 378,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1693930185",
      "pull_request_review_id": 2203150611,
      "id": 1693930185,
      "node_id": "PRRC_kwDOABII585k91LJ",
      "diff_hunk": "@@ -174,22 +174,17 @@ void CoinControlDialog::showMenu(const QPoint &point)\n         contextMenuItem = item;\n \n         // disable some items (like Copy Transaction ID, lock, unlock) for tree roots in context menu\n-        if (item->data(COLUMN_ADDRESS, TxHashRole).toString().length() == 64) // transaction hash is 64 characters (this means it is a child node, so it is not a parent node in tree mode)\n-        {\n+        auto txid{Txid::FromHex(item->data(COLUMN_ADDRESS, TxHashRole).toString().toStdString())};",
      "path": "src/qt/coincontroldialog.cpp",
      "position": 6,
      "original_position": 6,
      "commit_id": "9113f6b605f9e0a3b438561837f1f4e4142ad3c7",
      "original_commit_id": "2cad2ef1886d31e647d88191a2d4a9d0ce834199",
      "in_reply_to_id": null,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "can you please tell me which test covers this line?\r\nI tried checking it via the UI, but I think I would need testnet coins to be able to exercise it - is there a simpler way?",
      "created_at": "2024-07-27T09:40:40Z",
      "updated_at": "2024-07-28T07:50:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30532#discussion_r1693930185",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1693930185"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30532"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 177,
      "original_line": 177,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1694701815",
      "pull_request_review_id": 2204099260,
      "id": 1694701815,
      "node_id": "PRRC_kwDOABII585lAxj3",
      "diff_hunk": "@@ -174,22 +174,17 @@ void CoinControlDialog::showMenu(const QPoint &point)\n         contextMenuItem = item;\n \n         // disable some items (like Copy Transaction ID, lock, unlock) for tree roots in context menu\n-        if (item->data(COLUMN_ADDRESS, TxHashRole).toString().length() == 64) // transaction hash is 64 characters (this means it is a child node, so it is not a parent node in tree mode)\n-        {\n+        auto txid{Txid::FromHex(item->data(COLUMN_ADDRESS, TxHashRole).toString().toStdString())};",
      "path": "src/qt/coincontroldialog.cpp",
      "position": 6,
      "original_position": 6,
      "commit_id": "9113f6b605f9e0a3b438561837f1f4e4142ad3c7",
      "original_commit_id": "2cad2ef1886d31e647d88191a2d4a9d0ce834199",
      "in_reply_to_id": 1693930185,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> can you please tell me which test covers this line?\r\n\r\nPossibly none, as the GUI tests are sparse at best.\r\n\r\n> I tried checking it via the UI, but I think I would need testnet coins to be able to exercise it - is there a simpler way?\r\n\r\nFor the majority of testing `regtest` (a non-public test-only network) is more than sufficient.",
      "created_at": "2024-07-29T07:11:27Z",
      "updated_at": "2024-07-29T07:11:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30532#discussion_r1694701815",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1694701815"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30532"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 177,
      "original_line": 177,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1694940958",
      "pull_request_review_id": 2204485711,
      "id": 1694940958,
      "node_id": "PRRC_kwDOABII585lBr8e",
      "diff_hunk": "@@ -174,22 +174,17 @@ void CoinControlDialog::showMenu(const QPoint &point)\n         contextMenuItem = item;\n \n         // disable some items (like Copy Transaction ID, lock, unlock) for tree roots in context menu\n-        if (item->data(COLUMN_ADDRESS, TxHashRole).toString().length() == 64) // transaction hash is 64 characters (this means it is a child node, so it is not a parent node in tree mode)\n-        {\n+        auto txid{Txid::FromHex(item->data(COLUMN_ADDRESS, TxHashRole).toString().toStdString())};",
      "path": "src/qt/coincontroldialog.cpp",
      "position": 6,
      "original_position": 6,
      "commit_id": "9113f6b605f9e0a3b438561837f1f4e4142ad3c7",
      "original_commit_id": "2cad2ef1886d31e647d88191a2d4a9d0ce834199",
      "in_reply_to_id": 1693930185,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`regtest` is indeed how I've been testing my changes, added some instructions to the OP.",
      "created_at": "2024-07-29T09:55:14Z",
      "updated_at": "2024-07-29T09:55:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30532#discussion_r1694940958",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1694940958"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30532"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 177,
      "original_line": 177,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1695573341",
      "pull_request_review_id": 2205522554,
      "id": 1695573341,
      "node_id": "PRRC_kwDOABII585lEGVd",
      "diff_hunk": "@@ -328,6 +328,15 @@ BOOST_AUTO_TEST_CASE(parse)\n         BOOST_CHECK_EQUAL(uint256S(\" 0x\").GetHex(), s_0);\n         BOOST_CHECK_EQUAL(uint256S(\" \").GetHex(), s_0);\n     }\n+    {\n+        // Make sure FromHex respects string_view length and stops reading at\n+        // end of the substring.\n+        auto chars_68{\"0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123\"};\n+        std::string_view chars_64{chars_68, 64};\n+        BOOST_CHECK(!uint256::FromHex(std::string_view(chars_68, 63))); // too short\n+        BOOST_CHECK_EQUAL(uint256::FromHex(std::string_view(chars_68, 64)).value().ToString(), chars_64);\n+        BOOST_CHECK(!uint256::FromHex(std::string_view(chars_68, 65))); // too long\n+    }",
      "path": "src/test/uint256_tests.cpp",
      "position": null,
      "original_position": 12,
      "commit_id": "9113f6b605f9e0a3b438561837f1f4e4142ad3c7",
      "original_commit_id": "2cad2ef1886d31e647d88191a2d4a9d0ce834199",
      "in_reply_to_id": 1693624054,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I've added 17ebf1ac133d26676ba7ae3e40042fdf389d146f with a bunch more unit test coverage for `uint256::FromHex()`  and methods that wrap it, including invalid characters, `0x` prefix, and mixed case. Additionally, I've also added a fuzz target in ed764b55abb18dacb814658d328098a77682d128",
      "created_at": "2024-07-29T17:06:29Z",
      "updated_at": "2024-07-29T17:12:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30532#discussion_r1695573341",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1695573341"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30532"
        }
      },
      "start_line": null,
      "original_start_line": 331,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 378,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1695586065",
      "pull_request_review_id": 2205542417,
      "id": 1695586065,
      "node_id": "PRRC_kwDOABII585lEJcR",
      "diff_hunk": "@@ -240,7 +235,7 @@ void CoinControlDialog::lockCoin()\n     if (contextMenuItem->checkState(COLUMN_CHECKBOX) == Qt::Checked)\n         contextMenuItem->setCheckState(COLUMN_CHECKBOX, Qt::Unchecked);\n \n-    COutPoint outpt(TxidFromString(contextMenuItem->data(COLUMN_ADDRESS, TxHashRole).toString().toStdString()), contextMenuItem->data(COLUMN_ADDRESS, VOutRole).toUInt());\n+    COutPoint outpt(Txid::FromHex(contextMenuItem->data(COLUMN_ADDRESS, TxHashRole).toString().toStdString()).value(), contextMenuItem->data(COLUMN_ADDRESS, VOutRole).toUInt());",
      "path": "src/qt/coincontroldialog.cpp",
      "position": 33,
      "original_position": 33,
      "commit_id": "9113f6b605f9e0a3b438561837f1f4e4142ad3c7",
      "original_commit_id": "2cad2ef1886d31e647d88191a2d4a9d0ce834199",
      "in_reply_to_id": 1693622390,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "There's no user input here, this dialog just shows coins that are already in the wallet (and thus validated), so I think this is a safe change?",
      "created_at": "2024-07-29T17:15:40Z",
      "updated_at": "2024-07-29T17:15:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30532#discussion_r1695586065",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1695586065"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30532"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 238,
      "original_line": 238,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1695677286",
      "pull_request_review_id": 2205685953,
      "id": 1695677286,
      "node_id": "PRRC_kwDOABII585lEftm",
      "diff_hunk": "@@ -0,0 +1,23 @@\n+// Copyright (c) 2020-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <uint256.h>\n+#include <util/transaction_identifier.h>\n+\n+FUZZ_TARGET(uint256_fromhex)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    const auto input{fuzzed_data_provider.ConsumeRandomLengthString()};\n+    const auto result{uint256::FromHex(input)};\n+    if (result) {\n+        // we only expect a result for a 64 character hex-string\n+        assert(input.length() == 64);\n+\n+        // check we can also construct {T,Wt}xids from a valid 64 character hex-string input\n+        assert(Txid::FromHex(input));\n+        assert(Wtxid::FromHex(input));\n+    }\n+}",
      "path": "src/test/fuzz/uint256.cpp",
      "position": null,
      "original_position": 23,
      "commit_id": "9113f6b605f9e0a3b438561837f1f4e4142ad3c7",
      "original_commit_id": "30c7351491063dab127cff236074beddff59d1a5",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I guess the red warning symbol is GitHub complaining about missing empty line at EOF. Best to fix in order to avoid warnings in editors, git diffs, etc.",
      "created_at": "2024-07-29T18:25:18Z",
      "updated_at": "2024-07-29T23:09:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30532#discussion_r1695677286",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1695677286"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30532"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 23,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1695679909",
      "pull_request_review_id": 2205685953,
      "id": 1695679909,
      "node_id": "PRRC_kwDOABII585lEgWl",
      "diff_hunk": "@@ -330,6 +331,57 @@ BOOST_AUTO_TEST_CASE(parse)\n     }\n }\n \n+/**\n+ * Implemented as a templated function so it can be reused by other classes that have a FromHex()\n+ * method that wraps uint256::FromHex(), such as transaction_identifier::FromHex().\n+ */\n+template <typename T>\n+void TestFromHex64Chars()\n+{\n+    std::string valid_64char_input{\"0123456789abcdef0123456789ABCDEF0123456789abcdef0123456789ABCDEF\"};\n+    {\n+        // check that lower and upper case hex characters are accepted\n+        auto valid_result{T::FromHex(valid_64char_input)};\n+        BOOST_REQUIRE(valid_result);\n+        BOOST_CHECK_EQUAL(valid_result->ToString(), ToLower(valid_64char_input));\n+    }\n+    {\n+        // check that only strings of size 64 are accepted\n+        BOOST_CHECK(!T::FromHex(\"\"));\n+        BOOST_CHECK(!T::FromHex(\"0\"));\n+        BOOST_CHECK(!T::FromHex(\"0123456789abcdef0123456789ABCDEF\"));                                  // 32 chars\n+        BOOST_CHECK(!T::FromHex(\"0123456789abcdef0123456789ABCDEF0123456789abcdef0123456789ABCDE\"));   // 63 chars\n+        BOOST_CHECK(!T::FromHex(\"0123456789abcdef0123456789ABCDEF0123456789abcdef0123456789ABCDEF0\")); // 65 chars\n+    }\n+    {\n+        // check that non-hex characters are not accepted\n+        std::string invalid_chars{R\"( !\"#$%&'()*+,-./:;<=>?@GHIJKLMNOPQRSTUVWXYZ[\\]^_`ghijklmnopqrstuvwxyz{|}~)\"};\n+        std::string valid_base{\"0123456789abcdef0123456789ABCDEF0123456789abcdef0123456789ABCDE\"}; // 63 chars\n+        BOOST_CHECK_EQUAL(valid_base.length(), 63);\n+        for (auto c : invalid_chars) {\n+            BOOST_CHECK(!T::FromHex(valid_base + c));\n+        }\n+        // 0x prefixes are invalid\n+        std::string invalid_prefix{\"0x\" + valid_64char_input};\n+        BOOST_CHECK(!T::FromHex(std::string_view(invalid_prefix.data(), 64)));\n+        BOOST_CHECK(!T::FromHex(invalid_prefix));\n+    }\n+    {\n+        // check that string_view length is respected\n+        std::string chars_68{valid_64char_input + \"0123\"};\n+        BOOST_CHECK(T::FromHex(std::string_view(chars_68.data(), 64)));\n+        BOOST_CHECK(!T::FromHex(std::string_view(chars_68.data(), 63))); // too short\n+        BOOST_CHECK(!T::FromHex(std::string_view(chars_68.data(), 65))); // too long\n+    }\n+}\n+\n+BOOST_AUTO_TEST_CASE(from_hex)\n+{\n+    TestFromHex64Chars<uint256>();\n+    TestFromHex64Chars<Txid>();\n+    TestFromHex64Chars<Wtxid>();",
      "path": "src/test/uint256_tests.cpp",
      "position": null,
      "original_position": 60,
      "commit_id": "9113f6b605f9e0a3b438561837f1f4e4142ad3c7",
      "original_commit_id": "30c7351491063dab127cff236074beddff59d1a5",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Very nice to see the additional coverage!\r\n\r\nIMHO it is overkill to be testing the `Txid`/`Wtxid` clients of `FromHex` here.",
      "created_at": "2024-07-29T18:27:36Z",
      "updated_at": "2024-07-29T23:09:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30532#discussion_r1695679909",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1695679909"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30532"
        }
      },
      "start_line": null,
      "original_start_line": 380,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 382,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1695897672",
      "pull_request_review_id": 2205685953,
      "id": 1695897672,
      "node_id": "PRRC_kwDOABII585lFVhI",
      "diff_hunk": "@@ -174,22 +174,17 @@ void CoinControlDialog::showMenu(const QPoint &point)\n         contextMenuItem = item;\n \n         // disable some items (like Copy Transaction ID, lock, unlock) for tree roots in context menu\n-        if (item->data(COLUMN_ADDRESS, TxHashRole).toString().length() == 64) // transaction hash is 64 characters (this means it is a child node, so it is not a parent node in tree mode)\n-        {\n+        auto txid{Txid::FromHex(item->data(COLUMN_ADDRESS, TxHashRole).toString().toStdString())};\n+        if (txid) { // transaction hash is 64 characters (this means it is a child node, so it is not a parent node in tree mode)",
      "path": "src/qt/coincontroldialog.cpp",
      "position": null,
      "original_position": 7,
      "commit_id": "9113f6b605f9e0a3b438561837f1f4e4142ad3c7",
      "original_commit_id": "30c7351491063dab127cff236074beddff59d1a5",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Comment seems a bit off now that `== 64` is removed.\r\n```suggestion\r\n        if (txid) { // transaction hash is a valid txid (this means it is a child node, so it is not a parent node in tree mode)\r\n```\r\nSame in `CoinControlDialog::viewItemChanged`.",
      "created_at": "2024-07-29T20:50:40Z",
      "updated_at": "2024-07-29T23:09:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30532#discussion_r1695897672",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1695897672"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30532"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 178,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1695995273",
      "pull_request_review_id": 2205685953,
      "id": 1695995273,
      "node_id": "PRRC_kwDOABII585lFtWJ",
      "diff_hunk": "@@ -240,7 +235,7 @@ void CoinControlDialog::lockCoin()\n     if (contextMenuItem->checkState(COLUMN_CHECKBOX) == Qt::Checked)\n         contextMenuItem->setCheckState(COLUMN_CHECKBOX, Qt::Unchecked);\n \n-    COutPoint outpt(TxidFromString(contextMenuItem->data(COLUMN_ADDRESS, TxHashRole).toString().toStdString()), contextMenuItem->data(COLUMN_ADDRESS, VOutRole).toUInt());\n+    COutPoint outpt(Txid::FromHex(contextMenuItem->data(COLUMN_ADDRESS, TxHashRole).toString().toStdString()).value(), contextMenuItem->data(COLUMN_ADDRESS, VOutRole).toUInt());",
      "path": "src/qt/coincontroldialog.cpp",
      "position": 33,
      "original_position": 33,
      "commit_id": "9113f6b605f9e0a3b438561837f1f4e4142ad3c7",
      "original_commit_id": "2cad2ef1886d31e647d88191a2d4a9d0ce834199",
      "in_reply_to_id": 1693622390,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Probably safe. I clicked around a bunch in the Coin Control dialog in both tree & list nodes. Wasn't able to have the debugger detect anything that failed to parse as txid's in any of these functions except for when right-clicking the parent tree item to have the menu be shown, correctly disabling lock/unlock actions.",
      "created_at": "2024-07-29T21:37:47Z",
      "updated_at": "2024-07-29T23:09:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30532#discussion_r1695995273",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1695995273"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30532"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 238,
      "original_line": 238,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1696061544",
      "pull_request_review_id": 2205685953,
      "id": 1696061544,
      "node_id": "PRRC_kwDOABII585lF9ho",
      "diff_hunk": "@@ -0,0 +1,23 @@\n+// Copyright (c) 2020-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <uint256.h>\n+#include <util/transaction_identifier.h>\n+\n+FUZZ_TARGET(uint256_fromhex)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    const auto input{fuzzed_data_provider.ConsumeRandomLengthString()};\n+    const auto result{uint256::FromHex(input)};",
      "path": "src/test/fuzz/uint256.cpp",
      "position": null,
      "original_position": 14,
      "commit_id": "9113f6b605f9e0a3b438561837f1f4e4142ad3c7",
      "original_commit_id": "30c7351491063dab127cff236074beddff59d1a5",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Strikes me as being \"too far off the reservation\" with the `input`s. Won't we be hitting the first condition in `FromHex` on `str.size()` being different from `::size() * 2` in >99% of cases? Maybe something closer to the below would spend fuzz-cycles a bit more wisely? Also added a loop to use more of the fuzz data. Then again I'm new to fuzzing.\r\n```diff\r\ndiff --git a/src/test/fuzz/uint256.cpp b/src/test/fuzz/uint256.cpp\r\nindex f5c8b2e146..38bbc5e108 100644\r\n--- a/src/test/fuzz/uint256.cpp\r\n+++ b/src/test/fuzz/uint256.cpp\r\n@@ -9,15 +9,42 @@\r\n \r\n FUZZ_TARGET(uint256_fromhex)\r\n {\r\n+    enum Mode {\r\n+        RandomCharsRandomLength,\r\n+        RandomCharsCorrectLength,\r\n+        ValidCharsRandomLength,\r\n+\r\n+        kMaxValue = ValidCharsRandomLength\r\n+    };\r\n+\r\n     FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\r\n-    const auto input{fuzzed_data_provider.ConsumeRandomLengthString()};\r\n-    const auto result{uint256::FromHex(input)};\r\n-    if (result) {\r\n-        // we only expect a result for a 64 character hex-string\r\n-        assert(input.length() == 64);\r\n+    while (fuzzed_data_provider.remaining_bytes() > 0) {\r\n+        std::string input;\r\n+        static_assert(64 == uint256::size() * 2, \"2 hex chars per byte\");\r\n+        switch (fuzzed_data_provider.ConsumeEnum<Mode>()) {\r\n+        case RandomCharsRandomLength:\r\n+            input = fuzzed_data_provider.ConsumeRandomLengthString();\r\n+            break;\r\n+        case RandomCharsCorrectLength:\r\n+            input = fuzzed_data_provider.ConsumeBytesAsString(64);\r\n+            break;\r\n+        case ValidCharsRandomLength:\r\n+            constexpr char valid[] = \"0123456789abcdefABCDEF\";\r\n+            input.resize(64, '0');\r\n+            for (char& c : input) {\r\n+                c = valid[fuzzed_data_provider.ConsumeIntegralInRange<int>(0, sizeof(valid)-1)];\r\n+            }\r\n+            break;\r\n+        }\r\n+\r\n+        const auto result{uint256::FromHex(input)};\r\n+        if (result) {\r\n+            // we only expect a result for a 64 character hex-string\r\n+            assert(input.length() == 64);\r\n \r\n-        // check we can also construct {T,Wt}xids from a valid 64 character hex-string input\r\n-        assert(Txid::FromHex(input));\r\n-        assert(Wtxid::FromHex(input));\r\n+            // check we can also construct {T,Wt}xids from a valid 64 character hex-string input\r\n+            assert(Txid::FromHex(input));\r\n+            assert(Wtxid::FromHex(input));\r\n+        }\r\n     }\r\n-}\r\n\\ No newline at end of file\r\n+}\r\n```",
      "created_at": "2024-07-29T23:06:08Z",
      "updated_at": "2024-07-29T23:09:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30532#discussion_r1696061544",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1696061544"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30532"
        }
      },
      "start_line": null,
      "original_start_line": 13,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 14,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1696468590",
      "pull_request_review_id": 2206885926,
      "id": 1696468590,
      "node_id": "PRRC_kwDOABII585lHg5u",
      "diff_hunk": "@@ -0,0 +1,23 @@\n+// Copyright (c) 2020-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <uint256.h>\n+#include <util/transaction_identifier.h>\n+\n+FUZZ_TARGET(uint256_fromhex)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    const auto input{fuzzed_data_provider.ConsumeRandomLengthString()};\n+    const auto result{uint256::FromHex(input)};",
      "path": "src/test/fuzz/uint256.cpp",
      "position": null,
      "original_position": 14,
      "commit_id": "9113f6b605f9e0a3b438561837f1f4e4142ad3c7",
      "original_commit_id": "30c7351491063dab127cff236074beddff59d1a5",
      "in_reply_to_id": 1696061544,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> Strikes me as being \"too far off the reservation\" with the `input`s. Won't we be hitting the first condition in `FromHex` on `str.size()` being different from `::size() * 2` in >99% of cases? Maybe something closer to the below would spend fuzz-cycles a bit more wisely? Also added a loop to use more of the fuzz data. Then again I'm new to fuzzing.\r\n\r\nSome replies:\r\n\r\n* You are right that fuzz engines (the program that produces fuzz inputs) sometimes have difficulty reaching code that is hidden by complicated conditions. However, this condition isn't complicated and a fuzz engine should be able to solve it quickly. Once it is solved, most fuzz engines will by itself mutate the passing input further to try to reach more coverage. So I think in this particular case no hand-holding in the form of `enum Mode` is needed. (Though, there are fuzz targets where something like it is beneficial)\r\n* You should be able to see coverage reported by the fuzz engine and see it saturate quickly as a way to check whether my first point is plausible here\r\n\r\nAbout \"using more fuzz data\": I'd say not using a loop here is more beneficial, because:\r\n* Generally, a shorter fuzz input corresponds to a faster runtime, allowing a fuzz engine to iterate faster when searching for new inputs\r\n* The function under test has no state (it is pure). Thus, no additional bugs can be found by running in a loop. (Though, there are fuzz targets where something like it is beneficial)\r\n* When adding fuzz inputs to the `qa-assets` repo, small ones will be preferred, so the long ones will be discarded anyway. Should they not be discarded (maybe due to the use of `-use_value_profile=1`), they will not help to increase coverage or find more bugs, but only bloat the `qa-assets` repo with storage and runtime overhead",
      "created_at": "2024-07-30T07:33:42Z",
      "updated_at": "2024-07-30T07:33:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30532#discussion_r1696468590",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1696468590"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30532"
        }
      },
      "start_line": null,
      "original_start_line": 13,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 14,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1696476037",
      "pull_request_review_id": 2206897116,
      "id": 1696476037,
      "node_id": "PRRC_kwDOABII585lHiuF",
      "diff_hunk": "@@ -0,0 +1,23 @@\n+// Copyright (c) 2020-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <uint256.h>\n+#include <util/transaction_identifier.h>\n+\n+FUZZ_TARGET(uint256_fromhex)",
      "path": "src/test/fuzz/uint256.cpp",
      "position": null,
      "original_position": 10,
      "commit_id": "9113f6b605f9e0a3b438561837f1f4e4142ad3c7",
      "original_commit_id": "30c7351491063dab127cff236074beddff59d1a5",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This would be duplicate with the `src/test/fuzz/hex.cpp`, which already does `(void)uint256::FromHex(random_hex_string);`\r\n\r\nI'd say that hex parsing is trivial enough to put everything into one fuzz target. Otherwise the overhead of allocating a dedicated fuzz target, fuzz input folder, and fuzz resources (CPU...) may take away those resources from more meaningful fuzz targets that actually need them more than 5 minutes of initial fuzzing. (I'd be surprised if all code wasn't covered in 5 minutes of fuzzing here, if it isn't already covered by the existing `hex` fuzz inputs.",
      "created_at": "2024-07-30T07:39:09Z",
      "updated_at": "2024-07-30T07:39:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30532#discussion_r1696476037",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1696476037"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30532"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 10,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1696732652",
      "pull_request_review_id": 2207310737,
      "id": 1696732652,
      "node_id": "PRRC_kwDOABII585lIhXs",
      "diff_hunk": "@@ -0,0 +1,23 @@\n+// Copyright (c) 2020-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <uint256.h>\n+#include <util/transaction_identifier.h>\n+\n+FUZZ_TARGET(uint256_fromhex)",
      "path": "src/test/fuzz/uint256.cpp",
      "position": null,
      "original_position": 10,
      "commit_id": "9113f6b605f9e0a3b438561837f1f4e4142ad3c7",
      "original_commit_id": "30c7351491063dab127cff236074beddff59d1a5",
      "in_reply_to_id": 1696476037,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ah yes, I missed that it's already covered. Do you think it's best to drop the fuzz commit altogether or move the extra checks into `fuzz/hex.cpp`?\r\n\r\n<details>\r\n<summary>git diff on 30c7351491</summary>\r\n\r\n```diff\r\ndiff --git a/src/Makefile.test.include b/src/Makefile.test.include\r\nindex 268d346d6b..0993a65eff 100644\r\n--- a/src/Makefile.test.include\r\n+++ b/src/Makefile.test.include\r\n@@ -397,7 +397,6 @@ test_fuzz_fuzz_SOURCES = \\\r\n  test/fuzz/tx_pool.cpp \\\r\n  test/fuzz/txorphan.cpp \\\r\n  test/fuzz/txrequest.cpp \\\r\n- test/fuzz/uint256.cpp \\\r\n  test/fuzz/utxo_snapshot.cpp \\\r\n  test/fuzz/utxo_total_supply.cpp \\\r\n  test/fuzz/validation_load_mempool.cpp \\\r\ndiff --git a/src/test/fuzz/hex.cpp b/src/test/fuzz/hex.cpp\r\nindex bc46863f1d..dcf2df279e 100644\r\n--- a/src/test/fuzz/hex.cpp\r\n+++ b/src/test/fuzz/hex.cpp\r\n@@ -27,7 +27,11 @@ FUZZ_TARGET(hex)\r\n         assert(ToLower(random_hex_string) == hex_data);\r\n     }\r\n     (void)IsHexNumber(random_hex_string);\r\n-    (void)uint256::FromHex(random_hex_string);\r\n+    if (uint256::FromHex(random_hex_string)) {\r\n+        assert(random_hex_string.length() == 64);\r\n+        assert(Txid::FromHex(random_hex_string));\r\n+        assert(Wtxid::FromHex(random_hex_string));\r\n+    }\r\n     (void)uint256S(random_hex_string);\r\n     try {\r\n         (void)HexToPubKey(random_hex_string);\r\n\r\n```\r\n</details>\r\n\r\nI'm not 100% sure on the `assert(random_hex_string.length() == 64);` check since that feels like more of a unittest thing, but at the same time it's pretty cheap check",
      "created_at": "2024-07-30T10:32:53Z",
      "updated_at": "2024-07-30T10:56:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30532#discussion_r1696732652",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1696732652"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30532"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 10,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1696742831",
      "pull_request_review_id": 2207310737,
      "id": 1696742831,
      "node_id": "PRRC_kwDOABII585lIj2v",
      "diff_hunk": "@@ -0,0 +1,23 @@\n+// Copyright (c) 2020-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <uint256.h>\n+#include <util/transaction_identifier.h>\n+\n+FUZZ_TARGET(uint256_fromhex)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    const auto input{fuzzed_data_provider.ConsumeRandomLengthString()};\n+    const auto result{uint256::FromHex(input)};",
      "path": "src/test/fuzz/uint256.cpp",
      "position": null,
      "original_position": 14,
      "commit_id": "9113f6b605f9e0a3b438561837f1f4e4142ad3c7",
      "original_commit_id": "30c7351491063dab127cff236074beddff59d1a5",
      "in_reply_to_id": 1696061544,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'm lacking hands-on experience with fuzzing to comment on worthwhile optimizations, so I'm going to go with consensus here. @maflcko's reasoning looks sounds to me, so I think keeping it as is (besides moving to to `fuzz/hex.cpp` as discussed in another comment) is the sensible approach, but thank you for sharing the `Enum` approach, I hadn't seen that yet and it looks like a useful pattern to know.",
      "created_at": "2024-07-30T10:41:29Z",
      "updated_at": "2024-07-30T10:56:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30532#discussion_r1696742831",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1696742831"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30532"
        }
      },
      "start_line": null,
      "original_start_line": 13,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 14,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1696748021",
      "pull_request_review_id": 2207310737,
      "id": 1696748021,
      "node_id": "PRRC_kwDOABII585lIlH1",
      "diff_hunk": "@@ -0,0 +1,23 @@\n+// Copyright (c) 2020-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <uint256.h>\n+#include <util/transaction_identifier.h>\n+\n+FUZZ_TARGET(uint256_fromhex)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    const auto input{fuzzed_data_provider.ConsumeRandomLengthString()};\n+    const auto result{uint256::FromHex(input)};\n+    if (result) {\n+        // we only expect a result for a 64 character hex-string\n+        assert(input.length() == 64);\n+\n+        // check we can also construct {T,Wt}xids from a valid 64 character hex-string input\n+        assert(Txid::FromHex(input));\n+        assert(Wtxid::FromHex(input));\n+    }\n+}",
      "path": "src/test/fuzz/uint256.cpp",
      "position": null,
      "original_position": 23,
      "commit_id": "9113f6b605f9e0a3b438561837f1f4e4142ad3c7",
      "original_commit_id": "30c7351491063dab127cff236074beddff59d1a5",
      "in_reply_to_id": 1695677286,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yeah it is, will fix in next force push, thanks.",
      "created_at": "2024-07-30T10:45:54Z",
      "updated_at": "2024-07-30T10:56:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30532#discussion_r1696748021",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1696748021"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30532"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 23,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1696752519",
      "pull_request_review_id": 2207310737,
      "id": 1696752519,
      "node_id": "PRRC_kwDOABII585lImOH",
      "diff_hunk": "@@ -330,6 +331,57 @@ BOOST_AUTO_TEST_CASE(parse)\n     }\n }\n \n+/**\n+ * Implemented as a templated function so it can be reused by other classes that have a FromHex()\n+ * method that wraps uint256::FromHex(), such as transaction_identifier::FromHex().\n+ */\n+template <typename T>\n+void TestFromHex64Chars()\n+{\n+    std::string valid_64char_input{\"0123456789abcdef0123456789ABCDEF0123456789abcdef0123456789ABCDEF\"};\n+    {\n+        // check that lower and upper case hex characters are accepted\n+        auto valid_result{T::FromHex(valid_64char_input)};\n+        BOOST_REQUIRE(valid_result);\n+        BOOST_CHECK_EQUAL(valid_result->ToString(), ToLower(valid_64char_input));\n+    }\n+    {\n+        // check that only strings of size 64 are accepted\n+        BOOST_CHECK(!T::FromHex(\"\"));\n+        BOOST_CHECK(!T::FromHex(\"0\"));\n+        BOOST_CHECK(!T::FromHex(\"0123456789abcdef0123456789ABCDEF\"));                                  // 32 chars\n+        BOOST_CHECK(!T::FromHex(\"0123456789abcdef0123456789ABCDEF0123456789abcdef0123456789ABCDE\"));   // 63 chars\n+        BOOST_CHECK(!T::FromHex(\"0123456789abcdef0123456789ABCDEF0123456789abcdef0123456789ABCDEF0\")); // 65 chars\n+    }\n+    {\n+        // check that non-hex characters are not accepted\n+        std::string invalid_chars{R\"( !\"#$%&'()*+,-./:;<=>?@GHIJKLMNOPQRSTUVWXYZ[\\]^_`ghijklmnopqrstuvwxyz{|}~)\"};\n+        std::string valid_base{\"0123456789abcdef0123456789ABCDEF0123456789abcdef0123456789ABCDE\"}; // 63 chars\n+        BOOST_CHECK_EQUAL(valid_base.length(), 63);\n+        for (auto c : invalid_chars) {\n+            BOOST_CHECK(!T::FromHex(valid_base + c));\n+        }\n+        // 0x prefixes are invalid\n+        std::string invalid_prefix{\"0x\" + valid_64char_input};\n+        BOOST_CHECK(!T::FromHex(std::string_view(invalid_prefix.data(), 64)));\n+        BOOST_CHECK(!T::FromHex(invalid_prefix));\n+    }\n+    {\n+        // check that string_view length is respected\n+        std::string chars_68{valid_64char_input + \"0123\"};\n+        BOOST_CHECK(T::FromHex(std::string_view(chars_68.data(), 64)));\n+        BOOST_CHECK(!T::FromHex(std::string_view(chars_68.data(), 63))); // too short\n+        BOOST_CHECK(!T::FromHex(std::string_view(chars_68.data(), 65))); // too long\n+    }\n+}\n+\n+BOOST_AUTO_TEST_CASE(from_hex)\n+{\n+    TestFromHex64Chars<uint256>();\n+    TestFromHex64Chars<Txid>();\n+    TestFromHex64Chars<Wtxid>();",
      "path": "src/test/uint256_tests.cpp",
      "position": null,
      "original_position": 60,
      "commit_id": "9113f6b605f9e0a3b438561837f1f4e4142ad3c7",
      "original_commit_id": "30c7351491063dab127cff236074beddff59d1a5",
      "in_reply_to_id": 1695679909,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Would you prefer we don't test `{T, Wt}xid::FromHex()` at all, or in a different way? At the moment these won't catch anything as `{T, Wt}xid::FromHex()` is just wrapping the `uint256` one, but I thought it'd be prudent to add the tests already for when the wrappers are reimplemented in the future for whatever reason, and this approach doesn't add much overhead? So, just a way to enforce the interface remains stable?",
      "created_at": "2024-07-30T10:49:33Z",
      "updated_at": "2024-07-30T10:57:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30532#discussion_r1696752519",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1696752519"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30532"
        }
      },
      "start_line": null,
      "original_start_line": 380,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 382,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1696759211",
      "pull_request_review_id": 2207310737,
      "id": 1696759211,
      "node_id": "PRRC_kwDOABII585lIn2r",
      "diff_hunk": "@@ -174,22 +174,17 @@ void CoinControlDialog::showMenu(const QPoint &point)\n         contextMenuItem = item;\n \n         // disable some items (like Copy Transaction ID, lock, unlock) for tree roots in context menu\n-        if (item->data(COLUMN_ADDRESS, TxHashRole).toString().length() == 64) // transaction hash is 64 characters (this means it is a child node, so it is not a parent node in tree mode)\n-        {\n+        auto txid{Txid::FromHex(item->data(COLUMN_ADDRESS, TxHashRole).toString().toStdString())};\n+        if (txid) { // transaction hash is 64 characters (this means it is a child node, so it is not a parent node in tree mode)",
      "path": "src/qt/coincontroldialog.cpp",
      "position": null,
      "original_position": 7,
      "commit_id": "9113f6b605f9e0a3b438561837f1f4e4142ad3c7",
      "original_commit_id": "30c7351491063dab127cff236074beddff59d1a5",
      "in_reply_to_id": 1695897672,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Makes sense, will update both to `if (txid) { // a valid txid means this is a child node, and not a parent node in tree mode` in next force push.",
      "created_at": "2024-07-30T10:54:56Z",
      "updated_at": "2024-07-30T10:56:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30532#discussion_r1696759211",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1696759211"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30532"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 178,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1696783353",
      "pull_request_review_id": 2207395938,
      "id": 1696783353,
      "node_id": "PRRC_kwDOABII585lItv5",
      "diff_hunk": "@@ -0,0 +1,23 @@\n+// Copyright (c) 2020-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <uint256.h>\n+#include <util/transaction_identifier.h>\n+\n+FUZZ_TARGET(uint256_fromhex)",
      "path": "src/test/fuzz/uint256.cpp",
      "position": null,
      "original_position": 10,
      "commit_id": "9113f6b605f9e0a3b438561837f1f4e4142ad3c7",
      "original_commit_id": "30c7351491063dab127cff236074beddff59d1a5",
      "in_reply_to_id": 1696476037,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> Do you think it's best to drop the fuzz commit altogether or move the extra checks into `fuzz/hex.cpp`?\r\n\r\nNo opinion. Up to you. Your diff looks good.",
      "created_at": "2024-07-30T11:14:34Z",
      "updated_at": "2024-07-30T11:14:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30532#discussion_r1696783353",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1696783353"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30532"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 10,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1696846017",
      "pull_request_review_id": 2207495849,
      "id": 1696846017,
      "node_id": "PRRC_kwDOABII585lI9DB",
      "diff_hunk": "@@ -0,0 +1,23 @@\n+// Copyright (c) 2020-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <uint256.h>\n+#include <util/transaction_identifier.h>\n+\n+FUZZ_TARGET(uint256_fromhex)",
      "path": "src/test/fuzz/uint256.cpp",
      "position": null,
      "original_position": 10,
      "commit_id": "9113f6b605f9e0a3b438561837f1f4e4142ad3c7",
      "original_commit_id": "30c7351491063dab127cff236074beddff59d1a5",
      "in_reply_to_id": 1696476037,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, I've applied the above diff to fcf7fe35f1805e59357bcb6e65fa66460b423f86",
      "created_at": "2024-07-30T12:04:11Z",
      "updated_at": "2024-07-30T12:04:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30532#discussion_r1696846017",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1696846017"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30532"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 10,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1696847070",
      "pull_request_review_id": 2207497648,
      "id": 1696847070,
      "node_id": "PRRC_kwDOABII585lI9Te",
      "diff_hunk": "@@ -0,0 +1,23 @@\n+// Copyright (c) 2020-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <uint256.h>\n+#include <util/transaction_identifier.h>\n+\n+FUZZ_TARGET(uint256_fromhex)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    const auto input{fuzzed_data_provider.ConsumeRandomLengthString()};\n+    const auto result{uint256::FromHex(input)};\n+    if (result) {\n+        // we only expect a result for a 64 character hex-string\n+        assert(input.length() == 64);\n+\n+        // check we can also construct {T,Wt}xids from a valid 64 character hex-string input\n+        assert(Txid::FromHex(input));\n+        assert(Wtxid::FromHex(input));\n+    }\n+}",
      "path": "src/test/fuzz/uint256.cpp",
      "position": null,
      "original_position": 23,
      "commit_id": "9113f6b605f9e0a3b438561837f1f4e4142ad3c7",
      "original_commit_id": "30c7351491063dab127cff236074beddff59d1a5",
      "in_reply_to_id": 1695677286,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Resolved by [removing the file entirely](https://github.com/bitcoin/bitcoin/pull/30532#discussion_r1696846017).",
      "created_at": "2024-07-30T12:05:05Z",
      "updated_at": "2024-07-30T12:05:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30532#discussion_r1696847070",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1696847070"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30532"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 23,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1696851047",
      "pull_request_review_id": 2207503969,
      "id": 1696851047,
      "node_id": "PRRC_kwDOABII585lI-Rn",
      "diff_hunk": "@@ -174,22 +174,17 @@ void CoinControlDialog::showMenu(const QPoint &point)\n         contextMenuItem = item;\n \n         // disable some items (like Copy Transaction ID, lock, unlock) for tree roots in context menu\n-        if (item->data(COLUMN_ADDRESS, TxHashRole).toString().length() == 64) // transaction hash is 64 characters (this means it is a child node, so it is not a parent node in tree mode)\n-        {\n+        auto txid{Txid::FromHex(item->data(COLUMN_ADDRESS, TxHashRole).toString().toStdString())};\n+        if (txid) { // transaction hash is 64 characters (this means it is a child node, so it is not a parent node in tree mode)",
      "path": "src/qt/coincontroldialog.cpp",
      "position": null,
      "original_position": 7,
      "commit_id": "9113f6b605f9e0a3b438561837f1f4e4142ad3c7",
      "original_commit_id": "30c7351491063dab127cff236074beddff59d1a5",
      "in_reply_to_id": 1695897672,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done in 24a6de35857e88d968ef90cd6fbcda0003f0e3e3",
      "created_at": "2024-07-30T12:07:18Z",
      "updated_at": "2024-07-30T12:07:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30532#discussion_r1696851047",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1696851047"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30532"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 178,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1697105302",
      "pull_request_review_id": 2207923972,
      "id": 1697105302,
      "node_id": "PRRC_kwDOABII585lJ8WW",
      "diff_hunk": "@@ -330,6 +331,57 @@ BOOST_AUTO_TEST_CASE(parse)\n     }\n }\n \n+/**\n+ * Implemented as a templated function so it can be reused by other classes that have a FromHex()\n+ * method that wraps uint256::FromHex(), such as transaction_identifier::FromHex().\n+ */\n+template <typename T>\n+void TestFromHex64Chars()\n+{\n+    std::string valid_64char_input{\"0123456789abcdef0123456789ABCDEF0123456789abcdef0123456789ABCDEF\"};\n+    {\n+        // check that lower and upper case hex characters are accepted\n+        auto valid_result{T::FromHex(valid_64char_input)};\n+        BOOST_REQUIRE(valid_result);\n+        BOOST_CHECK_EQUAL(valid_result->ToString(), ToLower(valid_64char_input));\n+    }\n+    {\n+        // check that only strings of size 64 are accepted\n+        BOOST_CHECK(!T::FromHex(\"\"));\n+        BOOST_CHECK(!T::FromHex(\"0\"));\n+        BOOST_CHECK(!T::FromHex(\"0123456789abcdef0123456789ABCDEF\"));                                  // 32 chars\n+        BOOST_CHECK(!T::FromHex(\"0123456789abcdef0123456789ABCDEF0123456789abcdef0123456789ABCDE\"));   // 63 chars\n+        BOOST_CHECK(!T::FromHex(\"0123456789abcdef0123456789ABCDEF0123456789abcdef0123456789ABCDEF0\")); // 65 chars\n+    }\n+    {\n+        // check that non-hex characters are not accepted\n+        std::string invalid_chars{R\"( !\"#$%&'()*+,-./:;<=>?@GHIJKLMNOPQRSTUVWXYZ[\\]^_`ghijklmnopqrstuvwxyz{|}~)\"};\n+        std::string valid_base{\"0123456789abcdef0123456789ABCDEF0123456789abcdef0123456789ABCDE\"}; // 63 chars\n+        BOOST_CHECK_EQUAL(valid_base.length(), 63);\n+        for (auto c : invalid_chars) {\n+            BOOST_CHECK(!T::FromHex(valid_base + c));\n+        }\n+        // 0x prefixes are invalid\n+        std::string invalid_prefix{\"0x\" + valid_64char_input};\n+        BOOST_CHECK(!T::FromHex(std::string_view(invalid_prefix.data(), 64)));\n+        BOOST_CHECK(!T::FromHex(invalid_prefix));\n+    }\n+    {\n+        // check that string_view length is respected\n+        std::string chars_68{valid_64char_input + \"0123\"};\n+        BOOST_CHECK(T::FromHex(std::string_view(chars_68.data(), 64)));\n+        BOOST_CHECK(!T::FromHex(std::string_view(chars_68.data(), 63))); // too short\n+        BOOST_CHECK(!T::FromHex(std::string_view(chars_68.data(), 65))); // too long\n+    }\n+}\n+\n+BOOST_AUTO_TEST_CASE(from_hex)\n+{\n+    TestFromHex64Chars<uint256>();\n+    TestFromHex64Chars<Txid>();\n+    TestFromHex64Chars<Wtxid>();",
      "path": "src/test/uint256_tests.cpp",
      "position": null,
      "original_position": 60,
      "commit_id": "9113f6b605f9e0a3b438561837f1f4e4142ad3c7",
      "original_commit_id": "30c7351491063dab127cff236074beddff59d1a5",
      "in_reply_to_id": 1695679909,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In reply to https://github.com/bitcoin/bitcoin/pull/30532/files#r1696752519:\r\n\r\nI'm not too worried about `{T, Wt}xid::FromHex` diverging in behavior. But maybe someone else can chime in to tie-break.",
      "created_at": "2024-07-30T14:48:53Z",
      "updated_at": "2024-07-30T15:18:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30532#discussion_r1697105302",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1697105302"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30532"
        }
      },
      "start_line": null,
      "original_start_line": 380,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 382,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1697123924",
      "pull_request_review_id": 2207923972,
      "id": 1697123924,
      "node_id": "PRRC_kwDOABII585lKA5U",
      "diff_hunk": "@@ -0,0 +1,23 @@\n+// Copyright (c) 2020-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <uint256.h>\n+#include <util/transaction_identifier.h>\n+\n+FUZZ_TARGET(uint256_fromhex)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    const auto input{fuzzed_data_provider.ConsumeRandomLengthString()};\n+    const auto result{uint256::FromHex(input)};",
      "path": "src/test/fuzz/uint256.cpp",
      "position": null,
      "original_position": 14,
      "commit_id": "9113f6b605f9e0a3b438561837f1f4e4142ad3c7",
      "original_commit_id": "30c7351491063dab127cff236074beddff59d1a5",
      "in_reply_to_id": 1696061544,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In reply to https://github.com/bitcoin/bitcoin/pull/30532#discussion_r1696742831:\r\n\r\n> However, this condition isn't complicated and a fuzz engine should be able to solve it quickly. Once it is solved, most fuzz engines will by itself mutate the passing input further to try to reach more coverage.\r\n\r\n> Generally, a shorter fuzz input corresponds to a faster runtime, allowing a fuzz engine to iterate faster when searching for new inputs\r\n\r\nWow, wasn't aware that fuzz engines were aware of code coverage and generated this level of non-random inputs. Thanks for the fuzz crash course @maflcko!\r\n\r\nSounds good to me @stickies-v.",
      "created_at": "2024-07-30T14:59:49Z",
      "updated_at": "2024-07-30T15:18:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30532#discussion_r1697123924",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1697123924"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30532"
        }
      },
      "start_line": null,
      "original_start_line": 13,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 14,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1697162696",
      "pull_request_review_id": 2208017555,
      "id": 1697162696,
      "node_id": "PRRC_kwDOABII585lKKXI",
      "diff_hunk": "@@ -330,6 +331,57 @@ BOOST_AUTO_TEST_CASE(parse)\n     }\n }\n \n+/**\n+ * Implemented as a templated function so it can be reused by other classes that have a FromHex()\n+ * method that wraps uint256::FromHex(), such as transaction_identifier::FromHex().\n+ */\n+template <typename T>\n+void TestFromHex64Chars()\n+{\n+    std::string valid_64char_input{\"0123456789abcdef0123456789ABCDEF0123456789abcdef0123456789ABCDEF\"};\n+    {\n+        // check that lower and upper case hex characters are accepted\n+        auto valid_result{T::FromHex(valid_64char_input)};\n+        BOOST_REQUIRE(valid_result);\n+        BOOST_CHECK_EQUAL(valid_result->ToString(), ToLower(valid_64char_input));\n+    }\n+    {\n+        // check that only strings of size 64 are accepted\n+        BOOST_CHECK(!T::FromHex(\"\"));\n+        BOOST_CHECK(!T::FromHex(\"0\"));\n+        BOOST_CHECK(!T::FromHex(\"0123456789abcdef0123456789ABCDEF\"));                                  // 32 chars\n+        BOOST_CHECK(!T::FromHex(\"0123456789abcdef0123456789ABCDEF0123456789abcdef0123456789ABCDE\"));   // 63 chars\n+        BOOST_CHECK(!T::FromHex(\"0123456789abcdef0123456789ABCDEF0123456789abcdef0123456789ABCDEF0\")); // 65 chars\n+    }\n+    {\n+        // check that non-hex characters are not accepted\n+        std::string invalid_chars{R\"( !\"#$%&'()*+,-./:;<=>?@GHIJKLMNOPQRSTUVWXYZ[\\]^_`ghijklmnopqrstuvwxyz{|}~)\"};\n+        std::string valid_base{\"0123456789abcdef0123456789ABCDEF0123456789abcdef0123456789ABCDE\"}; // 63 chars\n+        BOOST_CHECK_EQUAL(valid_base.length(), 63);\n+        for (auto c : invalid_chars) {\n+            BOOST_CHECK(!T::FromHex(valid_base + c));\n+        }\n+        // 0x prefixes are invalid\n+        std::string invalid_prefix{\"0x\" + valid_64char_input};\n+        BOOST_CHECK(!T::FromHex(std::string_view(invalid_prefix.data(), 64)));\n+        BOOST_CHECK(!T::FromHex(invalid_prefix));\n+    }\n+    {\n+        // check that string_view length is respected\n+        std::string chars_68{valid_64char_input + \"0123\"};\n+        BOOST_CHECK(T::FromHex(std::string_view(chars_68.data(), 64)));\n+        BOOST_CHECK(!T::FromHex(std::string_view(chars_68.data(), 63))); // too short\n+        BOOST_CHECK(!T::FromHex(std::string_view(chars_68.data(), 65))); // too long\n+    }\n+}\n+\n+BOOST_AUTO_TEST_CASE(from_hex)\n+{\n+    TestFromHex64Chars<uint256>();\n+    TestFromHex64Chars<Txid>();\n+    TestFromHex64Chars<Wtxid>();",
      "path": "src/test/uint256_tests.cpp",
      "position": null,
      "original_position": 60,
      "commit_id": "9113f6b605f9e0a3b438561837f1f4e4142ad3c7",
      "original_commit_id": "30c7351491063dab127cff236074beddff59d1a5",
      "in_reply_to_id": 1695679909,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Welcoming more input here, yeah. To draw a parallel: [`TxidFromString` was also \"just a wrapper\"](https://github.com/bitcoin/bitcoin/pull/30436/files#diff-98ca28aa44cf84d5a29e4ce7eddbabf495a51154b02a6703a78977b80e19b17aL50-R50).\r\n\r\nEdit: my biggest concern with this code is actually that we're testing `transaction_identifier` logic in `uint256` tests, but creating a header just for this seems like too much of a hassle atm.",
      "created_at": "2024-07-30T15:24:38Z",
      "updated_at": "2024-07-30T15:30:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30532#discussion_r1697162696",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1697162696"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30532"
        }
      },
      "start_line": null,
      "original_start_line": 380,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 382,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1698159793",
      "pull_request_review_id": 2209589526,
      "id": 1698159793,
      "node_id": "PRRC_kwDOABII585lN9yx",
      "diff_hunk": "@@ -1028,12 +1028,4 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     }\n }\n \n-BOOST_AUTO_TEST_CASE(test_TxidFromString)\n-{\n-    // Make sure TxidFromString respects string_view length and stops reading at\n-    // end of the substring.\n-    BOOST_CHECK_EQUAL(TxidFromString(std::string_view(\"ABCD1234\", 4)).ToString(),",
      "path": "src/test/transaction_tests.cpp",
      "position": 35,
      "original_position": 8,
      "commit_id": "9113f6b605f9e0a3b438561837f1f4e4142ad3c7",
      "original_commit_id": "17ebf1ac133d26676ba7ae3e40042fdf389d146f",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "style nit in 17ebf1ac133d26676ba7ae3e40042fdf389d146f: Test coverage for `TxidFromString` is removed in the wrong commit.",
      "created_at": "2024-07-31T09:00:59Z",
      "updated_at": "2024-07-31T09:20:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30532#discussion_r1698159793",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1698159793"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30532"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1035,
      "original_line": 1035,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1698165764",
      "pull_request_review_id": 2209589526,
      "id": 1698165764,
      "node_id": "PRRC_kwDOABII585lN_QE",
      "diff_hunk": "@@ -330,6 +331,57 @@ BOOST_AUTO_TEST_CASE(parse)\n     }\n }\n \n+/**\n+ * Implemented as a templated function so it can be reused by other classes that have a FromHex()\n+ * method that wraps uint256::FromHex(), such as transaction_identifier::FromHex().\n+ */\n+template <typename T>\n+void TestFromHex64Chars()\n+{\n+    std::string valid_64char_input{\"0123456789abcdef0123456789ABCDEF0123456789abcdef0123456789ABCDEF\"};\n+    {\n+        // check that lower and upper case hex characters are accepted\n+        auto valid_result{T::FromHex(valid_64char_input)};\n+        BOOST_REQUIRE(valid_result);\n+        BOOST_CHECK_EQUAL(valid_result->ToString(), ToLower(valid_64char_input));\n+    }\n+    {\n+        // check that only strings of size 64 are accepted",
      "path": "src/test/uint256_tests.cpp",
      "position": 38,
      "original_position": 27,
      "commit_id": "9113f6b605f9e0a3b438561837f1f4e4142ad3c7",
      "original_commit_id": "17ebf1ac133d26676ba7ae3e40042fdf389d146f",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "style nit in https://github.com/bitcoin/bitcoin/commit/17ebf1ac133d26676ba7ae3e40042fdf389d146f: Seems duplicate with the \"too short\"/\"too long\" test below?",
      "created_at": "2024-07-31T09:04:18Z",
      "updated_at": "2024-07-31T09:20:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30532#discussion_r1698165764",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1698165764"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30532"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 354,
      "original_line": 354,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1698172542",
      "pull_request_review_id": 2209589526,
      "id": 1698172542,
      "node_id": "PRRC_kwDOABII585lOA5-",
      "diff_hunk": "@@ -330,6 +331,57 @@ BOOST_AUTO_TEST_CASE(parse)\n     }\n }\n \n+/**\n+ * Implemented as a templated function so it can be reused by other classes that have a FromHex()\n+ * method that wraps uint256::FromHex(), such as transaction_identifier::FromHex().\n+ */\n+template <typename T>\n+void TestFromHex64Chars()\n+{\n+    std::string valid_64char_input{\"0123456789abcdef0123456789ABCDEF0123456789abcdef0123456789ABCDEF\"};\n+    {\n+        // check that lower and upper case hex characters are accepted\n+        auto valid_result{T::FromHex(valid_64char_input)};\n+        BOOST_REQUIRE(valid_result);\n+        BOOST_CHECK_EQUAL(valid_result->ToString(), ToLower(valid_64char_input));\n+    }\n+    {\n+        // check that only strings of size 64 are accepted\n+        BOOST_CHECK(!T::FromHex(\"\"));\n+        BOOST_CHECK(!T::FromHex(\"0\"));\n+        BOOST_CHECK(!T::FromHex(\"0123456789abcdef0123456789ABCDEF\"));                                  // 32 chars\n+        BOOST_CHECK(!T::FromHex(\"0123456789abcdef0123456789ABCDEF0123456789abcdef0123456789ABCDE\"));   // 63 chars\n+        BOOST_CHECK(!T::FromHex(\"0123456789abcdef0123456789ABCDEF0123456789abcdef0123456789ABCDEF0\")); // 65 chars\n+    }\n+    {\n+        // check that non-hex characters are not accepted\n+        std::string invalid_chars{R\"( !\"#$%&'()*+,-./:;<=>?@GHIJKLMNOPQRSTUVWXYZ[\\]^_`ghijklmnopqrstuvwxyz{|}~)\"};\n+        std::string valid_base{\"0123456789abcdef0123456789ABCDEF0123456789abcdef0123456789ABCDE\"}; // 63 chars",
      "path": "src/test/uint256_tests.cpp",
      "position": null,
      "original_position": 37,
      "commit_id": "9113f6b605f9e0a3b438561837f1f4e4142ad3c7",
      "original_commit_id": "17ebf1ac133d26676ba7ae3e40042fdf389d146f",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "style nit in https://github.com/bitcoin/bitcoin/commit/17ebf1ac133d26676ba7ae3e40042fdf389d146f: Could just re-use `valid_64char_input.substr(0, 63)`?",
      "created_at": "2024-07-31T09:07:56Z",
      "updated_at": "2024-07-31T09:20:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30532#discussion_r1698172542",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1698172542"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30532"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 359,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1698177785",
      "pull_request_review_id": 2209589526,
      "id": 1698177785,
      "node_id": "PRRC_kwDOABII585lOCL5",
      "diff_hunk": "@@ -330,6 +331,57 @@ BOOST_AUTO_TEST_CASE(parse)\n     }\n }\n \n+/**\n+ * Implemented as a templated function so it can be reused by other classes that have a FromHex()\n+ * method that wraps uint256::FromHex(), such as transaction_identifier::FromHex().\n+ */\n+template <typename T>\n+void TestFromHex64Chars()\n+{\n+    std::string valid_64char_input{\"0123456789abcdef0123456789ABCDEF0123456789abcdef0123456789ABCDEF\"};\n+    {\n+        // check that lower and upper case hex characters are accepted\n+        auto valid_result{T::FromHex(valid_64char_input)};\n+        BOOST_REQUIRE(valid_result);\n+        BOOST_CHECK_EQUAL(valid_result->ToString(), ToLower(valid_64char_input));\n+    }\n+    {\n+        // check that only strings of size 64 are accepted\n+        BOOST_CHECK(!T::FromHex(\"\"));\n+        BOOST_CHECK(!T::FromHex(\"0\"));\n+        BOOST_CHECK(!T::FromHex(\"0123456789abcdef0123456789ABCDEF\"));                                  // 32 chars\n+        BOOST_CHECK(!T::FromHex(\"0123456789abcdef0123456789ABCDEF0123456789abcdef0123456789ABCDE\"));   // 63 chars\n+        BOOST_CHECK(!T::FromHex(\"0123456789abcdef0123456789ABCDEF0123456789abcdef0123456789ABCDEF0\")); // 65 chars\n+    }\n+    {\n+        // check that non-hex characters are not accepted\n+        std::string invalid_chars{R\"( !\"#$%&'()*+,-./:;<=>?@GHIJKLMNOPQRSTUVWXYZ[\\]^_`ghijklmnopqrstuvwxyz{|}~)\"};\n+        std::string valid_base{\"0123456789abcdef0123456789ABCDEF0123456789abcdef0123456789ABCDE\"}; // 63 chars\n+        BOOST_CHECK_EQUAL(valid_base.length(), 63);\n+        for (auto c : invalid_chars) {\n+            BOOST_CHECK(!T::FromHex(valid_base + c));\n+        }\n+        // 0x prefixes are invalid\n+        std::string invalid_prefix{\"0x\" + valid_64char_input};\n+        BOOST_CHECK(!T::FromHex(std::string_view(invalid_prefix.data(), 64)));\n+        BOOST_CHECK(!T::FromHex(invalid_prefix));\n+    }\n+    {\n+        // check that string_view length is respected\n+        std::string chars_68{valid_64char_input + \"0123\"};\n+        BOOST_CHECK(T::FromHex(std::string_view(chars_68.data(), 64)));",
      "path": "src/test/uint256_tests.cpp",
      "position": null,
      "original_position": 50,
      "commit_id": "9113f6b605f9e0a3b438561837f1f4e4142ad3c7",
      "original_commit_id": "17ebf1ac133d26676ba7ae3e40042fdf389d146f",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "style nit in https://github.com/bitcoin/bitcoin/commit/17ebf1ac133d26676ba7ae3e40042fdf389d146f: Could check that `.value().ToString()` is equal to `ToLower(valid_64char_input)`? Similar to `test_TxidFromString`.",
      "created_at": "2024-07-31T09:11:03Z",
      "updated_at": "2024-07-31T09:20:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30532#discussion_r1698177785",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1698177785"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30532"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 372,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1698185872",
      "pull_request_review_id": 2209589526,
      "id": 1698185872,
      "node_id": "PRRC_kwDOABII585lOEKQ",
      "diff_hunk": "@@ -78,9 +78,9 @@ BOOST_FIXTURE_TEST_CASE(package_hash_tests, TestChain100Setup)\n     BOOST_CHECK(wtxid_2.GetHex() < wtxid_3.GetHex());\n \n     // The txids are not (we want to test that sorting and hashing use wtxid, not txid):\n-    Txid txid_1{TxidFromString(\"0xbd0f71c1d5e50589063e134fad22053cdae5ab2320db5bf5e540198b0b5a4e69\")};\n-    Txid txid_2{TxidFromString(\"0xb4749f017444b051c44dfd2720e88f314ff94f3dd6d56d40ef65854fcd7fff6b\")};\n-    Txid txid_3{TxidFromString(\"0xee707be5201160e32c4fc715bec227d1aeea5940fb4295605e7373edce3b1a93\")};\n+    Txid txid_1{Txid::FromHex(\"bd0f71c1d5e50589063e134fad22053cdae5ab2320db5bf5e540198b0b5a4e69\").value()};\n+    Txid txid_2{Txid::FromHex(\"b4749f017444b051c44dfd2720e88f314ff94f3dd6d56d40ef65854fcd7fff6b\").value()};\n+    Txid txid_3{Txid::FromHex(\"ee707be5201160e32c4fc715bec227d1aeea5940fb4295605e7373edce3b1a93\").value()};",
      "path": "src/test/txpackage_tests.cpp",
      "position": 36,
      "original_position": 9,
      "commit_id": "9113f6b605f9e0a3b438561837f1f4e4142ad3c7",
      "original_commit_id": "24a6de35857e88d968ef90cd6fbcda0003f0e3e3",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "style nit in the last commit: Could combine all test changes of this form into the previous test-only commit, so that similar test-only changes are grouped together?",
      "created_at": "2024-07-31T09:16:15Z",
      "updated_at": "2024-07-31T09:20:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30532#discussion_r1698185872",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1698185872"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30532"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 83,
      "original_line": 83,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1698197301",
      "pull_request_review_id": 2209647215,
      "id": 1698197301,
      "node_id": "PRRC_kwDOABII585lOG81",
      "diff_hunk": "@@ -330,6 +331,57 @@ BOOST_AUTO_TEST_CASE(parse)\n     }\n }\n \n+/**\n+ * Implemented as a templated function so it can be reused by other classes that have a FromHex()\n+ * method that wraps uint256::FromHex(), such as transaction_identifier::FromHex().\n+ */\n+template <typename T>\n+void TestFromHex64Chars()\n+{\n+    std::string valid_64char_input{\"0123456789abcdef0123456789ABCDEF0123456789abcdef0123456789ABCDEF\"};",
      "path": "src/test/uint256_tests.cpp",
      "position": null,
      "original_position": 19,
      "commit_id": "9113f6b605f9e0a3b438561837f1f4e4142ad3c7",
      "original_commit_id": "17ebf1ac133d26676ba7ae3e40042fdf389d146f",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "test-nit in: Could even template `64` with `valid_input = valid_input.substr(0, T::size())` and use `T::size()` below as well, to allow testing of uint160 as well, but this can be done in a follow-up.",
      "created_at": "2024-07-31T09:23:51Z",
      "updated_at": "2024-07-31T09:23:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30532#discussion_r1698197301",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1698197301"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30532"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 341,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1698459388",
      "pull_request_review_id": 2210086223,
      "id": 1698459388,
      "node_id": "PRRC_kwDOABII585lPG78",
      "diff_hunk": "@@ -1028,12 +1028,4 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     }\n }\n \n-BOOST_AUTO_TEST_CASE(test_TxidFromString)\n-{\n-    // Make sure TxidFromString respects string_view length and stops reading at\n-    // end of the substring.\n-    BOOST_CHECK_EQUAL(TxidFromString(std::string_view(\"ABCD1234\", 4)).ToString(),",
      "path": "src/test/transaction_tests.cpp",
      "position": 35,
      "original_position": 8,
      "commit_id": "9113f6b605f9e0a3b438561837f1f4e4142ad3c7",
      "original_commit_id": "17ebf1ac133d26676ba7ae3e40042fdf389d146f",
      "in_reply_to_id": 1698159793,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, fixed. This commit was initially just meant to move the test, but I agree your approach makes more sense, especially in the current way the commits are organized.",
      "created_at": "2024-07-31T12:53:18Z",
      "updated_at": "2024-07-31T13:56:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30532#discussion_r1698459388",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1698459388"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30532"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1035,
      "original_line": 1035,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1698463761",
      "pull_request_review_id": 2210086223,
      "id": 1698463761,
      "node_id": "PRRC_kwDOABII585lPIAR",
      "diff_hunk": "@@ -330,6 +331,57 @@ BOOST_AUTO_TEST_CASE(parse)\n     }\n }\n \n+/**\n+ * Implemented as a templated function so it can be reused by other classes that have a FromHex()\n+ * method that wraps uint256::FromHex(), such as transaction_identifier::FromHex().\n+ */\n+template <typename T>\n+void TestFromHex64Chars()\n+{\n+    std::string valid_64char_input{\"0123456789abcdef0123456789ABCDEF0123456789abcdef0123456789ABCDEF\"};",
      "path": "src/test/uint256_tests.cpp",
      "position": null,
      "original_position": 19,
      "commit_id": "9113f6b605f9e0a3b438561837f1f4e4142ad3c7",
      "original_commit_id": "17ebf1ac133d26676ba7ae3e40042fdf389d146f",
      "in_reply_to_id": 1698197301,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Nice, I like it. Adopted this approach and added `TestFromHex<uint160>();`",
      "created_at": "2024-07-31T12:56:16Z",
      "updated_at": "2024-07-31T13:56:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30532#discussion_r1698463761",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1698463761"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30532"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 341,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1698467272",
      "pull_request_review_id": 2210086223,
      "id": 1698467272,
      "node_id": "PRRC_kwDOABII585lPI3I",
      "diff_hunk": "@@ -330,6 +331,57 @@ BOOST_AUTO_TEST_CASE(parse)\n     }\n }\n \n+/**\n+ * Implemented as a templated function so it can be reused by other classes that have a FromHex()\n+ * method that wraps uint256::FromHex(), such as transaction_identifier::FromHex().\n+ */\n+template <typename T>\n+void TestFromHex64Chars()\n+{\n+    std::string valid_64char_input{\"0123456789abcdef0123456789ABCDEF0123456789abcdef0123456789ABCDEF\"};\n+    {\n+        // check that lower and upper case hex characters are accepted\n+        auto valid_result{T::FromHex(valid_64char_input)};\n+        BOOST_REQUIRE(valid_result);\n+        BOOST_CHECK_EQUAL(valid_result->ToString(), ToLower(valid_64char_input));\n+    }\n+    {\n+        // check that only strings of size 64 are accepted",
      "path": "src/test/uint256_tests.cpp",
      "position": 38,
      "original_position": 27,
      "commit_id": "9113f6b605f9e0a3b438561837f1f4e4142ad3c7",
      "original_commit_id": "17ebf1ac133d26676ba7ae3e40042fdf389d146f",
      "in_reply_to_id": 1698165764,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The \"too short\"/\"too long\" tests are a replacement of the `test_TxidFromString` where we're specifically testing `string_view` substring input, so I don't think they're duplicated?",
      "created_at": "2024-07-31T12:58:44Z",
      "updated_at": "2024-07-31T13:56:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30532#discussion_r1698467272",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1698467272"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30532"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 354,
      "original_line": 354,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1698468890",
      "pull_request_review_id": 2210086223,
      "id": 1698468890,
      "node_id": "PRRC_kwDOABII585lPJQa",
      "diff_hunk": "@@ -330,6 +331,57 @@ BOOST_AUTO_TEST_CASE(parse)\n     }\n }\n \n+/**\n+ * Implemented as a templated function so it can be reused by other classes that have a FromHex()\n+ * method that wraps uint256::FromHex(), such as transaction_identifier::FromHex().\n+ */\n+template <typename T>\n+void TestFromHex64Chars()\n+{\n+    std::string valid_64char_input{\"0123456789abcdef0123456789ABCDEF0123456789abcdef0123456789ABCDEF\"};\n+    {\n+        // check that lower and upper case hex characters are accepted\n+        auto valid_result{T::FromHex(valid_64char_input)};\n+        BOOST_REQUIRE(valid_result);\n+        BOOST_CHECK_EQUAL(valid_result->ToString(), ToLower(valid_64char_input));\n+    }\n+    {\n+        // check that only strings of size 64 are accepted\n+        BOOST_CHECK(!T::FromHex(\"\"));\n+        BOOST_CHECK(!T::FromHex(\"0\"));\n+        BOOST_CHECK(!T::FromHex(\"0123456789abcdef0123456789ABCDEF\"));                                  // 32 chars\n+        BOOST_CHECK(!T::FromHex(\"0123456789abcdef0123456789ABCDEF0123456789abcdef0123456789ABCDE\"));   // 63 chars\n+        BOOST_CHECK(!T::FromHex(\"0123456789abcdef0123456789ABCDEF0123456789abcdef0123456789ABCDEF0\")); // 65 chars\n+    }\n+    {\n+        // check that non-hex characters are not accepted\n+        std::string invalid_chars{R\"( !\"#$%&'()*+,-./:;<=>?@GHIJKLMNOPQRSTUVWXYZ[\\]^_`ghijklmnopqrstuvwxyz{|}~)\"};\n+        std::string valid_base{\"0123456789abcdef0123456789ABCDEF0123456789abcdef0123456789ABCDE\"}; // 63 chars",
      "path": "src/test/uint256_tests.cpp",
      "position": null,
      "original_position": 37,
      "commit_id": "9113f6b605f9e0a3b438561837f1f4e4142ad3c7",
      "original_commit_id": "17ebf1ac133d26676ba7ae3e40042fdf389d146f",
      "in_reply_to_id": 1698172542,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Nice, taken, thanks.",
      "created_at": "2024-07-31T12:59:49Z",
      "updated_at": "2024-07-31T13:56:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30532#discussion_r1698468890",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1698468890"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30532"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 359,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1698476913",
      "pull_request_review_id": 2210086223,
      "id": 1698476913,
      "node_id": "PRRC_kwDOABII585lPLNx",
      "diff_hunk": "@@ -330,6 +331,57 @@ BOOST_AUTO_TEST_CASE(parse)\n     }\n }\n \n+/**\n+ * Implemented as a templated function so it can be reused by other classes that have a FromHex()\n+ * method that wraps uint256::FromHex(), such as transaction_identifier::FromHex().\n+ */\n+template <typename T>\n+void TestFromHex64Chars()\n+{\n+    std::string valid_64char_input{\"0123456789abcdef0123456789ABCDEF0123456789abcdef0123456789ABCDEF\"};\n+    {\n+        // check that lower and upper case hex characters are accepted\n+        auto valid_result{T::FromHex(valid_64char_input)};\n+        BOOST_REQUIRE(valid_result);\n+        BOOST_CHECK_EQUAL(valid_result->ToString(), ToLower(valid_64char_input));\n+    }\n+    {\n+        // check that only strings of size 64 are accepted\n+        BOOST_CHECK(!T::FromHex(\"\"));\n+        BOOST_CHECK(!T::FromHex(\"0\"));\n+        BOOST_CHECK(!T::FromHex(\"0123456789abcdef0123456789ABCDEF\"));                                  // 32 chars\n+        BOOST_CHECK(!T::FromHex(\"0123456789abcdef0123456789ABCDEF0123456789abcdef0123456789ABCDE\"));   // 63 chars\n+        BOOST_CHECK(!T::FromHex(\"0123456789abcdef0123456789ABCDEF0123456789abcdef0123456789ABCDEF0\")); // 65 chars\n+    }\n+    {\n+        // check that non-hex characters are not accepted\n+        std::string invalid_chars{R\"( !\"#$%&'()*+,-./:;<=>?@GHIJKLMNOPQRSTUVWXYZ[\\]^_`ghijklmnopqrstuvwxyz{|}~)\"};\n+        std::string valid_base{\"0123456789abcdef0123456789ABCDEF0123456789abcdef0123456789ABCDE\"}; // 63 chars\n+        BOOST_CHECK_EQUAL(valid_base.length(), 63);\n+        for (auto c : invalid_chars) {\n+            BOOST_CHECK(!T::FromHex(valid_base + c));\n+        }\n+        // 0x prefixes are invalid\n+        std::string invalid_prefix{\"0x\" + valid_64char_input};\n+        BOOST_CHECK(!T::FromHex(std::string_view(invalid_prefix.data(), 64)));\n+        BOOST_CHECK(!T::FromHex(invalid_prefix));\n+    }\n+    {\n+        // check that string_view length is respected\n+        std::string chars_68{valid_64char_input + \"0123\"};\n+        BOOST_CHECK(T::FromHex(std::string_view(chars_68.data(), 64)));",
      "path": "src/test/uint256_tests.cpp",
      "position": null,
      "original_position": 50,
      "commit_id": "9113f6b605f9e0a3b438561837f1f4e4142ad3c7",
      "original_commit_id": "17ebf1ac133d26676ba7ae3e40042fdf389d146f",
      "in_reply_to_id": 1698177785,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I initially changed it to what it is now because I wanted to keep the test focused on ensuring string_view length to be respected, but I suppose it is helpful to ensure the correct substring characters are respected too, so I've taken your suggestion, thanks.",
      "created_at": "2024-07-31T13:05:33Z",
      "updated_at": "2024-07-31T13:56:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30532#discussion_r1698476913",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1698476913"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30532"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 372,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1698543302",
      "pull_request_review_id": 2210086223,
      "id": 1698543302,
      "node_id": "PRRC_kwDOABII585lPbbG",
      "diff_hunk": "@@ -78,9 +78,9 @@ BOOST_FIXTURE_TEST_CASE(package_hash_tests, TestChain100Setup)\n     BOOST_CHECK(wtxid_2.GetHex() < wtxid_3.GetHex());\n \n     // The txids are not (we want to test that sorting and hashing use wtxid, not txid):\n-    Txid txid_1{TxidFromString(\"0xbd0f71c1d5e50589063e134fad22053cdae5ab2320db5bf5e540198b0b5a4e69\")};\n-    Txid txid_2{TxidFromString(\"0xb4749f017444b051c44dfd2720e88f314ff94f3dd6d56d40ef65854fcd7fff6b\")};\n-    Txid txid_3{TxidFromString(\"0xee707be5201160e32c4fc715bec227d1aeea5940fb4295605e7373edce3b1a93\")};\n+    Txid txid_1{Txid::FromHex(\"bd0f71c1d5e50589063e134fad22053cdae5ab2320db5bf5e540198b0b5a4e69\").value()};\n+    Txid txid_2{Txid::FromHex(\"b4749f017444b051c44dfd2720e88f314ff94f3dd6d56d40ef65854fcd7fff6b\").value()};\n+    Txid txid_3{Txid::FromHex(\"ee707be5201160e32c4fc715bec227d1aeea5940fb4295605e7373edce3b1a93\").value()};",
      "path": "src/test/txpackage_tests.cpp",
      "position": 36,
      "original_position": 9,
      "commit_id": "9113f6b605f9e0a3b438561837f1f4e4142ad3c7",
      "original_commit_id": "24a6de35857e88d968ef90cd6fbcda0003f0e3e3",
      "in_reply_to_id": 1698185872,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The reason I organized it like this was to keep `TxidFromString()` test coverage until the same commit it was removed, whereas `WtxidFromString` is a test-only function and could be safely removed beforehand. Gonna leave as is for now since I think it's quite reviewable in the current shape, too?",
      "created_at": "2024-07-31T13:47:47Z",
      "updated_at": "2024-07-31T13:56:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30532#discussion_r1698543302",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1698543302"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30532"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 83,
      "original_line": 83,
      "side": "RIGHT"
    }
  ]
}