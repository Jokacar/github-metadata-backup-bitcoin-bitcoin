{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14912",
    "id": 237345485,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MjM3MzQ1NDg1",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14912",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/14912.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/14912.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14912",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14912/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14912/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14912/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/264425be1f889ff933ecd4eafb74f1a7a0257eac",
    "number": 14912,
    "state": "closed",
    "locked": true,
    "maintainer_can_modify": false,
    "title": "[WIP] External signer support (e.g. hardware wallet)",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This PR lets `bitcoind` to call an arbitrary command `-signer=<cmd>`, e.g. a hardware wallet driver,  where it can fetch public keys, ask to display an address, and sign a PSBT.\r\n\r\nIt's design to work with https://github.com/bitcoin-core/HWI, which supports multiple hardware wallets. Any command with the same arguments and return values will work. It simplifies the manual procedure described [here](https://github.com/bitcoin-core/HWI/blob/master/docs/bitcoin-core-usage.md).\r\n\r\nUsage is documented in [doc/external-signer.md](\r\nhttps://github.com/Sjors/bitcoin/blob/2018/11/rpc-signer/doc/external-signer.md), which also describes what protocol a different signer binary should conform to.\r\n\r\nIt adds the following RPC methods:\r\n* `enumeratesigners`: asks <cmd> for a list of signers (e.g. devices) and their master key fingerprint\r\n* `signerfetchkeys` (needs https://github.com/bitcoin-core/HWI/pull/137): asks <cmd> for descriptors and then fills the keypool (no private keys)\r\n* `signerdisplayaddress <address>`:  asks <cmd> to display an address\r\n* `signerprocesspsbt <psbt>` to send the `<psbt>` to `<cmd>` to sign and wait for the result\r\n\r\nUsage TL&DR:\r\n* clone HWI repo somewhere and launch `bitcoind -signer=../HWI/hwi.py`\r\n* create wallet without private keys: `bitcoin-cli createwallet hww true`\r\n* list hardware devices: `bitcoin-cli enumeratesigners`\r\n* fetch keys from hardware device into the wallet: `bitcoin-cli -rpcwallet=hww signerfetchkeys`\r\n* display address on device, sign transaction: see [doc/external-signer.md](\r\nhttps://github.com/Sjors/bitcoin/blob/2018/11/rpc-signer/doc/external-signer.md)\r\n\r\nFor easier review, this builds on the following PRs:\r\n* #15382: add runCommandParseJSON\r\n* #15590 Descriptor: add GetAddressType() and IsSegwit()\r\n\r\nPotentially useful followups:\r\n- #15876: signer send and bumpfee conveniance methods \r\n- #16528: descriptor based wallets (to preserve BIP44/49/84 compatibility with mixed address types)\r\n- (automatically) verify (a subset of) keys on the device after import, through message signing",
    "labels": [
      {
        "id": 149424,
        "node_id": "MDU6TGFiZWwxNDk0MjQ=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
        "name": "Wallet",
        "color": "08a781",
        "default": false
      }
    ],
    "created_at": "2018-12-10T14:46:02Z",
    "updated_at": "2020-12-08T10:03:45Z",
    "closed_at": "2019-08-04T21:43:57Z",
    "mergeable_state": "unknown",
    "merge_commit_sha": "79755c9b7a7e4dab5650799a893021cb0206f6a8",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "head": {
      "label": "Sjors:2018/11/rpc-signer",
      "ref": "2018/11/rpc-signer",
      "sha": "264425be1f889ff933ecd4eafb74f1a7a0257eac",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 92390696,
        "node_id": "MDEwOlJlcG9zaXRvcnk5MjM5MDY5Ng==",
        "name": "bitcoin",
        "full_name": "Sjors/bitcoin",
        "owner": {
          "login": "Sjors",
          "id": 10217,
          "node_id": "MDQ6VXNlcjEwMjE3",
          "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/Sjors",
          "html_url": "https://github.com/Sjors",
          "followers_url": "https://api.github.com/users/Sjors/followers",
          "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
          "organizations_url": "https://api.github.com/users/Sjors/orgs",
          "repos_url": "https://api.github.com/users/Sjors/repos",
          "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/Sjors/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/Sjors/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/Sjors/bitcoin",
        "archive_url": "https://api.github.com/repos/Sjors/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/Sjors/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/Sjors/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/Sjors/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/Sjors/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/Sjors/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/Sjors/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/Sjors/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/Sjors/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/Sjors/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/Sjors/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/Sjors/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/Sjors/bitcoin/events",
        "forks_url": "https://api.github.com/repos/Sjors/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/Sjors/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/Sjors/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/Sjors/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/Sjors/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/Sjors/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/Sjors/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/Sjors/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/Sjors/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/Sjors/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/Sjors/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/Sjors/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/Sjors/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/Sjors/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/Sjors/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/Sjors/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:Sjors/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/Sjors/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/Sjors/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/Sjors/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/Sjors/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/Sjors/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/Sjors/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/Sjors/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/Sjors/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/Sjors/bitcoin/hooks",
        "svn_url": "https://github.com/Sjors/bitcoin",
        "homepage": "https://bitcoin.org/en/download",
        "language": "C++",
        "forks_count": 4,
        "stargazers_count": 3,
        "watchers_count": 3,
        "size": 224196,
        "default_branch": "master",
        "open_issues_count": 2,
        "is_template": false,
        "topics": [],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-08-02T16:21:28Z",
        "created_at": "2017-05-25T10:05:54Z",
        "updated_at": "2023-03-31T09:52:58Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "e55444a2a8a2b4a378e6d42b7bf73d13492a5716",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 35475,
        "stargazers_count": 70608,
        "watchers_count": 70608,
        "size": 236222,
        "default_branch": "master",
        "open_issues_count": 672,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-08-02T18:34:08Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-08-02T18:21:18Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14912"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 1690,
    "deletions": 27,
    "changed_files": 40,
    "commits": 21,
    "review_comments": 41,
    "comments": 22
  },
  "events": [
    {
      "event": "mentioned",
      "id": 2016087476,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjAxNjA4NzQ3Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2016087476",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-12-10T14:46:02Z"
    },
    {
      "event": "subscribed",
      "id": 2016087477,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDIwMTYwODc0Nzc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2016087477",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-12-10T14:46:02Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-12-10T14:47:58Z",
      "updated_at": "2018-12-10T14:47:58Z",
      "source": {
        "issue": {
          "id": 356746959,
          "node_id": "MDU6SXNzdWUzNTY3NDY5NTk=",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14145",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14145/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14145/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14145/events",
          "html_url": "https://github.com/bitcoin/bitcoin/issues/14145",
          "number": 14145,
          "state": "closed",
          "state_reason": "completed",
          "title": "Hardware wallet support",
          "body": "Potential benefits of using hardware wallets in combination with Bitcoin Core:\r\n* privacy: all or most hardware wallets rely on a backend to fetch balance and history\r\n* less vendor-specific code to trust, including much of their dependencies (e.g. hardware wallet software often uses ElectronJS and the whole Javascript kitchen sink)\r\n* potentially safer coin storage for Bitcoin Core users than just a `wallet.dat` file\r\n\r\nCurrent easy to use alternatives:\r\n* use the official wallet that goes with the device\r\n* use a different wallet (e.g. Electrum)\r\n\r\nCurrent advanced alternatives:\r\n* [Electrum Personal Server](https://github.com/chris-belcher/electrum-personal-server)\r\n* WIP by @instagibbs: https://github.com/bitcoin/bitcoin/compare/master...instagibbs:external_sign_10\r\n* #14019, #14021, and #14075 by @achow101, guide: https://gist.github.com/achow101/a9cf757d45df56753fae9d65db4d6e1d\r\n\r\nProbably out of scope:\r\n* hardware drivers; i.e. there will always be some binary from manufacturer that the user needs to install and trust\r\n* UI changes more complex than \"Please approve the transaction on your device\"\r\n\r\nPotential ingredients:\r\n* drivers:\r\n  * https://github.com/achow101/HWI: combines various hardware drivers into a consistent API. Uses Python, perhaps rewrite in C++? Drivers from e.g. Ledger and Trezor also in Python though.\r\n  * https://github.com/signal11/hidapi: multi-platform USB/Bluetooth driver written in C++: could perhaps be added to depends to minimize the amount of vendor-specific code users need to trust?\r\n  * perhaps the above is too much detail, and we should just specify a list of function calls that the wallet can make to the driver?\r\n* [BIP-174](https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki) partially signed transactions are now supported\r\n* [output descriptors](https://github.com/bitcoin/bitcoin/pull/14096)\r\n* [wallet flags](#9662) (e.g. watch-only)\r\n* dynamic wallet loading and creation\r\n\r\nPrevious issues discussing this:\r\n* #10112 (initially about Yubikey, but more broad)\r\n* #8218 (initially about Trezor, but also more broad)\r\n\r\n---\r\nI imagine a UX like this:\r\n\r\n1.  User installs hardware driver\r\n2. User starts Bitcoin Core and inserts hardware wallet\r\n3. Core detects this driver and checks device id against all loaded wallets\r\n3a. If no wallet is found, add menu entry \"Create wallet with device X\"\r\n3b. Core asks device for account xpub `m/49'/0'` (or whatever user enters)\r\n3c. Derive keys (driver provides output descriptor for change and receive addresses, e.g. `/0/*` and `/1/*`)\r\n3d. Mark wallet as watch-only and store the device id.\r\n3e. Ask driver if this is an existing or fresh wallet, rescan if needed\r\n4. When user makes a transaction and wallet has a device id, check with driver that device is inserted, then ask device to sign transaction\r\n\r\nWhat seems to be missing is some sort of reverse-RPC, where the Bitcoin Core can take initiative, e.g. asking the device \"give me an xpub\", or \"sign this\". Perhaps drivers can symlink a standardized RPC at  `$bitcoin_datadir/hardware/device-id`?",
          "user": {
            "login": "Sjors",
            "id": 10217,
            "node_id": "MDQ6VXNlcjEwMjE3",
            "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Sjors",
            "html_url": "https://github.com/Sjors",
            "followers_url": "https://api.github.com/users/Sjors/followers",
            "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
            "organizations_url": "https://api.github.com/users/Sjors/orgs",
            "repos_url": "https://api.github.com/users/Sjors/repos",
            "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/Sjors/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 64583,
              "node_id": "MDU6TGFiZWw2NDU4Mw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Feature",
              "name": "Feature",
              "color": "7cf575",
              "default": false
            },
            {
              "id": 64584,
              "node_id": "MDU6TGFiZWw2NDU4NA==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Brainstorming",
              "name": "Brainstorming",
              "color": "ebd775",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 14,
          "closed_at": "2021-06-25T11:50:10Z",
          "created_at": "2018-09-04T10:25:26Z",
          "updated_at": "2022-08-18T18:36:26Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2016116979,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjAxNjExNjk3OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2016116979",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-12-10T14:56:25Z"
    },
    {
      "event": "labeled",
      "id": 2016126837,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDIwMTYxMjY4Mzc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2016126837",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-12-10T14:59:25Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 2019424511,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDIwMTk0MjQ1MTE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2019424511",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-12-11T17:53:32Z",
      "label": {
        "name": "Wallet",
        "color": "08a781"
      }
    },
    {
      "event": "commented",
      "id": 447561259,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NzU2MTI1OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/447561259",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-12-15T11:22:06Z",
      "updated_at": "2018-12-15T11:22:06Z",
      "author_association": "MEMBER",
      "body": "Now that #14491 has been rebased, the `hww` branch I'm building off should also soon be rebased. At that point I can rebase and make Travis happy. In addition, I'll be able to leverage #14646 to clean up my descriptor related code (I'm currently using string concatenation to build descriptors). I have a few other spring cleaning items on my todo list too.\r\n\r\nSee also the [wallet meeting notes](http://www.erisian.com.au/bitcoin-core-dev/log-2018-12-14.html#l-473).",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14912#issuecomment-447561259",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14912"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2030982747,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjAzMDk4Mjc0Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2030982747",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-12-17T18:06:59Z"
    },
    {
      "event": "unlabeled",
      "id": 2031024142,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MjAzMTAyNDE0Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2031024142",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-12-17T18:26:05Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 447982606,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQ0Nzk4MjYwNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/447982606",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-12-17T20:12:41Z",
      "updated_at": "2019-08-04T16:10:09Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#16542](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16542.html) (Return more specific errors about invalid descriptors by achow101)\n* [#16539](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16539.html) ([wallet] lower -txmaxfee default from 0.1 to 0.01 BTC by Sjors)\n* [#16528](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16528.html) ([WIP] Native Descriptor Wallets (take 2) by achow101)\n* [#16365](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16365.html) (Log RPC parameters (arguments) if -debug=rpcparams by LarryRuane)\n* [#16341](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16341.html) (Introduce ScriptPubKeyMan interface and use it for key and script management (aka wallet boxes) by achow101)\n* [#16273](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16273.html) (refactor: Remove unused includes by practicalswift)\n* [#15876](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/15876.html) ([rpc] signer send and fee bump convenience methods by Sjors)\n* [#15529](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/15529.html) (Add Qt programs to msvc build (updated, no code changes) by sipsorcery)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14912#issuecomment-447982606",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14912"
    },
    {
      "event": "reviewed",
      "id": 186155471,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTg2MTU1NDcx",
      "url": null,
      "actor": null,
      "commit_id": "9ec4aaca284673e1c92a02fdc4dea9a1a3e6038c",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14912#pullrequestreview-186155471",
      "submitted_at": "2018-12-18T16:19:34Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14912"
    },
    {
      "event": "reviewed",
      "id": 186156153,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTg2MTU2MTUz",
      "url": null,
      "actor": null,
      "commit_id": "9ec4aaca284673e1c92a02fdc4dea9a1a3e6038c",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14912#pullrequestreview-186156153",
      "submitted_at": "2018-12-18T16:20:53Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14912"
    },
    {
      "event": "reviewed",
      "id": 186157079,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTg2MTU3MDc5",
      "url": null,
      "actor": null,
      "commit_id": "9ec4aaca284673e1c92a02fdc4dea9a1a3e6038c",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14912#pullrequestreview-186157079",
      "submitted_at": "2018-12-18T16:22:38Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14912"
    },
    {
      "event": "reviewed",
      "id": 186157488,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTg2MTU3NDg4",
      "url": null,
      "actor": null,
      "commit_id": "9ec4aaca284673e1c92a02fdc4dea9a1a3e6038c",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14912#pullrequestreview-186157488",
      "submitted_at": "2018-12-18T16:23:17Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14912"
    },
    {
      "event": "reviewed",
      "id": 186158164,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTg2MTU4MTY0",
      "url": null,
      "actor": null,
      "commit_id": "9ec4aaca284673e1c92a02fdc4dea9a1a3e6038c",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14912#pullrequestreview-186158164",
      "submitted_at": "2018-12-18T16:24:28Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14912"
    },
    {
      "event": "reviewed",
      "id": 186161053,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTg2MTYxMDUz",
      "url": null,
      "actor": null,
      "commit_id": "9ec4aaca284673e1c92a02fdc4dea9a1a3e6038c",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14912#pullrequestreview-186161053",
      "submitted_at": "2018-12-18T16:29:39Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14912"
    },
    {
      "event": "reviewed",
      "id": 186161866,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTg2MTYxODY2",
      "url": null,
      "actor": null,
      "commit_id": "9ec4aaca284673e1c92a02fdc4dea9a1a3e6038c",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14912#pullrequestreview-186161866",
      "submitted_at": "2018-12-18T16:31:09Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14912"
    },
    {
      "event": "reviewed",
      "id": 186165666,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTg2MTY1NjY2",
      "url": null,
      "actor": null,
      "commit_id": "9ec4aaca284673e1c92a02fdc4dea9a1a3e6038c",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14912#pullrequestreview-186165666",
      "submitted_at": "2018-12-18T16:38:09Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14912"
    },
    {
      "event": "reviewed",
      "id": 186166112,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTg2MTY2MTEy",
      "url": null,
      "actor": null,
      "commit_id": "9ec4aaca284673e1c92a02fdc4dea9a1a3e6038c",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14912#pullrequestreview-186166112",
      "submitted_at": "2018-12-18T16:38:57Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14912"
    },
    {
      "event": "reviewed",
      "id": 186168170,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTg2MTY4MTcw",
      "url": null,
      "actor": null,
      "commit_id": "9ec4aaca284673e1c92a02fdc4dea9a1a3e6038c",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14912#pullrequestreview-186168170",
      "submitted_at": "2018-12-18T16:42:48Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14912"
    },
    {
      "event": "reviewed",
      "id": 186168654,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTg2MTY4NjU0",
      "url": null,
      "actor": null,
      "commit_id": "9ec4aaca284673e1c92a02fdc4dea9a1a3e6038c",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14912#pullrequestreview-186168654",
      "submitted_at": "2018-12-18T16:43:39Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14912"
    },
    {
      "event": "reviewed",
      "id": 186168772,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTg2MTY4Nzcy",
      "url": null,
      "actor": null,
      "commit_id": "9ec4aaca284673e1c92a02fdc4dea9a1a3e6038c",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14912#pullrequestreview-186168772",
      "submitted_at": "2018-12-18T16:43:55Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14912"
    },
    {
      "event": "reviewed",
      "id": 186169074,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTg2MTY5MDc0",
      "url": null,
      "actor": null,
      "commit_id": "9ec4aaca284673e1c92a02fdc4dea9a1a3e6038c",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14912#pullrequestreview-186169074",
      "submitted_at": "2018-12-18T16:44:30Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14912"
    },
    {
      "event": "reviewed",
      "id": 186170522,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTg2MTcwNTIy",
      "url": null,
      "actor": null,
      "commit_id": "9ec4aaca284673e1c92a02fdc4dea9a1a3e6038c",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14912#pullrequestreview-186170522",
      "submitted_at": "2018-12-18T16:47:05Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14912"
    },
    {
      "event": "reviewed",
      "id": 186170810,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTg2MTcwODEw",
      "url": null,
      "actor": null,
      "commit_id": "9ec4aaca284673e1c92a02fdc4dea9a1a3e6038c",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14912#pullrequestreview-186170810",
      "submitted_at": "2018-12-18T16:47:38Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14912"
    },
    {
      "event": "reviewed",
      "id": 186171510,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTg2MTcxNTEw",
      "url": null,
      "actor": null,
      "commit_id": "9ec4aaca284673e1c92a02fdc4dea9a1a3e6038c",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14912#pullrequestreview-186171510",
      "submitted_at": "2018-12-18T16:48:59Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14912"
    },
    {
      "event": "reviewed",
      "id": 186172231,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTg2MTcyMjMx",
      "url": null,
      "actor": null,
      "commit_id": "9ec4aaca284673e1c92a02fdc4dea9a1a3e6038c",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14912#pullrequestreview-186172231",
      "submitted_at": "2018-12-18T16:50:24Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14912"
    },
    {
      "event": "reviewed",
      "id": 186172442,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTg2MTcyNDQy",
      "url": null,
      "actor": null,
      "commit_id": "9ec4aaca284673e1c92a02fdc4dea9a1a3e6038c",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14912#pullrequestreview-186172442",
      "submitted_at": "2018-12-18T16:50:51Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14912"
    },
    {
      "event": "reviewed",
      "id": 186173510,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTg2MTczNTEw",
      "url": null,
      "actor": null,
      "commit_id": "9ec4aaca284673e1c92a02fdc4dea9a1a3e6038c",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14912#pullrequestreview-186173510",
      "submitted_at": "2018-12-18T16:52:53Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14912"
    },
    {
      "event": "reviewed",
      "id": 186173710,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTg2MTczNzEw",
      "url": null,
      "actor": null,
      "commit_id": "9ec4aaca284673e1c92a02fdc4dea9a1a3e6038c",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14912#pullrequestreview-186173710",
      "submitted_at": "2018-12-18T16:53:15Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14912"
    },
    {
      "event": "reviewed",
      "id": 186174018,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTg2MTc0MDE4",
      "url": null,
      "actor": null,
      "commit_id": "9ec4aaca284673e1c92a02fdc4dea9a1a3e6038c",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14912#pullrequestreview-186174018",
      "submitted_at": "2018-12-18T16:53:47Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14912"
    },
    {
      "event": "reviewed",
      "id": 186174993,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTg2MTc0OTkz",
      "url": null,
      "actor": null,
      "commit_id": "9ec4aaca284673e1c92a02fdc4dea9a1a3e6038c",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14912#pullrequestreview-186174993",
      "submitted_at": "2018-12-18T16:55:41Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14912"
    },
    {
      "event": "reviewed",
      "id": 186176286,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTg2MTc2Mjg2",
      "url": null,
      "actor": null,
      "commit_id": "9ec4aaca284673e1c92a02fdc4dea9a1a3e6038c",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14912#pullrequestreview-186176286",
      "submitted_at": "2018-12-18T16:57:57Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14912"
    },
    {
      "event": "reviewed",
      "id": 186176818,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTg2MTc2ODE4",
      "url": null,
      "actor": null,
      "commit_id": "9ec4aaca284673e1c92a02fdc4dea9a1a3e6038c",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14912#pullrequestreview-186176818",
      "submitted_at": "2018-12-18T16:58:47Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14912"
    },
    {
      "event": "commented",
      "id": 448335664,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQ0ODMzNTY2NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/448335664",
      "actor": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-12-18T19:12:36Z",
      "updated_at": "2018-12-18T19:12:36Z",
      "author_association": "CONTRIBUTOR",
      "body": "Great work!\r\nI think the signer API (calling an external script/application) seems fine. We should make sure all calls are non-blocking sync it could be, that the signer application has a GUI and requires user interaction on all non-obvious commands like \"displayaddress\". Also, the device could require initialisation which could be triggered by a first display/sign command.",
      "user": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14912#issuecomment-448335664",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14912"
    },
    {
      "event": "commented",
      "id": 448970210,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQ0ODk3MDIxMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/448970210",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-12-20T11:44:39Z",
      "updated_at": "2018-12-20T11:46:00Z",
      "author_association": "MEMBER",
      "body": "@jonasschnelli I have a idea on how to allow asynchronous interaction. That also makes sense if  you're using an online service with a 48 hour cool down period.\r\n\r\nThe `signtransaction` command (called by `processpsbt` in this PR) could take an optional ephemeral public key argument. The commands then immediately returns with a UUID and a timestamp for when the client should come back. We could then add a `polltransaction` command which takes the UUID and returns the encrypted transaction (or nothing), encrypted using the ephemeral public key. This would involve making the wallet aware of pending transactions, and perhaps an additional RPC call like `walletprocesspendingtransactions`.\r\n\r\nDevice initialization could be a new RPC call, and other calls would just throw an error if not initialized. The `enumeratesigners` call can return more information about the device, such as the initialization status.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14912#issuecomment-448970210",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14912"
    },
    {
      "event": "mentioned",
      "id": 2038158343,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjAzODE1ODM0Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2038158343",
      "actor": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-12-20T11:44:39Z"
    },
    {
      "event": "subscribed",
      "id": 2038158345,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDIwMzgxNTgzNDU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2038158345",
      "actor": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-12-20T11:44:39Z"
    },
    {
      "event": "labeled",
      "id": 2043057822,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDIwNDMwNTc4MjI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2043057822",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-12-24T12:21:06Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2072338663,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjA3MjMzODY2Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2072338663",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-01-14T16:54:43Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2072631159,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjA3MjYzMTE1OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2072631159",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-01-14T18:52:13Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-01-17T16:10:30Z",
      "updated_at": "2019-01-17T16:10:30Z",
      "source": {
        "issue": {
          "id": 318225179,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MTg0NDg1NzUw",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/13100",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/13100/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/13100/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/13100/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/13100",
          "number": 13100,
          "state": "closed",
          "state_reason": null,
          "title": "gui: Add dynamic wallets support ",
          "body": "This PR adds a menu entry `Open Wallet` to support loading existing wallets in the UI.\r\n\r\nFixes #7675.",
          "user": {
            "login": "promag",
            "id": 3534524,
            "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/promag",
            "html_url": "https://github.com/promag",
            "followers_url": "https://api.github.com/users/promag/followers",
            "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
            "organizations_url": "https://api.github.com/users/promag/orgs",
            "repos_url": "https://api.github.com/users/promag/repos",
            "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/promag/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135946,
              "node_id": "MDU6TGFiZWwxMzU5NDY=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/GUI",
              "name": "GUI",
              "color": "02d7e1",
              "default": false
            },
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "milestone": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/35",
            "html_url": "https://github.com/bitcoin/bitcoin/milestone/35",
            "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/35/labels",
            "id": 3318051,
            "node_id": "MDk6TWlsZXN0b25lMzMxODA1MQ==",
            "number": 35,
            "state": "closed",
            "title": "0.18.0",
            "description": "",
            "creator": {
              "login": "MarcoFalke",
              "id": 6399679,
              "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
              "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/MarcoFalke",
              "html_url": "https://github.com/MarcoFalke",
              "followers_url": "https://api.github.com/users/MarcoFalke/followers",
              "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
              "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
              "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
              "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
              "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
              "repos_url": "https://api.github.com/users/MarcoFalke/repos",
              "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
              "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
              "type": "User",
              "site_admin": false
            },
            "open_issues": 0,
            "closed_issues": 186,
            "created_at": "2018-05-03T15:34:54Z",
            "updated_at": "2020-03-17T18:30:07Z",
            "closed_at": "2019-05-03T02:51:38Z"
          },
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 50,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13100",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/13100",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/13100.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/13100.patch"
          },
          "closed_at": "2019-01-18T20:39:53Z",
          "created_at": "2018-04-26T23:01:22Z",
          "updated_at": "2021-12-16T15:10:36Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2082791851,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjA4Mjc5MTg1MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2082791851",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-01-18T12:29:06Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2083068835,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjA4MzA2ODgzNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2083068835",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-01-18T14:38:03Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2083452390,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjA4MzQ1MjM5MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2083452390",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-01-18T17:06:25Z"
    },
    {
      "event": "commented",
      "id": 455624882,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NTYyNDg4Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/455624882",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-01-18T17:28:00Z",
      "updated_at": "2019-01-18T17:42:55Z",
      "author_association": "MEMBER",
      "body": "I added a `signersend` RPC method which Just Works(tm) by combining the functionality of `walletcreatefundedpsbt`, `signerprocesspsbt`, `finalizepsbt` and `sendrawtransaction`. Updated the documentation.\r\n\r\nAddressed some of the nits. Still much to improve in terms of code quality, and I'm waiting on multiple upstream pull requests.\r\n\r\nThe most useful review at this point is to test the workflow. In addition, feedback on `runCommandParseJSON()` is welcome.\r\n\r\nSome things I plan to work on next:\r\n1. Create `wallet/rpcsigner.cpp` and move the various functions there; `wallet/rpcwallet.cpp` and `src/rpc/rpcdump.cpp` are already big enough\r\n2. Clean up the way I made `sendrawtransaction` reusable (I just noticed #14978 already does that)\r\n3. Incorporate #14978 (reusable PSBT code, I might wait for that to be merged)\r\n4. Similar to #14978, find a way to make this code reusable, so I can build GUI support in a followup PR",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14912#issuecomment-455624882",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14912"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-01-18T17:35:42Z",
      "updated_at": "2019-01-18T17:35:42Z",
      "source": {
        "issue": {
          "id": 391539515,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MjM5MDEzNjIx",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14978",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14978/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14978/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14978/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/14978",
          "number": 14978,
          "state": "closed",
          "state_reason": null,
          "title": "Factor out PSBT utilities from RPCs for use in GUI code; related refactoring.",
          "body": "* Move most PSBT definitions into psbt.h.\r\n* Move most PSBT RPC utilities into psbt.{h,cpp}.\r\n* Move wallet-touching PSBT RPC utilities (FillPSBT) into\r\n    wallet/psbtwallet.{h,cpp}.\r\n* Switch exceptions from JSONRPCError() to new PSBTException class.\r\n* Split DecodePSBT into DecodeBase64PSBT (old behavior) and DecodeRawPSBT.\r\n* Add one new version of DecodeBase64 utility in strencodings.h (and\r\n    corresponding DecodeBase32 for completeness).\r\n* Factor BroadcastTransaction utility function out of sendrawtransaction RPC\r\n    handler in rpc/rawtransaction.cpp\r\n\r\nNote: For those keeping score at home wondering why refactor, this is in anticipation of (and developed in parallel with) a change to actually introduce GUI use of all this stuff, which is already under development and working-ish.\r\n",
          "user": {
            "login": "gwillen",
            "id": 458997,
            "node_id": "MDQ6VXNlcjQ1ODk5Nw==",
            "avatar_url": "https://avatars.githubusercontent.com/u/458997?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gwillen",
            "html_url": "https://github.com/gwillen",
            "followers_url": "https://api.github.com/users/gwillen/followers",
            "following_url": "https://api.github.com/users/gwillen/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/gwillen/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/gwillen/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/gwillen/subscriptions",
            "organizations_url": "https://api.github.com/users/gwillen/orgs",
            "repos_url": "https://api.github.com/users/gwillen/repos",
            "events_url": "https://api.github.com/users/gwillen/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/gwillen/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            },
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 38,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14978",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/14978",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/14978.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/14978.patch"
          },
          "closed_at": "2019-02-14T08:49:44Z",
          "created_at": "2018-12-17T02:52:20Z",
          "updated_at": "2021-12-16T14:50:51Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2084442262,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjA4NDQ0MjI2Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2084442262",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-01-19T09:40:03Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2084454298,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjA4NDQ1NDI5OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2084454298",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-01-19T10:17:36Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2084454500,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjA4NDQ1NDUwMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2084454500",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-01-19T10:18:18Z"
    },
    {
      "event": "unlabeled",
      "id": 2084457361,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MjA4NDQ1NzM2MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2084457361",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-01-19T10:27:12Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2084605434,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjA4NDYwNTQzNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2084605434",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-01-19T17:15:19Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2084610514,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjA4NDYxMDUxNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2084610514",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-01-19T17:27:14Z"
    },
    {
      "event": "commented",
      "id": 455802298,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NTgwMjI5OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/455802298",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-01-19T18:08:53Z",
      "updated_at": "2019-01-19T18:08:53Z",
      "author_association": "MEMBER",
      "body": "Rebased on the latest `hww` branch. Moved a bunch of things to `wallet/rpcsigner.cpp`.\r\n\r\n@ken2812221 any idea how I can make AppVeyor happy? My guess is that it doesn't like `runCommandParseJSON()` in `system.cpp`\r\n\r\n<img width=\"899\" alt=\"schermafbeelding 2019-01-19 om 19 08 39\" src=\"https://user-images.githubusercontent.com/10217/51430571-a5a20980-1c1d-11e9-87b4-f4dab92e4dc3.png\">\r\n",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14912#issuecomment-455802298",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14912"
    },
    {
      "event": "mentioned",
      "id": 2084627611,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjA4NDYyNzYxMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2084627611",
      "actor": {
        "login": "ken2812221",
        "id": 11154118,
        "node_id": "MDQ6VXNlcjExMTU0MTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ken2812221",
        "html_url": "https://github.com/ken2812221",
        "followers_url": "https://api.github.com/users/ken2812221/followers",
        "following_url": "https://api.github.com/users/ken2812221/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ken2812221/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ken2812221/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
        "organizations_url": "https://api.github.com/users/ken2812221/orgs",
        "repos_url": "https://api.github.com/users/ken2812221/repos",
        "events_url": "https://api.github.com/users/ken2812221/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ken2812221/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-01-19T18:08:53Z"
    },
    {
      "event": "subscribed",
      "id": 2084627613,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDIwODQ2Mjc2MTM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2084627613",
      "actor": {
        "login": "ken2812221",
        "id": 11154118,
        "node_id": "MDQ6VXNlcjExMTU0MTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ken2812221",
        "html_url": "https://github.com/ken2812221",
        "followers_url": "https://api.github.com/users/ken2812221/followers",
        "following_url": "https://api.github.com/users/ken2812221/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ken2812221/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ken2812221/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
        "organizations_url": "https://api.github.com/users/ken2812221/orgs",
        "repos_url": "https://api.github.com/users/ken2812221/repos",
        "events_url": "https://api.github.com/users/ken2812221/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ken2812221/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-01-19T18:08:53Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-01-21T19:17:33Z",
      "updated_at": "2019-01-21T19:17:33Z",
      "source": {
        "issue": {
          "id": 386200139,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MjM0OTk3NTQ3",
          "url": "https://api.github.com/repos/achow101/bitcoin/issues/2",
          "repository_url": "https://api.github.com/repos/achow101/bitcoin",
          "labels_url": "https://api.github.com/repos/achow101/bitcoin/issues/2/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/achow101/bitcoin/issues/2/comments",
          "events_url": "https://api.github.com/repos/achow101/bitcoin/issues/2/events",
          "html_url": "https://github.com/achow101/bitcoin/pull/2",
          "number": 2,
          "state": "closed",
          "state_reason": null,
          "title": "WIP: bitcoind signer support",
          "body": "Making a PR on top of your `hww` branch for easier discussion.\r\n\r\nWorks in combination with: https://github.com/achow101/HWI/pull/73\r\n\r\nUsage described [here](https://github.com/Sjors/bitcoin/blob/2018/11/rpc-signer/doc/external-signer.md).\r\n\r\n- [x] `-signer` argument for `bitcoind`\r\n- [x] `enumeratesigners` RPC\r\n- [x] `signerfetchkeys` RPC\r\n- [x] `signerdisplayaddress` RPC\r\n- [x] make `walletprocesspsbt` use signer\r\n\r\nProbably out of scope:\r\n- `sendmany` (just use PSBT?)\r\n- `sendtoaddress ` (just use PSBT?)\r\n- `signrawtransactionwithwallet` (just use PSBT?)",
          "user": {
            "login": "Sjors",
            "id": 10217,
            "node_id": "MDQ6VXNlcjEwMjE3",
            "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Sjors",
            "html_url": "https://github.com/Sjors",
            "followers_url": "https://api.github.com/users/Sjors/followers",
            "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
            "organizations_url": "https://api.github.com/users/Sjors/orgs",
            "repos_url": "https://api.github.com/users/Sjors/repos",
            "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/Sjors/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "NONE",
          "locked": false,
          "comments": 6,
          "pull_request": {
            "url": "https://api.github.com/repos/achow101/bitcoin/pulls/2",
            "html_url": "https://github.com/achow101/bitcoin/pull/2",
            "diff_url": "https://github.com/achow101/bitcoin/pull/2.diff",
            "patch_url": "https://github.com/achow101/bitcoin/pull/2.patch"
          },
          "closed_at": "2019-01-21T19:17:33Z",
          "created_at": "2018-11-30T14:03:29Z",
          "updated_at": "2019-01-21T19:17:33Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-01-21T19:18:16Z",
      "updated_at": "2019-01-21T19:18:16Z",
      "source": {
        "issue": {
          "id": 386907605,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MjM1NTE3MDk5",
          "url": "https://api.github.com/repos/bitcoin-core/HWI/issues/73",
          "repository_url": "https://api.github.com/repos/bitcoin-core/HWI",
          "labels_url": "https://api.github.com/repos/bitcoin-core/HWI/issues/73/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin-core/HWI/issues/73/comments",
          "events_url": "https://api.github.com/repos/bitcoin-core/HWI/issues/73/events",
          "html_url": "https://github.com/bitcoin-core/HWI/pull/73",
          "number": 73,
          "state": "closed",
          "state_reason": null,
          "title": "WIP: descriptor request using \"getkeys\"",
          "body": "Todo:\r\n* implement and discuss descriptor requests in Bitcoin Core\r\n* rebase on #117\r\n\r\nImplements `getkeys` as proposed [here](https://github.com/Sjors/bitcoin/blob/2018/11/rpc-signer/doc/external-signer.md#getkeys-optional).\r\n\r\n_Update 2019/02/02_: this used to include #117, which I've moved to a new PR",
          "user": {
            "login": "Sjors",
            "id": 10217,
            "node_id": "MDQ6VXNlcjEwMjE3",
            "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Sjors",
            "html_url": "https://github.com/Sjors",
            "followers_url": "https://api.github.com/users/Sjors/followers",
            "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
            "organizations_url": "https://api.github.com/users/Sjors/orgs",
            "repos_url": "https://api.github.com/users/Sjors/repos",
            "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/Sjors/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 14,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin-core/HWI/pulls/73",
            "html_url": "https://github.com/bitcoin-core/HWI/pull/73",
            "diff_url": "https://github.com/bitcoin-core/HWI/pull/73.diff",
            "patch_url": "https://github.com/bitcoin-core/HWI/pull/73.patch"
          },
          "closed_at": "2019-02-13T11:02:40Z",
          "created_at": "2018-12-03T16:49:04Z",
          "updated_at": "2019-02-13T11:02:40Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "reviewed",
      "id": 194884550,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTk0ODg0NTUw",
      "url": null,
      "actor": null,
      "commit_id": "5297b78e7929d7c74727a1f41a4cf85a180b7b08",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14912#pullrequestreview-194884550",
      "submitted_at": "2019-01-22T08:37:10Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14912"
    },
    {
      "event": "reviewed",
      "id": 194885215,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTk0ODg1MjE1",
      "url": null,
      "actor": null,
      "commit_id": "5297b78e7929d7c74727a1f41a4cf85a180b7b08",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14912#pullrequestreview-194885215",
      "submitted_at": "2019-01-22T08:39:13Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14912"
    },
    {
      "event": "reviewed",
      "id": 194898800,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTk0ODk4ODAw",
      "url": null,
      "actor": null,
      "commit_id": "5297b78e7929d7c74727a1f41a4cf85a180b7b08",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14912#pullrequestreview-194898800",
      "submitted_at": "2019-01-22T09:13:33Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14912"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2092389347,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjA5MjM4OTM0Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2092389347",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-01-23T17:52:15Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2092456869,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjA5MjQ1Njg2OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2092456869",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-01-23T18:20:07Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2093707200,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjA5MzcwNzIwMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2093707200",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-01-24T07:40:44Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2094176701,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjA5NDE3NjcwMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2094176701",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-01-24T11:14:30Z"
    },
    {
      "event": "commented",
      "id": 457161230,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NzE2MTIzMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/457161230",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-01-24T11:16:40Z",
      "updated_at": "2019-01-24T14:11:08Z",
      "author_association": "MEMBER",
      "body": "* updated to incorporate the latest changes in https://github.com/achow101/HWI/pull/73 and \r\nhttps://github.com/achow101/bitcoin/tree/hww\r\n* added (BIP32) `account` argument to `signerfetchkeys` (will add custom descriptor arguments later)\r\n* using `RPCHelpMan` (surviving the Travis linter again)\r\n* using inferred descriptor for `signerdisplayaddress`\r\n* included commits from #14978 to clean up PSBT & sendrawtransaction stuff (and fix Travis)\r\n* added the most important remaining todo's to the PR description",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14912#issuecomment-457161230",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14912"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2094568202,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjA5NDU2ODIwMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2094568202",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-01-24T14:11:09Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2094604185,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjA5NDYwNDE4NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2094604185",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-01-24T14:24:37Z"
    },
    {
      "event": "labeled",
      "id": 2107730429,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDIxMDc3MzA0Mjk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2107730429",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-01-30T21:04:23Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2111980394,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjExMTk4MDM5NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2111980394",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-02-01T11:47:31Z"
    },
    {
      "event": "unlabeled",
      "id": 2112082283,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MjExMjA4MjI4Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2112082283",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-02-01T12:42:10Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2112094298,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjExMjA5NDI5OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2112094298",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-02-01T12:48:21Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2112149243,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjExMjE0OTI0Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2112149243",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-02-01T13:16:46Z"
    },
    {
      "event": "labeled",
      "id": 2112208964,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDIxMTIyMDg5NjQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2112208964",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-02-01T13:44:36Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2113835474,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjExMzgzNTQ3NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2113835474",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-02-02T13:19:53Z"
    },
    {
      "event": "commented",
      "id": 459964623,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQ1OTk2NDYyMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/459964623",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-02-02T13:20:49Z",
      "updated_at": "2019-02-02T13:20:49Z",
      "author_association": "MEMBER",
      "body": "I changed `signerfetchkeys` to use `getxpub` instead of `getkeys`. You can now use the `master` branch of HWI, except for [displayaddress](https://github.com/bitcoin-core/HWI/pull/117).\r\n\r\nI'll deal with the rebase once a bit more upstream stuff is merged.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14912#issuecomment-459964623",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14912"
    },
    {
      "event": "reviewed",
      "id": 199363825,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTk5MzYzODI1",
      "url": null,
      "actor": null,
      "commit_id": "6323969eef86dfa1c35359f1ff67aec6318f46f4",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14912#pullrequestreview-199363825",
      "submitted_at": "2019-02-02T21:50:26Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14912"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2114038738,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjExNDAzODczOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2114038738",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-02-02T21:59:59Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-02-03T10:28:43Z",
      "updated_at": "2019-02-03T10:28:43Z",
      "source": {
        "issue": {
          "id": 350431873,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MjA4Mjg0Mzcy",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/13966",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/13966/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/13966/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/13966/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/13966",
          "number": 13966,
          "state": "closed",
          "state_reason": null,
          "title": "gui: When private key is disabled, only show watch-only balance",
          "body": "If a wallet is in private key disabled mode, the spendable balance is always zero, it does not have to show on GUI. Show the watch-only balance at normal balance column if a wallet is in that mode.\r\n\r\n![image](https://user-images.githubusercontent.com/11154118/45662527-dfaab400-bb34-11e8-98c8-c06ac5c0b08a.png)\r\n",
          "user": {
            "login": "ken2812221",
            "id": 11154118,
            "node_id": "MDQ6VXNlcjExMTU0MTE4",
            "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ken2812221",
            "html_url": "https://github.com/ken2812221",
            "followers_url": "https://api.github.com/users/ken2812221/followers",
            "following_url": "https://api.github.com/users/ken2812221/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/ken2812221/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/ken2812221/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
            "organizations_url": "https://api.github.com/users/ken2812221/orgs",
            "repos_url": "https://api.github.com/users/ken2812221/repos",
            "events_url": "https://api.github.com/users/ken2812221/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/ken2812221/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135946,
              "node_id": "MDU6TGFiZWwxMzU5NDY=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/GUI",
              "name": "GUI",
              "color": "02d7e1",
              "default": false
            },
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 13,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13966",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/13966",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/13966.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/13966.patch"
          },
          "closed_at": "2018-12-01T11:25:26Z",
          "created_at": "2018-08-14T13:37:28Z",
          "updated_at": "2021-12-16T14:51:30Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2128699274,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjEyODY5OTI3NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2128699274",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-02-09T11:41:57Z"
    },
    {
      "event": "unlabeled",
      "id": 2128717487,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MjEyODcxNzQ4Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2128717487",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-02-09T12:37:24Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-02-10T15:34:06Z",
      "updated_at": "2019-02-10T15:34:06Z",
      "source": {
        "issue": {
          "id": 408506305,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MjUxNzIwNjE2",
          "url": "https://api.github.com/repos/bitcoin-core/HWI/issues/121",
          "repository_url": "https://api.github.com/repos/bitcoin-core/HWI",
          "labels_url": "https://api.github.com/repos/bitcoin-core/HWI/issues/121/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin-core/HWI/issues/121/comments",
          "events_url": "https://api.github.com/repos/bitcoin-core/HWI/issues/121/events",
          "html_url": "https://github.com/bitcoin-core/HWI/pull/121",
          "number": 121,
          "state": "closed",
          "state_reason": null,
          "title": "Tools for deterministic builds of standalone binaries and distribution archives",
          "body": "This PR adds several scripts and tools for making standalone binaries of the `hwi.py` script and for creating distribution archives that will go on pypi.org.\r\n\r\nTo achieve deterministic builds, the dependencies used must be locked to specific versions and hashes. To do this, I have added configuration files for using the [Poetry dependency manager](https://github.com/sdispater/poetry). Because Poetry uses a `pyproject.toml` file instead of `setup.py`, I have created a helper script which will automatically generate the proper `setup.py` file from `pyproject.toml`. The reason I chose Poetry instead of Pipenv for this task is because it has the ability to do deterministic builds of the distribution archives (python wheel and source tar for pypi.org) which Pipenv does not have.\r\n\r\nAdditionally scripts have been added to the newly created `contrib/` folder which will perform the deterministic builds of the binaries and distribution archives. The builds of the binaries are done using [pyinstaller](http://www.pyinstaller.org/). In order to build for different platforms, the `contrib/build_bin.sh` script needs to be run on each of the platforms we wish to release for. It can also be run in wine to do windows builds (see `contrib/build_wine.sh`). The configuration file that pyinstaller needs has also been added.\r\n\r\nLastly the pyenv version for this project has been bumped to 3.6.8 since using python 3.5.x produced standalone binaries that did not work.\r\n\r\nThis PR is built on #120 as reducing the number of dependencies fixed several issues with the standalone binary builds.",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "MEMBER",
          "milestone": {
            "url": "https://api.github.com/repos/bitcoin-core/HWI/milestones/1",
            "html_url": "https://github.com/bitcoin-core/HWI/milestone/1",
            "labels_url": "https://api.github.com/repos/bitcoin-core/HWI/milestones/1/labels",
            "id": 4058307,
            "node_id": "MDk6TWlsZXN0b25lNDA1ODMwNw==",
            "number": 1,
            "state": "closed",
            "title": "1.0",
            "description": "",
            "creator": {
              "login": "achow101",
              "id": 3782274,
              "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
              "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/achow101",
              "html_url": "https://github.com/achow101",
              "followers_url": "https://api.github.com/users/achow101/followers",
              "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
              "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
              "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
              "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
              "organizations_url": "https://api.github.com/users/achow101/orgs",
              "repos_url": "https://api.github.com/users/achow101/repos",
              "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
              "received_events_url": "https://api.github.com/users/achow101/received_events",
              "type": "User",
              "site_admin": false
            },
            "open_issues": 0,
            "closed_issues": 12,
            "created_at": "2019-02-14T22:12:39Z",
            "updated_at": "2019-04-19T20:20:15Z",
            "closed_at": "2019-04-19T20:20:15Z"
          },
          "locked": false,
          "comments": 17,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin-core/HWI/pulls/121",
            "html_url": "https://github.com/bitcoin-core/HWI/pull/121",
            "diff_url": "https://github.com/bitcoin-core/HWI/pull/121.diff",
            "patch_url": "https://github.com/bitcoin-core/HWI/pull/121.patch"
          },
          "closed_at": "2019-03-08T20:04:28Z",
          "created_at": "2019-02-10T06:31:34Z",
          "updated_at": "2019-03-08T20:04:29Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2129350956,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjEyOTM1MDk1Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2129350956",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-02-10T18:49:16Z"
    },
    {
      "event": "mentioned",
      "id": 2129370101,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjEyOTM3MDEwMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2129370101",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-02-10T19:33:28Z"
    },
    {
      "event": "subscribed",
      "id": 2129370102,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDIxMjkzNzAxMDI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2129370102",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-02-10T19:33:28Z"
    },
    {
      "event": "labeled",
      "id": 2129370156,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDIxMjkzNzAxNTY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2129370156",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-02-10T19:33:36Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-02-11T15:09:31Z",
      "updated_at": "2019-02-11T15:09:31Z",
      "source": {
        "issue": {
          "id": 408826356,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MjUxOTQ4MjYz",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15382",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15382/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15382/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15382/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/15382",
          "number": 15382,
          "state": "closed",
          "state_reason": null,
          "title": "util: add RunCommandParseJSON",
          "body": "Prerequisite for external signer support in #16546. Big picture overview in [this gist](https://gist.github.com/Sjors/29d06728c685e6182828c1ce9b74483d).\r\n\r\nThis adds a new dependency [boost process](https://github.com/boostorg/process/tree/boost-1.64.0). This is part of Boost since 1.64 which is part of `depends`. Because the minimum Boost version is 1.47, this functionality is skipped for older versions of Boost.\r\n\r\nUse `./configure --with-boost-process` to opt in, which checks for the presence of Boost::Process.\r\n\r\nWe add `UniValue runCommandParseJSON(const std::string& strCommand)` to `system.{h,cpp}` which calls an arbitrary command and processes the JSON returned by it. This is currently only called by the test suite.\r\n\r\n~For testing purposes this adds a new regtest-only RPC method `runcommand`, as well as `test/mocks/command.py` used by functional tests.~ (this is no longer the case)\r\n\r\nTODO:\r\n- [ ] review boost process in #15440",
          "user": {
            "login": "Sjors",
            "id": 10217,
            "node_id": "MDQ6VXNlcjEwMjE3",
            "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Sjors",
            "html_url": "https://github.com/Sjors",
            "followers_url": "https://api.github.com/users/Sjors/followers",
            "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
            "organizations_url": "https://api.github.com/users/Sjors/orgs",
            "repos_url": "https://api.github.com/users/Sjors/repos",
            "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/Sjors/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 98279177,
              "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
              "name": "RPC/REST/ZMQ",
              "color": "0052cc",
              "default": false
            },
            {
              "id": 241832923,
              "node_id": "MDU6TGFiZWwyNDE4MzI5MjM=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Utils/log/libs",
              "name": "Utils/log/libs",
              "description": "",
              "color": "5319e7",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 72,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15382",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/15382",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/15382.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/15382.patch"
          },
          "closed_at": "2020-08-05T11:45:53Z",
          "created_at": "2019-02-11T15:09:31Z",
          "updated_at": "2022-08-18T19:56:48Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 463458567,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MzQ1ODU2Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/463458567",
      "actor": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-02-14T02:17:36Z",
      "updated_at": "2019-02-14T02:17:36Z",
      "author_association": "CONTRIBUTOR",
      "body": "Conceptually, I think we should initially create the option to allow a wallet to contain a main descriptor (main xpub). The scripts may be derived in-mem only during wallet load. If a form of \"getnewaddress\" (receive address) (child-pub-key-derviation) is supported, the wallet may want to remain the used child key indexes for the metadata storage rather than the pubkeyhash.",
      "user": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14912#issuecomment-463458567",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14912"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-02-14T20:05:09Z",
      "updated_at": "2019-02-14T20:05:09Z",
      "source": {
        "issue": {
          "id": 396282366,
          "node_id": "MDU6SXNzdWUzOTYyODIzNjY=",
          "url": "https://api.github.com/repos/bitcoin-core/HWI/issues/91",
          "repository_url": "https://api.github.com/repos/bitcoin-core/HWI",
          "labels_url": "https://api.github.com/repos/bitcoin-core/HWI/issues/91/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin-core/HWI/issues/91/comments",
          "events_url": "https://api.github.com/repos/bitcoin-core/HWI/issues/91/events",
          "html_url": "https://github.com/bitcoin-core/HWI/issues/91",
          "number": 91,
          "state": "closed",
          "state_reason": "completed",
          "title": "TODO for 1.0 release",
          "body": "At some point I would like to start doing proper versioning of HWI and release it as both a library and executable script on PyPi. The following need to be done before I feel comfortable doing this:\r\n\r\n- [x] Separate `process_commands` from `commands.py` and have the functions in `commands.py` take actual arguments\r\n- [x] Handle all possible errors so that no backtraces are printed\r\n- [x] Remove any interactiivty and command line prompts (except for `--debug`). The only thing that should be output is the result. (This may not be possible for Trezor and Keepkey, see #83)\r\n- [x] Have all devices have implementations for all commands. No `NotImplementedError`s\r\n- [x] Tests for all commands, especially transaction signing (incl. multisig)\r\n- [x] Manual test for ledger\r\n- [x] ~~Manual~~ Automated test for bitbox\r\n- [x] Automated test for keepkey\r\n- [x] Move to bitcoin-core org\r\n- [x] Deterministic binary and archive builds\r\n- [x] `--version` option\r\n- [x] Whatever else is listed in the 1.0 milestone",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "MEMBER",
          "milestone": {
            "url": "https://api.github.com/repos/bitcoin-core/HWI/milestones/1",
            "html_url": "https://github.com/bitcoin-core/HWI/milestone/1",
            "labels_url": "https://api.github.com/repos/bitcoin-core/HWI/milestones/1/labels",
            "id": 4058307,
            "node_id": "MDk6TWlsZXN0b25lNDA1ODMwNw==",
            "number": 1,
            "state": "closed",
            "title": "1.0",
            "description": "",
            "creator": {
              "login": "achow101",
              "id": 3782274,
              "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
              "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/achow101",
              "html_url": "https://github.com/achow101",
              "followers_url": "https://api.github.com/users/achow101/followers",
              "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
              "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
              "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
              "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
              "organizations_url": "https://api.github.com/users/achow101/orgs",
              "repos_url": "https://api.github.com/users/achow101/repos",
              "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
              "received_events_url": "https://api.github.com/users/achow101/received_events",
              "type": "User",
              "site_admin": false
            },
            "open_issues": 0,
            "closed_issues": 12,
            "created_at": "2019-02-14T22:12:39Z",
            "updated_at": "2019-04-19T20:20:15Z",
            "closed_at": "2019-04-19T20:20:15Z"
          },
          "locked": false,
          "comments": 8,
          "closed_at": "2019-03-19T15:14:58Z",
          "created_at": "2019-01-06T18:32:58Z",
          "updated_at": "2019-03-19T15:14:58Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 463851398,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQ2Mzg1MTM5OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/463851398",
      "actor": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-02-14T23:56:28Z",
      "updated_at": "2019-02-14T23:56:28Z",
      "author_association": "CONTRIBUTOR",
      "body": "Time for a big rebase 🎉 ",
      "user": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14912#issuecomment-463851398",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14912"
    },
    {
      "event": "unsubscribed",
      "id": 2141745396,
      "node_id": "MDE3OlVuc3Vic2NyaWJlZEV2ZW50MjE0MTc0NTM5Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2141745396",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-02-15T07:45:52Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-02-15T10:01:48Z",
      "updated_at": "2019-02-15T10:01:48Z",
      "source": {
        "issue": {
          "id": 410690311,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MjUzMzcwNDE5",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15414",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15414/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15414/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15414/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/15414",
          "number": 15414,
          "state": "closed",
          "state_reason": null,
          "title": "[wallet] allow adding pubkeys from imported private keys to keypool",
          "body": "#14075 added a `keypool` param to `importmulti` which imports public keys into the keypool, but this was restricted to watch-only wallets (wallets created with `disable_private_keys`).\r\n\r\nThis PR relaxes that constraint to also allow private keys.\r\n\r\nThis is a step towards #14449, being able to import any BIP44/49/84 compatible external wallet. Once imported it's not safe to go back though, because the `getnewaddress` command is unaware of the intended address type. For that to really work we either need descriptor based wallets, or import could descriptors as metadata to individual keys in the wallet and make the wallet enforce those when generating a new (change) address.\r\n\r\nThis also enables me to write a test in #14912 which creates an unsigned PSBT in a wallet without private keys and then signs it in a wallet with those private keys (which simulates an external hardware wallet). There are probably other ways I can build that test though. ",
          "user": {
            "login": "Sjors",
            "id": 10217,
            "node_id": "MDQ6VXNlcjEwMjE3",
            "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Sjors",
            "html_url": "https://github.com/Sjors",
            "followers_url": "https://api.github.com/users/Sjors/followers",
            "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
            "organizations_url": "https://api.github.com/users/Sjors/orgs",
            "repos_url": "https://api.github.com/users/Sjors/repos",
            "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/Sjors/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 8,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15414",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/15414",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/15414.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/15414.patch"
          },
          "closed_at": "2019-08-02T18:36:33Z",
          "created_at": "2019-02-15T10:01:48Z",
          "updated_at": "2021-12-16T14:04:31Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2142111166,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjE0MjExMTE2Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2142111166",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-02-15T10:35:25Z"
    },
    {
      "event": "unlabeled",
      "id": 2142223726,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MjE0MjIyMzcyNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2142223726",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-02-15T11:26:50Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2142281090,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjE0MjI4MTA5MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2142281090",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-02-15T11:55:11Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-02-15T12:03:13Z",
      "updated_at": "2019-02-15T12:03:13Z",
      "source": {
        "issue": {
          "id": 410737701,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MjUzNDA0OTQ0",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15415",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15415/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15415/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15415/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/15415",
          "number": 15415,
          "state": "closed",
          "state_reason": null,
          "title": "[test] functional: allow custom cwd, use tmpdir as default",
          "body": "Any process launched by bitcoind will have `self.datadir` as its `cwd`.",
          "user": {
            "login": "Sjors",
            "id": 10217,
            "node_id": "MDQ6VXNlcjEwMjE3",
            "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Sjors",
            "html_url": "https://github.com/Sjors",
            "followers_url": "https://api.github.com/users/Sjors/followers",
            "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
            "organizations_url": "https://api.github.com/users/Sjors/orgs",
            "repos_url": "https://api.github.com/users/Sjors/repos",
            "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/Sjors/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 62963516,
              "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
              "name": "Tests",
              "color": "d4c5f9",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "milestone": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/35",
            "html_url": "https://github.com/bitcoin/bitcoin/milestone/35",
            "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/35/labels",
            "id": 3318051,
            "node_id": "MDk6TWlsZXN0b25lMzMxODA1MQ==",
            "number": 35,
            "state": "closed",
            "title": "0.18.0",
            "description": "",
            "creator": {
              "login": "MarcoFalke",
              "id": 6399679,
              "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
              "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/MarcoFalke",
              "html_url": "https://github.com/MarcoFalke",
              "followers_url": "https://api.github.com/users/MarcoFalke/followers",
              "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
              "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
              "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
              "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
              "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
              "repos_url": "https://api.github.com/users/MarcoFalke/repos",
              "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
              "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
              "type": "User",
              "site_admin": false
            },
            "open_issues": 0,
            "closed_issues": 186,
            "created_at": "2018-05-03T15:34:54Z",
            "updated_at": "2020-03-17T18:30:07Z",
            "closed_at": "2019-05-03T02:51:38Z"
          },
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 17,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15415",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/15415",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/15415.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/15415.patch"
          },
          "closed_at": "2019-02-19T15:14:17Z",
          "created_at": "2019-02-15T12:00:08Z",
          "updated_at": "2021-12-16T13:54:59Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 464026454,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQ2NDAyNjQ1NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/464026454",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-02-15T12:12:12Z",
      "updated_at": "2019-02-15T12:12:12Z",
      "author_association": "MEMBER",
      "body": "Giant rebase done! I created separate pull request for a number of commits in order to keep discussion a bit focussed here. Please check the list at the bottom of the PR description before commenting.\r\n\r\nThere's still two significant todo's (plus cleanup) before this is really read for review, but more high level feedback is always welcome:\r\n\r\n1. A way to construct descriptors from code, to get rid of the string concatenation mess in `signerfetchkeys` (separate PR)\r\n2. Have the device sign one or more messages using the keys after importing with `signerfetchkeys`",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14912#issuecomment-464026454",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14912"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2142655764,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjE0MjY1NTc2NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2142655764",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-02-15T14:43:55Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2142926380,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjE0MjkyNjM4MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2142926380",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-02-15T16:23:02Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2143044517,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjE0MzA0NDUxNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2143044517",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-02-15T17:08:32Z"
    },
    {
      "event": "labeled",
      "id": 2144380487,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDIxNDQzODA0ODc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2144380487",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-02-16T21:38:31Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-02-26T21:33:52Z",
      "updated_at": "2019-02-26T21:33:52Z",
      "source": {
        "issue": {
          "id": 414829890,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MjU2NDU0NTEz",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15487",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15487/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15487/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15487/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/15487",
          "number": 15487,
          "state": "closed",
          "state_reason": null,
          "title": "[WIP] descriptor based wallet serialization and import",
          "body": "Introduces a non-backwards compatible wallet type which contains a set of output descriptors.\r\n\r\nA new RPC method `importdescriptor` works like `importmulti` but for one descriptor at a time and with fewer options.\r\n\r\nEach wallet descriptor has a `purpose`: current receive, current change,  archive (receive & change)\r\n\r\nThe current receive and change purposes can have one descriptor with address type bech32 and one with address type base58. It builds on top of #15590 for that.\r\n\r\n`getnewaddress` finds correct receive descriptor based on address type, which must be either `bech32` or `legacy` (base58).\r\n\r\nUsage:\r\n```sh\r\nbitcoin-cli createwallet true true true\r\nbitcoin-cli importdescriptor \"wpkh([00000000/84h/1h/0h]tpub.../1/*)#....\"\r\nbitcoin-cli importdescriptor \"wpkh([00000000/84h/1h/0h]tpub.../1/*)#...\" '{\"internal\": true}, \"timestamp\": \"now\"}' \r\nbitcoin-cli getnewaddress \"SegWit\"\r\nbitcoin-cli importdescriptor \"sh(wpkh([00000000/49h/1h/0h]tpub.../1/*))#....\"\r\nbitcoin-cli getnewaddress \"Pre SegWit\" legacy\r\nbitcoin-cli dumpwallet \"dump\" # only way to see the descriptors at the moment\r\n```\r\n\r\nThis initial version will have several limitations (ignoring the TODO list below). It paves the way towards usage with hardware wallets in #14912.\r\n\r\n* only available through `createwallet` followed by `importdescriptor`\r\n* no upgrade path yet\r\n* no private keys allowed\r\n* doesn't serialise descriptor cache\r\n\r\nTODO:\r\n- [ ] fix methods that deal with labels\r\n- [ ] fix signmessage\r\n- [ ] fix getrawchangeaddress\r\n- [ ] improve getwalletinfo\r\n- [ ] decide on descriptor serialization (currently stores a string)\r\n\r\nFor followup PR:\r\n* (re)scan wallet transactions matching descriptor\r\n* transaction creation (e.g. get change address from change descriptor)\r\n* private key support\r\n* multisig support",
          "user": {
            "login": "Sjors",
            "id": 10217,
            "node_id": "MDQ6VXNlcjEwMjE3",
            "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Sjors",
            "html_url": "https://github.com/Sjors",
            "followers_url": "https://api.github.com/users/Sjors/followers",
            "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
            "organizations_url": "https://api.github.com/users/Sjors/orgs",
            "repos_url": "https://api.github.com/users/Sjors/repos",
            "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/Sjors/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 10,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15487",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/15487",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/15487.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/15487.patch"
          },
          "closed_at": "2019-06-06T09:30:08Z",
          "created_at": "2019-02-26T21:33:52Z",
          "updated_at": "2021-12-16T14:54:22Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2190201491,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjE5MDIwMTQ5MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2190201491",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-03-08T14:20:02Z"
    },
    {
      "event": "unsubscribed",
      "id": 2190206148,
      "node_id": "MDE3OlVuc3Vic2NyaWJlZEV2ZW50MjE5MDIwNjE0OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2190206148",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-03-08T14:21:53Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2190218554,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjE5MDIxODU1NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2190218554",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-03-08T14:27:02Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2190222355,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjE5MDIyMjM1NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2190222355",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-03-08T14:28:34Z"
    },
    {
      "event": "commented",
      "id": 470947271,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MDk0NzI3MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/470947271",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-03-08T14:30:11Z",
      "updated_at": "2019-03-08T14:30:11Z",
      "author_association": "MEMBER",
      "body": "Rebased! I changed `signerfetchkeys` to call `hwi.py getdescriptors` (https://github.com/bitcoin-core/HWI/pull/137).",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14912#issuecomment-470947271",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14912"
    },
    {
      "event": "unlabeled",
      "id": 2190232749,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MjE5MDIzMjc0OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2190232749",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-03-08T14:32:37Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-03-08T17:41:42Z",
      "updated_at": "2019-03-08T17:41:42Z",
      "source": {
        "issue": {
          "id": 418445946,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MjU5MjE3MzQ1",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15557",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15557/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15557/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15557/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/15557",
          "number": 15557,
          "state": "closed",
          "state_reason": null,
          "title": "Enhance `bumpfee` to include inputs when targeting a feerate",
          "body": "When targeting a feerate using `bumpfee`, call a new function that directly uses `CWallet::CreateTransaction` and coin control to get the desired result. This allows us to get a superset of previous behavior, with an arbitrary RBF bump of a transaction provided it passes the preconditional checks and spare confirmed utxos are available.\r\n\r\nNote(s):\r\n0) The coin selection will use knapsack solver for the residual selection.\r\n1) This functionality, just like knapsack coin selection in general, will hoover up negative-value inputs when given the chance.\r\n2) Newly added inputs must be confirmed due to current Core policy. See error: `replacement-adds-unconfirmed`\r\n3) Supporting this with `totalFee` is difficult since the \"minimum total fee\" option in `CreateTransaction` logic was (rightly)taken out in #10390 .",
          "user": {
            "login": "instagibbs",
            "id": 5767891,
            "node_id": "MDQ6VXNlcjU3Njc4OTE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/instagibbs",
            "html_url": "https://github.com/instagibbs",
            "followers_url": "https://api.github.com/users/instagibbs/followers",
            "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
            "organizations_url": "https://api.github.com/users/instagibbs/orgs",
            "repos_url": "https://api.github.com/users/instagibbs/repos",
            "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/instagibbs/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 82428251,
              "node_id": "MDU6TGFiZWw4MjQyODI1MQ==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/TX%20fees%20and%20policy",
              "name": "TX fees and policy",
              "color": "5319e7",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 28,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15557",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/15557",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/15557.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/15557.patch"
          },
          "closed_at": "2019-04-14T20:43:23Z",
          "created_at": "2019-03-07T18:12:12Z",
          "updated_at": "2022-02-15T10:47:28Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-03-09T11:47:45Z",
      "updated_at": "2019-03-09T11:47:45Z",
      "source": {
        "issue": {
          "id": 419063375,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MjU5Njg0MDgw",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15567",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15567/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15567/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15567/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/15567",
          "number": 15567,
          "state": "closed",
          "state_reason": null,
          "title": "Make OutputType consistent with Descriptor and return it",
          "body": "This PR renames `OutputType::LEGACY` to `OutputType::PKH`, `OutputType::P2SH_SEGWIT` to `OutputType::P2SH_WPKH` and `OutputType::BECH32` to `OutputType::WPKH` in order to be consistent with the terminology used in [Output Descriptors](https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md) and in order to more accurately describe what the current wallet uses.\r\n\r\nIt introduces two new OutputTypes `P2SH`, `P2SH_WSH` and `WSH` to distinguish legacy P2SH from SegWit wrapped P2SH, and to distinguish SegWit Pay-to-Public-Key from Pay-to-Script-Hash.\r\n\r\nFinally it adds `GetAddressType()` to `Descriptor`, which returns the reintroduced (#12729) `OutputType::NONE` for descriptors that we currently can't convert to an address (`pk(...)`, `raw()`, etc), those whose address we don't interpret (`addr()`) and the quirky `combo()`.\r\n\r\nThis allows a future descriptor based wallet (e.g. #15487) to find the correct descriptor for a given `-addresstype` and `-changetype` setting when generating new addresses. Similarly it allows importing the appropriate descriptor from a hardware wallet (e.g. #14912).",
          "user": {
            "login": "Sjors",
            "id": 10217,
            "node_id": "MDQ6VXNlcjEwMjE3",
            "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Sjors",
            "html_url": "https://github.com/Sjors",
            "followers_url": "https://api.github.com/users/Sjors/followers",
            "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
            "organizations_url": "https://api.github.com/users/Sjors/orgs",
            "repos_url": "https://api.github.com/users/Sjors/repos",
            "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/Sjors/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            },
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 8,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15567",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/15567",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/15567.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/15567.patch"
          },
          "closed_at": "2019-03-13T09:39:43Z",
          "created_at": "2019-03-09T11:47:45Z",
          "updated_at": "2021-12-16T14:06:38Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2191879021,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjE5MTg3OTAyMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2191879021",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-03-09T16:25:18Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-03-13T12:19:32Z",
      "updated_at": "2019-03-13T12:19:32Z",
      "source": {
        "issue": {
          "id": 420469656,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MjYwNzQyMjg3",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15590",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15590/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15590/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15590/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/15590",
          "number": 15590,
          "state": "closed",
          "state_reason": null,
          "title": "Descriptor: add GetAddressType() and IsSegWit()",
          "body": "In preparation for descriptor based wallets (e.g. #15487) it's useful to distinguish between base58 and base32 addresses. One descriptor could be associated with `getnewaddress \"\" bech32` and another with `getnewaddress \"\" legacy` (which is interpreted as \"base58\", rather than as non-SegWit).\r\n\r\nThis PR introduces a new enum `AddressType`, along with a parser that returns an Optional. A new method `GetAddressType()` is added to `Descriptor` instances. The only purpose of `AddressType` is compatibility with other wallets, not a way to toggle SegWit.\r\n\r\nReusing `OutputType` would not be ideal for this, because the distinction between `OutputType::LEGACY` (`-addresstype=legacy`) and `OutputType::P2SH_SEGWIT` (`-addresstype=p2sh-segwit`) is irrelevant in descriptor based wallets. Instead, if someone does not wish to use SegWit, they can create a wallet with only a non-SegWit descriptor. \r\n\r\nThis is also useful for importing keys from a hardware wallet. In the current WIP #14912 there is a method `signerfetchkeys` which asks the device (driver) to return a set of descriptors. This returns e.g. three descriptors: one for BIP44 (legacy), one for BIP49 (p2sh-segwit) and one for BIP84 (native segwit). It can then associate the BIP84 descriptor with `getnewaddress \"\" bech32`.\r\n\r\nIt can then use either the BIP44 or BIP49 descriptor with  `getnewaddress \"\" legacy`. To distinguish those, this PR adds `IsSegWit()` to Descriptor instances.\r\n\r\nThe `boost/optional/optional_io.hpp` IO include allows for a more compact notation in the tests: `BOOST_CHECK_EQUAL(ParseAddressType(\"bech32\"), AddressType::BECH32)`.",
          "user": {
            "login": "Sjors",
            "id": 10217,
            "node_id": "MDQ6VXNlcjEwMjE3",
            "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Sjors",
            "html_url": "https://github.com/Sjors",
            "followers_url": "https://api.github.com/users/Sjors/followers",
            "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
            "organizations_url": "https://api.github.com/users/Sjors/orgs",
            "repos_url": "https://api.github.com/users/Sjors/repos",
            "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/Sjors/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            },
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 12,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15590",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/15590",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/15590.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/15590.patch"
          },
          "closed_at": "2020-02-10T13:25:21Z",
          "created_at": "2019-03-13T12:19:32Z",
          "updated_at": "2022-02-15T10:26:58Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2206407237,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjIwNjQwNzIzNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2206407237",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-03-15T13:13:24Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-03-15T13:13:32Z",
      "updated_at": "2019-03-15T13:13:32Z",
      "source": {
        "issue": {
          "id": 410610719,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MjUzMzExOTc0",
          "url": "https://api.github.com/repos/bitcoin-core/HWI/issues/126",
          "repository_url": "https://api.github.com/repos/bitcoin-core/HWI",
          "labels_url": "https://api.github.com/repos/bitcoin-core/HWI/issues/126/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin-core/HWI/issues/126/comments",
          "events_url": "https://api.github.com/repos/bitcoin-core/HWI/issues/126/events",
          "html_url": "https://github.com/bitcoin-core/HWI/pull/126",
          "number": 126,
          "state": "closed",
          "state_reason": null,
          "title": "Add option to enter commands over stdin",
          "body": "This PR adds a `--stdin` option which allows arguments to be entered over stdin in a way similar to bitcoin-cli's `--stdin` option.\r\n\r\nBuilt on #125 and to test the `stdin` interface",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "MEMBER",
          "milestone": {
            "url": "https://api.github.com/repos/bitcoin-core/HWI/milestones/1",
            "html_url": "https://github.com/bitcoin-core/HWI/milestone/1",
            "labels_url": "https://api.github.com/repos/bitcoin-core/HWI/milestones/1/labels",
            "id": 4058307,
            "node_id": "MDk6TWlsZXN0b25lNDA1ODMwNw==",
            "number": 1,
            "state": "closed",
            "title": "1.0",
            "description": "",
            "creator": {
              "login": "achow101",
              "id": 3782274,
              "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
              "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/achow101",
              "html_url": "https://github.com/achow101",
              "followers_url": "https://api.github.com/users/achow101/followers",
              "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
              "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
              "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
              "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
              "organizations_url": "https://api.github.com/users/achow101/orgs",
              "repos_url": "https://api.github.com/users/achow101/repos",
              "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
              "received_events_url": "https://api.github.com/users/achow101/received_events",
              "type": "User",
              "site_admin": false
            },
            "open_issues": 0,
            "closed_issues": 12,
            "created_at": "2019-02-14T22:12:39Z",
            "updated_at": "2019-04-19T20:20:15Z",
            "closed_at": "2019-04-19T20:20:15Z"
          },
          "locked": false,
          "comments": 14,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin-core/HWI/pulls/126",
            "html_url": "https://github.com/bitcoin-core/HWI/pull/126",
            "diff_url": "https://github.com/bitcoin-core/HWI/pull/126.diff",
            "patch_url": "https://github.com/bitcoin-core/HWI/pull/126.patch"
          },
          "closed_at": "2019-03-14T19:00:40Z",
          "created_at": "2019-02-15T05:25:09Z",
          "updated_at": "2019-03-15T13:31:03Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2206588257,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjIwNjU4ODI1Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2206588257",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-03-15T14:18:15Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2206665650,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjIwNjY2NTY1MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2206665650",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-03-15T14:43:19Z"
    },
    {
      "event": "labeled",
      "id": 2219025175,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDIyMTkwMjUxNzU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2219025175",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-03-21T08:26:31Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2277079252,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjI3NzA3OTI1Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2277079252",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-04-15T15:50:45Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2277385954,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjI3NzM4NTk1NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2277385954",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-04-15T17:46:16Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2277495939,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjI3NzQ5NTkzOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2277495939",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-04-15T18:31:32Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2279424546,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjI3OTQyNDU0Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2279424546",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-04-16T11:56:35Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2280064470,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjI4MDA2NDQ3MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2280064470",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-04-16T15:23:24Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2280370038,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjI4MDM3MDAzOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2280370038",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-04-16T17:07:47Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-04-17T16:48:45Z",
      "updated_at": "2019-04-17T16:48:45Z",
      "source": {
        "issue": {
          "id": 427473453,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MjY2MDYzNjYy",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15713",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15713/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15713/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15713/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/15713",
          "number": 15713,
          "state": "closed",
          "state_reason": null,
          "title": "refactor: Replace chain relayTransactions/submitMemoryPool by higher method",
          "body": "Remove CWalletTx::AcceptToMemoryPool\r\n\r\nReplace CWalletTx::RelayWalletTransaction by SubmitMemoryPoolAndRelay\r\n\r\n\r\nAdd a relay flag to broadcastTransaction because wasn't sure of ReacceptWalletTransactions semantic.\r\n\r\nObviously, working on implementing https://github.com/bitcoin/bitcoin/pull/14978#issuecomment-459373984 to add the new higher-method in Node interface, will add a commit, just need more thought to do it cleanly\r\n",
          "user": {
            "login": "ariard",
            "id": 23310655,
            "node_id": "MDQ6VXNlcjIzMzEwNjU1",
            "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ariard",
            "html_url": "https://github.com/ariard",
            "followers_url": "https://api.github.com/users/ariard/followers",
            "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
            "organizations_url": "https://api.github.com/users/ariard/orgs",
            "repos_url": "https://api.github.com/users/ariard/repos",
            "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/ariard/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            },
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 38,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15713",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/15713",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/15713.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/15713.patch"
          },
          "closed_at": "2019-08-02T13:14:56Z",
          "created_at": "2019-04-01T01:22:20Z",
          "updated_at": "2021-12-16T14:57:29Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-04-23T13:23:20Z",
      "updated_at": "2019-04-23T13:23:20Z",
      "source": {
        "issue": {
          "id": 436185527,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MjcyNzI5MzU3",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15876",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15876/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15876/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15876/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/15876",
          "number": 15876,
          "state": "closed",
          "state_reason": null,
          "title": "[rpc] signer send and fee bump convenience methods",
          "body": "This PR adds two convenience methods on top of #14912.\r\n\r\n* `signersend`: a convenience method that Just Works(tm) by combining the functionality of `walletcreatefundedpsbt`, `signerprocesspsbt`, `finalizepsbt` and `sendrawtransaction`\r\n\r\n* `signerbumpfee`: combines `signersend` with `bumpfee` \r\n\r\nUsage:\r\n\r\n```sh\r\nbitcoin-cli signersend '[]' '[{\"...\": 0.001}]' 0 '{\"feeRate\": 0.00001, \"replaceable\": true}'\r\n{\r\n  \"txid\": \"abcd...\"\r\n  \"fee\": \"0.00000141\"\r\n}\r\n\r\nbitcoin-cli signerbumpfee abcd..  '{\"feeRate\": 0.00002}'\r\n{\r\n  \"txid\": \"efga...\"\r\n  \"fee\": \"0.00000282\",\r\n  \"origFee\": \"0.00000141\"\r\n}\r\n```\r\n\r\n`signerbumpfee` is a bit of a hack. In particular it breaks regular fee bump functionality for some wallets because I replaced `ISMINE_SPENDABLE` with `ISMINE_ALL`. I'd also like to make the code more reusable, but this can wait until the upstream PR is closer to merge.",
          "user": {
            "login": "Sjors",
            "id": 10217,
            "node_id": "MDQ6VXNlcjEwMjE3",
            "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Sjors",
            "html_url": "https://github.com/Sjors",
            "followers_url": "https://api.github.com/users/Sjors/followers",
            "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
            "organizations_url": "https://api.github.com/users/Sjors/orgs",
            "repos_url": "https://api.github.com/users/Sjors/repos",
            "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/Sjors/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 98279177,
              "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
              "name": "RPC/REST/ZMQ",
              "color": "0052cc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 3,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15876",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/15876",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/15876.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/15876.patch"
          },
          "closed_at": "2019-08-04T21:44:23Z",
          "created_at": "2019-04-23T13:23:20Z",
          "updated_at": "2021-12-16T14:00:41Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2297969910,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjI5Nzk2OTkxMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2297969910",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-04-24T17:41:29Z"
    },
    {
      "event": "unlabeled",
      "id": 2298064900,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MjI5ODA2NDkwMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2298064900",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-04-24T18:10:37Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2299549003,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjI5OTU0OTAwMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2299549003",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-04-25T08:55:50Z"
    },
    {
      "event": "labeled",
      "id": 2302928244,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDIzMDI5MjgyNDQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2302928244",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-04-26T12:18:23Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2304855327,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjMwNDg1NTMyNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2304855327",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-04-27T18:00:08Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2304870793,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjMwNDg3MDc5Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2304870793",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-04-27T18:38:11Z"
    },
    {
      "event": "commented",
      "id": 487773426,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQ4Nzc3MzQyNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/487773426",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-04-29T23:03:04Z",
      "updated_at": "2019-04-29T23:03:04Z",
      "author_association": "MEMBER",
      "body": "#15713 adds a `broadcastTransaction()` chain interface method which is required here, so would remove one of the commits from this PR.",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14912#issuecomment-487773426",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14912"
    },
    {
      "event": "commented",
      "id": 488217804,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQ4ODIxNzgwNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/488217804",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-05-01T06:10:19Z",
      "updated_at": "2019-05-01T06:10:19Z",
      "author_association": "MEMBER",
      "body": "I don't understand why users would apparently need to use new RPCs to achieve the same things they can already do?",
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14912#issuecomment-488217804",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14912"
    },
    {
      "event": "commented",
      "id": 489075526,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQ4OTA3NTUyNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/489075526",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-05-03T12:15:32Z",
      "updated_at": "2019-05-03T12:23:34Z",
      "author_association": "MEMBER",
      "body": "@luke-jr that's true for `enumerate` which does exactly the same as `hwi.py enumerate`. But fetching keys, sending transactions and (as a followup) doing RBF is very tedious without these RPC methods. The same goes for generating a new receive address in the wallet and displaying it on the device.\r\n\r\nThe longer term goal is to get this functionality in the GUI, so I also see the RPC as a foundation for that (combined with making RPC code more reusable in general). It's also much easier to write RPC tests than GUI tests.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14912#issuecomment-489075526",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14912"
    },
    {
      "event": "mentioned",
      "id": 2317204444,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjMxNzIwNDQ0NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2317204444",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-05-03T12:15:33Z"
    },
    {
      "event": "subscribed",
      "id": 2317204445,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDIzMTcyMDQ0NDU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2317204445",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-05-03T12:15:33Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2335281235,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjMzNTI4MTIzNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2335281235",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-05-12T14:26:11Z"
    },
    {
      "event": "unlabeled",
      "id": 2336361445,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MjMzNjM2MTQ0NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2336361445",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-05-13T09:42:26Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2341080554,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjM0MTA4MDU1NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2341080554",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-05-14T18:41:29Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2341097828,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjM0MTA5NzgyOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2341097828",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-05-14T18:48:00Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2341111108,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjM0MTExMTEwOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2341111108",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-05-14T18:52:58Z"
    },
    {
      "event": "commented",
      "id": 492365485,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQ5MjM2NTQ4NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/492365485",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-05-14T18:57:15Z",
      "updated_at": "2019-05-14T18:57:25Z",
      "author_association": "MEMBER",
      "body": "I cleaned up `signerfetchkeys` a bit. It now takes advantage of (still to be discussed) #15590 `Descriptor->IsSegWit()` and `Descriptor->GetAddressType()` to pick the right descriptor for the given `-addresstype` and `-changetype`.\r\n\r\nThe RPC documentation warns the user not switch address types for the wallet (due to BIP44/49/84 interoperability), though in the long run native descriptor wallets provide better protection, by making keypool topup unnecessary.\r\n\r\nIt can now also topup the keypool, though the user needs to specify the range.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14912#issuecomment-492365485",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14912"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2341231522,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjM0MTIzMTUyMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2341231522",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-05-14T19:40:39Z"
    },
    {
      "event": "commented",
      "id": 495655047,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQ5NTY1NTA0Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/495655047",
      "actor": {
        "login": "jb55",
        "id": 45598,
        "node_id": "MDQ6VXNlcjQ1NTk4",
        "avatar_url": "https://avatars.githubusercontent.com/u/45598?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jb55",
        "html_url": "https://github.com/jb55",
        "followers_url": "https://api.github.com/users/jb55/followers",
        "following_url": "https://api.github.com/users/jb55/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jb55/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jb55/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jb55/subscriptions",
        "organizations_url": "https://api.github.com/users/jb55/orgs",
        "repos_url": "https://api.github.com/users/jb55/repos",
        "events_url": "https://api.github.com/users/jb55/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jb55/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-05-24T14:30:54Z",
      "updated_at": "2019-05-24T14:30:54Z",
      "author_association": "CONTRIBUTOR",
      "body": "Instead of adding more complexity into the core wallet, shouldn't all this logic be handled externally? For example: I was envisioning importing all of your hw wallet keys into core. When you want to spend you would just ask core to give you a partially signed transaction from some of your unspent outputs.\r\n\r\nI guess I'm confused as to why you would need core to call some external signer when PSBTs already support that use case?",
      "user": {
        "login": "jb55",
        "id": 45598,
        "node_id": "MDQ6VXNlcjQ1NTk4",
        "avatar_url": "https://avatars.githubusercontent.com/u/45598?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jb55",
        "html_url": "https://github.com/jb55",
        "followers_url": "https://api.github.com/users/jb55/followers",
        "following_url": "https://api.github.com/users/jb55/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jb55/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jb55/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jb55/subscriptions",
        "organizations_url": "https://api.github.com/users/jb55/orgs",
        "repos_url": "https://api.github.com/users/jb55/repos",
        "events_url": "https://api.github.com/users/jb55/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jb55/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14912#issuecomment-495655047",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14912"
    },
    {
      "event": "labeled",
      "id": 2374127546,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDIzNzQxMjc1NDY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2374127546",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-05-29T07:34:36Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2393783414,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjM5Mzc4MzQxNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2393783414",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-06-06T09:50:06Z"
    },
    {
      "event": "unlabeled",
      "id": 2393806594,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MjM5MzgwNjU5NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2393806594",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-06-06T09:58:27Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 2394731439,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDIzOTQ3MzE0Mzk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2394731439",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-06-06T15:23:21Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2397232885,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjM5NzIzMjg4NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2397232885",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-06-07T13:11:14Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2397263328,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjM5NzI2MzMyOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2397263328",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-06-07T13:22:36Z"
    },
    {
      "event": "commented",
      "id": 499883356,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQ5OTg4MzM1Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/499883356",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-06-07T13:24:43Z",
      "updated_at": "2019-06-07T13:24:43Z",
      "author_association": "MEMBER",
      "body": "Rebased and dropped `signersend` from this PR, moved it to #15876 (which also contains fee bump support).",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14912#issuecomment-499883356",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14912"
    },
    {
      "event": "unlabeled",
      "id": 2397299347,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MjM5NzI5OTM0Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2397299347",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-06-07T13:35:44Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 2425527552,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDI0MjU1Mjc1NTI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2425527552",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-06-19T21:11:55Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2463009078,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjQ2MzAwOTA3OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2463009078",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-05T15:12:43Z"
    },
    {
      "event": "commented",
      "id": 510520757,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUxMDUyMDc1Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/510520757",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-11T14:55:14Z",
      "updated_at": "2019-07-11T15:00:03Z",
      "author_association": "MEMBER",
      "body": "I'm considering rebasing* this on top of #16341 (aka \"box\"), by introducing a `ExternalSignerScriptPubKeyMan`. It can be make a bit safer in the process.\r\n\r\n1. move all of `externalsigner.{h,cpp}` into a `ExternalSignerScriptPubKeyMan`\r\n2. Get rid of `signerfetchkeys` RPC; `createwallet` and `keypoolrefill` cover this\r\n3. `SetupGeneration`: this would call `getdescriptors` on the device at wallet creation time. The BIP32 account number could be passed as on option to `createwallet`. Wallet creation will fail if it can't fetch keys.\r\n4. `TopUp` will also call `getdescriptors` on the device, with a higher range. This will become unecessary with native wallet descriptors. In practice with a keypool size of 1000 this is not a big inconvenience. The current behavior of GetReservedDestination calling `TopUp` needs to go away. \r\n5. add a feature flag that this wallet should use `ExternalSignerScriptPubKeyMan`\r\n6. store the device fingerprint in the wallet metadata at creation time, so `enumeratesigners` is unnecessary after wallet creation\r\n7. allow only a single `OutputType`, store it and refuse `getnewaddress` for different types. This is necessary to remain compatible with BIP44/49/84, which requires a different derivation path per output type. This can be relaxed with native descriptor wallets, see also #15590.\r\n8. The current flow of calling `enumeratesigners` on an existing wallet won't do anymore, because we already need to know the signer at `createwallet` time. Instead `enumeratesigners` could work without a wallet and not store the result anywhere. When creating a wallet it will just use the first available result from `enumeratesigners` unless a fingerprint option is provided.\r\n9. `signerdisplayaddress` remains unchanged\r\n10. `signerprocesspsbt` can be melted into `processpsbt` thanks to the feature flag\r\n\r\n\\* = later though, I'd rather not have a PR with 110 commits",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14912#issuecomment-510520757",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14912"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-11T14:56:24Z",
      "updated_at": "2019-07-11T14:56:24Z",
      "source": {
        "issue": {
          "id": 464441403,
          "node_id": "MDExOlB1bGxSZXF1ZXN0Mjk0NzE4ODM5",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16341",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16341/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16341/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16341/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/16341",
          "number": 16341,
          "state": "closed",
          "state_reason": null,
          "title": "Introduce ScriptPubKeyMan interface and use it for key and script management (aka wallet boxes)",
          "body": "Introducing the `ScriptPubKeyMan` (short for ScriptPubKeyManager) for managing scriptPubKeys and their associated scripts and keys. This functionality is moved over from `CWallet`. Instead, `CWallet` will have a pointer to a `ScriptPubKeyMan` for every possible address type, internal and external. It will fetch the correct `ScriptPubKeyMan` as necessary. When fetching new addresses, it chooses the `ScriptPubKeyMan` based on address type and whether it is change. For signing, it takes the script and asks each `ScriptPubKeyMan` for whether that `ScriptPubKeyMan` considers that script `IsMine`, whether it has that script, or whether it is able to produce a signature for it. If so, the `ScriptPubKeyMan` will provide a `SigningProvider` to the caller which will use that in order to sign.\r\n\r\nThere is currently one `ScriptPubKeyMan` - the `LegacyScriptPubKeyMan`. Each `CWallet` will have only one `LegacyScriptPubKeyMan` with the pointers for all of the address types and change pointing to this `LegacyScriptPubKeyMan`. It is created when the wallet is loaded and all keys and metadata are loaded into it instead of `CWallet`. The `LegacyScriptPubKeyMan` is primarily made up of all of the key and script management that used to be in `CWallet`. For convenience, `CWallet` has a `GetLegacyScriptPubKeyMan` which will return the `LegacyScriptPubKeyMan` or a `nullptr` if it does not have one (not yet implemented, but callers will check for the `nullptr`). For purposes of signing, `LegacyScriptPubKeyMan`'s `GetSigningProvider` will return itself rather than a separate `SigningProvider`. This will be different for future `ScriptPubKeyMan`s.\r\n\r\nThe `LegacyScriptPubKeyMan` will also handle the importing and exporting of keys and scripts instead of `CWallet`. As such, a number of RPCs have been limited to work only if a `LegacyScriptPubKeyMan` can be retrieved from the wallet. These RPCs are `sethdseed`, `addmultisigaddress`, `importaddress`, `importprivkey`, `importpubkey`, `importmulti`, `dumpprivkey`, and `dumpwallet`. Other RPCs which relied on the wallet for scripts and keys have been modified in order to take the `SigningProvider` retrieved from the `ScriptPubKeyMan` for a given script.\r\n\r\nOverall, these changes should not effect how everything actually works and the user should experience no difference between having this change and not having it. As such, no functional tests were changed, and the only unit tests changed were those that were directly accessing `CWallet` functions that have been removed.\r\n\r\nThis PR is the last step in the [Wallet Structure Changes](https://github.com/bitcoin-core/bitcoin-devwiki/wiki/Wallet-Class-Structure-Changes).\r\n\r\nThe commits are organized as follows:\r\n* Miscellaneous changes that don't necessarily make sense outside of this PR\r\n  * Move wallet enums to walletutil.h\r\n  * List output types in an array in order to be iterated over\r\n  * Always try to sign for all pubkeys in multisig\r\n* Interface definitions and miscellaneous changes in preparation for `ScriptPubKeyMan` integration\r\n  * Introduce both ScriptPubKeyMan as an interface and LegacyScriptPubKeyMan as a dummy class\r\n  * Add LegacyScriptPubKeyMan to CWallet\r\n  * Add function callbacks for wallet flags and versions and wallet database\r\n  * Fetch the SigningProvider for a script from the wallet\r\n  * Fetch the ScriptPubKeyMan for given output type and internal-ness, or a given script, or ScriptPubKeyMan id\r\n* Implementation of `LegacyScriptPubKeyMan` by copying existing code from `CWallet`. These will pass all tests and do not affect `CWallet`\r\n  * Implement GetSigningProvider in LegacyScriptPubKeyMan\r\n  * Implement function to connect ScriptPubKeyMan's NotifyCanGetAddessesChanged and NotifyWatchOnlyChanged to CWallet's\r\n  * Implement IsLocked and IsCrypted in LegacyScriptPubKeyMan\r\n  * Implement LoadCryptedKey and AddCryptedKey in LegacyScriptPubKeyMan\r\n  * Implement UpdateTimeFirstKey, and GetTimeFirstKey in LegacyScriptPubKeyMan\r\n  * Implement AddWatchOnly, RemoveWatchOnly, HaveWatchOnly, and LoadWatchOnly in LegacyScriptPubKeyMan\r\n  * Implement AddKeyPubKey and LoadKey in LegacyScriptPubKeyMan\r\n  * Implement WalletLogPrintf in LegacyScriptPubKeyMan\r\n  * Implement SetHDCHain, and IsHDEnabled in LegacyScriptPubKeyMan\r\n  * Implement LoadCScript in LegacyScriptPubKeyMan\r\n  * Implement LoadKeyMetadata and LoadScriptMetadata in LegacyScriptPubKeyMan\r\n  * Implement GetKey, HaveKey, and GetPubKey in LegacyScriptPubKeyMan\r\n  * Implement GenerateNewKey in LegacyScriptPubKeyMan\r\n  * Implement LoadKeyPool in LegacyScriptPubKeyMan\r\n  * Implement GetOldestKeyPoolTime, KeypoolCountExternalKeys, and GetKeypoolSize in LegacyScriptPubKeyMan\r\n  * Implement CanGetAddresses, CanGenerateKeys, and HavePrivateKeys in LegacyScriptPubKeyMan\r\n  * Implement GenerateNewSeed, DeriveNewSeed, and SetHDSeed for LegacyScriptPubKeyMan\r\n  * Implement TopUpKeypool, TopUp, and NewKeyPool in LegacyScriptPubKeyMan\r\n  * Implement ReturnAddress, and KeepKey in LegacyScriptPubKeyMan\r\n  * Implement GetNewAddress, and GetReservedAddress in LegacyScriptPubKeyMan\r\n  * Implement MarkUnusedAddresses in LegacyScriptPubKeyMan\r\n  * Implement IsMine in LegacyScriptPubKeyMan\r\n  * Implement UpgradeKeyMetaData, SetupGeneration, IsFirstRun, Upgrade, RewriteDB in LegacyScriptPubKeyMan\r\n  * Implement Unlock, Lock, and Encrypt and LegacyScriptPubKeyMan\r\n  * Implement ImporScripts, ImportPrivKeys, ImportPubKeys, and ImportScriptPubKeys in LegacyScriptPubKeyMan\r\n  * Implement GetMetadata in LegacyScriptPubKeyMan\r\n  * Implement GetKeyOrigin in LegacyScriptPubKeyMan\r\n  * Implement actually loading everything into LegacyScriptPubKeyMan\r\n  * Implement CanProvide in LegacyScriptPubKeyMan\r\n* Replacing `CWallet` functions and RPC things with calls to `ScriptPubKeyMan` or `LegacyScriptPubKeyMan`. These will compile but are not expected to pass tests hence the `[ci skip]`.\r\n  * [ci skip] Remove CWallet from IsMine and have CWallet always use ScriptPubKeyMan's IsMine\r\n  * [ci skip] moveonly: move ismine stuff to be a module of LegacyScriptPubKeyMan\r\n  * [ci skip] Have GetNewAddress, GetNewChangeAddress, and ReserveAddress use ScriptPubKeyMan\r\n  * [ci skip] Mark used addresses in ScriptPubKeyMan\r\n  * [ci skip] Call UpgradeKeyMetaData for each ScriptPubKeyMan\r\n  * [ci skip] Sign using SigningProvider from ScriptPubKeyMan when signing within CWallet\r\n  * [ci skip] Do not allow import*, dump*, and addmultisigaddress RPCs when wallet is not backed by LegacyScriptPubKeyMan\r\n  * [ci skip] Change Imports to use LegacyScriptPubKeyMan Imports\r\n  * [ci skip] Use SigningProviders and ScriptPubKeyMans in listunspent, signmessage, signrawtransactionwithwallet, and getaddressinfo\r\n  * [ci skip] Use LegacyScriptPubKeyMan in addmultisigaddress and sethdseed\r\n  * [ci skip] Use LegacyScriptPubKeyMan for hdseedid in getwalletinfo\r\n  * [ci skip] Change KeypoolCountExternal and GetKeypoolSize to get aggregate sizes from ScriptPubKeyMans\r\n  * [ci skip] Have IsHDEnabled fetch from ScriptPubKeyMans\r\n  * [ci skip] Fetch oldest keypool time from ScriptPubKeyMans\r\n  * [ci skip] have TopUpKeyPool call TopUp in each ScriptPubKeyMan\r\n  * [ci skip] Have EncryptWallet, Lock, and Unlock call their respective functions in ScriptPubKeyMans\r\n  * [ci skip] Use LegacyScriptPubKeyMan throughout psbt_wallet_tests\r\n  * [ci skip] Use LegacyScriptPubKeyMan throughout wallettool\r\n  * [ci skip] Use ScriptPubKeyMans' Setup and Upgrade functions when loading or creating a wallet\r\n  * [ci skip] Define first run as having no ScriptPubKeyMans\r\n  * [ci skip] Use RewriteDB action when DB needs rewrite\r\n  * [ci skip] Use GetTimeFirstKey instead of nTimeFirstKey\r\n  * [ci skip] Use LegacyScriptPubKeyMan for in wallet_tests\r\n  * [ci skip] Use LegacyScriptPubKeyMan in dumpprivkey and dumpwallet\r\n  * [ci skip] Change CanGetAddresses to fetch from ScriptPubKeyMan\r\n  * [ci skip] Fetch the correct SigningProvider for signing PSBTs\r\n  * [ci skip] Use LegacyScriptPubKeyMan in test util\r\n  * [ci skip] Use LegacyScriptPubKeyMan in some parts of getbalances and createwallet\r\n  * [ci skip] Have getPubKey and getPrivKey use SigningProvider\r\n  * [ci skip] Use LegacyScriptPubKeyMan in benchmarks involving the wallet\r\n  * [ci skip] Store p2sh scripts in AddAndGetDestinationForScript\r\n* Tying everything together and removing the `CWallet` functions.\r\n  * Remove unused functions and switch CWallet to use ScriptPubKeyMan",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            },
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 35,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/16341",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/16341.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/16341.patch"
          },
          "closed_at": "2019-10-25T21:09:34Z",
          "created_at": "2019-07-05T03:01:15Z",
          "updated_at": "2022-02-15T10:58:54Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-12T13:56:59Z",
      "updated_at": "2019-07-12T13:56:59Z",
      "source": {
        "issue": {
          "id": 467428350,
          "node_id": "MDExOlB1bGxSZXF1ZXN0Mjk3MDgyNjkz",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16378",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16378/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16378/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16378/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/16378",
          "number": 16378,
          "state": "closed",
          "state_reason": null,
          "title": "The ultimate send RPC",
          "body": "`walletcreatefundedpsbt` has some interesting features that `sendtoaddress` and `sendmany` don't have:\r\n* manual coin selection\r\n* outputting a PSBT (it was controversial to add this, see #18201)\r\n* create a transaction without adding to wallet (which leads to broadcasting, unless `-walletbroadcast=0`)\r\n\r\nAt the same time `walletcreatefundedpsbt` can't broadcast a transaction, which is inconvenient for simple use cases.\r\n\r\nThis PR introduces a new `send` RPC method which creates a PSBT, signs it if possible and adds it to the wallet by default. If it can't sign all inputs, it outputs a PSBT. If `add_to_wallet` is set to `false` it will return the transaction in both PSBT and hex format.\r\n\r\nBecause it uses a PSBT internally, it will much easier to add hardware wallet support to this method (see #16546).\r\n\r\nFor `bitcoin-cli` users, it tries to keep the simplest use case easy to use:\r\n\r\n```sh\r\nbitcoin-cli -regtest send '{\"ADDRESS\": 0.1}' 1 sat/b\r\n```\r\n\r\nThis paves the way for deprecating `sendtoaddress` and `sendmany` though there's no rush. The only missing feature compared to these older methods is adding labels to a destination address.\r\n\r\nDepends on:\r\n- [x] #16377 (`[rpc] don't automatically append inputs in walletcreatefundedpsbt`)\r\n- [x] #11413 (`[wallet] [rpc] sendtoaddress/sendmany: Add explicit feerate option`)\r\n- [x] #18244 (`[rpc] have lockUnspents also lock manually selected coins`)",
          "user": {
            "login": "Sjors",
            "id": 10217,
            "node_id": "MDQ6VXNlcjEwMjE3",
            "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Sjors",
            "html_url": "https://github.com/Sjors",
            "followers_url": "https://api.github.com/users/Sjors/followers",
            "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
            "organizations_url": "https://api.github.com/users/Sjors/orgs",
            "repos_url": "https://api.github.com/users/Sjors/repos",
            "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/Sjors/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            },
            {
              "id": 98279177,
              "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
              "name": "RPC/REST/ZMQ",
              "color": "0052cc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 13,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/16378",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/16378.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/16378.patch"
          },
          "closed_at": "2020-09-15T02:51:54Z",
          "created_at": "2019-07-12T13:56:59Z",
          "updated_at": "2022-02-15T10:47:39Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmOGJmNWIxNGUyZThjZDc2NWU0NmRjYzk5ZTcyM2EwMzFjMTQwMjJj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f8bf5b14e2e8cd765e46dcc99e723a031c14022c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/f8bf5b14e2e8cd765e46dcc99e723a031c14022c",
      "tree": {
        "sha": "6b7a9a890b7fa69c8f2302c931097e22e624c102",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6b7a9a890b7fa69c8f2302c931097e22e624c102"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 6b7a9a890b7fa69c8f2302c931097e22e624c102\nparent 3a3d8b83571205b8329d4ee25537e3cc4397c3b8\nauthor Luke Dashjr <luke-jr+git@utopios.org> 1550328771 +0000\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1564765822 +0200\n\nconfigure: Clone ax_boost_chrono to ax_boost_process\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAl1Ebn4ACgkQV/+b28ww\nEAlYgg/9FCuQ5/43c1OAJDKoE+GGZCtlDMxCJMKl/xNhN6zCIQRcFXXcD24C/7j7\nKdm8LgoOQ9RbKogZbVUZr3nuHe62s1aYeWVlFNT92zIrOU+mJAGtLDkiXuRhYfsb\nOAkbXzF/u8vDnP0nJRkdhaxWuFCTir86j2SPUOKJzyVGF6Y3MxifRgFBlkTBURZl\nE47ME9OMb8ZHRFmt2ucx7M6X24fEZfP8NcBU6Amf55ifeT90CE3F062gsDuHDYVM\n0LXeiwfSNGssU/JmYUIsgF11W3exDbkFW61bAWT9e/lgWujzxWF/Bvsk3B/Yk86q\nBHnDv2ezK55+hUQM4MWvRf9Xt5b0GEyf270ZiXNCGbhNZPbXw2NAfTZ7eVjCinql\nSpxyN4DdevlW5Um/Zk18+eSoMgDY5tKnyjDwujmUznALB+mhuBNQHmZELesNagX1\nL8ZEubdBHbawlNUCKHdDhJ90uKnmRY1K3SxiS8sI1zl1v7AZiqCce5u9MMrS73zC\nfDrr9sVn/pkPIfZqJ41Lts+X0TOh/+LkEQlH7qzmUQiDZoF9Ldf0qYVAVP5Zxv/b\ngfPzdMoHpuV6bV6IUKeERAVatsm5Eu+gCA5DeAPcL60SkZu5m5UFCmrB1Qkwk2z0\nfoHAJH40s9GQPU3/QOBJp6wn69yRiZrhpL4x5pYcBuC7jJN2SC8=\n=fZxM\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3a3d8b83571205b8329d4ee25537e3cc4397c3b8",
          "sha": "3a3d8b83571205b8329d4ee25537e3cc4397c3b8",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/3a3d8b83571205b8329d4ee25537e3cc4397c3b8"
        }
      ],
      "message": "configure: Clone ax_boost_chrono to ax_boost_process",
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-08-02T17:10:22Z"
      },
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2019-02-16T14:52:51Z"
      },
      "sha": "f8bf5b14e2e8cd765e46dcc99e723a031c14022c"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZGZiMDFiNGE3ZmU0ZWNiZmI4M2ExMjlmMWFjYzk0OWMxMDczZDMy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9dfb01b4a7fe4ecbfb83a129f1acc949c1073d32",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/9dfb01b4a7fe4ecbfb83a129f1acc949c1073d32",
      "tree": {
        "sha": "40c760f9e717d63fd8c0d5485e52bc42621e9fad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/40c760f9e717d63fd8c0d5485e52bc42621e9fad"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 40c760f9e717d63fd8c0d5485e52bc42621e9fad\nparent f8bf5b14e2e8cd765e46dcc99e723a031c14022c\nauthor Sjors Provoost <sjors@sprovoost.nl> 1550078252 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1564765822 +0200\n\nAdd boost::process\n\n* AppVeyor boost-process vcpkg package.\n* Add HAVE_BOOST_PROCESS for MSVC build (bitcoin_config.h)\n* Tell Boost linter to ignore it\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAl1Ebn4ACgkQV/+b28ww\nEAlctBAAuhtWt9rPhTS4g2jihiR/e9N7XBmW/R72v+n7MW2hy2lcMhsxAFJuJgPd\njwx7QkWPAhtlS8AM66ppLBFwC/b4V1m2pUZV57SpibzBNPVEh+LvgMtzuuME3Ydk\nmekXOt6W+1ZJT5mU0TlUPhmGzN2i2oicZ+umULxtpWi1pseJ6uTXMdY+BmSGNRZg\nQPwao5zFxD5bnTUPlCneAxnmUGHX0QtS6d3wdX3bCGL0KTf8++VREahNBKNZBfvm\n79O8PwMvd8WqWkRqfhadE3RWnHCKFadU4qT2/DDgnCiWF3caDvWhayq6vEDpgCO9\nPRbZNedTgr6w9VRrjC6A9OwCz6XoUfRbrNe58rmnb0orqEBXNmyd3ZBKGlMjMqrV\nCj7FGSWjNAjWe4h/hCfqQM7Kfo/NPe6256Bz46YLKm3y9OfCspaOftyh734u4Hf/\nmJRbiDcSbKzlC93voHRKjjpstEdT6XSQmhQCWLoysDQuz8/ObfcaisriHyYVfSa0\nfOJD9lyWdJvoaSfW2kfak44rM4mSlQstBxcBCKhX8az8AfnAzWPt01Ll8mcb6KIF\nYAIeo4XrZmDDPmiC0IuA3kQIIU7bWvH+cvWCFt8F0n+SL6Qrw1vIo7e/8X/JstDf\nhXeJAxrCaQe76flR7rz8jjbfYb22y5SK/4LWVUJvo2TtarpMRFg=\n=kFqm\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f8bf5b14e2e8cd765e46dcc99e723a031c14022c",
          "sha": "f8bf5b14e2e8cd765e46dcc99e723a031c14022c",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/f8bf5b14e2e8cd765e46dcc99e723a031c14022c"
        }
      ],
      "message": "Add boost::process\n\n* AppVeyor boost-process vcpkg package.\n* Add HAVE_BOOST_PROCESS for MSVC build (bitcoin_config.h)\n* Tell Boost linter to ignore it",
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-08-02T17:10:22Z"
      },
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-02-13T17:17:32Z"
      },
      "sha": "9dfb01b4a7fe4ecbfb83a129f1acc949c1073d32"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZWRkM2EyM2I1OTVlZWRkZmY1ZjFmMGUzMzZjMmI0YzQ4ZWM5M2E3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9edd3a23b595eeddff5f1f0e336c2b4c48ec93a7",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/9edd3a23b595eeddff5f1f0e336c2b4c48ec93a7",
      "tree": {
        "sha": "ed5058e9d805b08b8b6b47c9b79bfcc3a3b80b74",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ed5058e9d805b08b8b6b47c9b79bfcc3a3b80b74"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree ed5058e9d805b08b8b6b47c9b79bfcc3a3b80b74\nparent 9dfb01b4a7fe4ecbfb83a129f1acc949c1073d32\nauthor Sjors Provoost <sjors@sprovoost.nl> 1555431966 +0200\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1564769521 +0200\n\n[doc] include Doxygen comments for HAVE_BOOST_PROCESS\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAl1EfPEACgkQV/+b28ww\nEAlupg/+KTM74eyaGXVz3n6nV2xkAnjccbEF5P6LVw/028hCoKHaK941dY8rWk6n\nmY301/z87lHjGLe4Lq9jO9wc0nzN26Lm92pMKsb2smCBz0ui3xjhRZbHXSwVnW8H\noFOaG3GhQ+FkBMWShTvfa/stfaryCCQ1bcw5bWvc+ro5nbVMe0lWhfoB06ftI8ow\nd4qtUxokZB6lt6RD/N3oK41QSxtC4kvbp1bXjyaQbGiDavTdgvIQOYKxMqSg4LFB\nuHrRkITXlxZWeDmlcmWyGjysgT4yYGFGRenszYkvNUiPhsuMjSOefxA6/rlfcqof\n15QrPPMtl5eldG5EGPwO2JF673tunCIWgKXpSBsbMXQHZM7Iq1unEj5C61xvFPni\nzXdOvFLbkFaw9Q01RrB/7zAp9/wWvj94wOxw0GR/AcUZc8g6wRueMpq96s0wrjA0\nmuDAD0Ezo/fkoaGGF/p97dVT91Nth5ImKDZXlG+ZW9IblzrjQ68FPfjKSo+R2s8u\nhmPOJoMTtk5KR/7WzsxxkVwZ8TumlvVOO057Ilp2m440WxQzO9Otc7sGqqW3Ttzy\nwKsNCNxDuD307BBfjZv37WY+0NRKg9TynhRnQnJnebpTcqNfEtRspesYHguAGZmQ\n76ob66+r9BfQ/JSJKcyw6bIj+zXXjx9xMbiFBVioraDMTzjSJ3g=\n=tW5h\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9dfb01b4a7fe4ecbfb83a129f1acc949c1073d32",
          "sha": "9dfb01b4a7fe4ecbfb83a129f1acc949c1073d32",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/9dfb01b4a7fe4ecbfb83a129f1acc949c1073d32"
        }
      ],
      "message": "[doc] include Doxygen comments for HAVE_BOOST_PROCESS",
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-08-02T18:12:01Z"
      },
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-04-16T16:26:06Z"
      },
      "sha": "9edd3a23b595eeddff5f1f0e336c2b4c48ec93a7"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjN2UzZDcwOTRjYjBlMGI5Njk3NTdkYzZlMmJiMTRmMTlhNjk0NjMx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c7e3d7094cb0e0b969757dc6e2bb14f19a694631",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/c7e3d7094cb0e0b969757dc6e2bb14f19a694631",
      "tree": {
        "sha": "2c5e8c9c4e288dacf6a748834797a74c366451d0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2c5e8c9c4e288dacf6a748834797a74c366451d0"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 2c5e8c9c4e288dacf6a748834797a74c366451d0\nparent 9edd3a23b595eeddff5f1f0e336c2b4c48ec93a7\nauthor Sjors Provoost <sjors@sprovoost.nl> 1550080756 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1564769521 +0200\n\n[test] framework: add skip_if_no_runcommand\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAl1EfPEACgkQV/+b28ww\nEAluVw//bmFJ4L2nCdCqfsWLCQr6kkIhdQcnez+s7o6tZuxf8QSNHiZ7CP1Y15ex\nyzOnH9QuWPY6CJI7udHwB9gyCF9vxt+//D3+MUtuaG3nvo6jh7UziUtRctGS2Z4V\nKj77xqOIFIfMBL8e+yjIXDEqHmEAm2wE+Ll/VFDNZpQUWbld4FdaAfo0G06iccdV\naOdaBryvRbGrN1QVbnViTnw4lmObGZJIZExTQhE/KvdhISpCGd8+Dqr1kwytUDkf\nSjTzfMEDbDJcLa8iAbxTKPqnG8ThDoWSt5dkHDAbEoBY8F3jjb1mnbcZoAt/4ldb\nQKXoROXkkvgklwsuij/rHvIsrATHLkr4D20UUfGMZzC36SkQ8vtoEWNq0RvximVS\nwlOc+z9cFl+Ty28cI6EG/LXvnqOr2fzNiahp04jJ7fvfxnxuupMozknZVEPNwnTj\nfEI6u0ZL8PgnNfqFhEOFNG2ItPNi7GU+NSnOD5eSVAuZknm88EtO2Cb+VMX/DkYR\nKzWuRBAhIWHsrVF63YrBJQfb/OPUMbH5Ix4aZgZNwXZ4NASHHqhza7E583M6ucSA\nJ5iwtaU/Rrt26nTfUB9ix0PXefZuuf98LW/FILYEQSlWsSBSSn8Dk6eCfXngF8hM\nJziXggyjh86njnK7gBZ19tVpwN2S8eM5g+ynp19YqyPjgzYv2UQ=\n=L6Ya\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9edd3a23b595eeddff5f1f0e336c2b4c48ec93a7",
          "sha": "9edd3a23b595eeddff5f1f0e336c2b4c48ec93a7",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/9edd3a23b595eeddff5f1f0e336c2b4c48ec93a7"
        }
      ],
      "message": "[test] framework: add skip_if_no_runcommand",
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-08-02T18:12:01Z"
      },
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-02-13T17:59:16Z"
      },
      "sha": "c7e3d7094cb0e0b969757dc6e2bb14f19a694631"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYjRhNDI0MjlkZWE0ZTMwYjUxZmIyZTM1ZjQ0ODdjN2JiNjcwMjhk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fb4a42429dea4e30b51fb2e35f4487c7bb67028d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/fb4a42429dea4e30b51fb2e35f4487c7bb67028d",
      "tree": {
        "sha": "2944a1af01b4a81cdedfda0f9dd76a4e8e9ddbc5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2944a1af01b4a81cdedfda0f9dd76a4e8e9ddbc5"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 2944a1af01b4a81cdedfda0f9dd76a4e8e9ddbc5\nparent c7e3d7094cb0e0b969757dc6e2bb14f19a694631\nauthor Sjors Provoost <sjors@sprovoost.nl> 1550080783 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1564769521 +0200\n\n[util] add runCommandParseJSON\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAl1EfPEACgkQV/+b28ww\nEAn/ag//ZihkbZ9AFSQQqHVEbnEShr1hweMe/9Lr9SYorce+4jEYiz0mTPCuJY9l\nQ2U0IWGh2VNgAmEAvuhPnkSnqstS+c7TEV2h9C2QPqy9hzOxGt9yF9jAosH26EAL\noIoE9dynqH0V3Vffi0ye7i2tlo6WECDkSFnqmDIO2NbzYAoM8qDMRIUr9wFQN7RX\nQuQnqMEjA7aj7cyGvBKtCg9D5T8s14ASIT6I4alXTG9XQA6B0+jr2IBnF3Q0yQZZ\nJEJHQS0Vv/qUB64HYgHeCpDGzGBnlANkTj3phw97WSvnmCCHSMcSZP146WApGcAo\nkQxDg1rs8xdGwCNsTXvOLbERUTYSd93G50mLMf4x5uYFKZpS0xX7gBJPza99+b6a\n8KxdmYBnOpD3hzesml+D9YIZT1gaSIzLeTPp/ozx5Lv5vrPJdbEPhZJYdQrx5CdQ\nblBD98ajtoN3rA93v3B2UTotP05ZnQmHwgcOpwlwNlzmtFyyTdTshAT4XgxAlxG0\nBuVA2m+pfN3I7Fdfq+ne0/KbLs3pYrhW//fn7qMUIGPXoQi1USRFjdy+CfNy1X/v\n3YINvo4O+5hMIrEp3KiBVnqDMjBT5jM5HMyZ5BAtpKm37swYWh9cyKy9mc7ejU0U\nyud6UNHRSZSumifBbs/io6z7iL73NMsmcYjAHRkhD9EsOeos4io=\n=k+rS\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c7e3d7094cb0e0b969757dc6e2bb14f19a694631",
          "sha": "c7e3d7094cb0e0b969757dc6e2bb14f19a694631",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/c7e3d7094cb0e0b969757dc6e2bb14f19a694631"
        }
      ],
      "message": "[util] add runCommandParseJSON",
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-08-02T18:12:01Z"
      },
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-02-13T17:59:43Z"
      },
      "sha": "fb4a42429dea4e30b51fb2e35f4487c7bb67028d"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyY2NiM2I1YzU3NTJlZTgzZDBlYTJlY2UyMjFkMWVkOGRlOWNmNDM1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2ccb3b5c5752ee83d0ea2ece221d1ed8de9cf435",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/2ccb3b5c5752ee83d0ea2ece221d1ed8de9cf435",
      "tree": {
        "sha": "20b790adb6ff66c4c52aa3263129288b9924675d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/20b790adb6ff66c4c52aa3263129288b9924675d"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 20b790adb6ff66c4c52aa3263129288b9924675d\nparent fb4a42429dea4e30b51fb2e35f4487c7bb67028d\nauthor Sjors Provoost <sjors@sprovoost.nl> 1552479909 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1564769618 +0200\n\n[build] add IO support for Boost::Optional\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAl1EfVIACgkQV/+b28ww\nEAll8Q//cB7rCpJA50ez8Mk2jURAcGLvkFy5D3N9MR1FDF7zglH73dvzYHHd01OO\nbehG16TpBCM7yZ6Ded1hh3dXSVol6bBv/GoV1SRQYX2IDRhuRpw5OLFlpETaOEWD\nOwpUGBxoeUg8QIHWha9afpB/mEux9vdofO/Ytv534P4rsRoQSDhVZj+7JDG+lU9c\n/BHdeNx+M13jdzF1wixKOVtCWByEVzmRiJp1WwZpbnKFikVQkwCelg2BgpoJ/5ED\ncujBZKZwgkYI9ot068kCdMDkRHx1J1vuTFno1b5fGB9lrjcaDBkTaGoeOeOSLSLC\nVc6egdFOdEtRW0jUjKkjXc5OrqDnQsscaRPk4in3KfOgnKh9ft2wcrXxFm2qp0dW\njR1kRvu9FuMDzpltgbaRTEgy17EqSiehhgJKvVX5WYJypHiroAkQSG845mfrQB/k\nfS/9vp38reix5+rL9BEg94/a/0ykajo4odDBrrE9RBCWAf5wVWtzolBqJbEezEp4\nP/9Fl3OBdFRQk8Y9kF6OM4F4PdOEzLH0PHK4o+08z8xItr1BsarcUJNsCd4vZpnS\nmjC3VximUu+UjtkctBP+7APJbcqktNBJPRCajz4/+oIZ/DB9y80DJPl1bR8Jb57a\nmT1Y0ig9eC+i5sUvbZunZ9e1m0bgch37BhXMVGp+lpgV8IMEnTI=\n=dGoB\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fb4a42429dea4e30b51fb2e35f4487c7bb67028d",
          "sha": "fb4a42429dea4e30b51fb2e35f4487c7bb67028d",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/fb4a42429dea4e30b51fb2e35f4487c7bb67028d"
        }
      ],
      "message": "[build] add IO support for Boost::Optional",
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-08-02T18:13:38Z"
      },
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-03-13T12:25:09Z"
      },
      "sha": "2ccb3b5c5752ee83d0ea2ece221d1ed8de9cf435"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNzIxYjc4MjcyZGI4YWM2NGRmZWE0ODNjMzhjN2ViMzBkNzNkYjMx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f721b78272db8ac64dfea483c38c7eb30d73db31",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/f721b78272db8ac64dfea483c38c7eb30d73db31",
      "tree": {
        "sha": "28e2eca92b3b9dbdfaa06e187f88134dc69b5a23",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/28e2eca92b3b9dbdfaa06e187f88134dc69b5a23"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 28e2eca92b3b9dbdfaa06e187f88134dc69b5a23\nparent 2ccb3b5c5752ee83d0ea2ece221d1ed8de9cf435\nauthor Sjors Provoost <sjors@sprovoost.nl> 1552479959 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1564769618 +0200\n\nAdd AddressType (base58, bech32)\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAl1EfVIACgkQV/+b28ww\nEAnq9A//S7C4AwvRh5nc3zyDedolh8pfRwwYfyjPKeDH3FUr+dXlA/qZpodb7sTu\nJmYplGqdgCUmI+BRcvLPyq0p1rM9/m0vCqcUMhveRDSSX7pLq2jQYqhFdzvcixrk\nMGfA3Bt0ekWIXxNKJm4uJvbPY8w4SrPWgSl09I41LGMl/OL+NaljsfjHGrJjscE/\n4tQRJQIUKqdbrz/sicX3d6gdjTNLq4RYcdlb7nbZLyCWTIQm5+MSPL0Q/8BqebnY\nsQ1KeiUhr4UeAYFFkv9Qsp9a6P/pN3X0zJmrvYjoskPAyGJVjEbrmldOWIR49t6f\nLL8dys59dGP37gTOzDjgASEKpgJMvTwIS/RtXeTNm/zTmIhCLlMYJtujsBvEI5bQ\ni5E51pdAe00EWwcnW/40bNf5fHWbQfsolyyhvNuq74lvxGTQAw7c5I7gPD/ASQeh\nsxDTcBCofn1nFBMGIK2Vm7YjsnTpyKS8du/u6MdIuP4Kcd0vXLLGj46ZpfmaGFdf\nheYImkj9sfEgQmX2aDXMW3Fu8seellbh4r2kybaxT6FixLEwb6d3URkRhC2wR8pX\nxkxuBmMvNo1DhsV/mMWj60I4NN+q8lAwbh/s26BGPVr4lKWpwvxi0lc6cFqu6voR\nTPF9StvQDRolXsJC5JkCQxX6djKJrY5QCUcFJQC8Cc2ibUHHJsg=\n=Bo0a\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2ccb3b5c5752ee83d0ea2ece221d1ed8de9cf435",
          "sha": "2ccb3b5c5752ee83d0ea2ece221d1ed8de9cf435",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/2ccb3b5c5752ee83d0ea2ece221d1ed8de9cf435"
        }
      ],
      "message": "Add AddressType (base58, bech32)",
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-08-02T18:13:38Z"
      },
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-03-13T12:25:59Z"
      },
      "sha": "f721b78272db8ac64dfea483c38c7eb30d73db31"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MTRjZGVlMzJkYmRhYzU5YmYzMmIyMmY2YTYwZDM2ZjkzMjE5ZWU5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/614cdee32dbdac59bf32b22f6a60d36f93219ee9",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/614cdee32dbdac59bf32b22f6a60d36f93219ee9",
      "tree": {
        "sha": "56992d58e179873e2215495a854f348ff860589d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/56992d58e179873e2215495a854f348ff860589d"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 56992d58e179873e2215495a854f348ff860589d\nparent f721b78272db8ac64dfea483c38c7eb30d73db31\nauthor Sjors Provoost <sjors@sprovoost.nl> 1552479969 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1564769618 +0200\n\nDescriptor: add GetAddressType()\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAl1EfVIACgkQV/+b28ww\nEAkfew/9HBGRrRuvlJvUPHSbxMZodIiBQrxhws3DM4mBX0oelUC2y63TTLJoaVnh\nYuM+JRkTRDSMUFNqde4lbZFEes1XFDgHXtV2ypbj5dmx0gwBY9DcNxMnq/aYnZR6\nmPKFPSiSBveG5g5+fCCwHYs3U/47xvkFMZndWjAhmDK0gVzTKFeQiPLPMBgED+kw\nW/RmhqhVA23SzHmISraixEAqgdtvR3xuc3gEmrVVt7wNYKXo7J2HjTsbQzh+rZIr\naP3tJ7YNMVq6y2Wr7wSRjE84qH/mArO0tuS/03mWbccPQGrvF6ro/y3ujhde+aGS\nbnPZK9bXKW/nvR+ii8NsRvpUKoKrNuCxqooJhbqqMQG3hSalg6rLTfEwdug2x6zQ\n4SnNO2he+zpMnhkqntEJ3V3yosFvpwkskQZJehtAdgvyh4S2MjjC+Lejcsw9UK9d\nWZi7NrzpsNdxUS3lMU1RhzZLlKhUcCIjktDDAflwPtjxyfIOGcojILN0NMCvP2Lw\np1rNyQYum6lgv7WoMlcWhQ2KA1jg9zWumo1jKWYo+cCI2CCZA9fzXo6lBB4nJCW5\n/LE9hYB8Qvh4jUbq2RI4T76OsBtLFtp4GZOpAP9UCti1sH8vHfTEZtkmkepqHw3V\ndrpEV5IimitoFw7JwoM7RTljfmzWLUaH1tDkxSSMu3J1jN16caY=\n=E7C3\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f721b78272db8ac64dfea483c38c7eb30d73db31",
          "sha": "f721b78272db8ac64dfea483c38c7eb30d73db31",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/f721b78272db8ac64dfea483c38c7eb30d73db31"
        }
      ],
      "message": "Descriptor: add GetAddressType()",
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-08-02T18:13:38Z"
      },
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-03-13T12:26:09Z"
      },
      "sha": "614cdee32dbdac59bf32b22f6a60d36f93219ee9"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYTlkNTE1YjIxZDhjZWVhM2U1NWIzMjc3ZjYzYzMzMWIyNDgyYTI3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3a9d515b21d8ceea3e55b3277f63c331b2482a27",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/3a9d515b21d8ceea3e55b3277f63c331b2482a27",
      "tree": {
        "sha": "c0acfb472260343096fdd84b31999e304c09192c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c0acfb472260343096fdd84b31999e304c09192c"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree c0acfb472260343096fdd84b31999e304c09192c\nparent 614cdee32dbdac59bf32b22f6a60d36f93219ee9\nauthor Sjors Provoost <sjors@sprovoost.nl> 1552558682 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1564769618 +0200\n\nAdd IsSegWit() to Descriptor\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAl1EfVIACgkQV/+b28ww\nEAm3PA/+NpT26jQcuuapr/9vCUNDjvh/gtXR50V5e/6PfDIqcjpRMrgcdiu6Zsar\nppWc+xmPtevHxZmb1oi1Jt/ExUkoi4IsJIjlUBPBlMCqmOIGKrDoVcLsXTS71KnU\nEvZX8N3eVqyVJlVomOrgu7+7XlSNFksdMltoBu7LtTKnXVZNHFVNoFLjkhSXfVdA\n8c4ycbszN/Ao8KOBlTRPqTnAJyI06PlPdkeYC9gqfXqpsFRSubCJlVXFptNPipD4\n1HUbIfY+wj54nHXA7m8ln7yUqIB9Db8TVgQxZ7gUuUqmcbzWqlq2OlJuX4s/IpVS\nPLditAnoFXX5Da9G3GsvVnrthi52+qLImv7juYsESb2BxsW85QZRL3jRiUm7+X+S\n7ucwRx7ycyP9Dehl3kbpcS+9khVRPLnuu4WKs9f6QTJyiiN1dYOUYrXDVANsCHj6\nfRvwZFHqF2lnY7ZkL+MPSRRlCTFf0a9CCPk/JxaECNoNvxXIUf6K4cenVQjCf+uj\n2q0whPZvTqeZvAKmKNqrVNlZYttA+NADA2fosuDgV2CR1uDO0QQKmKHvMYGPLzvV\nMRdoCxBFAHzdMutJybW/+9+B46YAOGFBOSvixEWb7iUQEPLvgxV48+AOx6FeFpUz\nw1o8UndiWOWVfoe73ecQ1oTw4xYMQ6gsdxLPf1VYVtCTNTbpXws=\n=W9A8\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/614cdee32dbdac59bf32b22f6a60d36f93219ee9",
          "sha": "614cdee32dbdac59bf32b22f6a60d36f93219ee9",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/614cdee32dbdac59bf32b22f6a60d36f93219ee9"
        }
      ],
      "message": "Add IsSegWit() to Descriptor",
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-08-02T18:13:38Z"
      },
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-03-14T10:18:02Z"
      },
      "sha": "3a9d515b21d8ceea3e55b3277f63c331b2482a27"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMGRiNGVhNDQyMzJmZjgwYWQ2NGI1MGNlNWY0NTUzZWRiNjVjMzM1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f0db4ea44232ff80ad64b50ce5f4553edb65c335",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/f0db4ea44232ff80ad64b50ce5f4553edb65c335",
      "tree": {
        "sha": "40600f0e56d2395852b94ef8781950b104422bf7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/40600f0e56d2395852b94ef8781950b104422bf7"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 40600f0e56d2395852b94ef8781950b104422bf7\nparent 3a9d515b21d8ceea3e55b3277f63c331b2482a27\nauthor Sjors Provoost <sjors@sprovoost.nl> 1556385035 +0200\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1564769618 +0200\n\n[wallet] add -signer argument for external signer command\n\nCreate basic ExternalSigner class with contructor. A Signer(<cmd>)\nis added to CWallet on load if -signer=<cmd> is set.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAl1EfVIACgkQV/+b28ww\nEAmeqQ/+NEURFGN+A9Fp7KNR5R21U6O5w80zdxKlhE1j4sDt6nN4OldfwFC2j+D8\ntnmjFVLgI3FWgl1twNBc/Rg7FARChIWvAGUzkqGJZqQnXkG9LEb+ye4aXhphXetg\nnMWn4Z7xnJSkOAI3pGVyN3372d6RGvN6jgP0byhReaGxhH02+/Rbfc9dsPcCplYB\n0djj4eEVL+QL7cIXIWa51Svy2RHNLefNDLRVa6iQ+OhUgMbBc9+fR4WvDOqj7uUn\nV7HjBLbDzGa8t75t86fCmE/fDBeLkGiTzaST48AOiClxiE66wLcHSac1Loi//M1f\noZWvqZa6GsPreWXylEZhucLCZsl81UAaxYE6RxcMtPbYkLFw6MNTd6TbkOR74vVp\n/UmARxh8SuV7+sBQzlVZ0vYEV9bXRLulRlswgdl4NxVh5Q3fjHhOBCcEH2hNMEEX\nmKbl9MzAT1gXkBuq+xHsLcI399t7o3WKYanba8HoDhgGm7jRksukpYr1r9IOoEn5\np1rEzNlD2abT/Sno1wx4KzR0TQhJ6ijYoMzOmht7wwuDCcmiOMYeVnaqZfY49B6i\npkYFVBJAhd4WaUA38FdoEWcoulFKfUO70hfusiPmdkXJuO1aEDZnqeXNOUX8pFgv\n9Hs4DpWvd4+qT3HVaVNiYNMTXWZ31Q72/NQ5RStFI6ezHVHR2K8=\n=SmwX\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3a9d515b21d8ceea3e55b3277f63c331b2482a27",
          "sha": "3a9d515b21d8ceea3e55b3277f63c331b2482a27",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/3a9d515b21d8ceea3e55b3277f63c331b2482a27"
        }
      ],
      "message": "[wallet] add -signer argument for external signer command\n\nCreate basic ExternalSigner class with contructor. A Signer(<cmd>)\nis added to CWallet on load if -signer=<cmd> is set.",
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-08-02T18:13:38Z"
      },
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-04-27T17:10:35Z"
      },
      "sha": "f0db4ea44232ff80ad64b50ce5f4553edb65c335"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2530487379,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjUzMDQ4NzM3OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2530487379",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-02T18:39:31Z"
    },
    {
      "event": "commented",
      "id": 517806668,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUxNzgwNjY2OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/517806668",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-02T18:46:55Z",
      "updated_at": "2019-08-02T18:46:55Z",
      "author_association": "MEMBER",
      "body": "Rebased now that #15911 is merged. Dropped a few commits that should have been in #15876 and aren't needed anyway after #15713. Removed the need for the unit test to add private keys to the  keypool (closing #15414).\r\n\r\nI'll keep this and the convenience methods in #15876 up to date and work on a \"boxed\" version in a separate PR.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14912#issuecomment-517806668",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14912"
    },
    {
      "event": "unlabeled",
      "id": 2530649075,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MjUzMDY0OTA3NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2530649075",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-02T19:56:03Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2531189053,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjUzMTE4OTA1Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2531189053",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-03T07:18:25Z"
    },
    {
      "event": "commented",
      "id": 517916318,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUxNzkxNjMxOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/517916318",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-03T11:05:21Z",
      "updated_at": "2019-08-03T11:08:20Z",
      "author_association": "MEMBER",
      "body": "Here's a simple rebase on top of a native descriptor wallet #16528 (benefit: gives access to full BIP44/49/84 address tree): https://github.com/Sjors/bitcoin/tree/2019/08/hww-box",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14912#issuecomment-517916318",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14912"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-03T11:05:53Z",
      "updated_at": "2019-08-03T11:05:53Z",
      "source": {
        "issue": {
          "id": 418731199,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MjU5NDMzODUw",
          "url": "https://api.github.com/repos/bitcoin-core/HWI/issues/137",
          "repository_url": "https://api.github.com/repos/bitcoin-core/HWI",
          "labels_url": "https://api.github.com/repos/bitcoin-core/HWI/issues/137/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin-core/HWI/issues/137/comments",
          "events_url": "https://api.github.com/repos/bitcoin-core/HWI/issues/137/events",
          "html_url": "https://github.com/bitcoin-core/HWI/pull/137",
          "number": 137,
          "state": "closed",
          "state_reason": null,
          "title": "Add getdescriptors command",
          "body": "Returns all relevant descriptors for a given account, e.g.:\r\n\r\n```sh\r\n./hwi.py --fingerprint 00000000 getdescriptors --account 0\r\n```\r\n\r\n```json\r\n{\r\n  \"receive\": [\r\n    \"pkh([00000000/44h/0h/0h]xpub6C.../0/*)#fn95jwmg\",\r\n    \"sh(wpkh([00000000/49h/0h/0h]xpub6B..../0/*))#j4r9hntt\",\r\n    \"wpkh([00000000/84h/0h/0h]xpub6C.../0/*)#qw72dxa9\"\r\n  ],\r\n  \"internal\": [\r\n    \"pkh([00000000/44h/0h/0h]xpub6C.../1/*)#c8q40mts\",\r\n    \"sh(wpkh([00000000/49h/0h/0h]xpub6B..../1/*))#85dn0v75\",\r\n    \"wpkh([00000000/84h/0h/0h]xpub6C..../1/*)#36mtsnda\"\r\n  ]\r\n}\r\n```",
          "user": {
            "login": "Sjors",
            "id": 10217,
            "node_id": "MDQ6VXNlcjEwMjE3",
            "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Sjors",
            "html_url": "https://github.com/Sjors",
            "followers_url": "https://api.github.com/users/Sjors/followers",
            "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
            "organizations_url": "https://api.github.com/users/Sjors/orgs",
            "repos_url": "https://api.github.com/users/Sjors/repos",
            "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/Sjors/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 4,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin-core/HWI/pulls/137",
            "html_url": "https://github.com/bitcoin-core/HWI/pull/137",
            "diff_url": "https://github.com/bitcoin-core/HWI/pull/137.diff",
            "patch_url": "https://github.com/bitcoin-core/HWI/pull/137.patch"
          },
          "closed_at": "2019-09-06T16:07:31Z",
          "created_at": "2019-03-08T10:39:13Z",
          "updated_at": "2019-12-21T17:20:02Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNTJlMTFkNzMxY2UxY2Y4NWFjMjk5MTk1YjAwMjBiZDk4NjdiYzE0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b52e11d731ce1cf85ac299195b0020bd9867bc14",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/b52e11d731ce1cf85ac299195b0020bd9867bc14",
      "tree": {
        "sha": "c3510815d012c0a50d2645c6246d4ad5b211d819",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c3510815d012c0a50d2645c6246d4ad5b211d819"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree c3510815d012c0a50d2645c6246d4ad5b211d819\nparent f0db4ea44232ff80ad64b50ce5f4553edb65c335\nauthor Sjors Provoost <sjors@sprovoost.nl> 1556385103 +0200\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1564929388 +0200\n\n[test] add external signer test\n\nIncludes a mock to mimick the HWI interace.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAl1G7W4ACgkQV/+b28ww\nEAlIvA//bFXaB5eZMfdJQLAkCkAO5K8FD8yJDvntDMJYFu7sgOIvc/o9Tu1nBVV0\nKHTq8PhIgd56hg9vORXt6XTI7WBoTa6EpTqxBsOofe91lQ+K/9+LjSKgQiD27YA9\nti8MZ3iSfQNPe/71kCfc1qk7OI7rB2GTuSrKMEcyvadACIm8i8CafbbwcFXwJqIi\ncOP4qczj4zHOLPs1oyWIXBj734wyaMEBFWNCr8z1LFRwaNm6Hga3pWJQexIdGyYd\nYPLtmi57NOhwi1EMKbbbry+zw0PBB/3Qb1xGRP+LoYFlDF1i6Dk80bImtPndDbla\nqQfdLelAOaGorYs1BuL3qnqqHANGa7Lej2eZiDi7spctcUTS5Q2RliXILo1KUqBo\n1SwXL0XjiA3b77ZyfRctTArGXwsftK+DzkWrbncdJYTZC5H3R+k3HevfRCBtppoZ\nfCiPgjzRRAtpk2yjnCDg2V3JnZIkcTmcrIUhIkSIdJX3xEBprO47k06wjt+XnS3e\naMe+fDAFH5UMX748ouYoNYiY0YxmtxOYlL7TbeU3V8ThCu6oqEO0Otm6AWUrDsHf\nHlkUO6UDx6nk6QbuZDrFvIwfECoDLiLA7hZozLSbjOKUuDUPaf5FqexLXA6nXUQY\nZD4oxrsCAO1sfXfNnzHFZ4uSZvGxIZUxr8XTuLzjw4c+i9m4UH4=\n=eJrz\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f0db4ea44232ff80ad64b50ce5f4553edb65c335",
          "sha": "f0db4ea44232ff80ad64b50ce5f4553edb65c335",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/f0db4ea44232ff80ad64b50ce5f4553edb65c335"
        }
      ],
      "message": "[test] add external signer test\n\nIncludes a mock to mimick the HWI interace.",
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-08-04T14:36:28Z"
      },
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-04-27T17:11:43Z"
      },
      "sha": "b52e11d731ce1cf85ac299195b0020bd9867bc14"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYjgwZWI4MWEyYmM5MGZhMDZhMDljZjIwZTNjMjJlYjIyNTBjM2E5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1b80eb81a2bc90fa06a09cf20e3c22eb2250c3a9",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/1b80eb81a2bc90fa06a09cf20e3c22eb2250c3a9",
      "tree": {
        "sha": "8789b22e8ec06473de35771f364dddab0ebaf652",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8789b22e8ec06473de35771f364dddab0ebaf652"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 8789b22e8ec06473de35771f364dddab0ebaf652\nparent b52e11d731ce1cf85ac299195b0020bd9867bc14\nauthor Sjors Provoost <sjors@sprovoost.nl> 1550231669 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1564929395 +0200\n\n[rpc] add external signer RPC files\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAl1G7XMACgkQV/+b28ww\nEAl79RAAqkV7Akdvmu+PgCxTEyFCoiUEHuDFp9qot2h308nitvVTxBwPsJtZrV9G\nq0Bv+qMI1Oh+Cz7LR/QYfmXXw4wBvdH+ZGc1B2o4TNxGDJNPqOxv1X5Whzx8WdcX\nF9zK5OYil3DcxyxF34Z92VeGcjfh/LlNSb0eI2soZbVSD4QsccX+7EBa2iwl0mbd\nfyI6l1sCfiUYIZHBbvjdFhJ5w+fSNj4tY2sQLVtJMZ93J5N+gNddNOAyuglnd8NY\nhojYMdgbwhl5N6c20YwkWYK/Vfm8g1d4OPaDEmMcJL0sSKQSzdg/wHM25kOrxiaS\npOPha6ttpXXOBmD4Oi08Q1wdebds6SgDhRKhPuPE0Q3KnGbbGdOZUL/N5LeNFVmc\nDSF3Fkr/tXr3nDV4/yuyYc6krJ2Wvs92J4iGlJlGwQTJTm1gTb12AR+xQ3ESJzRz\nWdikkixr917V+6eIbQeOrHdvf3Hj2gwyWIuRcYLxo++qLK6oHaHF7/22wRcVEh4h\n1RwxzVjcWzUjwT+g4bQOvLooJVIepG8LmTXiBYY7fHfQEEhFc582aRuJC37WTz0t\nlU1xXiQEOQVTBrpWgXhffRL8tnpBIPKx/7ptez722EvaXK3FXnDROK07t1sgy0SP\nWtntfqKVlTRT1ohTHAEdVf1hHMfk7ssYbEX3qZno6YmJyT/s7rU=\n=+5F8\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b52e11d731ce1cf85ac299195b0020bd9867bc14",
          "sha": "b52e11d731ce1cf85ac299195b0020bd9867bc14",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/b52e11d731ce1cf85ac299195b0020bd9867bc14"
        }
      ],
      "message": "[rpc] add external signer RPC files",
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-08-04T14:36:35Z"
      },
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-02-15T11:54:29Z"
      },
      "sha": "1b80eb81a2bc90fa06a09cf20e3c22eb2250c3a9"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZjVjZjNkNjcyZWNiZGMzNzg1ODgyYzBiMmE0NmQwZjJmMTU0ZDU0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9f5cf3d672ecbdc3785882c0b2a46d0f2f154d54",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/9f5cf3d672ecbdc3785882c0b2a46d0f2f154d54",
      "tree": {
        "sha": "a7207879e594c0b2a7259c141a52ed84ae7608cd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a7207879e594c0b2a7259c141a52ed84ae7608cd"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree a7207879e594c0b2a7259c141a52ed84ae7608cd\nparent 1b80eb81a2bc90fa06a09cf20e3c22eb2250c3a9\nauthor Sjors Provoost <sjors@sprovoost.nl> 1550231669 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1564929395 +0200\n\n[rpc] signer: add enumeratesigners to list external signers\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAl1G7XMACgkQV/+b28ww\nEAm0ag/+O5eEUN6W/Dta9Z0Y1UqKfxLDUCyFnc8De17V4jaytE6McfchLb+4/Vx2\nAUkQxwDCDndJFAuJ9KIk0V1xDF9z4bnxbVTaifvYqoxx9p/liwADugpE37iCbVWJ\ndsvdVMpoPOfM7XzsbbKwrz+R7JTX7w8fUFZOsoShUkXKe5rsE4kQB9j58bAQ8ByD\n7BO7qFyQLpYWDTP0/dZRwEP1eddNpmimM7Lg/vj67PIKririHventznSz8RS72E4\n4m4PZmU6RF9gQziunSCCOoyACUSq2N7yUWOtpuA0wBlOipBBrx0sCKbnkKINPl//\n7sSf+6C5MAswr8J5Kn8f+qHMuqtqaZ+HbjRO5LI6msMg+MN1FMoyiOwcLKStatvF\nHL0JvND5pjbWBDvvz1JlzpdQCU8xwl9e7nZMUF7gRuj8QabT2SajqT0dOOSuAGW8\nURj5hWTR+vQJ+JkCb3tA8Uu77xCbY2cKE1IiMI96EqDPYa8eiUhaLEyoRwVNEJr4\ngngvqn/tgyqqTHd2v7xTt4Gi3OmdhRpg5Mka76XJJVzHZ6fHi1ojiqqj8k7NCnpY\nOEEHXOICt2JBj+J4a2qvns+0d1GgO7Ckyy1clXDz/iJTTEoSWvA6q97qm9IHjFTQ\nSheeYM1/hRMMnYITlUt0Ql8RcSu39LRN+fXhtMLVKUtatVLL9Yw=\n=51PD\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1b80eb81a2bc90fa06a09cf20e3c22eb2250c3a9",
          "sha": "1b80eb81a2bc90fa06a09cf20e3c22eb2250c3a9",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/1b80eb81a2bc90fa06a09cf20e3c22eb2250c3a9"
        }
      ],
      "message": "[rpc] signer: add enumeratesigners to list external signers",
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-08-04T14:36:35Z"
      },
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-02-15T11:54:29Z"
      },
      "sha": "9f5cf3d672ecbdc3785882c0b2a46d0f2f154d54"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNzJiZjc1NGI0MzhhZmFlMjQ1MGViYzhlOTRmY2QxNDQ4NDQ2YjBk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/072bf754b438afae2450ebc8e94fcd1448446b0d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/072bf754b438afae2450ebc8e94fcd1448446b0d",
      "tree": {
        "sha": "8cc7e0d48c19092677fa3719e1ac6affafef6733",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8cc7e0d48c19092677fa3719e1ac6affafef6733"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 8cc7e0d48c19092677fa3719e1ac6affafef6733\nparent 9f5cf3d672ecbdc3785882c0b2a46d0f2f154d54\nauthor Sjors Provoost <sjors@sprovoost.nl> 1552147495 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1564929395 +0200\n\n[rpc] make ProcessImport public\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAl1G7XMACgkQV/+b28ww\nEAlAeBAApZbZ4yG0ryiStKsssCm4Wd7FDnhoA3AokJBJ8Bu+bHi91o+hOzZSfx36\nxSOIuWPv7/ktpiRHqAd/o8Wss4uNF2CXnVgowCxudotu3NIemzwr5PH6sgD/LEph\nhH5mbwABsC1QO+AhU7s03eORA+b+FpvBYXo2uHnqZ+AU/XbdnlEtH8iy6HUjMwog\n1uKQObXlLMFlPzuS6gSRDPr/iXcyHiW5XTD0SWvGIq4vUnnlCnvczIZt0/4kSsm6\nYEocMWtaAgKQRjQ9QtQEbwAc5Y7g2IKpepj2lgQxRBDcrpGmJck8aJwfB+P+Msp/\nIAqPtogkVLQjACMXUICnkHNg+w3/S6w6urYyxNcBLzj07A7RSX0s/k+w1LgFcepo\nhnC0oW6ns5kXkAuwJJImUMKhHs+oXi9rtlFoc/QvUGwR60q88rRl8ySdLQhSeBTE\npeW2GwEatRv2gzG7yvgooG0Y8XMvVu4U9ppjDhrz5JJta1eIXY6HbnZyjitL+w/Q\nhBxTAPRxfodN64Tul9h+PLWmqvDLAc1aqLigL/C5qkiFxypCtQmQWRNRBytQ8ztv\nkCSlIumrBsr9VJWIBX3yzD44BcEgeHi9/Ag8gNZ46c36LxsLUqGQhrd9iTw1kay2\ndg0z9ivaAaRbrVGR5LzCIpsX2CNxLa3zhCOKC5JmYUBYEaA4i/k=\n=JpqT\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9f5cf3d672ecbdc3785882c0b2a46d0f2f154d54",
          "sha": "9f5cf3d672ecbdc3785882c0b2a46d0f2f154d54",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/9f5cf3d672ecbdc3785882c0b2a46d0f2f154d54"
        }
      ],
      "message": "[rpc] make ProcessImport public",
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-08-04T14:36:35Z"
      },
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-03-09T16:04:55Z"
      },
      "sha": "072bf754b438afae2450ebc8e94fcd1448446b0d"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MjdmMWVjNjlkZTU1ZmJlM2M3OGFjOGZlOGY3M2Y3ZTYyMmJmOTYw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/527f1ec69de55fbe3c78ac8fe8f73f7e622bf960",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/527f1ec69de55fbe3c78ac8fe8f73f7e622bf960",
      "tree": {
        "sha": "d9d41f66e47600af45f38a3f2bdda68735e8534f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d9d41f66e47600af45f38a3f2bdda68735e8534f"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree d9d41f66e47600af45f38a3f2bdda68735e8534f\nparent 072bf754b438afae2450ebc8e94fcd1448446b0d\nauthor Sjors Provoost <sjors@sprovoost.nl> 1552147578 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1564929395 +0200\n\n[rpc] signer: GetSignerForJSONRPCRequest\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAl1G7XMACgkQV/+b28ww\nEAkSYhAAvucSNUDarmuIf+Je34J2amWv004abujdj1V+ekm6Q4neh9yAMTtVl3z3\nAjALTeYO9L9yERuxGVuUQ/l3YLtAcELe0LGef0OO8ru0TBDGnraPP54tz/doHR8r\nvIz93LSq5gojSp/998FNQ3A7FC43m2n32FnXwdZxtnJqYJAJj8PKNqBKNWKNskyJ\nNYObnRTLofy3CznpCvUSxBpxxhyxwJ7Z+mi0W62Z5yo/AZNo9B3LO0TeEecOXGsm\n6icNekQHKjuYURMeBgJV+JbmTAwlUzsZuAuq1kRAFIu9Oaf0bU0aa7C8U6055w2b\nJ4W06wZZ+ob3AGpRH0EdXlL8GA/ftgZpTkM3duf6BNlBk4DOdvk+Gz/S0zrTh+8f\n5C54mnttB3RDB0mesKfRwWcMw0vCDgPfyRoC2f/N49Oq/QVrEmAdlhKSry5t8Wks\nw1Tlbha9ezlfJEklH32wATQC0oodYMBnE432fPpIYAKTItRXyB7c/Eop+/4m3jyQ\n+VxkCxPxegJe8uOus4Sc9vZBKDjnAELEDtoLNIOos9nzD3Lbu9W2FJe0V6UBbwV6\nZoNhzOzTIykLzYXgMAC0D48Q5HgMHaUhQRbIrzhxCLUFhaJAa54EYZ+wx0KlLhSp\nYx9tgy+kwPtd9jPtCequ9GBCm5cYJiE7u4p1RU8jAJtsAxxqeqU=\n=e/M5\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/072bf754b438afae2450ebc8e94fcd1448446b0d",
          "sha": "072bf754b438afae2450ebc8e94fcd1448446b0d",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/072bf754b438afae2450ebc8e94fcd1448446b0d"
        }
      ],
      "message": "[rpc] signer: GetSignerForJSONRPCRequest",
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-08-04T14:36:35Z"
      },
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-03-09T16:06:18Z"
      },
      "sha": "527f1ec69de55fbe3c78ac8fe8f73f7e622bf960"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZmM0NWZmZGEyMTIwZmM0M2U0ZTMzNjgxYThjNTcyMjUwNDZkYzBj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/afc45ffda2120fc43e4e33681a8c57225046dc0c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/afc45ffda2120fc43e4e33681a8c57225046dc0c",
      "tree": {
        "sha": "b24cc9f98a029acc0a39f06d3d4963d3f2ba0339",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b24cc9f98a029acc0a39f06d3d4963d3f2ba0339"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree b24cc9f98a029acc0a39f06d3d4963d3f2ba0339\nparent 527f1ec69de55fbe3c78ac8fe8f73f7e622bf960\nauthor Sjors Provoost <sjors@sprovoost.nl> 1552147632 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1564929395 +0200\n\n[rpc] signer: add ParseDescriptor\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAl1G7XMACgkQV/+b28ww\nEAnqBA//fV87pf5BPICMBNn8x7OorQfs0wRSfilOoAHPV73aaJ3SRj/HNy/5BC7O\n9jdAWCCFT3sGDAbuPjVxiYWXPCGbonkyMSsUM0Gz2hhmjrlcKrJ2ueDE4ixpQTne\nJoQp39J2IJpnzkvwk+ESxB0FgvRIJWRQNjmNQXERLvYbK/6qFlVPktbzLjHG9iiM\nvYqU8MWCohtqOgpAwUKSKjHATi/PEJ02AcvQuJ7d9W9aXd+C43OaEsH/UKQ3N6jd\ngJAeuhlJZd9bUiTlAbKvpvzXIgXpL1+FXJ/rmuwOB1QiNhEITPVc9X6j1oPUbwik\nPQIu5bio2rFVOZ52Isz0H92pSGLjcmFFCyASWgDc96FlXyix9IdVvtN7nDQ5g8Hz\nLAvOztUVzQfVey3qSfCAByn820M2pSQUzhFFshCILthTh4kytfFXMzjr38cO3uau\nzC5q3R85ElRYoNp1E6/hunUqftr8MEins+C1/epuUAqXr1oZJxvILyEddCfd1x5y\nyPlVO9OCnBkRG37tOFrBWbpsRpEbqjz3kE1r2CrSeYS8FL8XGETc4bmZOnYsR+dS\nvZeUImzal0rzs66YsnZNXiqX+sPau7RakSM3xz1cKTG9l3umhi+FJPAHjEvpOU3U\nYWjmjJUaFqx51hG5ojR4B0llt4W1mQTIzXqguo6zRZNZYCeyklM=\n=oe8q\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/527f1ec69de55fbe3c78ac8fe8f73f7e622bf960",
          "sha": "527f1ec69de55fbe3c78ac8fe8f73f7e622bf960",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/527f1ec69de55fbe3c78ac8fe8f73f7e622bf960"
        }
      ],
      "message": "[rpc] signer: add ParseDescriptor",
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-08-04T14:36:35Z"
      },
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-03-09T16:07:12Z"
      },
      "sha": "afc45ffda2120fc43e4e33681a8c57225046dc0c"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YmM1NjA4NDNkNTM3ZjZmMDg2NmVhMTkyZGY5MzNjNWZlYzdlN2U1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4bc560843d537f6f0866ea192df933c5fec7e7e5",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/4bc560843d537f6f0866ea192df933c5fec7e7e5",
      "tree": {
        "sha": "8db2f9bc09fd4f917f59d05f46540f56334960ca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8db2f9bc09fd4f917f59d05f46540f56334960ca"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 8db2f9bc09fd4f917f59d05f46540f56334960ca\nparent afc45ffda2120fc43e4e33681a8c57225046dc0c\nauthor Sjors Provoost <sjors@sprovoost.nl> 1552147667 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1564929396 +0200\n\n[rpc] signer: add signerfetchkeys to import keys from signer\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAl1G7XQACgkQV/+b28ww\nEAlXYRAAhFlIAEYeKfquQv1bsqKXXb6EkQGIeSYDiyCIUFAY31r0tqguSWRpLlr6\nhPaEpk+KMzv84C7pltSlBnFE4iCOAGPDaRVwR2wNtHHYGf/VpQqmLUY3szpM0MWF\n55p/MvrGIJMU0D9stNaj1IZfJ38/DRY1YUOdo9Ks7f4zVoxD8hyjXBZr917dBJY3\nFKjCKr6MB3SwfmvHtMyBWer3yp2KN3MjG744ZWykvpxy0G6exMd4ii35v/KnriM1\nR7YfuW+HYjEcNo0Y615So7gsEkjjgw2eDaBBvGdBqCFaJzePpYWUdnnrHJ5EhV9o\nzQOIOjYTJfOnV//KeAtkb/CUh7c2FSwNRZRHSuuROXjVxxdr9cDPgROwn9jdzu1z\n+aHcDknvTDQazHj88QruTj42aP/haXuT5sdbz/6uO332SYJbQ2u/8saINgHmdjQS\nqw5YXZaRxLW9g61GG/93u4SJIXOzd0AfTAenFw1n+8fmfmo/+PQq28iK/UGA8HuL\nKrLBlFQwYvwWjs82MRT3taUWSn3JyMLwVyxMAkuppkNu9+7PF5S83Pftu388XxnW\nPnq+rXbd+Sgh5AXquS1CHcBV8ZNsseJAXApL9ACi568Jfn/PM+KTByB9cdTffU0Q\nq70/KWv5AE8cESo/EfdcktNOE7j1B2yAbkeFTs/TBg4hUUyBgrI=\n=iclF\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/afc45ffda2120fc43e4e33681a8c57225046dc0c",
          "sha": "afc45ffda2120fc43e4e33681a8c57225046dc0c",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/afc45ffda2120fc43e4e33681a8c57225046dc0c"
        }
      ],
      "message": "[rpc] signer: add signerfetchkeys to import keys from signer",
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-08-04T14:36:36Z"
      },
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-03-09T16:07:47Z"
      },
      "sha": "4bc560843d537f6f0866ea192df933c5fec7e7e5"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZDBjNjBmNTI3YjY5OTdkNjM0OTIyMmQzMDYwYTVmYmY5ZDQwNjcx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ed0c60f527b6997d6349222d3060a5fbf9d40671",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/ed0c60f527b6997d6349222d3060a5fbf9d40671",
      "tree": {
        "sha": "94c7f93961884ec80f72a96af2b91f5abd5060dd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/94c7f93961884ec80f72a96af2b91f5abd5060dd"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 94c7f93961884ec80f72a96af2b91f5abd5060dd\nparent 4bc560843d537f6f0866ea192df933c5fec7e7e5\nauthor Sjors Provoost <sjors@sprovoost.nl> 1550231669 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1564929396 +0200\n\n[rpc] signer: add signerdissociate\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAl1G7XQACgkQV/+b28ww\nEAmo/w//T0z+l5RS4yhnhRI1LG4RlbKHU0GZzH+8ohOVMWC84cPUtvWXfk5xKspb\n6VgDdCqC5GeYV51I9Uxxv2oXzk4gT9AaxK+pKnWYQuArFqrVIdw1BIDBdVgGv+XU\n16Oa0cl0S8fz41FfDtfrbyQ29nr0S9BI4jsrgdTj3cpHgWF2xSqdEy+zbW/YDUR1\ngfOMfdfVPewfV6On5ykdIo4etxzrLGdvwcXHUWhyLNYuZNEv7jgij3AvHWxUdbVa\nqigoSaMyiTAnRkVXL58RoHTeV2hYgx6qbwA9rzZjJs7eGOAsbtBq2H3hkAGHGCdr\nZ40FJiNiBXwZo446f4yo8RT0xDNUr8kz6/kmmDlVpJ00vtr6Sc8XOuNmdetrumMb\nRRkW8WFuVA2wCwkHH5W0prwNNByCzmzhOBoBx8KEmJqxXvjMmij+/6oj1TZ1ZTkT\npnA+VOYvR1KJtMu98Jib4WLTOw5FBlqUPU6ZhfC95EQbeR/7WOUDtMKDAmJiN//f\nEpWIAekL1pPEaaLBTUUb5Ynzhr4BozSKn60g7JCXGE/5gXfXGN3RqnJEHBpdxTFH\n5dy/Uj+jBf5DvxkziLyUtCp6MWnD4UZWJ1vlA2R0EDSR/nNF+2O7BdShxJ/j15L6\n/73zayEAlKKZcmAnS9dERCugAOQ4HJxHlfpqQOTrySWSu2I+K70=\n=qpDW\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4bc560843d537f6f0866ea192df933c5fec7e7e5",
          "sha": "4bc560843d537f6f0866ea192df933c5fec7e7e5",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/4bc560843d537f6f0866ea192df933c5fec7e7e5"
        }
      ],
      "message": "[rpc] signer: add signerdissociate",
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-08-04T14:36:36Z"
      },
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-02-15T11:54:29Z"
      },
      "sha": "ed0c60f527b6997d6349222d3060a5fbf9d40671"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzphODBmYTlhNDBlMDliNWQ2NDQ4OGM2YTBhMzM5MmM3MmY4ZjU2YTc1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a80fa9a40e09b5d64488c6a0a3392c72f8f56a75",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/a80fa9a40e09b5d64488c6a0a3392c72f8f56a75",
      "tree": {
        "sha": "1cd9c3668a5d478203e2d42b90be6cbfd7c57d92",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1cd9c3668a5d478203e2d42b90be6cbfd7c57d92"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 1cd9c3668a5d478203e2d42b90be6cbfd7c57d92\nparent ed0c60f527b6997d6349222d3060a5fbf9d40671\nauthor Sjors Provoost <sjors@sprovoost.nl> 1550231670 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1564929396 +0200\n\n[rpc] signer: add signerdisplayaddress\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAl1G7XQACgkQV/+b28ww\nEAkpYg/+KqOQLzJgNFd9fM97AIlsdlNHr6qTCLVKS5gZdixsy6qjngsbV9ll/a1l\njQxnmv9Z/LTkBlvv7BQP7W8SrbOWHH/rV0igMqXntrMCjAYab1uVenPnnGmhkBv9\ntIB5+cGrG60V4f29uL8yX6O7/kk9ZBk+8NUKY3ilIE4NvObcgOdgMWYL8/ZPpq9A\nclm8oSuJOewPOrTcyHTCsVRfbXEpil4alXMUOnLNkbNgl62V+EuBxrKTTjkUogoq\nKZ9DLSjYCvH/qPTlI6TIxvuK4MP8JNyn6jYhzWSIblcIvM91XpMWe+ISAcnW6+sW\n/C0ZE0VBAmZDkRkLPc6LpprmzwrWH0RVcCwrf4Ms6qdrXC0VhdB7bD7fod36FQDy\naKj1KAx+8vo/Hv023MBykBTx0i8fpFKu96eUdTfHuJVO4PcD3asMDrTuSOtToWiw\n2Lxg85sozOEtH7249snxZQz8jAiXJnWyGRd70k3WTRMYet+MhsQUmp8Hm+a8XNDy\nN9OO7dJV0efqSGqGVxnhgLBxLfy6ClUoZXxmlUI1znm952HdL3EHIeDs1MaEETP/\njHArG1N7+3nGGv3JsGqP3TMTk9nwfYKizDiHV7fHBM0RFfq8zfd6Fgqe+aUW2sBj\n/2MXW/KpbEY0FvteVJSg49EPd4CT+crqZu3OdT6LqSbsG72SFkE=\n=O/ZO\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ed0c60f527b6997d6349222d3060a5fbf9d40671",
          "sha": "ed0c60f527b6997d6349222d3060a5fbf9d40671",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/ed0c60f527b6997d6349222d3060a5fbf9d40671"
        }
      ],
      "message": "[rpc] signer: add signerdisplayaddress",
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-08-04T14:36:36Z"
      },
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-02-15T11:54:30Z"
      },
      "sha": "a80fa9a40e09b5d64488c6a0a3392c72f8f56a75"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NDU4OWU1MTgxOWY4YTdlZjZlMDg1NTQxYjQ0NGM4YTIxODgzYmM4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/84589e51819f8a7ef6e085541b444c8a21883bc8",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/84589e51819f8a7ef6e085541b444c8a21883bc8",
      "tree": {
        "sha": "346193764511e6bc3fd2f9aaa70c5ba69879b982",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/346193764511e6bc3fd2f9aaa70c5ba69879b982"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 346193764511e6bc3fd2f9aaa70c5ba69879b982\nparent a80fa9a40e09b5d64488c6a0a3392c72f8f56a75\nauthor Sjors Provoost <sjors@sprovoost.nl> 1550231670 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1564929396 +0200\n\n[rpc] signer: add signerprocesspsbt\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAl1G7XQACgkQV/+b28ww\nEAldoQ//c9qvcJPrTAfp7hxQCFL8uxeO6iBQiMcT6qZ8WZje2hRX9M21QYiGSeci\nRZuUo8TZQ3uxhs7vUH1Im9GZIy0Cg44/GInyIm5S5mlv2Gar8SHg00VGjhB8bklg\n3rY6qVFQWh9zoGi0GBHJdsDb5CeBUCDjf6ImXVFizhCCzmCN4e4SkkJLB5QFgVwL\nDYsDZmwIPydAsgevVgkqtroXlMZ7au4u1lZpgDb0NgDRLnv2ScOfsZS4Yi5AiOkV\nnWWgGvoIUfzTEl7/hM98cMV734RhLGXCpQekcYfNu5LciSnIQt4nm6akkr/H2FdO\nfzaWtvrvxngz2LOqmzWGaGIUY1G01WJta6T4WPLlP4003Uoug3v6d0W5rulJPY9c\nmhrBNA1V0/1luMhrWg3CbklWrD4acw22YUVmACAnGV/IX+ohXrn+Ea8lPJ9UU203\n+tSqwiXRh4rYs9kWaGBnEAWrN6U7tnClB/LGMJuxqDgWeAYSTLUuYxxzZHi5gSzr\n1UzlVwRoROKt5fITw9rKJvA/5uDZoY6zsQIT2CWyBgOWU53LwlKIGCjj5yb6QohQ\nqRqZSCCH7MvheMj7IdHmKuEtiXsVYCD3KfOGUv/SwRQ4akEzObcQSF61K/lyezzl\neg4Yo118lIYtoMlSgEc9h38utwK2mKNVvp0bpR7gPwBp5+3EZFo=\n=OZfc\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a80fa9a40e09b5d64488c6a0a3392c72f8f56a75",
          "sha": "a80fa9a40e09b5d64488c6a0a3392c72f8f56a75",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/a80fa9a40e09b5d64488c6a0a3392c72f8f56a75"
        }
      ],
      "message": "[rpc] signer: add signerprocesspsbt",
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-08-04T14:36:36Z"
      },
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-02-15T11:54:30Z"
      },
      "sha": "84589e51819f8a7ef6e085541b444c8a21883bc8"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNjQ0MjViZTFmODg5ZmY5MzNlY2Q0ZWFmYjc0ZjFhN2EwMjU3ZWFj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/264425be1f889ff933ecd4eafb74f1a7a0257eac",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/264425be1f889ff933ecd4eafb74f1a7a0257eac",
      "tree": {
        "sha": "90fb352577b6180fc98821bc4a96ed23ddf9e2fc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/90fb352577b6180fc98821bc4a96ed23ddf9e2fc"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 90fb352577b6180fc98821bc4a96ed23ddf9e2fc\nparent 84589e51819f8a7ef6e085541b444c8a21883bc8\nauthor Sjors Provoost <sjors@sprovoost.nl> 1559913056 +0200\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1564929396 +0200\n\n[doc] add external-signer.md\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAl1G7XQACgkQV/+b28ww\nEAl+HxAAuFJBxtbsbbyNdn0b+YaDvGsjdmkvbpqPc5XWqdnApok/xn140glu+89L\naviEBop1xrww6kbgPqauhxu7E9gMjkN9oQ/tcKE5R8gsVHv6anh7Jj2xTKgQJ9d6\nCs5A/SrNNwiKpLNXzaUzVqIcBe+UDNh5NVuLUFo8QQWXyppvJlTSfXBm6JVJBvV+\n4cX+e1tR8Rtvy9/vWXcxFsVqv2uAQKPbX2vZrHY5OGgV04/1fFUm0/HyAJZ4Cjl1\n1hJCHyOaHBe2zPIGS5AmesTLLOFTp80wc80hjtHnq4gQjxzY1lYn0Mqqz8ZahwOj\naexAXhOz+Xi0aG1ExwgKZSpWro4aKan6xVP+Wp8gwIlJY8JI8s2wSlrtdEZOjpgB\n2o19GssjIjfDvzOp8NoH+6CnWpGxiIerdKe7FKJGvcjtS//TjWtukj14qMqH0MKB\n2ChrdwClSTkkAq2BKeBA6wv2QGOWl/j2qibgdnp05Gjvh52D2bXpA1IN4HHkYUEx\n4q7qdRwgObGmmoWZYvZ4zAkLLDTB+0RkY2WeT/1zrMjZB30HGaZSN1oF3jAZJlMU\nrZv3PyvwbRDyM+LREJhXW047qmXGMF0Z3qXu8sdBPRyh2B1VEd44H1d1VbF2Ft1S\n5Iz5xeyJJTZh69yAuJb9bbEfXYhFVVBSM+sydILe6iUqS8ZCnv4=\n=meyT\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/84589e51819f8a7ef6e085541b444c8a21883bc8",
          "sha": "84589e51819f8a7ef6e085541b444c8a21883bc8",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/84589e51819f8a7ef6e085541b444c8a21883bc8"
        }
      ],
      "message": "[doc] add external-signer.md",
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-08-04T14:36:36Z"
      },
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-06-07T13:10:56Z"
      },
      "sha": "264425be1f889ff933ecd4eafb74f1a7a0257eac"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2531801767,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjUzMTgwMTc2Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2531801767",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-04T14:36:46Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-04T21:42:31Z",
      "updated_at": "2019-08-04T21:42:31Z",
      "source": {
        "issue": {
          "id": 476597057,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MzA0MDk3NTEw",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16546",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16546/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16546/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16546/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/16546",
          "number": 16546,
          "state": "closed",
          "state_reason": null,
          "title": "External signer support - Wallet Box edition",
          "body": "Big picture overview in [this gist](https://gist.github.com/Sjors/29d06728c685e6182828c1ce9b74483d).\r\n\r\nThis PR lets `bitcoind` call an arbitrary command `-signer=<cmd>`, e.g. a hardware wallet driver,  where it can fetch public keys, ask to display an address, and sign a transaction (using PSBT under the hood).\r\n\r\nIt's design to work with https://github.com/bitcoin-core/HWI, which supports multiple hardware wallets. Any command with the same arguments and return values will work. It simplifies the manual procedure described [here](https://github.com/bitcoin-core/HWI/blob/master/docs/bitcoin-core-usage.md).\r\n\r\nUsage is documented in [doc/external-signer.md](\r\nhttps://github.com/Sjors/bitcoin/blob/2019/08/hww-box2/doc/external-signer.md), which also describes what protocol a different signer binary should conform to.\r\n\r\nUse `--enable-external-signer` to opt in, requires Boost::Process:\r\n\r\n```\r\nOptions used to compile and link:\r\n  with wallet     = yes\r\n  with gui / qt   = no\r\n  external signer = yes\r\n```\r\n\r\nIt adds the following RPC methods:\r\n* `enumeratesigners`: asks <cmd> for a list of signers (e.g. devices) and their master key fingerprint\r\n* `signerdisplayaddress <address>`:  asks <cmd> to display an address\r\n\r\nIt enhances the following RPC methods:\r\n* `createwallet`: takes an additional `external_signer` argument and fetches keys from device\r\n* `send`: automatically sends transaction to device and waits \r\n\r\nUsage TL&DR:\r\n* clone HWI repo somewhere and launch `bitcoind -signer=../HWI/hwi.py`\r\n* check if you can see your hardware device: `bitcoin-cli enumeratesigners`\r\n* create wallet and auto import keys `bitcoin-cli createwallet \"hww\" true true \"\" true true true`\r\n* display address on device: `bitcoin-cli signerdisplayaddress ...`\r\n* to spend, use `send` RPC and approve transaction on device\r\n\r\nPrerequisites:\r\n- [x] #21127 load wallet flags before everything else\r\n- [x] #21182 remove mostly pointless BOOST_PROCESS macro\r\n\r\nPotentially useful followups:\r\n- GUI support: bitcoin-core/gui#4\r\n- bumpfee support\r\n- (automatically) verify (a subset of) keys on the device after import, through message signing",
          "user": {
            "login": "Sjors",
            "id": 10217,
            "node_id": "MDQ6VXNlcjEwMjE3",
            "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Sjors",
            "html_url": "https://github.com/Sjors",
            "followers_url": "https://api.github.com/users/Sjors/followers",
            "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
            "organizations_url": "https://api.github.com/users/Sjors/orgs",
            "repos_url": "https://api.github.com/users/Sjors/repos",
            "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/Sjors/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            },
            {
              "id": 62963516,
              "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
              "name": "Tests",
              "color": "d4c5f9",
              "default": false
            },
            {
              "id": 98279177,
              "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
              "name": "RPC/REST/ZMQ",
              "color": "0052cc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "milestone": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/47",
            "html_url": "https://github.com/bitcoin/bitcoin/milestone/47",
            "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/47/labels",
            "id": 5347322,
            "node_id": "MDk6TWlsZXN0b25lNTM0NzMyMg==",
            "number": 47,
            "state": "closed",
            "title": "22.0",
            "description": "",
            "creator": {
              "login": "MarcoFalke",
              "id": 6399679,
              "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
              "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/MarcoFalke",
              "html_url": "https://github.com/MarcoFalke",
              "followers_url": "https://api.github.com/users/MarcoFalke/followers",
              "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
              "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
              "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
              "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
              "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
              "repos_url": "https://api.github.com/users/MarcoFalke/repos",
              "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
              "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
              "type": "User",
              "site_admin": false
            },
            "open_issues": 0,
            "closed_issues": 124,
            "created_at": "2020-04-25T00:14:49Z",
            "updated_at": "2021-09-14T07:16:53Z",
            "closed_at": "2021-09-09T12:47:52Z"
          },
          "locked": true,
          "comments": 38,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16546",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/16546",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/16546.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/16546.patch"
          },
          "closed_at": "2021-02-23T16:57:10Z",
          "created_at": "2019-08-04T21:42:31Z",
          "updated_at": "2021-06-11T05:32:48Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 518038772,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUxODAzODc3Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/518038772",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-04T21:43:57Z",
      "updated_at": "2019-08-04T21:43:57Z",
      "author_association": "MEMBER",
      "body": "Closing in favor of the native descriptor edition in #16546.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14912#issuecomment-518038772",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14912"
    },
    {
      "event": "closed",
      "id": 2531974494,
      "node_id": "MDExOkNsb3NlZEV2ZW50MjUzMTk3NDQ5NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2531974494",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-04T21:43:57Z"
    },
    {
      "event": "comment_deleted",
      "id": 4083050216,
      "node_id": "MDE5OkNvbW1lbnREZWxldGVkRXZlbnQ0MDgzMDUwMjE2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4083050216",
      "actor": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-08T06:12:24Z"
    },
    {
      "event": "locked",
      "id": 4083050506,
      "node_id": "MDExOkxvY2tlZEV2ZW50NDA4MzA1MDUwNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4083050506",
      "actor": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-08T06:12:29Z"
    },
    {
      "event": "head_ref_deleted",
      "id": 4083951359,
      "node_id": "MDE5OkhlYWRSZWZEZWxldGVkRXZlbnQ0MDgzOTUxMzU5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4083951359",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-08T10:03:45Z"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/242604518",
      "pull_request_review_id": 186155471,
      "id": 242604518,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MjYwNDUxOA==",
      "diff_hunk": "@@ -24,6 +25,17 @@ void RegisterWalletRPCCommands(CRPCTable &t);\n  */\n std::shared_ptr<CWallet> GetWalletForJSONRPCRequest(const JSONRPCRequest& request);\n \n+/**\n+ * Figures out what external signer to use for a JSONRPCRequest.\n+ *\n+ * @param[in] request JSONRPCRequest that wishes to access a signer\n+ * @param[pos] which argument contains the signer fingerprint. Optional, returns the first signer otherwise\n+ * @param[pwallet] the wallet",
      "path": "src/wallet/rpcwallet.h",
      "position": null,
      "original_position": 17,
      "commit_id": "264425be1f889ff933ecd4eafb74f1a7a0257eac",
      "original_commit_id": "9ec4aaca284673e1c92a02fdc4dea9a1a3e6038c",
      "in_reply_to_id": null,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The documentation format is incorrect here :-)",
      "created_at": "2018-12-18T16:19:33Z",
      "updated_at": "2019-08-04T14:36:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14912#discussion_r242604518",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/242604518"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14912"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 33,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/242605089",
      "pull_request_review_id": 186156153,
      "id": 242605089,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MjYwNTA4OQ==",
      "diff_hunk": "@@ -0,0 +1,45 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <wallet/externalsigner.h>\n+#include <util/system.h>\n+\n+ExternalSigner::ExternalSigner(const std::string& command, const std::string& fingerprint, bool mainnet): m_command(command), m_fingerprint(fingerprint), m_mainnet(mainnet) {}\n+\n+UniValue ExternalSigner::Enumerate(const std::string& command, std::vector<ExternalSigner>& signers, bool mainnet)\n+{\n+    // Call <command> enumerate\n+    const UniValue result = runCommandParseJSON(command + \" enumerate\");\n+    if (!result.isArray())\n+        throw ExternalSignerException(strprintf(\"'%s' received invalid response, expected array of signers\", command));\n+    for (UniValue signer : result.getValues()) {\n+        const UniValue& fingerprint = find_value(signer, \"fingerprint\");\n+        if (result.isNull())\n+            throw ExternalSignerException(strprintf(\"'%s' received invalid response, missing signer fingerprint\", command));\n+        std::string fingerprintStr = fingerprint.get_str();\n+        // Skip duplicate signer\n+        bool duplicate = false;\n+        for (ExternalSigner signer : signers) {",
      "path": "src/wallet/externalsigner.cpp",
      "position": 28,
      "original_position": 23,
      "commit_id": "264425be1f889ff933ecd4eafb74f1a7a0257eac",
      "original_commit_id": "9ec4aaca284673e1c92a02fdc4dea9a1a3e6038c",
      "in_reply_to_id": null,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`ExternalSigner signer` shadows `UniValue signer` :-)",
      "created_at": "2018-12-18T16:20:53Z",
      "updated_at": "2019-08-04T14:36:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14912#discussion_r242605089",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/242605089"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14912"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 28,
      "original_line": 28,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/242605811",
      "pull_request_review_id": 186157079,
      "id": 242605811,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MjYwNTgxMQ==",
      "diff_hunk": "@@ -836,246 +837,419 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n     return reply;\n }\n \n-\n-static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+struct ImportData\n {\n-    try {\n-        // First ensure scriptPubKey has either a script or JSON with \"address\" string\n-        const UniValue& scriptPubKey = data[\"scriptPubKey\"];\n-        bool isScript = scriptPubKey.getType() == UniValue::VSTR;\n-        if (!isScript && !(scriptPubKey.getType() == UniValue::VOBJ && scriptPubKey.exists(\"address\"))) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"scriptPubKey must be string with script or JSON with address string\");\n-        }\n-        const std::string& output = isScript ? scriptPubKey.get_str() : scriptPubKey[\"address\"].get_str();\n-\n-        // Optional fields.\n-        const std::string& strRedeemScript = data.exists(\"redeemscript\") ? data[\"redeemscript\"].get_str() : \"\";\n-        const std::string& witness_script_hex = data.exists(\"witnessscript\") ? data[\"witnessscript\"].get_str() : \"\";\n-        const UniValue& pubKeys = data.exists(\"pubkeys\") ? data[\"pubkeys\"].get_array() : UniValue();\n-        const UniValue& keys = data.exists(\"keys\") ? data[\"keys\"].get_array() : UniValue();\n-        const bool internal = data.exists(\"internal\") ? data[\"internal\"].get_bool() : false;\n-        const bool watchOnly = data.exists(\"watchonly\") ? data[\"watchonly\"].get_bool() : false;\n-        const std::string& label = data.exists(\"label\") ? data[\"label\"].get_str() : \"\";\n-\n-        // Generate the script and destination for the scriptPubKey provided\n-        CScript script;\n-        CTxDestination dest;\n-\n-        if (!isScript) {\n-            dest = DecodeDestination(output);\n-            if (!IsValidDestination(dest)) {\n-                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid address\");\n-            }\n-            script = GetScriptForDestination(dest);\n-        } else {\n-            if (!IsHex(output)) {\n-                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid scriptPubKey\");\n-            }\n+    // Input data\n+    std::unique_ptr<CScript> redeemscript; //!< Provided redeemScript; will be moved to `import_scripts` if relevant.\n+    std::unique_ptr<CScript> witnessscript; //!< Provided witnessScript; will be moved to `import_scripts` if relevant.\n \n-            std::vector<unsigned char> vData(ParseHex(output));\n-            script = CScript(vData.begin(), vData.end());\n-            if (!ExtractDestination(script, dest) && !internal) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Internal must be set to true for nonstandard scriptPubKey imports.\");\n-            }\n-        }\n+    // Output data\n+    std::set<CScript> import_scripts;\n+    std::map<CKeyID, bool> used_keys; //!< Import these private keys if available (the value indicates whether if the key is required for solvability)\n+    std::map<CKeyID, KeyOriginInfo> key_origins;\n+};\n \n-        // Watchonly and private keys\n-        if (watchOnly && keys.size()) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Watch-only addresses should not include private keys\");\n+enum class ScriptContext\n+{\n+    TOP, //! Top-level scriptPubKey\n+    P2SH, //! P2SH redeemScript\n+    WITNESS_V0, //! P2WSH witnessScript\n+};\n+\n+// Analyse the provided scriptPubKey, determining which keys and which redeem scripts from the ImportData struct are needed to spend it, and mark them as used.\n+// Returns an error string, or the empty string for success.\n+static std::string RecurseImportData(const CScript& script, ImportData& import_data, const ScriptContext script_ctx)\n+{\n+    // Use Solver to obtain script type and parsed pubkeys or hashes:\n+    std::vector<std::vector<unsigned char>> solverdata;\n+    txnouttype script_type = Solver(script, solverdata);\n+\n+    switch (script_type) {\n+    case TX_PUBKEY: {\n+        CPubKey pubkey(solverdata[0].begin(), solverdata[0].end());\n+        import_data.used_keys.emplace(pubkey.GetID(), false);\n+        return \"\";\n+    }\n+    case TX_PUBKEYHASH: {\n+        CKeyID id = CKeyID(uint160(solverdata[0]));\n+        import_data.used_keys[id] = true;\n+        return \"\";\n+    }\n+    case TX_SCRIPTHASH: {\n+        if (script_ctx == ScriptContext::P2SH) throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Trying to nest P2SH inside another P2SH\");\n+        if (script_ctx == ScriptContext::WITNESS_V0) throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Trying to nest P2SH inside a P2WSH\");\n+        assert(script_ctx == ScriptContext::TOP);\n+        CScriptID id = CScriptID(uint160(solverdata[0]));\n+        auto subscript = std::move(import_data.redeemscript);\n+        if (!subscript) return \"missing redeemscript\";\n+        if (CScriptID(*subscript) != id) return \"redeemScript does not match the scriptPubKey\";\n+        import_data.import_scripts.emplace(*subscript);\n+        return RecurseImportData(*subscript, import_data, ScriptContext::P2SH);\n+    }\n+    case TX_MULTISIG: {\n+        for (size_t i = 1; i + 1< solverdata.size(); ++i) {\n+            CPubKey pubkey(solverdata[i].begin(), solverdata[i].end());\n+            import_data.used_keys.emplace(pubkey.GetID(), false);\n         }\n-\n-        // Internal addresses should not have a label\n-        if (internal && data.exists(\"label\")) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Internal addresses should not have a label\");\n+        return \"\";\n+    }\n+    case TX_WITNESS_V0_SCRIPTHASH: {\n+        if (script_ctx == ScriptContext::WITNESS_V0) throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Trying to nest P2WSH inside another P2WSH\");\n+        uint256 fullid(solverdata[0]);\n+        CScriptID id;\n+        CRIPEMD160().Write(fullid.begin(), fullid.size()).Finalize(id.begin());\n+        auto subscript = std::move(import_data.witnessscript);\n+        if (!subscript) return \"missing witnessscript\";\n+        if (CScriptID(*subscript) != id) return \"witnessScript does not match the scriptPubKey or redeemScript\";\n+        if (script_ctx == ScriptContext::TOP) {\n+            import_data.import_scripts.emplace(script); // Special rule for IsMine: native P2WSH requires the TOP script imported (see script/ismine.cpp)\n         }\n-\n-        // Force users to provide the witness script in its field rather than redeemscript\n-        if (!strRedeemScript.empty() && script.IsPayToWitnessScriptHash()) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"P2WSH addresses have an empty redeemscript. Please provide the witnessscript instead.\");\n+        import_data.import_scripts.emplace(*subscript);\n+        return RecurseImportData(*subscript, import_data, ScriptContext::WITNESS_V0);\n+    }\n+    case TX_WITNESS_V0_KEYHASH: {\n+        if (script_ctx == ScriptContext::WITNESS_V0) throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Trying to nest P2WPKH inside P2WSH\");\n+        CKeyID id = CKeyID(uint160(solverdata[0]));\n+        import_data.used_keys[id] = true;\n+        if (script_ctx == ScriptContext::TOP) {\n+            import_data.import_scripts.emplace(script); // Special rule for IsMine: native P2WPKH requires the TOP script imported (see script/ismine.cpp)\n         }\n+        return \"\";\n+    }\n+    case TX_NULL_DATA:\n+        return \"unspendable script\";\n+    case TX_NONSTANDARD:\n+    case TX_WITNESS_UNKNOWN:\n+    default:\n+        return \"unrecognized script\";\n+    }\n+}\n \n-        CScript scriptpubkey_script = script;\n-        CTxDestination scriptpubkey_dest = dest;\n-        bool allow_p2wpkh = true;\n-\n-        // P2SH\n-        if (!strRedeemScript.empty() && script.IsPayToScriptHash()) {\n-            // Check the redeemScript is valid\n-            if (!IsHex(strRedeemScript)) {\n-                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid redeem script: must be hex string\");\n-            }\n-\n-            // Import redeem script.\n-            std::vector<unsigned char> vData(ParseHex(strRedeemScript));\n-            CScript redeemScript = CScript(vData.begin(), vData.end());\n-            CScriptID redeem_id(redeemScript);\n-\n-            // Check that the redeemScript and scriptPubKey match\n-            if (GetScriptForDestination(redeem_id) != script) {\n-                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"The redeemScript does not match the scriptPubKey\");\n-            }\n-\n-            pwallet->MarkDirty();\n-\n-            if (!pwallet->AddWatchOnly(redeemScript, timestamp)) {\n-                throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n-            }\n-\n-            if (!pwallet->HaveCScript(redeem_id) && !pwallet->AddCScript(redeemScript)) {\n-                throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding p2sh redeemScript to wallet\");\n-            }\n+static UniValue ProcessImportLegacy(ImportData& import_data, std::map<CKeyID, CPubKey>& pubkey_map, std::map<CKeyID, CKey>& privkey_map, std::set<CScript>& script_pub_keys, bool& have_solving_data, const UniValue& data, std::vector<CKeyID>& ordered_pubkeys)\n+{\n+    UniValue warnings(UniValue::VARR);\n \n-            // Now set script to the redeemScript so we parse the inner script as P2WSH or P2WPKH below\n-            script = redeemScript;\n-            ExtractDestination(script, dest);\n+    // First ensure scriptPubKey has either a script or JSON with \"address\" string\n+    const UniValue& scriptPubKey = data[\"scriptPubKey\"];\n+    bool isScript = scriptPubKey.getType() == UniValue::VSTR;\n+    if (!isScript && !(scriptPubKey.getType() == UniValue::VOBJ && scriptPubKey.exists(\"address\"))) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"scriptPubKey must be string with script or JSON with address string\");\n+    }\n+    const std::string& output = isScript ? scriptPubKey.get_str() : scriptPubKey[\"address\"].get_str();\n+\n+    // Optional fields.\n+    const std::string& strRedeemScript = data.exists(\"redeemscript\") ? data[\"redeemscript\"].get_str() : \"\";\n+    const std::string& witness_script_hex = data.exists(\"witnessscript\") ? data[\"witnessscript\"].get_str() : \"\";\n+    const UniValue& pubKeys = data.exists(\"pubkeys\") ? data[\"pubkeys\"].get_array() : UniValue();\n+    const UniValue& keys = data.exists(\"keys\") ? data[\"keys\"].get_array() : UniValue();\n+    const bool internal = data.exists(\"internal\") ? data[\"internal\"].get_bool() : false;\n+    const bool watchOnly = data.exists(\"watchonly\") ? data[\"watchonly\"].get_bool() : false;\n+\n+    // Generate the script and destination for the scriptPubKey provided\n+    CScript script;\n+    CTxDestination dest;\n+    if (!isScript) {\n+        dest = DecodeDestination(output);\n+        if (!IsValidDestination(dest)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid address \\\"\" + output + \"\\\"\");\n         }\n+        script = GetScriptForDestination(dest);\n+    } else {\n+        if (!IsHex(output)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid scriptPubKey \\\"\" + output + \"\\\"\");\n+        }\n+        std::vector<unsigned char> vData(ParseHex(output));\n+        script = CScript(vData.begin(), vData.end());\n+        if (!ExtractDestination(script, dest) && !internal) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Internal must be set to true for nonstandard scriptPubKey imports.\");\n+        }\n+    }\n+    script_pub_keys.emplace(script);\n \n-        // (P2SH-)P2WSH\n-        if (!witness_script_hex.empty() && script.IsPayToWitnessScriptHash()) {\n-            if (!IsHex(witness_script_hex)) {\n-                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid witness script: must be hex string\");\n-            }\n-\n-            // Generate the scripts\n-            std::vector<unsigned char> witness_script_parsed(ParseHex(witness_script_hex));\n-            CScript witness_script = CScript(witness_script_parsed.begin(), witness_script_parsed.end());\n-            CScriptID witness_id(witness_script);\n+    // Parse all arguments\n+    if (strRedeemScript.size()) {\n+        if (!IsHex(strRedeemScript)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid redeem script \\\"\" + strRedeemScript + \"\\\": must be hex string\");\n+        }\n+        auto parsed_redeemscript = ParseHex(strRedeemScript);\n+        import_data.redeemscript = MakeUnique<CScript>(parsed_redeemscript.begin(), parsed_redeemscript.end());\n+    }\n+    if (witness_script_hex.size()) {\n+        if (!IsHex(witness_script_hex)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid witness script \\\"\" + witness_script_hex + \"\\\": must be hex string\");\n+        }\n+        auto parsed_witnessscript = ParseHex(witness_script_hex);\n+        import_data.witnessscript = MakeUnique<CScript>(parsed_witnessscript.begin(), parsed_witnessscript.end());\n+    }\n+    for (size_t i = 0; i < pubKeys.size(); ++i) {\n+        const auto& str = pubKeys[i].get_str();\n+        if (!IsHex(str)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Pubkey \\\"\" + str + \"\\\" must be a hex string\");\n+        }\n+        auto parsed_pubkey = ParseHex(str);\n+        CPubKey pubkey(parsed_pubkey.begin(), parsed_pubkey.end());\n+        if (!pubkey.IsFullyValid()) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Pubkey \\\"\" + str + \"\\\" is not a valid public key\");\n+        }\n+        pubkey_map.emplace(pubkey.GetID(), pubkey);\n+        ordered_pubkeys.push_back(pubkey.GetID());\n+    }\n+    for (size_t i = 0; i < keys.size(); ++i) {\n+        const auto& str = keys[i].get_str();\n+        CKey key = DecodeSecret(str);\n+        if (!key.IsValid()) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key encoding\");\n+        }\n+        CPubKey pubkey = key.GetPubKey();\n+        CKeyID id = pubkey.GetID();\n+        if (pubkey_map.count(id)) {\n+            pubkey_map.erase(id);\n+        }\n+        privkey_map.emplace(id, key);\n+    }\n \n-            // Check that the witnessScript and scriptPubKey match\n-            if (GetScriptForDestination(WitnessV0ScriptHash(witness_script)) != script) {\n-                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"The witnessScript does not match the scriptPubKey or redeemScript\");\n-            }\n+    // Verify and process input data\n+    have_solving_data = import_data.redeemscript || import_data.witnessscript || pubkey_map.size() || privkey_map.size();\n+    if (have_solving_data) {\n+        // Match up data in import_data with the scriptPubKey in script.\n+        auto error = RecurseImportData(script, import_data, ScriptContext::TOP);\n \n-            // Add the witness script as watch only only if it is not for P2SH-P2WSH\n-            if (!scriptpubkey_script.IsPayToScriptHash() && !pwallet->AddWatchOnly(witness_script, timestamp)) {\n-                throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n-            }\n+        // Verify whether the watchonly option corresponds to the availability of private keys.\n+        bool spendable = std::all_of(import_data.used_keys.begin(), import_data.used_keys.end(), [&](const std::pair<CKeyID, bool>& used_key){ return privkey_map.count(used_key.first) > 0; });\n+        if (!watchOnly && !spendable) {\n+            warnings.push_back(\"Some private keys are missing, outputs will be considered watchonly. If this is intentional, specify the watchonly flag.\");\n+        }\n+        if (watchOnly && spendable) {\n+            warnings.push_back(\"All private keys are provided, outputs will be considered spendable. If this is intentional, do not specify the watchonly flag.\");\n+        }\n \n-            if (!pwallet->HaveCScript(witness_id) && !pwallet->AddCScript(witness_script)) {\n-                throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding p2wsh witnessScript to wallet\");\n+        // Check that all required keys for solvability are provided.\n+        if (error.empty()) {\n+            for (const auto& require_key : import_data.used_keys) {\n+                if (!require_key.second) continue; // Not a required key\n+                if (pubkey_map.count(require_key.first) == 0 && privkey_map.count(require_key.first) == 0) {\n+                    error = \"some required keys are missing\";\n+                }\n             }\n-\n-            // Now set script to the witnessScript so we parse the inner script as P2PK or P2PKH below\n-            script = witness_script;\n-            ExtractDestination(script, dest);\n-            allow_p2wpkh = false; // P2WPKH cannot be embedded in P2WSH\n         }\n \n-        // (P2SH-)P2PK/P2PKH/P2WPKH\n-        if (dest.type() == typeid(CKeyID) || dest.type() == typeid(WitnessV0KeyHash)) {\n-            if (!allow_p2wpkh && dest.type() == typeid(WitnessV0KeyHash)) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"P2WPKH cannot be embedded in P2WSH\");\n-            }\n-            if (keys.size() > 1 || pubKeys.size() > 1) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"More than one key given for one single-key address\");\n-            }\n-            CPubKey pubkey;\n-            if (keys.size()) {\n-                pubkey = DecodeSecret(keys[0].get_str()).GetPubKey();\n-            }\n-            if (pubKeys.size()) {\n-                const std::string& strPubKey = pubKeys[0].get_str();\n-                if (!IsHex(strPubKey)) {\n-                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Pubkey must be a hex string\");\n-                }\n-                std::vector<unsigned char> vData(ParseHex(pubKeys[0].get_str()));\n-                CPubKey pubkey_temp(vData.begin(), vData.end());\n-                if (pubkey.size() && pubkey_temp != pubkey) {\n-                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Private key does not match public key for address\");\n+        if (!error.empty()) {\n+            warnings.push_back(\"Importing as non-solvable: \" + error + \". If this is intentional, don't provide any keys, pubkeys, witnessscript, or redeemscript.\");\n+            import_data = ImportData();\n+            pubkey_map.clear();\n+            privkey_map.clear();\n+            have_solving_data = false;\n+        } else {\n+            // RecurseImportData() removes any relevant redeemscript/witnessscript from import_data, so we can use that to discover if a superfluous one was provided.\n+            if (import_data.redeemscript) warnings.push_back(\"Ignoring redeemscript as this is not a P2SH script.\");\n+            if (import_data.witnessscript) warnings.push_back(\"Ignoring witnessscript as this is not a (P2SH-)P2WSH script.\");\n+            for (auto it = privkey_map.begin(); it != privkey_map.end(); ) {\n+                auto oldit = it++;\n+                if (import_data.used_keys.count(oldit->first) == 0) {\n+                    warnings.push_back(\"Ignoring irrelevant private key.\");\n+                    privkey_map.erase(oldit);\n                 }\n-                pubkey = pubkey_temp;\n             }\n-            if (pubkey.size() > 0) {\n-                if (!pubkey.IsFullyValid()) {\n-                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Pubkey is not a valid public key\");\n+            for (auto it = pubkey_map.begin(); it != pubkey_map.end(); ) {\n+                auto oldit = it++;\n+                auto key_data_it = import_data.used_keys.find(oldit->first);\n+                if (key_data_it == import_data.used_keys.end() || !key_data_it->second) {\n+                    warnings.push_back(\"Ignoring public key \\\"\" + HexStr(oldit->first) + \"\\\" as it doesn't appear inside P2PKH or P2WPKH.\");\n+                    pubkey_map.erase(oldit);\n                 }\n+            }\n+        }\n+    }\n \n-                // Check the key corresponds to the destination given\n-                std::vector<CTxDestination> destinations = GetAllDestinationsForKey(pubkey);\n-                if (std::find(destinations.begin(), destinations.end(), dest) == destinations.end()) {\n-                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Key does not match address destination\");\n-                }\n+    return warnings;\n+}\n \n-                // This is necessary to force the wallet to import the pubKey\n-                CScript scriptRawPubKey = GetScriptForRawPubKey(pubkey);\n+static UniValue ProcessImportDescriptor(ImportData& import_data, std::map<CKeyID, CPubKey>& pubkey_map, std::map<CKeyID, CKey>& privkey_map, std::set<CScript>& script_pub_keys, bool& have_solving_data, const UniValue& data, std::vector<CKeyID>& ordered_pubkeys)\n+{\n+    UniValue warnings(UniValue::VARR);\n \n-                if (::IsMine(*pwallet, scriptRawPubKey) == ISMINE_SPENDABLE) {\n-                    throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the private key for this address or script\");\n-                }\n+    const std::string& descriptor = data[\"desc\"].get_str();\n+    FlatSigningProvider keys;\n+    auto parsed_desc = Parse(descriptor, keys);\n+    if (!parsed_desc) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Descriptor is invalid\");\n+    }\n \n-                pwallet->MarkDirty();\n+    have_solving_data = parsed_desc->IsSolvable();\n+    const bool watch_only = data.exists(\"watchonly\") ? data[\"watchonly\"].get_bool() : false;\n \n-                if (!pwallet->AddWatchOnly(scriptRawPubKey, timestamp)) {\n-                    throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n-                }\n-            }\n+    int64_t range_start = 0, range_end = 0;\n+    if (!parsed_desc->IsRange() && data.exists(\"range\")) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Range should not be specified for an un-ranged descriptor\");\n+    } else if (parsed_desc->IsRange()) {\n+        if (!data.exists(\"range\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Descriptor is ranged, please specify the range\");\n         }\n-\n-        // Import the address\n-        if (::IsMine(*pwallet, scriptpubkey_script) == ISMINE_SPENDABLE) {\n-            throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the private key for this address or script\");\n+        const UniValue& range = data[\"range\"];\n+        range_start = range.exists(\"start\") ? range[\"start\"].get_int64() : 0;\n+        if (!range.exists(\"end\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"End of range for descriptor must be specified\");\n         }\n+        range_end = range[\"end\"].get_int64();\n+    }\n \n-        pwallet->MarkDirty();\n+    const UniValue& priv_keys = data.exists(\"keys\") ? data[\"keys\"].get_array() : UniValue();\n+\n+    // Expand all descriptors to get public keys and scripts.\n+    // TODO: get private keys from descriptors too\n+    for (int i = range_start; i <= range_end; ++i) {",
      "path": "src/wallet/rpcdump.cpp",
      "position": null,
      "original_position": 426,
      "commit_id": "264425be1f889ff933ecd4eafb74f1a7a0257eac",
      "original_commit_id": "9ec4aaca284673e1c92a02fdc4dea9a1a3e6038c",
      "in_reply_to_id": null,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The type of `i` should match the type of `range_start` to avoid implicit precision losing conversion?",
      "created_at": "2018-12-18T16:22:38Z",
      "updated_at": "2019-08-04T14:36:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14912#discussion_r242605811",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/242605811"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14912"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1123,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/242606157",
      "pull_request_review_id": 186157488,
      "id": 242606157,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MjYwNjE1Nw==",
      "diff_hunk": "@@ -836,246 +837,419 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n     return reply;\n }\n \n-\n-static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+struct ImportData\n {\n-    try {\n-        // First ensure scriptPubKey has either a script or JSON with \"address\" string\n-        const UniValue& scriptPubKey = data[\"scriptPubKey\"];\n-        bool isScript = scriptPubKey.getType() == UniValue::VSTR;\n-        if (!isScript && !(scriptPubKey.getType() == UniValue::VOBJ && scriptPubKey.exists(\"address\"))) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"scriptPubKey must be string with script or JSON with address string\");\n-        }\n-        const std::string& output = isScript ? scriptPubKey.get_str() : scriptPubKey[\"address\"].get_str();\n-\n-        // Optional fields.\n-        const std::string& strRedeemScript = data.exists(\"redeemscript\") ? data[\"redeemscript\"].get_str() : \"\";\n-        const std::string& witness_script_hex = data.exists(\"witnessscript\") ? data[\"witnessscript\"].get_str() : \"\";\n-        const UniValue& pubKeys = data.exists(\"pubkeys\") ? data[\"pubkeys\"].get_array() : UniValue();\n-        const UniValue& keys = data.exists(\"keys\") ? data[\"keys\"].get_array() : UniValue();\n-        const bool internal = data.exists(\"internal\") ? data[\"internal\"].get_bool() : false;\n-        const bool watchOnly = data.exists(\"watchonly\") ? data[\"watchonly\"].get_bool() : false;\n-        const std::string& label = data.exists(\"label\") ? data[\"label\"].get_str() : \"\";\n-\n-        // Generate the script and destination for the scriptPubKey provided\n-        CScript script;\n-        CTxDestination dest;\n-\n-        if (!isScript) {\n-            dest = DecodeDestination(output);\n-            if (!IsValidDestination(dest)) {\n-                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid address\");\n-            }\n-            script = GetScriptForDestination(dest);\n-        } else {\n-            if (!IsHex(output)) {\n-                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid scriptPubKey\");\n-            }\n+    // Input data\n+    std::unique_ptr<CScript> redeemscript; //!< Provided redeemScript; will be moved to `import_scripts` if relevant.\n+    std::unique_ptr<CScript> witnessscript; //!< Provided witnessScript; will be moved to `import_scripts` if relevant.\n \n-            std::vector<unsigned char> vData(ParseHex(output));\n-            script = CScript(vData.begin(), vData.end());\n-            if (!ExtractDestination(script, dest) && !internal) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Internal must be set to true for nonstandard scriptPubKey imports.\");\n-            }\n-        }\n+    // Output data\n+    std::set<CScript> import_scripts;\n+    std::map<CKeyID, bool> used_keys; //!< Import these private keys if available (the value indicates whether if the key is required for solvability)\n+    std::map<CKeyID, KeyOriginInfo> key_origins;\n+};\n \n-        // Watchonly and private keys\n-        if (watchOnly && keys.size()) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Watch-only addresses should not include private keys\");\n+enum class ScriptContext\n+{\n+    TOP, //! Top-level scriptPubKey\n+    P2SH, //! P2SH redeemScript\n+    WITNESS_V0, //! P2WSH witnessScript\n+};\n+\n+// Analyse the provided scriptPubKey, determining which keys and which redeem scripts from the ImportData struct are needed to spend it, and mark them as used.\n+// Returns an error string, or the empty string for success.\n+static std::string RecurseImportData(const CScript& script, ImportData& import_data, const ScriptContext script_ctx)\n+{\n+    // Use Solver to obtain script type and parsed pubkeys or hashes:\n+    std::vector<std::vector<unsigned char>> solverdata;\n+    txnouttype script_type = Solver(script, solverdata);\n+\n+    switch (script_type) {\n+    case TX_PUBKEY: {\n+        CPubKey pubkey(solverdata[0].begin(), solverdata[0].end());\n+        import_data.used_keys.emplace(pubkey.GetID(), false);\n+        return \"\";\n+    }\n+    case TX_PUBKEYHASH: {\n+        CKeyID id = CKeyID(uint160(solverdata[0]));\n+        import_data.used_keys[id] = true;\n+        return \"\";\n+    }\n+    case TX_SCRIPTHASH: {\n+        if (script_ctx == ScriptContext::P2SH) throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Trying to nest P2SH inside another P2SH\");\n+        if (script_ctx == ScriptContext::WITNESS_V0) throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Trying to nest P2SH inside a P2WSH\");\n+        assert(script_ctx == ScriptContext::TOP);\n+        CScriptID id = CScriptID(uint160(solverdata[0]));\n+        auto subscript = std::move(import_data.redeemscript);\n+        if (!subscript) return \"missing redeemscript\";\n+        if (CScriptID(*subscript) != id) return \"redeemScript does not match the scriptPubKey\";\n+        import_data.import_scripts.emplace(*subscript);\n+        return RecurseImportData(*subscript, import_data, ScriptContext::P2SH);\n+    }\n+    case TX_MULTISIG: {\n+        for (size_t i = 1; i + 1< solverdata.size(); ++i) {\n+            CPubKey pubkey(solverdata[i].begin(), solverdata[i].end());\n+            import_data.used_keys.emplace(pubkey.GetID(), false);\n         }\n-\n-        // Internal addresses should not have a label\n-        if (internal && data.exists(\"label\")) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Internal addresses should not have a label\");\n+        return \"\";\n+    }\n+    case TX_WITNESS_V0_SCRIPTHASH: {\n+        if (script_ctx == ScriptContext::WITNESS_V0) throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Trying to nest P2WSH inside another P2WSH\");\n+        uint256 fullid(solverdata[0]);\n+        CScriptID id;\n+        CRIPEMD160().Write(fullid.begin(), fullid.size()).Finalize(id.begin());\n+        auto subscript = std::move(import_data.witnessscript);\n+        if (!subscript) return \"missing witnessscript\";\n+        if (CScriptID(*subscript) != id) return \"witnessScript does not match the scriptPubKey or redeemScript\";\n+        if (script_ctx == ScriptContext::TOP) {\n+            import_data.import_scripts.emplace(script); // Special rule for IsMine: native P2WSH requires the TOP script imported (see script/ismine.cpp)\n         }\n-\n-        // Force users to provide the witness script in its field rather than redeemscript\n-        if (!strRedeemScript.empty() && script.IsPayToWitnessScriptHash()) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"P2WSH addresses have an empty redeemscript. Please provide the witnessscript instead.\");\n+        import_data.import_scripts.emplace(*subscript);\n+        return RecurseImportData(*subscript, import_data, ScriptContext::WITNESS_V0);\n+    }\n+    case TX_WITNESS_V0_KEYHASH: {\n+        if (script_ctx == ScriptContext::WITNESS_V0) throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Trying to nest P2WPKH inside P2WSH\");\n+        CKeyID id = CKeyID(uint160(solverdata[0]));\n+        import_data.used_keys[id] = true;\n+        if (script_ctx == ScriptContext::TOP) {\n+            import_data.import_scripts.emplace(script); // Special rule for IsMine: native P2WPKH requires the TOP script imported (see script/ismine.cpp)\n         }\n+        return \"\";\n+    }\n+    case TX_NULL_DATA:\n+        return \"unspendable script\";\n+    case TX_NONSTANDARD:\n+    case TX_WITNESS_UNKNOWN:\n+    default:\n+        return \"unrecognized script\";\n+    }\n+}\n \n-        CScript scriptpubkey_script = script;\n-        CTxDestination scriptpubkey_dest = dest;\n-        bool allow_p2wpkh = true;\n-\n-        // P2SH\n-        if (!strRedeemScript.empty() && script.IsPayToScriptHash()) {\n-            // Check the redeemScript is valid\n-            if (!IsHex(strRedeemScript)) {\n-                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid redeem script: must be hex string\");\n-            }\n-\n-            // Import redeem script.\n-            std::vector<unsigned char> vData(ParseHex(strRedeemScript));\n-            CScript redeemScript = CScript(vData.begin(), vData.end());\n-            CScriptID redeem_id(redeemScript);\n-\n-            // Check that the redeemScript and scriptPubKey match\n-            if (GetScriptForDestination(redeem_id) != script) {\n-                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"The redeemScript does not match the scriptPubKey\");\n-            }\n-\n-            pwallet->MarkDirty();\n-\n-            if (!pwallet->AddWatchOnly(redeemScript, timestamp)) {\n-                throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n-            }\n-\n-            if (!pwallet->HaveCScript(redeem_id) && !pwallet->AddCScript(redeemScript)) {\n-                throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding p2sh redeemScript to wallet\");\n-            }\n+static UniValue ProcessImportLegacy(ImportData& import_data, std::map<CKeyID, CPubKey>& pubkey_map, std::map<CKeyID, CKey>& privkey_map, std::set<CScript>& script_pub_keys, bool& have_solving_data, const UniValue& data, std::vector<CKeyID>& ordered_pubkeys)\n+{\n+    UniValue warnings(UniValue::VARR);\n \n-            // Now set script to the redeemScript so we parse the inner script as P2WSH or P2WPKH below\n-            script = redeemScript;\n-            ExtractDestination(script, dest);\n+    // First ensure scriptPubKey has either a script or JSON with \"address\" string\n+    const UniValue& scriptPubKey = data[\"scriptPubKey\"];\n+    bool isScript = scriptPubKey.getType() == UniValue::VSTR;\n+    if (!isScript && !(scriptPubKey.getType() == UniValue::VOBJ && scriptPubKey.exists(\"address\"))) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"scriptPubKey must be string with script or JSON with address string\");\n+    }\n+    const std::string& output = isScript ? scriptPubKey.get_str() : scriptPubKey[\"address\"].get_str();\n+\n+    // Optional fields.\n+    const std::string& strRedeemScript = data.exists(\"redeemscript\") ? data[\"redeemscript\"].get_str() : \"\";\n+    const std::string& witness_script_hex = data.exists(\"witnessscript\") ? data[\"witnessscript\"].get_str() : \"\";\n+    const UniValue& pubKeys = data.exists(\"pubkeys\") ? data[\"pubkeys\"].get_array() : UniValue();\n+    const UniValue& keys = data.exists(\"keys\") ? data[\"keys\"].get_array() : UniValue();\n+    const bool internal = data.exists(\"internal\") ? data[\"internal\"].get_bool() : false;\n+    const bool watchOnly = data.exists(\"watchonly\") ? data[\"watchonly\"].get_bool() : false;\n+\n+    // Generate the script and destination for the scriptPubKey provided\n+    CScript script;\n+    CTxDestination dest;\n+    if (!isScript) {\n+        dest = DecodeDestination(output);\n+        if (!IsValidDestination(dest)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid address \\\"\" + output + \"\\\"\");\n         }\n+        script = GetScriptForDestination(dest);\n+    } else {\n+        if (!IsHex(output)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid scriptPubKey \\\"\" + output + \"\\\"\");\n+        }\n+        std::vector<unsigned char> vData(ParseHex(output));\n+        script = CScript(vData.begin(), vData.end());\n+        if (!ExtractDestination(script, dest) && !internal) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Internal must be set to true for nonstandard scriptPubKey imports.\");\n+        }\n+    }\n+    script_pub_keys.emplace(script);\n \n-        // (P2SH-)P2WSH\n-        if (!witness_script_hex.empty() && script.IsPayToWitnessScriptHash()) {\n-            if (!IsHex(witness_script_hex)) {\n-                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid witness script: must be hex string\");\n-            }\n-\n-            // Generate the scripts\n-            std::vector<unsigned char> witness_script_parsed(ParseHex(witness_script_hex));\n-            CScript witness_script = CScript(witness_script_parsed.begin(), witness_script_parsed.end());\n-            CScriptID witness_id(witness_script);\n+    // Parse all arguments\n+    if (strRedeemScript.size()) {\n+        if (!IsHex(strRedeemScript)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid redeem script \\\"\" + strRedeemScript + \"\\\": must be hex string\");\n+        }\n+        auto parsed_redeemscript = ParseHex(strRedeemScript);\n+        import_data.redeemscript = MakeUnique<CScript>(parsed_redeemscript.begin(), parsed_redeemscript.end());\n+    }\n+    if (witness_script_hex.size()) {\n+        if (!IsHex(witness_script_hex)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid witness script \\\"\" + witness_script_hex + \"\\\": must be hex string\");\n+        }\n+        auto parsed_witnessscript = ParseHex(witness_script_hex);\n+        import_data.witnessscript = MakeUnique<CScript>(parsed_witnessscript.begin(), parsed_witnessscript.end());\n+    }\n+    for (size_t i = 0; i < pubKeys.size(); ++i) {\n+        const auto& str = pubKeys[i].get_str();\n+        if (!IsHex(str)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Pubkey \\\"\" + str + \"\\\" must be a hex string\");\n+        }\n+        auto parsed_pubkey = ParseHex(str);\n+        CPubKey pubkey(parsed_pubkey.begin(), parsed_pubkey.end());\n+        if (!pubkey.IsFullyValid()) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Pubkey \\\"\" + str + \"\\\" is not a valid public key\");\n+        }\n+        pubkey_map.emplace(pubkey.GetID(), pubkey);\n+        ordered_pubkeys.push_back(pubkey.GetID());\n+    }\n+    for (size_t i = 0; i < keys.size(); ++i) {\n+        const auto& str = keys[i].get_str();\n+        CKey key = DecodeSecret(str);\n+        if (!key.IsValid()) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key encoding\");\n+        }\n+        CPubKey pubkey = key.GetPubKey();\n+        CKeyID id = pubkey.GetID();\n+        if (pubkey_map.count(id)) {\n+            pubkey_map.erase(id);\n+        }\n+        privkey_map.emplace(id, key);\n+    }\n \n-            // Check that the witnessScript and scriptPubKey match\n-            if (GetScriptForDestination(WitnessV0ScriptHash(witness_script)) != script) {\n-                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"The witnessScript does not match the scriptPubKey or redeemScript\");\n-            }\n+    // Verify and process input data\n+    have_solving_data = import_data.redeemscript || import_data.witnessscript || pubkey_map.size() || privkey_map.size();\n+    if (have_solving_data) {\n+        // Match up data in import_data with the scriptPubKey in script.\n+        auto error = RecurseImportData(script, import_data, ScriptContext::TOP);\n \n-            // Add the witness script as watch only only if it is not for P2SH-P2WSH\n-            if (!scriptpubkey_script.IsPayToScriptHash() && !pwallet->AddWatchOnly(witness_script, timestamp)) {\n-                throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n-            }\n+        // Verify whether the watchonly option corresponds to the availability of private keys.\n+        bool spendable = std::all_of(import_data.used_keys.begin(), import_data.used_keys.end(), [&](const std::pair<CKeyID, bool>& used_key){ return privkey_map.count(used_key.first) > 0; });\n+        if (!watchOnly && !spendable) {\n+            warnings.push_back(\"Some private keys are missing, outputs will be considered watchonly. If this is intentional, specify the watchonly flag.\");\n+        }\n+        if (watchOnly && spendable) {\n+            warnings.push_back(\"All private keys are provided, outputs will be considered spendable. If this is intentional, do not specify the watchonly flag.\");\n+        }\n \n-            if (!pwallet->HaveCScript(witness_id) && !pwallet->AddCScript(witness_script)) {\n-                throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding p2wsh witnessScript to wallet\");\n+        // Check that all required keys for solvability are provided.\n+        if (error.empty()) {\n+            for (const auto& require_key : import_data.used_keys) {\n+                if (!require_key.second) continue; // Not a required key\n+                if (pubkey_map.count(require_key.first) == 0 && privkey_map.count(require_key.first) == 0) {\n+                    error = \"some required keys are missing\";\n+                }\n             }\n-\n-            // Now set script to the witnessScript so we parse the inner script as P2PK or P2PKH below\n-            script = witness_script;\n-            ExtractDestination(script, dest);\n-            allow_p2wpkh = false; // P2WPKH cannot be embedded in P2WSH\n         }\n \n-        // (P2SH-)P2PK/P2PKH/P2WPKH\n-        if (dest.type() == typeid(CKeyID) || dest.type() == typeid(WitnessV0KeyHash)) {\n-            if (!allow_p2wpkh && dest.type() == typeid(WitnessV0KeyHash)) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"P2WPKH cannot be embedded in P2WSH\");\n-            }\n-            if (keys.size() > 1 || pubKeys.size() > 1) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"More than one key given for one single-key address\");\n-            }\n-            CPubKey pubkey;\n-            if (keys.size()) {\n-                pubkey = DecodeSecret(keys[0].get_str()).GetPubKey();\n-            }\n-            if (pubKeys.size()) {\n-                const std::string& strPubKey = pubKeys[0].get_str();\n-                if (!IsHex(strPubKey)) {\n-                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Pubkey must be a hex string\");\n-                }\n-                std::vector<unsigned char> vData(ParseHex(pubKeys[0].get_str()));\n-                CPubKey pubkey_temp(vData.begin(), vData.end());\n-                if (pubkey.size() && pubkey_temp != pubkey) {\n-                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Private key does not match public key for address\");\n+        if (!error.empty()) {\n+            warnings.push_back(\"Importing as non-solvable: \" + error + \". If this is intentional, don't provide any keys, pubkeys, witnessscript, or redeemscript.\");\n+            import_data = ImportData();\n+            pubkey_map.clear();\n+            privkey_map.clear();\n+            have_solving_data = false;\n+        } else {\n+            // RecurseImportData() removes any relevant redeemscript/witnessscript from import_data, so we can use that to discover if a superfluous one was provided.\n+            if (import_data.redeemscript) warnings.push_back(\"Ignoring redeemscript as this is not a P2SH script.\");\n+            if (import_data.witnessscript) warnings.push_back(\"Ignoring witnessscript as this is not a (P2SH-)P2WSH script.\");\n+            for (auto it = privkey_map.begin(); it != privkey_map.end(); ) {\n+                auto oldit = it++;\n+                if (import_data.used_keys.count(oldit->first) == 0) {\n+                    warnings.push_back(\"Ignoring irrelevant private key.\");\n+                    privkey_map.erase(oldit);\n                 }\n-                pubkey = pubkey_temp;\n             }\n-            if (pubkey.size() > 0) {\n-                if (!pubkey.IsFullyValid()) {\n-                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Pubkey is not a valid public key\");\n+            for (auto it = pubkey_map.begin(); it != pubkey_map.end(); ) {\n+                auto oldit = it++;\n+                auto key_data_it = import_data.used_keys.find(oldit->first);\n+                if (key_data_it == import_data.used_keys.end() || !key_data_it->second) {\n+                    warnings.push_back(\"Ignoring public key \\\"\" + HexStr(oldit->first) + \"\\\" as it doesn't appear inside P2PKH or P2WPKH.\");\n+                    pubkey_map.erase(oldit);\n                 }\n+            }\n+        }\n+    }\n \n-                // Check the key corresponds to the destination given\n-                std::vector<CTxDestination> destinations = GetAllDestinationsForKey(pubkey);\n-                if (std::find(destinations.begin(), destinations.end(), dest) == destinations.end()) {\n-                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Key does not match address destination\");\n-                }\n+    return warnings;\n+}\n \n-                // This is necessary to force the wallet to import the pubKey\n-                CScript scriptRawPubKey = GetScriptForRawPubKey(pubkey);\n+static UniValue ProcessImportDescriptor(ImportData& import_data, std::map<CKeyID, CPubKey>& pubkey_map, std::map<CKeyID, CKey>& privkey_map, std::set<CScript>& script_pub_keys, bool& have_solving_data, const UniValue& data, std::vector<CKeyID>& ordered_pubkeys)\n+{\n+    UniValue warnings(UniValue::VARR);\n \n-                if (::IsMine(*pwallet, scriptRawPubKey) == ISMINE_SPENDABLE) {\n-                    throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the private key for this address or script\");\n-                }\n+    const std::string& descriptor = data[\"desc\"].get_str();\n+    FlatSigningProvider keys;\n+    auto parsed_desc = Parse(descriptor, keys);\n+    if (!parsed_desc) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Descriptor is invalid\");\n+    }\n \n-                pwallet->MarkDirty();\n+    have_solving_data = parsed_desc->IsSolvable();\n+    const bool watch_only = data.exists(\"watchonly\") ? data[\"watchonly\"].get_bool() : false;\n \n-                if (!pwallet->AddWatchOnly(scriptRawPubKey, timestamp)) {\n-                    throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n-                }\n-            }\n+    int64_t range_start = 0, range_end = 0;\n+    if (!parsed_desc->IsRange() && data.exists(\"range\")) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Range should not be specified for an un-ranged descriptor\");\n+    } else if (parsed_desc->IsRange()) {\n+        if (!data.exists(\"range\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Descriptor is ranged, please specify the range\");\n         }\n-\n-        // Import the address\n-        if (::IsMine(*pwallet, scriptpubkey_script) == ISMINE_SPENDABLE) {\n-            throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the private key for this address or script\");\n+        const UniValue& range = data[\"range\"];\n+        range_start = range.exists(\"start\") ? range[\"start\"].get_int64() : 0;\n+        if (!range.exists(\"end\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"End of range for descriptor must be specified\");\n         }\n+        range_end = range[\"end\"].get_int64();\n+    }\n \n-        pwallet->MarkDirty();\n+    const UniValue& priv_keys = data.exists(\"keys\") ? data[\"keys\"].get_array() : UniValue();\n+\n+    // Expand all descriptors to get public keys and scripts.\n+    // TODO: get private keys from descriptors too\n+    for (int i = range_start; i <= range_end; ++i) {\n+        FlatSigningProvider out_keys;\n+        std::vector<CScript> scripts_temp;\n+        parsed_desc->Expand(i, keys, scripts_temp, out_keys);\n+        std::copy(scripts_temp.begin(), scripts_temp.end(), std::inserter(script_pub_keys, script_pub_keys.end()));\n+        for (const auto& key_pair : out_keys.pubkeys) {\n+            ordered_pubkeys.push_back(key_pair.first);\n+        }\n \n-        if (!pwallet->AddWatchOnly(scriptpubkey_script, timestamp)) {\n-            throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n+        for (auto const& x : out_keys.scripts) {\n+            import_data.import_scripts.emplace(x.second);\n         }\n \n-        if (!watchOnly && !pwallet->HaveCScript(CScriptID(scriptpubkey_script)) && !pwallet->AddCScript(scriptpubkey_script)) {\n-            throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding scriptPubKey script to wallet\");\n+        std::copy(out_keys.pubkeys.begin(), out_keys.pubkeys.end(), std::inserter(pubkey_map, pubkey_map.end()));\n+        std::copy(out_keys.origins.begin(), out_keys.origins.end(), std::inserter(import_data.key_origins, import_data.key_origins.end()));\n+    }\n+\n+    for (size_t i = 0; i < priv_keys.size(); ++i) {\n+        const auto& str = priv_keys[i].get_str();\n+        CKey key = DecodeSecret(str);\n+        if (!key.IsValid()) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key encoding\");\n         }\n+        CPubKey pubkey = key.GetPubKey();\n+        CKeyID id = pubkey.GetID();\n \n-        // if not internal add to address book or update label\n-        if (!internal) {\n-            assert(IsValidDestination(scriptpubkey_dest));\n-            pwallet->SetAddressBook(scriptpubkey_dest, label, \"receive\");\n+        // Check if this private key corresponds to a public key from the descriptor\n+        if (!pubkey_map.count(id)) {\n+            warnings.push_back(\"Ignoring irrelevant private key.\");\n+        } else {\n+            privkey_map.emplace(id, key);\n         }\n+    }\n \n-        // Import private keys.\n-        for (size_t i = 0; i < keys.size(); i++) {\n-            const std::string& strPrivkey = keys[i].get_str();\n+    // Check if all the public keys have corresponding private keys in the import for spendability.\n+    // This does not take into account threshold multisigs which could be spendable without all keys\n+    bool spendable = std::all_of(pubkey_map.begin(), pubkey_map.end(), [&](const std::pair<CKeyID, CPubKey>& used_key){ return privkey_map.count(used_key.first) > 0; });\n+    if (!watch_only && !spendable) {\n+        warnings.push_back(\"Some private keys are missing, outputs will be considered watchonly. If this is intentional, specify the watchonly flag.\");\n+    }\n+    if (watch_only && spendable) {\n+        warnings.push_back(\"All private keys are provided, outputs will be considered spendable. If this is intentional, do not specify the watchonly flag.\");\n+    }\n \n-            // Checks.\n-            CKey key = DecodeSecret(strPrivkey);\n+    return warnings;\n+}\n \n-            if (!key.IsValid()) {\n-                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key encoding\");\n-            }\n+static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    try {\n+        bool watch_only = data.exists(\"watchonly\") ? data[\"watchonly\"].get_bool() : false;",
      "path": "src/wallet/rpcdump.cpp",
      "position": null,
      "original_position": 492,
      "commit_id": "264425be1f889ff933ecd4eafb74f1a7a0257eac",
      "original_commit_id": "9ec4aaca284673e1c92a02fdc4dea9a1a3e6038c",
      "in_reply_to_id": null,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Should be dropped since unused?",
      "created_at": "2018-12-18T16:23:17Z",
      "updated_at": "2019-08-04T14:36:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14912#discussion_r242606157",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/242606157"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14912"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1150,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/242606739",
      "pull_request_review_id": 186158164,
      "id": 242606739,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MjYwNjczOQ==",
      "diff_hunk": "@@ -1263,3 +1444,145 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n \n     return response;\n }\n+\n+UniValue signerfetchkeys(const JSONRPCRequest& request)\n+{\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 1) {\n+        throw std::runtime_error(\n+            \"signerfetchkeys ( fingerprint )\\n\"\n+            \"Obtains keys from external signer and imports them into the wallet.\\n\"\n+            \"Call enumeratesigners before using this.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"fingerprint\\\"   (string, optional) Master key fingerprint of signer\\n\"\n+            \"\\nResult (same as for importmulti):\\n\"\n+            \"[{ \\\"success\\\": true }\"\n+        );\n+    }\n+\n+    ExternalSigner *signer = GetSignerForJSONRPCRequest(request, 0, pwallet);\n+\n+    UniValue descriptors = UniValue(UniValue::VARR);\n+    std::string desc_prefix = \"\";\n+    std::string desc_suffix = \"\";\n+    std::string purpose = \"\";\n+    switch(pwallet->m_default_address_type) {\n+        case OutputType::LEGACY: {\n+            desc_prefix = \"pkh(\";\n+            desc_suffix = \")\";\n+            purpose = \"44h\";\n+            break;\n+        }\n+        case OutputType::P2SH_SEGWIT: {\n+            desc_prefix = \"sh(wpkh(\";\n+            desc_suffix = \"))\";\n+            purpose = \"49h\";\n+            break;\n+        }\n+        case OutputType::BECH32: {\n+            desc_prefix = \"wpkh(\";\n+            desc_suffix = \")\";\n+            purpose = \"84h\";\n+            break;\n+        }\n+        case OutputType::CHANGE_AUTO: {\n+            assert(false);\n+        }\n+    }\n+\n+    const std::string receive_desc = desc_prefix + signer->m_fingerprint + \"/\" + purpose + \"/\" + (signer->m_mainnet ? \"0h\" : \"1h\") + \"/0h/0/*\" + desc_suffix;\n+    UniValue receive_descriptors = signer->getKeys(receive_desc);\n+    if (!receive_descriptors.isArray()) JSONRPCError(RPC_WALLET_ERROR, \"Expected an array of receive descriptors\");\n+    for (const UniValue& descriptor : receive_descriptors.getValues()) {\n+        descriptors.push_back(descriptor);\n+    }\n+\n+\n+    switch(pwallet->m_default_change_type) {\n+        case OutputType::LEGACY: {\n+            desc_prefix = \"pkh(\";\n+            desc_suffix = \")\";\n+            purpose = \"44h\";\n+            break;\n+        }\n+        case OutputType::P2SH_SEGWIT: {\n+            desc_prefix = \"sh(wpkh(\";\n+            desc_suffix = \"))\";\n+            purpose = \"49h\";\n+            break;\n+        }\n+        case OutputType::BECH32: {\n+            desc_prefix = \"wpkh(\";\n+            desc_suffix = \")\";\n+            purpose = \"84h\";\n+            break;\n+        }\n+        case OutputType::CHANGE_AUTO: {\n+            // Use same values as for receive descriptor\n+            break;\n+        }\n+    }\n+\n+    const std::string change_desc = desc_prefix + signer->m_fingerprint + \"/\" + purpose + \"/\" + (signer->m_mainnet ? \"0h\" : \"1h\") + \"/0h/1/*\" + desc_suffix;\n+    UniValue change_descriptors = signer->getKeys(change_desc);\n+    if (!change_descriptors.isArray()) JSONRPCError(RPC_WALLET_ERROR, \"Expected an array of change descriptors\");\n+    for (const UniValue& descriptor : change_descriptors.getValues()) {\n+        descriptors.push_back(descriptor);\n+    }\n+\n+    if (receive_descriptors.size() != change_descriptors.size()) JSONRPCError(RPC_WALLET_ERROR, \"Expected same number of receive and change descriptors\");\n+\n+    // Use importmulti to process the descriptors:\n+    UniValue importdata(UniValue::VARR);\n+\n+    uint64_t keypool_target_size = 0;\n+    keypool_target_size = gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE);",
      "path": "src/wallet/rpcdump.cpp",
      "position": null,
      "original_position": 770,
      "commit_id": "264425be1f889ff933ecd4eafb74f1a7a0257eac",
      "original_commit_id": "9ec4aaca284673e1c92a02fdc4dea9a1a3e6038c",
      "in_reply_to_id": null,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Make signedness changing implicit conversion explicit? Also, remove redundant initialization to zero on the line above? Merge the two lines.",
      "created_at": "2018-12-18T16:24:28Z",
      "updated_at": "2019-08-04T14:36:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14912#discussion_r242606739",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/242606739"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14912"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1548,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/242608963",
      "pull_request_review_id": 186161053,
      "id": 242608963,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MjYwODk2Mw==",
      "diff_hunk": "@@ -1198,6 +1200,24 @@ void runCommand(const std::string& strCommand)\n         LogPrintf(\"runCommand error: system(%s) returned %d\\n\", strCommand, nErr);\n }\n \n+UniValue runCommandParseJSON(const std::string& strCommand)\n+{\n+    if (strCommand.empty()) return UniValue::VNULL;\n+\n+    std::array<char, 128> buffer;",
      "path": "src/util/system.cpp",
      "position": null,
      "original_position": 20,
      "commit_id": "264425be1f889ff933ecd4eafb74f1a7a0257eac",
      "original_commit_id": "9ec4aaca284673e1c92a02fdc4dea9a1a3e6038c",
      "in_reply_to_id": null,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Initialize to zero?",
      "created_at": "2018-12-18T16:29:39Z",
      "updated_at": "2019-08-04T14:36:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14912#discussion_r242608963",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/242608963"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14912"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1153,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/242609613",
      "pull_request_review_id": 186161866,
      "id": 242609613,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MjYwOTYxMw==",
      "diff_hunk": "@@ -3988,6 +4010,37 @@ UniValue walletprocesspsbt(const JSONRPCRequest& request)\n     bool bip32derivs = request.params[3].isNull() ? false : request.params[3].get_bool();\n     bool complete = FillPSBT(pwallet, psbtx, nHashType, sign, bip32derivs);\n \n+    // Process again with external signer if needed\n+    if (!complete && sign && !wallet->m_external_signers.empty()) {\n+        ExternalSigner *signer = GetSignerForJSONRPCRequest(request, 4, pwallet);\n+        if (signer && !bip32derivs) JSONRPCError(RPC_WALLET_ERROR, \"Using signer requires bip32derivs argument to be true\");\n+\n+        // Check if signer fingerpint matches any input master key fingerprint",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 112,
      "commit_id": "264425be1f889ff933ecd4eafb74f1a7a0257eac",
      "original_commit_id": "9ec4aaca284673e1c92a02fdc4dea9a1a3e6038c",
      "in_reply_to_id": null,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Should be \"fingerprint\" :-)",
      "created_at": "2018-12-18T16:31:09Z",
      "updated_at": "2019-08-04T14:36:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14912#discussion_r242609613",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/242609613"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14912"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4018,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/242612528",
      "pull_request_review_id": 186165666,
      "id": 242612528,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MjYxMjUyOA==",
      "diff_hunk": "@@ -1198,6 +1200,24 @@ void runCommand(const std::string& strCommand)\n         LogPrintf(\"runCommand error: system(%s) returned %d\\n\", strCommand, nErr);\n }\n \n+UniValue runCommandParseJSON(const std::string& strCommand)\n+{\n+    if (strCommand.empty()) return UniValue::VNULL;\n+\n+    std::array<char, 128> buffer;\n+    std::string result;\n+    std::unique_ptr<FILE, decltype(&pclose)> pipe(popen(strCommand.c_str(), \"r\"), pclose);",
      "path": "src/util/system.cpp",
      "position": null,
      "original_position": 22,
      "commit_id": "264425be1f889ff933ecd4eafb74f1a7a0257eac",
      "original_commit_id": "9ec4aaca284673e1c92a02fdc4dea9a1a3e6038c",
      "in_reply_to_id": null,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I haven't reviewed this use of `popen(…)` closer, but please note the recommendations/risks with regards to `popen(…)` used described in the CERT secure coding guidelines (more specifically rule ENV33-C).",
      "created_at": "2018-12-18T16:38:09Z",
      "updated_at": "2019-08-04T14:36:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14912#discussion_r242612528",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/242612528"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14912"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1155,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/242612922",
      "pull_request_review_id": 186166112,
      "id": 242612922,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MjYxMjkyMg==",
      "diff_hunk": "@@ -587,6 +587,21 @@ bool ParseHDKeypath(const std::string& keypath_str, std::vector<uint32_t>& keypa\n     return true;\n }\n \n+std::string FormatKeyPath(const std::vector<uint32_t>& path)\n+{\n+    std::string ret;\n+    for (auto i : path) {\n+        ret += strprintf(\"/%i\", (i << 1) >> 1);\n+        if (i >> 31) ret += '\\'';\n+    }\n+    return ret;\n+}\n+\n+std::string WriteHdKeypath(const std::vector<uint32_t> keypath)",
      "path": "src/util/strencodings.cpp",
      "position": null,
      "original_position": 14,
      "commit_id": "264425be1f889ff933ecd4eafb74f1a7a0257eac",
      "original_commit_id": "9ec4aaca284673e1c92a02fdc4dea9a1a3e6038c",
      "in_reply_to_id": null,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`keypath` should be const reference?",
      "created_at": "2018-12-18T16:38:57Z",
      "updated_at": "2019-08-04T14:36:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14912#discussion_r242612922",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/242612922"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14912"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 600,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/242614487",
      "pull_request_review_id": 186168170,
      "id": 242614487,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MjYxNDQ4Nw==",
      "diff_hunk": "@@ -4113,6 +4166,111 @@ UniValue walletcreatefundedpsbt(const JSONRPCRequest& request)\n     return result;\n }\n \n+static UniValue enumeratesigners(const JSONRPCRequest& request)\n+{\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 0) {\n+        throw std::runtime_error(\n+            \"enumeratesigners\\n\"\n+            \"Returns a list of external signers from -signer and associates them\\n\"\n+            \"with the wallet until you stop bitcoind.\\n\"\n+            \"{\\n\"\n+            \"  \\\"signers\\\" : [                                (json array of objects)\\n\"\n+            \"    {\\n\"\n+            \"      \\\"masterkeyfingerprint\\\" : \\\"fingerprint\\\" (string) Master key fingerprint\\n\"\n+            \"    }\\n\"\n+            \"    ,...\\n\"\n+            \"  ]\\n\"\n+            \"}\\n\"\n+        );\n+    }\n+\n+    const std::string command = gArgs.GetArg(\"-signer\", DEFAULT_EXTERNAL_SIGNER);\n+    if (command == \"\") throw JSONRPCError(RPC_WALLET_ERROR, \"Error: restart bitcoind with -signer=<cmd>\");",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 171,
      "commit_id": "264425be1f889ff933ecd4eafb74f1a7a0257eac",
      "original_commit_id": "9ec4aaca284673e1c92a02fdc4dea9a1a3e6038c",
      "in_reply_to_id": null,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Nit: Could use `command.empty()`? :-)",
      "created_at": "2018-12-18T16:42:48Z",
      "updated_at": "2019-08-04T14:36:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14912#discussion_r242614487",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/242614487"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14912"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4168,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/242614853",
      "pull_request_review_id": 186168654,
      "id": 242614853,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MjYxNDg1Mw==",
      "diff_hunk": "@@ -0,0 +1,45 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <wallet/externalsigner.h>\n+#include <util/system.h>\n+\n+ExternalSigner::ExternalSigner(const std::string& command, const std::string& fingerprint, bool mainnet): m_command(command), m_fingerprint(fingerprint), m_mainnet(mainnet) {}\n+\n+UniValue ExternalSigner::Enumerate(const std::string& command, std::vector<ExternalSigner>& signers, bool mainnet)\n+{\n+    // Call <command> enumerate\n+    const UniValue result = runCommandParseJSON(command + \" enumerate\");\n+    if (!result.isArray())\n+        throw ExternalSignerException(strprintf(\"'%s' received invalid response, expected array of signers\", command));\n+    for (UniValue signer : result.getValues()) {",
      "path": "src/wallet/externalsigner.cpp",
      "position": 21,
      "original_position": 16,
      "commit_id": "264425be1f889ff933ecd4eafb74f1a7a0257eac",
      "original_commit_id": "9ec4aaca284673e1c92a02fdc4dea9a1a3e6038c",
      "in_reply_to_id": null,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Should be const reference? :-)",
      "created_at": "2018-12-18T16:43:39Z",
      "updated_at": "2019-08-04T14:36:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14912#discussion_r242614853",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/242614853"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14912"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 21,
      "original_line": 21,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/242614951",
      "pull_request_review_id": 186168772,
      "id": 242614951,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MjYxNDk1MQ==",
      "diff_hunk": "@@ -0,0 +1,45 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <wallet/externalsigner.h>\n+#include <util/system.h>\n+\n+ExternalSigner::ExternalSigner(const std::string& command, const std::string& fingerprint, bool mainnet): m_command(command), m_fingerprint(fingerprint), m_mainnet(mainnet) {}\n+\n+UniValue ExternalSigner::Enumerate(const std::string& command, std::vector<ExternalSigner>& signers, bool mainnet)\n+{\n+    // Call <command> enumerate\n+    const UniValue result = runCommandParseJSON(command + \" enumerate\");\n+    if (!result.isArray())\n+        throw ExternalSignerException(strprintf(\"'%s' received invalid response, expected array of signers\", command));\n+    for (UniValue signer : result.getValues()) {\n+        const UniValue& fingerprint = find_value(signer, \"fingerprint\");\n+        if (result.isNull())\n+            throw ExternalSignerException(strprintf(\"'%s' received invalid response, missing signer fingerprint\", command));\n+        std::string fingerprintStr = fingerprint.get_str();",
      "path": "src/wallet/externalsigner.cpp",
      "position": 25,
      "original_position": 20,
      "commit_id": "264425be1f889ff933ecd4eafb74f1a7a0257eac",
      "original_commit_id": "9ec4aaca284673e1c92a02fdc4dea9a1a3e6038c",
      "in_reply_to_id": null,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Should be const reference? :-)",
      "created_at": "2018-12-18T16:43:54Z",
      "updated_at": "2019-08-04T14:36:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14912#discussion_r242614951",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/242614951"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14912"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 25,
      "original_line": 25,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/242615222",
      "pull_request_review_id": 186169074,
      "id": 242615222,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MjYxNTIyMg==",
      "diff_hunk": "@@ -0,0 +1,45 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <wallet/externalsigner.h>\n+#include <util/system.h>\n+\n+ExternalSigner::ExternalSigner(const std::string& command, const std::string& fingerprint, bool mainnet): m_command(command), m_fingerprint(fingerprint), m_mainnet(mainnet) {}\n+\n+UniValue ExternalSigner::Enumerate(const std::string& command, std::vector<ExternalSigner>& signers, bool mainnet)\n+{\n+    // Call <command> enumerate\n+    const UniValue result = runCommandParseJSON(command + \" enumerate\");\n+    if (!result.isArray())\n+        throw ExternalSignerException(strprintf(\"'%s' received invalid response, expected array of signers\", command));\n+    for (UniValue signer : result.getValues()) {\n+        const UniValue& fingerprint = find_value(signer, \"fingerprint\");\n+        if (result.isNull())\n+            throw ExternalSignerException(strprintf(\"'%s' received invalid response, missing signer fingerprint\", command));\n+        std::string fingerprintStr = fingerprint.get_str();\n+        // Skip duplicate signer\n+        bool duplicate = false;\n+        for (ExternalSigner signer : signers) {\n+            if (signer.m_fingerprint.compare(fingerprintStr) == 0) duplicate = true;",
      "path": "src/wallet/externalsigner.cpp",
      "position": 29,
      "original_position": 24,
      "commit_id": "264425be1f889ff933ecd4eafb74f1a7a0257eac",
      "original_commit_id": "9ec4aaca284673e1c92a02fdc4dea9a1a3e6038c",
      "in_reply_to_id": null,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Use string equality operator instead of `compare` :-)",
      "created_at": "2018-12-18T16:44:29Z",
      "updated_at": "2019-08-04T14:36:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14912#discussion_r242615222",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/242615222"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14912"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 29,
      "original_line": 29,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/242616373",
      "pull_request_review_id": 186170522,
      "id": 242616373,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MjYxNjM3Mw==",
      "diff_hunk": "@@ -3988,6 +4010,37 @@ UniValue walletprocesspsbt(const JSONRPCRequest& request)\n     bool bip32derivs = request.params[3].isNull() ? false : request.params[3].get_bool();\n     bool complete = FillPSBT(pwallet, psbtx, nHashType, sign, bip32derivs);\n \n+    // Process again with external signer if needed\n+    if (!complete && sign && !wallet->m_external_signers.empty()) {\n+        ExternalSigner *signer = GetSignerForJSONRPCRequest(request, 4, pwallet);\n+        if (signer && !bip32derivs) JSONRPCError(RPC_WALLET_ERROR, \"Using signer requires bip32derivs argument to be true\");\n+\n+        // Check if signer fingerpint matches any input master key fingerprint\n+        bool match = false;\n+        for (unsigned int i = 0; i < psbtx.inputs.size(); ++i) {\n+            const PSBTInput& input = psbtx.inputs[i];\n+            for (auto entry : input.hd_keypaths) {\n+                if (signer->m_fingerprint == strprintf(\"%08x\", ReadBE32(entry.second.fingerprint))) match = true;",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 117,
      "commit_id": "264425be1f889ff933ecd4eafb74f1a7a0257eac",
      "original_commit_id": "9ec4aaca284673e1c92a02fdc4dea9a1a3e6038c",
      "in_reply_to_id": null,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`signer` can be `nullptr` here if the check on L4016 is correct?",
      "created_at": "2018-12-18T16:47:04Z",
      "updated_at": "2019-08-04T14:36:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14912#discussion_r242616373",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/242616373"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14912"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4023,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/242616597",
      "pull_request_review_id": 186170810,
      "id": 242616597,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MjYxNjU5Nw==",
      "diff_hunk": "@@ -3988,6 +4010,37 @@ UniValue walletprocesspsbt(const JSONRPCRequest& request)\n     bool bip32derivs = request.params[3].isNull() ? false : request.params[3].get_bool();\n     bool complete = FillPSBT(pwallet, psbtx, nHashType, sign, bip32derivs);\n \n+    // Process again with external signer if needed\n+    if (!complete && sign && !wallet->m_external_signers.empty()) {\n+        ExternalSigner *signer = GetSignerForJSONRPCRequest(request, 4, pwallet);\n+        if (signer && !bip32derivs) JSONRPCError(RPC_WALLET_ERROR, \"Using signer requires bip32derivs argument to be true\");\n+\n+        // Check if signer fingerpint matches any input master key fingerprint\n+        bool match = false;\n+        for (unsigned int i = 0; i < psbtx.inputs.size(); ++i) {\n+            const PSBTInput& input = psbtx.inputs[i];\n+            for (auto entry : input.hd_keypaths) {\n+                if (signer->m_fingerprint == strprintf(\"%08x\", ReadBE32(entry.second.fingerprint))) match = true;\n+            }\n+        }\n+\n+        if (!match) JSONRPCError(RPC_WALLET_ERROR, \"Signer fingerprint does not match any of the inputs\");\n+\n+        // Call signer, get result\n+        const UniValue signer_result = signer->signTransaction(request.params[0].get_str());",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 124,
      "commit_id": "264425be1f889ff933ecd4eafb74f1a7a0257eac",
      "original_commit_id": "9ec4aaca284673e1c92a02fdc4dea9a1a3e6038c",
      "in_reply_to_id": null,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Same here: `signer` can be `nullptr` here if the check on L4016 is correct?",
      "created_at": "2018-12-18T16:47:38Z",
      "updated_at": "2019-08-04T14:36:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14912#discussion_r242616597",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/242616597"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14912"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4030,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/242617121",
      "pull_request_review_id": 186171510,
      "id": 242617121,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MjYxNzEyMQ==",
      "diff_hunk": "@@ -204,6 +204,10 @@ bool ConvertBits(const O& outfn, I it, I end) {\n /** Parse an HD keypaths like \"m/7/0'/2000\". */\n NODISCARD bool ParseHDKeypath(const std::string& keypath_str, std::vector<uint32_t>& keypath);\n \n+/** Write HD keypaths as strings */\n+std::string WriteHdKeypath(const std::vector<uint32_t> keypath);",
      "path": "src/util/strencodings.h",
      "position": null,
      "original_position": 5,
      "commit_id": "264425be1f889ff933ecd4eafb74f1a7a0257eac",
      "original_commit_id": "9ec4aaca284673e1c92a02fdc4dea9a1a3e6038c",
      "in_reply_to_id": null,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`keypath` should be const reference?",
      "created_at": "2018-12-18T16:48:58Z",
      "updated_at": "2019-08-04T14:36:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14912#discussion_r242617121",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/242617121"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14912"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 204,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/242617685",
      "pull_request_review_id": 186172231,
      "id": 242617685,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MjYxNzY4NQ==",
      "diff_hunk": "@@ -1263,3 +1444,145 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n \n     return response;\n }\n+\n+UniValue signerfetchkeys(const JSONRPCRequest& request)\n+{\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 1) {\n+        throw std::runtime_error(\n+            \"signerfetchkeys ( fingerprint )\\n\"\n+            \"Obtains keys from external signer and imports them into the wallet.\\n\"\n+            \"Call enumeratesigners before using this.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"fingerprint\\\"   (string, optional) Master key fingerprint of signer\\n\"\n+            \"\\nResult (same as for importmulti):\\n\"\n+            \"[{ \\\"success\\\": true }\"\n+        );\n+    }\n+\n+    ExternalSigner *signer = GetSignerForJSONRPCRequest(request, 0, pwallet);\n+\n+    UniValue descriptors = UniValue(UniValue::VARR);\n+    std::string desc_prefix = \"\";\n+    std::string desc_suffix = \"\";\n+    std::string purpose = \"\";\n+    switch(pwallet->m_default_address_type) {\n+        case OutputType::LEGACY: {\n+            desc_prefix = \"pkh(\";\n+            desc_suffix = \")\";\n+            purpose = \"44h\";\n+            break;\n+        }\n+        case OutputType::P2SH_SEGWIT: {\n+            desc_prefix = \"sh(wpkh(\";\n+            desc_suffix = \"))\";\n+            purpose = \"49h\";\n+            break;\n+        }\n+        case OutputType::BECH32: {\n+            desc_prefix = \"wpkh(\";\n+            desc_suffix = \")\";\n+            purpose = \"84h\";\n+            break;\n+        }\n+        case OutputType::CHANGE_AUTO: {\n+            assert(false);\n+        }\n+    }\n+\n+    const std::string receive_desc = desc_prefix + signer->m_fingerprint + \"/\" + purpose + \"/\" + (signer->m_mainnet ? \"0h\" : \"1h\") + \"/0h/0/*\" + desc_suffix;\n+    UniValue receive_descriptors = signer->getKeys(receive_desc);\n+    if (!receive_descriptors.isArray()) JSONRPCError(RPC_WALLET_ERROR, \"Expected an array of receive descriptors\");\n+    for (const UniValue& descriptor : receive_descriptors.getValues()) {\n+        descriptors.push_back(descriptor);",
      "path": "src/wallet/rpcdump.cpp",
      "position": null,
      "original_position": 728,
      "commit_id": "264425be1f889ff933ecd4eafb74f1a7a0257eac",
      "original_commit_id": "9ec4aaca284673e1c92a02fdc4dea9a1a3e6038c",
      "in_reply_to_id": null,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Nit: Could use `std::copy` instead?",
      "created_at": "2018-12-18T16:50:23Z",
      "updated_at": "2019-08-04T14:36:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14912#discussion_r242617685",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/242617685"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14912"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1506,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/242617864",
      "pull_request_review_id": 186172442,
      "id": 242617864,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MjYxNzg2NA==",
      "diff_hunk": "@@ -1263,3 +1444,145 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n \n     return response;\n }\n+\n+UniValue signerfetchkeys(const JSONRPCRequest& request)\n+{\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 1) {\n+        throw std::runtime_error(\n+            \"signerfetchkeys ( fingerprint )\\n\"\n+            \"Obtains keys from external signer and imports them into the wallet.\\n\"\n+            \"Call enumeratesigners before using this.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"fingerprint\\\"   (string, optional) Master key fingerprint of signer\\n\"\n+            \"\\nResult (same as for importmulti):\\n\"\n+            \"[{ \\\"success\\\": true }\"\n+        );\n+    }\n+\n+    ExternalSigner *signer = GetSignerForJSONRPCRequest(request, 0, pwallet);\n+\n+    UniValue descriptors = UniValue(UniValue::VARR);\n+    std::string desc_prefix = \"\";\n+    std::string desc_suffix = \"\";\n+    std::string purpose = \"\";\n+    switch(pwallet->m_default_address_type) {\n+        case OutputType::LEGACY: {\n+            desc_prefix = \"pkh(\";\n+            desc_suffix = \")\";\n+            purpose = \"44h\";\n+            break;\n+        }\n+        case OutputType::P2SH_SEGWIT: {\n+            desc_prefix = \"sh(wpkh(\";\n+            desc_suffix = \"))\";\n+            purpose = \"49h\";\n+            break;\n+        }\n+        case OutputType::BECH32: {\n+            desc_prefix = \"wpkh(\";\n+            desc_suffix = \")\";\n+            purpose = \"84h\";\n+            break;\n+        }\n+        case OutputType::CHANGE_AUTO: {\n+            assert(false);\n+        }\n+    }\n+\n+    const std::string receive_desc = desc_prefix + signer->m_fingerprint + \"/\" + purpose + \"/\" + (signer->m_mainnet ? \"0h\" : \"1h\") + \"/0h/0/*\" + desc_suffix;\n+    UniValue receive_descriptors = signer->getKeys(receive_desc);\n+    if (!receive_descriptors.isArray()) JSONRPCError(RPC_WALLET_ERROR, \"Expected an array of receive descriptors\");\n+    for (const UniValue& descriptor : receive_descriptors.getValues()) {\n+        descriptors.push_back(descriptor);\n+    }\n+\n+\n+    switch(pwallet->m_default_change_type) {\n+        case OutputType::LEGACY: {\n+            desc_prefix = \"pkh(\";\n+            desc_suffix = \")\";\n+            purpose = \"44h\";\n+            break;\n+        }\n+        case OutputType::P2SH_SEGWIT: {\n+            desc_prefix = \"sh(wpkh(\";\n+            desc_suffix = \"))\";\n+            purpose = \"49h\";\n+            break;\n+        }\n+        case OutputType::BECH32: {\n+            desc_prefix = \"wpkh(\";\n+            desc_suffix = \")\";\n+            purpose = \"84h\";\n+            break;\n+        }\n+        case OutputType::CHANGE_AUTO: {\n+            // Use same values as for receive descriptor\n+            break;\n+        }\n+    }\n+\n+    const std::string change_desc = desc_prefix + signer->m_fingerprint + \"/\" + purpose + \"/\" + (signer->m_mainnet ? \"0h\" : \"1h\") + \"/0h/1/*\" + desc_suffix;\n+    UniValue change_descriptors = signer->getKeys(change_desc);\n+    if (!change_descriptors.isArray()) JSONRPCError(RPC_WALLET_ERROR, \"Expected an array of change descriptors\");\n+    for (const UniValue& descriptor : change_descriptors.getValues()) {\n+        descriptors.push_back(descriptor);",
      "path": "src/wallet/rpcdump.cpp",
      "position": null,
      "original_position": 761,
      "commit_id": "264425be1f889ff933ecd4eafb74f1a7a0257eac",
      "original_commit_id": "9ec4aaca284673e1c92a02fdc4dea9a1a3e6038c",
      "in_reply_to_id": null,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Same here: Could you `std::copy`?",
      "created_at": "2018-12-18T16:50:51Z",
      "updated_at": "2019-08-04T14:36:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14912#discussion_r242617864",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/242617864"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14912"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1539,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/242618665",
      "pull_request_review_id": 186173510,
      "id": 242618665,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MjYxODY2NQ==",
      "diff_hunk": "@@ -1263,3 +1444,145 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n \n     return response;\n }\n+\n+UniValue signerfetchkeys(const JSONRPCRequest& request)\n+{\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 1) {\n+        throw std::runtime_error(\n+            \"signerfetchkeys ( fingerprint )\\n\"\n+            \"Obtains keys from external signer and imports them into the wallet.\\n\"\n+            \"Call enumeratesigners before using this.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"fingerprint\\\"   (string, optional) Master key fingerprint of signer\\n\"\n+            \"\\nResult (same as for importmulti):\\n\"\n+            \"[{ \\\"success\\\": true }\"\n+        );\n+    }\n+\n+    ExternalSigner *signer = GetSignerForJSONRPCRequest(request, 0, pwallet);\n+\n+    UniValue descriptors = UniValue(UniValue::VARR);\n+    std::string desc_prefix = \"\";\n+    std::string desc_suffix = \"\";\n+    std::string purpose = \"\";\n+    switch(pwallet->m_default_address_type) {",
      "path": "src/wallet/rpcdump.cpp",
      "position": null,
      "original_position": 700,
      "commit_id": "264425be1f889ff933ecd4eafb74f1a7a0257eac",
      "original_commit_id": "9ec4aaca284673e1c92a02fdc4dea9a1a3e6038c",
      "in_reply_to_id": null,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Missing space before `(`. Consider running new code through `clang-format` :-)",
      "created_at": "2018-12-18T16:52:53Z",
      "updated_at": "2019-08-04T14:36:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14912#discussion_r242618665",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/242618665"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14912"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1478,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/242618820",
      "pull_request_review_id": 186173710,
      "id": 242618820,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MjYxODgyMA==",
      "diff_hunk": "@@ -1263,3 +1444,145 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n \n     return response;\n }\n+\n+UniValue signerfetchkeys(const JSONRPCRequest& request)\n+{\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 1) {\n+        throw std::runtime_error(\n+            \"signerfetchkeys ( fingerprint )\\n\"\n+            \"Obtains keys from external signer and imports them into the wallet.\\n\"\n+            \"Call enumeratesigners before using this.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"fingerprint\\\"   (string, optional) Master key fingerprint of signer\\n\"\n+            \"\\nResult (same as for importmulti):\\n\"\n+            \"[{ \\\"success\\\": true }\"\n+        );\n+    }\n+\n+    ExternalSigner *signer = GetSignerForJSONRPCRequest(request, 0, pwallet);\n+\n+    UniValue descriptors = UniValue(UniValue::VARR);\n+    std::string desc_prefix = \"\";\n+    std::string desc_suffix = \"\";\n+    std::string purpose = \"\";\n+    switch(pwallet->m_default_address_type) {\n+        case OutputType::LEGACY: {\n+            desc_prefix = \"pkh(\";\n+            desc_suffix = \")\";\n+            purpose = \"44h\";\n+            break;\n+        }\n+        case OutputType::P2SH_SEGWIT: {\n+            desc_prefix = \"sh(wpkh(\";\n+            desc_suffix = \"))\";\n+            purpose = \"49h\";\n+            break;\n+        }\n+        case OutputType::BECH32: {\n+            desc_prefix = \"wpkh(\";\n+            desc_suffix = \")\";\n+            purpose = \"84h\";\n+            break;\n+        }\n+        case OutputType::CHANGE_AUTO: {\n+            assert(false);\n+        }\n+    }\n+\n+    const std::string receive_desc = desc_prefix + signer->m_fingerprint + \"/\" + purpose + \"/\" + (signer->m_mainnet ? \"0h\" : \"1h\") + \"/0h/0/*\" + desc_suffix;\n+    UniValue receive_descriptors = signer->getKeys(receive_desc);\n+    if (!receive_descriptors.isArray()) JSONRPCError(RPC_WALLET_ERROR, \"Expected an array of receive descriptors\");\n+    for (const UniValue& descriptor : receive_descriptors.getValues()) {\n+        descriptors.push_back(descriptor);\n+    }\n+\n+\n+    switch(pwallet->m_default_change_type) {",
      "path": "src/wallet/rpcdump.cpp",
      "position": null,
      "original_position": 732,
      "commit_id": "264425be1f889ff933ecd4eafb74f1a7a0257eac",
      "original_commit_id": "9ec4aaca284673e1c92a02fdc4dea9a1a3e6038c",
      "in_reply_to_id": null,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Same here: Missing whitespace before `(`.",
      "created_at": "2018-12-18T16:53:15Z",
      "updated_at": "2019-08-04T14:36:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14912#discussion_r242618820",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/242618820"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14912"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1510,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/242619074",
      "pull_request_review_id": 186174018,
      "id": 242619074,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MjYxOTA3NA==",
      "diff_hunk": "@@ -3988,6 +4010,37 @@ UniValue walletprocesspsbt(const JSONRPCRequest& request)\n     bool bip32derivs = request.params[3].isNull() ? false : request.params[3].get_bool();\n     bool complete = FillPSBT(pwallet, psbtx, nHashType, sign, bip32derivs);\n \n+    // Process again with external signer if needed\n+    if (!complete && sign && !wallet->m_external_signers.empty()) {\n+        ExternalSigner *signer = GetSignerForJSONRPCRequest(request, 4, pwallet);\n+        if (signer && !bip32derivs) JSONRPCError(RPC_WALLET_ERROR, \"Using signer requires bip32derivs argument to be true\");\n+\n+        // Check if signer fingerpint matches any input master key fingerprint\n+        bool match = false;\n+        for (unsigned int i = 0; i < psbtx.inputs.size(); ++i) {\n+            const PSBTInput& input = psbtx.inputs[i];\n+            for (auto entry : input.hd_keypaths) {\n+                if (signer->m_fingerprint == strprintf(\"%08x\", ReadBE32(entry.second.fingerprint))) match = true;\n+            }\n+        }\n+\n+        if (!match) JSONRPCError(RPC_WALLET_ERROR, \"Signer fingerprint does not match any of the inputs\");\n+\n+        // Call signer, get result\n+        const UniValue signer_result = signer->signTransaction(request.params[0].get_str());\n+        if (!find_value(signer_result, \"psbt\").isStr()) JSONRPCError(RPC_WALLET_ERROR, \"Unexpected result from signer\");\n+\n+        // Process result from signer:\n+        std::string signer_psbt_error;\n+        PartiallySignedTransaction signer_psbtx ;",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 129,
      "commit_id": "264425be1f889ff933ecd4eafb74f1a7a0257eac",
      "original_commit_id": "9ec4aaca284673e1c92a02fdc4dea9a1a3e6038c",
      "in_reply_to_id": null,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Remove space before `;` :-)",
      "created_at": "2018-12-18T16:53:47Z",
      "updated_at": "2019-08-04T14:36:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14912#discussion_r242619074",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/242619074"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14912"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4035,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/242619836",
      "pull_request_review_id": 186174993,
      "id": 242619836,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MjYxOTgzNg==",
      "diff_hunk": "@@ -119,9 +126,13 @@ def get_multisig(self):\n                         CScript([OP_HASH160, witness_script, OP_EQUAL]).hex(),  # p2sh-p2wsh\n                         script_to_p2sh_p2wsh(script_code))  # p2sh-p2wsh addr\n \n-    def test_importmulti(self, req, success, error_code=None, error_message=None):\n+    def test_importmulti(self, req, success, error_code=None, error_message=None, warnings=[]):\n         \"\"\"Run importmulti and assert success\"\"\"\n         result = self.nodes[1].importmulti([req])\n+        observed_warnings = []\n+        if 'warnings' in result[0]:\n+           observed_warnings = result[0]['warnings']",
      "path": "test/functional/wallet_importmulti.py",
      "position": null,
      "original_position": 24,
      "commit_id": "264425be1f889ff933ecd4eafb74f1a7a0257eac",
      "original_commit_id": "9ec4aaca284673e1c92a02fdc4dea9a1a3e6038c",
      "in_reply_to_id": null,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Indentation is not a multiple of four :-)",
      "created_at": "2018-12-18T16:55:41Z",
      "updated_at": "2019-08-04T14:36:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14912#discussion_r242619836",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/242619836"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14912"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 52,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/242620899",
      "pull_request_review_id": 186176286,
      "id": 242620899,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MjYyMDg5OQ==",
      "diff_hunk": "@@ -1263,3 +1444,145 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n \n     return response;\n }\n+\n+UniValue signerfetchkeys(const JSONRPCRequest& request)\n+{\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 1) {\n+        throw std::runtime_error(\n+            \"signerfetchkeys ( fingerprint )\\n\"\n+            \"Obtains keys from external signer and imports them into the wallet.\\n\"\n+            \"Call enumeratesigners before using this.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"fingerprint\\\"   (string, optional) Master key fingerprint of signer\\n\"\n+            \"\\nResult (same as for importmulti):\\n\"\n+            \"[{ \\\"success\\\": true }\"\n+        );\n+    }\n+\n+    ExternalSigner *signer = GetSignerForJSONRPCRequest(request, 0, pwallet);\n+\n+    UniValue descriptors = UniValue(UniValue::VARR);\n+    std::string desc_prefix = \"\";\n+    std::string desc_suffix = \"\";\n+    std::string purpose = \"\";\n+    switch(pwallet->m_default_address_type) {\n+        case OutputType::LEGACY: {\n+            desc_prefix = \"pkh(\";\n+            desc_suffix = \")\";\n+            purpose = \"44h\";\n+            break;\n+        }\n+        case OutputType::P2SH_SEGWIT: {\n+            desc_prefix = \"sh(wpkh(\";\n+            desc_suffix = \"))\";\n+            purpose = \"49h\";\n+            break;\n+        }\n+        case OutputType::BECH32: {\n+            desc_prefix = \"wpkh(\";\n+            desc_suffix = \")\";\n+            purpose = \"84h\";\n+            break;\n+        }\n+        case OutputType::CHANGE_AUTO: {\n+            assert(false);\n+        }\n+    }\n+\n+    const std::string receive_desc = desc_prefix + signer->m_fingerprint + \"/\" + purpose + \"/\" + (signer->m_mainnet ? \"0h\" : \"1h\") + \"/0h/0/*\" + desc_suffix;\n+    UniValue receive_descriptors = signer->getKeys(receive_desc);\n+    if (!receive_descriptors.isArray()) JSONRPCError(RPC_WALLET_ERROR, \"Expected an array of receive descriptors\");\n+    for (const UniValue& descriptor : receive_descriptors.getValues()) {\n+        descriptors.push_back(descriptor);\n+    }\n+\n+\n+    switch(pwallet->m_default_change_type) {\n+        case OutputType::LEGACY: {\n+            desc_prefix = \"pkh(\";\n+            desc_suffix = \")\";\n+            purpose = \"44h\";\n+            break;\n+        }\n+        case OutputType::P2SH_SEGWIT: {\n+            desc_prefix = \"sh(wpkh(\";\n+            desc_suffix = \"))\";\n+            purpose = \"49h\";\n+            break;\n+        }\n+        case OutputType::BECH32: {\n+            desc_prefix = \"wpkh(\";\n+            desc_suffix = \")\";\n+            purpose = \"84h\";\n+            break;\n+        }\n+        case OutputType::CHANGE_AUTO: {\n+            // Use same values as for receive descriptor\n+            break;\n+        }\n+    }\n+\n+    const std::string change_desc = desc_prefix + signer->m_fingerprint + \"/\" + purpose + \"/\" + (signer->m_mainnet ? \"0h\" : \"1h\") + \"/0h/1/*\" + desc_suffix;\n+    UniValue change_descriptors = signer->getKeys(change_desc);\n+    if (!change_descriptors.isArray()) JSONRPCError(RPC_WALLET_ERROR, \"Expected an array of change descriptors\");\n+    for (const UniValue& descriptor : change_descriptors.getValues()) {\n+        descriptors.push_back(descriptor);\n+    }\n+\n+    if (receive_descriptors.size() != change_descriptors.size()) JSONRPCError(RPC_WALLET_ERROR, \"Expected same number of receive and change descriptors\");\n+\n+    // Use importmulti to process the descriptors:\n+    UniValue importdata(UniValue::VARR);\n+\n+    uint64_t keypool_target_size = 0;\n+    keypool_target_size = gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE);\n+\n+    if (keypool_target_size == 0) JSONRPCError(RPC_WALLET_ERROR, \"-keypool must be > 0\");\n+\n+    for (unsigned int i = 0; i < descriptors.size(); ++i) {\n+        const UniValue& descriptor = descriptors.getValues()[i];\n+        // TODO: sanity check the descriptors:\n+        // * check if they're valid descriptors\n+        // * check that it's the fingerprint we asked for\n+        // * check it's the deriviation path we asked for",
      "path": "src/wallet/rpcdump.cpp",
      "position": null,
      "original_position": 779,
      "commit_id": "264425be1f889ff933ecd4eafb74f1a7a0257eac",
      "original_commit_id": "9ec4aaca284673e1c92a02fdc4dea9a1a3e6038c",
      "in_reply_to_id": null,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Should be \"derivation\" :-)",
      "created_at": "2018-12-18T16:57:56Z",
      "updated_at": "2019-08-04T14:36:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14912#discussion_r242620899",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/242620899"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14912"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1557,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/242621312",
      "pull_request_review_id": 186176818,
      "id": 242621312,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MjYyMTMxMg==",
      "diff_hunk": "@@ -4113,6 +4166,111 @@ UniValue walletcreatefundedpsbt(const JSONRPCRequest& request)\n     return result;\n }\n \n+static UniValue enumeratesigners(const JSONRPCRequest& request)\n+{\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 0) {\n+        throw std::runtime_error(\n+            \"enumeratesigners\\n\"\n+            \"Returns a list of external signers from -signer and associates them\\n\"\n+            \"with the wallet until you stop bitcoind.\\n\"\n+            \"{\\n\"\n+            \"  \\\"signers\\\" : [                                (json array of objects)\\n\"\n+            \"    {\\n\"\n+            \"      \\\"masterkeyfingerprint\\\" : \\\"fingerprint\\\" (string) Master key fingerprint\\n\"\n+            \"    }\\n\"\n+            \"    ,...\\n\"\n+            \"  ]\\n\"\n+            \"}\\n\"\n+        );\n+    }\n+\n+    const std::string command = gArgs.GetArg(\"-signer\", DEFAULT_EXTERNAL_SIGNER);\n+    if (command == \"\") throw JSONRPCError(RPC_WALLET_ERROR, \"Error: restart bitcoind with -signer=<cmd>\");\n+    std::string chain = gArgs.GetChainName();\n+    const bool mainnet = chain == CBaseChainParams::MAIN;\n+    UniValue signers;\n+    try {\n+        signers = ExternalSigner::Enumerate(command, pwallet->m_external_signers, mainnet);\n+    } catch (const ExternalSignerException& e) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, e.what());\n+    }\n+    UniValue result(UniValue::VOBJ);\n+    result.pushKV(\"signers\", signers);\n+    return result;\n+}\n+\n+static UniValue signerdisplayaddress(const JSONRPCRequest& request)\n+{\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.empty() || request.params.size() > 1) {\n+        throw std::runtime_error(\n+            \"signerdisplayaddress\\n\"\n+            \"Display address on an external signer for verification.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"address\\\"       (string, required) The bitcoin address to display.\\n\"\n+            \"2. \\\"fingerprint\\\"   (string, optional) Master key fingerprint of signer\\n\"\n+        );\n+    }\n+\n+    ExternalSigner *signer = GetSignerForJSONRPCRequest(request, 1, pwallet);\n+\n+    LOCK(pwallet->cs_wallet);\n+\n+    UniValue ret(UniValue::VOBJ);",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 208,
      "commit_id": "264425be1f889ff933ecd4eafb74f1a7a0257eac",
      "original_commit_id": "9ec4aaca284673e1c92a02fdc4dea9a1a3e6038c",
      "in_reply_to_id": null,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Unused?",
      "created_at": "2018-12-18T16:58:46Z",
      "updated_at": "2019-08-04T14:36:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14912#discussion_r242621312",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/242621312"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14912"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4203,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/243240204",
      "pull_request_review_id": 186955536,
      "id": 243240204,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MzI0MDIwNA==",
      "diff_hunk": "@@ -24,6 +25,17 @@ void RegisterWalletRPCCommands(CRPCTable &t);\n  */\n std::shared_ptr<CWallet> GetWalletForJSONRPCRequest(const JSONRPCRequest& request);\n \n+/**\n+ * Figures out what external signer to use for a JSONRPCRequest.\n+ *\n+ * @param[in] request JSONRPCRequest that wishes to access a signer\n+ * @param[pos] which argument contains the signer fingerprint. Optional, returns the first signer otherwise\n+ * @param[pwallet] the wallet",
      "path": "src/wallet/rpcwallet.h",
      "position": null,
      "original_position": 17,
      "commit_id": "264425be1f889ff933ecd4eafb74f1a7a0257eac",
      "original_commit_id": "9ec4aaca284673e1c92a02fdc4dea9a1a3e6038c",
      "in_reply_to_id": 242604518,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, I'll look into how that's supposed to work...",
      "created_at": "2018-12-20T11:32:33Z",
      "updated_at": "2019-08-04T14:36:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14912#discussion_r243240204",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/243240204"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14912"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 33,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/243240638",
      "pull_request_review_id": 186956063,
      "id": 243240638,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MzI0MDYzOA==",
      "diff_hunk": "@@ -1263,3 +1444,145 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n \n     return response;\n }\n+\n+UniValue signerfetchkeys(const JSONRPCRequest& request)\n+{\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 1) {\n+        throw std::runtime_error(\n+            \"signerfetchkeys ( fingerprint )\\n\"\n+            \"Obtains keys from external signer and imports them into the wallet.\\n\"\n+            \"Call enumeratesigners before using this.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"fingerprint\\\"   (string, optional) Master key fingerprint of signer\\n\"\n+            \"\\nResult (same as for importmulti):\\n\"\n+            \"[{ \\\"success\\\": true }\"\n+        );\n+    }\n+\n+    ExternalSigner *signer = GetSignerForJSONRPCRequest(request, 0, pwallet);\n+\n+    UniValue descriptors = UniValue(UniValue::VARR);\n+    std::string desc_prefix = \"\";\n+    std::string desc_suffix = \"\";\n+    std::string purpose = \"\";\n+    switch(pwallet->m_default_address_type) {\n+        case OutputType::LEGACY: {\n+            desc_prefix = \"pkh(\";\n+            desc_suffix = \")\";\n+            purpose = \"44h\";\n+            break;\n+        }\n+        case OutputType::P2SH_SEGWIT: {\n+            desc_prefix = \"sh(wpkh(\";\n+            desc_suffix = \"))\";\n+            purpose = \"49h\";\n+            break;\n+        }\n+        case OutputType::BECH32: {\n+            desc_prefix = \"wpkh(\";\n+            desc_suffix = \")\";\n+            purpose = \"84h\";\n+            break;\n+        }\n+        case OutputType::CHANGE_AUTO: {\n+            assert(false);\n+        }\n+    }\n+\n+    const std::string receive_desc = desc_prefix + signer->m_fingerprint + \"/\" + purpose + \"/\" + (signer->m_mainnet ? \"0h\" : \"1h\") + \"/0h/0/*\" + desc_suffix;\n+    UniValue receive_descriptors = signer->getKeys(receive_desc);\n+    if (!receive_descriptors.isArray()) JSONRPCError(RPC_WALLET_ERROR, \"Expected an array of receive descriptors\");\n+    for (const UniValue& descriptor : receive_descriptors.getValues()) {\n+        descriptors.push_back(descriptor);\n+    }\n+\n+\n+    switch(pwallet->m_default_change_type) {\n+        case OutputType::LEGACY: {\n+            desc_prefix = \"pkh(\";\n+            desc_suffix = \")\";\n+            purpose = \"44h\";\n+            break;\n+        }\n+        case OutputType::P2SH_SEGWIT: {\n+            desc_prefix = \"sh(wpkh(\";\n+            desc_suffix = \"))\";\n+            purpose = \"49h\";\n+            break;\n+        }\n+        case OutputType::BECH32: {\n+            desc_prefix = \"wpkh(\";\n+            desc_suffix = \")\";\n+            purpose = \"84h\";\n+            break;\n+        }\n+        case OutputType::CHANGE_AUTO: {\n+            // Use same values as for receive descriptor\n+            break;\n+        }\n+    }\n+\n+    const std::string change_desc = desc_prefix + signer->m_fingerprint + \"/\" + purpose + \"/\" + (signer->m_mainnet ? \"0h\" : \"1h\") + \"/0h/1/*\" + desc_suffix;\n+    UniValue change_descriptors = signer->getKeys(change_desc);\n+    if (!change_descriptors.isArray()) JSONRPCError(RPC_WALLET_ERROR, \"Expected an array of change descriptors\");\n+    for (const UniValue& descriptor : change_descriptors.getValues()) {\n+        descriptors.push_back(descriptor);\n+    }\n+\n+    if (receive_descriptors.size() != change_descriptors.size()) JSONRPCError(RPC_WALLET_ERROR, \"Expected same number of receive and change descriptors\");\n+\n+    // Use importmulti to process the descriptors:\n+    UniValue importdata(UniValue::VARR);\n+\n+    uint64_t keypool_target_size = 0;\n+    keypool_target_size = gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE);",
      "path": "src/wallet/rpcdump.cpp",
      "position": null,
      "original_position": 770,
      "commit_id": "264425be1f889ff933ecd4eafb74f1a7a0257eac",
      "original_commit_id": "9ec4aaca284673e1c92a02fdc4dea9a1a3e6038c",
      "in_reply_to_id": 242606739,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The compiler didn't like it when I initialized using `gArgs.GetArg`.",
      "created_at": "2018-12-20T11:34:16Z",
      "updated_at": "2019-08-04T14:36:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14912#discussion_r243240638",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/243240638"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14912"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1548,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/243241046",
      "pull_request_review_id": 186956559,
      "id": 243241046,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MzI0MTA0Ng==",
      "diff_hunk": "@@ -1198,6 +1200,24 @@ void runCommand(const std::string& strCommand)\n         LogPrintf(\"runCommand error: system(%s) returned %d\\n\", strCommand, nErr);\n }\n \n+UniValue runCommandParseJSON(const std::string& strCommand)\n+{\n+    if (strCommand.empty()) return UniValue::VNULL;\n+\n+    std::array<char, 128> buffer;\n+    std::string result;\n+    std::unique_ptr<FILE, decltype(&pclose)> pipe(popen(strCommand.c_str(), \"r\"), pclose);",
      "path": "src/util/system.cpp",
      "position": null,
      "original_position": 22,
      "commit_id": "264425be1f889ff933ecd4eafb74f1a7a0257eac",
      "original_commit_id": "9ec4aaca284673e1c92a02fdc4dea9a1a3e6038c",
      "in_reply_to_id": 242612528,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This is straight from stack overflow, so certainly needs more review... I'm surprised how complicated it is to just read some JSON from `stdout`.",
      "created_at": "2018-12-20T11:35:50Z",
      "updated_at": "2019-08-04T14:36:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14912#discussion_r243241046",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/243241046"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14912"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1155,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/249118973",
      "pull_request_review_id": 194196156,
      "id": 249118973,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0OTExODk3Mw==",
      "diff_hunk": "@@ -119,9 +126,13 @@ def get_multisig(self):\n                         CScript([OP_HASH160, witness_script, OP_EQUAL]).hex(),  # p2sh-p2wsh\n                         script_to_p2sh_p2wsh(script_code))  # p2sh-p2wsh addr\n \n-    def test_importmulti(self, req, success, error_code=None, error_message=None):\n+    def test_importmulti(self, req, success, error_code=None, error_message=None, warnings=[]):\n         \"\"\"Run importmulti and assert success\"\"\"\n         result = self.nodes[1].importmulti([req])\n+        observed_warnings = []\n+        if 'warnings' in result[0]:\n+           observed_warnings = result[0]['warnings']",
      "path": "test/functional/wallet_importmulti.py",
      "position": null,
      "original_position": 24,
      "commit_id": "264425be1f889ff933ecd4eafb74f1a7a0257eac",
      "original_commit_id": "9ec4aaca284673e1c92a02fdc4dea9a1a3e6038c",
      "in_reply_to_id": 242619836,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Upstream",
      "created_at": "2019-01-18T17:10:24Z",
      "updated_at": "2019-08-04T14:36:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14912#discussion_r249118973",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/249118973"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14912"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 52,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/249119860",
      "pull_request_review_id": 194197314,
      "id": 249119860,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0OTExOTg2MA==",
      "diff_hunk": "@@ -836,246 +837,419 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n     return reply;\n }\n \n-\n-static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+struct ImportData\n {\n-    try {\n-        // First ensure scriptPubKey has either a script or JSON with \"address\" string\n-        const UniValue& scriptPubKey = data[\"scriptPubKey\"];\n-        bool isScript = scriptPubKey.getType() == UniValue::VSTR;\n-        if (!isScript && !(scriptPubKey.getType() == UniValue::VOBJ && scriptPubKey.exists(\"address\"))) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"scriptPubKey must be string with script or JSON with address string\");\n-        }\n-        const std::string& output = isScript ? scriptPubKey.get_str() : scriptPubKey[\"address\"].get_str();\n-\n-        // Optional fields.\n-        const std::string& strRedeemScript = data.exists(\"redeemscript\") ? data[\"redeemscript\"].get_str() : \"\";\n-        const std::string& witness_script_hex = data.exists(\"witnessscript\") ? data[\"witnessscript\"].get_str() : \"\";\n-        const UniValue& pubKeys = data.exists(\"pubkeys\") ? data[\"pubkeys\"].get_array() : UniValue();\n-        const UniValue& keys = data.exists(\"keys\") ? data[\"keys\"].get_array() : UniValue();\n-        const bool internal = data.exists(\"internal\") ? data[\"internal\"].get_bool() : false;\n-        const bool watchOnly = data.exists(\"watchonly\") ? data[\"watchonly\"].get_bool() : false;\n-        const std::string& label = data.exists(\"label\") ? data[\"label\"].get_str() : \"\";\n-\n-        // Generate the script and destination for the scriptPubKey provided\n-        CScript script;\n-        CTxDestination dest;\n-\n-        if (!isScript) {\n-            dest = DecodeDestination(output);\n-            if (!IsValidDestination(dest)) {\n-                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid address\");\n-            }\n-            script = GetScriptForDestination(dest);\n-        } else {\n-            if (!IsHex(output)) {\n-                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid scriptPubKey\");\n-            }\n+    // Input data\n+    std::unique_ptr<CScript> redeemscript; //!< Provided redeemScript; will be moved to `import_scripts` if relevant.\n+    std::unique_ptr<CScript> witnessscript; //!< Provided witnessScript; will be moved to `import_scripts` if relevant.\n \n-            std::vector<unsigned char> vData(ParseHex(output));\n-            script = CScript(vData.begin(), vData.end());\n-            if (!ExtractDestination(script, dest) && !internal) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Internal must be set to true for nonstandard scriptPubKey imports.\");\n-            }\n-        }\n+    // Output data\n+    std::set<CScript> import_scripts;\n+    std::map<CKeyID, bool> used_keys; //!< Import these private keys if available (the value indicates whether if the key is required for solvability)\n+    std::map<CKeyID, KeyOriginInfo> key_origins;\n+};\n \n-        // Watchonly and private keys\n-        if (watchOnly && keys.size()) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Watch-only addresses should not include private keys\");\n+enum class ScriptContext\n+{\n+    TOP, //! Top-level scriptPubKey\n+    P2SH, //! P2SH redeemScript\n+    WITNESS_V0, //! P2WSH witnessScript\n+};\n+\n+// Analyse the provided scriptPubKey, determining which keys and which redeem scripts from the ImportData struct are needed to spend it, and mark them as used.\n+// Returns an error string, or the empty string for success.\n+static std::string RecurseImportData(const CScript& script, ImportData& import_data, const ScriptContext script_ctx)\n+{\n+    // Use Solver to obtain script type and parsed pubkeys or hashes:\n+    std::vector<std::vector<unsigned char>> solverdata;\n+    txnouttype script_type = Solver(script, solverdata);\n+\n+    switch (script_type) {\n+    case TX_PUBKEY: {\n+        CPubKey pubkey(solverdata[0].begin(), solverdata[0].end());\n+        import_data.used_keys.emplace(pubkey.GetID(), false);\n+        return \"\";\n+    }\n+    case TX_PUBKEYHASH: {\n+        CKeyID id = CKeyID(uint160(solverdata[0]));\n+        import_data.used_keys[id] = true;\n+        return \"\";\n+    }\n+    case TX_SCRIPTHASH: {\n+        if (script_ctx == ScriptContext::P2SH) throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Trying to nest P2SH inside another P2SH\");\n+        if (script_ctx == ScriptContext::WITNESS_V0) throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Trying to nest P2SH inside a P2WSH\");\n+        assert(script_ctx == ScriptContext::TOP);\n+        CScriptID id = CScriptID(uint160(solverdata[0]));\n+        auto subscript = std::move(import_data.redeemscript);\n+        if (!subscript) return \"missing redeemscript\";\n+        if (CScriptID(*subscript) != id) return \"redeemScript does not match the scriptPubKey\";\n+        import_data.import_scripts.emplace(*subscript);\n+        return RecurseImportData(*subscript, import_data, ScriptContext::P2SH);\n+    }\n+    case TX_MULTISIG: {\n+        for (size_t i = 1; i + 1< solverdata.size(); ++i) {\n+            CPubKey pubkey(solverdata[i].begin(), solverdata[i].end());\n+            import_data.used_keys.emplace(pubkey.GetID(), false);\n         }\n-\n-        // Internal addresses should not have a label\n-        if (internal && data.exists(\"label\")) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Internal addresses should not have a label\");\n+        return \"\";\n+    }\n+    case TX_WITNESS_V0_SCRIPTHASH: {\n+        if (script_ctx == ScriptContext::WITNESS_V0) throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Trying to nest P2WSH inside another P2WSH\");\n+        uint256 fullid(solverdata[0]);\n+        CScriptID id;\n+        CRIPEMD160().Write(fullid.begin(), fullid.size()).Finalize(id.begin());\n+        auto subscript = std::move(import_data.witnessscript);\n+        if (!subscript) return \"missing witnessscript\";\n+        if (CScriptID(*subscript) != id) return \"witnessScript does not match the scriptPubKey or redeemScript\";\n+        if (script_ctx == ScriptContext::TOP) {\n+            import_data.import_scripts.emplace(script); // Special rule for IsMine: native P2WSH requires the TOP script imported (see script/ismine.cpp)\n         }\n-\n-        // Force users to provide the witness script in its field rather than redeemscript\n-        if (!strRedeemScript.empty() && script.IsPayToWitnessScriptHash()) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"P2WSH addresses have an empty redeemscript. Please provide the witnessscript instead.\");\n+        import_data.import_scripts.emplace(*subscript);\n+        return RecurseImportData(*subscript, import_data, ScriptContext::WITNESS_V0);\n+    }\n+    case TX_WITNESS_V0_KEYHASH: {\n+        if (script_ctx == ScriptContext::WITNESS_V0) throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Trying to nest P2WPKH inside P2WSH\");\n+        CKeyID id = CKeyID(uint160(solverdata[0]));\n+        import_data.used_keys[id] = true;\n+        if (script_ctx == ScriptContext::TOP) {\n+            import_data.import_scripts.emplace(script); // Special rule for IsMine: native P2WPKH requires the TOP script imported (see script/ismine.cpp)\n         }\n+        return \"\";\n+    }\n+    case TX_NULL_DATA:\n+        return \"unspendable script\";\n+    case TX_NONSTANDARD:\n+    case TX_WITNESS_UNKNOWN:\n+    default:\n+        return \"unrecognized script\";\n+    }\n+}\n \n-        CScript scriptpubkey_script = script;\n-        CTxDestination scriptpubkey_dest = dest;\n-        bool allow_p2wpkh = true;\n-\n-        // P2SH\n-        if (!strRedeemScript.empty() && script.IsPayToScriptHash()) {\n-            // Check the redeemScript is valid\n-            if (!IsHex(strRedeemScript)) {\n-                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid redeem script: must be hex string\");\n-            }\n-\n-            // Import redeem script.\n-            std::vector<unsigned char> vData(ParseHex(strRedeemScript));\n-            CScript redeemScript = CScript(vData.begin(), vData.end());\n-            CScriptID redeem_id(redeemScript);\n-\n-            // Check that the redeemScript and scriptPubKey match\n-            if (GetScriptForDestination(redeem_id) != script) {\n-                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"The redeemScript does not match the scriptPubKey\");\n-            }\n-\n-            pwallet->MarkDirty();\n-\n-            if (!pwallet->AddWatchOnly(redeemScript, timestamp)) {\n-                throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n-            }\n-\n-            if (!pwallet->HaveCScript(redeem_id) && !pwallet->AddCScript(redeemScript)) {\n-                throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding p2sh redeemScript to wallet\");\n-            }\n+static UniValue ProcessImportLegacy(ImportData& import_data, std::map<CKeyID, CPubKey>& pubkey_map, std::map<CKeyID, CKey>& privkey_map, std::set<CScript>& script_pub_keys, bool& have_solving_data, const UniValue& data, std::vector<CKeyID>& ordered_pubkeys)\n+{\n+    UniValue warnings(UniValue::VARR);\n \n-            // Now set script to the redeemScript so we parse the inner script as P2WSH or P2WPKH below\n-            script = redeemScript;\n-            ExtractDestination(script, dest);\n+    // First ensure scriptPubKey has either a script or JSON with \"address\" string\n+    const UniValue& scriptPubKey = data[\"scriptPubKey\"];\n+    bool isScript = scriptPubKey.getType() == UniValue::VSTR;\n+    if (!isScript && !(scriptPubKey.getType() == UniValue::VOBJ && scriptPubKey.exists(\"address\"))) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"scriptPubKey must be string with script or JSON with address string\");\n+    }\n+    const std::string& output = isScript ? scriptPubKey.get_str() : scriptPubKey[\"address\"].get_str();\n+\n+    // Optional fields.\n+    const std::string& strRedeemScript = data.exists(\"redeemscript\") ? data[\"redeemscript\"].get_str() : \"\";\n+    const std::string& witness_script_hex = data.exists(\"witnessscript\") ? data[\"witnessscript\"].get_str() : \"\";\n+    const UniValue& pubKeys = data.exists(\"pubkeys\") ? data[\"pubkeys\"].get_array() : UniValue();\n+    const UniValue& keys = data.exists(\"keys\") ? data[\"keys\"].get_array() : UniValue();\n+    const bool internal = data.exists(\"internal\") ? data[\"internal\"].get_bool() : false;\n+    const bool watchOnly = data.exists(\"watchonly\") ? data[\"watchonly\"].get_bool() : false;\n+\n+    // Generate the script and destination for the scriptPubKey provided\n+    CScript script;\n+    CTxDestination dest;\n+    if (!isScript) {\n+        dest = DecodeDestination(output);\n+        if (!IsValidDestination(dest)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid address \\\"\" + output + \"\\\"\");\n         }\n+        script = GetScriptForDestination(dest);\n+    } else {\n+        if (!IsHex(output)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid scriptPubKey \\\"\" + output + \"\\\"\");\n+        }\n+        std::vector<unsigned char> vData(ParseHex(output));\n+        script = CScript(vData.begin(), vData.end());\n+        if (!ExtractDestination(script, dest) && !internal) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Internal must be set to true for nonstandard scriptPubKey imports.\");\n+        }\n+    }\n+    script_pub_keys.emplace(script);\n \n-        // (P2SH-)P2WSH\n-        if (!witness_script_hex.empty() && script.IsPayToWitnessScriptHash()) {\n-            if (!IsHex(witness_script_hex)) {\n-                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid witness script: must be hex string\");\n-            }\n-\n-            // Generate the scripts\n-            std::vector<unsigned char> witness_script_parsed(ParseHex(witness_script_hex));\n-            CScript witness_script = CScript(witness_script_parsed.begin(), witness_script_parsed.end());\n-            CScriptID witness_id(witness_script);\n+    // Parse all arguments\n+    if (strRedeemScript.size()) {\n+        if (!IsHex(strRedeemScript)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid redeem script \\\"\" + strRedeemScript + \"\\\": must be hex string\");\n+        }\n+        auto parsed_redeemscript = ParseHex(strRedeemScript);\n+        import_data.redeemscript = MakeUnique<CScript>(parsed_redeemscript.begin(), parsed_redeemscript.end());\n+    }\n+    if (witness_script_hex.size()) {\n+        if (!IsHex(witness_script_hex)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid witness script \\\"\" + witness_script_hex + \"\\\": must be hex string\");\n+        }\n+        auto parsed_witnessscript = ParseHex(witness_script_hex);\n+        import_data.witnessscript = MakeUnique<CScript>(parsed_witnessscript.begin(), parsed_witnessscript.end());\n+    }\n+    for (size_t i = 0; i < pubKeys.size(); ++i) {\n+        const auto& str = pubKeys[i].get_str();\n+        if (!IsHex(str)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Pubkey \\\"\" + str + \"\\\" must be a hex string\");\n+        }\n+        auto parsed_pubkey = ParseHex(str);\n+        CPubKey pubkey(parsed_pubkey.begin(), parsed_pubkey.end());\n+        if (!pubkey.IsFullyValid()) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Pubkey \\\"\" + str + \"\\\" is not a valid public key\");\n+        }\n+        pubkey_map.emplace(pubkey.GetID(), pubkey);\n+        ordered_pubkeys.push_back(pubkey.GetID());\n+    }\n+    for (size_t i = 0; i < keys.size(); ++i) {\n+        const auto& str = keys[i].get_str();\n+        CKey key = DecodeSecret(str);\n+        if (!key.IsValid()) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key encoding\");\n+        }\n+        CPubKey pubkey = key.GetPubKey();\n+        CKeyID id = pubkey.GetID();\n+        if (pubkey_map.count(id)) {\n+            pubkey_map.erase(id);\n+        }\n+        privkey_map.emplace(id, key);\n+    }\n \n-            // Check that the witnessScript and scriptPubKey match\n-            if (GetScriptForDestination(WitnessV0ScriptHash(witness_script)) != script) {\n-                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"The witnessScript does not match the scriptPubKey or redeemScript\");\n-            }\n+    // Verify and process input data\n+    have_solving_data = import_data.redeemscript || import_data.witnessscript || pubkey_map.size() || privkey_map.size();\n+    if (have_solving_data) {\n+        // Match up data in import_data with the scriptPubKey in script.\n+        auto error = RecurseImportData(script, import_data, ScriptContext::TOP);\n \n-            // Add the witness script as watch only only if it is not for P2SH-P2WSH\n-            if (!scriptpubkey_script.IsPayToScriptHash() && !pwallet->AddWatchOnly(witness_script, timestamp)) {\n-                throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n-            }\n+        // Verify whether the watchonly option corresponds to the availability of private keys.\n+        bool spendable = std::all_of(import_data.used_keys.begin(), import_data.used_keys.end(), [&](const std::pair<CKeyID, bool>& used_key){ return privkey_map.count(used_key.first) > 0; });\n+        if (!watchOnly && !spendable) {\n+            warnings.push_back(\"Some private keys are missing, outputs will be considered watchonly. If this is intentional, specify the watchonly flag.\");\n+        }\n+        if (watchOnly && spendable) {\n+            warnings.push_back(\"All private keys are provided, outputs will be considered spendable. If this is intentional, do not specify the watchonly flag.\");\n+        }\n \n-            if (!pwallet->HaveCScript(witness_id) && !pwallet->AddCScript(witness_script)) {\n-                throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding p2wsh witnessScript to wallet\");\n+        // Check that all required keys for solvability are provided.\n+        if (error.empty()) {\n+            for (const auto& require_key : import_data.used_keys) {\n+                if (!require_key.second) continue; // Not a required key\n+                if (pubkey_map.count(require_key.first) == 0 && privkey_map.count(require_key.first) == 0) {\n+                    error = \"some required keys are missing\";\n+                }\n             }\n-\n-            // Now set script to the witnessScript so we parse the inner script as P2PK or P2PKH below\n-            script = witness_script;\n-            ExtractDestination(script, dest);\n-            allow_p2wpkh = false; // P2WPKH cannot be embedded in P2WSH\n         }\n \n-        // (P2SH-)P2PK/P2PKH/P2WPKH\n-        if (dest.type() == typeid(CKeyID) || dest.type() == typeid(WitnessV0KeyHash)) {\n-            if (!allow_p2wpkh && dest.type() == typeid(WitnessV0KeyHash)) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"P2WPKH cannot be embedded in P2WSH\");\n-            }\n-            if (keys.size() > 1 || pubKeys.size() > 1) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"More than one key given for one single-key address\");\n-            }\n-            CPubKey pubkey;\n-            if (keys.size()) {\n-                pubkey = DecodeSecret(keys[0].get_str()).GetPubKey();\n-            }\n-            if (pubKeys.size()) {\n-                const std::string& strPubKey = pubKeys[0].get_str();\n-                if (!IsHex(strPubKey)) {\n-                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Pubkey must be a hex string\");\n-                }\n-                std::vector<unsigned char> vData(ParseHex(pubKeys[0].get_str()));\n-                CPubKey pubkey_temp(vData.begin(), vData.end());\n-                if (pubkey.size() && pubkey_temp != pubkey) {\n-                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Private key does not match public key for address\");\n+        if (!error.empty()) {\n+            warnings.push_back(\"Importing as non-solvable: \" + error + \". If this is intentional, don't provide any keys, pubkeys, witnessscript, or redeemscript.\");\n+            import_data = ImportData();\n+            pubkey_map.clear();\n+            privkey_map.clear();\n+            have_solving_data = false;\n+        } else {\n+            // RecurseImportData() removes any relevant redeemscript/witnessscript from import_data, so we can use that to discover if a superfluous one was provided.\n+            if (import_data.redeemscript) warnings.push_back(\"Ignoring redeemscript as this is not a P2SH script.\");\n+            if (import_data.witnessscript) warnings.push_back(\"Ignoring witnessscript as this is not a (P2SH-)P2WSH script.\");\n+            for (auto it = privkey_map.begin(); it != privkey_map.end(); ) {\n+                auto oldit = it++;\n+                if (import_data.used_keys.count(oldit->first) == 0) {\n+                    warnings.push_back(\"Ignoring irrelevant private key.\");\n+                    privkey_map.erase(oldit);\n                 }\n-                pubkey = pubkey_temp;\n             }\n-            if (pubkey.size() > 0) {\n-                if (!pubkey.IsFullyValid()) {\n-                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Pubkey is not a valid public key\");\n+            for (auto it = pubkey_map.begin(); it != pubkey_map.end(); ) {\n+                auto oldit = it++;\n+                auto key_data_it = import_data.used_keys.find(oldit->first);\n+                if (key_data_it == import_data.used_keys.end() || !key_data_it->second) {\n+                    warnings.push_back(\"Ignoring public key \\\"\" + HexStr(oldit->first) + \"\\\" as it doesn't appear inside P2PKH or P2WPKH.\");\n+                    pubkey_map.erase(oldit);\n                 }\n+            }\n+        }\n+    }\n \n-                // Check the key corresponds to the destination given\n-                std::vector<CTxDestination> destinations = GetAllDestinationsForKey(pubkey);\n-                if (std::find(destinations.begin(), destinations.end(), dest) == destinations.end()) {\n-                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Key does not match address destination\");\n-                }\n+    return warnings;\n+}\n \n-                // This is necessary to force the wallet to import the pubKey\n-                CScript scriptRawPubKey = GetScriptForRawPubKey(pubkey);\n+static UniValue ProcessImportDescriptor(ImportData& import_data, std::map<CKeyID, CPubKey>& pubkey_map, std::map<CKeyID, CKey>& privkey_map, std::set<CScript>& script_pub_keys, bool& have_solving_data, const UniValue& data, std::vector<CKeyID>& ordered_pubkeys)\n+{\n+    UniValue warnings(UniValue::VARR);\n \n-                if (::IsMine(*pwallet, scriptRawPubKey) == ISMINE_SPENDABLE) {\n-                    throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the private key for this address or script\");\n-                }\n+    const std::string& descriptor = data[\"desc\"].get_str();\n+    FlatSigningProvider keys;\n+    auto parsed_desc = Parse(descriptor, keys);\n+    if (!parsed_desc) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Descriptor is invalid\");\n+    }\n \n-                pwallet->MarkDirty();\n+    have_solving_data = parsed_desc->IsSolvable();\n+    const bool watch_only = data.exists(\"watchonly\") ? data[\"watchonly\"].get_bool() : false;\n \n-                if (!pwallet->AddWatchOnly(scriptRawPubKey, timestamp)) {\n-                    throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n-                }\n-            }\n+    int64_t range_start = 0, range_end = 0;\n+    if (!parsed_desc->IsRange() && data.exists(\"range\")) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Range should not be specified for an un-ranged descriptor\");\n+    } else if (parsed_desc->IsRange()) {\n+        if (!data.exists(\"range\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Descriptor is ranged, please specify the range\");\n         }\n-\n-        // Import the address\n-        if (::IsMine(*pwallet, scriptpubkey_script) == ISMINE_SPENDABLE) {\n-            throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the private key for this address or script\");\n+        const UniValue& range = data[\"range\"];\n+        range_start = range.exists(\"start\") ? range[\"start\"].get_int64() : 0;\n+        if (!range.exists(\"end\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"End of range for descriptor must be specified\");\n         }\n+        range_end = range[\"end\"].get_int64();\n+    }\n \n-        pwallet->MarkDirty();\n+    const UniValue& priv_keys = data.exists(\"keys\") ? data[\"keys\"].get_array() : UniValue();\n+\n+    // Expand all descriptors to get public keys and scripts.\n+    // TODO: get private keys from descriptors too\n+    for (int i = range_start; i <= range_end; ++i) {",
      "path": "src/wallet/rpcdump.cpp",
      "position": null,
      "original_position": 426,
      "commit_id": "264425be1f889ff933ecd4eafb74f1a7a0257eac",
      "original_commit_id": "9ec4aaca284673e1c92a02fdc4dea9a1a3e6038c",
      "in_reply_to_id": 242605811,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Upstream",
      "created_at": "2019-01-18T17:13:22Z",
      "updated_at": "2019-08-04T14:36:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14912#discussion_r249119860",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/249119860"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14912"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1123,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/249119912",
      "pull_request_review_id": 194197389,
      "id": 249119912,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0OTExOTkxMg==",
      "diff_hunk": "@@ -836,246 +837,419 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n     return reply;\n }\n \n-\n-static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+struct ImportData\n {\n-    try {\n-        // First ensure scriptPubKey has either a script or JSON with \"address\" string\n-        const UniValue& scriptPubKey = data[\"scriptPubKey\"];\n-        bool isScript = scriptPubKey.getType() == UniValue::VSTR;\n-        if (!isScript && !(scriptPubKey.getType() == UniValue::VOBJ && scriptPubKey.exists(\"address\"))) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"scriptPubKey must be string with script or JSON with address string\");\n-        }\n-        const std::string& output = isScript ? scriptPubKey.get_str() : scriptPubKey[\"address\"].get_str();\n-\n-        // Optional fields.\n-        const std::string& strRedeemScript = data.exists(\"redeemscript\") ? data[\"redeemscript\"].get_str() : \"\";\n-        const std::string& witness_script_hex = data.exists(\"witnessscript\") ? data[\"witnessscript\"].get_str() : \"\";\n-        const UniValue& pubKeys = data.exists(\"pubkeys\") ? data[\"pubkeys\"].get_array() : UniValue();\n-        const UniValue& keys = data.exists(\"keys\") ? data[\"keys\"].get_array() : UniValue();\n-        const bool internal = data.exists(\"internal\") ? data[\"internal\"].get_bool() : false;\n-        const bool watchOnly = data.exists(\"watchonly\") ? data[\"watchonly\"].get_bool() : false;\n-        const std::string& label = data.exists(\"label\") ? data[\"label\"].get_str() : \"\";\n-\n-        // Generate the script and destination for the scriptPubKey provided\n-        CScript script;\n-        CTxDestination dest;\n-\n-        if (!isScript) {\n-            dest = DecodeDestination(output);\n-            if (!IsValidDestination(dest)) {\n-                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid address\");\n-            }\n-            script = GetScriptForDestination(dest);\n-        } else {\n-            if (!IsHex(output)) {\n-                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid scriptPubKey\");\n-            }\n+    // Input data\n+    std::unique_ptr<CScript> redeemscript; //!< Provided redeemScript; will be moved to `import_scripts` if relevant.\n+    std::unique_ptr<CScript> witnessscript; //!< Provided witnessScript; will be moved to `import_scripts` if relevant.\n \n-            std::vector<unsigned char> vData(ParseHex(output));\n-            script = CScript(vData.begin(), vData.end());\n-            if (!ExtractDestination(script, dest) && !internal) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Internal must be set to true for nonstandard scriptPubKey imports.\");\n-            }\n-        }\n+    // Output data\n+    std::set<CScript> import_scripts;\n+    std::map<CKeyID, bool> used_keys; //!< Import these private keys if available (the value indicates whether if the key is required for solvability)\n+    std::map<CKeyID, KeyOriginInfo> key_origins;\n+};\n \n-        // Watchonly and private keys\n-        if (watchOnly && keys.size()) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Watch-only addresses should not include private keys\");\n+enum class ScriptContext\n+{\n+    TOP, //! Top-level scriptPubKey\n+    P2SH, //! P2SH redeemScript\n+    WITNESS_V0, //! P2WSH witnessScript\n+};\n+\n+// Analyse the provided scriptPubKey, determining which keys and which redeem scripts from the ImportData struct are needed to spend it, and mark them as used.\n+// Returns an error string, or the empty string for success.\n+static std::string RecurseImportData(const CScript& script, ImportData& import_data, const ScriptContext script_ctx)\n+{\n+    // Use Solver to obtain script type and parsed pubkeys or hashes:\n+    std::vector<std::vector<unsigned char>> solverdata;\n+    txnouttype script_type = Solver(script, solverdata);\n+\n+    switch (script_type) {\n+    case TX_PUBKEY: {\n+        CPubKey pubkey(solverdata[0].begin(), solverdata[0].end());\n+        import_data.used_keys.emplace(pubkey.GetID(), false);\n+        return \"\";\n+    }\n+    case TX_PUBKEYHASH: {\n+        CKeyID id = CKeyID(uint160(solverdata[0]));\n+        import_data.used_keys[id] = true;\n+        return \"\";\n+    }\n+    case TX_SCRIPTHASH: {\n+        if (script_ctx == ScriptContext::P2SH) throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Trying to nest P2SH inside another P2SH\");\n+        if (script_ctx == ScriptContext::WITNESS_V0) throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Trying to nest P2SH inside a P2WSH\");\n+        assert(script_ctx == ScriptContext::TOP);\n+        CScriptID id = CScriptID(uint160(solverdata[0]));\n+        auto subscript = std::move(import_data.redeemscript);\n+        if (!subscript) return \"missing redeemscript\";\n+        if (CScriptID(*subscript) != id) return \"redeemScript does not match the scriptPubKey\";\n+        import_data.import_scripts.emplace(*subscript);\n+        return RecurseImportData(*subscript, import_data, ScriptContext::P2SH);\n+    }\n+    case TX_MULTISIG: {\n+        for (size_t i = 1; i + 1< solverdata.size(); ++i) {\n+            CPubKey pubkey(solverdata[i].begin(), solverdata[i].end());\n+            import_data.used_keys.emplace(pubkey.GetID(), false);\n         }\n-\n-        // Internal addresses should not have a label\n-        if (internal && data.exists(\"label\")) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Internal addresses should not have a label\");\n+        return \"\";\n+    }\n+    case TX_WITNESS_V0_SCRIPTHASH: {\n+        if (script_ctx == ScriptContext::WITNESS_V0) throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Trying to nest P2WSH inside another P2WSH\");\n+        uint256 fullid(solverdata[0]);\n+        CScriptID id;\n+        CRIPEMD160().Write(fullid.begin(), fullid.size()).Finalize(id.begin());\n+        auto subscript = std::move(import_data.witnessscript);\n+        if (!subscript) return \"missing witnessscript\";\n+        if (CScriptID(*subscript) != id) return \"witnessScript does not match the scriptPubKey or redeemScript\";\n+        if (script_ctx == ScriptContext::TOP) {\n+            import_data.import_scripts.emplace(script); // Special rule for IsMine: native P2WSH requires the TOP script imported (see script/ismine.cpp)\n         }\n-\n-        // Force users to provide the witness script in its field rather than redeemscript\n-        if (!strRedeemScript.empty() && script.IsPayToWitnessScriptHash()) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"P2WSH addresses have an empty redeemscript. Please provide the witnessscript instead.\");\n+        import_data.import_scripts.emplace(*subscript);\n+        return RecurseImportData(*subscript, import_data, ScriptContext::WITNESS_V0);\n+    }\n+    case TX_WITNESS_V0_KEYHASH: {\n+        if (script_ctx == ScriptContext::WITNESS_V0) throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Trying to nest P2WPKH inside P2WSH\");\n+        CKeyID id = CKeyID(uint160(solverdata[0]));\n+        import_data.used_keys[id] = true;\n+        if (script_ctx == ScriptContext::TOP) {\n+            import_data.import_scripts.emplace(script); // Special rule for IsMine: native P2WPKH requires the TOP script imported (see script/ismine.cpp)\n         }\n+        return \"\";\n+    }\n+    case TX_NULL_DATA:\n+        return \"unspendable script\";\n+    case TX_NONSTANDARD:\n+    case TX_WITNESS_UNKNOWN:\n+    default:\n+        return \"unrecognized script\";\n+    }\n+}\n \n-        CScript scriptpubkey_script = script;\n-        CTxDestination scriptpubkey_dest = dest;\n-        bool allow_p2wpkh = true;\n-\n-        // P2SH\n-        if (!strRedeemScript.empty() && script.IsPayToScriptHash()) {\n-            // Check the redeemScript is valid\n-            if (!IsHex(strRedeemScript)) {\n-                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid redeem script: must be hex string\");\n-            }\n-\n-            // Import redeem script.\n-            std::vector<unsigned char> vData(ParseHex(strRedeemScript));\n-            CScript redeemScript = CScript(vData.begin(), vData.end());\n-            CScriptID redeem_id(redeemScript);\n-\n-            // Check that the redeemScript and scriptPubKey match\n-            if (GetScriptForDestination(redeem_id) != script) {\n-                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"The redeemScript does not match the scriptPubKey\");\n-            }\n-\n-            pwallet->MarkDirty();\n-\n-            if (!pwallet->AddWatchOnly(redeemScript, timestamp)) {\n-                throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n-            }\n-\n-            if (!pwallet->HaveCScript(redeem_id) && !pwallet->AddCScript(redeemScript)) {\n-                throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding p2sh redeemScript to wallet\");\n-            }\n+static UniValue ProcessImportLegacy(ImportData& import_data, std::map<CKeyID, CPubKey>& pubkey_map, std::map<CKeyID, CKey>& privkey_map, std::set<CScript>& script_pub_keys, bool& have_solving_data, const UniValue& data, std::vector<CKeyID>& ordered_pubkeys)\n+{\n+    UniValue warnings(UniValue::VARR);\n \n-            // Now set script to the redeemScript so we parse the inner script as P2WSH or P2WPKH below\n-            script = redeemScript;\n-            ExtractDestination(script, dest);\n+    // First ensure scriptPubKey has either a script or JSON with \"address\" string\n+    const UniValue& scriptPubKey = data[\"scriptPubKey\"];\n+    bool isScript = scriptPubKey.getType() == UniValue::VSTR;\n+    if (!isScript && !(scriptPubKey.getType() == UniValue::VOBJ && scriptPubKey.exists(\"address\"))) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"scriptPubKey must be string with script or JSON with address string\");\n+    }\n+    const std::string& output = isScript ? scriptPubKey.get_str() : scriptPubKey[\"address\"].get_str();\n+\n+    // Optional fields.\n+    const std::string& strRedeemScript = data.exists(\"redeemscript\") ? data[\"redeemscript\"].get_str() : \"\";\n+    const std::string& witness_script_hex = data.exists(\"witnessscript\") ? data[\"witnessscript\"].get_str() : \"\";\n+    const UniValue& pubKeys = data.exists(\"pubkeys\") ? data[\"pubkeys\"].get_array() : UniValue();\n+    const UniValue& keys = data.exists(\"keys\") ? data[\"keys\"].get_array() : UniValue();\n+    const bool internal = data.exists(\"internal\") ? data[\"internal\"].get_bool() : false;\n+    const bool watchOnly = data.exists(\"watchonly\") ? data[\"watchonly\"].get_bool() : false;\n+\n+    // Generate the script and destination for the scriptPubKey provided\n+    CScript script;\n+    CTxDestination dest;\n+    if (!isScript) {\n+        dest = DecodeDestination(output);\n+        if (!IsValidDestination(dest)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid address \\\"\" + output + \"\\\"\");\n         }\n+        script = GetScriptForDestination(dest);\n+    } else {\n+        if (!IsHex(output)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid scriptPubKey \\\"\" + output + \"\\\"\");\n+        }\n+        std::vector<unsigned char> vData(ParseHex(output));\n+        script = CScript(vData.begin(), vData.end());\n+        if (!ExtractDestination(script, dest) && !internal) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Internal must be set to true for nonstandard scriptPubKey imports.\");\n+        }\n+    }\n+    script_pub_keys.emplace(script);\n \n-        // (P2SH-)P2WSH\n-        if (!witness_script_hex.empty() && script.IsPayToWitnessScriptHash()) {\n-            if (!IsHex(witness_script_hex)) {\n-                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid witness script: must be hex string\");\n-            }\n-\n-            // Generate the scripts\n-            std::vector<unsigned char> witness_script_parsed(ParseHex(witness_script_hex));\n-            CScript witness_script = CScript(witness_script_parsed.begin(), witness_script_parsed.end());\n-            CScriptID witness_id(witness_script);\n+    // Parse all arguments\n+    if (strRedeemScript.size()) {\n+        if (!IsHex(strRedeemScript)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid redeem script \\\"\" + strRedeemScript + \"\\\": must be hex string\");\n+        }\n+        auto parsed_redeemscript = ParseHex(strRedeemScript);\n+        import_data.redeemscript = MakeUnique<CScript>(parsed_redeemscript.begin(), parsed_redeemscript.end());\n+    }\n+    if (witness_script_hex.size()) {\n+        if (!IsHex(witness_script_hex)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid witness script \\\"\" + witness_script_hex + \"\\\": must be hex string\");\n+        }\n+        auto parsed_witnessscript = ParseHex(witness_script_hex);\n+        import_data.witnessscript = MakeUnique<CScript>(parsed_witnessscript.begin(), parsed_witnessscript.end());\n+    }\n+    for (size_t i = 0; i < pubKeys.size(); ++i) {\n+        const auto& str = pubKeys[i].get_str();\n+        if (!IsHex(str)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Pubkey \\\"\" + str + \"\\\" must be a hex string\");\n+        }\n+        auto parsed_pubkey = ParseHex(str);\n+        CPubKey pubkey(parsed_pubkey.begin(), parsed_pubkey.end());\n+        if (!pubkey.IsFullyValid()) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Pubkey \\\"\" + str + \"\\\" is not a valid public key\");\n+        }\n+        pubkey_map.emplace(pubkey.GetID(), pubkey);\n+        ordered_pubkeys.push_back(pubkey.GetID());\n+    }\n+    for (size_t i = 0; i < keys.size(); ++i) {\n+        const auto& str = keys[i].get_str();\n+        CKey key = DecodeSecret(str);\n+        if (!key.IsValid()) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key encoding\");\n+        }\n+        CPubKey pubkey = key.GetPubKey();\n+        CKeyID id = pubkey.GetID();\n+        if (pubkey_map.count(id)) {\n+            pubkey_map.erase(id);\n+        }\n+        privkey_map.emplace(id, key);\n+    }\n \n-            // Check that the witnessScript and scriptPubKey match\n-            if (GetScriptForDestination(WitnessV0ScriptHash(witness_script)) != script) {\n-                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"The witnessScript does not match the scriptPubKey or redeemScript\");\n-            }\n+    // Verify and process input data\n+    have_solving_data = import_data.redeemscript || import_data.witnessscript || pubkey_map.size() || privkey_map.size();\n+    if (have_solving_data) {\n+        // Match up data in import_data with the scriptPubKey in script.\n+        auto error = RecurseImportData(script, import_data, ScriptContext::TOP);\n \n-            // Add the witness script as watch only only if it is not for P2SH-P2WSH\n-            if (!scriptpubkey_script.IsPayToScriptHash() && !pwallet->AddWatchOnly(witness_script, timestamp)) {\n-                throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n-            }\n+        // Verify whether the watchonly option corresponds to the availability of private keys.\n+        bool spendable = std::all_of(import_data.used_keys.begin(), import_data.used_keys.end(), [&](const std::pair<CKeyID, bool>& used_key){ return privkey_map.count(used_key.first) > 0; });\n+        if (!watchOnly && !spendable) {\n+            warnings.push_back(\"Some private keys are missing, outputs will be considered watchonly. If this is intentional, specify the watchonly flag.\");\n+        }\n+        if (watchOnly && spendable) {\n+            warnings.push_back(\"All private keys are provided, outputs will be considered spendable. If this is intentional, do not specify the watchonly flag.\");\n+        }\n \n-            if (!pwallet->HaveCScript(witness_id) && !pwallet->AddCScript(witness_script)) {\n-                throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding p2wsh witnessScript to wallet\");\n+        // Check that all required keys for solvability are provided.\n+        if (error.empty()) {\n+            for (const auto& require_key : import_data.used_keys) {\n+                if (!require_key.second) continue; // Not a required key\n+                if (pubkey_map.count(require_key.first) == 0 && privkey_map.count(require_key.first) == 0) {\n+                    error = \"some required keys are missing\";\n+                }\n             }\n-\n-            // Now set script to the witnessScript so we parse the inner script as P2PK or P2PKH below\n-            script = witness_script;\n-            ExtractDestination(script, dest);\n-            allow_p2wpkh = false; // P2WPKH cannot be embedded in P2WSH\n         }\n \n-        // (P2SH-)P2PK/P2PKH/P2WPKH\n-        if (dest.type() == typeid(CKeyID) || dest.type() == typeid(WitnessV0KeyHash)) {\n-            if (!allow_p2wpkh && dest.type() == typeid(WitnessV0KeyHash)) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"P2WPKH cannot be embedded in P2WSH\");\n-            }\n-            if (keys.size() > 1 || pubKeys.size() > 1) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"More than one key given for one single-key address\");\n-            }\n-            CPubKey pubkey;\n-            if (keys.size()) {\n-                pubkey = DecodeSecret(keys[0].get_str()).GetPubKey();\n-            }\n-            if (pubKeys.size()) {\n-                const std::string& strPubKey = pubKeys[0].get_str();\n-                if (!IsHex(strPubKey)) {\n-                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Pubkey must be a hex string\");\n-                }\n-                std::vector<unsigned char> vData(ParseHex(pubKeys[0].get_str()));\n-                CPubKey pubkey_temp(vData.begin(), vData.end());\n-                if (pubkey.size() && pubkey_temp != pubkey) {\n-                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Private key does not match public key for address\");\n+        if (!error.empty()) {\n+            warnings.push_back(\"Importing as non-solvable: \" + error + \". If this is intentional, don't provide any keys, pubkeys, witnessscript, or redeemscript.\");\n+            import_data = ImportData();\n+            pubkey_map.clear();\n+            privkey_map.clear();\n+            have_solving_data = false;\n+        } else {\n+            // RecurseImportData() removes any relevant redeemscript/witnessscript from import_data, so we can use that to discover if a superfluous one was provided.\n+            if (import_data.redeemscript) warnings.push_back(\"Ignoring redeemscript as this is not a P2SH script.\");\n+            if (import_data.witnessscript) warnings.push_back(\"Ignoring witnessscript as this is not a (P2SH-)P2WSH script.\");\n+            for (auto it = privkey_map.begin(); it != privkey_map.end(); ) {\n+                auto oldit = it++;\n+                if (import_data.used_keys.count(oldit->first) == 0) {\n+                    warnings.push_back(\"Ignoring irrelevant private key.\");\n+                    privkey_map.erase(oldit);\n                 }\n-                pubkey = pubkey_temp;\n             }\n-            if (pubkey.size() > 0) {\n-                if (!pubkey.IsFullyValid()) {\n-                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Pubkey is not a valid public key\");\n+            for (auto it = pubkey_map.begin(); it != pubkey_map.end(); ) {\n+                auto oldit = it++;\n+                auto key_data_it = import_data.used_keys.find(oldit->first);\n+                if (key_data_it == import_data.used_keys.end() || !key_data_it->second) {\n+                    warnings.push_back(\"Ignoring public key \\\"\" + HexStr(oldit->first) + \"\\\" as it doesn't appear inside P2PKH or P2WPKH.\");\n+                    pubkey_map.erase(oldit);\n                 }\n+            }\n+        }\n+    }\n \n-                // Check the key corresponds to the destination given\n-                std::vector<CTxDestination> destinations = GetAllDestinationsForKey(pubkey);\n-                if (std::find(destinations.begin(), destinations.end(), dest) == destinations.end()) {\n-                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Key does not match address destination\");\n-                }\n+    return warnings;\n+}\n \n-                // This is necessary to force the wallet to import the pubKey\n-                CScript scriptRawPubKey = GetScriptForRawPubKey(pubkey);\n+static UniValue ProcessImportDescriptor(ImportData& import_data, std::map<CKeyID, CPubKey>& pubkey_map, std::map<CKeyID, CKey>& privkey_map, std::set<CScript>& script_pub_keys, bool& have_solving_data, const UniValue& data, std::vector<CKeyID>& ordered_pubkeys)\n+{\n+    UniValue warnings(UniValue::VARR);\n \n-                if (::IsMine(*pwallet, scriptRawPubKey) == ISMINE_SPENDABLE) {\n-                    throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the private key for this address or script\");\n-                }\n+    const std::string& descriptor = data[\"desc\"].get_str();\n+    FlatSigningProvider keys;\n+    auto parsed_desc = Parse(descriptor, keys);\n+    if (!parsed_desc) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Descriptor is invalid\");\n+    }\n \n-                pwallet->MarkDirty();\n+    have_solving_data = parsed_desc->IsSolvable();\n+    const bool watch_only = data.exists(\"watchonly\") ? data[\"watchonly\"].get_bool() : false;\n \n-                if (!pwallet->AddWatchOnly(scriptRawPubKey, timestamp)) {\n-                    throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n-                }\n-            }\n+    int64_t range_start = 0, range_end = 0;\n+    if (!parsed_desc->IsRange() && data.exists(\"range\")) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Range should not be specified for an un-ranged descriptor\");\n+    } else if (parsed_desc->IsRange()) {\n+        if (!data.exists(\"range\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Descriptor is ranged, please specify the range\");\n         }\n-\n-        // Import the address\n-        if (::IsMine(*pwallet, scriptpubkey_script) == ISMINE_SPENDABLE) {\n-            throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the private key for this address or script\");\n+        const UniValue& range = data[\"range\"];\n+        range_start = range.exists(\"start\") ? range[\"start\"].get_int64() : 0;\n+        if (!range.exists(\"end\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"End of range for descriptor must be specified\");\n         }\n+        range_end = range[\"end\"].get_int64();\n+    }\n \n-        pwallet->MarkDirty();\n+    const UniValue& priv_keys = data.exists(\"keys\") ? data[\"keys\"].get_array() : UniValue();\n+\n+    // Expand all descriptors to get public keys and scripts.\n+    // TODO: get private keys from descriptors too\n+    for (int i = range_start; i <= range_end; ++i) {\n+        FlatSigningProvider out_keys;\n+        std::vector<CScript> scripts_temp;\n+        parsed_desc->Expand(i, keys, scripts_temp, out_keys);\n+        std::copy(scripts_temp.begin(), scripts_temp.end(), std::inserter(script_pub_keys, script_pub_keys.end()));\n+        for (const auto& key_pair : out_keys.pubkeys) {\n+            ordered_pubkeys.push_back(key_pair.first);\n+        }\n \n-        if (!pwallet->AddWatchOnly(scriptpubkey_script, timestamp)) {\n-            throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n+        for (auto const& x : out_keys.scripts) {\n+            import_data.import_scripts.emplace(x.second);\n         }\n \n-        if (!watchOnly && !pwallet->HaveCScript(CScriptID(scriptpubkey_script)) && !pwallet->AddCScript(scriptpubkey_script)) {\n-            throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding scriptPubKey script to wallet\");\n+        std::copy(out_keys.pubkeys.begin(), out_keys.pubkeys.end(), std::inserter(pubkey_map, pubkey_map.end()));\n+        std::copy(out_keys.origins.begin(), out_keys.origins.end(), std::inserter(import_data.key_origins, import_data.key_origins.end()));\n+    }\n+\n+    for (size_t i = 0; i < priv_keys.size(); ++i) {\n+        const auto& str = priv_keys[i].get_str();\n+        CKey key = DecodeSecret(str);\n+        if (!key.IsValid()) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key encoding\");\n         }\n+        CPubKey pubkey = key.GetPubKey();\n+        CKeyID id = pubkey.GetID();\n \n-        // if not internal add to address book or update label\n-        if (!internal) {\n-            assert(IsValidDestination(scriptpubkey_dest));\n-            pwallet->SetAddressBook(scriptpubkey_dest, label, \"receive\");\n+        // Check if this private key corresponds to a public key from the descriptor\n+        if (!pubkey_map.count(id)) {\n+            warnings.push_back(\"Ignoring irrelevant private key.\");\n+        } else {\n+            privkey_map.emplace(id, key);\n         }\n+    }\n \n-        // Import private keys.\n-        for (size_t i = 0; i < keys.size(); i++) {\n-            const std::string& strPrivkey = keys[i].get_str();\n+    // Check if all the public keys have corresponding private keys in the import for spendability.\n+    // This does not take into account threshold multisigs which could be spendable without all keys\n+    bool spendable = std::all_of(pubkey_map.begin(), pubkey_map.end(), [&](const std::pair<CKeyID, CPubKey>& used_key){ return privkey_map.count(used_key.first) > 0; });\n+    if (!watch_only && !spendable) {\n+        warnings.push_back(\"Some private keys are missing, outputs will be considered watchonly. If this is intentional, specify the watchonly flag.\");\n+    }\n+    if (watch_only && spendable) {\n+        warnings.push_back(\"All private keys are provided, outputs will be considered spendable. If this is intentional, do not specify the watchonly flag.\");\n+    }\n \n-            // Checks.\n-            CKey key = DecodeSecret(strPrivkey);\n+    return warnings;\n+}\n \n-            if (!key.IsValid()) {\n-                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key encoding\");\n-            }\n+static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    try {\n+        bool watch_only = data.exists(\"watchonly\") ? data[\"watchonly\"].get_bool() : false;",
      "path": "src/wallet/rpcdump.cpp",
      "position": null,
      "original_position": 492,
      "commit_id": "264425be1f889ff933ecd4eafb74f1a7a0257eac",
      "original_commit_id": "9ec4aaca284673e1c92a02fdc4dea9a1a3e6038c",
      "in_reply_to_id": 242606157,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "(fixed upstream)",
      "created_at": "2019-01-18T17:13:34Z",
      "updated_at": "2019-08-04T14:36:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14912#discussion_r249119912",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/249119912"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14912"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1150,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/249290295",
      "pull_request_review_id": 194403831,
      "id": 249290295,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0OTI5MDI5NQ==",
      "diff_hunk": "@@ -1198,6 +1200,24 @@ void runCommand(const std::string& strCommand)\n         LogPrintf(\"runCommand error: system(%s) returned %d\\n\", strCommand, nErr);\n }\n \n+UniValue runCommandParseJSON(const std::string& strCommand)\n+{\n+    if (strCommand.empty()) return UniValue::VNULL;\n+\n+    std::array<char, 128> buffer;\n+    std::string result;\n+    std::unique_ptr<FILE, decltype(&pclose)> pipe(popen(strCommand.c_str(), \"r\"), pclose);",
      "path": "src/util/system.cpp",
      "position": null,
      "original_position": 22,
      "commit_id": "264425be1f889ff933ecd4eafb74f1a7a0257eac",
      "original_commit_id": "9ec4aaca284673e1c92a02fdc4dea9a1a3e6038c",
      "in_reply_to_id": 242612528,
      "user": {
        "login": "ken2812221",
        "id": 11154118,
        "node_id": "MDQ6VXNlcjExMTU0MTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ken2812221",
        "html_url": "https://github.com/ken2812221",
        "followers_url": "https://api.github.com/users/ken2812221/followers",
        "following_url": "https://api.github.com/users/ken2812221/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ken2812221/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ken2812221/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
        "organizations_url": "https://api.github.com/users/ken2812221/orgs",
        "repos_url": "https://api.github.com/users/ken2812221/repos",
        "events_url": "https://api.github.com/users/ken2812221/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ken2812221/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`popen` and `pclose` are unix-like only. You can't use them on Windows. IMO you could use boost process instead.",
      "created_at": "2019-01-20T18:30:27Z",
      "updated_at": "2019-08-04T14:36:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14912#discussion_r249290295",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/249290295"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14912"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1155,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/249290368",
      "pull_request_review_id": 194403895,
      "id": 249290368,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0OTI5MDM2OA==",
      "diff_hunk": "@@ -1198,6 +1200,24 @@ void runCommand(const std::string& strCommand)\n         LogPrintf(\"runCommand error: system(%s) returned %d\\n\", strCommand, nErr);\n }\n \n+UniValue runCommandParseJSON(const std::string& strCommand)\n+{\n+    if (strCommand.empty()) return UniValue::VNULL;\n+\n+    std::array<char, 128> buffer;\n+    std::string result;\n+    std::unique_ptr<FILE, decltype(&pclose)> pipe(popen(strCommand.c_str(), \"r\"), pclose);",
      "path": "src/util/system.cpp",
      "position": null,
      "original_position": 22,
      "commit_id": "264425be1f889ff933ecd4eafb74f1a7a0257eac",
      "original_commit_id": "9ec4aaca284673e1c92a02fdc4dea9a1a3e6038c",
      "in_reply_to_id": 242612528,
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think we don't depend on boost process.",
      "created_at": "2019-01-20T18:32:30Z",
      "updated_at": "2019-08-04T14:36:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14912#discussion_r249290368",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/249290368"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14912"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1155,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/249290710",
      "pull_request_review_id": 194404207,
      "id": 249290710,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0OTI5MDcxMA==",
      "diff_hunk": "@@ -1198,6 +1200,24 @@ void runCommand(const std::string& strCommand)\n         LogPrintf(\"runCommand error: system(%s) returned %d\\n\", strCommand, nErr);\n }\n \n+UniValue runCommandParseJSON(const std::string& strCommand)\n+{\n+    if (strCommand.empty()) return UniValue::VNULL;\n+\n+    std::array<char, 128> buffer;\n+    std::string result;\n+    std::unique_ptr<FILE, decltype(&pclose)> pipe(popen(strCommand.c_str(), \"r\"), pclose);",
      "path": "src/util/system.cpp",
      "position": null,
      "original_position": 22,
      "commit_id": "264425be1f889ff933ecd4eafb74f1a7a0257eac",
      "original_commit_id": "9ec4aaca284673e1c92a02fdc4dea9a1a3e6038c",
      "in_reply_to_id": 242612528,
      "user": {
        "login": "ken2812221",
        "id": 11154118,
        "node_id": "MDQ6VXNlcjExMTU0MTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ken2812221",
        "html_url": "https://github.com/ken2812221",
        "followers_url": "https://api.github.com/users/ken2812221/followers",
        "following_url": "https://api.github.com/users/ken2812221/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ken2812221/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ken2812221/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
        "organizations_url": "https://api.github.com/users/ken2812221/orgs",
        "repos_url": "https://api.github.com/users/ken2812221/repos",
        "events_url": "https://api.github.com/users/ken2812221/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ken2812221/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I know. But this is the simplest way if this is really necessary to call another process. I don't think that any one here know how to use Windows `CreateProcess` API.",
      "created_at": "2019-01-20T18:43:02Z",
      "updated_at": "2019-08-04T14:36:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14912#discussion_r249290710",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/249290710"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14912"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1155,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/249681804",
      "pull_request_review_id": 194884550,
      "id": 249681804,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0OTY4MTgwNA==",
      "diff_hunk": "@@ -1005,44 +1005,20 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n         \"Clients should transition to using signrawtransactionwithkey and signrawtransactionwithwallet\");\n }\n \n-static UniValue sendrawtransaction(const JSONRPCRequest& request)\n-{\n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n-        throw std::runtime_error(\n-            RPCHelpMan{\"sendrawtransaction\",\n-                \"\\nSubmits raw transaction (serialized, hex-encoded) to local node and network.\\n\"\n-                \"\\nAlso see createrawtransaction and signrawtransactionwithkey calls.\\n\",\n-                {\n-                    {\"hexstring\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The hex string of the raw transaction\"},\n-                    {\"allowhighfees\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Allow high fees\"},\n-                }}\n-                .ToString() +\n-            \"\\nResult:\\n\"\n-            \"\\\"hex\\\"             (string) The transaction hash in hex\\n\"\n-            \"\\nExamples:\\n\"\n-            \"\\nCreate a transaction\\n\"\n-            + HelpExampleCli(\"createrawtransaction\", \"\\\"[{\\\\\\\"txid\\\\\\\" : \\\\\\\"mytxid\\\\\\\",\\\\\\\"vout\\\\\\\":0}]\\\" \\\"{\\\\\\\"myaddress\\\\\\\":0.01}\\\"\") +\n-            \"Sign the transaction, and get back the hex\\n\"\n-            + HelpExampleCli(\"signrawtransactionwithwallet\", \"\\\"myhex\\\"\") +\n-            \"\\nSend the transaction (signed hex)\\n\"\n-            + HelpExampleCli(\"sendrawtransaction\", \"\\\"signedhex\\\"\") +\n-            \"\\nAs a JSON-RPC call\\n\"\n-            + HelpExampleRpc(\"sendrawtransaction\", \"\\\"signedhex\\\"\")\n-        );\n-\n+std::string sendrawtransaction(std::string txhex, bool allowhighfees) {",
      "path": "src/rpc/rawtransaction.cpp",
      "position": null,
      "original_position": 29,
      "commit_id": "264425be1f889ff933ecd4eafb74f1a7a0257eac",
      "original_commit_id": "5297b78e7929d7c74727a1f41a4cf85a180b7b08",
      "in_reply_to_id": null,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`txhex` should be const ref?",
      "created_at": "2019-01-22T08:37:10Z",
      "updated_at": "2019-08-04T14:36:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14912#discussion_r249681804",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/249681804"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14912"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1008,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/249682373",
      "pull_request_review_id": 194885215,
      "id": 249682373,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0OTY4MjM3Mw==",
      "diff_hunk": "@@ -0,0 +1,595 @@\n+// Copyright (c) 2018-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparamsbase.h>\n+#include <core_io.h>\n+#include <key_io.h>\n+#include <rpc/rawtransaction.h>\n+#include <rpc/server.h>\n+#include <rpc/util.h>\n+#include <script/descriptor.h>\n+#include <validation.h>\n+#include <wallet/rpcdump.h>\n+#include <wallet/rpcwallet.h>\n+\n+\n+#include <univalue.h>\n+\n+static UniValue enumeratesigners(const JSONRPCRequest& request)\n+{\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 0) {\n+        throw std::runtime_error(\n+            \"enumeratesigners\\n\"\n+            \"Returns a list of external signers from -signer and associates them\\n\"\n+            \"with the wallet until you stop bitcoind.\\n\"\n+            \"{\\n\"\n+            \"  \\\"signers\\\" : [                                (json array of objects)\\n\"\n+            \"    {\\n\"\n+            \"      \\\"masterkeyfingerprint\\\" : \\\"fingerprint\\\" (string) Master key fingerprint\\n\"\n+            \"    }\\n\"\n+            \"    ,...\\n\"\n+            \"  ]\\n\"\n+            \"}\\n\"\n+        );\n+    }\n+\n+    const std::string command = gArgs.GetArg(\"-signer\", DEFAULT_EXTERNAL_SIGNER);\n+    if (command == \"\") throw JSONRPCError(RPC_WALLET_ERROR, \"Error: restart bitcoind with -signer=<cmd>\");\n+    std::string chain = gArgs.GetChainName();\n+    const bool mainnet = chain == CBaseChainParams::MAIN;\n+    UniValue signers;\n+    try {\n+        signers = ExternalSigner::Enumerate(command, pwallet->m_external_signers, mainnet);\n+    } catch (const ExternalSignerException& e) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, e.what());\n+    }\n+    UniValue result(UniValue::VOBJ);\n+    result.pushKV(\"signers\", signers);\n+    return result;\n+}\n+\n+ExternalSigner *GetSignerForJSONRPCRequest(const JSONRPCRequest& request, int index, CWallet* pwallet) {\n+    if (pwallet->m_external_signers.empty()) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"First call enumeratesigners\");\n+    }\n+\n+    // If no fingerprint is specified, return the only available signer\n+    if (request.params.size() < size_t(index + 1) || request.params[index].isNull()) {\n+        if (pwallet->m_external_signers.size() > 1) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Multiple signers found, please specify which to use\");\n+        }\n+        return &pwallet->m_external_signers.front();\n+    }\n+\n+    const std::string fingerprint = request.params[index].get_str();\n+    for (ExternalSigner &candidate : pwallet->m_external_signers) {\n+        if (candidate.m_fingerprint == fingerprint) return &candidate;\n+    }\n+    throw JSONRPCError(RPC_WALLET_ERROR, \"Signer fingerprint not found\");\n+}\n+\n+UniValue signerdissociate(const JSONRPCRequest& request)\n+{\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 1) {\n+        throw std::runtime_error(\n+            \"signerdissociate ( fingerprint )\\n\"\n+            \"Disossociates external signer from the wallet.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"fingerprint\\\"   (string, optional) Master key fingerprint of signer\\n\"\n+        );\n+    }\n+\n+    ExternalSigner *signer = GetSignerForJSONRPCRequest(request, 0, pwallet);\n+\n+    assert(signer != nullptr);\n+    std::vector<ExternalSigner>::iterator position = std::find(pwallet->m_external_signers.begin(), pwallet->m_external_signers.end(), *signer);\n+    if (position != pwallet->m_external_signers.end()) pwallet->m_external_signers.erase(position);\n+\n+    return NullUniValue;\n+}\n+\n+static UniValue signerdisplayaddress(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.empty() || request.params.size() > 2) {\n+        throw std::runtime_error(\n+            \"signerdisplayaddress\\n\"\n+            \"Display address on an external signer for verification.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"address\\\"       (string, required) The bitcoin address to display.\\n\"\n+            \"2. \\\"fingerprint\\\"   (string, optional) Master key fingerprint of signer\\n\"\n+        );\n+    }\n+\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    ExternalSigner *signer = GetSignerForJSONRPCRequest(request, 1, pwallet);\n+\n+    LOCK(pwallet->cs_wallet);\n+\n+    CTxDestination dest = DecodeDestination(request.params[0].get_str());\n+\n+    // Make sure the destination is valid\n+    if (!IsValidDestination(dest)) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid address\");\n+    }\n+\n+    const CKeyMetadata* meta = nullptr;\n+    CKeyID key_id = GetKeyForDestination(*pwallet, dest);\n+    if (!key_id.IsNull()) {\n+        auto it = pwallet->mapKeyMetadata.find(key_id);\n+        if (it != pwallet->mapKeyMetadata.end()) {\n+            meta = &it->second;\n+        }\n+    }\n+    // TODO: use inferred descriptor (preferably with xpub at the account level)\n+    CScript scriptPubKey = GetScriptForDestination(dest);\n+    if (!meta) {\n+        auto it = pwallet->m_script_metadata.find(CScriptID(scriptPubKey));\n+        if (it != pwallet->m_script_metadata.end()) {\n+            meta = &it->second;\n+        }\n+    }\n+    if (!meta || meta->key_origin.IsNull()) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Missing BIP32 derivation data\");\n+    }\n+\n+    std::string path = meta->hdKeypath;\n+    path.erase(0,2); // Unsafe, but to be replaced with inferred descriptor\n+\n+    KeyOriginInfo info;\n+    if (!pwallet->GetKeyOrigin(key_id, info)) {\n+        throw JSONRPCError(RPC_INTERNAL_ERROR, \"Internal keypath is broken\");\n+    }\n+\n+    bool solvable = IsSolvable(*pwallet, scriptPubKey);\n+    if (!solvable) {\n+        throw JSONRPCError(RPC_INTERNAL_ERROR, \"Address is not solvable\");\n+    }\n+\n+    std::string inferredDescriptor = InferDescriptor(scriptPubKey, *pwallet)->ToString();\n+\n+    // TODO: Use the inferred descriptor directly. Unfortunately it's currently\n+    //       not useful (or is it??).\n+\n+    std::string prefix = \"\";\n+    std::string postfix = \"\";\n+\n+    if (inferredDescriptor.find(\"wpkh\") == 0) {\n+        prefix = \"wpkh(\";\n+        postfix = \")\";\n+    } else if (inferredDescriptor.find(\"sh(wpkh\") == 0) {\n+        prefix = \"sh(wpkh(\";\n+        postfix = \"))\";\n+    } else if (inferredDescriptor.find(\"pkh\") == 0) {\n+        prefix = \"pkh(\";\n+        postfix = \")\";\n+    } else {\n+        throw JSONRPCError(RPC_INTERNAL_ERROR, \"Unable to produce descriptor\");\n+    }\n+    std::string descriptor = prefix + strprintf(\"%08x/\", ReadBE32(info.fingerprint)) + WriteHDKeypath(info.path).erase(0,2) + postfix;\n+    signer->displayAddress(descriptor);\n+\n+    return UniValue(UniValue::VNULL);\n+}\n+\n+UniValue signerfetchkeys(const JSONRPCRequest& request)\n+{\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 1) {\n+        throw std::runtime_error(\n+            \"signerfetchkeys ( fingerprint )\\n\"\n+            \"Obtains keys from external signer and imports them into the wallet.\\n\"\n+            \"Call enumeratesigners before using this.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"fingerprint\\\"   (string, optional) Master key fingerprint of signer\\n\"\n+            \"\\nResult (same as for importmulti):\\n\"\n+            \"[{ \\\"success\\\": true }\"\n+        );\n+    }\n+\n+    ExternalSigner *signer = GetSignerForJSONRPCRequest(request, 0, pwallet);\n+\n+    UniValue descriptors = UniValue(UniValue::VARR);\n+    std::string desc_prefix = \"\";\n+    std::string desc_suffix = \"\";\n+    std::string purpose = \"\";\n+    switch(pwallet->m_default_address_type) {\n+        case OutputType::LEGACY: {\n+            desc_prefix = \"pkh(\";\n+            desc_suffix = \")\";\n+            purpose = \"44h\";\n+            break;\n+        }\n+        case OutputType::P2SH_SEGWIT: {\n+            desc_prefix = \"sh(wpkh(\";\n+            desc_suffix = \"))\";\n+            purpose = \"49h\";\n+            break;\n+        }\n+        case OutputType::BECH32: {\n+            desc_prefix = \"wpkh(\";\n+            desc_suffix = \")\";\n+            purpose = \"84h\";\n+            break;\n+        }\n+        case OutputType::CHANGE_AUTO: {\n+            assert(false);\n+        }\n+    }\n+\n+    const std::string receive_desc = desc_prefix + signer->m_fingerprint + \"/\" + purpose + \"/\" + (signer->m_mainnet ? \"0h\" : \"1h\") + \"/0h/0/*\" + desc_suffix;\n+    UniValue receive_descriptors = signer->getKeys(receive_desc);\n+    if (!receive_descriptors.isArray()) JSONRPCError(RPC_WALLET_ERROR, \"Expected an array of receive descriptors\");\n+    for (const UniValue& descriptor : receive_descriptors.getValues()) {\n+        descriptors.push_back(descriptor);\n+    }\n+\n+\n+    switch(pwallet->m_default_change_type) {\n+        case OutputType::LEGACY: {\n+            desc_prefix = \"pkh(\";\n+            desc_suffix = \")\";\n+            purpose = \"44h\";\n+            break;\n+        }\n+        case OutputType::P2SH_SEGWIT: {\n+            desc_prefix = \"sh(wpkh(\";\n+            desc_suffix = \"))\";\n+            purpose = \"49h\";\n+            break;\n+        }\n+        case OutputType::BECH32: {\n+            desc_prefix = \"wpkh(\";\n+            desc_suffix = \")\";\n+            purpose = \"84h\";\n+            break;\n+        }\n+        case OutputType::CHANGE_AUTO: {\n+            // Use same values as for receive descriptor\n+            break;\n+        }\n+    }\n+\n+    const std::string change_desc = desc_prefix + signer->m_fingerprint + \"/\" + purpose + \"/\" + (signer->m_mainnet ? \"0h\" : \"1h\") + \"/0h/1/*\" + desc_suffix;\n+    UniValue change_descriptors = signer->getKeys(change_desc);\n+    if (!change_descriptors.isArray()) JSONRPCError(RPC_WALLET_ERROR, \"Expected an array of change descriptors\");\n+    for (const UniValue& descriptor : change_descriptors.getValues()) {\n+        descriptors.push_back(descriptor);\n+    }\n+\n+    if (receive_descriptors.size() != change_descriptors.size()) JSONRPCError(RPC_WALLET_ERROR, \"Expected same number of receive and change descriptors\");\n+\n+    // Use importmulti to process the descriptors:\n+    UniValue importdata(UniValue::VARR);\n+\n+    uint64_t keypool_target_size = 0;\n+    keypool_target_size = gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE);\n+\n+    if (keypool_target_size == 0) JSONRPCError(RPC_WALLET_ERROR, \"-keypool must be > 0\");\n+\n+    for (unsigned int i = 0; i < descriptors.size(); ++i) {\n+        const UniValue& descriptor = descriptors.getValues()[i];\n+        // TODO: sanity check the descriptors:\n+        // * check if they're valid descriptors\n+        // * check that it's the fingerprint we asked for\n+        // * check it's the deriviation path we asked for\n+        UniValue key_data(UniValue::VOBJ);\n+        key_data.pushKV(\"desc\", descriptor);\n+        if (receive_descriptors.size() == 1) {\n+            // TODO: check that the descriptor is ranged\n+            UniValue range(UniValue::VOBJ);\n+            // TODO: base range start and end on what's currently in the keypool\n+            range.pushKV(\"start\", 0);\n+            range.pushKV(\"end\", keypool_target_size - 1);\n+            key_data.pushKV(\"range\", range);\n+        } else {\n+            // TODO: check that the descriptor is not ranged\n+        }\n+        if (i >= receive_descriptors.size()) {\n+            key_data.pushKV(\"internal\", true);\n+        }\n+        key_data.pushKV(\"keypool\", true);\n+        key_data.pushKV(\"watchonly\", true);\n+        importdata.push_back(key_data);\n+    }\n+\n+    UniValue result(UniValue::VARR);\n+    {\n+        auto locked_chain = pwallet->chain().lock();\n+        int64_t now = chainActive.Tip() ? chainActive.Tip()->GetMedianTimePast() : 0;\n+        LOCK(pwallet->cs_wallet);\n+        EnsureWalletIsUnlocked(pwallet);\n+        for (const UniValue& data : importdata.getValues()) {\n+            // TODO: prevent inserting the same key twice\n+            result.push_back(ProcessImport(pwallet, data, now));\n+        }\n+    }\n+\n+    return result;\n+}\n+\n+bool signer_process_psbt(ExternalSigner *signer, PartiallySignedTransaction &psbtx) {\n+    assert(signer != nullptr);\n+\n+    // Check if signer fingerpint matches any input master key fingerprint\n+    bool match = false;\n+    for (unsigned int i = 0; i < psbtx.inputs.size(); ++i) {\n+        const PSBTInput& input = psbtx.inputs[i];\n+        for (auto entry : input.hd_keypaths) {\n+            if (signer->m_fingerprint == strprintf(\"%08x\", ReadBE32(entry.second.fingerprint))) match = true;\n+        }\n+    }\n+\n+    if (!match) JSONRPCError(RPC_WALLET_ERROR, \"Signer fingerprint does not match any of the inputs\");\n+\n+    // Serialize the PSBT\n+    // TODO: ExternalSigner signTransaction should take PartiallySignedTransaction argument and serialize that\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << psbtx;\n+\n+    const UniValue signer_result = signer->signTransaction(EncodeBase64(ssTx.str()));\n+    if (!find_value(signer_result, \"psbt\").isStr()) JSONRPCError(RPC_WALLET_ERROR, \"Unexpected result from signer\");\n+\n+    // Process result from signer:\n+    std::string signer_psbt_error;\n+    PartiallySignedTransaction signer_psbtx;\n+    if (!DecodePSBT(signer_psbtx, find_value(signer_result, \"psbt\").get_str(), signer_psbt_error)) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", signer_psbt_error));\n+    }\n+\n+    // TODO: deduplicate completeness check from finalizepsbt:\n+    // Finalize input signatures -- in case we have partial signatures that add up to a complete\n+    //   signature, but have not combined them yet (e.g. because the combiner that created this\n+    //   PartiallySignedTransaction did not understand them), this will combine them into a final\n+    //   script.\n+    bool complete = true;\n+    for (unsigned int i = 0; i < signer_psbtx.tx->vin.size(); ++i) {\n+        complete &= SignPSBTInput(DUMMY_SIGNING_PROVIDER, signer_psbtx, i, SIGHASH_ALL); // Or use SIGHASH type in the PSBT??\n+    }\n+\n+    psbtx = signer_psbtx;\n+\n+    return complete;\n+}\n+\n+UniValue signerprocesspsbt(const JSONRPCRequest& request)\n+{\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw std::runtime_error(\n+            RPCHelpMan{\"signerprocesspsbt\",\n+                \"\\nSign PSBT inputs using external signer\\n\"\n+                \"that we can sign for.\" +\n+                    HelpRequiringPassphrase(pwallet) + \"\\n\",\n+                {\n+                    {\"psbt\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The transaction base64 string\"},\n+                    {\"fingerprint\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\", \"master key fingerprint of signer\"},\n+                }}\n+                .ToString() +\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"psbt\\\" : \\\"value\\\",          (string) The base64-encoded partially signed transaction\\n\"\n+            \"  \\\"complete\\\" : true|false,   (boolean) If the transaction has a complete set of signatures\\n\"\n+            \"  ]\\n\"\n+            \"}\\n\"\n+\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"signerprocesspsbt\", \"\\\"psbt\\\"\")\n+        );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VSTR});\n+\n+    // Unserialize the transaction\n+    PartiallySignedTransaction psbtx;\n+    std::string error;",
      "path": "src/wallet/rpcsigner.cpp",
      "position": 403,
      "original_position": 416,
      "commit_id": "264425be1f889ff933ecd4eafb74f1a7a0257eac",
      "original_commit_id": "5297b78e7929d7c74727a1f41a4cf85a180b7b08",
      "in_reply_to_id": null,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`error` shadows function `error` from L62 in `src/util/system.h`.",
      "created_at": "2019-01-22T08:39:13Z",
      "updated_at": "2019-08-04T14:36:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14912#discussion_r249682373",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/249682373"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14912"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 403,
      "original_line": 403,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/249693754",
      "pull_request_review_id": 194898800,
      "id": 249693754,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0OTY5Mzc1NA==",
      "diff_hunk": "@@ -0,0 +1,595 @@\n+// Copyright (c) 2018-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparamsbase.h>\n+#include <core_io.h>\n+#include <key_io.h>\n+#include <rpc/rawtransaction.h>\n+#include <rpc/server.h>\n+#include <rpc/util.h>\n+#include <script/descriptor.h>\n+#include <validation.h>\n+#include <wallet/rpcdump.h>\n+#include <wallet/rpcwallet.h>\n+\n+\n+#include <univalue.h>\n+\n+static UniValue enumeratesigners(const JSONRPCRequest& request)\n+{\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 0) {\n+        throw std::runtime_error(\n+            \"enumeratesigners\\n\"\n+            \"Returns a list of external signers from -signer and associates them\\n\"\n+            \"with the wallet until you stop bitcoind.\\n\"\n+            \"{\\n\"\n+            \"  \\\"signers\\\" : [                                (json array of objects)\\n\"\n+            \"    {\\n\"\n+            \"      \\\"masterkeyfingerprint\\\" : \\\"fingerprint\\\" (string) Master key fingerprint\\n\"\n+            \"    }\\n\"\n+            \"    ,...\\n\"\n+            \"  ]\\n\"\n+            \"}\\n\"\n+        );\n+    }\n+\n+    const std::string command = gArgs.GetArg(\"-signer\", DEFAULT_EXTERNAL_SIGNER);\n+    if (command == \"\") throw JSONRPCError(RPC_WALLET_ERROR, \"Error: restart bitcoind with -signer=<cmd>\");\n+    std::string chain = gArgs.GetChainName();\n+    const bool mainnet = chain == CBaseChainParams::MAIN;\n+    UniValue signers;\n+    try {\n+        signers = ExternalSigner::Enumerate(command, pwallet->m_external_signers, mainnet);\n+    } catch (const ExternalSignerException& e) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, e.what());\n+    }\n+    UniValue result(UniValue::VOBJ);\n+    result.pushKV(\"signers\", signers);\n+    return result;\n+}\n+\n+ExternalSigner *GetSignerForJSONRPCRequest(const JSONRPCRequest& request, int index, CWallet* pwallet) {\n+    if (pwallet->m_external_signers.empty()) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"First call enumeratesigners\");\n+    }\n+\n+    // If no fingerprint is specified, return the only available signer\n+    if (request.params.size() < size_t(index + 1) || request.params[index].isNull()) {\n+        if (pwallet->m_external_signers.size() > 1) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Multiple signers found, please specify which to use\");\n+        }\n+        return &pwallet->m_external_signers.front();\n+    }\n+\n+    const std::string fingerprint = request.params[index].get_str();\n+    for (ExternalSigner &candidate : pwallet->m_external_signers) {\n+        if (candidate.m_fingerprint == fingerprint) return &candidate;\n+    }\n+    throw JSONRPCError(RPC_WALLET_ERROR, \"Signer fingerprint not found\");\n+}\n+\n+UniValue signerdissociate(const JSONRPCRequest& request)\n+{\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 1) {\n+        throw std::runtime_error(\n+            \"signerdissociate ( fingerprint )\\n\"\n+            \"Disossociates external signer from the wallet.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"fingerprint\\\"   (string, optional) Master key fingerprint of signer\\n\"\n+        );\n+    }\n+\n+    ExternalSigner *signer = GetSignerForJSONRPCRequest(request, 0, pwallet);\n+\n+    assert(signer != nullptr);\n+    std::vector<ExternalSigner>::iterator position = std::find(pwallet->m_external_signers.begin(), pwallet->m_external_signers.end(), *signer);\n+    if (position != pwallet->m_external_signers.end()) pwallet->m_external_signers.erase(position);\n+\n+    return NullUniValue;\n+}\n+\n+static UniValue signerdisplayaddress(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.empty() || request.params.size() > 2) {\n+        throw std::runtime_error(\n+            \"signerdisplayaddress\\n\"\n+            \"Display address on an external signer for verification.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"address\\\"       (string, required) The bitcoin address to display.\\n\"\n+            \"2. \\\"fingerprint\\\"   (string, optional) Master key fingerprint of signer\\n\"\n+        );\n+    }\n+\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    ExternalSigner *signer = GetSignerForJSONRPCRequest(request, 1, pwallet);\n+\n+    LOCK(pwallet->cs_wallet);\n+\n+    CTxDestination dest = DecodeDestination(request.params[0].get_str());\n+\n+    // Make sure the destination is valid\n+    if (!IsValidDestination(dest)) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid address\");\n+    }\n+\n+    const CKeyMetadata* meta = nullptr;\n+    CKeyID key_id = GetKeyForDestination(*pwallet, dest);\n+    if (!key_id.IsNull()) {\n+        auto it = pwallet->mapKeyMetadata.find(key_id);\n+        if (it != pwallet->mapKeyMetadata.end()) {\n+            meta = &it->second;\n+        }\n+    }\n+    // TODO: use inferred descriptor (preferably with xpub at the account level)\n+    CScript scriptPubKey = GetScriptForDestination(dest);\n+    if (!meta) {\n+        auto it = pwallet->m_script_metadata.find(CScriptID(scriptPubKey));\n+        if (it != pwallet->m_script_metadata.end()) {\n+            meta = &it->second;\n+        }\n+    }\n+    if (!meta || meta->key_origin.IsNull()) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Missing BIP32 derivation data\");\n+    }\n+\n+    std::string path = meta->hdKeypath;\n+    path.erase(0,2); // Unsafe, but to be replaced with inferred descriptor\n+\n+    KeyOriginInfo info;\n+    if (!pwallet->GetKeyOrigin(key_id, info)) {\n+        throw JSONRPCError(RPC_INTERNAL_ERROR, \"Internal keypath is broken\");\n+    }\n+\n+    bool solvable = IsSolvable(*pwallet, scriptPubKey);\n+    if (!solvable) {\n+        throw JSONRPCError(RPC_INTERNAL_ERROR, \"Address is not solvable\");\n+    }\n+\n+    std::string inferredDescriptor = InferDescriptor(scriptPubKey, *pwallet)->ToString();\n+\n+    // TODO: Use the inferred descriptor directly. Unfortunately it's currently\n+    //       not useful (or is it??).\n+\n+    std::string prefix = \"\";\n+    std::string postfix = \"\";\n+\n+    if (inferredDescriptor.find(\"wpkh\") == 0) {",
      "path": "src/wallet/rpcsigner.cpp",
      "position": null,
      "original_position": 177,
      "commit_id": "264425be1f889ff933ecd4eafb74f1a7a0257eac",
      "original_commit_id": "5297b78e7929d7c74727a1f41a4cf85a180b7b08",
      "in_reply_to_id": null,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`compare` is more efficient than `find` when checking prefixes, right?\r\n\r\nWhat about `StartsWith(inferredDescriptor, \"wpkh\")` instead?\r\n\r\n```\r\nstatic inline bool StartsWith(const std::string& input, const std::string& prefix) {\r\n    return input.size() >= prefix.size() && input.compare(0, prefix.size(), prefix) == 0;\r\n}\r\n```",
      "created_at": "2019-01-22T09:13:33Z",
      "updated_at": "2019-08-04T14:36:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14912#discussion_r249693754",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/249693754"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14912"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 184,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/249876959",
      "pull_request_review_id": 195127569,
      "id": 249876959,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0OTg3Njk1OQ==",
      "diff_hunk": "@@ -0,0 +1,595 @@\n+// Copyright (c) 2018-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparamsbase.h>\n+#include <core_io.h>\n+#include <key_io.h>\n+#include <rpc/rawtransaction.h>\n+#include <rpc/server.h>\n+#include <rpc/util.h>\n+#include <script/descriptor.h>\n+#include <validation.h>\n+#include <wallet/rpcdump.h>\n+#include <wallet/rpcwallet.h>\n+\n+\n+#include <univalue.h>\n+\n+static UniValue enumeratesigners(const JSONRPCRequest& request)\n+{\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 0) {\n+        throw std::runtime_error(\n+            \"enumeratesigners\\n\"\n+            \"Returns a list of external signers from -signer and associates them\\n\"\n+            \"with the wallet until you stop bitcoind.\\n\"\n+            \"{\\n\"\n+            \"  \\\"signers\\\" : [                                (json array of objects)\\n\"\n+            \"    {\\n\"\n+            \"      \\\"masterkeyfingerprint\\\" : \\\"fingerprint\\\" (string) Master key fingerprint\\n\"\n+            \"    }\\n\"\n+            \"    ,...\\n\"\n+            \"  ]\\n\"\n+            \"}\\n\"\n+        );\n+    }\n+\n+    const std::string command = gArgs.GetArg(\"-signer\", DEFAULT_EXTERNAL_SIGNER);\n+    if (command == \"\") throw JSONRPCError(RPC_WALLET_ERROR, \"Error: restart bitcoind with -signer=<cmd>\");\n+    std::string chain = gArgs.GetChainName();\n+    const bool mainnet = chain == CBaseChainParams::MAIN;\n+    UniValue signers;\n+    try {\n+        signers = ExternalSigner::Enumerate(command, pwallet->m_external_signers, mainnet);\n+    } catch (const ExternalSignerException& e) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, e.what());\n+    }\n+    UniValue result(UniValue::VOBJ);\n+    result.pushKV(\"signers\", signers);\n+    return result;\n+}\n+\n+ExternalSigner *GetSignerForJSONRPCRequest(const JSONRPCRequest& request, int index, CWallet* pwallet) {\n+    if (pwallet->m_external_signers.empty()) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"First call enumeratesigners\");\n+    }\n+\n+    // If no fingerprint is specified, return the only available signer\n+    if (request.params.size() < size_t(index + 1) || request.params[index].isNull()) {\n+        if (pwallet->m_external_signers.size() > 1) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Multiple signers found, please specify which to use\");\n+        }\n+        return &pwallet->m_external_signers.front();\n+    }\n+\n+    const std::string fingerprint = request.params[index].get_str();\n+    for (ExternalSigner &candidate : pwallet->m_external_signers) {\n+        if (candidate.m_fingerprint == fingerprint) return &candidate;\n+    }\n+    throw JSONRPCError(RPC_WALLET_ERROR, \"Signer fingerprint not found\");\n+}\n+\n+UniValue signerdissociate(const JSONRPCRequest& request)\n+{\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 1) {\n+        throw std::runtime_error(\n+            \"signerdissociate ( fingerprint )\\n\"\n+            \"Disossociates external signer from the wallet.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"fingerprint\\\"   (string, optional) Master key fingerprint of signer\\n\"\n+        );\n+    }\n+\n+    ExternalSigner *signer = GetSignerForJSONRPCRequest(request, 0, pwallet);\n+\n+    assert(signer != nullptr);\n+    std::vector<ExternalSigner>::iterator position = std::find(pwallet->m_external_signers.begin(), pwallet->m_external_signers.end(), *signer);\n+    if (position != pwallet->m_external_signers.end()) pwallet->m_external_signers.erase(position);\n+\n+    return NullUniValue;\n+}\n+\n+static UniValue signerdisplayaddress(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.empty() || request.params.size() > 2) {\n+        throw std::runtime_error(\n+            \"signerdisplayaddress\\n\"\n+            \"Display address on an external signer for verification.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"address\\\"       (string, required) The bitcoin address to display.\\n\"\n+            \"2. \\\"fingerprint\\\"   (string, optional) Master key fingerprint of signer\\n\"\n+        );\n+    }\n+\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    ExternalSigner *signer = GetSignerForJSONRPCRequest(request, 1, pwallet);\n+\n+    LOCK(pwallet->cs_wallet);\n+\n+    CTxDestination dest = DecodeDestination(request.params[0].get_str());\n+\n+    // Make sure the destination is valid\n+    if (!IsValidDestination(dest)) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid address\");\n+    }\n+\n+    const CKeyMetadata* meta = nullptr;\n+    CKeyID key_id = GetKeyForDestination(*pwallet, dest);\n+    if (!key_id.IsNull()) {\n+        auto it = pwallet->mapKeyMetadata.find(key_id);\n+        if (it != pwallet->mapKeyMetadata.end()) {\n+            meta = &it->second;\n+        }\n+    }\n+    // TODO: use inferred descriptor (preferably with xpub at the account level)\n+    CScript scriptPubKey = GetScriptForDestination(dest);\n+    if (!meta) {\n+        auto it = pwallet->m_script_metadata.find(CScriptID(scriptPubKey));\n+        if (it != pwallet->m_script_metadata.end()) {\n+            meta = &it->second;\n+        }\n+    }\n+    if (!meta || meta->key_origin.IsNull()) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Missing BIP32 derivation data\");\n+    }\n+\n+    std::string path = meta->hdKeypath;\n+    path.erase(0,2); // Unsafe, but to be replaced with inferred descriptor\n+\n+    KeyOriginInfo info;\n+    if (!pwallet->GetKeyOrigin(key_id, info)) {\n+        throw JSONRPCError(RPC_INTERNAL_ERROR, \"Internal keypath is broken\");\n+    }\n+\n+    bool solvable = IsSolvable(*pwallet, scriptPubKey);\n+    if (!solvable) {\n+        throw JSONRPCError(RPC_INTERNAL_ERROR, \"Address is not solvable\");\n+    }\n+\n+    std::string inferredDescriptor = InferDescriptor(scriptPubKey, *pwallet)->ToString();\n+\n+    // TODO: Use the inferred descriptor directly. Unfortunately it's currently\n+    //       not useful (or is it??).\n+\n+    std::string prefix = \"\";\n+    std::string postfix = \"\";\n+\n+    if (inferredDescriptor.find(\"wpkh\") == 0) {",
      "path": "src/wallet/rpcsigner.cpp",
      "position": null,
      "original_position": 177,
      "commit_id": "264425be1f889ff933ecd4eafb74f1a7a0257eac",
      "original_commit_id": "5297b78e7929d7c74727a1f41a4cf85a180b7b08",
      "in_reply_to_id": 249693754,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I plan to ditch this part of the code, so no need to improve it :-)",
      "created_at": "2019-01-22T17:11:15Z",
      "updated_at": "2019-08-04T14:36:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14912#discussion_r249876959",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/249876959"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14912"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 184,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/249910603",
      "pull_request_review_id": 195168960,
      "id": 249910603,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0OTkxMDYwMw==",
      "diff_hunk": "@@ -1198,6 +1200,24 @@ void runCommand(const std::string& strCommand)\n         LogPrintf(\"runCommand error: system(%s) returned %d\\n\", strCommand, nErr);\n }\n \n+UniValue runCommandParseJSON(const std::string& strCommand)\n+{\n+    if (strCommand.empty()) return UniValue::VNULL;\n+\n+    std::array<char, 128> buffer;\n+    std::string result;\n+    std::unique_ptr<FILE, decltype(&pclose)> pipe(popen(strCommand.c_str(), \"r\"), pclose);",
      "path": "src/util/system.cpp",
      "position": null,
      "original_position": 22,
      "commit_id": "264425be1f889ff933ecd4eafb74f1a7a0257eac",
      "original_commit_id": "9ec4aaca284673e1c92a02fdc4dea9a1a3e6038c",
      "in_reply_to_id": 242612528,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It would be reasonable to call `_popen` function here on windows or `#define popen _popen`: https://docs.microsoft.com/en-us/cpp/c-runtime-library/reference/system-wsystem.\r\n\r\nYou do need to be very careful about special characters passed in the command string, but it should be ok if you stick to hex/base64.",
      "created_at": "2019-01-22T18:42:16Z",
      "updated_at": "2019-08-04T14:36:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14912#discussion_r249910603",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/249910603"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14912"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1155,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/249924733",
      "pull_request_review_id": 195186455,
      "id": 249924733,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0OTkyNDczMw==",
      "diff_hunk": "@@ -1198,6 +1200,24 @@ void runCommand(const std::string& strCommand)\n         LogPrintf(\"runCommand error: system(%s) returned %d\\n\", strCommand, nErr);\n }\n \n+UniValue runCommandParseJSON(const std::string& strCommand)\n+{\n+    if (strCommand.empty()) return UniValue::VNULL;\n+\n+    std::array<char, 128> buffer;\n+    std::string result;\n+    std::unique_ptr<FILE, decltype(&pclose)> pipe(popen(strCommand.c_str(), \"r\"), pclose);",
      "path": "src/util/system.cpp",
      "position": null,
      "original_position": 22,
      "commit_id": "264425be1f889ff933ecd4eafb74f1a7a0257eac",
      "original_commit_id": "9ec4aaca284673e1c92a02fdc4dea9a1a3e6038c",
      "in_reply_to_id": 242612528,
      "user": {
        "login": "ken2812221",
        "id": 11154118,
        "node_id": "MDQ6VXNlcjExMTU0MTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ken2812221",
        "html_url": "https://github.com/ken2812221",
        "followers_url": "https://api.github.com/users/ken2812221/followers",
        "following_url": "https://api.github.com/users/ken2812221/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ken2812221/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ken2812221/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
        "organizations_url": "https://api.github.com/users/ken2812221/orgs",
        "repos_url": "https://api.github.com/users/ken2812221/repos",
        "events_url": "https://api.github.com/users/ken2812221/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ken2812221/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`_popen` would only work in console program. See https://docs.microsoft.com/en-us/cpp/c-runtime-library/reference/popen-wpopen. So it doesn't work in Qt.",
      "created_at": "2019-01-22T19:20:35Z",
      "updated_at": "2019-08-04T14:36:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14912#discussion_r249924733",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/249924733"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14912"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1155,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/253279565",
      "pull_request_review_id": 199363825,
      "id": 253279565,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1MzI3OTU2NQ==",
      "diff_hunk": "@@ -0,0 +1,594 @@\n+// Copyright (c) 2018-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparamsbase.h>\n+#include <core_io.h>\n+#include <key_io.h>\n+#include <psbt.h>\n+#include <rpc/rawtransaction.h>\n+#include <rpc/server.h>\n+#include <rpc/util.h>\n+#include <script/descriptor.h>\n+#include <validation.h>\n+#include <wallet/psbtwallet.h>\n+#include <wallet/rpcdump.h>\n+#include <wallet/rpcwallet.h>\n+\n+\n+#include <univalue.h>\n+\n+UniValue getsigners(CWallet *pwallet) {\n+    const std::string command = gArgs.GetArg(\"-signer\", DEFAULT_EXTERNAL_SIGNER);\n+    if (command == \"\") throw JSONRPCError(RPC_WALLET_ERROR, \"Error: restart bitcoind with -signer=<cmd>\");\n+    std::string chain = gArgs.GetChainName();\n+    const bool mainnet = chain == CBaseChainParams::MAIN;\n+    UniValue signers;\n+    try {\n+        return ExternalSigner::Enumerate(command, pwallet->m_external_signers, mainnet);\n+    } catch (const ExternalSignerException& e) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, e.what());\n+    }\n+}\n+\n+static UniValue enumeratesigners(const JSONRPCRequest& request)\n+{\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 0) {\n+        throw std::runtime_error(\n+            RPCHelpMan{\"enumeratesigners\\n\",\n+                \"Returns a list of external signers from -signer and associates them\\n\"\n+                \"with the wallet until you stop bitcoind.\\n\",\n+                {},\n+                RPCResult{\n+                    \"{\\n\"\n+                    \"  \\\"signers\\\" : [                              (json array of objects)\\n\"\n+                    \"    {\\n\"\n+                    \"      \\\"masterkeyfingerprint\\\" : \\\"fingerprint\\\" (string) Master key fingerprint\\n\"\n+                    \"    }\\n\"\n+                    \"    ,...\\n\"\n+                    \"  ]\\n\"\n+                    \"}\\n\"\n+                },\n+                RPCExamples{\"\"}\n+            }.ToString()\n+        );\n+    }\n+\n+    UniValue signers = getsigners(pwallet);\n+    UniValue result(UniValue::VOBJ);\n+    result.pushKV(\"signers\", signers);\n+    return result;\n+}\n+\n+ExternalSigner *GetSignerForJSONRPCRequest(const JSONRPCRequest& request, int index, CWallet* pwallet) {\n+    if (pwallet->m_external_signers.empty()) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"First call enumeratesigners\");\n+    }\n+\n+    // If no fingerprint is specified, return the only available signer\n+    if (request.params.size() < size_t(index + 1) || request.params[index].isNull()) {\n+        if (pwallet->m_external_signers.size() > 1) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Multiple signers found, please specify which to use\");\n+        }\n+        return &pwallet->m_external_signers.front();\n+    }\n+\n+    const std::string fingerprint = request.params[index].get_str();\n+    for (ExternalSigner &candidate : pwallet->m_external_signers) {\n+        if (candidate.m_fingerprint == fingerprint) return &candidate;\n+    }\n+    throw JSONRPCError(RPC_WALLET_ERROR, \"Signer fingerprint not found\");\n+}\n+\n+UniValue signerdissociate(const JSONRPCRequest& request)\n+{\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 1) {\n+        throw std::runtime_error(\n+            RPCHelpMan{\"signerdissociate\",\n+                \"Disossociates external signer from the wallet.\\n\",\n+                {\n+                    {\"fingerprint\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\", \"Master key fingerprint of signer\"},\n+                },\n+                RPCResult{\"\"},",
      "path": "src/wallet/rpcsigner.cpp",
      "position": null,
      "original_position": 106,
      "commit_id": "264425be1f889ff933ecd4eafb74f1a7a0257eac",
      "original_commit_id": "6323969eef86dfa1c35359f1ff67aec6318f46f4",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The result is \"null\", not \"\". This causes the crash.",
      "created_at": "2019-02-02T21:50:26Z",
      "updated_at": "2019-08-04T14:36:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14912#discussion_r253279565",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/253279565"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14912"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 106,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/253279783",
      "pull_request_review_id": 199364098,
      "id": 253279783,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1MzI3OTc4Mw==",
      "diff_hunk": "@@ -0,0 +1,594 @@\n+// Copyright (c) 2018-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparamsbase.h>\n+#include <core_io.h>\n+#include <key_io.h>\n+#include <psbt.h>\n+#include <rpc/rawtransaction.h>\n+#include <rpc/server.h>\n+#include <rpc/util.h>\n+#include <script/descriptor.h>\n+#include <validation.h>\n+#include <wallet/psbtwallet.h>\n+#include <wallet/rpcdump.h>\n+#include <wallet/rpcwallet.h>\n+\n+\n+#include <univalue.h>\n+\n+UniValue getsigners(CWallet *pwallet) {\n+    const std::string command = gArgs.GetArg(\"-signer\", DEFAULT_EXTERNAL_SIGNER);\n+    if (command == \"\") throw JSONRPCError(RPC_WALLET_ERROR, \"Error: restart bitcoind with -signer=<cmd>\");\n+    std::string chain = gArgs.GetChainName();\n+    const bool mainnet = chain == CBaseChainParams::MAIN;\n+    UniValue signers;\n+    try {\n+        return ExternalSigner::Enumerate(command, pwallet->m_external_signers, mainnet);\n+    } catch (const ExternalSignerException& e) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, e.what());\n+    }\n+}\n+\n+static UniValue enumeratesigners(const JSONRPCRequest& request)\n+{\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 0) {\n+        throw std::runtime_error(\n+            RPCHelpMan{\"enumeratesigners\\n\",\n+                \"Returns a list of external signers from -signer and associates them\\n\"\n+                \"with the wallet until you stop bitcoind.\\n\",\n+                {},\n+                RPCResult{\n+                    \"{\\n\"\n+                    \"  \\\"signers\\\" : [                              (json array of objects)\\n\"\n+                    \"    {\\n\"\n+                    \"      \\\"masterkeyfingerprint\\\" : \\\"fingerprint\\\" (string) Master key fingerprint\\n\"\n+                    \"    }\\n\"\n+                    \"    ,...\\n\"\n+                    \"  ]\\n\"\n+                    \"}\\n\"\n+                },\n+                RPCExamples{\"\"}\n+            }.ToString()\n+        );\n+    }\n+\n+    UniValue signers = getsigners(pwallet);\n+    UniValue result(UniValue::VOBJ);\n+    result.pushKV(\"signers\", signers);\n+    return result;\n+}\n+\n+ExternalSigner *GetSignerForJSONRPCRequest(const JSONRPCRequest& request, int index, CWallet* pwallet) {\n+    if (pwallet->m_external_signers.empty()) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"First call enumeratesigners\");\n+    }\n+\n+    // If no fingerprint is specified, return the only available signer\n+    if (request.params.size() < size_t(index + 1) || request.params[index].isNull()) {\n+        if (pwallet->m_external_signers.size() > 1) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Multiple signers found, please specify which to use\");\n+        }\n+        return &pwallet->m_external_signers.front();\n+    }\n+\n+    const std::string fingerprint = request.params[index].get_str();\n+    for (ExternalSigner &candidate : pwallet->m_external_signers) {\n+        if (candidate.m_fingerprint == fingerprint) return &candidate;\n+    }\n+    throw JSONRPCError(RPC_WALLET_ERROR, \"Signer fingerprint not found\");\n+}\n+\n+UniValue signerdissociate(const JSONRPCRequest& request)\n+{\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 1) {\n+        throw std::runtime_error(\n+            RPCHelpMan{\"signerdissociate\",\n+                \"Disossociates external signer from the wallet.\\n\",\n+                {\n+                    {\"fingerprint\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\", \"Master key fingerprint of signer\"},\n+                },\n+                RPCResult{\"\"},",
      "path": "src/wallet/rpcsigner.cpp",
      "position": null,
      "original_position": 106,
      "commit_id": "264425be1f889ff933ecd4eafb74f1a7a0257eac",
      "original_commit_id": "6323969eef86dfa1c35359f1ff67aec6318f46f4",
      "in_reply_to_id": 253279565,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed!",
      "created_at": "2019-02-02T22:00:12Z",
      "updated_at": "2019-08-04T14:36:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14912#discussion_r253279783",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/253279783"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14912"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 106,
      "side": "RIGHT"
    }
  ]
}