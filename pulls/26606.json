{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606",
    "id": 1139581261,
    "node_id": "PR_kwDOABII585D7KFN",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/26606",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/26606.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/26606.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26606",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26606/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/0dd59f3769bfb7cb15f7a93aa5efac66e3c3e50e",
    "number": 26606,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "wallet: Implement independent BDB parser",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Split from #26596 \r\n\r\nThis PR adds `BerkeleyRODatabase` which is an independent implementation of a BDB file parser. It provides read only access to a BDB file, and can therefore be used as a read only database backend for wallets. This will be used for dumping legacy wallet records and migrating legacy wallets without the need for BDB itself.\r\n\r\nWallettool's `dump` command is changed to use `BerkeleyRODatabase` instead of `BerkeleyDatabase` (and `CWallet` itself) to demonstrate that this parser works and to test it against the existing wallettool functional tests.",
    "labels": [
      {
        "id": 149424,
        "node_id": "MDU6TGFiZWwxNDk0MjQ=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
        "name": "Wallet",
        "color": "08a781",
        "default": false
      },
      {
        "id": 5334691551,
        "node_id": "LA_kwDOABII588AAAABPfju3w",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/CI%20failed",
        "name": "CI failed",
        "description": "",
        "color": "cccccc",
        "default": false
      }
    ],
    "created_at": "2022-11-29T21:50:53Z",
    "updated_at": "2023-08-01T21:19:48Z",
    "mergeable": true,
    "mergeable_state": "blocked",
    "merge_commit_sha": "c305e3144c8e8439f9ae767140312d31c2f7da50",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "achow101:berkeleyro",
      "ref": "berkeleyro",
      "sha": "0dd59f3769bfb7cb15f7a93aa5efac66e3c3e50e",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 45006379,
        "node_id": "MDEwOlJlcG9zaXRvcnk0NTAwNjM3OQ==",
        "name": "bitcoin",
        "full_name": "achow101/bitcoin",
        "owner": {
          "login": "achow101",
          "id": 3782274,
          "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
          "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/achow101",
          "html_url": "https://github.com/achow101",
          "followers_url": "https://api.github.com/users/achow101/followers",
          "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
          "organizations_url": "https://api.github.com/users/achow101/orgs",
          "repos_url": "https://api.github.com/users/achow101/repos",
          "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/achow101/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/achow101/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/achow101/bitcoin",
        "archive_url": "https://api.github.com/repos/achow101/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/achow101/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/achow101/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/achow101/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/achow101/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/achow101/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/achow101/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/achow101/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/achow101/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/achow101/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/achow101/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/achow101/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/achow101/bitcoin/events",
        "forks_url": "https://api.github.com/repos/achow101/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/achow101/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/achow101/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/achow101/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/achow101/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/achow101/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/achow101/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/achow101/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/achow101/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/achow101/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/achow101/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/achow101/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/achow101/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/achow101/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/achow101/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/achow101/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:achow101/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/achow101/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/achow101/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/achow101/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/achow101/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/achow101/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/achow101/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/achow101/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/achow101/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/achow101/bitcoin/hooks",
        "svn_url": "https://github.com/achow101/bitcoin",
        "homepage": "https://bitcoin.org/en/download",
        "language": "C++",
        "forks_count": 9,
        "stargazers_count": 35,
        "watchers_count": 35,
        "size": 243666,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-08-01T19:32:45Z",
        "created_at": "2015-10-27T00:20:28Z",
        "updated_at": "2023-07-28T14:25:30Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "1b5cbf71dff1f240bac0156f8800382272489f0b",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 35472,
        "stargazers_count": 70602,
        "watchers_count": 70602,
        "size": 236220,
        "default_branch": "master",
        "open_issues_count": 669,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-08-01T21:55:27Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-08-01T20:22:51Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 998,
    "deletions": 23,
    "changed_files": 15,
    "commits": 11,
    "review_comments": 31,
    "comments": 13
  },
  "events": [
    {
      "event": "commented",
      "id": 1331367594,
      "node_id": "IC_kwDOABII585PWw6q",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1331367594",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-29T21:50:56Z",
      "updated_at": "2023-08-01T19:30:46Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| Concept ACK | [darosior](https://github.com/bitcoin/bitcoin/pull/26606#issuecomment-1479296136), [Sjors](https://github.com/bitcoin/bitcoin/pull/26606#issuecomment-1658468351) |\n| Stale ACK | [TheCharlatan](https://github.com/bitcoin/bitcoin/pull/26606#pullrequestreview-1546251193) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#bitcoin-core/gui/747](https://github.com/bitcoin-core/gui/pull/747) (gui: Open fully encrypted wallets by achow101)\n* [#28153](https://github.com/bitcoin/bitcoin/pull/28153) (fuzz: add target for `ScriptPubKeyMan` (legacy) by brunoerg)\n* [#28142](https://github.com/bitcoin/bitcoin/pull/28142) (wallet: Allow users to create a wallet that encrypts all database records by achow101)\n* [#28060](https://github.com/bitcoin/bitcoin/pull/28060) (util: Teach AutoFile how to XOR by MarcoFalke)\n* [#26596](https://github.com/bitcoin/bitcoin/pull/26596) (wallet: Migrate legacy wallets to descriptor wallets without requiring BDB by achow101)\n* [#25722](https://github.com/bitcoin/bitcoin/pull/25722) (refactor: Use util::Result class for wallet loading by ryanofsky)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#issuecomment-1331367594",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26606"
    },
    {
      "event": "labeled",
      "id": 7916809974,
      "node_id": "LE_lADOABII585Xi1euzwAAAAHX4O72",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7916809974",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-29T21:50:58Z",
      "label": {
        "name": "Wallet",
        "color": "08a781"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7917493896,
      "node_id": "HRFPE_lADOABII585Xi1euzwAAAAHX616I",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7917493896",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-30T00:13:18Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7918049578,
      "node_id": "HRFPE_lADOABII585Xi1euzwAAAAHX89kq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7918049578",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-30T02:36:02Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7918381484,
      "node_id": "HRFPE_lADOABII585Xi1euzwAAAAHX-Oms",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7918381484",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-30T04:09:47Z"
    },
    {
      "event": "reviewed",
      "id": 1199739624,
      "node_id": "PRR_kwDOABII585HgpLo",
      "url": null,
      "actor": null,
      "commit_id": "f135c19f82e3d19ef0292f140d94d8e114a31547",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "user": {
        "login": "Marek777777",
        "id": 117536597,
        "node_id": "U_kgDOBwF3VQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/117536597?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Marek777777",
        "html_url": "https://github.com/Marek777777",
        "followers_url": "https://api.github.com/users/Marek777777/followers",
        "following_url": "https://api.github.com/users/Marek777777/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Marek777777/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Marek777777/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Marek777777/subscriptions",
        "organizations_url": "https://api.github.com/users/Marek777777/orgs",
        "repos_url": "https://api.github.com/users/Marek777777/repos",
        "events_url": "https://api.github.com/users/Marek777777/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Marek777777/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#pullrequestreview-1199739624",
      "submitted_at": "2022-11-30T17:23:47Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7936723616,
      "node_id": "HRFPE_lADOABII585Xi1euzwAAAAHZEMqg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7936723616",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-12-02T00:48:47Z"
    },
    {
      "event": "reviewed",
      "id": 1203279038,
      "node_id": "PRR_kwDOABII585HuJS-",
      "url": null,
      "actor": null,
      "commit_id": "99c43be0a051586fc01cae0af74ea9e2d5f649b1",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "body": ".",
      "user": {
        "login": "Marek777777",
        "id": 117536597,
        "node_id": "U_kgDOBwF3VQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/117536597?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Marek777777",
        "html_url": "https://github.com/Marek777777",
        "followers_url": "https://api.github.com/users/Marek777777/followers",
        "following_url": "https://api.github.com/users/Marek777777/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Marek777777/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Marek777777/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Marek777777/subscriptions",
        "organizations_url": "https://api.github.com/users/Marek777777/orgs",
        "repos_url": "https://api.github.com/users/Marek777777/repos",
        "events_url": "https://api.github.com/users/Marek777777/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Marek777777/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#pullrequestreview-1203279038",
      "submitted_at": "2022-12-03T02:11:29Z",
      "state": "CHANGES_REQUESTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
    },
    {
      "event": "labeled",
      "id": 8550177843,
      "node_id": "LE_lADOABII585Xi1euzwAAAAH9oVwz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8550177843",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-17T19:14:36Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8550968208,
      "node_id": "HRFPE_lADOABII585Xi1euzwAAAAH9rWuQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8550968208",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-17T20:57:47Z"
    },
    {
      "event": "unlabeled",
      "id": 8551149700,
      "node_id": "UNLE_lADOABII585Xi1euzwAAAAH9sDCE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8551149700",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-17T21:24:37Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 1320156842,
      "node_id": "PRR_kwDOABII585Or_6q",
      "url": null,
      "actor": null,
      "commit_id": "89f5edaf85a0e597b7f63accce526a0dfca6990f",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Some review nibbles.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#pullrequestreview-1320156842",
      "submitted_at": "2023-03-01T16:42:51Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8758584134,
      "node_id": "HRFPE_lADOABII585Xi1euzwAAAAIKDWNG",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8758584134",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-15T18:09:31Z"
    },
    {
      "event": "commented",
      "id": 1479296136,
      "node_id": "IC_kwDOABII585YLESI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1479296136",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-22T10:29:17Z",
      "updated_at": "2023-03-22T10:29:17Z",
      "author_association": "MEMBER",
      "body": "Concept ACK. Have you looked into a fuzz target for this parser?",
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#issuecomment-1479296136",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26606"
    },
    {
      "event": "commented",
      "id": 1480027322,
      "node_id": "IC_kwDOABII585YN2y6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1480027322",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-22T18:02:01Z",
      "updated_at": "2023-03-22T18:02:01Z",
      "author_association": "MEMBER",
      "body": "> Have you looked into a fuzz target for this parser?\r\n\r\nI haven't. If someone would like to write one, I'd be happy to add it.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#issuecomment-1480027322",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26606"
    },
    {
      "event": "labeled",
      "id": 9139121889,
      "node_id": "LE_lADOABII585Xi1euzwAAAAIgu-7h",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9139121889",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-01T19:47:09Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9148245130,
      "node_id": "HRFPE_lADOABII585Xi1euzwAAAAIhRySK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9148245130",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-02T17:42:53Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9148332893,
      "node_id": "HRFPE_lADOABII585Xi1euzwAAAAIhSHtd",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9148332893",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-02T17:53:13Z"
    },
    {
      "event": "unlabeled",
      "id": 9149329341,
      "node_id": "UNLE_lADOABII585Xi1euzwAAAAIhV6-9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9149329341",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-02T19:53:46Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 1577039004,
      "node_id": "IC_kwDOABII585d_7Sc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1577039004",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-05T15:40:32Z",
      "updated_at": "2023-06-05T15:40:32Z",
      "author_association": "MEMBER",
      "body": "Adding a fuzz target that compares this to the real thing seems useful. Given that this PR changes `dumpwallet` to rely on the new parser, I think we should do that sooner rather than later. Otherwise I suggest changing e88ad38ac2f3e43de54a332965b13eb7cc27b91f so that the read-only parser is optional, and then change the tests to always use it.\r\n\r\nIt seems a bit daunting to compare the low level DBD parsing code in this PR to the real thing. Having a fuzzer also reduces the need to be very thorough in that. I'm not sure how much confidence I have in the existing test coverage for dumpwallet.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#issuecomment-1577039004",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26606"
    },
    {
      "event": "labeled",
      "id": 9455539693,
      "node_id": "LE_lADOABII585Xi1euzwAAAAIzmBXt",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9455539693",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-07T08:12:47Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9470032193,
      "node_id": "HRFPE_lADOABII585Xi1euzwAAAAI0dTlB",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9470032193",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-08T09:35:08Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9470102935,
      "node_id": "HRFPE_lADOABII585Xi1euzwAAAAI0dk2X",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9470102935",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-08T09:42:18Z"
    },
    {
      "event": "unlabeled",
      "id": 9472828338,
      "node_id": "UNLE_lADOABII585Xi1euzwAAAAI0n-Oy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9472828338",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-08T13:50:08Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 1585733097,
      "node_id": "IC_kwDOABII585ehF3p",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1585733097",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-10T16:52:31Z",
      "updated_at": "2023-06-10T16:52:31Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#issuecomment-1585733097",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26606"
    },
    {
      "event": "unsubscribed",
      "id": 9491485410,
      "node_id": "UE_lADOABII585Xi1euzwAAAAI1vJLi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9491485410",
      "actor": {
        "login": "joostjager",
        "id": 4638168,
        "node_id": "MDQ6VXNlcjQ2MzgxNjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4638168?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/joostjager",
        "html_url": "https://github.com/joostjager",
        "followers_url": "https://api.github.com/users/joostjager/followers",
        "following_url": "https://api.github.com/users/joostjager/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/joostjager/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/joostjager/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/joostjager/subscriptions",
        "organizations_url": "https://api.github.com/users/joostjager/orgs",
        "repos_url": "https://api.github.com/users/joostjager/repos",
        "events_url": "https://api.github.com/users/joostjager/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/joostjager/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-10T19:12:44Z"
    },
    {
      "event": "reviewed",
      "id": 1478773216,
      "node_id": "PRR_kwDOABII585YJEng",
      "url": null,
      "actor": null,
      "commit_id": "f108c6b565e73ea02df94331a347f9d1653ab0b2",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Approach ACK\r\n\r\nI'm testing this against my hand-rolled databases, so far this looks solid.",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#pullrequestreview-1478773216",
      "submitted_at": "2023-06-14T21:21:57Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
    },
    {
      "event": "commented",
      "id": 1600625695,
      "node_id": "IC_kwDOABII585fZ5wf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1600625695",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-21T10:58:16Z",
      "updated_at": "2023-06-21T10:58:16Z",
      "author_association": "CONTRIBUTOR",
      "body": "Wrote [my first fuzz test](https://github.com/TheCharlatan/bitcoin/commit/995ccef131e71ae94f5c73ee3b0297282f5646ed) (I really don't know what I am doing so not even sure this is useful), and managed to hit: `fuzz: wallet/migrate.cpp:384: void wallet::RecordsPage::Unserialize(Stream &) [Stream = CAutoFile]: Assertion false failed`.\r\n\r\n",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#issuecomment-1600625695",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26606"
    },
    {
      "event": "commented",
      "id": 1600634431,
      "node_id": "IC_kwDOABII585fZ74_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1600634431",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-21T11:04:59Z",
      "updated_at": "2023-06-21T11:04:59Z",
      "author_association": "MEMBER",
      "body": "> wallet/migrate.cpp:384: void wallet::RecordsPage::Unserialize(Stream &) [Stream = CAutoFile]: Assertion false failed\r\n\r\nSound like a real bug, because `assert` should generally not be used to validate user input or files read from disk?",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#issuecomment-1600634431",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26606"
    },
    {
      "event": "commented",
      "id": 1601156957,
      "node_id": "IC_kwDOABII585fb7dd",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1601156957",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-21T16:27:38Z",
      "updated_at": "2023-06-21T16:27:38Z",
      "author_association": "MEMBER",
      "body": "> Wrote [my first fuzz test](https://github.com/TheCharlatan/bitcoin/commit/995ccef131e71ae94f5c73ee3b0297282f5646ed) (I really don't know what I am doing so not even sure this is useful), and managed to hit: `fuzz: wallet/migrate.cpp:384: void wallet::RecordsPage::Unserialize(Stream &) [Stream = CAutoFile]: Assertion false failed`.\r\n\r\nDo you have the input that hit that?",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#issuecomment-1601156957",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26606"
    },
    {
      "event": "commented",
      "id": 1601377160,
      "node_id": "IC_kwDOABII585fcxOI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1601377160",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-21T18:33:09Z",
      "updated_at": "2023-06-21T18:33:09Z",
      "author_association": "CONTRIBUTOR",
      "body": "Re https://github.com/bitcoin/bitcoin/pull/26606#issuecomment-1601156957\r\n\r\n> Do you have the input that hit that?\r\n\r\nYes, pasting as base64 here, since I'm not sure about the practice of attaching random binary files:\r\n\r\n```\r\necho \"HQABAAAAAQAAAACPAAUxYgAAAAmK/////wkAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAAAAKysrAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////gAAAAAAz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Xz8/Pz8/Pz8/Pz8/Pz8/Pz88Az8/Pz8/PADqKIIr/////////EwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAArKysAAAAAAAAAAAAAAAAAAADPz8/Pz8/PxXt7e3t7e3t7AABPAAUxz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/S0tLS0tLS0tLS0tLS0tLS0tLS0tLS0nh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eNLS0tLS0tLSKtLS0tLS0tLS0tLS0tLS0tDS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0s/Pz8/Pz8/Pz8/Pz8/PAAB7e3t7e3t7e3sBAAABAAACK08ABQAgXFxcXFxcAQAAAACPAAUxYgAAAAmK/////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKysrAAAAAAAAAAAAAAAAAAAAz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/PzwAAAP/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pzw==\" | base64 -d > crash-assert\r\n```",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#issuecomment-1601377160",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26606"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9670693740,
      "node_id": "HRFPE_lADOABII585Xi1euzwAAAAJAaxNs",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9670693740",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-28T22:27:24Z"
    },
    {
      "event": "commented",
      "id": 1612198266,
      "node_id": "IC_kwDOABII585gGDF6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1612198266",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-28T22:28:42Z",
      "updated_at": "2023-06-28T22:28:42Z",
      "author_association": "MEMBER",
      "body": "Found an issue with prefix cursor handling, updated the tests to check for that. Also pulled in @TheCharlatan's fuzz test and changed several asserts to instead throw exceptions which resolves the fuzz crash.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#issuecomment-1612198266",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26606"
    },
    {
      "event": "mentioned",
      "id": 9670700954,
      "node_id": "MEE_lADOABII585Xi1euzwAAAAJAay-a",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9670700954",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-28T22:28:42Z"
    },
    {
      "event": "subscribed",
      "id": 9670700966,
      "node_id": "SE_lADOABII585Xi1euzwAAAAJAay-m",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9670700966",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-28T22:28:43Z"
    },
    {
      "event": "labeled",
      "id": 9672217925,
      "node_id": "LE_lADOABII585Xi1euzwAAAAJAglVF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9672217925",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-29T03:40:40Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 1612512773,
      "node_id": "IC_kwDOABII585gHP4F",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1612512773",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-29T06:49:37Z",
      "updated_at": "2023-06-29T06:49:37Z",
      "author_association": "MEMBER",
      "body": "Looks like the fuzz target doesn't compile on windows?",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#issuecomment-1612512773",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26606"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9677639145,
      "node_id": "HRFPE_lADOABII585Xi1euzwAAAAJA1Q3p",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9677639145",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-29T14:21:48Z"
    },
    {
      "event": "unlabeled",
      "id": 9678840790,
      "node_id": "UNLE_lADOABII585Xi1euzwAAAAJA52PW",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9678840790",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-29T15:48:49Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 1506063580,
      "node_id": "PRR_kwDOABII585ZxLTc",
      "url": null,
      "actor": null,
      "commit_id": "5b3573e201863cf22cf04597a346a027cb685a13",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#pullrequestreview-1506063580",
      "submitted_at": "2023-06-29T20:22:00Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9681601557,
      "node_id": "HRFPE_lADOABII585Xi1euzwAAAAJBEYQV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9681601557",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-29T21:02:10Z"
    },
    {
      "event": "reviewed",
      "id": 1506562478,
      "node_id": "PRR_kwDOABII585ZzFGu",
      "url": null,
      "actor": null,
      "commit_id": "6d2f8d999055f48084dcebef982e47c21ceb4f38",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "(nit)",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#pullrequestreview-1506562478",
      "submitted_at": "2023-06-30T06:02:14Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
    },
    {
      "event": "reviewed",
      "id": 1506898105,
      "node_id": "PRR_kwDOABII585Z0XC5",
      "url": null,
      "actor": null,
      "commit_id": "6d2f8d999055f48084dcebef982e47c21ceb4f38",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#pullrequestreview-1506898105",
      "submitted_at": "2023-06-30T09:58:08Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
    },
    {
      "event": "reviewed",
      "id": 1507168279,
      "node_id": "PRR_kwDOABII585Z1ZAX",
      "url": null,
      "actor": null,
      "commit_id": "6d2f8d999055f48084dcebef982e47c21ceb4f38",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#pullrequestreview-1507168279",
      "submitted_at": "2023-06-30T13:19:30Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9689273500,
      "node_id": "HRFPE_lADOABII585Xi1euzwAAAAJBhpSc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9689273500",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-30T15:43:48Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9691244776,
      "node_id": "HRFPE_lADOABII585Xi1euzwAAAAJBpKjo",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9691244776",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-30T19:32:56Z"
    },
    {
      "event": "labeled",
      "id": 9691245373,
      "node_id": "LE_lADOABII585Xi1euzwAAAAJBpKs9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9691245373",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-30T19:33:01Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9886313431,
      "node_id": "HRFPE_lADOABII585Xi1euzwAAAAJNRSvX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9886313431",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-21T15:02:08Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9886530740,
      "node_id": "HRFPE_lADOABII585Xi1euzwAAAAJNSHy0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9886530740",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-21T15:24:21Z"
    },
    {
      "event": "unlabeled",
      "id": 9888406255,
      "node_id": "UNLE_lADOABII585Xi1euzwAAAAJNZRrv",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9888406255",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-21T19:39:10Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 1546251193,
      "node_id": "PRR_kwDOABII585cKeu5",
      "url": null,
      "actor": null,
      "commit_id": "6e28ff97a99519ec8b50123bc1177084bba68f96",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "ACK 6e28ff97a99519ec8b50123bc1177084bba68f96 (besides the two small comments)\r\n\r\nI'm sure I could spend many hours more verifying the parser, but at this point I'd like to encourage other reviewers to take a look. I think if this is merged soon and given the opportunity to be fuzzed against a large corpus of both random seeds, bdb databases, and valid wallets we could also gain some confidence in the code.",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#pullrequestreview-1546251193",
      "submitted_at": "2023-07-25T19:58:21Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
    },
    {
      "event": "commented",
      "id": 1658468351,
      "node_id": "IC_kwDOABII585i2jf_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1658468351",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-31T14:20:44Z",
      "updated_at": "2023-07-31T15:19:21Z",
      "author_association": "MEMBER",
      "body": "Concept ACK\r\n\r\nI still suggest changing fc810c1df899e5b42fe7658ebdddc6b4320240a6 so that `dumpwallet` does not use the read-only format by default, and instead change the tests use it. ~However with the new fuzz target commit I'm less worried about it.~\r\n\r\nThe new fuzz target helps, but currently doesn't compare between BDB and the RO implementation. I'm also not sure how to see if we're covering all code paths. Should we manually produce some wallets to bootstrap a good corpus or is the fuzzer smart enough to find it?",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#issuecomment-1658468351",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26606"
    },
    {
      "event": "reviewed",
      "id": 1555022636,
      "node_id": "PRR_kwDOABII585cr8Ms",
      "url": null,
      "actor": null,
      "commit_id": "6e28ff97a99519ec8b50123bc1177084bba68f96",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#pullrequestreview-1555022636",
      "submitted_at": "2023-07-31T15:07:01Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
    },
    {
      "event": "reviewed",
      "id": 1555052889,
      "node_id": "PRR_kwDOABII585csDlZ",
      "url": null,
      "actor": null,
      "commit_id": "6e28ff97a99519ec8b50123bc1177084bba68f96",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#pullrequestreview-1555052889",
      "submitted_at": "2023-07-31T15:14:56Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
    },
    {
      "event": "labeled",
      "id": 9979202613,
      "node_id": "LE_lADOABII585Xi1euzwAAAAJSzow1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9979202613",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-01T17:11:29Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGFkNzk2ZTAxZmY1MWNlY2U1ZjllODc2OWNmNmI5ZDg1OWU3MGEwNjU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ad796e01ff51cece5f9e8769cf6b9d859e70a065",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/ad796e01ff51cece5f9e8769cf6b9d859e70a065",
      "tree": {
        "sha": "e24279986b215e0f88c8bd668e87b90829daa982",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e24279986b215e0f88c8bd668e87b90829daa982"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1b5cbf71dff1f240bac0156f8800382272489f0b",
          "sha": "1b5cbf71dff1f240bac0156f8800382272489f0b",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/1b5cbf71dff1f240bac0156f8800382272489f0b"
        }
      ],
      "message": "Add AutoFile::seek\n\nIt's useful to be able to seek to a specific position in a file. Allow\nAutoFile to seek by using fseek.",
      "committer": {
        "name": "Andrew Chow",
        "email": "github@achow101.com",
        "date": "2023-08-01T18:56:31Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-04T18:37:05Z"
      },
      "sha": "ad796e01ff51cece5f9e8769cf6b9d859e70a065"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDVhZWRlODRjNWNiOTUxYTAyMjE3MWMyMWNjZjQyNmVkNjVmMDY4ZjM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5aede84c5cb951a022171c21ccf426ed65f068f3",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/5aede84c5cb951a022171c21ccf426ed65f068f3",
      "tree": {
        "sha": "fb57cafeeacf925ee5bf336cbc69acfe29616833",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fb57cafeeacf925ee5bf336cbc69acfe29616833"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ad796e01ff51cece5f9e8769cf6b9d859e70a065",
          "sha": "ad796e01ff51cece5f9e8769cf6b9d859e70a065",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/ad796e01ff51cece5f9e8769cf6b9d859e70a065"
        }
      ],
      "message": "wallet: add dummy BerkeleyRODatabase and BerkeleyROBatch classes\n\nBerkeleyRODatabase and BerkeleyROBatch will be used to access a BDB file\nwithout the use of BDB. For now, these are dummy classes.",
      "committer": {
        "name": "Andrew Chow",
        "email": "github@achow101.com",
        "date": "2023-08-01T18:56:31Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-06T19:14:38Z"
      },
      "sha": "5aede84c5cb951a022171c21ccf426ed65f068f3"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDhlYmI3NWM2Y2ViMjg1NmYwOWU2ZjhkOWExYjE4MTQ5MGE0YWEyOTg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8ebb75c6ceb2856f09e6f8d9a1b181490a4aa298",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/8ebb75c6ceb2856f09e6f8d9a1b181490a4aa298",
      "tree": {
        "sha": "e6fe2a4e3d9f2ef4f403883e57efe4b3ef15d189",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e6fe2a4e3d9f2ef4f403883e57efe4b3ef15d189"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5aede84c5cb951a022171c21ccf426ed65f068f3",
          "sha": "5aede84c5cb951a022171c21ccf426ed65f068f3",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/5aede84c5cb951a022171c21ccf426ed65f068f3"
        }
      ],
      "message": "wallet: implement BerkeleyROBatch\n\nImplement ReadKey and HasKey of BerkeleyROBatch, and Next of BerkeleyROCursor.\nAlso adds the containers for records to BerkeleyRODatabase so that\nBerkeleyROBatch will be able to access the records.",
      "committer": {
        "name": "Andrew Chow",
        "email": "github@achow101.com",
        "date": "2023-08-01T18:56:31Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-06T19:21:33Z"
      },
      "sha": "8ebb75c6ceb2856f09e6f8d9a1b181490a4aa298"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDZhZmFiMTVkZmJkZTU2MjdmNmZjNDI1ZThlMjM2MTE5NDUxZjMzMjU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6afab15dfbde5627f6fc425e8e236119451f3325",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/6afab15dfbde5627f6fc425e8e236119451f3325",
      "tree": {
        "sha": "0bbbeb1433399aea393afe11c0185242379bc72d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0bbbeb1433399aea393afe11c0185242379bc72d"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8ebb75c6ceb2856f09e6f8d9a1b181490a4aa298",
          "sha": "8ebb75c6ceb2856f09e6f8d9a1b181490a4aa298",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/8ebb75c6ceb2856f09e6f8d9a1b181490a4aa298"
        }
      ],
      "message": "wallet: implement BerkeleyRODatabase::Backup",
      "committer": {
        "name": "Andrew Chow",
        "email": "github@achow101.com",
        "date": "2023-08-01T18:56:31Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-06T19:45:56Z"
      },
      "sha": "6afab15dfbde5627f6fc425e8e236119451f3325"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGYxMDk2Y2YyZGI1YmY1Yzg5YjViMDUzYzc3ZTRmOTUzNzQzODE0MmQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f1096cf2db5bf5c89b5b053c77e4f9537438142d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/f1096cf2db5bf5c89b5b053c77e4f9537438142d",
      "tree": {
        "sha": "baa09af6c4a9dddb2a590fc36e7fa8cbbf0a3e0a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/baa09af6c4a9dddb2a590fc36e7fa8cbbf0a3e0a"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6afab15dfbde5627f6fc425e8e236119451f3325",
          "sha": "6afab15dfbde5627f6fc425e8e236119451f3325",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/6afab15dfbde5627f6fc425e8e236119451f3325"
        }
      ],
      "message": "wallet: implement independent BDB deserializer in BerkeleyRODatabase\n\nBerkeleyRODatabase is intended for use after BDB is removed, so it needs\nto be able to read all of the records from a BDB file. Thus an\nindependent deserializer for BDB data files is implemented in it. This\ndeserializer is targeted towards the data files that Bitcoin Core\ncreates so it does not fully support all of BDB's features (e.g. other\ndatabase types, encryption, etc.).",
      "committer": {
        "name": "Andrew Chow",
        "email": "github@achow101.com",
        "date": "2023-08-01T18:56:31Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-06T19:43:07Z"
      },
      "sha": "f1096cf2db5bf5c89b5b053c77e4f9537438142d"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDkyMGZlODdhZTY0NjY3NThiZDhiY2VjOTAyYTAzNWFhMTA3ZWM4M2M",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/920fe87ae6466758bd8bcec902a035aa107ec83c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/920fe87ae6466758bd8bcec902a035aa107ec83c",
      "tree": {
        "sha": "019cdbbb165707e20d4adeafcdc0478c83328fec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/019cdbbb165707e20d4adeafcdc0478c83328fec"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f1096cf2db5bf5c89b5b053c77e4f9537438142d",
          "sha": "f1096cf2db5bf5c89b5b053c77e4f9537438142d",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/f1096cf2db5bf5c89b5b053c77e4f9537438142d"
        }
      ],
      "message": "Implement handling of other endianness in BerkeleyRODatabase",
      "committer": {
        "name": "Andrew Chow",
        "email": "github@achow101.com",
        "date": "2023-08-01T18:56:31Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "github@achow101.com",
        "date": "2022-11-29T20:37:27Z"
      },
      "sha": "920fe87ae6466758bd8bcec902a035aa107ec83c"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGFhOWMzYTI2YWRmY2ZmMGMyYTg1OTQ4OTRlNjNiMTY4NDZiYTFmN2M",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aa9c3a26adfcff0c2a8594894e63b16846ba1f7c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/aa9c3a26adfcff0c2a8594894e63b16846ba1f7c",
      "tree": {
        "sha": "71fa6d92d1910beb03833297f9b3f0e95ce91b60",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/71fa6d92d1910beb03833297f9b3f0e95ce91b60"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/920fe87ae6466758bd8bcec902a035aa107ec83c",
          "sha": "920fe87ae6466758bd8bcec902a035aa107ec83c",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/920fe87ae6466758bd8bcec902a035aa107ec83c"
        }
      ],
      "message": "Add MakeBerkeleyRODatabase\n\nImplements MakeBerkeleyRODatabase and adds DatabaseFormat::BERKELEY_RO\nso that MakeDatabase can use BerkeleyRO as the backend database.",
      "committer": {
        "name": "Andrew Chow",
        "email": "github@achow101.com",
        "date": "2023-08-01T18:56:31Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-04T19:28:28Z"
      },
      "sha": "aa9c3a26adfcff0c2a8594894e63b16846ba1f7c"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDRhYmNiZTFiYmZhMzhiMzMwMWY2OGE1MTYyYjU3ODFmMWY0MmNhMWQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4abcbe1bbfa38b3301f68a5162b5781f1f42ca1d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/4abcbe1bbfa38b3301f68a5162b5781f1f42ca1d",
      "tree": {
        "sha": "069505c2d5fd17df6c0256effe3cd84107f4cf51",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/069505c2d5fd17df6c0256effe3cd84107f4cf51"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aa9c3a26adfcff0c2a8594894e63b16846ba1f7c",
          "sha": "aa9c3a26adfcff0c2a8594894e63b16846ba1f7c",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/aa9c3a26adfcff0c2a8594894e63b16846ba1f7c"
        }
      ],
      "message": "wallettool: Don't create CWallet when dumping DB\n\nIt's not necessary to set up an entire CWallet just so we can get access\nto the WalletDatabase and read the records. Instead we can go one level\nlower and make just a WalletDatabase.",
      "committer": {
        "name": "Andrew Chow",
        "email": "github@achow101.com",
        "date": "2023-08-01T18:56:31Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-13T22:45:39Z"
      },
      "sha": "4abcbe1bbfa38b3301f68a5162b5781f1f42ca1d"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDgzMjUyYzlhNjEyMWQ4NmIwMzQ4MTgzNDRhNjc2MDNhMDA3Yzk0ZmY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/83252c9a6121d86b034818344a67603a007c94ff",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/83252c9a6121d86b034818344a67603a007c94ff",
      "tree": {
        "sha": "4079f14a2f94ce83031f1afe141455774ee6ba8d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4079f14a2f94ce83031f1afe141455774ee6ba8d"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4abcbe1bbfa38b3301f68a5162b5781f1f42ca1d",
          "sha": "4abcbe1bbfa38b3301f68a5162b5781f1f42ca1d",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/4abcbe1bbfa38b3301f68a5162b5781f1f42ca1d"
        }
      ],
      "message": "wallettool: Use BERKELEY_RO as format when dumping BDB wallets\n\nIn order to ease the transition to not having BDB, make the dump tool\nuse DatabaseFormmat::BERKELEY_RO.",
      "committer": {
        "name": "Andrew Chow",
        "email": "github@achow101.com",
        "date": "2023-08-01T18:56:31Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-04T19:33:07Z"
      },
      "sha": "83252c9a6121d86b034818344a67603a007c94ff"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGQwMTQwMDAwOTEwNzc0NDcwZTgyNzNmY2UwNjU0ZTE0ODY4ODU0Y2I",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d0140000910774470e8273fce0654e14868854cb",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/d0140000910774470e8273fce0654e14868854cb",
      "tree": {
        "sha": "d512cb137f8e26ba8c2bc6118c245366c24e599c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d512cb137f8e26ba8c2bc6118c245366c24e599c"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/83252c9a6121d86b034818344a67603a007c94ff",
          "sha": "83252c9a6121d86b034818344a67603a007c94ff",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/83252c9a6121d86b034818344a67603a007c94ff"
        }
      ],
      "message": "tests: Add BerkeleyRO to db prefix tests",
      "committer": {
        "name": "Andrew Chow",
        "email": "github@achow101.com",
        "date": "2023-08-01T18:56:31Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "github@achow101.com",
        "date": "2023-06-28T21:50:58Z"
      },
      "sha": "d0140000910774470e8273fce0654e14868854cb"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDBkZDU5ZjM3NjliZmI3Y2IxNWY3YTkzYWE1ZWZhYzY2ZTNjM2U1MGU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0dd59f3769bfb7cb15f7a93aa5efac66e3c3e50e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/0dd59f3769bfb7cb15f7a93aa5efac66e3c3e50e",
      "tree": {
        "sha": "f73a86d3fccc8d26a77197f3c78aefe6967858e4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f73a86d3fccc8d26a77197f3c78aefe6967858e4"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d0140000910774470e8273fce0654e14868854cb",
          "sha": "d0140000910774470e8273fce0654e14868854cb",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/d0140000910774470e8273fce0654e14868854cb"
        }
      ],
      "message": "Berkeley RO Database fuzz test",
      "committer": {
        "name": "Andrew Chow",
        "email": "github@achow101.com",
        "date": "2023-08-01T19:20:33Z"
      },
      "author": {
        "name": "TheCharlatan",
        "email": "seb.kung@gmail.com",
        "date": "2023-06-20T22:14:56Z"
      },
      "sha": "0dd59f3769bfb7cb15f7a93aa5efac66e3c3e50e"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9980401496,
      "node_id": "HRFPE_lADOABII585Xi1euzwAAAAJS4NdY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9980401496",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-01T19:30:43Z"
    },
    {
      "event": "commented",
      "id": 1660955989,
      "node_id": "IC_kwDOABII585jAC1V",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1660955989",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-01T19:32:09Z",
      "updated_at": "2023-08-01T19:32:09Z",
      "author_association": "MEMBER",
      "body": "> I still suggest changing fc810c1 so that dumpwallet does not use the read-only format by default, and instead change the tests use it.\r\n\r\nSince dumping should be a read-only operation, I think it's better to use the read-only database since it definitely won't write to it like BDB does. Also it provides a good mechanism for testing.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#issuecomment-1660955989",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26606"
    },
    {
      "event": "labeled",
      "id": 9981257632,
      "node_id": "LE_lADOABII585Xi1euzwAAAAJS7eeg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9981257632",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-01T21:19:02Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "unlabeled",
      "id": 9981262888,
      "node_id": "UNLE_lADOABII585Xi1euzwAAAAJS7fwo",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9981262888",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-01T21:19:47Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1121971951",
      "pull_request_review_id": 1320156842,
      "id": 1121971951,
      "node_id": "PRRC_kwDOABII585C3-7v",
      "diff_hunk": "@@ -530,6 +530,14 @@ class AutoFile\n     //\n     // Stream subset\n     //\n+    void seek(int64_t offset, int origin)\n+    {\n+        if (!file)",
      "path": "src/streams.h",
      "position": null,
      "original_position": 6,
      "commit_id": "0dd59f3769bfb7cb15f7a93aa5efac66e3c3e50e",
      "original_commit_id": "1d093bbf97b8d4ec5413ca560ac79e56f23d7f1d",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "1d093bbf97b8d4ec5413ca560ac79e56f23d7f1d `{`\r\n\r\nCould also use the `IsNull()` helper.",
      "created_at": "2023-03-01T16:02:46Z",
      "updated_at": "2023-03-01T16:42:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1121971951",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1121971951"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 535,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1121975697",
      "pull_request_review_id": 1320156842,
      "id": 1121975697,
      "node_id": "PRRC_kwDOABII585C3_2R",
      "diff_hunk": "@@ -530,6 +530,14 @@ class AutoFile\n     //\n     // Stream subset\n     //\n+    void seek(int64_t offset, int origin)",
      "path": "src/streams.h",
      "position": null,
      "original_position": 4,
      "commit_id": "0dd59f3769bfb7cb15f7a93aa5efac66e3c3e50e",
      "original_commit_id": "1d093bbf97b8d4ec5413ca560ac79e56f23d7f1d",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "1d093bbf97b8d4ec5413ca560ac79e56f23d7f1d: Note for other reviewers: yes\r\n\r\nhttps://en.cppreference.com/w/c/io/fseek",
      "created_at": "2023-03-01T16:05:12Z",
      "updated_at": "2023-03-01T16:42:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1121975697",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1121975697"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 525,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1121979628",
      "pull_request_review_id": 1320156842,
      "id": 1121979628,
      "node_id": "PRRC_kwDOABII585C4Azs",
      "diff_hunk": "@@ -530,6 +530,14 @@ class AutoFile\n     //\n     // Stream subset\n     //\n+    void seek(int64_t offset, int origin)\n+    {\n+        if (!file)\n+            throw std::ios_base::failure(\"CAutoFile::read: file handle is nullptr\");\n+        if (fseek(file, offset, origin) != 0)\n+            throw std::ios_base::failure(feof(file) ? \"CAutoFile::seek: end of file\" : \"CAutoFile::seek: fseek failed\");",
      "path": "src/streams.h",
      "position": null,
      "original_position": 9,
      "commit_id": "0dd59f3769bfb7cb15f7a93aa5efac66e3c3e50e",
      "original_commit_id": "1d093bbf97b8d4ec5413ca560ac79e56f23d7f1d",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "1d093bbf97b8d4ec5413ca560ac79e56f23d7f1d: maybe log the exact error code.",
      "created_at": "2023-03-01T16:07:54Z",
      "updated_at": "2023-03-01T16:42:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1121979628",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1121979628"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 531,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1122017022",
      "pull_request_review_id": 1320156842,
      "id": 1122017022,
      "node_id": "PRRC_kwDOABII585C4J7-",
      "diff_hunk": "@@ -0,0 +1,104 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_MIGRATE_H\n+#define BITCOIN_WALLET_MIGRATE_H",
      "path": "src/wallet/migrate.h",
      "position": 6,
      "original_position": 6,
      "commit_id": "0dd59f3769bfb7cb15f7a93aa5efac66e3c3e50e",
      "original_commit_id": "1224f45a92972199799d1ea33700eee567dc66fe",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "1224f45a92972199799d1ea33700eee567dc66fe: maybe call this file `bdb_ro_wallet_db.h`?",
      "created_at": "2023-03-01T16:32:13Z",
      "updated_at": "2023-03-01T16:42:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1122017022",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1122017022"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 6,
      "original_line": 6,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1122022825",
      "pull_request_review_id": 1320156842,
      "id": 1122022825,
      "node_id": "PRRC_kwDOABII585C4LWp",
      "diff_hunk": "@@ -21,17 +21,37 @@ bool BerkeleyRODatabase::Backup(const std::string& dest) const\n \n bool BerkeleyROBatch::ReadKey(DataStream&& key, DataStream& value)\n {\n-    return false;",
      "path": "src/wallet/migrate.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "0dd59f3769bfb7cb15f7a93aa5efac66e3c3e50e",
      "original_commit_id": "d6c5aa0f6783ef9f26f93a583d2fad5a943e23ec",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "d6c5aa0f6783ef9f26f93a583d2fad5a943e23ec: commit description also mentions `StartCursor`, `ReadAtCursor`, `CloseCursor`.",
      "created_at": "2023-03-01T16:35:56Z",
      "updated_at": "2023-03-01T16:42:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1122022825",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1122022825"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 24,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1137556050",
      "pull_request_review_id": 1342106242,
      "id": 1137556050,
      "node_id": "PRRC_kwDOABII585DzbpS",
      "diff_hunk": "@@ -530,6 +530,14 @@ class AutoFile\n     //\n     // Stream subset\n     //\n+    void seek(int64_t offset, int origin)\n+    {\n+        if (!file)",
      "path": "src/streams.h",
      "position": null,
      "original_position": 6,
      "commit_id": "0dd59f3769bfb7cb15f7a93aa5efac66e3c3e50e",
      "original_commit_id": "1d093bbf97b8d4ec5413ca560ac79e56f23d7f1d",
      "in_reply_to_id": 1121971951,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2023-03-15T18:09:29Z",
      "updated_at": "2023-03-15T18:09:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1137556050",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1137556050"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 535,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1137556512",
      "pull_request_review_id": 1342106695,
      "id": 1137556512,
      "node_id": "PRRC_kwDOABII585Dzbwg",
      "diff_hunk": "@@ -530,6 +530,14 @@ class AutoFile\n     //\n     // Stream subset\n     //\n+    void seek(int64_t offset, int origin)\n+    {\n+        if (!file)\n+            throw std::ios_base::failure(\"CAutoFile::read: file handle is nullptr\");\n+        if (fseek(file, offset, origin) != 0)\n+            throw std::ios_base::failure(feof(file) ? \"CAutoFile::seek: end of file\" : \"CAutoFile::seek: fseek failed\");",
      "path": "src/streams.h",
      "position": null,
      "original_position": 9,
      "commit_id": "0dd59f3769bfb7cb15f7a93aa5efac66e3c3e50e",
      "original_commit_id": "1d093bbf97b8d4ec5413ca560ac79e56f23d7f1d",
      "in_reply_to_id": 1121979628,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It's kind of annoying to do that, so I'll leave it as is. The other functions do the same.",
      "created_at": "2023-03-15T18:09:47Z",
      "updated_at": "2023-03-15T18:09:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1137556512",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1137556512"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 531,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1137556948",
      "pull_request_review_id": 1342107141,
      "id": 1137556948,
      "node_id": "PRRC_kwDOABII585Dzb3U",
      "diff_hunk": "@@ -0,0 +1,104 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_MIGRATE_H\n+#define BITCOIN_WALLET_MIGRATE_H",
      "path": "src/wallet/migrate.h",
      "position": 6,
      "original_position": 6,
      "commit_id": "0dd59f3769bfb7cb15f7a93aa5efac66e3c3e50e",
      "original_commit_id": "1224f45a92972199799d1ea33700eee567dc66fe",
      "in_reply_to_id": 1122017022,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The intent is to have all of the migration stuff in these files, so I will leave it as is.",
      "created_at": "2023-03-15T18:10:04Z",
      "updated_at": "2023-03-15T18:10:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1137556948",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1137556948"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 6,
      "original_line": 6,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1137557089",
      "pull_request_review_id": 1342107285,
      "id": 1137557089,
      "node_id": "PRRC_kwDOABII585Dzb5h",
      "diff_hunk": "@@ -21,17 +21,37 @@ bool BerkeleyRODatabase::Backup(const std::string& dest) const\n \n bool BerkeleyROBatch::ReadKey(DataStream&& key, DataStream& value)\n {\n-    return false;",
      "path": "src/wallet/migrate.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "0dd59f3769bfb7cb15f7a93aa5efac66e3c3e50e",
      "original_commit_id": "d6c5aa0f6783ef9f26f93a583d2fad5a943e23ec",
      "in_reply_to_id": 1122022825,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Updated the message.",
      "created_at": "2023-03-15T18:10:10Z",
      "updated_at": "2023-03-15T18:10:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1137557089",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1137557089"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 24,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1229358644",
      "pull_request_review_id": 1478773216,
      "id": 1229358644,
      "node_id": "PRRC_kwDOABII585JRoY0",
      "diff_hunk": "@@ -0,0 +1,122 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_MIGRATE_H\n+#define BITCOIN_WALLET_MIGRATE_H\n+\n+#include <wallet/db.h>\n+\n+#include <optional>\n+\n+namespace wallet {\n+\n+using BerkeleyROData = std::map<SerializeData, SerializeData, std::less<>>;\n+\n+/**\n+ * A class representing a BerkeleyDB file from which we can only read records.\n+ * This is used only for migration of legacy to descriptor wallets\n+ */\n+class BerkeleyRODatabase : public WalletDatabase\n+{\n+private:\n+    const fs::path m_filepath;\n+\n+public:\n+    /** Create dummy DB handle */\n+    BerkeleyRODatabase(const fs::path& filepath) : WalletDatabase(), m_filepath(filepath)\n+    {\n+        Open();\n+    }\n+    ~BerkeleyRODatabase() {};\n+\n+    BerkeleyROData m_records;\n+\n+    /** Open the database if it is not already opened. */\n+    void Open() override;\n+\n+    /** Indicate the a new database user has began using the database. Increments m_refcount */\n+    void AddRef() override {}\n+    /** Indicate that database user has stopped using the database and that it could be flushed or closed. Decrement m_refcount */\n+    void RemoveRef() override {}\n+\n+    /** Rewrite the entire database on disk, with the exception of key pszSkip if non-zero\n+     */\n+    bool Rewrite(const char* pszSkip=nullptr) override { return false; }\n+\n+    /** Back up the entire database to a file.\n+     */\n+    bool Backup(const std::string& strDest) const override;\n+\n+    /** Make sure all changes are flushed to database file.\n+     */\n+     void Flush() override {}\n+    /** Flush to the database file and close the database.\n+     *  Also close the environment if no other databases are open in it.\n+     */\n+    void Close() override {}\n+    /* flush the wallet passively (TRY_LOCK)\n+       ideal to be called periodically */\n+    bool PeriodicFlush() override { return false; }\n+\n+    void IncrementUpdateCounter() override {}\n+\n+    void ReloadDbEnv() override {}\n+\n+    /** Return path to main database file for logs and error messages. */\n+    std::string Filename() override { return fs::PathToString(m_filepath); }\n+\n+    std::string Format() override { return \"bdb_ro\"; }\n+\n+    /** Make a DatabaseBatch connected to this database */\n+    std::unique_ptr<DatabaseBatch> MakeBatch(bool flush_on_close = true) override;\n+};\n+\n+class BerkeleyROCursor : public DatabaseCursor\n+{\n+private:\n+    const BerkeleyRODatabase& m_database;\n+    BerkeleyROData::const_iterator m_cursor;\n+    BerkeleyROData::const_iterator m_cursor_end;\n+\n+public:\n+    explicit BerkeleyROCursor(const BerkeleyRODatabase& database, Span<const std::byte> prefix = {});\n+    ~BerkeleyROCursor() {}\n+\n+    Status Next(DataStream& key, DataStream& value) override;\n+};\n+\n+/** RAII class that provides access to a BerkeleyRODatabase */\n+class BerkeleyROBatch : public DatabaseBatch\n+{\n+private:\n+    const BerkeleyRODatabase& m_database;\n+\n+    bool ReadKey(DataStream&& key, DataStream& value) override;\n+    bool WriteKey(DataStream&& key, DataStream&& value, bool overwrite=true) override { return true; }",
      "path": "src/wallet/migrate.h",
      "position": 96,
      "original_position": 96,
      "commit_id": "0dd59f3769bfb7cb15f7a93aa5efac66e3c3e50e",
      "original_commit_id": "f108c6b565e73ea02df94331a347f9d1653ab0b2",
      "in_reply_to_id": null,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Why is this method returning `true`, but false for the erase methods?",
      "created_at": "2023-06-14T10:11:13Z",
      "updated_at": "2023-06-14T21:21:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1229358644",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1229358644"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 96,
      "original_line": 96,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1247132355",
      "pull_request_review_id": 1506063580,
      "id": 1247132355,
      "node_id": "PRRC_kwDOABII585KVbrD",
      "diff_hunk": "@@ -522,6 +522,16 @@ class AutoFile\n     //\n     // Stream subset\n     //\n+    void seek(int64_t offset, int origin)\n+    {\n+        if (IsNull()) {\n+            throw std::ios_base::failure(\"CAutoFile::read: file handle is nullptr\");",
      "path": "src/streams.h",
      "position": null,
      "original_position": 7,
      "commit_id": "0dd59f3769bfb7cb15f7a93aa5efac66e3c3e50e",
      "original_commit_id": "5b3573e201863cf22cf04597a346a027cb685a13",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n            throw std::ios_base::failure(\"AutoFile::seek: file handle is nullptr\");\r\n```\r\n\r\n?",
      "created_at": "2023-06-29T20:21:49Z",
      "updated_at": "2023-06-29T20:22:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1247132355",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1247132355"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 528,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1247172893",
      "pull_request_review_id": 1506127844,
      "id": 1247172893,
      "node_id": "PRRC_kwDOABII585KVlkd",
      "diff_hunk": "@@ -522,6 +522,16 @@ class AutoFile\n     //\n     // Stream subset\n     //\n+    void seek(int64_t offset, int origin)\n+    {\n+        if (IsNull()) {\n+            throw std::ios_base::failure(\"CAutoFile::read: file handle is nullptr\");",
      "path": "src/streams.h",
      "position": null,
      "original_position": 7,
      "commit_id": "0dd59f3769bfb7cb15f7a93aa5efac66e3c3e50e",
      "original_commit_id": "5b3573e201863cf22cf04597a346a027cb685a13",
      "in_reply_to_id": 1247132355,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2023-06-29T21:02:00Z",
      "updated_at": "2023-06-29T21:02:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1247172893",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1247172893"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 528,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1247469065",
      "pull_request_review_id": 1506562478,
      "id": 1247469065,
      "node_id": "PRRC_kwDOABII585KWt4J",
      "diff_hunk": "@@ -522,6 +522,16 @@ class AutoFile\n     //\n     // Stream subset\n     //\n+    void seek(int64_t offset, int origin)\n+    {\n+        if (IsNull()) {\n+            throw std::ios_base::failure(\"AutoFile::read: file handle is nullptr\");",
      "path": "src/streams.h",
      "position": null,
      "original_position": 7,
      "commit_id": "0dd59f3769bfb7cb15f7a93aa5efac66e3c3e50e",
      "original_commit_id": "6d2f8d999055f48084dcebef982e47c21ceb4f38",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n            throw std::ios_base::failure(\"AutoFile::seek: file handle is nullptr\");\r\n```",
      "created_at": "2023-06-30T06:00:58Z",
      "updated_at": "2023-06-30T06:02:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1247469065",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1247469065"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 528,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1247687691",
      "pull_request_review_id": 1506898105,
      "id": 1247687691,
      "node_id": "PRRC_kwDOABII585KXjQL",
      "diff_hunk": "@@ -0,0 +1,79 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+#include <util/fs.h>\n+#include <util/time.h>\n+#include <util/translation.h>\n+#include <wallet/db.h>\n+#include <wallet/dump.h>\n+#include <wallet/migrate.h>\n+\n+#include <iostream>\n+\n+using wallet::DatabaseOptions;\n+using wallet::DatabaseStatus;\n+\n+namespace {\n+const TestingSetup* g_setup;",
      "path": "src/wallet/test/fuzz/wallet_bdb_parser.cpp",
      "position": null,
      "original_position": 22,
      "commit_id": "0dd59f3769bfb7cb15f7a93aa5efac66e3c3e50e",
      "original_commit_id": "6d2f8d999055f48084dcebef982e47c21ceb4f38",
      "in_reply_to_id": null,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "After testing with a valid database in the fuzzing corpus, I noticed that I messed up the `m_args`, `m_node.args`, `gArgs` division again ([see here](https://github.com/bitcoin/bitcoin/issues/25055)) - sorry about that. I have a basic patch here, but feel free to commit a more elegant fix:\r\n\r\n```diff\r\ndiff --git a/src/wallet/test/fuzz/wallet_bdb_parser.cpp b/src/wallet/test/fuzz/wallet_bdb_parser.cpp\r\nindex aabde093b6..a1acb95178 100644\r\n--- a/src/wallet/test/fuzz/wallet_bdb_parser.cpp\r\n+++ b/src/wallet/test/fuzz/wallet_bdb_parser.cpp\r\n@@ -19,23 +19,15 @@ using wallet::DatabaseOptions;\r\n using wallet::DatabaseStatus;\r\n \r\n namespace {\r\n-const TestingSetup* g_setup;\r\n+TestingSetup* g_setup;\r\n } // namespace\r\n \r\n void initialize_wallet_bdb_parser()\r\n {\r\n-    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\r\n+    static auto testing_setup = MakeNoLogFileContext<TestingSetup>();\r\n     g_setup = testing_setup.get();\r\n }\r\n \r\n-void SetDumpFile(ArgsManager& args) {\r\n-    auto dumpfile{args.GetDataDirNet() / \"fuzzed_dumpfile.dat\"};\r\n-    if (fs::exists(dumpfile)) { // Writing into an existing dump file will throw an exception\r\n-        remove(dumpfile);\r\n-    }\r\n-    args.ForceSetArg(\"-dumpfile\", fs::PathToString(args.GetDataDirNet() / \"fuzzed_dumpfile.dat\"));\r\n-}\r\n-\r\n FUZZ_TARGET_INIT(wallet_bdb_parser, initialize_wallet_bdb_parser)\r\n {\r\n     FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\r\n@@ -52,10 +44,14 @@ FUZZ_TARGET_INIT(wallet_bdb_parser, initialize_wallet_bdb_parser)\r\n     DatabaseStatus status;\r\n     bilingual_str error;\r\n \r\n+    auto dumpfile{g_setup->m_args.GetDataDirNet() / \"fuzzed_dumpfile.dat\"};\r\n+    if (fs::exists(dumpfile)) { // Writing into an existing dump file will throw an exception\r\n+        remove(dumpfile);\r\n+    }\r\n+    g_setup->m_args.ForceSetArg(\"-dumpfile\", dumpfile);\r\n+\r\n     try {\r\n         auto db{MakeBerkeleyRODatabase(wallet_path, options, status, error)};\r\n-        const auto& node = g_setup->m_node;\r\n-        SetDumpFile(*node.args);\r\n         assert(DumpWallet(g_setup->m_args, *db, error));\r\n     }\r\n     catch (const std::runtime_error& e) {\r\n```",
      "created_at": "2023-06-30T09:58:08Z",
      "updated_at": "2023-06-30T09:58:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1247687691",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1247687691"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 22,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1247847963",
      "pull_request_review_id": 1507168279,
      "id": 1247847963,
      "node_id": "PRRC_kwDOABII585KYKYb",
      "diff_hunk": "@@ -519,7 +582,7 @@ void BerkeleyRODatabase::Open()\n                     uint32_t next_page = orec->page_number;\n                     while (next_page != 0) {\n                         SeekToPage(db_file, next_page, page_size);\n-                        PageHeader opage_header;\n+                        PageHeader opage_header(inner_meta.other_endian);\n                         db_file >> opage_header;\n                         OverflowPage opage(opage_header);\n                         db_file >> opage;",
      "path": "src/wallet/migrate.cpp",
      "position": 590,
      "original_position": 215,
      "commit_id": "0dd59f3769bfb7cb15f7a93aa5efac66e3c3e50e",
      "original_commit_id": "0b8eac6a78351a68c1b5a6126564493ab50031dc",
      "in_reply_to_id": null,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Implement handling of other endianness in BerkeleyRODatabase\" 0b8eac6a78351a68c1b5a6126564493ab50031dc\r\n\r\nI might be reading something wrong, or confusing something, but I don't quite understand why the record data itself does not have to get its endianness adjusted.",
      "created_at": "2023-06-30T13:11:01Z",
      "updated_at": "2023-06-30T13:19:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1247847963",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1247847963"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 590,
      "original_line": 590,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1247852182",
      "pull_request_review_id": 1507168279,
      "id": 1247852182,
      "node_id": "PRRC_kwDOABII585KYLaW",
      "diff_hunk": "@@ -1,13 +1,547 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <crypto/common.h> // For ReadBE32\n #include <logging.h>\n+#include <streams.h>\n+#include <uint256.h>\n #include <wallet/migrate.h>\n \n+#include <optional>\n+#include <variant>\n+\n namespace wallet {\n+// Magic bytes in both endianness's\n+constexpr uint32_t BTREE_MAGIC = 0x00053162; // If the file endianness matches our system, we see this magic\n+constexpr uint32_t BTREE_MAGIC_OE = 0x62310500; // If the file endianness is the other one, we will see this magic\n+\n+enum class PageType : uint8_t\n+{\n+    INVALID = 0,         // Invalid page type\n+    DUPLICATE = 1,       // Duplicate. Deprecated and no longer used\n+    HASH_UNSORTED = 2,   // Hash pages. Deprecated.\n+    BTREE_INTERNAL = 3,  // BTree internal\n+    RECNO_INTERNAL = 4,  // Recno internal\n+    BTREE_LEAF = 5,      // BTree leaf\n+    RECNO_LEAF = 6,      // Recno leaf\n+    OVERFLOW_DATA = 7,        // Overflow\n+    HASH_META = 8,       // Hash metadata\n+    BTREE_META = 9,      // BTree metadata\n+    QUEUE_META = 10,     // Queue Metadata\n+    QUEUE_DATA = 11,     // Queue Data\n+    DUPLICATE_LEAF = 12, // Off-page duplicate leaf\n+    HASH_SORTED = 13,    // Sorted hash page\n+\n+    PAGETYPE_MAX = 14,\n+};\n+\n+enum class RecordType : uint8_t\n+{\n+    KEYDATA = 1,\n+    DUPLICATE = 2,\n+    OVERFLOW_DATA = 3,\n+    DELETE = 0x80, // Indicate this record is deleted. This is AND'd with the real type.\n+};\n+\n+enum class BTreeFlags : uint32_t\n+{\n+    DUP = 1,         // Duplicates\n+    RECNO = 2,       // Recno tree\n+    RECNUM = 4,      // BTree: Maintain record counts\n+    FIXEDLEN = 8,    // Recno: fixed length records\n+    RENUMBER = 0x10, // Recno: renumber on insert/delete\n+    SUBDB = 0x20,    // Subdatabases\n+    DUPSORT = 0x40,  // Duplicates are sorted\n+    COMPRESS = 0x80, // Compressed\n+};\n+\n+/** Berkeley DB BTree metadata page layout */\n+class MetaPage\n+{\n+public:\n+    uint64_t lsn;             // Log Sequence Number\n+    uint32_t page_num;        // Current page number\n+    uint32_t magic;           // Magic number\n+    uint32_t version;         // Version\n+    uint32_t pagesize;        // Page size\n+    uint8_t encrypt_algo;     // Encryption algorithm\n+    PageType type;            // Page type\n+    uint8_t metaflags;        // Meta-only flags\n+    uint8_t unused1;          // Unused\n+    uint32_t free_list;       // Free list page number\n+    uint32_t last_page;       // Page number of last page in db\n+    uint32_t partitions;      // Number of partitions\n+    uint32_t key_count;       // Cached key count\n+    uint32_t record_count;    // Cached record count\n+    BTreeFlags flags;         // Flags\n+    uint160 uid;              // Unique file ID (20 bytes, fits in uint16)\n+    uint32_t unused2;         // Unused\n+    uint32_t minkey;          // Minimum key\n+    uint32_t re_len;          // Recno: fixed length record length\n+    uint32_t re_pad;          // Recno: fixed length record pad\n+    uint32_t root;            // Root page number\n+    char unused3[368];        // 92 * 4 bytes of unused space\n+    uint32_t crypto_magic;    // Crypto magic number\n+    char trash[12];           // 3 * 4 bytes of trash space\n+    unsigned char iv[20];     // Crypto IV\n+    unsigned char chksum[16]; // Checksum\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> lsn;\n+        s >> page_num;\n+        s >> magic;\n+        s >> version;\n+        s >> pagesize;\n+        s >> encrypt_algo;\n+\n+        uint8_t uint8_type;\n+        s >> uint8_type;\n+        type = static_cast<PageType>(uint8_type);\n+\n+        s >> metaflags;\n+        s >> unused1;\n+        s >> free_list;\n+        s >> last_page;\n+        s >> partitions;\n+        s >> key_count;\n+        s >> record_count;\n+\n+        uint32_t uint32_flags;\n+        s >> uint32_flags;\n+        flags = static_cast<BTreeFlags>(uint32_flags);\n+\n+        s >> uid;\n+        s >> unused2;\n+        s >> minkey;\n+        s >> re_len;\n+        s >> re_pad;\n+        s >> root;\n+        s >> unused3;\n+        s >> crypto_magic;\n+        s >> trash;\n+        s >> iv;\n+        s >> chksum;\n+    }\n+};\n+\n+/** General class for records in a BDB BTree database. Contains common fields. */\n+class RecordHeader\n+{\n+public:\n+    uint16_t len;  // Key/data item length\n+    RecordType type;  // Page type and DELETE FLAG\n+\n+    static constexpr size_t SIZE = 3; // The record header is 3 bytes\n+\n+    RecordType GetRealType() const\n+    {\n+        return static_cast<RecordType>(static_cast<uint8_t>(type) & ~static_cast<uint8_t>(RecordType::DELETE));\n+    }\n+\n+    bool IsDeleted() const\n+    {\n+        return static_cast<uint8_t>(type) & static_cast<uint8_t>(RecordType::DELETE);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> len;\n+\n+        uint8_t uint8_type;\n+        s >> uint8_type;\n+        type = static_cast<RecordType>(uint8_type);\n+    }\n+};\n+\n+/** Class for data in the record directly */\n+class DataRecord\n+{\n+public:\n+    DataRecord(const RecordHeader& header) : m_header(header) {}\n+    DataRecord() = delete;\n+\n+    RecordHeader m_header;\n+\n+    std::vector<std::byte> data; // Variable length key/data item\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        data.resize(m_header.len);\n+        s.read(AsWritableBytes(Span(data.data(), data.size())));\n+    }\n+};\n+\n+/** Class for records representing internal nodes of the BTree. */\n+class InternalRecord\n+{\n+public:\n+    InternalRecord(const RecordHeader& header) : m_header(header) {}\n+    InternalRecord() = delete;\n+\n+    RecordHeader m_header;\n+\n+    uint8_t unused;                   // Padding, unused\n+    uint32_t page_num;                // Page number of referenced page\n+    uint32_t records;                 // Subtree record count\n+    std::vector<std::byte> data;  // Variable length key item\n+\n+    static constexpr size_t FIXED_SIZE = 9; // Size of fixed data is 9 bytes\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> unused;\n+        s >> page_num;\n+        s >> records;\n+\n+        data.resize(m_header.len);\n+        s.read(AsWritableBytes(Span(data.data(), data.size())));\n+    }\n+};\n+\n+/** Class for records representing overflow records of the BTree.\n+ * Overflow records point to a page which contains the data in the record.\n+ * Those pages may point to further pages with the rest of the data if it does not fit\n+ * in one page */\n+class OverflowRecord\n+{\n+public:\n+    OverflowRecord(const RecordHeader& header) : m_header(header) {}\n+    OverflowRecord() = delete;\n+\n+    RecordHeader m_header;\n+\n+    uint8_t unused2;      // Padding, unused\n+    uint32_t page_number; // Page number where data begins\n+    uint32_t item_len;    // Total length of item\n+\n+    static constexpr size_t SIZE = 9; // Overflow record is always 9 bytes\n+\n+    std::vector<std::byte> data; // Data from all of the overflow pages",
      "path": "src/wallet/migrate.cpp",
      "position": null,
      "original_position": 224,
      "commit_id": "0dd59f3769bfb7cb15f7a93aa5efac66e3c3e50e",
      "original_commit_id": "d5fe130106bdf367c0bca157b02d12254590b585",
      "in_reply_to_id": null,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"wallet: implement independent BDB deserializer in BerkeleyRODatabase\" d5fe130106bdf367c0bca157b02d12254590b585\r\n\r\nCan this `data` field be removed? Seems to be unused.",
      "created_at": "2023-06-30T13:15:02Z",
      "updated_at": "2023-06-30T13:19:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1247852182",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1247852182"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 224,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1248008111",
      "pull_request_review_id": 1507432998,
      "id": 1248008111,
      "node_id": "PRRC_kwDOABII585KYxev",
      "diff_hunk": "@@ -519,7 +582,7 @@ void BerkeleyRODatabase::Open()\n                     uint32_t next_page = orec->page_number;\n                     while (next_page != 0) {\n                         SeekToPage(db_file, next_page, page_size);\n-                        PageHeader opage_header;\n+                        PageHeader opage_header(inner_meta.other_endian);\n                         db_file >> opage_header;\n                         OverflowPage opage(opage_header);\n                         db_file >> opage;",
      "path": "src/wallet/migrate.cpp",
      "position": 590,
      "original_position": 215,
      "commit_id": "0dd59f3769bfb7cb15f7a93aa5efac66e3c3e50e",
      "original_commit_id": "0b8eac6a78351a68c1b5a6126564493ab50031dc",
      "in_reply_to_id": 1247847963,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The record data should just be arbitrary byte strings so they don't have an endianness.",
      "created_at": "2023-06-30T15:37:20Z",
      "updated_at": "2023-06-30T15:37:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1248008111",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1248008111"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 590,
      "original_line": 590,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1248013942",
      "pull_request_review_id": 1507442894,
      "id": 1248013942,
      "node_id": "PRRC_kwDOABII585KYy52",
      "diff_hunk": "@@ -522,6 +522,16 @@ class AutoFile\n     //\n     // Stream subset\n     //\n+    void seek(int64_t offset, int origin)\n+    {\n+        if (IsNull()) {\n+            throw std::ios_base::failure(\"AutoFile::read: file handle is nullptr\");",
      "path": "src/streams.h",
      "position": null,
      "original_position": 7,
      "commit_id": "0dd59f3769bfb7cb15f7a93aa5efac66e3c3e50e",
      "original_commit_id": "6d2f8d999055f48084dcebef982e47c21ceb4f38",
      "in_reply_to_id": 1247469065,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2023-06-30T15:43:46Z",
      "updated_at": "2023-06-30T15:43:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1248013942",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1248013942"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 528,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1248014091",
      "pull_request_review_id": 1507443085,
      "id": 1248014091,
      "node_id": "PRRC_kwDOABII585KYy8L",
      "diff_hunk": "@@ -0,0 +1,79 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+#include <util/fs.h>\n+#include <util/time.h>\n+#include <util/translation.h>\n+#include <wallet/db.h>\n+#include <wallet/dump.h>\n+#include <wallet/migrate.h>\n+\n+#include <iostream>\n+\n+using wallet::DatabaseOptions;\n+using wallet::DatabaseStatus;\n+\n+namespace {\n+const TestingSetup* g_setup;",
      "path": "src/wallet/test/fuzz/wallet_bdb_parser.cpp",
      "position": null,
      "original_position": 22,
      "commit_id": "0dd59f3769bfb7cb15f7a93aa5efac66e3c3e50e",
      "original_commit_id": "6d2f8d999055f48084dcebef982e47c21ceb4f38",
      "in_reply_to_id": 1247687691,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done as suggested",
      "created_at": "2023-06-30T15:43:54Z",
      "updated_at": "2023-06-30T15:43:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1248014091",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1248014091"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 22,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1248014465",
      "pull_request_review_id": 1507443735,
      "id": 1248014465,
      "node_id": "PRRC_kwDOABII585KYzCB",
      "diff_hunk": "@@ -1,13 +1,547 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <crypto/common.h> // For ReadBE32\n #include <logging.h>\n+#include <streams.h>\n+#include <uint256.h>\n #include <wallet/migrate.h>\n \n+#include <optional>\n+#include <variant>\n+\n namespace wallet {\n+// Magic bytes in both endianness's\n+constexpr uint32_t BTREE_MAGIC = 0x00053162; // If the file endianness matches our system, we see this magic\n+constexpr uint32_t BTREE_MAGIC_OE = 0x62310500; // If the file endianness is the other one, we will see this magic\n+\n+enum class PageType : uint8_t\n+{\n+    INVALID = 0,         // Invalid page type\n+    DUPLICATE = 1,       // Duplicate. Deprecated and no longer used\n+    HASH_UNSORTED = 2,   // Hash pages. Deprecated.\n+    BTREE_INTERNAL = 3,  // BTree internal\n+    RECNO_INTERNAL = 4,  // Recno internal\n+    BTREE_LEAF = 5,      // BTree leaf\n+    RECNO_LEAF = 6,      // Recno leaf\n+    OVERFLOW_DATA = 7,        // Overflow\n+    HASH_META = 8,       // Hash metadata\n+    BTREE_META = 9,      // BTree metadata\n+    QUEUE_META = 10,     // Queue Metadata\n+    QUEUE_DATA = 11,     // Queue Data\n+    DUPLICATE_LEAF = 12, // Off-page duplicate leaf\n+    HASH_SORTED = 13,    // Sorted hash page\n+\n+    PAGETYPE_MAX = 14,\n+};\n+\n+enum class RecordType : uint8_t\n+{\n+    KEYDATA = 1,\n+    DUPLICATE = 2,\n+    OVERFLOW_DATA = 3,\n+    DELETE = 0x80, // Indicate this record is deleted. This is AND'd with the real type.\n+};\n+\n+enum class BTreeFlags : uint32_t\n+{\n+    DUP = 1,         // Duplicates\n+    RECNO = 2,       // Recno tree\n+    RECNUM = 4,      // BTree: Maintain record counts\n+    FIXEDLEN = 8,    // Recno: fixed length records\n+    RENUMBER = 0x10, // Recno: renumber on insert/delete\n+    SUBDB = 0x20,    // Subdatabases\n+    DUPSORT = 0x40,  // Duplicates are sorted\n+    COMPRESS = 0x80, // Compressed\n+};\n+\n+/** Berkeley DB BTree metadata page layout */\n+class MetaPage\n+{\n+public:\n+    uint64_t lsn;             // Log Sequence Number\n+    uint32_t page_num;        // Current page number\n+    uint32_t magic;           // Magic number\n+    uint32_t version;         // Version\n+    uint32_t pagesize;        // Page size\n+    uint8_t encrypt_algo;     // Encryption algorithm\n+    PageType type;            // Page type\n+    uint8_t metaflags;        // Meta-only flags\n+    uint8_t unused1;          // Unused\n+    uint32_t free_list;       // Free list page number\n+    uint32_t last_page;       // Page number of last page in db\n+    uint32_t partitions;      // Number of partitions\n+    uint32_t key_count;       // Cached key count\n+    uint32_t record_count;    // Cached record count\n+    BTreeFlags flags;         // Flags\n+    uint160 uid;              // Unique file ID (20 bytes, fits in uint16)\n+    uint32_t unused2;         // Unused\n+    uint32_t minkey;          // Minimum key\n+    uint32_t re_len;          // Recno: fixed length record length\n+    uint32_t re_pad;          // Recno: fixed length record pad\n+    uint32_t root;            // Root page number\n+    char unused3[368];        // 92 * 4 bytes of unused space\n+    uint32_t crypto_magic;    // Crypto magic number\n+    char trash[12];           // 3 * 4 bytes of trash space\n+    unsigned char iv[20];     // Crypto IV\n+    unsigned char chksum[16]; // Checksum\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> lsn;\n+        s >> page_num;\n+        s >> magic;\n+        s >> version;\n+        s >> pagesize;\n+        s >> encrypt_algo;\n+\n+        uint8_t uint8_type;\n+        s >> uint8_type;\n+        type = static_cast<PageType>(uint8_type);\n+\n+        s >> metaflags;\n+        s >> unused1;\n+        s >> free_list;\n+        s >> last_page;\n+        s >> partitions;\n+        s >> key_count;\n+        s >> record_count;\n+\n+        uint32_t uint32_flags;\n+        s >> uint32_flags;\n+        flags = static_cast<BTreeFlags>(uint32_flags);\n+\n+        s >> uid;\n+        s >> unused2;\n+        s >> minkey;\n+        s >> re_len;\n+        s >> re_pad;\n+        s >> root;\n+        s >> unused3;\n+        s >> crypto_magic;\n+        s >> trash;\n+        s >> iv;\n+        s >> chksum;\n+    }\n+};\n+\n+/** General class for records in a BDB BTree database. Contains common fields. */\n+class RecordHeader\n+{\n+public:\n+    uint16_t len;  // Key/data item length\n+    RecordType type;  // Page type and DELETE FLAG\n+\n+    static constexpr size_t SIZE = 3; // The record header is 3 bytes\n+\n+    RecordType GetRealType() const\n+    {\n+        return static_cast<RecordType>(static_cast<uint8_t>(type) & ~static_cast<uint8_t>(RecordType::DELETE));\n+    }\n+\n+    bool IsDeleted() const\n+    {\n+        return static_cast<uint8_t>(type) & static_cast<uint8_t>(RecordType::DELETE);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> len;\n+\n+        uint8_t uint8_type;\n+        s >> uint8_type;\n+        type = static_cast<RecordType>(uint8_type);\n+    }\n+};\n+\n+/** Class for data in the record directly */\n+class DataRecord\n+{\n+public:\n+    DataRecord(const RecordHeader& header) : m_header(header) {}\n+    DataRecord() = delete;\n+\n+    RecordHeader m_header;\n+\n+    std::vector<std::byte> data; // Variable length key/data item\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        data.resize(m_header.len);\n+        s.read(AsWritableBytes(Span(data.data(), data.size())));\n+    }\n+};\n+\n+/** Class for records representing internal nodes of the BTree. */\n+class InternalRecord\n+{\n+public:\n+    InternalRecord(const RecordHeader& header) : m_header(header) {}\n+    InternalRecord() = delete;\n+\n+    RecordHeader m_header;\n+\n+    uint8_t unused;                   // Padding, unused\n+    uint32_t page_num;                // Page number of referenced page\n+    uint32_t records;                 // Subtree record count\n+    std::vector<std::byte> data;  // Variable length key item\n+\n+    static constexpr size_t FIXED_SIZE = 9; // Size of fixed data is 9 bytes\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> unused;\n+        s >> page_num;\n+        s >> records;\n+\n+        data.resize(m_header.len);\n+        s.read(AsWritableBytes(Span(data.data(), data.size())));\n+    }\n+};\n+\n+/** Class for records representing overflow records of the BTree.\n+ * Overflow records point to a page which contains the data in the record.\n+ * Those pages may point to further pages with the rest of the data if it does not fit\n+ * in one page */\n+class OverflowRecord\n+{\n+public:\n+    OverflowRecord(const RecordHeader& header) : m_header(header) {}\n+    OverflowRecord() = delete;\n+\n+    RecordHeader m_header;\n+\n+    uint8_t unused2;      // Padding, unused\n+    uint32_t page_number; // Page number where data begins\n+    uint32_t item_len;    // Total length of item\n+\n+    static constexpr size_t SIZE = 9; // Overflow record is always 9 bytes\n+\n+    std::vector<std::byte> data; // Data from all of the overflow pages",
      "path": "src/wallet/migrate.cpp",
      "position": null,
      "original_position": 224,
      "commit_id": "0dd59f3769bfb7cb15f7a93aa5efac66e3c3e50e",
      "original_commit_id": "d5fe130106bdf367c0bca157b02d12254590b585",
      "in_reply_to_id": 1247852182,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Removed. I think originally I though I could put the overflow page data into this field, but I didn't end up doing it that way.",
      "created_at": "2023-06-30T15:44:22Z",
      "updated_at": "2023-06-30T15:44:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1248014465",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1248014465"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 224,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1248057852",
      "pull_request_review_id": 1507509204,
      "id": 1248057852,
      "node_id": "PRRC_kwDOABII585KY9n8",
      "diff_hunk": "@@ -0,0 +1,122 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_MIGRATE_H\n+#define BITCOIN_WALLET_MIGRATE_H\n+\n+#include <wallet/db.h>\n+\n+#include <optional>\n+\n+namespace wallet {\n+\n+using BerkeleyROData = std::map<SerializeData, SerializeData, std::less<>>;\n+\n+/**\n+ * A class representing a BerkeleyDB file from which we can only read records.\n+ * This is used only for migration of legacy to descriptor wallets\n+ */\n+class BerkeleyRODatabase : public WalletDatabase\n+{\n+private:\n+    const fs::path m_filepath;\n+\n+public:\n+    /** Create dummy DB handle */\n+    BerkeleyRODatabase(const fs::path& filepath) : WalletDatabase(), m_filepath(filepath)\n+    {\n+        Open();\n+    }\n+    ~BerkeleyRODatabase() {};\n+\n+    BerkeleyROData m_records;\n+\n+    /** Open the database if it is not already opened. */\n+    void Open() override;\n+\n+    /** Indicate the a new database user has began using the database. Increments m_refcount */\n+    void AddRef() override {}\n+    /** Indicate that database user has stopped using the database and that it could be flushed or closed. Decrement m_refcount */\n+    void RemoveRef() override {}\n+\n+    /** Rewrite the entire database on disk, with the exception of key pszSkip if non-zero\n+     */\n+    bool Rewrite(const char* pszSkip=nullptr) override { return false; }\n+\n+    /** Back up the entire database to a file.\n+     */\n+    bool Backup(const std::string& strDest) const override;\n+\n+    /** Make sure all changes are flushed to database file.\n+     */\n+     void Flush() override {}\n+    /** Flush to the database file and close the database.\n+     *  Also close the environment if no other databases are open in it.\n+     */\n+    void Close() override {}\n+    /* flush the wallet passively (TRY_LOCK)\n+       ideal to be called periodically */\n+    bool PeriodicFlush() override { return false; }\n+\n+    void IncrementUpdateCounter() override {}\n+\n+    void ReloadDbEnv() override {}\n+\n+    /** Return path to main database file for logs and error messages. */\n+    std::string Filename() override { return fs::PathToString(m_filepath); }\n+\n+    std::string Format() override { return \"bdb_ro\"; }\n+\n+    /** Make a DatabaseBatch connected to this database */\n+    std::unique_ptr<DatabaseBatch> MakeBatch(bool flush_on_close = true) override;\n+};\n+\n+class BerkeleyROCursor : public DatabaseCursor\n+{\n+private:\n+    const BerkeleyRODatabase& m_database;\n+    BerkeleyROData::const_iterator m_cursor;\n+    BerkeleyROData::const_iterator m_cursor_end;\n+\n+public:\n+    explicit BerkeleyROCursor(const BerkeleyRODatabase& database, Span<const std::byte> prefix = {});\n+    ~BerkeleyROCursor() {}\n+\n+    Status Next(DataStream& key, DataStream& value) override;\n+};\n+\n+/** RAII class that provides access to a BerkeleyRODatabase */\n+class BerkeleyROBatch : public DatabaseBatch\n+{\n+private:\n+    const BerkeleyRODatabase& m_database;\n+\n+    bool ReadKey(DataStream&& key, DataStream& value) override;\n+    bool WriteKey(DataStream&& key, DataStream&& value, bool overwrite=true) override { return true; }",
      "path": "src/wallet/migrate.h",
      "position": 96,
      "original_position": 96,
      "commit_id": "0dd59f3769bfb7cb15f7a93aa5efac66e3c3e50e",
      "original_commit_id": "f108c6b565e73ea02df94331a347f9d1653ab0b2",
      "in_reply_to_id": 1229358644,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "IIRC I did this to avoid issues with old wallets that the wallet loading logic would do automatic upgrading of which expects writing to not fail. It actually should be fine for those to not write anything.",
      "created_at": "2023-06-30T16:20:07Z",
      "updated_at": "2023-06-30T16:22:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1248057852",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1248057852"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 96,
      "original_line": 96,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1252319116",
      "pull_request_review_id": 1513342000,
      "id": 1252319116,
      "node_id": "PRRC_kwDOABII585KpN-M",
      "diff_hunk": "@@ -519,7 +582,7 @@ void BerkeleyRODatabase::Open()\n                     uint32_t next_page = orec->page_number;\n                     while (next_page != 0) {\n                         SeekToPage(db_file, next_page, page_size);\n-                        PageHeader opage_header;\n+                        PageHeader opage_header(inner_meta.other_endian);\n                         db_file >> opage_header;\n                         OverflowPage opage(opage_header);\n                         db_file >> opage;",
      "path": "src/wallet/migrate.cpp",
      "position": 590,
      "original_position": 215,
      "commit_id": "0dd59f3769bfb7cb15f7a93aa5efac66e3c3e50e",
      "original_commit_id": "0b8eac6a78351a68c1b5a6126564493ab50031dc",
      "in_reply_to_id": 1247847963,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "ACK, please resolve.",
      "created_at": "2023-07-04T20:01:54Z",
      "updated_at": "2023-07-04T20:01:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1252319116",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1252319116"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 590,
      "original_line": 590,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1273993906",
      "pull_request_review_id": 1546251193,
      "id": 1273993906,
      "node_id": "PRRC_kwDOABII585L75qy",
      "diff_hunk": "@@ -0,0 +1,683 @@\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <compat/byteswap.h>\n+#include <crypto/common.h> // For ReadBE32\n+#include <logging.h>\n+#include <streams.h>\n+#include <uint256.h>\n+#include <wallet/migrate.h>\n+\n+#include <optional>\n+#include <variant>\n+\n+namespace wallet {\n+// Magic bytes in both endianness's\n+constexpr uint32_t BTREE_MAGIC = 0x00053162; // If the file endianness matches our system, we see this magic\n+constexpr uint32_t BTREE_MAGIC_OE = 0x62310500; // If the file endianness is the other one, we will see this magic\n+\n+enum class PageType : uint8_t\n+{\n+    INVALID = 0,         // Invalid page type\n+    DUPLICATE = 1,       // Duplicate. Deprecated and no longer used\n+    HASH_UNSORTED = 2,   // Hash pages. Deprecated.\n+    BTREE_INTERNAL = 3,  // BTree internal\n+    RECNO_INTERNAL = 4,  // Recno internal\n+    BTREE_LEAF = 5,      // BTree leaf\n+    RECNO_LEAF = 6,      // Recno leaf\n+    OVERFLOW_DATA = 7,        // Overflow\n+    HASH_META = 8,       // Hash metadata\n+    BTREE_META = 9,      // BTree metadata\n+    QUEUE_META = 10,     // Queue Metadata\n+    QUEUE_DATA = 11,     // Queue Data\n+    DUPLICATE_LEAF = 12, // Off-page duplicate leaf\n+    HASH_SORTED = 13,    // Sorted hash page\n+\n+    PAGETYPE_MAX = 14,\n+};\n+\n+enum class RecordType : uint8_t\n+{\n+    KEYDATA = 1,\n+    DUPLICATE = 2,\n+    OVERFLOW_DATA = 3,\n+    DELETE = 0x80, // Indicate this record is deleted. This is AND'd with the real type.\n+};\n+\n+enum class BTreeFlags : uint32_t\n+{\n+    DUP = 1,         // Duplicates\n+    RECNO = 2,       // Recno tree\n+    RECNUM = 4,      // BTree: Maintain record counts\n+    FIXEDLEN = 8,    // Recno: fixed length records\n+    RENUMBER = 0x10, // Recno: renumber on insert/delete\n+    SUBDB = 0x20,    // Subdatabases\n+    DUPSORT = 0x40,  // Duplicates are sorted\n+    COMPRESS = 0x80, // Compressed\n+};\n+\n+/** Berkeley DB BTree metadata page layout */\n+class MetaPage\n+{\n+public:\n+    uint64_t lsn;             // Log Sequence Number\n+    uint32_t page_num;        // Current page number\n+    uint32_t magic;           // Magic number\n+    uint32_t version;         // Version\n+    uint32_t pagesize;        // Page size\n+    uint8_t encrypt_algo;     // Encryption algorithm\n+    PageType type;            // Page type\n+    uint8_t metaflags;        // Meta-only flags\n+    uint8_t unused1;          // Unused\n+    uint32_t free_list;       // Free list page number\n+    uint32_t last_page;       // Page number of last page in db\n+    uint32_t partitions;      // Number of partitions\n+    uint32_t key_count;       // Cached key count\n+    uint32_t record_count;    // Cached record count\n+    BTreeFlags flags;         // Flags\n+    uint160 uid;              // Unique file ID (20 bytes, fits in uint16)\n+    uint32_t unused2;         // Unused\n+    uint32_t minkey;          // Minimum key\n+    uint32_t re_len;          // Recno: fixed length record length\n+    uint32_t re_pad;          // Recno: fixed length record pad\n+    uint32_t root;            // Root page number\n+    char unused3[368];        // 92 * 4 bytes of unused space\n+    uint32_t crypto_magic;    // Crypto magic number\n+    char trash[12];           // 3 * 4 bytes of trash space\n+    unsigned char iv[20];     // Crypto IV\n+    unsigned char chksum[16]; // Checksum\n+\n+    bool other_endian;\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> lsn;\n+        s >> page_num;\n+        s >> magic;\n+        s >> version;\n+        s >> pagesize;\n+        s >> encrypt_algo;\n+\n+        other_endian = magic == BTREE_MAGIC_OE;\n+\n+        uint8_t uint8_type;\n+        s >> uint8_type;\n+        type = static_cast<PageType>(uint8_type);\n+\n+        s >> metaflags;\n+        s >> unused1;\n+        s >> free_list;\n+        s >> last_page;\n+        s >> partitions;\n+        s >> key_count;\n+        s >> record_count;\n+\n+        uint32_t uint32_flags;\n+        s >> uint32_flags;\n+        if (other_endian) {\n+            uint32_flags = bswap_32(uint32_flags);\n+        }\n+        flags = static_cast<BTreeFlags>(uint32_flags);\n+\n+        s >> uid;\n+        s >> unused2;\n+        s >> minkey;\n+        s >> re_len;\n+        s >> re_pad;\n+        s >> root;\n+        s >> unused3;\n+        s >> crypto_magic;\n+        s >> trash;\n+        s >> iv;\n+        s >> chksum;\n+\n+        if (other_endian) {\n+            lsn = bswap_64(lsn);\n+            page_num = bswap_32(page_num);\n+            magic = bswap_32(magic);\n+            version = bswap_32(version);\n+            pagesize = bswap_32(pagesize);\n+            free_list = bswap_32(free_list);\n+            last_page = bswap_32(last_page);\n+            partitions = bswap_32(partitions);\n+            key_count = bswap_32(key_count);\n+            record_count = bswap_32(record_count);\n+            unused2 = bswap_32(unused2);\n+            minkey = bswap_32(minkey);\n+            re_len = bswap_32(re_len);\n+            re_pad = bswap_32(re_pad);\n+            root = bswap_32(root);\n+            crypto_magic = bswap_32(crypto_magic);\n+        }\n+    }\n+};\n+\n+/** General class for records in a BDB BTree database. Contains common fields. */\n+class RecordHeader\n+{\n+public:\n+    uint16_t len;  // Key/data item length\n+    RecordType type;  // Page type and DELETE FLAG\n+\n+    static constexpr size_t SIZE = 3; // The record header is 3 bytes\n+\n+    bool other_endian;\n+\n+    RecordHeader(bool other_endian) : other_endian(other_endian) {}\n+    RecordHeader() = delete;\n+\n+    RecordType GetRealType() const\n+    {\n+        return static_cast<RecordType>(static_cast<uint8_t>(type) & ~static_cast<uint8_t>(RecordType::DELETE));\n+    }\n+\n+    bool IsDeleted() const\n+    {\n+        return static_cast<uint8_t>(type) & static_cast<uint8_t>(RecordType::DELETE);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> len;\n+\n+        uint8_t uint8_type;\n+        s >> uint8_type;\n+        type = static_cast<RecordType>(uint8_type);\n+\n+        if (other_endian) {\n+            len = bswap_16(len);\n+        }\n+    }\n+};\n+\n+/** Class for data in the record directly */\n+class DataRecord\n+{\n+public:\n+    DataRecord(const RecordHeader& header) : m_header(header) {}\n+    DataRecord() = delete;\n+\n+    RecordHeader m_header;\n+\n+    std::vector<std::byte> data; // Variable length key/data item\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        data.resize(m_header.len);\n+        s.read(AsWritableBytes(Span(data.data(), data.size())));\n+    }\n+};\n+\n+/** Class for records representing internal nodes of the BTree. */\n+class InternalRecord\n+{\n+public:\n+    InternalRecord(const RecordHeader& header) : m_header(header) {}\n+    InternalRecord() = delete;\n+\n+    RecordHeader m_header;\n+\n+    uint8_t unused;                   // Padding, unused\n+    uint32_t page_num;                // Page number of referenced page\n+    uint32_t records;                 // Subtree record count\n+    std::vector<std::byte> data;  // Variable length key item\n+\n+    static constexpr size_t FIXED_SIZE = 9; // Size of fixed data is 9 bytes\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> unused;\n+        s >> page_num;\n+        s >> records;\n+\n+        data.resize(m_header.len);\n+        s.read(AsWritableBytes(Span(data.data(), data.size())));\n+\n+        if (m_header.other_endian) {\n+            page_num = bswap_32(page_num);\n+            records = bswap_32(records);\n+        }\n+    }\n+};\n+\n+/** Class for records representing overflow records of the BTree.\n+ * Overflow records point to a page which contains the data in the record.\n+ * Those pages may point to further pages with the rest of the data if it does not fit\n+ * in one page */\n+class OverflowRecord\n+{\n+public:\n+    OverflowRecord(const RecordHeader& header) : m_header(header) {}\n+    OverflowRecord() = delete;\n+\n+    RecordHeader m_header;\n+\n+    uint8_t unused2;      // Padding, unused\n+    uint32_t page_number; // Page number where data begins\n+    uint32_t item_len;    // Total length of item\n+\n+    static constexpr size_t SIZE = 9; // Overflow record is always 9 bytes\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> unused2;\n+        s >> page_number;\n+        s >> item_len;\n+\n+        if (m_header.other_endian) {\n+            page_number = bswap_32(page_number);\n+            item_len = bswap_32(item_len);\n+        }\n+    }\n+};\n+\n+/** A generic data page in the database. Contains fields common to all data pages. */\n+class PageHeader\n+{\n+public:\n+    uint64_t lsn;       // Log Sequence Number\n+    uint32_t page_num;  // Current page number\n+    uint32_t prev_page; // Previous page number\n+    uint32_t next_page; // Next page number\n+    uint16_t entries;   // Number of items on the page\n+    uint16_t hf_offset; // High free byte page offset\n+    uint8_t level;      // Btree page level\n+    PageType type;      // Page type\n+\n+    static constexpr int64_t SIZE = 26; // The header is 26 bytes\n+\n+    bool other_endian;\n+\n+    PageHeader(bool other_endian) : other_endian(other_endian) {}\n+    PageHeader() = delete;\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> lsn;\n+        s >> page_num;\n+        s >> prev_page;\n+        s >> next_page;\n+        s >> entries;\n+        s >> hf_offset;\n+        s >> level;\n+\n+        uint8_t uint8_type;\n+        s >> uint8_type;\n+        type = static_cast<PageType>(uint8_type);\n+\n+        if (other_endian) {\n+            lsn = bswap_64(lsn);\n+            page_num = bswap_32(page_num);\n+            prev_page = bswap_32(prev_page);\n+            next_page = bswap_32(next_page);\n+            entries = bswap_16(entries);\n+            hf_offset = bswap_16(hf_offset);\n+        }\n+    }\n+};\n+\n+/** A page of records in the database */\n+class RecordsPage\n+{\n+public:\n+    RecordsPage(const PageHeader& header) : m_header(header) {}\n+    RecordsPage() = delete;\n+\n+    PageHeader m_header;\n+\n+    std::vector<uint16_t> indexes;\n+    std::vector<std::variant<DataRecord, OverflowRecord>> records;\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        // Current position within the page\n+        int64_t pos = PageHeader::SIZE;\n+\n+        // Get the items\n+        for (uint32_t i = 0; i < m_header.entries; ++i) {\n+            // Get the index\n+            uint16_t index;\n+            s >> index;\n+            if (m_header.other_endian) {\n+                index = bswap_16(index);\n+            }\n+            indexes.push_back(index);\n+            pos += sizeof(uint16_t);\n+\n+            // Go to the offset from the index\n+            int64_t to_jump = index - pos;\n+            s.ignore(to_jump);\n+\n+            // Read the record\n+            RecordHeader rec_hdr(m_header.other_endian);\n+            s >> rec_hdr;\n+            to_jump += RecordHeader::SIZE;\n+\n+            switch (rec_hdr.GetRealType()) {\n+            case RecordType::KEYDATA:\n+            {\n+                DataRecord record(rec_hdr);\n+                s >> record;\n+                records.push_back(record);\n+                to_jump += rec_hdr.len;\n+                break;\n+            }\n+            case RecordType::DUPLICATE:\n+            case RecordType::OVERFLOW_DATA:\n+            {\n+                OverflowRecord record(rec_hdr);\n+                s >> record;\n+                records.push_back(record);\n+                to_jump += OverflowRecord::SIZE;\n+                break;\n+            }\n+            default:\n+                throw std::runtime_error(\"Unknown record type in records page\");\n+            }\n+\n+            // Go back to the indexes\n+            s.seek(-to_jump, SEEK_CUR);\n+        }\n+    }\n+};\n+\n+/** A page containing overflow data */\n+class OverflowPage\n+{\n+public:\n+    OverflowPage(const PageHeader& header) : m_header(header) {}\n+    OverflowPage() = delete;\n+\n+    PageHeader m_header;\n+\n+    // BDB overloads some page fields to store overflow page data\n+    // hf_offset contains the length of the overflow data stored on this page\n+    // entries contains a reference count for references to this item\n+\n+    // The overflow data itself. Begins immediately following header\n+    std::vector<std::byte> data;\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        data.resize(m_header.hf_offset);\n+        s.read(AsWritableBytes(Span(data.data(), data.size())));\n+    }\n+};\n+\n+/** A page of records in the database */\n+class InternalPage\n+{\n+public:\n+    InternalPage(const PageHeader& header) : m_header(header) {}\n+    InternalPage() = delete;\n+\n+    PageHeader m_header;\n+\n+    std::vector<uint16_t> indexes;\n+    std::vector<InternalRecord> records;\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        // Current position within the page\n+        int64_t pos = PageHeader::SIZE;\n+\n+        // Get the items\n+        for (uint32_t i = 0; i < m_header.entries; ++i) {\n+            // Get the index\n+            uint16_t index;\n+            s >> index;\n+            if (m_header.other_endian) {\n+                index = bswap_16(index);\n+            }\n+            indexes.push_back(index);\n+            pos += sizeof(uint16_t);\n+\n+            // Go to the offset from the index\n+            int64_t to_jump = index - pos;\n+            s.ignore(to_jump);\n+\n+            // Read the record\n+            RecordHeader rec_hdr(m_header.other_endian);\n+            s >> rec_hdr;\n+            to_jump += RecordHeader::SIZE;\n+\n+            if (rec_hdr.GetRealType() != RecordType::KEYDATA) {\n+                throw std::runtime_error(\"Unknown record type in internal page\");\n+            }\n+            InternalRecord record(rec_hdr);\n+            s >> record;\n+            records.push_back(record);\n+            to_jump += InternalRecord::FIXED_SIZE + rec_hdr.len;\n+\n+            // Go back to the indexes\n+            s.seek(-to_jump, SEEK_CUR);\n+\n+        }\n+    }\n+};\n+\n+static MetaPage ReadMetaPage(CAutoFile& f)\n+{\n+    // Read the metapage\n+    MetaPage meta;\n+    f >> meta;\n+\n+    // Sanity checks\n+    if (meta.magic != BTREE_MAGIC) {\n+        throw std::runtime_error(\"Not a BDB file\");\n+    }\n+    if (meta.version != 9) {\n+        throw std::runtime_error(\"Unsupported BDB data file version number\");\n+    }\n+    if (meta.type != PageType::BTREE_META) {\n+        throw std::runtime_error(\"Unexpected page type, should be 9 (BTree Metadata)\");\n+    }\n+    if (meta.flags != BTreeFlags::SUBDB) {\n+        throw std::runtime_error(\"Unexpected database flags, should only be 0x20 (subdatabases)\");\n+    }\n+\n+    return meta;\n+}\n+\n+static void SeekToPage(CAutoFile& s, uint32_t page_num, uint32_t page_size)\n+{\n+    size_t pos = page_num * page_size;\n+    s.seek(pos, SEEK_SET);\n+}\n+\n+void BerkeleyRODatabase::Open()\n+{\n+    // Open the file\n+    FILE *file = fsbridge::fopen(m_filepath, \"rb\");\n+    CAutoFile db_file(file, 0, 0);\n+    if (db_file.IsNull()) {\n+        db_file.fclose();\n+        throw std::runtime_error(\"BerkeleyRODatabase: Failed to open database file\");\n+    }\n+\n+    uint32_t page_size = 4096; // Default page size\n+\n+    // Read the outer metapage\n+    MetaPage outer_meta = ReadMetaPage(db_file);\n+    page_size = outer_meta.pagesize;\n+\n+    // Read the root page\n+    SeekToPage(db_file, outer_meta.root, page_size);\n+    PageHeader header(outer_meta.other_endian);\n+    db_file >> header;\n+    if (header.type != PageType::BTREE_LEAF) {\n+        throw std::runtime_error(\"Unexpected outer database root page type\");\n+    }\n+    if (header.entries != 2) {\n+        throw std::runtime_error(\"Unexpected number of entries in outer database root page\");\n+    }\n+    RecordsPage page(header);\n+    db_file >> page;\n+\n+    // First record should be the string \"main\"\n+    if (!std::holds_alternative<DataRecord>(page.records.at(0)) || std::get_if<DataRecord>(&page.records.at(0))->data != std::vector<std::byte>({std::byte('m'), std::byte('a'), std::byte('i'), std::byte('n')})) {",
      "path": "src/wallet/migrate.cpp",
      "position": null,
      "original_position": 527,
      "commit_id": "0dd59f3769bfb7cb15f7a93aa5efac66e3c3e50e",
      "original_commit_id": "6e28ff97a99519ec8b50123bc1177084bba68f96",
      "in_reply_to_id": null,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This would be more readable if the `main` bytes were stuffed into a constant somewhere.",
      "created_at": "2023-07-25T19:30:14Z",
      "updated_at": "2023-07-25T19:58:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1273993906",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1273993906"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 527,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1274005925",
      "pull_request_review_id": 1546251193,
      "id": 1274005925,
      "node_id": "PRRC_kwDOABII585L78ml",
      "diff_hunk": "@@ -0,0 +1,683 @@\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <compat/byteswap.h>\n+#include <crypto/common.h> // For ReadBE32\n+#include <logging.h>\n+#include <streams.h>\n+#include <uint256.h>\n+#include <wallet/migrate.h>\n+\n+#include <optional>\n+#include <variant>\n+\n+namespace wallet {\n+// Magic bytes in both endianness's\n+constexpr uint32_t BTREE_MAGIC = 0x00053162; // If the file endianness matches our system, we see this magic\n+constexpr uint32_t BTREE_MAGIC_OE = 0x62310500; // If the file endianness is the other one, we will see this magic\n+\n+enum class PageType : uint8_t\n+{\n+    INVALID = 0,         // Invalid page type\n+    DUPLICATE = 1,       // Duplicate. Deprecated and no longer used\n+    HASH_UNSORTED = 2,   // Hash pages. Deprecated.\n+    BTREE_INTERNAL = 3,  // BTree internal\n+    RECNO_INTERNAL = 4,  // Recno internal\n+    BTREE_LEAF = 5,      // BTree leaf\n+    RECNO_LEAF = 6,      // Recno leaf\n+    OVERFLOW_DATA = 7,        // Overflow\n+    HASH_META = 8,       // Hash metadata\n+    BTREE_META = 9,      // BTree metadata\n+    QUEUE_META = 10,     // Queue Metadata\n+    QUEUE_DATA = 11,     // Queue Data\n+    DUPLICATE_LEAF = 12, // Off-page duplicate leaf\n+    HASH_SORTED = 13,    // Sorted hash page\n+\n+    PAGETYPE_MAX = 14,\n+};\n+\n+enum class RecordType : uint8_t\n+{\n+    KEYDATA = 1,\n+    DUPLICATE = 2,\n+    OVERFLOW_DATA = 3,\n+    DELETE = 0x80, // Indicate this record is deleted. This is AND'd with the real type.\n+};\n+\n+enum class BTreeFlags : uint32_t\n+{\n+    DUP = 1,         // Duplicates\n+    RECNO = 2,       // Recno tree\n+    RECNUM = 4,      // BTree: Maintain record counts\n+    FIXEDLEN = 8,    // Recno: fixed length records\n+    RENUMBER = 0x10, // Recno: renumber on insert/delete\n+    SUBDB = 0x20,    // Subdatabases\n+    DUPSORT = 0x40,  // Duplicates are sorted\n+    COMPRESS = 0x80, // Compressed\n+};\n+\n+/** Berkeley DB BTree metadata page layout */\n+class MetaPage\n+{\n+public:\n+    uint64_t lsn;             // Log Sequence Number\n+    uint32_t page_num;        // Current page number\n+    uint32_t magic;           // Magic number\n+    uint32_t version;         // Version\n+    uint32_t pagesize;        // Page size\n+    uint8_t encrypt_algo;     // Encryption algorithm\n+    PageType type;            // Page type\n+    uint8_t metaflags;        // Meta-only flags\n+    uint8_t unused1;          // Unused\n+    uint32_t free_list;       // Free list page number\n+    uint32_t last_page;       // Page number of last page in db\n+    uint32_t partitions;      // Number of partitions\n+    uint32_t key_count;       // Cached key count\n+    uint32_t record_count;    // Cached record count\n+    BTreeFlags flags;         // Flags\n+    uint160 uid;              // Unique file ID (20 bytes, fits in uint16)\n+    uint32_t unused2;         // Unused\n+    uint32_t minkey;          // Minimum key\n+    uint32_t re_len;          // Recno: fixed length record length\n+    uint32_t re_pad;          // Recno: fixed length record pad\n+    uint32_t root;            // Root page number\n+    char unused3[368];        // 92 * 4 bytes of unused space\n+    uint32_t crypto_magic;    // Crypto magic number\n+    char trash[12];           // 3 * 4 bytes of trash space\n+    unsigned char iv[20];     // Crypto IV\n+    unsigned char chksum[16]; // Checksum\n+\n+    bool other_endian;\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> lsn;\n+        s >> page_num;\n+        s >> magic;\n+        s >> version;\n+        s >> pagesize;\n+        s >> encrypt_algo;\n+\n+        other_endian = magic == BTREE_MAGIC_OE;\n+\n+        uint8_t uint8_type;\n+        s >> uint8_type;\n+        type = static_cast<PageType>(uint8_type);\n+\n+        s >> metaflags;\n+        s >> unused1;\n+        s >> free_list;\n+        s >> last_page;\n+        s >> partitions;\n+        s >> key_count;\n+        s >> record_count;\n+\n+        uint32_t uint32_flags;\n+        s >> uint32_flags;\n+        if (other_endian) {\n+            uint32_flags = bswap_32(uint32_flags);\n+        }\n+        flags = static_cast<BTreeFlags>(uint32_flags);\n+\n+        s >> uid;\n+        s >> unused2;\n+        s >> minkey;\n+        s >> re_len;\n+        s >> re_pad;\n+        s >> root;\n+        s >> unused3;\n+        s >> crypto_magic;\n+        s >> trash;\n+        s >> iv;\n+        s >> chksum;\n+\n+        if (other_endian) {\n+            lsn = bswap_64(lsn);\n+            page_num = bswap_32(page_num);\n+            magic = bswap_32(magic);\n+            version = bswap_32(version);\n+            pagesize = bswap_32(pagesize);\n+            free_list = bswap_32(free_list);\n+            last_page = bswap_32(last_page);\n+            partitions = bswap_32(partitions);\n+            key_count = bswap_32(key_count);\n+            record_count = bswap_32(record_count);\n+            unused2 = bswap_32(unused2);\n+            minkey = bswap_32(minkey);\n+            re_len = bswap_32(re_len);\n+            re_pad = bswap_32(re_pad);\n+            root = bswap_32(root);\n+            crypto_magic = bswap_32(crypto_magic);\n+        }\n+    }\n+};\n+\n+/** General class for records in a BDB BTree database. Contains common fields. */\n+class RecordHeader\n+{\n+public:\n+    uint16_t len;  // Key/data item length\n+    RecordType type;  // Page type and DELETE FLAG\n+\n+    static constexpr size_t SIZE = 3; // The record header is 3 bytes\n+\n+    bool other_endian;\n+\n+    RecordHeader(bool other_endian) : other_endian(other_endian) {}\n+    RecordHeader() = delete;\n+\n+    RecordType GetRealType() const\n+    {\n+        return static_cast<RecordType>(static_cast<uint8_t>(type) & ~static_cast<uint8_t>(RecordType::DELETE));\n+    }\n+\n+    bool IsDeleted() const\n+    {\n+        return static_cast<uint8_t>(type) & static_cast<uint8_t>(RecordType::DELETE);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> len;\n+\n+        uint8_t uint8_type;\n+        s >> uint8_type;\n+        type = static_cast<RecordType>(uint8_type);\n+\n+        if (other_endian) {\n+            len = bswap_16(len);\n+        }\n+    }\n+};\n+\n+/** Class for data in the record directly */\n+class DataRecord\n+{\n+public:\n+    DataRecord(const RecordHeader& header) : m_header(header) {}\n+    DataRecord() = delete;\n+\n+    RecordHeader m_header;\n+\n+    std::vector<std::byte> data; // Variable length key/data item\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        data.resize(m_header.len);\n+        s.read(AsWritableBytes(Span(data.data(), data.size())));\n+    }\n+};\n+\n+/** Class for records representing internal nodes of the BTree. */\n+class InternalRecord\n+{\n+public:\n+    InternalRecord(const RecordHeader& header) : m_header(header) {}\n+    InternalRecord() = delete;\n+\n+    RecordHeader m_header;\n+\n+    uint8_t unused;                   // Padding, unused\n+    uint32_t page_num;                // Page number of referenced page\n+    uint32_t records;                 // Subtree record count\n+    std::vector<std::byte> data;  // Variable length key item\n+\n+    static constexpr size_t FIXED_SIZE = 9; // Size of fixed data is 9 bytes\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> unused;\n+        s >> page_num;\n+        s >> records;\n+\n+        data.resize(m_header.len);\n+        s.read(AsWritableBytes(Span(data.data(), data.size())));\n+\n+        if (m_header.other_endian) {\n+            page_num = bswap_32(page_num);\n+            records = bswap_32(records);\n+        }\n+    }\n+};\n+\n+/** Class for records representing overflow records of the BTree.\n+ * Overflow records point to a page which contains the data in the record.\n+ * Those pages may point to further pages with the rest of the data if it does not fit\n+ * in one page */\n+class OverflowRecord\n+{\n+public:\n+    OverflowRecord(const RecordHeader& header) : m_header(header) {}\n+    OverflowRecord() = delete;\n+\n+    RecordHeader m_header;\n+\n+    uint8_t unused2;      // Padding, unused\n+    uint32_t page_number; // Page number where data begins\n+    uint32_t item_len;    // Total length of item\n+\n+    static constexpr size_t SIZE = 9; // Overflow record is always 9 bytes\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> unused2;\n+        s >> page_number;\n+        s >> item_len;\n+\n+        if (m_header.other_endian) {\n+            page_number = bswap_32(page_number);\n+            item_len = bswap_32(item_len);\n+        }\n+    }\n+};\n+\n+/** A generic data page in the database. Contains fields common to all data pages. */\n+class PageHeader\n+{\n+public:\n+    uint64_t lsn;       // Log Sequence Number\n+    uint32_t page_num;  // Current page number\n+    uint32_t prev_page; // Previous page number\n+    uint32_t next_page; // Next page number\n+    uint16_t entries;   // Number of items on the page\n+    uint16_t hf_offset; // High free byte page offset\n+    uint8_t level;      // Btree page level\n+    PageType type;      // Page type\n+\n+    static constexpr int64_t SIZE = 26; // The header is 26 bytes\n+\n+    bool other_endian;\n+\n+    PageHeader(bool other_endian) : other_endian(other_endian) {}\n+    PageHeader() = delete;\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> lsn;\n+        s >> page_num;\n+        s >> prev_page;\n+        s >> next_page;\n+        s >> entries;\n+        s >> hf_offset;\n+        s >> level;\n+\n+        uint8_t uint8_type;\n+        s >> uint8_type;\n+        type = static_cast<PageType>(uint8_type);\n+\n+        if (other_endian) {\n+            lsn = bswap_64(lsn);\n+            page_num = bswap_32(page_num);\n+            prev_page = bswap_32(prev_page);\n+            next_page = bswap_32(next_page);\n+            entries = bswap_16(entries);\n+            hf_offset = bswap_16(hf_offset);\n+        }\n+    }\n+};\n+\n+/** A page of records in the database */\n+class RecordsPage\n+{\n+public:\n+    RecordsPage(const PageHeader& header) : m_header(header) {}\n+    RecordsPage() = delete;\n+\n+    PageHeader m_header;\n+\n+    std::vector<uint16_t> indexes;\n+    std::vector<std::variant<DataRecord, OverflowRecord>> records;\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        // Current position within the page\n+        int64_t pos = PageHeader::SIZE;\n+\n+        // Get the items\n+        for (uint32_t i = 0; i < m_header.entries; ++i) {\n+            // Get the index\n+            uint16_t index;\n+            s >> index;\n+            if (m_header.other_endian) {\n+                index = bswap_16(index);\n+            }\n+            indexes.push_back(index);\n+            pos += sizeof(uint16_t);\n+\n+            // Go to the offset from the index\n+            int64_t to_jump = index - pos;\n+            s.ignore(to_jump);\n+\n+            // Read the record\n+            RecordHeader rec_hdr(m_header.other_endian);\n+            s >> rec_hdr;\n+            to_jump += RecordHeader::SIZE;\n+\n+            switch (rec_hdr.GetRealType()) {\n+            case RecordType::KEYDATA:\n+            {\n+                DataRecord record(rec_hdr);\n+                s >> record;\n+                records.push_back(record);\n+                to_jump += rec_hdr.len;\n+                break;\n+            }\n+            case RecordType::DUPLICATE:\n+            case RecordType::OVERFLOW_DATA:\n+            {\n+                OverflowRecord record(rec_hdr);\n+                s >> record;\n+                records.push_back(record);\n+                to_jump += OverflowRecord::SIZE;\n+                break;\n+            }\n+            default:\n+                throw std::runtime_error(\"Unknown record type in records page\");\n+            }\n+\n+            // Go back to the indexes\n+            s.seek(-to_jump, SEEK_CUR);\n+        }\n+    }\n+};\n+\n+/** A page containing overflow data */\n+class OverflowPage\n+{\n+public:\n+    OverflowPage(const PageHeader& header) : m_header(header) {}\n+    OverflowPage() = delete;\n+\n+    PageHeader m_header;\n+\n+    // BDB overloads some page fields to store overflow page data\n+    // hf_offset contains the length of the overflow data stored on this page\n+    // entries contains a reference count for references to this item\n+\n+    // The overflow data itself. Begins immediately following header\n+    std::vector<std::byte> data;\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        data.resize(m_header.hf_offset);\n+        s.read(AsWritableBytes(Span(data.data(), data.size())));\n+    }\n+};\n+\n+/** A page of records in the database */\n+class InternalPage\n+{\n+public:\n+    InternalPage(const PageHeader& header) : m_header(header) {}\n+    InternalPage() = delete;\n+\n+    PageHeader m_header;\n+\n+    std::vector<uint16_t> indexes;\n+    std::vector<InternalRecord> records;\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        // Current position within the page\n+        int64_t pos = PageHeader::SIZE;\n+\n+        // Get the items\n+        for (uint32_t i = 0; i < m_header.entries; ++i) {\n+            // Get the index\n+            uint16_t index;\n+            s >> index;\n+            if (m_header.other_endian) {\n+                index = bswap_16(index);\n+            }\n+            indexes.push_back(index);\n+            pos += sizeof(uint16_t);\n+\n+            // Go to the offset from the index\n+            int64_t to_jump = index - pos;\n+            s.ignore(to_jump);\n+\n+            // Read the record\n+            RecordHeader rec_hdr(m_header.other_endian);\n+            s >> rec_hdr;\n+            to_jump += RecordHeader::SIZE;\n+\n+            if (rec_hdr.GetRealType() != RecordType::KEYDATA) {\n+                throw std::runtime_error(\"Unknown record type in internal page\");\n+            }\n+            InternalRecord record(rec_hdr);\n+            s >> record;\n+            records.push_back(record);\n+            to_jump += InternalRecord::FIXED_SIZE + rec_hdr.len;\n+\n+            // Go back to the indexes\n+            s.seek(-to_jump, SEEK_CUR);\n+\n+        }\n+    }\n+};\n+\n+static MetaPage ReadMetaPage(CAutoFile& f)\n+{\n+    // Read the metapage\n+    MetaPage meta;\n+    f >> meta;\n+\n+    // Sanity checks\n+    if (meta.magic != BTREE_MAGIC) {\n+        throw std::runtime_error(\"Not a BDB file\");\n+    }\n+    if (meta.version != 9) {\n+        throw std::runtime_error(\"Unsupported BDB data file version number\");\n+    }\n+    if (meta.type != PageType::BTREE_META) {\n+        throw std::runtime_error(\"Unexpected page type, should be 9 (BTree Metadata)\");\n+    }\n+    if (meta.flags != BTreeFlags::SUBDB) {\n+        throw std::runtime_error(\"Unexpected database flags, should only be 0x20 (subdatabases)\");\n+    }\n+\n+    return meta;\n+}\n+\n+static void SeekToPage(CAutoFile& s, uint32_t page_num, uint32_t page_size)\n+{\n+    size_t pos = page_num * page_size;\n+    s.seek(pos, SEEK_SET);\n+}\n+\n+void BerkeleyRODatabase::Open()\n+{\n+    // Open the file\n+    FILE *file = fsbridge::fopen(m_filepath, \"rb\");\n+    CAutoFile db_file(file, 0, 0);\n+    if (db_file.IsNull()) {\n+        db_file.fclose();\n+        throw std::runtime_error(\"BerkeleyRODatabase: Failed to open database file\");\n+    }\n+\n+    uint32_t page_size = 4096; // Default page size\n+\n+    // Read the outer metapage\n+    MetaPage outer_meta = ReadMetaPage(db_file);\n+    page_size = outer_meta.pagesize;\n+\n+    // Read the root page\n+    SeekToPage(db_file, outer_meta.root, page_size);\n+    PageHeader header(outer_meta.other_endian);\n+    db_file >> header;\n+    if (header.type != PageType::BTREE_LEAF) {\n+        throw std::runtime_error(\"Unexpected outer database root page type\");\n+    }\n+    if (header.entries != 2) {\n+        throw std::runtime_error(\"Unexpected number of entries in outer database root page\");\n+    }\n+    RecordsPage page(header);\n+    db_file >> page;\n+\n+    // First record should be the string \"main\"\n+    if (!std::holds_alternative<DataRecord>(page.records.at(0)) || std::get_if<DataRecord>(&page.records.at(0))->data != std::vector<std::byte>({std::byte('m'), std::byte('a'), std::byte('i'), std::byte('n')})) {\n+        throw std::runtime_error(\"Subdatabase has an unexpected name\");\n+    }\n+    if (!std::holds_alternative<DataRecord>(page.records.at(1)) || std::get_if<DataRecord>(&page.records.at(1))->m_header.len != 4) {",
      "path": "src/wallet/migrate.cpp",
      "position": 534,
      "original_position": 530,
      "commit_id": "0dd59f3769bfb7cb15f7a93aa5efac66e3c3e50e",
      "original_commit_id": "6e28ff97a99519ec8b50123bc1177084bba68f96",
      "in_reply_to_id": null,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Can you add a comment explaining why we check this?",
      "created_at": "2023-07-25T19:43:38Z",
      "updated_at": "2023-07-25T19:58:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1274005925",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1274005925"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 534,
      "original_line": 534,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1279447033",
      "pull_request_review_id": 1555022636,
      "id": 1279447033,
      "node_id": "PRRC_kwDOABII585MQs_5",
      "diff_hunk": "@@ -0,0 +1,75 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+#include <util/fs.h>\n+#include <util/time.h>\n+#include <util/translation.h>\n+#include <wallet/db.h>\n+#include <wallet/dump.h>\n+#include <wallet/migrate.h>\n+\n+#include <iostream>\n+\n+using wallet::DatabaseOptions;\n+using wallet::DatabaseStatus;\n+\n+namespace {\n+TestingSetup* g_setup;\n+} // namespace\n+\n+void initialize_wallet_bdb_parser()\n+{\n+    static auto testing_setup = MakeNoLogFileContext<TestingSetup>();\n+    g_setup = testing_setup.get();\n+}\n+\n+FUZZ_TARGET(wallet_bdb_parser, .init = initialize_wallet_bdb_parser)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+\n+    const auto wallet_path = g_setup->m_args.GetDataDirNet() / \"fuzzed_wallet.dat\";",
      "path": "src/wallet/test/fuzz/wallet_bdb_parser.cpp",
      "position": 37,
      "original_position": 35,
      "commit_id": "0dd59f3769bfb7cb15f7a93aa5efac66e3c3e50e",
      "original_commit_id": "6e28ff97a99519ec8b50123bc1177084bba68f96",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Maybe add a recommendation to the fuzz doc to [mount /tmp to tmpfs](https://ubuntu.com/blog/data-driven-analysis-tmp-on-tmpfs), or ensure we don't use the file system.",
      "created_at": "2023-07-31T15:07:01Z",
      "updated_at": "2023-07-31T15:07:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1279447033",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1279447033"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 37,
      "original_line": 37,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1279450655",
      "pull_request_review_id": 1555027910,
      "id": 1279450655,
      "node_id": "PRRC_kwDOABII585MQt4f",
      "diff_hunk": "@@ -0,0 +1,75 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+#include <util/fs.h>\n+#include <util/time.h>\n+#include <util/translation.h>\n+#include <wallet/db.h>\n+#include <wallet/dump.h>\n+#include <wallet/migrate.h>\n+\n+#include <iostream>\n+\n+using wallet::DatabaseOptions;\n+using wallet::DatabaseStatus;\n+\n+namespace {\n+TestingSetup* g_setup;\n+} // namespace\n+\n+void initialize_wallet_bdb_parser()\n+{\n+    static auto testing_setup = MakeNoLogFileContext<TestingSetup>();\n+    g_setup = testing_setup.get();\n+}\n+\n+FUZZ_TARGET(wallet_bdb_parser, .init = initialize_wallet_bdb_parser)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+\n+    const auto wallet_path = g_setup->m_args.GetDataDirNet() / \"fuzzed_wallet.dat\";",
      "path": "src/wallet/test/fuzz/wallet_bdb_parser.cpp",
      "position": 37,
      "original_position": 35,
      "commit_id": "0dd59f3769bfb7cb15f7a93aa5efac66e3c3e50e",
      "original_commit_id": "6e28ff97a99519ec8b50123bc1177084bba68f96",
      "in_reply_to_id": 1279447033,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This is already in the test docs, no?\r\n\r\n```\r\n$ git grep tmpfs test/README.md\r\ntest/README.md:sudo mount -t tmpfs -o size=4g tmpfs /mnt/tmp/\r\n",
      "created_at": "2023-07-31T15:09:05Z",
      "updated_at": "2023-07-31T15:09:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1279450655",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1279450655"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 37,
      "original_line": 37,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1279466130",
      "pull_request_review_id": 1555052889,
      "id": 1279466130,
      "node_id": "PRRC_kwDOABII585MQxqS",
      "diff_hunk": "@@ -0,0 +1,75 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+#include <util/fs.h>\n+#include <util/time.h>\n+#include <util/translation.h>\n+#include <wallet/db.h>\n+#include <wallet/dump.h>\n+#include <wallet/migrate.h>\n+\n+#include <iostream>\n+\n+using wallet::DatabaseOptions;\n+using wallet::DatabaseStatus;\n+\n+namespace {\n+TestingSetup* g_setup;\n+} // namespace\n+\n+void initialize_wallet_bdb_parser()\n+{\n+    static auto testing_setup = MakeNoLogFileContext<TestingSetup>();\n+    g_setup = testing_setup.get();\n+}\n+\n+FUZZ_TARGET(wallet_bdb_parser, .init = initialize_wallet_bdb_parser)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+\n+    const auto wallet_path = g_setup->m_args.GetDataDirNet() / \"fuzzed_wallet.dat\";\n+\n+    {\n+        AutoFile outfile{fsbridge::fopen(wallet_path, \"wb\")};\n+        const auto file_data{ConsumeRandomLengthByteVector(fuzzed_data_provider)};\n+        outfile << Span{file_data};\n+    }\n+\n+    const DatabaseOptions options{};\n+    DatabaseStatus status;\n+    bilingual_str error;\n+\n+    fs::path dumpfile{g_setup->m_args.GetDataDirNet() / \"fuzzed_dumpfile.dat\"};\n+    if (fs::exists(dumpfile)) { // Writing into an existing dump file will throw an exception\n+        remove(dumpfile);\n+    }\n+    g_setup->m_args.ForceSetArg(\"-dumpfile\", fs::PathToString(dumpfile));\n+\n+    try {\n+        auto db{MakeBerkeleyRODatabase(wallet_path, options, status, error)};\n+        assert(DumpWallet(g_setup->m_args, *db, error));",
      "path": "src/wallet/test/fuzz/wallet_bdb_parser.cpp",
      "position": 58,
      "original_position": 55,
      "commit_id": "0dd59f3769bfb7cb15f7a93aa5efac66e3c3e50e",
      "original_commit_id": "6e28ff97a99519ec8b50123bc1177084bba68f96",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It would be useful here - if BDB is compiled - to also open it with BDB, dump and then compare both dumps.\r\n\r\nI'm not sure what to do for cases where BDB and RO have slightly different opinions on what they're willing to open at all. It's probably fine to skip comparing files where _either_ refuses to open.",
      "created_at": "2023-07-31T15:14:56Z",
      "updated_at": "2023-07-31T15:14:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1279466130",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1279466130"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 58,
      "original_line": 58,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1279468544",
      "pull_request_review_id": 1555058328,
      "id": 1279468544,
      "node_id": "PRRC_kwDOABII585MQyQA",
      "diff_hunk": "@@ -0,0 +1,75 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+#include <util/fs.h>\n+#include <util/time.h>\n+#include <util/translation.h>\n+#include <wallet/db.h>\n+#include <wallet/dump.h>\n+#include <wallet/migrate.h>\n+\n+#include <iostream>\n+\n+using wallet::DatabaseOptions;\n+using wallet::DatabaseStatus;\n+\n+namespace {\n+TestingSetup* g_setup;\n+} // namespace\n+\n+void initialize_wallet_bdb_parser()\n+{\n+    static auto testing_setup = MakeNoLogFileContext<TestingSetup>();\n+    g_setup = testing_setup.get();\n+}\n+\n+FUZZ_TARGET(wallet_bdb_parser, .init = initialize_wallet_bdb_parser)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+\n+    const auto wallet_path = g_setup->m_args.GetDataDirNet() / \"fuzzed_wallet.dat\";",
      "path": "src/wallet/test/fuzz/wallet_bdb_parser.cpp",
      "position": 37,
      "original_position": 35,
      "commit_id": "0dd59f3769bfb7cb15f7a93aa5efac66e3c3e50e",
      "original_commit_id": "6e28ff97a99519ec8b50123bc1177084bba68f96",
      "in_reply_to_id": 1279447033,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Not in the fuzz docs, but just having it in the test docs is probably fine.",
      "created_at": "2023-07-31T15:16:53Z",
      "updated_at": "2023-07-31T15:16:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1279468544",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1279468544"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 37,
      "original_line": 37,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1281063486",
      "pull_request_review_id": 1557685853,
      "id": 1281063486,
      "node_id": "PRRC_kwDOABII585MW3o-",
      "diff_hunk": "@@ -0,0 +1,683 @@\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <compat/byteswap.h>\n+#include <crypto/common.h> // For ReadBE32\n+#include <logging.h>\n+#include <streams.h>\n+#include <uint256.h>\n+#include <wallet/migrate.h>\n+\n+#include <optional>\n+#include <variant>\n+\n+namespace wallet {\n+// Magic bytes in both endianness's\n+constexpr uint32_t BTREE_MAGIC = 0x00053162; // If the file endianness matches our system, we see this magic\n+constexpr uint32_t BTREE_MAGIC_OE = 0x62310500; // If the file endianness is the other one, we will see this magic\n+\n+enum class PageType : uint8_t\n+{\n+    INVALID = 0,         // Invalid page type\n+    DUPLICATE = 1,       // Duplicate. Deprecated and no longer used\n+    HASH_UNSORTED = 2,   // Hash pages. Deprecated.\n+    BTREE_INTERNAL = 3,  // BTree internal\n+    RECNO_INTERNAL = 4,  // Recno internal\n+    BTREE_LEAF = 5,      // BTree leaf\n+    RECNO_LEAF = 6,      // Recno leaf\n+    OVERFLOW_DATA = 7,        // Overflow\n+    HASH_META = 8,       // Hash metadata\n+    BTREE_META = 9,      // BTree metadata\n+    QUEUE_META = 10,     // Queue Metadata\n+    QUEUE_DATA = 11,     // Queue Data\n+    DUPLICATE_LEAF = 12, // Off-page duplicate leaf\n+    HASH_SORTED = 13,    // Sorted hash page\n+\n+    PAGETYPE_MAX = 14,\n+};\n+\n+enum class RecordType : uint8_t\n+{\n+    KEYDATA = 1,\n+    DUPLICATE = 2,\n+    OVERFLOW_DATA = 3,\n+    DELETE = 0x80, // Indicate this record is deleted. This is AND'd with the real type.\n+};\n+\n+enum class BTreeFlags : uint32_t\n+{\n+    DUP = 1,         // Duplicates\n+    RECNO = 2,       // Recno tree\n+    RECNUM = 4,      // BTree: Maintain record counts\n+    FIXEDLEN = 8,    // Recno: fixed length records\n+    RENUMBER = 0x10, // Recno: renumber on insert/delete\n+    SUBDB = 0x20,    // Subdatabases\n+    DUPSORT = 0x40,  // Duplicates are sorted\n+    COMPRESS = 0x80, // Compressed\n+};\n+\n+/** Berkeley DB BTree metadata page layout */\n+class MetaPage\n+{\n+public:\n+    uint64_t lsn;             // Log Sequence Number\n+    uint32_t page_num;        // Current page number\n+    uint32_t magic;           // Magic number\n+    uint32_t version;         // Version\n+    uint32_t pagesize;        // Page size\n+    uint8_t encrypt_algo;     // Encryption algorithm\n+    PageType type;            // Page type\n+    uint8_t metaflags;        // Meta-only flags\n+    uint8_t unused1;          // Unused\n+    uint32_t free_list;       // Free list page number\n+    uint32_t last_page;       // Page number of last page in db\n+    uint32_t partitions;      // Number of partitions\n+    uint32_t key_count;       // Cached key count\n+    uint32_t record_count;    // Cached record count\n+    BTreeFlags flags;         // Flags\n+    uint160 uid;              // Unique file ID (20 bytes, fits in uint16)\n+    uint32_t unused2;         // Unused\n+    uint32_t minkey;          // Minimum key\n+    uint32_t re_len;          // Recno: fixed length record length\n+    uint32_t re_pad;          // Recno: fixed length record pad\n+    uint32_t root;            // Root page number\n+    char unused3[368];        // 92 * 4 bytes of unused space\n+    uint32_t crypto_magic;    // Crypto magic number\n+    char trash[12];           // 3 * 4 bytes of trash space\n+    unsigned char iv[20];     // Crypto IV\n+    unsigned char chksum[16]; // Checksum\n+\n+    bool other_endian;\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> lsn;\n+        s >> page_num;\n+        s >> magic;\n+        s >> version;\n+        s >> pagesize;\n+        s >> encrypt_algo;\n+\n+        other_endian = magic == BTREE_MAGIC_OE;\n+\n+        uint8_t uint8_type;\n+        s >> uint8_type;\n+        type = static_cast<PageType>(uint8_type);\n+\n+        s >> metaflags;\n+        s >> unused1;\n+        s >> free_list;\n+        s >> last_page;\n+        s >> partitions;\n+        s >> key_count;\n+        s >> record_count;\n+\n+        uint32_t uint32_flags;\n+        s >> uint32_flags;\n+        if (other_endian) {\n+            uint32_flags = bswap_32(uint32_flags);\n+        }\n+        flags = static_cast<BTreeFlags>(uint32_flags);\n+\n+        s >> uid;\n+        s >> unused2;\n+        s >> minkey;\n+        s >> re_len;\n+        s >> re_pad;\n+        s >> root;\n+        s >> unused3;\n+        s >> crypto_magic;\n+        s >> trash;\n+        s >> iv;\n+        s >> chksum;\n+\n+        if (other_endian) {\n+            lsn = bswap_64(lsn);\n+            page_num = bswap_32(page_num);\n+            magic = bswap_32(magic);\n+            version = bswap_32(version);\n+            pagesize = bswap_32(pagesize);\n+            free_list = bswap_32(free_list);\n+            last_page = bswap_32(last_page);\n+            partitions = bswap_32(partitions);\n+            key_count = bswap_32(key_count);\n+            record_count = bswap_32(record_count);\n+            unused2 = bswap_32(unused2);\n+            minkey = bswap_32(minkey);\n+            re_len = bswap_32(re_len);\n+            re_pad = bswap_32(re_pad);\n+            root = bswap_32(root);\n+            crypto_magic = bswap_32(crypto_magic);\n+        }\n+    }\n+};\n+\n+/** General class for records in a BDB BTree database. Contains common fields. */\n+class RecordHeader\n+{\n+public:\n+    uint16_t len;  // Key/data item length\n+    RecordType type;  // Page type and DELETE FLAG\n+\n+    static constexpr size_t SIZE = 3; // The record header is 3 bytes\n+\n+    bool other_endian;\n+\n+    RecordHeader(bool other_endian) : other_endian(other_endian) {}\n+    RecordHeader() = delete;\n+\n+    RecordType GetRealType() const\n+    {\n+        return static_cast<RecordType>(static_cast<uint8_t>(type) & ~static_cast<uint8_t>(RecordType::DELETE));\n+    }\n+\n+    bool IsDeleted() const\n+    {\n+        return static_cast<uint8_t>(type) & static_cast<uint8_t>(RecordType::DELETE);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> len;\n+\n+        uint8_t uint8_type;\n+        s >> uint8_type;\n+        type = static_cast<RecordType>(uint8_type);\n+\n+        if (other_endian) {\n+            len = bswap_16(len);\n+        }\n+    }\n+};\n+\n+/** Class for data in the record directly */\n+class DataRecord\n+{\n+public:\n+    DataRecord(const RecordHeader& header) : m_header(header) {}\n+    DataRecord() = delete;\n+\n+    RecordHeader m_header;\n+\n+    std::vector<std::byte> data; // Variable length key/data item\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        data.resize(m_header.len);\n+        s.read(AsWritableBytes(Span(data.data(), data.size())));\n+    }\n+};\n+\n+/** Class for records representing internal nodes of the BTree. */\n+class InternalRecord\n+{\n+public:\n+    InternalRecord(const RecordHeader& header) : m_header(header) {}\n+    InternalRecord() = delete;\n+\n+    RecordHeader m_header;\n+\n+    uint8_t unused;                   // Padding, unused\n+    uint32_t page_num;                // Page number of referenced page\n+    uint32_t records;                 // Subtree record count\n+    std::vector<std::byte> data;  // Variable length key item\n+\n+    static constexpr size_t FIXED_SIZE = 9; // Size of fixed data is 9 bytes\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> unused;\n+        s >> page_num;\n+        s >> records;\n+\n+        data.resize(m_header.len);\n+        s.read(AsWritableBytes(Span(data.data(), data.size())));\n+\n+        if (m_header.other_endian) {\n+            page_num = bswap_32(page_num);\n+            records = bswap_32(records);\n+        }\n+    }\n+};\n+\n+/** Class for records representing overflow records of the BTree.\n+ * Overflow records point to a page which contains the data in the record.\n+ * Those pages may point to further pages with the rest of the data if it does not fit\n+ * in one page */\n+class OverflowRecord\n+{\n+public:\n+    OverflowRecord(const RecordHeader& header) : m_header(header) {}\n+    OverflowRecord() = delete;\n+\n+    RecordHeader m_header;\n+\n+    uint8_t unused2;      // Padding, unused\n+    uint32_t page_number; // Page number where data begins\n+    uint32_t item_len;    // Total length of item\n+\n+    static constexpr size_t SIZE = 9; // Overflow record is always 9 bytes\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> unused2;\n+        s >> page_number;\n+        s >> item_len;\n+\n+        if (m_header.other_endian) {\n+            page_number = bswap_32(page_number);\n+            item_len = bswap_32(item_len);\n+        }\n+    }\n+};\n+\n+/** A generic data page in the database. Contains fields common to all data pages. */\n+class PageHeader\n+{\n+public:\n+    uint64_t lsn;       // Log Sequence Number\n+    uint32_t page_num;  // Current page number\n+    uint32_t prev_page; // Previous page number\n+    uint32_t next_page; // Next page number\n+    uint16_t entries;   // Number of items on the page\n+    uint16_t hf_offset; // High free byte page offset\n+    uint8_t level;      // Btree page level\n+    PageType type;      // Page type\n+\n+    static constexpr int64_t SIZE = 26; // The header is 26 bytes\n+\n+    bool other_endian;\n+\n+    PageHeader(bool other_endian) : other_endian(other_endian) {}\n+    PageHeader() = delete;\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> lsn;\n+        s >> page_num;\n+        s >> prev_page;\n+        s >> next_page;\n+        s >> entries;\n+        s >> hf_offset;\n+        s >> level;\n+\n+        uint8_t uint8_type;\n+        s >> uint8_type;\n+        type = static_cast<PageType>(uint8_type);\n+\n+        if (other_endian) {\n+            lsn = bswap_64(lsn);\n+            page_num = bswap_32(page_num);\n+            prev_page = bswap_32(prev_page);\n+            next_page = bswap_32(next_page);\n+            entries = bswap_16(entries);\n+            hf_offset = bswap_16(hf_offset);\n+        }\n+    }\n+};\n+\n+/** A page of records in the database */\n+class RecordsPage\n+{\n+public:\n+    RecordsPage(const PageHeader& header) : m_header(header) {}\n+    RecordsPage() = delete;\n+\n+    PageHeader m_header;\n+\n+    std::vector<uint16_t> indexes;\n+    std::vector<std::variant<DataRecord, OverflowRecord>> records;\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        // Current position within the page\n+        int64_t pos = PageHeader::SIZE;\n+\n+        // Get the items\n+        for (uint32_t i = 0; i < m_header.entries; ++i) {\n+            // Get the index\n+            uint16_t index;\n+            s >> index;\n+            if (m_header.other_endian) {\n+                index = bswap_16(index);\n+            }\n+            indexes.push_back(index);\n+            pos += sizeof(uint16_t);\n+\n+            // Go to the offset from the index\n+            int64_t to_jump = index - pos;\n+            s.ignore(to_jump);\n+\n+            // Read the record\n+            RecordHeader rec_hdr(m_header.other_endian);\n+            s >> rec_hdr;\n+            to_jump += RecordHeader::SIZE;\n+\n+            switch (rec_hdr.GetRealType()) {\n+            case RecordType::KEYDATA:\n+            {\n+                DataRecord record(rec_hdr);\n+                s >> record;\n+                records.push_back(record);\n+                to_jump += rec_hdr.len;\n+                break;\n+            }\n+            case RecordType::DUPLICATE:\n+            case RecordType::OVERFLOW_DATA:\n+            {\n+                OverflowRecord record(rec_hdr);\n+                s >> record;\n+                records.push_back(record);\n+                to_jump += OverflowRecord::SIZE;\n+                break;\n+            }\n+            default:\n+                throw std::runtime_error(\"Unknown record type in records page\");\n+            }\n+\n+            // Go back to the indexes\n+            s.seek(-to_jump, SEEK_CUR);\n+        }\n+    }\n+};\n+\n+/** A page containing overflow data */\n+class OverflowPage\n+{\n+public:\n+    OverflowPage(const PageHeader& header) : m_header(header) {}\n+    OverflowPage() = delete;\n+\n+    PageHeader m_header;\n+\n+    // BDB overloads some page fields to store overflow page data\n+    // hf_offset contains the length of the overflow data stored on this page\n+    // entries contains a reference count for references to this item\n+\n+    // The overflow data itself. Begins immediately following header\n+    std::vector<std::byte> data;\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        data.resize(m_header.hf_offset);\n+        s.read(AsWritableBytes(Span(data.data(), data.size())));\n+    }\n+};\n+\n+/** A page of records in the database */\n+class InternalPage\n+{\n+public:\n+    InternalPage(const PageHeader& header) : m_header(header) {}\n+    InternalPage() = delete;\n+\n+    PageHeader m_header;\n+\n+    std::vector<uint16_t> indexes;\n+    std::vector<InternalRecord> records;\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        // Current position within the page\n+        int64_t pos = PageHeader::SIZE;\n+\n+        // Get the items\n+        for (uint32_t i = 0; i < m_header.entries; ++i) {\n+            // Get the index\n+            uint16_t index;\n+            s >> index;\n+            if (m_header.other_endian) {\n+                index = bswap_16(index);\n+            }\n+            indexes.push_back(index);\n+            pos += sizeof(uint16_t);\n+\n+            // Go to the offset from the index\n+            int64_t to_jump = index - pos;\n+            s.ignore(to_jump);\n+\n+            // Read the record\n+            RecordHeader rec_hdr(m_header.other_endian);\n+            s >> rec_hdr;\n+            to_jump += RecordHeader::SIZE;\n+\n+            if (rec_hdr.GetRealType() != RecordType::KEYDATA) {\n+                throw std::runtime_error(\"Unknown record type in internal page\");\n+            }\n+            InternalRecord record(rec_hdr);\n+            s >> record;\n+            records.push_back(record);\n+            to_jump += InternalRecord::FIXED_SIZE + rec_hdr.len;\n+\n+            // Go back to the indexes\n+            s.seek(-to_jump, SEEK_CUR);\n+\n+        }\n+    }\n+};\n+\n+static MetaPage ReadMetaPage(CAutoFile& f)\n+{\n+    // Read the metapage\n+    MetaPage meta;\n+    f >> meta;\n+\n+    // Sanity checks\n+    if (meta.magic != BTREE_MAGIC) {\n+        throw std::runtime_error(\"Not a BDB file\");\n+    }\n+    if (meta.version != 9) {\n+        throw std::runtime_error(\"Unsupported BDB data file version number\");\n+    }\n+    if (meta.type != PageType::BTREE_META) {\n+        throw std::runtime_error(\"Unexpected page type, should be 9 (BTree Metadata)\");\n+    }\n+    if (meta.flags != BTreeFlags::SUBDB) {\n+        throw std::runtime_error(\"Unexpected database flags, should only be 0x20 (subdatabases)\");\n+    }\n+\n+    return meta;\n+}\n+\n+static void SeekToPage(CAutoFile& s, uint32_t page_num, uint32_t page_size)\n+{\n+    size_t pos = page_num * page_size;\n+    s.seek(pos, SEEK_SET);\n+}\n+\n+void BerkeleyRODatabase::Open()\n+{\n+    // Open the file\n+    FILE *file = fsbridge::fopen(m_filepath, \"rb\");\n+    CAutoFile db_file(file, 0, 0);\n+    if (db_file.IsNull()) {\n+        db_file.fclose();\n+        throw std::runtime_error(\"BerkeleyRODatabase: Failed to open database file\");\n+    }\n+\n+    uint32_t page_size = 4096; // Default page size\n+\n+    // Read the outer metapage\n+    MetaPage outer_meta = ReadMetaPage(db_file);\n+    page_size = outer_meta.pagesize;\n+\n+    // Read the root page\n+    SeekToPage(db_file, outer_meta.root, page_size);\n+    PageHeader header(outer_meta.other_endian);\n+    db_file >> header;\n+    if (header.type != PageType::BTREE_LEAF) {\n+        throw std::runtime_error(\"Unexpected outer database root page type\");\n+    }\n+    if (header.entries != 2) {\n+        throw std::runtime_error(\"Unexpected number of entries in outer database root page\");\n+    }\n+    RecordsPage page(header);\n+    db_file >> page;\n+\n+    // First record should be the string \"main\"\n+    if (!std::holds_alternative<DataRecord>(page.records.at(0)) || std::get_if<DataRecord>(&page.records.at(0))->data != std::vector<std::byte>({std::byte('m'), std::byte('a'), std::byte('i'), std::byte('n')})) {",
      "path": "src/wallet/migrate.cpp",
      "position": null,
      "original_position": 527,
      "commit_id": "0dd59f3769bfb7cb15f7a93aa5efac66e3c3e50e",
      "original_commit_id": "6e28ff97a99519ec8b50123bc1177084bba68f96",
      "in_reply_to_id": 1273993906,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2023-08-01T19:30:40Z",
      "updated_at": "2023-08-01T19:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1281063486",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1281063486"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 527,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1281063610",
      "pull_request_review_id": 1557686133,
      "id": 1281063610,
      "node_id": "PRRC_kwDOABII585MW3q6",
      "diff_hunk": "@@ -0,0 +1,683 @@\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <compat/byteswap.h>\n+#include <crypto/common.h> // For ReadBE32\n+#include <logging.h>\n+#include <streams.h>\n+#include <uint256.h>\n+#include <wallet/migrate.h>\n+\n+#include <optional>\n+#include <variant>\n+\n+namespace wallet {\n+// Magic bytes in both endianness's\n+constexpr uint32_t BTREE_MAGIC = 0x00053162; // If the file endianness matches our system, we see this magic\n+constexpr uint32_t BTREE_MAGIC_OE = 0x62310500; // If the file endianness is the other one, we will see this magic\n+\n+enum class PageType : uint8_t\n+{\n+    INVALID = 0,         // Invalid page type\n+    DUPLICATE = 1,       // Duplicate. Deprecated and no longer used\n+    HASH_UNSORTED = 2,   // Hash pages. Deprecated.\n+    BTREE_INTERNAL = 3,  // BTree internal\n+    RECNO_INTERNAL = 4,  // Recno internal\n+    BTREE_LEAF = 5,      // BTree leaf\n+    RECNO_LEAF = 6,      // Recno leaf\n+    OVERFLOW_DATA = 7,        // Overflow\n+    HASH_META = 8,       // Hash metadata\n+    BTREE_META = 9,      // BTree metadata\n+    QUEUE_META = 10,     // Queue Metadata\n+    QUEUE_DATA = 11,     // Queue Data\n+    DUPLICATE_LEAF = 12, // Off-page duplicate leaf\n+    HASH_SORTED = 13,    // Sorted hash page\n+\n+    PAGETYPE_MAX = 14,\n+};\n+\n+enum class RecordType : uint8_t\n+{\n+    KEYDATA = 1,\n+    DUPLICATE = 2,\n+    OVERFLOW_DATA = 3,\n+    DELETE = 0x80, // Indicate this record is deleted. This is AND'd with the real type.\n+};\n+\n+enum class BTreeFlags : uint32_t\n+{\n+    DUP = 1,         // Duplicates\n+    RECNO = 2,       // Recno tree\n+    RECNUM = 4,      // BTree: Maintain record counts\n+    FIXEDLEN = 8,    // Recno: fixed length records\n+    RENUMBER = 0x10, // Recno: renumber on insert/delete\n+    SUBDB = 0x20,    // Subdatabases\n+    DUPSORT = 0x40,  // Duplicates are sorted\n+    COMPRESS = 0x80, // Compressed\n+};\n+\n+/** Berkeley DB BTree metadata page layout */\n+class MetaPage\n+{\n+public:\n+    uint64_t lsn;             // Log Sequence Number\n+    uint32_t page_num;        // Current page number\n+    uint32_t magic;           // Magic number\n+    uint32_t version;         // Version\n+    uint32_t pagesize;        // Page size\n+    uint8_t encrypt_algo;     // Encryption algorithm\n+    PageType type;            // Page type\n+    uint8_t metaflags;        // Meta-only flags\n+    uint8_t unused1;          // Unused\n+    uint32_t free_list;       // Free list page number\n+    uint32_t last_page;       // Page number of last page in db\n+    uint32_t partitions;      // Number of partitions\n+    uint32_t key_count;       // Cached key count\n+    uint32_t record_count;    // Cached record count\n+    BTreeFlags flags;         // Flags\n+    uint160 uid;              // Unique file ID (20 bytes, fits in uint16)\n+    uint32_t unused2;         // Unused\n+    uint32_t minkey;          // Minimum key\n+    uint32_t re_len;          // Recno: fixed length record length\n+    uint32_t re_pad;          // Recno: fixed length record pad\n+    uint32_t root;            // Root page number\n+    char unused3[368];        // 92 * 4 bytes of unused space\n+    uint32_t crypto_magic;    // Crypto magic number\n+    char trash[12];           // 3 * 4 bytes of trash space\n+    unsigned char iv[20];     // Crypto IV\n+    unsigned char chksum[16]; // Checksum\n+\n+    bool other_endian;\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> lsn;\n+        s >> page_num;\n+        s >> magic;\n+        s >> version;\n+        s >> pagesize;\n+        s >> encrypt_algo;\n+\n+        other_endian = magic == BTREE_MAGIC_OE;\n+\n+        uint8_t uint8_type;\n+        s >> uint8_type;\n+        type = static_cast<PageType>(uint8_type);\n+\n+        s >> metaflags;\n+        s >> unused1;\n+        s >> free_list;\n+        s >> last_page;\n+        s >> partitions;\n+        s >> key_count;\n+        s >> record_count;\n+\n+        uint32_t uint32_flags;\n+        s >> uint32_flags;\n+        if (other_endian) {\n+            uint32_flags = bswap_32(uint32_flags);\n+        }\n+        flags = static_cast<BTreeFlags>(uint32_flags);\n+\n+        s >> uid;\n+        s >> unused2;\n+        s >> minkey;\n+        s >> re_len;\n+        s >> re_pad;\n+        s >> root;\n+        s >> unused3;\n+        s >> crypto_magic;\n+        s >> trash;\n+        s >> iv;\n+        s >> chksum;\n+\n+        if (other_endian) {\n+            lsn = bswap_64(lsn);\n+            page_num = bswap_32(page_num);\n+            magic = bswap_32(magic);\n+            version = bswap_32(version);\n+            pagesize = bswap_32(pagesize);\n+            free_list = bswap_32(free_list);\n+            last_page = bswap_32(last_page);\n+            partitions = bswap_32(partitions);\n+            key_count = bswap_32(key_count);\n+            record_count = bswap_32(record_count);\n+            unused2 = bswap_32(unused2);\n+            minkey = bswap_32(minkey);\n+            re_len = bswap_32(re_len);\n+            re_pad = bswap_32(re_pad);\n+            root = bswap_32(root);\n+            crypto_magic = bswap_32(crypto_magic);\n+        }\n+    }\n+};\n+\n+/** General class for records in a BDB BTree database. Contains common fields. */\n+class RecordHeader\n+{\n+public:\n+    uint16_t len;  // Key/data item length\n+    RecordType type;  // Page type and DELETE FLAG\n+\n+    static constexpr size_t SIZE = 3; // The record header is 3 bytes\n+\n+    bool other_endian;\n+\n+    RecordHeader(bool other_endian) : other_endian(other_endian) {}\n+    RecordHeader() = delete;\n+\n+    RecordType GetRealType() const\n+    {\n+        return static_cast<RecordType>(static_cast<uint8_t>(type) & ~static_cast<uint8_t>(RecordType::DELETE));\n+    }\n+\n+    bool IsDeleted() const\n+    {\n+        return static_cast<uint8_t>(type) & static_cast<uint8_t>(RecordType::DELETE);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> len;\n+\n+        uint8_t uint8_type;\n+        s >> uint8_type;\n+        type = static_cast<RecordType>(uint8_type);\n+\n+        if (other_endian) {\n+            len = bswap_16(len);\n+        }\n+    }\n+};\n+\n+/** Class for data in the record directly */\n+class DataRecord\n+{\n+public:\n+    DataRecord(const RecordHeader& header) : m_header(header) {}\n+    DataRecord() = delete;\n+\n+    RecordHeader m_header;\n+\n+    std::vector<std::byte> data; // Variable length key/data item\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        data.resize(m_header.len);\n+        s.read(AsWritableBytes(Span(data.data(), data.size())));\n+    }\n+};\n+\n+/** Class for records representing internal nodes of the BTree. */\n+class InternalRecord\n+{\n+public:\n+    InternalRecord(const RecordHeader& header) : m_header(header) {}\n+    InternalRecord() = delete;\n+\n+    RecordHeader m_header;\n+\n+    uint8_t unused;                   // Padding, unused\n+    uint32_t page_num;                // Page number of referenced page\n+    uint32_t records;                 // Subtree record count\n+    std::vector<std::byte> data;  // Variable length key item\n+\n+    static constexpr size_t FIXED_SIZE = 9; // Size of fixed data is 9 bytes\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> unused;\n+        s >> page_num;\n+        s >> records;\n+\n+        data.resize(m_header.len);\n+        s.read(AsWritableBytes(Span(data.data(), data.size())));\n+\n+        if (m_header.other_endian) {\n+            page_num = bswap_32(page_num);\n+            records = bswap_32(records);\n+        }\n+    }\n+};\n+\n+/** Class for records representing overflow records of the BTree.\n+ * Overflow records point to a page which contains the data in the record.\n+ * Those pages may point to further pages with the rest of the data if it does not fit\n+ * in one page */\n+class OverflowRecord\n+{\n+public:\n+    OverflowRecord(const RecordHeader& header) : m_header(header) {}\n+    OverflowRecord() = delete;\n+\n+    RecordHeader m_header;\n+\n+    uint8_t unused2;      // Padding, unused\n+    uint32_t page_number; // Page number where data begins\n+    uint32_t item_len;    // Total length of item\n+\n+    static constexpr size_t SIZE = 9; // Overflow record is always 9 bytes\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> unused2;\n+        s >> page_number;\n+        s >> item_len;\n+\n+        if (m_header.other_endian) {\n+            page_number = bswap_32(page_number);\n+            item_len = bswap_32(item_len);\n+        }\n+    }\n+};\n+\n+/** A generic data page in the database. Contains fields common to all data pages. */\n+class PageHeader\n+{\n+public:\n+    uint64_t lsn;       // Log Sequence Number\n+    uint32_t page_num;  // Current page number\n+    uint32_t prev_page; // Previous page number\n+    uint32_t next_page; // Next page number\n+    uint16_t entries;   // Number of items on the page\n+    uint16_t hf_offset; // High free byte page offset\n+    uint8_t level;      // Btree page level\n+    PageType type;      // Page type\n+\n+    static constexpr int64_t SIZE = 26; // The header is 26 bytes\n+\n+    bool other_endian;\n+\n+    PageHeader(bool other_endian) : other_endian(other_endian) {}\n+    PageHeader() = delete;\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> lsn;\n+        s >> page_num;\n+        s >> prev_page;\n+        s >> next_page;\n+        s >> entries;\n+        s >> hf_offset;\n+        s >> level;\n+\n+        uint8_t uint8_type;\n+        s >> uint8_type;\n+        type = static_cast<PageType>(uint8_type);\n+\n+        if (other_endian) {\n+            lsn = bswap_64(lsn);\n+            page_num = bswap_32(page_num);\n+            prev_page = bswap_32(prev_page);\n+            next_page = bswap_32(next_page);\n+            entries = bswap_16(entries);\n+            hf_offset = bswap_16(hf_offset);\n+        }\n+    }\n+};\n+\n+/** A page of records in the database */\n+class RecordsPage\n+{\n+public:\n+    RecordsPage(const PageHeader& header) : m_header(header) {}\n+    RecordsPage() = delete;\n+\n+    PageHeader m_header;\n+\n+    std::vector<uint16_t> indexes;\n+    std::vector<std::variant<DataRecord, OverflowRecord>> records;\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        // Current position within the page\n+        int64_t pos = PageHeader::SIZE;\n+\n+        // Get the items\n+        for (uint32_t i = 0; i < m_header.entries; ++i) {\n+            // Get the index\n+            uint16_t index;\n+            s >> index;\n+            if (m_header.other_endian) {\n+                index = bswap_16(index);\n+            }\n+            indexes.push_back(index);\n+            pos += sizeof(uint16_t);\n+\n+            // Go to the offset from the index\n+            int64_t to_jump = index - pos;\n+            s.ignore(to_jump);\n+\n+            // Read the record\n+            RecordHeader rec_hdr(m_header.other_endian);\n+            s >> rec_hdr;\n+            to_jump += RecordHeader::SIZE;\n+\n+            switch (rec_hdr.GetRealType()) {\n+            case RecordType::KEYDATA:\n+            {\n+                DataRecord record(rec_hdr);\n+                s >> record;\n+                records.push_back(record);\n+                to_jump += rec_hdr.len;\n+                break;\n+            }\n+            case RecordType::DUPLICATE:\n+            case RecordType::OVERFLOW_DATA:\n+            {\n+                OverflowRecord record(rec_hdr);\n+                s >> record;\n+                records.push_back(record);\n+                to_jump += OverflowRecord::SIZE;\n+                break;\n+            }\n+            default:\n+                throw std::runtime_error(\"Unknown record type in records page\");\n+            }\n+\n+            // Go back to the indexes\n+            s.seek(-to_jump, SEEK_CUR);\n+        }\n+    }\n+};\n+\n+/** A page containing overflow data */\n+class OverflowPage\n+{\n+public:\n+    OverflowPage(const PageHeader& header) : m_header(header) {}\n+    OverflowPage() = delete;\n+\n+    PageHeader m_header;\n+\n+    // BDB overloads some page fields to store overflow page data\n+    // hf_offset contains the length of the overflow data stored on this page\n+    // entries contains a reference count for references to this item\n+\n+    // The overflow data itself. Begins immediately following header\n+    std::vector<std::byte> data;\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        data.resize(m_header.hf_offset);\n+        s.read(AsWritableBytes(Span(data.data(), data.size())));\n+    }\n+};\n+\n+/** A page of records in the database */\n+class InternalPage\n+{\n+public:\n+    InternalPage(const PageHeader& header) : m_header(header) {}\n+    InternalPage() = delete;\n+\n+    PageHeader m_header;\n+\n+    std::vector<uint16_t> indexes;\n+    std::vector<InternalRecord> records;\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        // Current position within the page\n+        int64_t pos = PageHeader::SIZE;\n+\n+        // Get the items\n+        for (uint32_t i = 0; i < m_header.entries; ++i) {\n+            // Get the index\n+            uint16_t index;\n+            s >> index;\n+            if (m_header.other_endian) {\n+                index = bswap_16(index);\n+            }\n+            indexes.push_back(index);\n+            pos += sizeof(uint16_t);\n+\n+            // Go to the offset from the index\n+            int64_t to_jump = index - pos;\n+            s.ignore(to_jump);\n+\n+            // Read the record\n+            RecordHeader rec_hdr(m_header.other_endian);\n+            s >> rec_hdr;\n+            to_jump += RecordHeader::SIZE;\n+\n+            if (rec_hdr.GetRealType() != RecordType::KEYDATA) {\n+                throw std::runtime_error(\"Unknown record type in internal page\");\n+            }\n+            InternalRecord record(rec_hdr);\n+            s >> record;\n+            records.push_back(record);\n+            to_jump += InternalRecord::FIXED_SIZE + rec_hdr.len;\n+\n+            // Go back to the indexes\n+            s.seek(-to_jump, SEEK_CUR);\n+\n+        }\n+    }\n+};\n+\n+static MetaPage ReadMetaPage(CAutoFile& f)\n+{\n+    // Read the metapage\n+    MetaPage meta;\n+    f >> meta;\n+\n+    // Sanity checks\n+    if (meta.magic != BTREE_MAGIC) {\n+        throw std::runtime_error(\"Not a BDB file\");\n+    }\n+    if (meta.version != 9) {\n+        throw std::runtime_error(\"Unsupported BDB data file version number\");\n+    }\n+    if (meta.type != PageType::BTREE_META) {\n+        throw std::runtime_error(\"Unexpected page type, should be 9 (BTree Metadata)\");\n+    }\n+    if (meta.flags != BTreeFlags::SUBDB) {\n+        throw std::runtime_error(\"Unexpected database flags, should only be 0x20 (subdatabases)\");\n+    }\n+\n+    return meta;\n+}\n+\n+static void SeekToPage(CAutoFile& s, uint32_t page_num, uint32_t page_size)\n+{\n+    size_t pos = page_num * page_size;\n+    s.seek(pos, SEEK_SET);\n+}\n+\n+void BerkeleyRODatabase::Open()\n+{\n+    // Open the file\n+    FILE *file = fsbridge::fopen(m_filepath, \"rb\");\n+    CAutoFile db_file(file, 0, 0);\n+    if (db_file.IsNull()) {\n+        db_file.fclose();\n+        throw std::runtime_error(\"BerkeleyRODatabase: Failed to open database file\");\n+    }\n+\n+    uint32_t page_size = 4096; // Default page size\n+\n+    // Read the outer metapage\n+    MetaPage outer_meta = ReadMetaPage(db_file);\n+    page_size = outer_meta.pagesize;\n+\n+    // Read the root page\n+    SeekToPage(db_file, outer_meta.root, page_size);\n+    PageHeader header(outer_meta.other_endian);\n+    db_file >> header;\n+    if (header.type != PageType::BTREE_LEAF) {\n+        throw std::runtime_error(\"Unexpected outer database root page type\");\n+    }\n+    if (header.entries != 2) {\n+        throw std::runtime_error(\"Unexpected number of entries in outer database root page\");\n+    }\n+    RecordsPage page(header);\n+    db_file >> page;\n+\n+    // First record should be the string \"main\"\n+    if (!std::holds_alternative<DataRecord>(page.records.at(0)) || std::get_if<DataRecord>(&page.records.at(0))->data != std::vector<std::byte>({std::byte('m'), std::byte('a'), std::byte('i'), std::byte('n')})) {\n+        throw std::runtime_error(\"Subdatabase has an unexpected name\");\n+    }\n+    if (!std::holds_alternative<DataRecord>(page.records.at(1)) || std::get_if<DataRecord>(&page.records.at(1))->m_header.len != 4) {",
      "path": "src/wallet/migrate.cpp",
      "position": 534,
      "original_position": 530,
      "commit_id": "0dd59f3769bfb7cb15f7a93aa5efac66e3c3e50e",
      "original_commit_id": "6e28ff97a99519ec8b50123bc1177084bba68f96",
      "in_reply_to_id": 1274005925,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added a comment",
      "created_at": "2023-08-01T19:30:47Z",
      "updated_at": "2023-08-01T19:30:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1281063610",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1281063610"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 534,
      "original_line": 534,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1281063722",
      "pull_request_review_id": 1557686444,
      "id": 1281063722,
      "node_id": "PRRC_kwDOABII585MW3sq",
      "diff_hunk": "@@ -0,0 +1,75 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+#include <util/fs.h>\n+#include <util/time.h>\n+#include <util/translation.h>\n+#include <wallet/db.h>\n+#include <wallet/dump.h>\n+#include <wallet/migrate.h>\n+\n+#include <iostream>\n+\n+using wallet::DatabaseOptions;\n+using wallet::DatabaseStatus;\n+\n+namespace {\n+TestingSetup* g_setup;\n+} // namespace\n+\n+void initialize_wallet_bdb_parser()\n+{\n+    static auto testing_setup = MakeNoLogFileContext<TestingSetup>();\n+    g_setup = testing_setup.get();\n+}\n+\n+FUZZ_TARGET(wallet_bdb_parser, .init = initialize_wallet_bdb_parser)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+\n+    const auto wallet_path = g_setup->m_args.GetDataDirNet() / \"fuzzed_wallet.dat\";\n+\n+    {\n+        AutoFile outfile{fsbridge::fopen(wallet_path, \"wb\")};\n+        const auto file_data{ConsumeRandomLengthByteVector(fuzzed_data_provider)};\n+        outfile << Span{file_data};\n+    }\n+\n+    const DatabaseOptions options{};\n+    DatabaseStatus status;\n+    bilingual_str error;\n+\n+    fs::path dumpfile{g_setup->m_args.GetDataDirNet() / \"fuzzed_dumpfile.dat\"};\n+    if (fs::exists(dumpfile)) { // Writing into an existing dump file will throw an exception\n+        remove(dumpfile);\n+    }\n+    g_setup->m_args.ForceSetArg(\"-dumpfile\", fs::PathToString(dumpfile));\n+\n+    try {\n+        auto db{MakeBerkeleyRODatabase(wallet_path, options, status, error)};\n+        assert(DumpWallet(g_setup->m_args, *db, error));",
      "path": "src/wallet/test/fuzz/wallet_bdb_parser.cpp",
      "position": 58,
      "original_position": 55,
      "commit_id": "0dd59f3769bfb7cb15f7a93aa5efac66e3c3e50e",
      "original_commit_id": "6e28ff97a99519ec8b50123bc1177084bba68f96",
      "in_reply_to_id": 1279466130,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added a comparison",
      "created_at": "2023-08-01T19:30:55Z",
      "updated_at": "2023-08-01T19:30:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1281063722",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1281063722"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 58,
      "original_line": 58,
      "side": "RIGHT"
    }
  ]
}